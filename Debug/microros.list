
microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cff4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0801d188  0801d188  0001e188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e164  0801e164  0002035c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e164  0801e164  0001f164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e16c  0801e16c  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801e16c  0801e16c  0001f16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e17c  0801e17c  0001f17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  0801e180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002035c  2**0
                  CONTENTS
 10 .bss          0000e504  20000360  20000360  00020360  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000e864  2000e864  00020360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025db5  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a92  00000000  00000000  00046141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d58  00000000  00000000  0004bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001684  00000000  00000000  0004d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bc77  00000000  00000000  0004efb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000248cc  00000000  00000000  0005ac2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e745b  00000000  00000000  0007f4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  00166952  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088cc  00000000  00000000  001669c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0016f294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d16c 	.word	0x0801d16c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0801d16c 	.word	0x0801d16c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_d2f>:
 80002a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80002a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80002a8:	bf24      	itt	cs
 80002aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80002ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80002b2:	d90d      	bls.n	80002d0 <__aeabi_d2f+0x30>
 80002b4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80002bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80002c0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80002c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80002c8:	bf08      	it	eq
 80002ca:	f020 0001 	biceq.w	r0, r0, #1
 80002ce:	4770      	bx	lr
 80002d0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80002d4:	d121      	bne.n	800031a <__aeabi_d2f+0x7a>
 80002d6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80002da:	bfbc      	itt	lt
 80002dc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80002e0:	4770      	bxlt	lr
 80002e2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80002ea:	f1c2 0218 	rsb	r2, r2, #24
 80002ee:	f1c2 0c20 	rsb	ip, r2, #32
 80002f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80002f6:	fa20 f002 	lsr.w	r0, r0, r2
 80002fa:	bf18      	it	ne
 80002fc:	f040 0001 	orrne.w	r0, r0, #1
 8000300:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000304:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000308:	fa03 fc0c 	lsl.w	ip, r3, ip
 800030c:	ea40 000c 	orr.w	r0, r0, ip
 8000310:	fa23 f302 	lsr.w	r3, r3, r2
 8000314:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000318:	e7cc      	b.n	80002b4 <__aeabi_d2f+0x14>
 800031a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800031e:	d107      	bne.n	8000330 <__aeabi_d2f+0x90>
 8000320:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000324:	bf1e      	ittt	ne
 8000326:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800032a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800032e:	4770      	bxne	lr
 8000330:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000334:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000338:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_ldivmod>:
 8000340:	b97b      	cbnz	r3, 8000362 <__aeabi_ldivmod+0x22>
 8000342:	b972      	cbnz	r2, 8000362 <__aeabi_ldivmod+0x22>
 8000344:	2900      	cmp	r1, #0
 8000346:	bfbe      	ittt	lt
 8000348:	2000      	movlt	r0, #0
 800034a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800034e:	e006      	blt.n	800035e <__aeabi_ldivmod+0x1e>
 8000350:	bf08      	it	eq
 8000352:	2800      	cmpeq	r0, #0
 8000354:	bf1c      	itt	ne
 8000356:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800035a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800035e:	f000 b9d3 	b.w	8000708 <__aeabi_idiv0>
 8000362:	f1ad 0c08 	sub.w	ip, sp, #8
 8000366:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800036a:	2900      	cmp	r1, #0
 800036c:	db09      	blt.n	8000382 <__aeabi_ldivmod+0x42>
 800036e:	2b00      	cmp	r3, #0
 8000370:	db1a      	blt.n	80003a8 <__aeabi_ldivmod+0x68>
 8000372:	f000 f84d 	bl	8000410 <__udivmoddi4>
 8000376:	f8dd e004 	ldr.w	lr, [sp, #4]
 800037a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037e:	b004      	add	sp, #16
 8000380:	4770      	bx	lr
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	db1b      	blt.n	80003c4 <__aeabi_ldivmod+0x84>
 800038c:	f000 f840 	bl	8000410 <__udivmoddi4>
 8000390:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000398:	b004      	add	sp, #16
 800039a:	4240      	negs	r0, r0
 800039c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003a0:	4252      	negs	r2, r2
 80003a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a6:	4770      	bx	lr
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	f000 f82f 	bl	8000410 <__udivmoddi4>
 80003b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ba:	b004      	add	sp, #16
 80003bc:	4240      	negs	r0, r0
 80003be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003c2:	4770      	bx	lr
 80003c4:	4252      	negs	r2, r2
 80003c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ca:	f000 f821 	bl	8000410 <__udivmoddi4>
 80003ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d6:	b004      	add	sp, #16
 80003d8:	4252      	negs	r2, r2
 80003da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000718:	f00c fb76 	bl	800ce08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800071c:	4b5a      	ldr	r3, [pc, #360]	@ (8000888 <pvPortMallocMicroROS+0x17c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000724:	f000 f986 	bl	8000a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000728:	4b58      	ldr	r3, [pc, #352]	@ (800088c <pvPortMallocMicroROS+0x180>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4013      	ands	r3, r2
 8000730:	2b00      	cmp	r3, #0
 8000732:	f040 8090 	bne.w	8000856 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d01e      	beq.n	800077a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800073c:	2208      	movs	r2, #8
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	2b00      	cmp	r3, #0
 800074c:	d015      	beq.n	800077a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f023 0307 	bic.w	r3, r3, #7
 8000754:	3308      	adds	r3, #8
 8000756:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00b      	beq.n	800077a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000766:	f383 8811 	msr	BASEPRI, r3
 800076a:	f3bf 8f6f 	isb	sy
 800076e:	f3bf 8f4f 	dsb	sy
 8000772:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	e7fd      	b.n	8000776 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d06a      	beq.n	8000856 <pvPortMallocMicroROS+0x14a>
 8000780:	4b43      	ldr	r3, [pc, #268]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	429a      	cmp	r2, r3
 8000788:	d865      	bhi.n	8000856 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800078a:	4b42      	ldr	r3, [pc, #264]	@ (8000894 <pvPortMallocMicroROS+0x188>)
 800078c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800078e:	4b41      	ldr	r3, [pc, #260]	@ (8000894 <pvPortMallocMicroROS+0x188>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000794:	e004      	b.n	80007a0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000798:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800079a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d903      	bls.n	80007b2 <pvPortMallocMicroROS+0xa6>
 80007aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f1      	bne.n	8000796 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80007b2:	4b35      	ldr	r3, [pc, #212]	@ (8000888 <pvPortMallocMicroROS+0x17c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d04c      	beq.n	8000856 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2208      	movs	r2, #8
 80007c2:	4413      	add	r3, r2
 80007c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80007c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	2308      	movs	r3, #8
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	429a      	cmp	r2, r3
 80007dc:	d920      	bls.n	8000820 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80007de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4413      	add	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00b      	beq.n	8000808 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80007f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007f4:	f383 8811 	msr	BASEPRI, r3
 80007f8:	f3bf 8f6f 	isb	sy
 80007fc:	f3bf 8f4f 	dsb	sy
 8000800:	613b      	str	r3, [r7, #16]
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	1ad2      	subs	r2, r2, r3
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800081a:	69b8      	ldr	r0, [r7, #24]
 800081c:	f000 f96c 	bl	8000af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	4a19      	ldr	r2, [pc, #100]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 800082c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <pvPortMallocMicroROS+0x18c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d203      	bcs.n	8000842 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a16      	ldr	r2, [pc, #88]	@ (8000898 <pvPortMallocMicroROS+0x18c>)
 8000840:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <pvPortMallocMicroROS+0x180>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	431a      	orrs	r2, r3
 800084c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000856:	f00c fae5 	bl	800ce24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	f003 0307 	and.w	r3, r3, #7
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00b      	beq.n	800087c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000868:	f383 8811 	msr	BASEPRI, r3
 800086c:	f3bf 8f6f 	isb	sy
 8000870:	f3bf 8f4f 	dsb	sy
 8000874:	60fb      	str	r3, [r7, #12]
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800087c:	69fb      	ldr	r3, [r7, #28]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3728      	adds	r7, #40	@ 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20003f84 	.word	0x20003f84
 800088c:	20003f90 	.word	0x20003f90
 8000890:	20003f88 	.word	0x20003f88
 8000894:	20003f7c 	.word	0x20003f7c
 8000898:	20003f8c 	.word	0x20003f8c

0800089c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d04a      	beq.n	8000944 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008ae:	2308      	movs	r3, #8
 80008b0:	425b      	negs	r3, r3
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	4413      	add	r3, r2
 80008b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <vPortFreeMicroROS+0xb0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10b      	bne.n	80008e2 <vPortFreeMicroROS+0x46>
	__asm volatile
 80008ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ce:	f383 8811 	msr	BASEPRI, r3
 80008d2:	f3bf 8f6f 	isb	sy
 80008d6:	f3bf 8f4f 	dsb	sy
 80008da:	60fb      	str	r3, [r7, #12]
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00b      	beq.n	8000902 <vPortFreeMicroROS+0x66>
	__asm volatile
 80008ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ee:	f383 8811 	msr	BASEPRI, r3
 80008f2:	f3bf 8f6f 	isb	sy
 80008f6:	f3bf 8f4f 	dsb	sy
 80008fa:	60bb      	str	r3, [r7, #8]
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	e7fd      	b.n	80008fe <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <vPortFreeMicroROS+0xb0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4013      	ands	r3, r2
 800090c:	2b00      	cmp	r3, #0
 800090e:	d019      	beq.n	8000944 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d115      	bne.n	8000944 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <vPortFreeMicroROS+0xb0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	43db      	mvns	r3, r3
 8000922:	401a      	ands	r2, r3
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000928:	f00c fa6e 	bl	800ce08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <vPortFreeMicroROS+0xb4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4413      	add	r3, r2
 8000936:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <vPortFreeMicroROS+0xb4>)
 8000938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800093a:	6938      	ldr	r0, [r7, #16]
 800093c:	f000 f8dc 	bl	8000af8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000940:	f00c fa70 	bl	800ce24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20003f90 	.word	0x20003f90
 8000950:	20003f88 	.word	0x20003f88

08000954 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000954:	b480      	push	{r7}
 8000956:	b087      	sub	sp, #28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000960:	2308      	movs	r3, #8
 8000962:	425b      	negs	r3, r3
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	4413      	add	r3, r2
 8000968:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <getBlockSize+0x38>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	43db      	mvns	r3, r3
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

	return count;
 800097c:	68fb      	ldr	r3, [r7, #12]
}
 800097e:	4618      	mov	r0, r3
 8000980:	371c      	adds	r7, #28
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20003f90 	.word	0x20003f90

08000990 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800099a:	f00c fa35 	bl	800ce08 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	f7ff feb4 	bl	800070c <pvPortMallocMicroROS>
 80009a4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d017      	beq.n	80009dc <pvPortReallocMicroROS+0x4c>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d014      	beq.n	80009dc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffce 	bl	8000954 <getBlockSize>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2208      	movs	r2, #8
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d201      	bcs.n	80009cc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	68b8      	ldr	r0, [r7, #8]
 80009d2:	f01b fcf8 	bl	801c3c6 <memcpy>

		vPortFreeMicroROS(pv);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff60 	bl	800089c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80009dc:	f00c fa22 	bl	800ce24 <xTaskResumeAll>

	return newmem;
 80009e0:	68bb      	ldr	r3, [r7, #8]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009f4:	f00c fa08 	bl	800ce08 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff fe82 	bl	800070c <pvPortMallocMicroROS>
 8000a08:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a0e:	e004      	b.n	8000a1a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	613a      	str	r2, [r7, #16]
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	1e5a      	subs	r2, r3, #1
 8000a1e:	617a      	str	r2, [r7, #20]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1f5      	bne.n	8000a10 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a24:	f00c f9fe 	bl	800ce24 <xTaskResumeAll>
  	return mem;
 8000a28:	68fb      	ldr	r3, [r7, #12]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a3a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a40:	4b27      	ldr	r3, [pc, #156]	@ (8000ae0 <prvHeapInit+0xac>)
 8000a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00c      	beq.n	8000a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3307      	adds	r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f023 0307 	bic.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <prvHeapInit+0xac>)
 8000a64:	4413      	add	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <prvHeapInit+0xb0>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <prvHeapInit+0xb0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a80:	2208      	movs	r2, #8
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	1a9b      	subs	r3, r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f023 0307 	bic.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4a15      	ldr	r2, [pc, #84]	@ (8000ae8 <prvHeapInit+0xb4>)
 8000a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <prvHeapInit+0xb4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <prvHeapInit+0xb4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	1ad2      	subs	r2, r2, r3
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <prvHeapInit+0xb4>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <prvHeapInit+0xb8>)
 8000ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	@ (8000af0 <prvHeapInit+0xbc>)
 8000aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <prvHeapInit+0xc0>)
 8000ace:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	2000037c 	.word	0x2000037c
 8000ae4:	20003f7c 	.word	0x20003f7c
 8000ae8:	20003f84 	.word	0x20003f84
 8000aec:	20003f8c 	.word	0x20003f8c
 8000af0:	20003f88 	.word	0x20003f88
 8000af4:	20003f90 	.word	0x20003f90

08000af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b00:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <prvInsertBlockIntoFreeList+0xac>)
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e002      	b.n	8000b0c <prvInsertBlockIntoFreeList+0x14>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d8f7      	bhi.n	8000b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	4413      	add	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d108      	bne.n	8000b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	441a      	add	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	441a      	add	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d118      	bne.n	8000b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d00d      	beq.n	8000b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	441a      	add	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	e008      	b.n	8000b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e003      	b.n	8000b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d002      	beq.n	8000b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20003f7c 	.word	0x20003f7c
 8000ba8:	20003f84 	.word	0x20003f84

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f001 fca0 	bl	80024f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f822 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 fa4c 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bbc:	f000 fa22 	bl	8001004 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bc0:	f000 f9f6 	bl	8000fb0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000bc4:	f000 f8dc 	bl	8000d80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bc8:	f000 f92e 	bl	8000e28 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000bcc:	f000 f880 	bl	8000cd0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000bd0:	f000 f99a 	bl	8000f08 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bd4:	f00a fdb2 	bl	800b73c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bd8:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <main+0x44>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <main+0x48>)
 8000bde:	f00a fdf7 	bl	800b7d0 <osThreadNew>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <main+0x4c>)
 8000be6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000be8:	f00a fdcc 	bl	800b784 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <main+0x40>
 8000bf0:	0801d268 	.word	0x0801d268
 8000bf4:	0800128d 	.word	0x0800128d
 8000bf8:	200041bc 	.word	0x200041bc

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	@ 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	@ 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f01b fb12 	bl	801c234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <SystemClock_Config+0xcc>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c28:	4a27      	ldr	r2, [pc, #156]	@ (8000cc8 <SystemClock_Config+0xcc>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c30:	4b25      	ldr	r3, [pc, #148]	@ (8000cc8 <SystemClock_Config+0xcc>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <SystemClock_Config+0xd0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <SystemClock_Config+0xd0>)
 8000c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <SystemClock_Config+0xd0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	4618      	mov	r0, r3
 8000c84:	f004 fcc0 	bl	8005608 <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c8e:	f000 fc83 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	230f      	movs	r3, #15
 8000c94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2302      	movs	r3, #2
 8000c98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c9e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ca2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2105      	movs	r1, #5
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 ff21 	bl	8005af8 <HAL_RCC_ClockConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cbc:	f000 fc6c 	bl	8001598 <Error_Handler>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3750      	adds	r7, #80	@ 0x50
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	@ 0x30
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2224      	movs	r2, #36	@ 0x24
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f01b faa8 	bl	801c234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000cee:	4a23      	ldr	r2, [pc, #140]	@ (8000d7c <MX_TIM1_Init+0xac>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d20:	2301      	movs	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d30:	2301      	movs	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d44:	f005 fa10 	bl	8006168 <HAL_TIM_Encoder_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d4e:	f000 fc23 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d60:	f005 fe74 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d6a:	f000 fc15 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3730      	adds	r7, #48	@ 0x30
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20003f94 	.word	0x20003f94
 8000d7c:	40010000 	.word	0x40010000

08000d80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	@ 0x30
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2224      	movs	r2, #36	@ 0x24
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f01b fa50 	bl	801c234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000d9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000db2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000df0:	f005 f9ba 	bl	8006168 <HAL_TIM_Encoder_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000dfa:	f000 fbcd 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000e0c:	f005 fe1e 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e16:	f000 fbbf 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3730      	adds	r7, #48	@ 0x30
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20003fdc 	.word	0x20003fdc

08000e28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f04 <MX_TIM3_Init+0xdc>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e52:	2209      	movs	r2, #9
 8000e54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e5e:	f241 0267 	movw	r2, #4199	@ 0x1067
 8000e62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e70:	4823      	ldr	r0, [pc, #140]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e72:	f005 f861 	bl	8005f38 <HAL_TIM_PWM_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e7c:	f000 fb8c 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481c      	ldr	r0, [pc, #112]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e90:	f005 fddc 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e9a:	f000 fb7d 	bl	8001598 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9e:	2360      	movs	r3, #96	@ 0x60
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000eb6:	f005 fa8b 	bl	80063d0 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ec0:	f000 fb6a 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000ecc:	f005 fa80 	bl	80063d0 <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ed6:	f000 fb5f 	bl	8001598 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2208      	movs	r2, #8
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000ee2:	f005 fa75 	bl	80063d0 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000eec:	f000 fb54 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ef0:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000ef2:	f000 ffed 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20004024 	.word	0x20004024
 8000f04:	40000400 	.word	0x40000400

08000f08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2224      	movs	r2, #36	@ 0x24
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f01b f98c 	bl	801c234 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f24:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f26:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <MX_TIM4_Init+0xa4>)
 8000f28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f62:	2301      	movs	r3, #1
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f76:	f005 f8f7 	bl	8006168 <HAL_TIM_Encoder_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f80:	f000 fb0a 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f92:	f005 fd5b 	bl	8006a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000f9c:	f000 fafc 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	@ 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000406c 	.word	0x2000406c
 8000fac:	40000800 	.word	0x40000800

08000fb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <MX_USART2_UART_Init+0x50>)
 8000fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fe8:	f005 fdac 	bl	8006b44 <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ff2:	f000 fad1 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200040b4 	.word	0x200040b4
 8001000:	40004400 	.word	0x40004400

08001004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <MX_DMA_Init+0x4c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a0f      	ldr	r2, [pc, #60]	@ (8001050 <MX_DMA_Init+0x4c>)
 8001014:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <MX_DMA_Init+0x4c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	2010      	movs	r0, #16
 800102c:	f001 fbd3 	bl	80027d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001030:	2010      	movs	r0, #16
 8001032:	f001 fbec 	bl	800280e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2105      	movs	r1, #5
 800103a:	2011      	movs	r0, #17
 800103c:	f001 fbcb 	bl	80027d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001040:	2011      	movs	r0, #17
 8001042:	f001 fbe4 	bl	800280e <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a6b      	ldr	r2, [pc, #428]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b69      	ldr	r3, [pc, #420]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	4b65      	ldr	r3, [pc, #404]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a64      	ldr	r2, [pc, #400]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b62      	ldr	r3, [pc, #392]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a5d      	ldr	r2, [pc, #372]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a56      	ldr	r2, [pc, #344]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b54      	ldr	r3, [pc, #336]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b50      	ldr	r3, [pc, #320]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b49      	ldr	r3, [pc, #292]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a48      	ldr	r2, [pc, #288]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b46      	ldr	r3, [pc, #280]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2108      	movs	r1, #8
 8001116:	4843      	ldr	r0, [pc, #268]	@ (8001224 <MX_GPIO_Init+0x1d0>)
 8001118:	f002 f932 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2101      	movs	r1, #1
 8001120:	4841      	ldr	r0, [pc, #260]	@ (8001228 <MX_GPIO_Init+0x1d4>)
 8001122:	f002 f92d 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001126:	2200      	movs	r2, #0
 8001128:	f24f 0118 	movw	r1, #61464	@ 0xf018
 800112c:	483f      	ldr	r0, [pc, #252]	@ (800122c <MX_GPIO_Init+0x1d8>)
 800112e:	f002 f927 	bl	8003380 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001132:	2200      	movs	r2, #0
 8001134:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001138:	483d      	ldr	r0, [pc, #244]	@ (8001230 <MX_GPIO_Init+0x1dc>)
 800113a:	f002 f921 	bl	8003380 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800113e:	2308      	movs	r3, #8
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4833      	ldr	r0, [pc, #204]	@ (8001224 <MX_GPIO_Init+0x1d0>)
 8001156:	f001 ff77 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	482d      	ldr	r0, [pc, #180]	@ (8001228 <MX_GPIO_Init+0x1d4>)
 8001172:	f001 ff69 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800117a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	482a      	ldr	r0, [pc, #168]	@ (8001234 <MX_GPIO_Init+0x1e0>)
 800118c:	f001 ff5c 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001190:	2304      	movs	r3, #4
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4822      	ldr	r0, [pc, #136]	@ (800122c <MX_GPIO_Init+0x1d8>)
 80011a4:	f001 ff50 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011a8:	f24f 0318 	movw	r3, #61464	@ 0xf018
 80011ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	481a      	ldr	r0, [pc, #104]	@ (800122c <MX_GPIO_Init+0x1d8>)
 80011c2:	f001 ff41 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011c6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80011ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4814      	ldr	r0, [pc, #80]	@ (8001230 <MX_GPIO_Init+0x1dc>)
 80011e0:	f001 ff32 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011e4:	2320      	movs	r3, #32
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	480e      	ldr	r0, [pc, #56]	@ (8001230 <MX_GPIO_Init+0x1dc>)
 80011f8:	f001 ff26 	bl	8003048 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001200:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_GPIO_Init+0x1d0>)
 8001212:	f001 ff19 	bl	8003048 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	@ 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40021000 	.word	0x40021000
 8001228:	40020800 	.word	0x40020800
 800122c:	40020400 	.word	0x40020400
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40020000 	.word	0x40020000

08001238 <cmd_vel_callback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);
void cmd_vel_callback(const void *msgin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60fb      	str	r3, [r7, #12]

    // lấy vận tốc tuyến tính (m/s) hoặc vòng/s — tùy bạn định nghĩa
    target_speed = msg->linear.x;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff f827 	bl	80002a0 <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <cmd_vel_callback+0x48>)
 8001256:	6013      	str	r3, [r2, #0]
    target_angle = msg->angular.z;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff f81d 	bl	80002a0 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <cmd_vel_callback+0x4c>)
 800126a:	6013      	str	r3, [r2, #0]

    // Debug: bật LED khi nhận được dữ liệu
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800126c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <cmd_vel_callback+0x50>)
 8001272:	f002 f89e 	bl	80033b2 <HAL_GPIO_TogglePin>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20004240 	.word	0x20004240
 8001284:	20004244 	.word	0x20004244
 8001288:	40020c00 	.word	0x40020c00

0800128c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800128c:	b5b0      	push	{r4, r5, r7, lr}
 800128e:	b0dc      	sub	sp, #368	@ 0x170
 8001290:	af02      	add	r7, sp, #8
 8001292:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001296:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800129a:	6018      	str	r0, [r3, #0]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800129c:	f00d fa3c 	bl	800e718 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 80012a0:	4b9b      	ldr	r3, [pc, #620]	@ (8001510 <StartDefaultTask+0x284>)
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	4b9b      	ldr	r3, [pc, #620]	@ (8001514 <StartDefaultTask+0x288>)
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4b9b      	ldr	r3, [pc, #620]	@ (8001518 <StartDefaultTask+0x28c>)
 80012aa:	4a9c      	ldr	r2, [pc, #624]	@ (800151c <StartDefaultTask+0x290>)
 80012ac:	499c      	ldr	r1, [pc, #624]	@ (8001520 <StartDefaultTask+0x294>)
 80012ae:	2001      	movs	r0, #1
 80012b0:	f010 fa4e 	bl	8011750 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80012b4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80012b8:	4618      	mov	r0, r3
 80012ba:	f010 f97b 	bl	80115b4 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80012be:	4b99      	ldr	r3, [pc, #612]	@ (8001524 <StartDefaultTask+0x298>)
 80012c0:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  freeRTOS_allocator.deallocate = microros_deallocate;
 80012c4:	4b98      	ldr	r3, [pc, #608]	@ (8001528 <StartDefaultTask+0x29c>)
 80012c6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  freeRTOS_allocator.reallocate = microros_reallocate;
 80012ca:	4b98      	ldr	r3, [pc, #608]	@ (800152c <StartDefaultTask+0x2a0>)
 80012cc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80012d0:	4b97      	ldr	r3, [pc, #604]	@ (8001530 <StartDefaultTask+0x2a4>)
 80012d2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80012d6:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80012da:	4618      	mov	r0, r3
 80012dc:	f010 f978 	bl	80115d0 <rcutils_set_default_allocator>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <StartDefaultTask+0x6a>
      printf("Error on default allocators (line %d)\n", __LINE__);
 80012ec:	f240 217e 	movw	r1, #638	@ 0x27e
 80012f0:	4890      	ldr	r0, [pc, #576]	@ (8001534 <StartDefaultTask+0x2a8>)
 80012f2:	f01a fead 	bl	801c050 <iprintf>
  rcl_subscription_t cmd_sub;
  rclc_executor_t executor;
  geometry_msgs__msg__Twist cmd_vel_msg;
  std_msgs__msg__Float32 feedback_msg1;
  std_msgs__msg__Float32 feedback_msg2;
  allocator = rcl_get_default_allocator();
 80012f6:	463b      	mov	r3, r7
 80012f8:	4618      	mov	r0, r3
 80012fa:	f010 f987 	bl	801160c <rcutils_get_default_allocator>
 80012fe:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001302:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001306:	f107 04f4 	add.w	r4, r7, #244	@ 0xf4
 800130a:	461d      	mov	r5, r3
 800130c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001314:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001318:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	f010 f852 	bl	80113c8 <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001328:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 800132c:	4a82      	ldr	r2, [pc, #520]	@ (8001538 <StartDefaultTask+0x2ac>)
 800132e:	4983      	ldr	r1, [pc, #524]	@ (800153c <StartDefaultTask+0x2b0>)
 8001330:	f010 f894 	bl	801145c <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 8001334:	f010 ff7e 	bl	8012234 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001338:	4602      	mov	r2, r0
 800133a:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 800133e:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8001342:	4b7f      	ldr	r3, [pc, #508]	@ (8001540 <StartDefaultTask+0x2b4>)
 8001344:	f010 f8c6 	bl	80114d4 <rclc_publisher_init_default>
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "cubemx_publisher");

    rclc_publisher_init_default(
 8001348:	f010 ff5c 	bl	8012204 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 800134c:	4602      	mov	r2, r0
 800134e:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8001352:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 8001356:	4b7b      	ldr	r3, [pc, #492]	@ (8001544 <StartDefaultTask+0x2b8>)
 8001358:	f010 f8bc 	bl	80114d4 <rclc_publisher_init_default>
        &feedback_pub,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
        "motor_feedback");
    rclc_subscription_init_default(
 800135c:	f00d fcce 	bl	800ecfc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001360:	4602      	mov	r2, r0
 8001362:	f107 01ec 	add.w	r1, r7, #236	@ 0xec
 8001366:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 800136a:	4b77      	ldr	r3, [pc, #476]	@ (8001548 <StartDefaultTask+0x2bc>)
 800136c:	f010 f8e6 	bl	801153c <rclc_subscription_init_default>
        &cmd_sub,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
        "cmd_vel");
    rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001370:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001374:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001378:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800137c:	2202      	movs	r2, #2
 800137e:	f00f fd5b 	bl	8010e38 <rclc_executor_init>
    rclc_executor_add_subscription(&executor, &cmd_sub, &cmd_vel_msg, &cmd_vel_callback, ON_NEW_DATA);
 8001382:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001386:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 800138a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800138e:	2300      	movs	r3, #0
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	4b6e      	ldr	r3, [pc, #440]	@ (800154c <StartDefaultTask+0x2c0>)
 8001394:	f00f fdc0 	bl	8010f18 <rclc_executor_add_subscription>

    MotorReset(&motor1);
 8001398:	486d      	ldr	r0, [pc, #436]	@ (8001550 <StartDefaultTask+0x2c4>)
 800139a:	f000 fa68 	bl	800186e <MotorReset>
    MotorReset(&motor2);
 800139e:	486d      	ldr	r0, [pc, #436]	@ (8001554 <StartDefaultTask+0x2c8>)
 80013a0:	f000 fa65 	bl	800186e <MotorReset>
    MotorAngleInit(&motor3);
 80013a4:	486c      	ldr	r0, [pc, #432]	@ (8001558 <StartDefaultTask+0x2cc>)
 80013a6:	f000 fa7b 	bl	80018a0 <MotorAngleInit>
    PIDInit(&pid_vel1, 300.0f, 250.0f, 0.0f);
 80013aa:	ed9f 1a6c 	vldr	s2, [pc, #432]	@ 800155c <StartDefaultTask+0x2d0>
 80013ae:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8001560 <StartDefaultTask+0x2d4>
 80013b2:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8001564 <StartDefaultTask+0x2d8>
 80013b6:	486c      	ldr	r0, [pc, #432]	@ (8001568 <StartDefaultTask+0x2dc>)
 80013b8:	f000 fbde 	bl	8001b78 <PIDInit>
    PIDInit(&pid_vel2, 300.0f, 250.0f, 0.0f);
 80013bc:	ed9f 1a67 	vldr	s2, [pc, #412]	@ 800155c <StartDefaultTask+0x2d0>
 80013c0:	eddf 0a67 	vldr	s1, [pc, #412]	@ 8001560 <StartDefaultTask+0x2d4>
 80013c4:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8001564 <StartDefaultTask+0x2d8>
 80013c8:	4868      	ldr	r0, [pc, #416]	@ (800156c <StartDefaultTask+0x2e0>)
 80013ca:	f000 fbd5 	bl	8001b78 <PIDInit>
    PIDInit(&pid_pos, 50.0f, 10.0f, 0.0f);
 80013ce:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 800155c <StartDefaultTask+0x2d0>
 80013d2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80013d6:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8001570 <StartDefaultTask+0x2e4>
 80013da:	4866      	ldr	r0, [pc, #408]	@ (8001574 <StartDefaultTask+0x2e8>)
 80013dc:	f000 fbcc 	bl	8001b78 <PIDInit>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80013e0:	213c      	movs	r1, #60	@ 0x3c
 80013e2:	4865      	ldr	r0, [pc, #404]	@ (8001578 <StartDefaultTask+0x2ec>)
 80013e4:	f004 ff66 	bl	80062b4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80013e8:	213c      	movs	r1, #60	@ 0x3c
 80013ea:	4864      	ldr	r0, [pc, #400]	@ (800157c <StartDefaultTask+0x2f0>)
 80013ec:	f004 ff62 	bl	80062b4 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80013f0:	213c      	movs	r1, #60	@ 0x3c
 80013f2:	4863      	ldr	r0, [pc, #396]	@ (8001580 <StartDefaultTask+0x2f4>)
 80013f4:	f004 ff5e 	bl	80062b4 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013f8:	2100      	movs	r1, #0
 80013fa:	4862      	ldr	r0, [pc, #392]	@ (8001584 <StartDefaultTask+0x2f8>)
 80013fc:	f004 fdec 	bl	8005fd8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001400:	2104      	movs	r1, #4
 8001402:	4860      	ldr	r0, [pc, #384]	@ (8001584 <StartDefaultTask+0x2f8>)
 8001404:	f004 fde8 	bl	8005fd8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001408:	2108      	movs	r1, #8
 800140a:	485e      	ldr	r0, [pc, #376]	@ (8001584 <StartDefaultTask+0x2f8>)
 800140c:	f004 fde4 	bl	8005fd8 <HAL_TIM_PWM_Start>
    osDelay(50);
 8001410:	2032      	movs	r0, #50	@ 0x32
 8001412:	f00a fa6f 	bl	800b8f4 <osDelay>



  msg.data = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

  for(;;)
  {
	  // 1) service ROS events (non-blocking short time)
	      rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 800141c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001420:	4a59      	ldr	r2, [pc, #356]	@ (8001588 <StartDefaultTask+0x2fc>)
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	4608      	mov	r0, r1
 8001428:	f00f ff96 	bl	8011358 <rclc_executor_spin_some>

	      // 2) read encoder (update motor1.velocity)
	      ReadEncoder(&motor1, &htim2);
 800142c:	4952      	ldr	r1, [pc, #328]	@ (8001578 <StartDefaultTask+0x2ec>)
 800142e:	4848      	ldr	r0, [pc, #288]	@ (8001550 <StartDefaultTask+0x2c4>)
 8001430:	f000 fa4c 	bl	80018cc <ReadEncoder>
	      ReadEncoder(&motor2, &htim1);
 8001434:	4951      	ldr	r1, [pc, #324]	@ (800157c <StartDefaultTask+0x2f0>)
 8001436:	4847      	ldr	r0, [pc, #284]	@ (8001554 <StartDefaultTask+0x2c8>)
 8001438:	f000 fa48 	bl	80018cc <ReadEncoder>
	      ReadEncoder_angular(&motor3, &htim4);
 800143c:	4950      	ldr	r1, [pc, #320]	@ (8001580 <StartDefaultTask+0x2f4>)
 800143e:	4846      	ldr	r0, [pc, #280]	@ (8001558 <StartDefaultTask+0x2cc>)
 8001440:	f000 fa96 	bl	8001970 <ReadEncoder_angular>

	      // 3) PID velocity: use target_speed (updated in callback)
	      float duty1 = MotorPIDVelocity(&pid_vel1, &motor1, target_speed);
 8001444:	4b51      	ldr	r3, [pc, #324]	@ (800158c <StartDefaultTask+0x300>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	4940      	ldr	r1, [pc, #256]	@ (8001550 <StartDefaultTask+0x2c4>)
 8001450:	4845      	ldr	r0, [pc, #276]	@ (8001568 <StartDefaultTask+0x2dc>)
 8001452:	f000 fb55 	bl	8001b00 <MotorPIDVelocity>
 8001456:	ed87 0a59 	vstr	s0, [r7, #356]	@ 0x164
	      float duty2 = MotorPIDVelocity(&pid_vel2, &motor2, target_speed);
 800145a:	4b4c      	ldr	r3, [pc, #304]	@ (800158c <StartDefaultTask+0x300>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	493b      	ldr	r1, [pc, #236]	@ (8001554 <StartDefaultTask+0x2c8>)
 8001466:	4841      	ldr	r0, [pc, #260]	@ (800156c <StartDefaultTask+0x2e0>)
 8001468:	f000 fb4a 	bl	8001b00 <MotorPIDVelocity>
 800146c:	ed87 0a58 	vstr	s0, [r7, #352]	@ 0x160
	      //float g_duty3 = MotorPIDPosition(&pid_pos, &motor3, target_angle);
	      MotorSetDuty1((int)duty1);
 8001470:	edd7 7a59 	vldr	s15, [r7, #356]	@ 0x164
 8001474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001478:	ee17 0a90 	vmov	r0, s15
 800147c:	f000 fab8 	bl	80019f0 <MotorSetDuty1>
	      MotorSetDuty2((int)duty2);
 8001480:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 8001484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001488:	ee17 0a90 	vmov	r0, s15
 800148c:	f000 faf4 	bl	8001a78 <MotorSetDuty2>
	      // 4) apply duty
	     // MotorSetDuty(2000);

	      // 5) publish feedback velocity
	     // feedback_msg.data = motor1.velocity;
	      feedback_msg1.data = motor1.velocity;
 8001490:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <StartDefaultTask+0x2c4>)
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001498:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800149c:	601a      	str	r2, [r3, #0]
	      feedback_msg2.data = motor2.velocity;
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <StartDefaultTask+0x2c8>)
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80014a6:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014aa:	601a      	str	r2, [r3, #0]


	      rcl_ret_t ret1 = rcl_publish(&feedback_pub, &feedback_msg1, NULL);
 80014ac:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80014b0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80014b4:	2200      	movs	r2, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00f f92e 	bl	8010718 <rcl_publish>
 80014bc:	f8c7 015c 	str.w	r0, [r7, #348]	@ 0x15c
	      if (ret1 != RCL_RET_OK) {
 80014c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <StartDefaultTask+0x246>
	          printf("Error publishing feedback (line %d)\n", __LINE__);
 80014c8:	f240 21d9 	movw	r1, #729	@ 0x2d9
 80014cc:	4830      	ldr	r0, [pc, #192]	@ (8001590 <StartDefaultTask+0x304>)
 80014ce:	f01a fdbf 	bl	801c050 <iprintf>
	      }
	      rcl_ret_t ret2 = rcl_publish(&feedback_pub, &feedback_msg2, NULL);
 80014d2:	f107 0120 	add.w	r1, r7, #32
 80014d6:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80014da:	2200      	movs	r2, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f00f f91b 	bl	8010718 <rcl_publish>
 80014e2:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
	      if (ret2 != RCL_RET_OK) {
 80014e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <StartDefaultTask+0x26c>
	      	          printf("Error publishing feedback (line %d)\n", __LINE__);
 80014ee:	f240 21dd 	movw	r1, #733	@ 0x2dd
 80014f2:	4827      	ldr	r0, [pc, #156]	@ (8001590 <StartDefaultTask+0x304>)
 80014f4:	f01a fdac 	bl	801c050 <iprintf>
	      	      }
	      // 6) optional toggle to observe loop
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80014f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014fc:	4825      	ldr	r0, [pc, #148]	@ (8001594 <StartDefaultTask+0x308>)
 80014fe:	f001 ff58 	bl	80033b2 <HAL_GPIO_TogglePin>


	         msg.data++;
 8001502:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001506:	3301      	adds	r3, #1
 8001508:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  {
 800150c:	e786      	b.n	800141c <StartDefaultTask+0x190>
 800150e:	bf00      	nop
 8001510:	080023f9 	.word	0x080023f9
 8001514:	08002391 	.word	0x08002391
 8001518:	08002371 	.word	0x08002371
 800151c:	08002345 	.word	0x08002345
 8001520:	200040b4 	.word	0x200040b4
 8001524:	080015a5 	.word	0x080015a5
 8001528:	080015e9 	.word	0x080015e9
 800152c:	08001621 	.word	0x08001621
 8001530:	0800168d 	.word	0x0800168d
 8001534:	0801d194 	.word	0x0801d194
 8001538:	0801d1bc 	.word	0x0801d1bc
 800153c:	0801d1c0 	.word	0x0801d1c0
 8001540:	0801d1cc 	.word	0x0801d1cc
 8001544:	0801d1e0 	.word	0x0801d1e0
 8001548:	0801d1f0 	.word	0x0801d1f0
 800154c:	08001239 	.word	0x08001239
 8001550:	200041c0 	.word	0x200041c0
 8001554:	200041d4 	.word	0x200041d4
 8001558:	200041e8 	.word	0x200041e8
 800155c:	00000000 	.word	0x00000000
 8001560:	437a0000 	.word	0x437a0000
 8001564:	43960000 	.word	0x43960000
 8001568:	200041f8 	.word	0x200041f8
 800156c:	20004210 	.word	0x20004210
 8001570:	42480000 	.word	0x42480000
 8001574:	20004228 	.word	0x20004228
 8001578:	20003fdc 	.word	0x20003fdc
 800157c:	20003f94 	.word	0x20003f94
 8001580:	2000406c 	.word	0x2000406c
 8001584:	20004024 	.word	0x20004024
 8001588:	00989680 	.word	0x00989680
 800158c:	20004240 	.word	0x20004240
 8001590:	0801d1f8 	.word	0x0801d1f8
 8001594:	40020c00 	.word	0x40020c00

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <Error_Handler+0x8>

080015a4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <microros_allocate+0x3c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <microros_allocate+0x3c>)
 80015bc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015be:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <microros_allocate+0x40>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <microros_allocate+0x40>)
 80015cc:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff f89c 	bl	800070c <pvPortMallocMicroROS>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20004248 	.word	0x20004248
 80015e4:	2000424c 	.word	0x2000424c

080015e8 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00c      	beq.n	8001612 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff f9ab 	bl	8000954 <getBlockSize>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a06      	ldr	r2, [pc, #24]	@ (800161c <microros_deallocate+0x34>)
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	461a      	mov	r2, r3
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <microros_deallocate+0x34>)
 800160a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff f945 	bl	800089c <vPortFreeMicroROS>
  }
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	2000424c 	.word	0x2000424c

08001620 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <microros_reallocate+0x64>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4413      	add	r3, r2
 8001636:	461a      	mov	r2, r3
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <microros_reallocate+0x64>)
 800163a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <microros_reallocate+0x68>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	4413      	add	r3, r2
 8001646:	461a      	mov	r2, r3
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <microros_reallocate+0x68>)
 800164a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d104      	bne.n	800165c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001652:	68b8      	ldr	r0, [r7, #8]
 8001654:	f7ff f85a 	bl	800070c <pvPortMallocMicroROS>
 8001658:	4603      	mov	r3, r0
 800165a:	e00e      	b.n	800167a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff f979 	bl	8000954 <getBlockSize>
 8001662:	4603      	mov	r3, r0
 8001664:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <microros_reallocate+0x68>)
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	461a      	mov	r2, r3
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <microros_reallocate+0x68>)
 800166e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f7ff f98c 	bl	8000990 <pvPortReallocMicroROS>
 8001678:	4603      	mov	r3, r0
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20004248 	.word	0x20004248
 8001688:	2000424c 	.word	0x2000424c

0800168c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <microros_zero_allocate+0x48>)
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <microros_zero_allocate+0x48>)
 80016aa:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <microros_zero_allocate+0x4c>)
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <microros_zero_allocate+0x4c>)
 80016be:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff f991 	bl	80009ea <pvPortCallocMicroROS>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20004248 	.word	0x20004248
 80016d8:	2000424c 	.word	0x2000424c
 80016dc:	00000000 	.word	0x00000000

080016e0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80016e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80016f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016f6:	a320      	add	r3, pc, #128	@ (adr r3, 8001778 <UTILS_NanosecondsToTimespec+0x98>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7fe fe20 	bl	8000340 <__aeabi_ldivmod>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800170a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800170e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001778 <UTILS_NanosecondsToTimespec+0x98>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe fe14 	bl	8000340 <__aeabi_ldivmod>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	da20      	bge.n	8001766 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <UTILS_NanosecondsToTimespec+0x90>)
 800172a:	fb82 1203 	smull	r1, r2, r2, r3
 800172e:	1712      	asrs	r2, r2, #28
 8001730:	17db      	asrs	r3, r3, #31
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	6979      	ldr	r1, [r7, #20]
 8001740:	17c8      	asrs	r0, r1, #31
 8001742:	460c      	mov	r4, r1
 8001744:	4605      	mov	r5, r0
 8001746:	ebb2 0804 	subs.w	r8, r2, r4
 800174a:	eb63 0905 	sbc.w	r9, r3, r5
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	4906      	ldr	r1, [pc, #24]	@ (8001774 <UTILS_NanosecondsToTimespec+0x94>)
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	441a      	add	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]
    }
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001770:	44b82fa1 	.word	0x44b82fa1
 8001774:	3b9aca00 	.word	0x3b9aca00
 8001778:	3b9aca00 	.word	0x3b9aca00
 800177c:	00000000 	.word	0x00000000

08001780 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001784:	b08e      	sub	sp, #56	@ 0x38
 8001786:	af00      	add	r7, sp, #0
 8001788:	6278      	str	r0, [r7, #36]	@ 0x24
 800178a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800178c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001790:	2300      	movs	r3, #0
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80017a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00b fdb8 	bl	800d31c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80017ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ae:	17da      	asrs	r2, r3, #31
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	61fa      	str	r2, [r7, #28]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	69b9      	ldr	r1, [r7, #24]
 80017be:	000b      	movs	r3, r1
 80017c0:	2200      	movs	r2, #0
 80017c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80017c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c8:	2200      	movs	r2, #0
 80017ca:	461c      	mov	r4, r3
 80017cc:	4615      	mov	r5, r2
 80017ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017d2:	1911      	adds	r1, r2, r4
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	416b      	adcs	r3, r5
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017de:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80017e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	f04f 0400 	mov.w	r4, #0
 80017ee:	f04f 0500 	mov.w	r5, #0
 80017f2:	015d      	lsls	r5, r3, #5
 80017f4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80017f8:	0154      	lsls	r4, r2, #5
 80017fa:	4622      	mov	r2, r4
 80017fc:	462b      	mov	r3, r5
 80017fe:	ebb2 0800 	subs.w	r8, r2, r0
 8001802:	eb63 0901 	sbc.w	r9, r3, r1
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001812:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001816:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800181a:	4690      	mov	r8, r2
 800181c:	4699      	mov	r9, r3
 800181e:	eb18 0a00 	adds.w	sl, r8, r0
 8001822:	eb49 0b01 	adc.w	fp, r9, r1
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001832:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001836:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800183a:	ebb2 040a 	subs.w	r4, r2, sl
 800183e:	603c      	str	r4, [r7, #0]
 8001840:	eb63 030b 	sbc.w	r3, r3, fp
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800184a:	4623      	mov	r3, r4
 800184c:	181b      	adds	r3, r3, r0
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	462b      	mov	r3, r5
 8001852:	eb41 0303 	adc.w	r3, r1, r3
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	6a3a      	ldr	r2, [r7, #32]
 800185a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800185e:	f7ff ff3f 	bl	80016e0 <UTILS_NanosecondsToTimespec>

    return 0;
 8001862:	2300      	movs	r3, #0
 8001864:	4618      	mov	r0, r3
 8001866:	3738      	adds	r7, #56	@ 0x38
 8001868:	46bd      	mov	sp, r7
 800186a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800186e <MotorReset>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void MotorReset(Motor_t *tmotor)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
tmotor->counter = 0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
tmotor->position = 0.0f;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
tmotor->velocity = 0.0f;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
tmotor->setPoint = 0.0f;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <MotorAngleInit>:
void MotorAngleInit(MOTOR_t *tMOTOR)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	tMOTOR->cnter = 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
	tMOTOR->POS = 0.0f;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	605a      	str	r2, [r3, #4]
	tMOTOR->Taget_angle = 0.0f;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <ReadEncoder>:
void ReadEncoder(Motor_t *tmotor, TIM_HandleTypeDef *htim)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
    static int32_t last_count = 0;
    int32_t count = __HAL_TIM_GET_COUNTER(htim);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018dc:	613b      	str	r3, [r7, #16]
    int32_t diff = count - tmotor->last_count;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]


    if (diff > 32768)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018ee:	dd04      	ble.n	80018fa <ReadEncoder+0x2e>
        diff -= 65536;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e007      	b.n	800190a <ReadEncoder+0x3e>
    else if (diff < -32768)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001900:	da03      	bge.n	800190a <ReadEncoder+0x3e>
        diff += 65536;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001908:	617b      	str	r3, [r7, #20]

    tmotor->counter = count;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	601a      	str	r2, [r3, #0]
    tmotor->position += (float)diff / PPR;   //position
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	ed93 7a01 	vldr	s14, [r3, #4]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001920:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 8001968 <ReadEncoder+0x9c>
 8001924:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	edc3 7a01 	vstr	s15, [r3, #4]
    float speed_rps = (diff / PPR) / SAMPLE_TIME;  // vòng/giây
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800193c:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001968 <ReadEncoder+0x9c>
 8001940:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001944:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800196c <ReadEncoder+0xa0>
 8001948:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194c:	edc7 7a03 	vstr	s15, [r7, #12]
    tmotor->velocity = speed_rps;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	609a      	str	r2, [r3, #8]
    tmotor->last_count = count;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	611a      	str	r2, [r3, #16]
}
 800195c:	bf00      	nop
 800195e:	371c      	adds	r7, #28
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	458aa000 	.word	0x458aa000
 800196c:	3c23d70a 	.word	0x3c23d70a

08001970 <ReadEncoder_angular>:


void ReadEncoder_angular(MOTOR_t *tMOTOR, TIM_HandleTypeDef *htim)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    int32_t cnt = __HAL_TIM_GET_COUNTER(htim);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001980:	613b      	str	r3, [r7, #16]
        int32_t DIFF = cnt - tMOTOR->last_cnt;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
    if (DIFF > 32768)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001992:	dd04      	ble.n	800199e <ReadEncoder_angular+0x2e>
            DIFF -= 65536;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e007      	b.n	80019ae <ReadEncoder_angular+0x3e>
        else if (DIFF < -32768)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80019a4:	da03      	bge.n	80019ae <ReadEncoder_angular+0x3e>
            DIFF += 65536;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80019ac:	617b      	str	r3, [r7, #20]
    float K = 30.0f / 16000.0f;
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <ReadEncoder_angular+0x7c>)
 80019b0:	60fb      	str	r3, [r7, #12]
    tMOTOR->cnter = cnt;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	601a      	str	r2, [r3, #0]
    tMOTOR->POS += (float)DIFF*K ;  //position
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80019cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	edc3 7a01 	vstr	s15, [r3, #4]
    tMOTOR->last_cnt = cnt;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	60da      	str	r2, [r3, #12]
}
 80019e0:	bf00      	nop
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	3af5c28f 	.word	0x3af5c28f

080019f0 <MotorSetDuty1>:
void MotorSetDuty1(int nDuty)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	if (nDuty > 4200) nDuty = 4200;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f241 0268 	movw	r2, #4200	@ 0x1068
 80019fe:	4293      	cmp	r3, r2
 8001a00:	dd02      	ble.n	8001a08 <MotorSetDuty1+0x18>
 8001a02:	f241 0368 	movw	r3, #4200	@ 0x1068
 8001a06:	607b      	str	r3, [r7, #4]
	if (nDuty < -4200) nDuty = -4200;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a18      	ldr	r2, [pc, #96]	@ (8001a6c <MotorSetDuty1+0x7c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	da01      	bge.n	8001a14 <MotorSetDuty1+0x24>
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <MotorSetDuty1+0x7c>)
 8001a12:	607b      	str	r3, [r7, #4]

	if (nDuty >= 0)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	db10      	blt.n	8001a3c <MotorSetDuty1+0x4c>
	{
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a20:	4813      	ldr	r0, [pc, #76]	@ (8001a70 <MotorSetDuty1+0x80>)
 8001a22:	f001 fcad 	bl	8003380 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a2c:	4810      	ldr	r0, [pc, #64]	@ (8001a70 <MotorSetDuty1+0x80>)
 8001a2e:	f001 fca7 	bl	8003380 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nDuty);
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <MotorSetDuty1+0x84>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	635a      	str	r2, [r3, #52]	@ 0x34
	{
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, abs(nDuty));
	}
}
 8001a3a:	e013      	b.n	8001a64 <MotorSetDuty1+0x74>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a42:	480b      	ldr	r0, [pc, #44]	@ (8001a70 <MotorSetDuty1+0x80>)
 8001a44:	f001 fc9c 	bl	8003380 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a4e:	4808      	ldr	r0, [pc, #32]	@ (8001a70 <MotorSetDuty1+0x80>)
 8001a50:	f001 fc96 	bl	8003380 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, abs(nDuty));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <MotorSetDuty1+0x84>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	ffffef98 	.word	0xffffef98
 8001a70:	40020400 	.word	0x40020400
 8001a74:	20004024 	.word	0x20004024

08001a78 <MotorSetDuty2>:
void MotorSetDuty2(int nDuty)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	if (nDuty > 4200) nDuty = 4200;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001a86:	4293      	cmp	r3, r2
 8001a88:	dd02      	ble.n	8001a90 <MotorSetDuty2+0x18>
 8001a8a:	f241 0368 	movw	r3, #4200	@ 0x1068
 8001a8e:	607b      	str	r3, [r7, #4]
	if (nDuty < -4200) nDuty = -4200;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a18      	ldr	r2, [pc, #96]	@ (8001af4 <MotorSetDuty2+0x7c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	da01      	bge.n	8001a9c <MotorSetDuty2+0x24>
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MotorSetDuty2+0x7c>)
 8001a9a:	607b      	str	r3, [r7, #4]

	if (nDuty >= 0)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db10      	blt.n	8001ac4 <MotorSetDuty2+0x4c>
	{
    HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aa8:	4813      	ldr	r0, [pc, #76]	@ (8001af8 <MotorSetDuty2+0x80>)
 8001aaa:	f001 fc69 	bl	8003380 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ab4:	4810      	ldr	r0, [pc, #64]	@ (8001af8 <MotorSetDuty2+0x80>)
 8001ab6:	f001 fc63 	bl	8003380 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, nDuty);
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <MotorSetDuty2+0x84>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	639a      	str	r2, [r3, #56]	@ 0x38
	{
    HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, abs(nDuty));
	}
}
 8001ac2:	e013      	b.n	8001aec <MotorSetDuty2+0x74>
    HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aca:	480b      	ldr	r0, [pc, #44]	@ (8001af8 <MotorSetDuty2+0x80>)
 8001acc:	f001 fc58 	bl	8003380 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ad6:	4808      	ldr	r0, [pc, #32]	@ (8001af8 <MotorSetDuty2+0x80>)
 8001ad8:	f001 fc52 	bl	8003380 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, abs(nDuty));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ae2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <MotorSetDuty2+0x84>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	ffffef98 	.word	0xffffef98
 8001af8:	40020400 	.word	0x40020400
 8001afc:	20004024 	.word	0x20004024

08001b00 <MotorPIDVelocity>:
	float g_duty = PIDCompute(PID_Ctrl, tMOTOR->Taget_angle, tMOTOR->POS, 0.03f);
	return g_duty;
}

float MotorPIDVelocity(PID_CONTROL_t *PID_Ctrl , Motor_t *tmotor, float vel_set)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	ed87 0a01 	vstr	s0, [r7, #4]
	tmotor->setPoint = vel_set;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]
	float duty = PIDCompute(PID_Ctrl, tmotor->setPoint, tmotor->velocity, 0.01f);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b20:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001b48 <MotorPIDVelocity+0x48>
 8001b24:	eef0 0a47 	vmov.f32	s1, s14
 8001b28:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f83d 	bl	8001bac <PIDCompute>
 8001b32:	ed87 0a05 	vstr	s0, [r7, #20]
	return duty;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	ee07 3a90 	vmov	s15, r3
}
 8001b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	3c23d70a 	.word	0x3c23d70a

08001b4c <PIDReset>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void PIDReset(PID_CONTROL_t *PID_Ctrl)//pPID->dKp = 1.0f;tuong duong v?i:(*pPID).dKp = 1.0f;
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
		PID_Ctrl->dIntergral = 0.0f;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
		PID_Ctrl->dErrorTerm = 0.0f;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
		PID_Ctrl->result = 0.0f;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <PIDInit>:


void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b84:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b88:	ed87 1a00 	vstr	s2, [r7]
		PIDReset(PID_Ctrl);
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff ffdd 	bl	8001b4c <PIDReset>
		PID_Ctrl->dKp = dKp;// = PID_Ctrl.dKp = dKp
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	601a      	str	r2, [r3, #0]
		PID_Ctrl->dKi = dKi;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	605a      	str	r2, [r3, #4]
		PID_Ctrl->dKd = dKd;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	609a      	str	r2, [r3, #8]
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <PIDCompute>:

float PIDCompute(PID_CONTROL_t *PID_Ctrl, float SetPoint, float Input, float dTs)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bb8:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bbc:	ed87 1a00 	vstr	s2, [r7]
	float Error = SetPoint - Input;
 8001bc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bcc:	edc7 7a07 	vstr	s15, [r7, #28]
	float dP = 0 , dI = 0 , dD = 0;
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]

	dP = PID_Ctrl->dKp*Error;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf0:	edc7 7a06 	vstr	s15, [r7, #24]
	PID_Ctrl->dIntergral += Error;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bfa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	edc3 7a04 	vstr	s15, [r3, #16]
	dI = PID_Ctrl->dKi * dTs/2 * PID_Ctrl->dIntergral;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c0e:	edd7 7a00 	vldr	s15, [r7]
 8001c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c16:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001c1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c28:	edc7 7a05 	vstr	s15, [r7, #20]
	dD = PID_Ctrl->dKd * (Error - PID_Ctrl->dErrorTerm)/ dTs;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8001c3c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c40:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c44:	ed97 7a00 	vldr	s14, [r7]
 8001c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4c:	edc7 7a04 	vstr	s15, [r7, #16]

	PID_Ctrl->result = (dP+dI+dD);
 8001c50:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	edc3 7a05 	vstr	s15, [r3, #20]
	if(PID_Ctrl->result > 4200)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c70:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001cbc <PIDCompute+0x110>
 8001c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	dd02      	ble.n	8001c84 <PIDCompute+0xd8>
	{
		PID_Ctrl-> result = 4200;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <PIDCompute+0x114>)
 8001c82:	615a      	str	r2, [r3, #20]
	}
		if(PID_Ctrl->result < -4200)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c8a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001cc4 <PIDCompute+0x118>
 8001c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c96:	d502      	bpl.n	8001c9e <PIDCompute+0xf2>
	{
		PID_Ctrl-> result = -4200;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc8 <PIDCompute+0x11c>)
 8001c9c:	615a      	str	r2, [r3, #20]
	}
	PID_Ctrl->dErrorTerm = Error;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	60da      	str	r2, [r3, #12]
	return PID_Ctrl->result;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	ee07 3a90 	vmov	s15, r3
}
 8001cac:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb0:	3724      	adds	r7, #36	@ 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	45834000 	.word	0x45834000
 8001cc0:	45834000 	.word	0x45834000
 8001cc4:	c5834000 	.word	0xc5834000
 8001cc8:	c5834000 	.word	0xc5834000

08001ccc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_MspInit+0x54>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a11      	ldr	r2, [pc, #68]	@ (8001d20 <HAL_MspInit+0x54>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d20 <HAL_MspInit+0x54>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_MspInit+0x54>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <HAL_MspInit+0x54>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfe:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <HAL_MspInit+0x54>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	f06f 0001 	mvn.w	r0, #1
 8001d12:	f000 fd60 	bl	80027d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08e      	sub	sp, #56	@ 0x38
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a4c      	ldr	r2, [pc, #304]	@ (8001e74 <HAL_TIM_Encoder_MspInit+0x150>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d12d      	bne.n	8001da2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d56:	4b48      	ldr	r3, [pc, #288]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	623b      	str	r3, [r7, #32]
 8001d60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	4b44      	ldr	r3, [pc, #272]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a43      	ldr	r2, [pc, #268]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001d6c:	f043 0310 	orr.w	r3, r3, #16
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b41      	ldr	r3, [pc, #260]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001d7e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4838      	ldr	r0, [pc, #224]	@ (8001e7c <HAL_TIM_Encoder_MspInit+0x158>)
 8001d9c:	f001 f954 	bl	8003048 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001da0:	e063      	b.n	8001e6a <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM2)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001daa:	d12d      	bne.n	8001e08 <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
 8001db0:	4b31      	ldr	r3, [pc, #196]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	4a30      	ldr	r2, [pc, #192]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	4a29      	ldr	r2, [pc, #164]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd8:	4b27      	ldr	r3, [pc, #156]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001de4:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001df6:	2301      	movs	r3, #1
 8001df8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481f      	ldr	r0, [pc, #124]	@ (8001e80 <HAL_TIM_Encoder_MspInit+0x15c>)
 8001e02:	f001 f921 	bl	8003048 <HAL_GPIO_Init>
}
 8001e06:	e030      	b.n	8001e6a <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM4)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e84 <HAL_TIM_Encoder_MspInit+0x160>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d12b      	bne.n	8001e6a <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x154>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e4a:	23c0      	movs	r3, #192	@ 0xc0
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e62:	4619      	mov	r1, r3
 8001e64:	4808      	ldr	r0, [pc, #32]	@ (8001e88 <HAL_TIM_Encoder_MspInit+0x164>)
 8001e66:	f001 f8ef 	bl	8003048 <HAL_GPIO_Init>
}
 8001e6a:	bf00      	nop
 8001e6c:	3738      	adds	r7, #56	@ 0x38
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40020400 	.word	0x40020400

08001e8c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10d      	bne.n	8001eba <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x40>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x40>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <HAL_TIM_PWM_MspInit+0x40>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	@ 0x28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a21      	ldr	r2, [pc, #132]	@ (8001f74 <HAL_TIM_MspPostInit+0xa4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d13c      	bne.n	8001f6c <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <HAL_TIM_MspPostInit+0xa8>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_TIM_MspPostInit+0xa8>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <HAL_TIM_MspPostInit+0xa8>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <HAL_TIM_MspPostInit+0xa8>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <HAL_TIM_MspPostInit+0xa8>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <HAL_TIM_MspPostInit+0xa8>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001f2a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	480d      	ldr	r0, [pc, #52]	@ (8001f7c <HAL_TIM_MspPostInit+0xac>)
 8001f48:	f001 f87e 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	4806      	ldr	r0, [pc, #24]	@ (8001f80 <HAL_TIM_MspPostInit+0xb0>)
 8001f68:	f001 f86e 	bl	8003048 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	3728      	adds	r7, #40	@ 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020400 	.word	0x40020400

08001f84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	@ 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80020d8 <HAL_UART_MspInit+0x154>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	f040 8093 	bne.w	80020ce <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	4b4b      	ldr	r3, [pc, #300]	@ (80020dc <HAL_UART_MspInit+0x158>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80020dc <HAL_UART_MspInit+0x158>)
 8001fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb8:	4b48      	ldr	r3, [pc, #288]	@ (80020dc <HAL_UART_MspInit+0x158>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4b44      	ldr	r3, [pc, #272]	@ (80020dc <HAL_UART_MspInit+0x158>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	4a43      	ldr	r2, [pc, #268]	@ (80020dc <HAL_UART_MspInit+0x158>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd4:	4b41      	ldr	r3, [pc, #260]	@ (80020dc <HAL_UART_MspInit+0x158>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4839      	ldr	r0, [pc, #228]	@ (80020e0 <HAL_UART_MspInit+0x15c>)
 8001ffc:	f001 f824 	bl	8003048 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002000:	4b38      	ldr	r3, [pc, #224]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002002:	4a39      	ldr	r2, [pc, #228]	@ (80020e8 <HAL_UART_MspInit+0x164>)
 8002004:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002006:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002008:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800200c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800200e:	4b35      	ldr	r3, [pc, #212]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002014:	4b33      	ldr	r3, [pc, #204]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800201a:	4b32      	ldr	r3, [pc, #200]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 800201c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002020:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002022:	4b30      	ldr	r3, [pc, #192]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002024:	2200      	movs	r2, #0
 8002026:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002028:	4b2e      	ldr	r3, [pc, #184]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800202e:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002030:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002034:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002036:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002038:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800203c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800203e:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002044:	4827      	ldr	r0, [pc, #156]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002046:	f000 fbfd 	bl	8002844 <HAL_DMA_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002050:	f7ff faa2 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a23      	ldr	r2, [pc, #140]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 8002058:	63da      	str	r2, [r3, #60]	@ 0x3c
 800205a:	4a22      	ldr	r2, [pc, #136]	@ (80020e4 <HAL_UART_MspInit+0x160>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002060:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <HAL_UART_MspInit+0x168>)
 8002062:	4a23      	ldr	r2, [pc, #140]	@ (80020f0 <HAL_UART_MspInit+0x16c>)
 8002064:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002066:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <HAL_UART_MspInit+0x168>)
 8002068:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800206c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800206e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <HAL_UART_MspInit+0x168>)
 8002070:	2240      	movs	r2, #64	@ 0x40
 8002072:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002074:	4b1d      	ldr	r3, [pc, #116]	@ (80020ec <HAL_UART_MspInit+0x168>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800207a:	4b1c      	ldr	r3, [pc, #112]	@ (80020ec <HAL_UART_MspInit+0x168>)
 800207c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002080:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002082:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <HAL_UART_MspInit+0x168>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002088:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <HAL_UART_MspInit+0x168>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800208e:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <HAL_UART_MspInit+0x168>)
 8002090:	2200      	movs	r2, #0
 8002092:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002094:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <HAL_UART_MspInit+0x168>)
 8002096:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800209a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <HAL_UART_MspInit+0x168>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020a2:	4812      	ldr	r0, [pc, #72]	@ (80020ec <HAL_UART_MspInit+0x168>)
 80020a4:	f000 fbce 	bl	8002844 <HAL_DMA_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80020ae:	f7ff fa73 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <HAL_UART_MspInit+0x168>)
 80020b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80020b8:	4a0c      	ldr	r2, [pc, #48]	@ (80020ec <HAL_UART_MspInit+0x168>)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2105      	movs	r1, #5
 80020c2:	2026      	movs	r0, #38	@ 0x26
 80020c4:	f000 fb87 	bl	80027d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020c8:	2026      	movs	r0, #38	@ 0x26
 80020ca:	f000 fba0 	bl	800280e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	@ 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40004400 	.word	0x40004400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	200040fc 	.word	0x200040fc
 80020e8:	40026088 	.word	0x40026088
 80020ec:	2000415c 	.word	0x2000415c
 80020f0:	400260a0 	.word	0x400260a0

080020f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <NMI_Handler+0x4>

080020fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <MemManage_Handler+0x4>

0800210c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <BusFault_Handler+0x4>

08002114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <UsageFault_Handler+0x4>

0800211c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800212e:	f000 fa33 	bl	8002598 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002132:	f00b fa77 	bl	800d624 <xTaskGetSchedulerState>
 8002136:	4603      	mov	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d001      	beq.n	8002140 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800213c:	f00c f86c 	bl	800e218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002148:	4802      	ldr	r0, [pc, #8]	@ (8002154 <DMA1_Stream5_IRQHandler+0x10>)
 800214a:	f000 fd13 	bl	8002b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200040fc 	.word	0x200040fc

08002158 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800215c:	4802      	ldr	r0, [pc, #8]	@ (8002168 <DMA1_Stream6_IRQHandler+0x10>)
 800215e:	f000 fd09 	bl	8002b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2000415c 	.word	0x2000415c

0800216c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002170:	4802      	ldr	r0, [pc, #8]	@ (800217c <USART2_IRQHandler+0x10>)
 8002172:	f004 fe57 	bl	8006e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200040b4 	.word	0x200040b4

08002180 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <OTG_FS_IRQHandler+0x10>)
 8002186:	f001 fbeb 	bl	8003960 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200097c0 	.word	0x200097c0

08002194 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return 1;
 8002198:	2301      	movs	r3, #1
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_kill>:

int _kill(int pid, int sig)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ae:	f01a f8d5 	bl	801c35c <__errno>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2216      	movs	r2, #22
 80021b6:	601a      	str	r2, [r3, #0]
  return -1;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_exit>:

void _exit (int status)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ffe7 	bl	80021a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021d6:	bf00      	nop
 80021d8:	e7fd      	b.n	80021d6 <_exit+0x12>

080021da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e00a      	b.n	8002202 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ec:	f3af 8000 	nop.w
 80021f0:	4601      	mov	r1, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	60ba      	str	r2, [r7, #8]
 80021f8:	b2ca      	uxtb	r2, r1
 80021fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	dbf0      	blt.n	80021ec <_read+0x12>
  }

  return len;
 800220a:	687b      	ldr	r3, [r7, #4]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e009      	b.n	800223a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	60ba      	str	r2, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	dbf1      	blt.n	8002226 <_write+0x12>
  }
  return len;
 8002242:	687b      	ldr	r3, [r7, #4]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_close>:

int _close(int file)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002274:	605a      	str	r2, [r3, #4]
  return 0;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_isatty>:

int _isatty(int file)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022bc:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <_sbrk+0x5c>)
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <_sbrk+0x60>)
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c8:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <_sbrk+0x64>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	@ (800231c <_sbrk+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d207      	bcs.n	80022f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e4:	f01a f83a 	bl	801c35c <__errno>
 80022e8:	4603      	mov	r3, r0
 80022ea:	220c      	movs	r2, #12
 80022ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022f2:	e009      	b.n	8002308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	4a05      	ldr	r2, [pc, #20]	@ (8002318 <_sbrk+0x64>)
 8002304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20020000 	.word	0x20020000
 8002314:	00000400 	.word	0x00000400
 8002318:	20004254 	.word	0x20004254
 800231c:	2000e868 	.word	0x2000e868

08002320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <SystemInit+0x20>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <SystemInit+0x20>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002352:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002354:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002358:	4904      	ldr	r1, [pc, #16]	@ (800236c <cubemx_transport_open+0x28>)
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f004 fcbe 	bl	8006cdc <HAL_UART_Receive_DMA>
    return true;
 8002360:	2301      	movs	r3, #1
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20004258 	.word	0x20004258

08002370 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800237e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f004 fcd0 	bl	8006d26 <HAL_UART_DMAStop>
    return true;
 8002386:	2301      	movs	r3, #1
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80023a4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d11c      	bne.n	80023ec <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f004 fc12 	bl	8006be4 <HAL_UART_Transmit_DMA>
 80023c0:	4603      	mov	r3, r0
 80023c2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80023c4:	e002      	b.n	80023cc <cubemx_transport_write+0x3c>
            osDelay(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f009 fa94 	bl	800b8f4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <cubemx_transport_write+0x4e>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d1f3      	bne.n	80023c6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <cubemx_transport_write+0x58>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	e002      	b.n	80023ee <cubemx_transport_write+0x5e>
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80023ec:	2300      	movs	r3, #0
    }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800240c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002412:	b672      	cpsid	i
}
 8002414:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002422:	4a1c      	ldr	r2, [pc, #112]	@ (8002494 <cubemx_transport_read+0x9c>)
 8002424:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002426:	b662      	cpsie	i
}
 8002428:	bf00      	nop
        __enable_irq();
        ms_used++;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002430:	2001      	movs	r0, #1
 8002432:	f009 fa5f 	bl	800b8f4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002436:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <cubemx_transport_read+0xa0>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b16      	ldr	r3, [pc, #88]	@ (8002494 <cubemx_transport_read+0x9c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d103      	bne.n	800244a <cubemx_transport_read+0x52>
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	dbe3      	blt.n	8002412 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800244e:	e011      	b.n	8002474 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <cubemx_transport_read+0xa0>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	440b      	add	r3, r1
 800245a:	4910      	ldr	r1, [pc, #64]	@ (800249c <cubemx_transport_read+0xa4>)
 800245c:	5c8a      	ldrb	r2, [r1, r2]
 800245e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002460:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <cubemx_transport_read+0xa0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800246a:	4a0b      	ldr	r2, [pc, #44]	@ (8002498 <cubemx_transport_read+0xa0>)
 800246c:	6013      	str	r3, [r2, #0]
        wrote++;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	3301      	adds	r3, #1
 8002472:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <cubemx_transport_read+0xa0>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <cubemx_transport_read+0x9c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d003      	beq.n	8002488 <cubemx_transport_read+0x90>
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	d3e3      	bcc.n	8002450 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002488:	69bb      	ldr	r3, [r7, #24]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20004a5c 	.word	0x20004a5c
 8002498:	20004a58 	.word	0x20004a58
 800249c:	20004258 	.word	0x20004258

080024a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024a4:	f7ff ff3c 	bl	8002320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024a8:	480c      	ldr	r0, [pc, #48]	@ (80024dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024aa:	490d      	ldr	r1, [pc, #52]	@ (80024e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b0:	e002      	b.n	80024b8 <LoopCopyDataInit>

080024b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b6:	3304      	adds	r3, #4

080024b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024bc:	d3f9      	bcc.n	80024b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024be:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024c0:	4c0a      	ldr	r4, [pc, #40]	@ (80024ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80024c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c4:	e001      	b.n	80024ca <LoopFillZerobss>

080024c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c8:	3204      	adds	r2, #4

080024ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024cc:	d3fb      	bcc.n	80024c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ce:	f019 ff4b 	bl	801c368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024d2:	f7fe fb6b 	bl	8000bac <main>
  bx  lr    
 80024d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e0:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80024e4:	0801e180 	.word	0x0801e180
  ldr r2, =_sbss
 80024e8:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80024ec:	2000e864 	.word	0x2000e864

080024f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024f0:	e7fe      	b.n	80024f0 <ADC_IRQHandler>
	...

080024f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002534 <HAL_Init+0x40>)
 80024fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002502:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <HAL_Init+0x40>)
 800250a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800250e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <HAL_Init+0x40>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800251a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800251c:	2003      	movs	r0, #3
 800251e:	f000 f94f 	bl	80027c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002522:	2000      	movs	r0, #0
 8002524:	f000 f808 	bl	8002538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002528:	f7ff fbd0 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023c00 	.word	0x40023c00

08002538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_InitTick+0x54>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b12      	ldr	r3, [pc, #72]	@ (8002590 <HAL_InitTick+0x58>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4619      	mov	r1, r3
 800254a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800254e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f967 	bl	800282a <HAL_SYSTICK_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00e      	b.n	8002584 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b0f      	cmp	r3, #15
 800256a:	d80a      	bhi.n	8002582 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800256c:	2200      	movs	r2, #0
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002574:	f000 f92f 	bl	80027d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002578:	4a06      	ldr	r2, [pc, #24]	@ (8002594 <HAL_InitTick+0x5c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000004 	.word	0x20000004
 8002590:	2000000c 	.word	0x2000000c
 8002594:	20000008 	.word	0x20000008

08002598 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_IncTick+0x20>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_IncTick+0x24>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	4a04      	ldr	r2, [pc, #16]	@ (80025bc <HAL_IncTick+0x24>)
 80025aa:	6013      	str	r3, [r2, #0]
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	2000000c 	.word	0x2000000c
 80025bc:	20004a60 	.word	0x20004a60

080025c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return uwTick;
 80025c4:	4b03      	ldr	r3, [pc, #12]	@ (80025d4 <HAL_GetTick+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20004a60 	.word	0x20004a60

080025d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025e0:	f7ff ffee 	bl	80025c0 <HAL_GetTick>
 80025e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025f0:	d005      	beq.n	80025fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025f2:	4b0a      	ldr	r3, [pc, #40]	@ (800261c <HAL_Delay+0x44>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025fe:	bf00      	nop
 8002600:	f7ff ffde 	bl	80025c0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d8f7      	bhi.n	8002600 <HAL_Delay+0x28>
  {
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	2000000c 	.word	0x2000000c

08002620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002630:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800263c:	4013      	ands	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800264c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002652:	4a04      	ldr	r2, [pc, #16]	@ (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	60d3      	str	r3, [r2, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800266c:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <__NVIC_GetPriorityGrouping+0x18>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 0307 	and.w	r3, r3, #7
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	2b00      	cmp	r3, #0
 8002694:	db0b      	blt.n	80026ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4907      	ldr	r1, [pc, #28]	@ (80026bc <__NVIC_EnableIRQ+0x38>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2001      	movs	r0, #1
 80026a6:	fa00 f202 	lsl.w	r2, r0, r2
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	db0a      	blt.n	80026ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	490c      	ldr	r1, [pc, #48]	@ (800270c <__NVIC_SetPriority+0x4c>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	0112      	lsls	r2, r2, #4
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	440b      	add	r3, r1
 80026e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e8:	e00a      	b.n	8002700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4908      	ldr	r1, [pc, #32]	@ (8002710 <__NVIC_SetPriority+0x50>)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	3b04      	subs	r3, #4
 80026f8:	0112      	lsls	r2, r2, #4
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	440b      	add	r3, r1
 80026fe:	761a      	strb	r2, [r3, #24]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000e100 	.word	0xe000e100
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	@ 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f1c3 0307 	rsb	r3, r3, #7
 800272e:	2b04      	cmp	r3, #4
 8002730:	bf28      	it	cs
 8002732:	2304      	movcs	r3, #4
 8002734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3304      	adds	r3, #4
 800273a:	2b06      	cmp	r3, #6
 800273c:	d902      	bls.n	8002744 <NVIC_EncodePriority+0x30>
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3b03      	subs	r3, #3
 8002742:	e000      	b.n	8002746 <NVIC_EncodePriority+0x32>
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	401a      	ands	r2, r3
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800275c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43d9      	mvns	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	4313      	orrs	r3, r2
         );
}
 800276e:	4618      	mov	r0, r3
 8002770:	3724      	adds	r7, #36	@ 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800278c:	d301      	bcc.n	8002792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800278e:	2301      	movs	r3, #1
 8002790:	e00f      	b.n	80027b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <SysTick_Config+0x40>)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800279a:	210f      	movs	r1, #15
 800279c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027a0:	f7ff ff8e 	bl	80026c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <SysTick_Config+0x40>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027aa:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <SysTick_Config+0x40>)
 80027ac:	2207      	movs	r2, #7
 80027ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	e000e010 	.word	0xe000e010

080027c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ff29 	bl	8002620 <__NVIC_SetPriorityGrouping>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b086      	sub	sp, #24
 80027da:	af00      	add	r7, sp, #0
 80027dc:	4603      	mov	r3, r0
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e8:	f7ff ff3e 	bl	8002668 <__NVIC_GetPriorityGrouping>
 80027ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68b9      	ldr	r1, [r7, #8]
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f7ff ff8e 	bl	8002714 <NVIC_EncodePriority>
 80027f8:	4602      	mov	r2, r0
 80027fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff5d 	bl	80026c0 <__NVIC_SetPriority>
}
 8002806:	bf00      	nop
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff31 	bl	8002684 <__NVIC_EnableIRQ>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ffa2 	bl	800277c <SysTick_Config>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002850:	f7ff feb6 	bl	80025c0 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e099      	b.n	8002994 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002880:	e00f      	b.n	80028a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002882:	f7ff fe9d 	bl	80025c0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b05      	cmp	r3, #5
 800288e:	d908      	bls.n	80028a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2203      	movs	r2, #3
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e078      	b.n	8002994 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e8      	bne.n	8002882 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4b38      	ldr	r3, [pc, #224]	@ (800299c <HAL_DMA_Init+0x158>)
 80028bc:	4013      	ands	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d107      	bne.n	800290c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	4313      	orrs	r3, r2
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0307 	bic.w	r3, r3, #7
 8002922:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	2b04      	cmp	r3, #4
 8002934:	d117      	bne.n	8002966 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00e      	beq.n	8002966 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fb01 	bl	8002f50 <DMA_CheckFifoParam>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2240      	movs	r2, #64	@ 0x40
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002962:	2301      	movs	r3, #1
 8002964:	e016      	b.n	8002994 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fab8 	bl	8002ee4 <DMA_CalcBaseAndBitshift>
 8002974:	4603      	mov	r3, r0
 8002976:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297c:	223f      	movs	r2, #63	@ 0x3f
 800297e:	409a      	lsls	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	f010803f 	.word	0xf010803f

080029a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_DMA_Start_IT+0x26>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e040      	b.n	8002a48 <HAL_DMA_Start_IT+0xa8>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d12f      	bne.n	8002a3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2202      	movs	r2, #2
 80029de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fa4a 	bl	8002e88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	223f      	movs	r2, #63	@ 0x3f
 80029fa:	409a      	lsls	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0216 	orr.w	r2, r2, #22
 8002a0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d007      	beq.n	8002a28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f042 0208 	orr.w	r2, r2, #8
 8002a26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e005      	b.n	8002a46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
 8002a44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a5e:	f7ff fdaf 	bl	80025c0 <HAL_GetTick>
 8002a62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d008      	beq.n	8002a82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2280      	movs	r2, #128	@ 0x80
 8002a74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e052      	b.n	8002b28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0216 	bic.w	r2, r2, #22
 8002a90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aa0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <HAL_DMA_Abort+0x62>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0208 	bic.w	r2, r2, #8
 8002ac0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad2:	e013      	b.n	8002afc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad4:	f7ff fd74 	bl	80025c0 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	d90c      	bls.n	8002afc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2203      	movs	r2, #3
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e015      	b.n	8002b28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e4      	bne.n	8002ad4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	223f      	movs	r2, #63	@ 0x3f
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d004      	beq.n	8002b4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2280      	movs	r2, #128	@ 0x80
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00c      	b.n	8002b68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2205      	movs	r2, #5
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b80:	4b8e      	ldr	r3, [pc, #568]	@ (8002dbc <HAL_DMA_IRQHandler+0x248>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a8e      	ldr	r2, [pc, #568]	@ (8002dc0 <HAL_DMA_IRQHandler+0x24c>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0a9b      	lsrs	r3, r3, #10
 8002b8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01a      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0204 	bic.w	r2, r2, #4
 8002bc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	2208      	movs	r2, #8
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	2201      	movs	r2, #1
 8002be6:	409a      	lsls	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d012      	beq.n	8002c16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c02:	2201      	movs	r2, #1
 8002c04:	409a      	lsls	r2, r3
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0e:	f043 0202 	orr.w	r2, r3, #2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4013      	ands	r3, r2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d012      	beq.n	8002c4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00b      	beq.n	8002c4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c38:	2204      	movs	r2, #4
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	2210      	movs	r2, #16
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d043      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d03c      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6e:	2210      	movs	r2, #16
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d024      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
 8002ca2:	e01f      	b.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01b      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
 8002cb4:	e016      	b.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0208 	bic.w	r2, r2, #8
 8002cd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	2220      	movs	r2, #32
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 808f 	beq.w	8002e14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8087 	beq.w	8002e14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d136      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0216 	bic.w	r2, r2, #22
 8002d2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d103      	bne.n	8002d4e <HAL_DMA_IRQHandler+0x1da>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0208 	bic.w	r2, r2, #8
 8002d5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d62:	223f      	movs	r2, #63	@ 0x3f
 8002d64:	409a      	lsls	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d07e      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	4798      	blx	r3
        }
        return;
 8002d8a:	e079      	b.n	8002e80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01d      	beq.n	8002dd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10d      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d031      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
 8002db8:	e02c      	b.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
 8002dba:	bf00      	nop
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d023      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
 8002dd4:	e01e      	b.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0210 	bic.w	r2, r2, #16
 8002df2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d032      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d022      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	3301      	adds	r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d307      	bcc.n	8002e5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f2      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x2cc>
 8002e5a:	e000      	b.n	8002e5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
 8002e7e:	e000      	b.n	8002e82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e80:	bf00      	nop
    }
  }
}
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b40      	cmp	r3, #64	@ 0x40
 8002eb4:	d108      	bne.n	8002ec8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ec6:	e007      	b.n	8002ed8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	60da      	str	r2, [r3, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	3b10      	subs	r3, #16
 8002ef4:	4a14      	ldr	r2, [pc, #80]	@ (8002f48 <DMA_CalcBaseAndBitshift+0x64>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002efe:	4a13      	ldr	r2, [pc, #76]	@ (8002f4c <DMA_CalcBaseAndBitshift+0x68>)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	d909      	bls.n	8002f26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f1a:	f023 0303 	bic.w	r3, r3, #3
 8002f1e:	1d1a      	adds	r2, r3, #4
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f24:	e007      	b.n	8002f36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	aaaaaaab 	.word	0xaaaaaaab
 8002f4c:	0801d2a4 	.word	0x0801d2a4

08002f50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11f      	bne.n	8002faa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d856      	bhi.n	800301e <DMA_CheckFifoParam+0xce>
 8002f70:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <DMA_CheckFifoParam+0x28>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002f9b 	.word	0x08002f9b
 8002f80:	08002f89 	.word	0x08002f89
 8002f84:	0800301f 	.word	0x0800301f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d046      	beq.n	8003022 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f98:	e043      	b.n	8003022 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fa2:	d140      	bne.n	8003026 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa8:	e03d      	b.n	8003026 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb2:	d121      	bne.n	8002ff8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d837      	bhi.n	800302a <DMA_CheckFifoParam+0xda>
 8002fba:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <DMA_CheckFifoParam+0x70>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fd7 	.word	0x08002fd7
 8002fc8:	08002fd1 	.word	0x08002fd1
 8002fcc:	08002fe9 	.word	0x08002fe9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd4:	e030      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d025      	beq.n	800302e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe6:	e022      	b.n	800302e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ff0:	d11f      	bne.n	8003032 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ff6:	e01c      	b.n	8003032 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d903      	bls.n	8003006 <DMA_CheckFifoParam+0xb6>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d003      	beq.n	800300c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003004:	e018      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
      break;
 800300a:	e015      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      break;
 800301c:	e00b      	b.n	8003036 <DMA_CheckFifoParam+0xe6>
      break;
 800301e:	bf00      	nop
 8003020:	e00a      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 8003022:	bf00      	nop
 8003024:	e008      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 8003026:	bf00      	nop
 8003028:	e006      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 800302a:	bf00      	nop
 800302c:	e004      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 800302e:	bf00      	nop
 8003030:	e002      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;   
 8003032:	bf00      	nop
 8003034:	e000      	b.n	8003038 <DMA_CheckFifoParam+0xe8>
      break;
 8003036:	bf00      	nop
    }
  } 
  
  return status; 
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	@ 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e16b      	b.n	800333c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003064:	2201      	movs	r2, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4013      	ands	r3, r2
 8003076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	429a      	cmp	r2, r3
 800307e:	f040 815a 	bne.w	8003336 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d005      	beq.n	800309a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003096:	2b02      	cmp	r3, #2
 8003098:	d130      	bne.n	80030fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	2203      	movs	r2, #3
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 0201 	and.w	r2, r3, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b03      	cmp	r3, #3
 8003106:	d017      	beq.n	8003138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d123      	bne.n	800318c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	08da      	lsrs	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	220f      	movs	r2, #15
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0307 	and.w	r3, r3, #7
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	08da      	lsrs	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3208      	adds	r2, #8
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0203 	and.w	r2, r3, #3
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80b4 	beq.w	8003336 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	4b60      	ldr	r3, [pc, #384]	@ (8003354 <HAL_GPIO_Init+0x30c>)
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	4a5f      	ldr	r2, [pc, #380]	@ (8003354 <HAL_GPIO_Init+0x30c>)
 80031d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80031de:	4b5d      	ldr	r3, [pc, #372]	@ (8003354 <HAL_GPIO_Init+0x30c>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003358 <HAL_GPIO_Init+0x310>)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	3302      	adds	r3, #2
 80031f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	220f      	movs	r2, #15
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a52      	ldr	r2, [pc, #328]	@ (800335c <HAL_GPIO_Init+0x314>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d02b      	beq.n	800326e <HAL_GPIO_Init+0x226>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a51      	ldr	r2, [pc, #324]	@ (8003360 <HAL_GPIO_Init+0x318>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d025      	beq.n	800326a <HAL_GPIO_Init+0x222>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a50      	ldr	r2, [pc, #320]	@ (8003364 <HAL_GPIO_Init+0x31c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01f      	beq.n	8003266 <HAL_GPIO_Init+0x21e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4f      	ldr	r2, [pc, #316]	@ (8003368 <HAL_GPIO_Init+0x320>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d019      	beq.n	8003262 <HAL_GPIO_Init+0x21a>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4e      	ldr	r2, [pc, #312]	@ (800336c <HAL_GPIO_Init+0x324>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <HAL_GPIO_Init+0x216>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4d      	ldr	r2, [pc, #308]	@ (8003370 <HAL_GPIO_Init+0x328>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00d      	beq.n	800325a <HAL_GPIO_Init+0x212>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4c      	ldr	r2, [pc, #304]	@ (8003374 <HAL_GPIO_Init+0x32c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <HAL_GPIO_Init+0x20e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4b      	ldr	r2, [pc, #300]	@ (8003378 <HAL_GPIO_Init+0x330>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_GPIO_Init+0x20a>
 800324e:	2307      	movs	r3, #7
 8003250:	e00e      	b.n	8003270 <HAL_GPIO_Init+0x228>
 8003252:	2308      	movs	r3, #8
 8003254:	e00c      	b.n	8003270 <HAL_GPIO_Init+0x228>
 8003256:	2306      	movs	r3, #6
 8003258:	e00a      	b.n	8003270 <HAL_GPIO_Init+0x228>
 800325a:	2305      	movs	r3, #5
 800325c:	e008      	b.n	8003270 <HAL_GPIO_Init+0x228>
 800325e:	2304      	movs	r3, #4
 8003260:	e006      	b.n	8003270 <HAL_GPIO_Init+0x228>
 8003262:	2303      	movs	r3, #3
 8003264:	e004      	b.n	8003270 <HAL_GPIO_Init+0x228>
 8003266:	2302      	movs	r3, #2
 8003268:	e002      	b.n	8003270 <HAL_GPIO_Init+0x228>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_GPIO_Init+0x228>
 800326e:	2300      	movs	r3, #0
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	f002 0203 	and.w	r2, r2, #3
 8003276:	0092      	lsls	r2, r2, #2
 8003278:	4093      	lsls	r3, r2
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003280:	4935      	ldr	r1, [pc, #212]	@ (8003358 <HAL_GPIO_Init+0x310>)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	3302      	adds	r3, #2
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800328e:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <HAL_GPIO_Init+0x334>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b2:	4a32      	ldr	r2, [pc, #200]	@ (800337c <HAL_GPIO_Init+0x334>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b8:	4b30      	ldr	r3, [pc, #192]	@ (800337c <HAL_GPIO_Init+0x334>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032dc:	4a27      	ldr	r2, [pc, #156]	@ (800337c <HAL_GPIO_Init+0x334>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032e2:	4b26      	ldr	r3, [pc, #152]	@ (800337c <HAL_GPIO_Init+0x334>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003306:	4a1d      	ldr	r2, [pc, #116]	@ (800337c <HAL_GPIO_Init+0x334>)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800330c:	4b1b      	ldr	r3, [pc, #108]	@ (800337c <HAL_GPIO_Init+0x334>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003330:	4a12      	ldr	r2, [pc, #72]	@ (800337c <HAL_GPIO_Init+0x334>)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3301      	adds	r3, #1
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2b0f      	cmp	r3, #15
 8003340:	f67f ae90 	bls.w	8003064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	3724      	adds	r7, #36	@ 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	40013800 	.word	0x40013800
 800335c:	40020000 	.word	0x40020000
 8003360:	40020400 	.word	0x40020400
 8003364:	40020800 	.word	0x40020800
 8003368:	40020c00 	.word	0x40020c00
 800336c:	40021000 	.word	0x40021000
 8003370:	40021400 	.word	0x40021400
 8003374:	40021800 	.word	0x40021800
 8003378:	40021c00 	.word	0x40021c00
 800337c:	40013c00 	.word	0x40013c00

08003380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]
 800338c:	4613      	mov	r3, r2
 800338e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003390:	787b      	ldrb	r3, [r7, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800339c:	e003      	b.n	80033a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	041a      	lsls	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	619a      	str	r2, [r3, #24]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	460b      	mov	r3, r1
 80033bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033c4:	887a      	ldrh	r2, [r7, #2]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4013      	ands	r3, r2
 80033ca:	041a      	lsls	r2, r3, #16
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	43d9      	mvns	r1, r3
 80033d0:	887b      	ldrh	r3, [r7, #2]
 80033d2:	400b      	ands	r3, r1
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	619a      	str	r2, [r3, #24]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af02      	add	r7, sp, #8
 80033ec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e059      	b.n	80034ac <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f00b f9d4 	bl	800e7c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2203      	movs	r2, #3
 800341c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003426:	d102      	bne.n	800342e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f004 fe89 	bl	800814a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7c1a      	ldrb	r2, [r3, #16]
 8003440:	f88d 2000 	strb.w	r2, [sp]
 8003444:	3304      	adds	r3, #4
 8003446:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003448:	f004 fe0a 	bl	8008060 <USB_CoreInit>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e026      	b.n	80034ac <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2101      	movs	r1, #1
 8003464:	4618      	mov	r0, r3
 8003466:	f004 fe81 	bl	800816c <USB_SetCurrentMode>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e017      	b.n	80034ac <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7c1a      	ldrb	r2, [r3, #16]
 8003484:	f88d 2000 	strb.w	r2, [sp]
 8003488:	3304      	adds	r3, #4
 800348a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800348c:	f005 f82a 	bl	80084e4 <USB_HostInit>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e004      	b.n	80034ac <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80034b4:	b590      	push	{r4, r7, lr}
 80034b6:	b08b      	sub	sp, #44	@ 0x2c
 80034b8:	af04      	add	r7, sp, #16
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	4608      	mov	r0, r1
 80034be:	4611      	mov	r1, r2
 80034c0:	461a      	mov	r2, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	70fb      	strb	r3, [r7, #3]
 80034c6:	460b      	mov	r3, r1
 80034c8:	70bb      	strb	r3, [r7, #2]
 80034ca:	4613      	mov	r3, r2
 80034cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80034ce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80034d0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_HCD_HC_Init+0x2c>
 80034dc:	2302      	movs	r3, #2
 80034de:	e09d      	b.n	800361c <HAL_HCD_HC_Init+0x168>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3319      	adds	r3, #25
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3314      	adds	r3, #20
 800350c:	787a      	ldrb	r2, [r7, #1]
 800350e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3315      	adds	r3, #21
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3326      	adds	r3, #38	@ 0x26
 8003534:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003538:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	78bb      	ldrb	r3, [r7, #2]
 800353e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003542:	b2d8      	uxtb	r0, r3
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3316      	adds	r3, #22
 8003552:	4602      	mov	r2, r0
 8003554:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	4619      	mov	r1, r3
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fba4 	bl	8003ca8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003560:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003564:	2b00      	cmp	r3, #0
 8003566:	da0a      	bge.n	800357e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	4613      	mov	r3, r2
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	1a9b      	subs	r3, r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	440b      	add	r3, r1
 8003576:	3317      	adds	r3, #23
 8003578:	2201      	movs	r2, #1
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e009      	b.n	8003592 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	3317      	adds	r3, #23
 800358e:	2200      	movs	r2, #0
 8003590:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f005 f908 	bl	80087ac <USB_GetHostSpeed>
 800359c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800359e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10b      	bne.n	80035be <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80035a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_HCD_HC_Init+0x10a>
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2bbc      	cmp	r3, #188	@ 0xbc
 80035b8:	d901      	bls.n	80035be <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80035ba:	23bc      	movs	r3, #188	@ 0xbc
 80035bc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	3318      	adds	r3, #24
 80035ce:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80035d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	b298      	uxth	r0, r3
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	3328      	adds	r3, #40	@ 0x28
 80035e8:	4602      	mov	r2, r0
 80035ea:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	787c      	ldrb	r4, [r7, #1]
 80035f6:	78ba      	ldrb	r2, [r7, #2]
 80035f8:	78f9      	ldrb	r1, [r7, #3]
 80035fa:	9302      	str	r3, [sp, #8]
 80035fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	4623      	mov	r3, r4
 800360a:	f005 f8f7 	bl	80087fc <USB_HC_Init>
 800360e:	4603      	mov	r3, r0
 8003610:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800361a:	7bfb      	ldrb	r3, [r7, #15]
}
 800361c:	4618      	mov	r0, r3
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd90      	pop	{r4, r7, pc}

08003624 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	4603      	mov	r3, r0
 8003634:	70fb      	strb	r3, [r7, #3]
 8003636:	460b      	mov	r3, r1
 8003638:	70bb      	strb	r3, [r7, #2]
 800363a:	4613      	mov	r3, r2
 800363c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3317      	adds	r3, #23
 800364e:	78ba      	ldrb	r2, [r7, #2]
 8003650:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3326      	adds	r3, #38	@ 0x26
 8003662:	787a      	ldrb	r2, [r7, #1]
 8003664:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003666:	7c3b      	ldrb	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d114      	bne.n	8003696 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	332a      	adds	r3, #42	@ 0x2a
 800367c:	2203      	movs	r2, #3
 800367e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3319      	adds	r3, #25
 8003690:	7f3a      	ldrb	r2, [r7, #28]
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	e009      	b.n	80036aa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	332a      	adds	r3, #42	@ 0x2a
 80036a6:	2202      	movs	r2, #2
 80036a8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80036aa:	787b      	ldrb	r3, [r7, #1]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	f200 8102 	bhi.w	80038b6 <HAL_HCD_HC_SubmitRequest+0x292>
 80036b2:	a201      	add	r2, pc, #4	@ (adr r2, 80036b8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	080036c9 	.word	0x080036c9
 80036bc:	080038a1 	.word	0x080038a1
 80036c0:	0800378d 	.word	0x0800378d
 80036c4:	08003817 	.word	0x08003817
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80036c8:	7c3b      	ldrb	r3, [r7, #16]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	f040 80f5 	bne.w	80038ba <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80036d0:	78bb      	ldrb	r3, [r7, #2]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d12d      	bne.n	8003732 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80036d6:	8b3b      	ldrh	r3, [r7, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	333d      	adds	r3, #61	@ 0x3d
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	333d      	adds	r3, #61	@ 0x3d
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	332a      	adds	r3, #42	@ 0x2a
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800371a:	e0ce      	b.n	80038ba <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	332a      	adds	r3, #42	@ 0x2a
 800372c:	2202      	movs	r2, #2
 800372e:	701a      	strb	r2, [r3, #0]
      break;
 8003730:	e0c3      	b.n	80038ba <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	331a      	adds	r3, #26
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	f040 80b8 	bne.w	80038ba <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800374a:	78fa      	ldrb	r2, [r7, #3]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	333c      	adds	r3, #60	@ 0x3c
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	332a      	adds	r3, #42	@ 0x2a
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
      break;
 8003774:	e0a1      	b.n	80038ba <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	332a      	adds	r3, #42	@ 0x2a
 8003786:	2202      	movs	r2, #2
 8003788:	701a      	strb	r2, [r3, #0]
      break;
 800378a:	e096      	b.n	80038ba <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800378c:	78bb      	ldrb	r3, [r7, #2]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d120      	bne.n	80037d4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	333d      	adds	r3, #61	@ 0x3d
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	332a      	adds	r3, #42	@ 0x2a
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80037bc:	e07e      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	332a      	adds	r3, #42	@ 0x2a
 80037ce:	2202      	movs	r2, #2
 80037d0:	701a      	strb	r2, [r3, #0]
      break;
 80037d2:	e073      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80037d4:	78fa      	ldrb	r2, [r7, #3]
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4613      	mov	r3, r2
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	333c      	adds	r3, #60	@ 0x3c
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	332a      	adds	r3, #42	@ 0x2a
 80037fa:	2200      	movs	r2, #0
 80037fc:	701a      	strb	r2, [r3, #0]
      break;
 80037fe:	e05d      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	332a      	adds	r3, #42	@ 0x2a
 8003810:	2202      	movs	r2, #2
 8003812:	701a      	strb	r2, [r3, #0]
      break;
 8003814:	e052      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003816:	78bb      	ldrb	r3, [r7, #2]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d120      	bne.n	800385e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	333d      	adds	r3, #61	@ 0x3d
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	332a      	adds	r3, #42	@ 0x2a
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003846:	e039      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	332a      	adds	r3, #42	@ 0x2a
 8003858:	2202      	movs	r2, #2
 800385a:	701a      	strb	r2, [r3, #0]
      break;
 800385c:	e02e      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	333c      	adds	r3, #60	@ 0x3c
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	332a      	adds	r3, #42	@ 0x2a
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
      break;
 8003888:	e018      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	332a      	adds	r3, #42	@ 0x2a
 800389a:	2202      	movs	r2, #2
 800389c:	701a      	strb	r2, [r3, #0]
      break;
 800389e:	e00d      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	332a      	adds	r3, #42	@ 0x2a
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
      break;
 80038b4:	e002      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80038ba:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	332c      	adds	r3, #44	@ 0x2c
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	8b39      	ldrh	r1, [r7, #24]
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4403      	add	r3, r0
 80038e0:	3334      	adds	r3, #52	@ 0x34
 80038e2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	334c      	adds	r3, #76	@ 0x4c
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	3338      	adds	r3, #56	@ 0x38
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3315      	adds	r3, #21
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	334d      	adds	r3, #77	@ 0x4d
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	3310      	adds	r3, #16
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	1d19      	adds	r1, r3, #4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	799b      	ldrb	r3, [r3, #6]
 800394e:	461a      	mov	r2, r3
 8003950:	f005 f880 	bl	8008a54 <USB_HC_StartXfer>
 8003954:	4603      	mov	r3, r0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop

08003960 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fd6e 	bl	8008458 <USB_GetMode>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	f040 80fb 	bne.w	8003b7a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f004 fd31 	bl	80083f0 <USB_ReadInterrupts>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 80f1 	beq.w	8003b78 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f004 fd28 	bl	80083f0 <USB_ReadInterrupts>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039aa:	d104      	bne.n	80039b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80039b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f004 fd18 	bl	80083f0 <USB_ReadInterrupts>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039ca:	d104      	bne.n	80039d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80039d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f004 fd08 	bl	80083f0 <USB_ReadInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039ea:	d104      	bne.n	80039f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80039f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 fcf8 	bl	80083f0 <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d103      	bne.n	8003a12 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f004 fcea 	bl	80083f0 <USB_ReadInterrupts>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a26:	d120      	bne.n	8003a6a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003a30:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d113      	bne.n	8003a6a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003a42:	2110      	movs	r1, #16
 8003a44:	6938      	ldr	r0, [r7, #16]
 8003a46:	f004 fbdd 	bl	8008204 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003a4a:	6938      	ldr	r0, [r7, #16]
 8003a4c:	f004 fc0c 	bl	8008268 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7a5b      	ldrb	r3, [r3, #9]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d105      	bne.n	8003a64 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f004 fe04 	bl	800866c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f00a ff29 	bl	800e8bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f004 fcbe 	bl	80083f0 <USB_ReadInterrupts>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a7e:	d102      	bne.n	8003a86 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f001 fd4d 	bl	8005520 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f004 fcb0 	bl	80083f0 <USB_ReadInterrupts>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d106      	bne.n	8003aa8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f00a fef2 	bl	800e884 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f004 fc9f 	bl	80083f0 <USB_ReadInterrupts>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003abc:	d139      	bne.n	8003b32 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f005 fa40 	bl	8008f48 <USB_HC_ReadInterrupt>
 8003ac8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e025      	b.n	8003b1c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d018      	beq.n	8003b16 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afa:	d106      	bne.n	8003b0a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f905 	bl	8003d12 <HCD_HC_IN_IRQHandler>
 8003b08:	e005      	b.n	8003b16 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 ff67 	bl	80049e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	795b      	ldrb	r3, [r3, #5]
 8003b20:	461a      	mov	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d3d3      	bcc.n	8003ad0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 fc5a 	bl	80083f0 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f003 0310 	and.w	r3, r3, #16
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d101      	bne.n	8003b4a <HAL_HCD_IRQHandler+0x1ea>
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <HAL_HCD_IRQHandler+0x1ec>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d014      	beq.n	8003b7a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0210 	bic.w	r2, r2, #16
 8003b5e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f001 fbfe 	bl	8005362 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0210 	orr.w	r2, r2, #16
 8003b74:	619a      	str	r2, [r3, #24]
 8003b76:	e000      	b.n	8003b7a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003b78:	bf00      	nop
    }
  }
}
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_HCD_Start+0x16>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e013      	b.n	8003bbe <HAL_HCD_Start+0x3e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f004 fdc8 	bl	800873a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 faba 	bl	8008128 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_HCD_Stop+0x16>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e00d      	b.n	8003bf8 <HAL_HCD_Stop+0x32>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f005 fb1b 	bl	8009224 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f004 fd6a 	bl	80086e6 <USB_ResetPort>
 8003c12:	4603      	mov	r3, r0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	334c      	adds	r3, #76	@ 0x4c
 8003c38:	781b      	ldrb	r3, [r3, #0]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	3338      	adds	r3, #56	@ 0x38
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f004 fdac 	bl	80087da <USB_GetCurrentFrame>
 8003c82:	4603      	mov	r3, r0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f004 fd87 	bl	80087ac <USB_GetHostSpeed>
 8003c9e:	4603      	mov	r3, r0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	331a      	adds	r3, #26
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	331b      	adds	r3, #27
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3325      	adds	r3, #37	@ 0x25
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	3324      	adds	r3, #36	@ 0x24
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f004 fb70 	bl	8008416 <USB_ReadChInterrupts>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d11a      	bne.n	8003d76 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2304      	movs	r3, #4
 8003d50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	334d      	adds	r3, #77	@ 0x4d
 8003d62:	2207      	movs	r2, #7
 8003d64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f005 f8fb 	bl	8008f6a <USB_HC_Halt>
 8003d74:	e09e      	b.n	8003eb4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 fb49 	bl	8008416 <USB_ReadChInterrupts>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d8e:	d11b      	bne.n	8003dc8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003da2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	334d      	adds	r3, #77	@ 0x4d
 8003db4:	2208      	movs	r2, #8
 8003db6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	78fa      	ldrb	r2, [r7, #3]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f005 f8d2 	bl	8008f6a <USB_HC_Halt>
 8003dc6:	e075      	b.n	8003eb4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 fb20 	bl	8008416 <USB_ReadChInterrupts>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d11a      	bne.n	8003e16 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dec:	461a      	mov	r2, r3
 8003dee:	2308      	movs	r3, #8
 8003df0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	334d      	adds	r3, #77	@ 0x4d
 8003e02:	2206      	movs	r2, #6
 8003e04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f005 f8ab 	bl	8008f6a <USB_HC_Halt>
 8003e14:	e04e      	b.n	8003eb4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f004 faf9 	bl	8008416 <USB_ReadChInterrupts>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e2e:	d11b      	bne.n	8003e68 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	334d      	adds	r3, #77	@ 0x4d
 8003e54:	2209      	movs	r2, #9
 8003e56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f005 f882 	bl	8008f6a <USB_HC_Halt>
 8003e66:	e025      	b.n	8003eb4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f004 fad0 	bl	8008416 <USB_ReadChInterrupts>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7c:	2b80      	cmp	r3, #128	@ 0x80
 8003e7e:	d119      	bne.n	8003eb4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2380      	movs	r3, #128	@ 0x80
 8003e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	334d      	adds	r3, #77	@ 0x4d
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	4611      	mov	r1, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f005 f85b 	bl	8008f6a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f004 faaa 	bl	8008416 <USB_ReadChInterrupts>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ecc:	d112      	bne.n	8003ef4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f005 f847 	bl	8008f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003eee:	6093      	str	r3, [r2, #8]
 8003ef0:	f000 bd75 	b.w	80049de <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 fa8a 	bl	8008416 <USB_ReadChInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	f040 8128 	bne.w	800415e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	331b      	adds	r3, #27
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d119      	bne.n	8003f6a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	331b      	adds	r3, #27
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f68:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	799b      	ldrb	r3, [r3, #6]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01b      	beq.n	8003faa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	3330      	adds	r3, #48	@ 0x30
 8003f82:	6819      	ldr	r1, [r3, #0]
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	1ac9      	subs	r1, r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4403      	add	r3, r0
 8003fa6:	3338      	adds	r3, #56	@ 0x38
 8003fa8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	334d      	adds	r3, #77	@ 0x4d
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3344      	adds	r3, #68	@ 0x44
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003fd2:	78fb      	ldrb	r3, [r7, #3]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3326      	adds	r3, #38	@ 0x26
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	3326      	adds	r3, #38	@ 0x26
 800400a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800400c:	2b02      	cmp	r3, #2
 800400e:	d110      	bne.n	8004032 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f004 ffa6 	bl	8008f6a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800402a:	461a      	mov	r2, r3
 800402c:	2310      	movs	r3, #16
 800402e:	6093      	str	r3, [r2, #8]
 8004030:	e03d      	b.n	80040ae <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3326      	adds	r3, #38	@ 0x26
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d00a      	beq.n	800405e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	3326      	adds	r3, #38	@ 0x26
 8004058:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800405a:	2b01      	cmp	r3, #1
 800405c:	d127      	bne.n	80040ae <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	78fa      	ldrb	r2, [r7, #3]
 800406e:	0151      	lsls	r1, r2, #5
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	440a      	add	r2, r1
 8004074:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004078:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800407c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	334c      	adds	r3, #76	@ 0x4c
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	334c      	adds	r3, #76	@ 0x4c
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f00a fc15 	bl	800e8d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	799b      	ldrb	r3, [r3, #6]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d13b      	bne.n	800412e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	3338      	adds	r3, #56	@ 0x38
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4403      	add	r3, r0
 80040d6:	3328      	adds	r3, #40	@ 0x28
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	440b      	add	r3, r1
 80040dc:	1e59      	subs	r1, r3, #1
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4403      	add	r3, r0
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8470 	beq.w	80049de <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	333c      	adds	r3, #60	@ 0x3c
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	f083 0301 	eor.w	r3, r3, #1
 8004116:	b2d8      	uxtb	r0, r3
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	333c      	adds	r3, #60	@ 0x3c
 8004126:	4602      	mov	r2, r0
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	f000 bc58 	b.w	80049de <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	333c      	adds	r3, #60	@ 0x3c
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2d8      	uxtb	r0, r3
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	333c      	adds	r3, #60	@ 0x3c
 8004156:	4602      	mov	r2, r0
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	f000 bc40 	b.w	80049de <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f004 f955 	bl	8008416 <USB_ReadChInterrupts>
 800416c:	4603      	mov	r3, r0
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b20      	cmp	r3, #32
 8004174:	d131      	bne.n	80041da <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004182:	461a      	mov	r2, r3
 8004184:	2320      	movs	r3, #32
 8004186:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	331a      	adds	r3, #26
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	f040 841f 	bne.w	80049de <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	331b      	adds	r3, #27
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80041b4:	78fa      	ldrb	r2, [r7, #3]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	334d      	adds	r3, #77	@ 0x4d
 80041c4:	2203      	movs	r2, #3
 80041c6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f004 feca 	bl	8008f6a <USB_HC_Halt>
 80041d6:	f000 bc02 	b.w	80049de <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 f917 	bl	8008416 <USB_ReadChInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	f040 8305 	bne.w	80047fe <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004200:	461a      	mov	r2, r3
 8004202:	2302      	movs	r3, #2
 8004204:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	334d      	adds	r3, #77	@ 0x4d
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d114      	bne.n	8004246 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	1a9b      	subs	r3, r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	334d      	adds	r3, #77	@ 0x4d
 800422c:	2202      	movs	r2, #2
 800422e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	334c      	adds	r3, #76	@ 0x4c
 8004240:	2201      	movs	r2, #1
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e2cc      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	334d      	adds	r3, #77	@ 0x4d
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d114      	bne.n	8004286 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	334d      	adds	r3, #77	@ 0x4d
 800426c:	2202      	movs	r2, #2
 800426e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	334c      	adds	r3, #76	@ 0x4c
 8004280:	2205      	movs	r2, #5
 8004282:	701a      	strb	r2, [r3, #0]
 8004284:	e2ac      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	334d      	adds	r3, #77	@ 0x4d
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	2b07      	cmp	r3, #7
 800429a:	d00b      	beq.n	80042b4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	334d      	adds	r3, #77	@ 0x4d
 80042ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	f040 80a6 	bne.w	8004400 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	334d      	adds	r3, #77	@ 0x4d
 80042c4:	2202      	movs	r2, #2
 80042c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3344      	adds	r3, #68	@ 0x44
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	1c59      	adds	r1, r3, #1
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	1a9b      	subs	r3, r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4403      	add	r3, r0
 80042e8:	3344      	adds	r3, #68	@ 0x44
 80042ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	3344      	adds	r3, #68	@ 0x44
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d943      	bls.n	800438a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004302:	78fa      	ldrb	r2, [r7, #3]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	3344      	adds	r3, #68	@ 0x44
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	331a      	adds	r3, #26
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d123      	bne.n	8004374 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	331b      	adds	r3, #27
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004340:	78fa      	ldrb	r2, [r7, #3]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	331c      	adds	r3, #28
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	440a      	add	r2, r1
 800436a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800436e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004372:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	334c      	adds	r3, #76	@ 0x4c
 8004384:	2204      	movs	r2, #4
 8004386:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004388:	e229      	b.n	80047de <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	334c      	adds	r3, #76	@ 0x4c
 800439a:	2202      	movs	r2, #2
 800439c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	3326      	adds	r3, #38	@ 0x26
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00b      	beq.n	80043cc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	3326      	adds	r3, #38	@ 0x26
 80043c4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	f040 8209 	bne.w	80047de <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043e2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043ea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f8:	461a      	mov	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043fe:	e1ee      	b.n	80047de <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	334d      	adds	r3, #77	@ 0x4d
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b05      	cmp	r3, #5
 8004414:	f040 80c8 	bne.w	80045a8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	2202      	movs	r2, #2
 800442a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	331b      	adds	r3, #27
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b01      	cmp	r3, #1
 8004440:	f040 81ce 	bne.w	80047e0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3326      	adds	r3, #38	@ 0x26
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b03      	cmp	r3, #3
 8004458:	d16b      	bne.n	8004532 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3348      	adds	r3, #72	@ 0x48
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	1c59      	adds	r1, r3, #1
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4403      	add	r3, r0
 800447a:	3348      	adds	r3, #72	@ 0x48
 800447c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3348      	adds	r3, #72	@ 0x48
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d943      	bls.n	800451c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	3348      	adds	r3, #72	@ 0x48
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	331b      	adds	r3, #27
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	3344      	adds	r3, #68	@ 0x44
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d809      	bhi.n	80044e6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	331c      	adds	r3, #28
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004500:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004504:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	334c      	adds	r3, #76	@ 0x4c
 8004516:	2204      	movs	r2, #4
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	e014      	b.n	8004546 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	334c      	adds	r3, #76	@ 0x4c
 800452c:	2202      	movs	r2, #2
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e009      	b.n	8004546 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	334c      	adds	r3, #76	@ 0x4c
 8004542:	2202      	movs	r2, #2
 8004544:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	3326      	adds	r3, #38	@ 0x26
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00b      	beq.n	8004574 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	3326      	adds	r3, #38	@ 0x26
 800456c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800456e:	2b02      	cmp	r3, #2
 8004570:	f040 8136 	bne.w	80047e0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004574:	78fb      	ldrb	r3, [r7, #3]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4413      	add	r3, r2
 800457c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800458a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004592:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4413      	add	r3, r2
 800459c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a0:	461a      	mov	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e11b      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	334d      	adds	r3, #77	@ 0x4d
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	f040 8081 	bne.w	80046c2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	334d      	adds	r3, #77	@ 0x4d
 80045d0:	2202      	movs	r2, #2
 80045d2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	331b      	adds	r3, #27
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	f040 80fa 	bne.w	80047e0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	334c      	adds	r3, #76	@ 0x4c
 80045fc:	2202      	movs	r2, #2
 80045fe:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	0151      	lsls	r1, r2, #5
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	440a      	add	r2, r1
 8004616:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800461a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800461e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	0151      	lsls	r1, r2, #5
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	440a      	add	r2, r1
 8004636:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800463a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800463e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	440a      	add	r2, r1
 8004656:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800465a:	f023 0320 	bic.w	r3, r3, #32
 800465e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3326      	adds	r3, #38	@ 0x26
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	3326      	adds	r3, #38	@ 0x26
 8004686:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004688:	2b02      	cmp	r3, #2
 800468a:	f040 80a9 	bne.w	80047e0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	4413      	add	r3, r2
 8004696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046a4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046ac:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e08e      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	334d      	adds	r3, #77	@ 0x4d
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d143      	bne.n	8004760 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	334d      	adds	r3, #77	@ 0x4d
 80046e8:	2202      	movs	r2, #2
 80046ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	334c      	adds	r3, #76	@ 0x4c
 80046fc:	2202      	movs	r2, #2
 80046fe:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3326      	adds	r3, #38	@ 0x26
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3326      	adds	r3, #38	@ 0x26
 8004726:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004728:	2b02      	cmp	r3, #2
 800472a:	d159      	bne.n	80047e0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004742:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800474a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004758:	461a      	mov	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e03f      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	334d      	adds	r3, #77	@ 0x4d
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b08      	cmp	r3, #8
 8004774:	d126      	bne.n	80047c4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	334d      	adds	r3, #77	@ 0x4d
 8004786:	2202      	movs	r2, #2
 8004788:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	3344      	adds	r3, #68	@ 0x44
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	1c59      	adds	r1, r3, #1
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4403      	add	r3, r0
 80047aa:	3344      	adds	r3, #68	@ 0x44
 80047ac:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	334c      	adds	r3, #76	@ 0x4c
 80047be:	2204      	movs	r2, #4
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e00d      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	334d      	adds	r3, #77	@ 0x4d
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	f000 8100 	beq.w	80049dc <HCD_HC_IN_IRQHandler+0xcca>
 80047dc:	e000      	b.n	80047e0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047de:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	334c      	adds	r3, #76	@ 0x4c
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f00a f86e 	bl	800e8d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80047fc:	e0ef      	b.n	80049de <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	78fa      	ldrb	r2, [r7, #3]
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f003 fe05 	bl	8008416 <USB_ReadChInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d12f      	bne.n	8004876 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4413      	add	r3, r2
 800481e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004822:	461a      	mov	r2, r3
 8004824:	2340      	movs	r3, #64	@ 0x40
 8004826:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	334d      	adds	r3, #77	@ 0x4d
 8004838:	2205      	movs	r2, #5
 800483a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	331a      	adds	r3, #26
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004852:	78fa      	ldrb	r2, [r7, #3]
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	4613      	mov	r3, r2
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	1a9b      	subs	r3, r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	3344      	adds	r3, #68	@ 0x44
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f004 fb7b 	bl	8008f6a <USB_HC_Halt>
 8004874:	e0b3      	b.n	80049de <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	4611      	mov	r1, r2
 800487e:	4618      	mov	r0, r3
 8004880:	f003 fdc9 	bl	8008416 <USB_ReadChInterrupts>
 8004884:	4603      	mov	r3, r0
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b10      	cmp	r3, #16
 800488c:	f040 80a7 	bne.w	80049de <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3326      	adds	r3, #38	@ 0x26
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d11b      	bne.n	80048de <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	3344      	adds	r3, #68	@ 0x44
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	334d      	adds	r3, #77	@ 0x4d
 80048ca:	2204      	movs	r2, #4
 80048cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f004 fb47 	bl	8008f6a <USB_HC_Halt>
 80048dc:	e03f      	b.n	800495e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3326      	adds	r3, #38	@ 0x26
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048f4:	78fa      	ldrb	r2, [r7, #3]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	3326      	adds	r3, #38	@ 0x26
 8004904:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004906:	2b02      	cmp	r3, #2
 8004908:	d129      	bne.n	800495e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3344      	adds	r3, #68	@ 0x44
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	799b      	ldrb	r3, [r3, #6]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HCD_HC_IN_IRQHandler+0xc2a>
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	331b      	adds	r3, #27
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d110      	bne.n	800495e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	334d      	adds	r3, #77	@ 0x4d
 800494c:	2204      	movs	r2, #4
 800494e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	4611      	mov	r1, r2
 8004958:	4618      	mov	r0, r3
 800495a:	f004 fb06 	bl	8008f6a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	331b      	adds	r3, #27
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d129      	bne.n	80049c8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	331b      	adds	r3, #27
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	440a      	add	r2, r1
 800499e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049c2:	f043 0320 	orr.w	r3, r3, #32
 80049c6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049d4:	461a      	mov	r2, r3
 80049d6:	2310      	movs	r3, #16
 80049d8:	6093      	str	r3, [r2, #8]
 80049da:	e000      	b.n	80049de <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80049dc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	4611      	mov	r1, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f003 fd07 	bl	8008416 <USB_ReadChInterrupts>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d11b      	bne.n	8004a4a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a1e:	461a      	mov	r2, r3
 8004a20:	2304      	movs	r3, #4
 8004a22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	334d      	adds	r3, #77	@ 0x4d
 8004a34:	2207      	movs	r2, #7
 8004a36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	78fa      	ldrb	r2, [r7, #3]
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f004 fa92 	bl	8008f6a <USB_HC_Halt>
 8004a46:	f000 bc89 	b.w	800535c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f003 fcdf 	bl	8008416 <USB_ReadChInterrupts>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	f040 8082 	bne.w	8004b68 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a70:	461a      	mov	r2, r3
 8004a72:	2320      	movs	r3, #32
 8004a74:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	3319      	adds	r3, #25
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d124      	bne.n	8004ad6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3319      	adds	r3, #25
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	334c      	adds	r3, #76	@ 0x4c
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	334d      	adds	r3, #77	@ 0x4d
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f004 fa4a 	bl	8008f6a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004ad6:	78fa      	ldrb	r2, [r7, #3]
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	440b      	add	r3, r1
 8004ae4:	331a      	adds	r3, #26
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	f040 8437 	bne.w	800535c <HCD_HC_OUT_IRQHandler+0x978>
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	6879      	ldr	r1, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	440b      	add	r3, r1
 8004afc:	331b      	adds	r3, #27
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f040 842b 	bne.w	800535c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	3326      	adds	r3, #38	@ 0x26
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d009      	beq.n	8004b30 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004b1c:	78fa      	ldrb	r2, [r7, #3]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	331b      	adds	r3, #27
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	440b      	add	r3, r1
 8004b3e:	334d      	adds	r3, #77	@ 0x4d
 8004b40:	2203      	movs	r2, #3
 8004b42:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f004 fa0c 	bl	8008f6a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	3344      	adds	r3, #68	@ 0x44
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e3f9      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f003 fc50 	bl	8008416 <USB_ReadChInterrupts>
 8004b76:	4603      	mov	r3, r0
 8004b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b80:	d111      	bne.n	8004ba6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b94:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f004 f9e3 	bl	8008f6a <USB_HC_Halt>
 8004ba4:	e3da      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	4611      	mov	r1, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f003 fc31 	bl	8008416 <USB_ReadChInterrupts>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d168      	bne.n	8004c90 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3344      	adds	r3, #68	@ 0x44
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	78fa      	ldrb	r2, [r7, #3]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f003 fc1b 	bl	8008416 <USB_ReadChInterrupts>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004be6:	2b40      	cmp	r3, #64	@ 0x40
 8004be8:	d112      	bne.n	8004c10 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3319      	adds	r3, #25
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2340      	movs	r3, #64	@ 0x40
 8004c0e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	011b      	lsls	r3, r3, #4
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	331b      	adds	r3, #27
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d019      	beq.n	8004c5a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	331b      	adds	r3, #27
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c58:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c66:	461a      	mov	r2, r3
 8004c68:	2301      	movs	r3, #1
 8004c6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004c6c:	78fa      	ldrb	r2, [r7, #3]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	334d      	adds	r3, #77	@ 0x4d
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f004 f96e 	bl	8008f6a <USB_HC_Halt>
 8004c8e:	e365      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	78fa      	ldrb	r2, [r7, #3]
 8004c96:	4611      	mov	r1, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f003 fbbc 	bl	8008416 <USB_ReadChInterrupts>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca4:	2b40      	cmp	r3, #64	@ 0x40
 8004ca6:	d139      	bne.n	8004d1c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	334d      	adds	r3, #77	@ 0x4d
 8004cb8:	2205      	movs	r2, #5
 8004cba:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004cbc:	78fa      	ldrb	r2, [r7, #3]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	331a      	adds	r3, #26
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3319      	adds	r3, #25
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3344      	adds	r3, #68	@ 0x44
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f004 f931 	bl	8008f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d14:	461a      	mov	r2, r3
 8004d16:	2340      	movs	r3, #64	@ 0x40
 8004d18:	6093      	str	r3, [r2, #8]
 8004d1a:	e31f      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	78fa      	ldrb	r2, [r7, #3]
 8004d22:	4611      	mov	r1, r2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f003 fb76 	bl	8008416 <USB_ReadChInterrupts>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d11a      	bne.n	8004d6a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d40:	461a      	mov	r2, r3
 8004d42:	2308      	movs	r3, #8
 8004d44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004d46:	78fa      	ldrb	r2, [r7, #3]
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	440b      	add	r3, r1
 8004d54:	334d      	adds	r3, #77	@ 0x4d
 8004d56:	2206      	movs	r2, #6
 8004d58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	78fa      	ldrb	r2, [r7, #3]
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f004 f901 	bl	8008f6a <USB_HC_Halt>
 8004d68:	e2f8      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f003 fb4f 	bl	8008416 <USB_ReadChInterrupts>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d144      	bne.n	8004e0c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3344      	adds	r3, #68	@ 0x44
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	334d      	adds	r3, #77	@ 0x4d
 8004da6:	2204      	movs	r2, #4
 8004da8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	3319      	adds	r3, #25
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d114      	bne.n	8004dea <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	1a9b      	subs	r3, r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	3318      	adds	r3, #24
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	3319      	adds	r3, #25
 8004de6:	2201      	movs	r2, #1
 8004de8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	4611      	mov	r1, r2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f004 f8b9 	bl	8008f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e04:	461a      	mov	r2, r3
 8004e06:	2310      	movs	r3, #16
 8004e08:	6093      	str	r3, [r2, #8]
 8004e0a:	e2a7      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fafe 	bl	8008416 <USB_ReadChInterrupts>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e20:	2b80      	cmp	r3, #128	@ 0x80
 8004e22:	f040 8083 	bne.w	8004f2c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	799b      	ldrb	r3, [r3, #6]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d111      	bne.n	8004e52 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	334d      	adds	r3, #77	@ 0x4d
 8004e3e:	2207      	movs	r2, #7
 8004e40:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	4611      	mov	r1, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f004 f88d 	bl	8008f6a <USB_HC_Halt>
 8004e50:	e062      	b.n	8004f18 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	3344      	adds	r3, #68	@ 0x44
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	1c59      	adds	r1, r3, #1
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4403      	add	r3, r0
 8004e72:	3344      	adds	r3, #68	@ 0x44
 8004e74:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3344      	adds	r3, #68	@ 0x44
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d922      	bls.n	8004ed2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3344      	adds	r3, #68	@ 0x44
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	334c      	adds	r3, #76	@ 0x4c
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	334c      	adds	r3, #76	@ 0x4c
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f009 fd04 	bl	800e8d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ed0:	e022      	b.n	8004f18 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	334c      	adds	r3, #76	@ 0x4c
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004efc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f04:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f12:	461a      	mov	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f24:	461a      	mov	r2, r3
 8004f26:	2380      	movs	r3, #128	@ 0x80
 8004f28:	6093      	str	r3, [r2, #8]
 8004f2a:	e217      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	78fa      	ldrb	r2, [r7, #3]
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f003 fa6e 	bl	8008416 <USB_ReadChInterrupts>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f44:	d11b      	bne.n	8004f7e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	334d      	adds	r3, #77	@ 0x4d
 8004f56:	2209      	movs	r2, #9
 8004f58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f004 f801 	bl	8008f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f74:	461a      	mov	r2, r3
 8004f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f7a:	6093      	str	r3, [r2, #8]
 8004f7c:	e1ee      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	4611      	mov	r1, r2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f003 fa45 	bl	8008416 <USB_ReadChInterrupts>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	f040 81df 	bne.w	8005356 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	334d      	adds	r3, #77	@ 0x4d
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	f040 8093 	bne.w	80050e8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	334d      	adds	r3, #77	@ 0x4d
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	334c      	adds	r3, #76	@ 0x4c
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3326      	adds	r3, #38	@ 0x26
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d00b      	beq.n	8005018 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005000:	78fa      	ldrb	r2, [r7, #3]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	1a9b      	subs	r3, r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3326      	adds	r3, #38	@ 0x26
 8005010:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005012:	2b03      	cmp	r3, #3
 8005014:	f040 8190 	bne.w	8005338 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	799b      	ldrb	r3, [r3, #6]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	333d      	adds	r3, #61	@ 0x3d
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	f083 0301 	eor.w	r3, r3, #1
 8005038:	b2d8      	uxtb	r0, r3
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	333d      	adds	r3, #61	@ 0x3d
 8005048:	4602      	mov	r2, r0
 800504a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	799b      	ldrb	r3, [r3, #6]
 8005050:	2b01      	cmp	r3, #1
 8005052:	f040 8171 	bne.w	8005338 <HCD_HC_OUT_IRQHandler+0x954>
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3334      	adds	r3, #52	@ 0x34
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8165 	beq.w	8005338 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	3334      	adds	r3, #52	@ 0x34
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	1a9b      	subs	r3, r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4403      	add	r3, r0
 800508e:	3328      	adds	r3, #40	@ 0x28
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	440b      	add	r3, r1
 8005094:	1e59      	subs	r1, r3, #1
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4613      	mov	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4403      	add	r3, r0
 80050a4:	3328      	adds	r3, #40	@ 0x28
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ac:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 813f 	beq.w	8005338 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80050ba:	78fa      	ldrb	r2, [r7, #3]
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	333d      	adds	r3, #61	@ 0x3d
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	78fa      	ldrb	r2, [r7, #3]
 80050ce:	f083 0301 	eor.w	r3, r3, #1
 80050d2:	b2d8      	uxtb	r0, r3
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	333d      	adds	r3, #61	@ 0x3d
 80050e2:	4602      	mov	r2, r0
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	e127      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	334d      	adds	r3, #77	@ 0x4d
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d120      	bne.n	8005140 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	334d      	adds	r3, #77	@ 0x4d
 800510e:	2202      	movs	r2, #2
 8005110:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	331b      	adds	r3, #27
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	f040 8107 	bne.w	8005338 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	334c      	adds	r3, #76	@ 0x4c
 800513a:	2202      	movs	r2, #2
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	e0fb      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	334d      	adds	r3, #77	@ 0x4d
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b04      	cmp	r3, #4
 8005154:	d13a      	bne.n	80051cc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005156:	78fa      	ldrb	r2, [r7, #3]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	334d      	adds	r3, #77	@ 0x4d
 8005166:	2202      	movs	r2, #2
 8005168:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	334c      	adds	r3, #76	@ 0x4c
 800517a:	2202      	movs	r2, #2
 800517c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	011b      	lsls	r3, r3, #4
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	331b      	adds	r3, #27
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b01      	cmp	r3, #1
 8005192:	f040 80d1 	bne.w	8005338 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	331b      	adds	r3, #27
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051c8:	6053      	str	r3, [r2, #4]
 80051ca:	e0b5      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80051cc:	78fa      	ldrb	r2, [r7, #3]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	334d      	adds	r3, #77	@ 0x4d
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d114      	bne.n	800520c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	334d      	adds	r3, #77	@ 0x4d
 80051f2:	2202      	movs	r2, #2
 80051f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80051f6:	78fa      	ldrb	r2, [r7, #3]
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	334c      	adds	r3, #76	@ 0x4c
 8005206:	2202      	movs	r2, #2
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e095      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	334d      	adds	r3, #77	@ 0x4d
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b06      	cmp	r3, #6
 8005220:	d114      	bne.n	800524c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	334d      	adds	r3, #77	@ 0x4d
 8005232:	2202      	movs	r2, #2
 8005234:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	334c      	adds	r3, #76	@ 0x4c
 8005246:	2205      	movs	r2, #5
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	e075      	b.n	8005338 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	334d      	adds	r3, #77	@ 0x4d
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b07      	cmp	r3, #7
 8005260:	d00a      	beq.n	8005278 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005262:	78fa      	ldrb	r2, [r7, #3]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	334d      	adds	r3, #77	@ 0x4d
 8005272:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005274:	2b09      	cmp	r3, #9
 8005276:	d170      	bne.n	800535a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	334d      	adds	r3, #77	@ 0x4d
 8005288:	2202      	movs	r2, #2
 800528a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	3344      	adds	r3, #68	@ 0x44
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	1c59      	adds	r1, r3, #1
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4403      	add	r3, r0
 80052ac:	3344      	adds	r3, #68	@ 0x44
 80052ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3344      	adds	r3, #68	@ 0x44
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d914      	bls.n	80052f0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	3344      	adds	r3, #68	@ 0x44
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80052da:	78fa      	ldrb	r2, [r7, #3]
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	334c      	adds	r3, #76	@ 0x4c
 80052ea:	2204      	movs	r2, #4
 80052ec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052ee:	e022      	b.n	8005336 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	1a9b      	subs	r3, r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	334c      	adds	r3, #76	@ 0x4c
 8005300:	2202      	movs	r2, #2
 8005302:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4413      	add	r3, r2
 800530c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800531a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005322:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005330:	461a      	mov	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005336:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	334c      	adds	r3, #76	@ 0x4c
 8005348:	781a      	ldrb	r2, [r3, #0]
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f009 fac2 	bl	800e8d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005354:	e002      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005356:	bf00      	nop
 8005358:	e000      	b.n	800535c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800535a:	bf00      	nop
  }
}
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b08a      	sub	sp, #40	@ 0x28
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	0c5b      	lsrs	r3, r3, #17
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005396:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d004      	beq.n	80053a8 <HCD_RXQLVL_IRQHandler+0x46>
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b05      	cmp	r3, #5
 80053a2:	f000 80b6 	beq.w	8005512 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80053a6:	e0b7      	b.n	8005518 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 80b3 	beq.w	8005516 <HCD_RXQLVL_IRQHandler+0x1b4>
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4613      	mov	r3, r2
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	332c      	adds	r3, #44	@ 0x2c
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80a7 	beq.w	8005516 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	4613      	mov	r3, r2
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	3338      	adds	r3, #56	@ 0x38
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	18d1      	adds	r1, r2, r3
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4613      	mov	r3, r2
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4403      	add	r3, r0
 80053ec:	3334      	adds	r3, #52	@ 0x34
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4299      	cmp	r1, r3
 80053f2:	f200 8083 	bhi.w	80054fc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	4613      	mov	r3, r2
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	332c      	adds	r3, #44	@ 0x2c
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	b292      	uxth	r2, r2
 8005410:	4619      	mov	r1, r3
 8005412:	f002 ff95 	bl	8008340 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	332c      	adds	r3, #44	@ 0x2c
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	18d1      	adds	r1, r2, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4613      	mov	r3, r2
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4403      	add	r3, r0
 800543a:	332c      	adds	r3, #44	@ 0x2c
 800543c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	4613      	mov	r3, r2
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	3338      	adds	r3, #56	@ 0x38
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	18d1      	adds	r1, r2, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4613      	mov	r3, r2
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4403      	add	r3, r0
 8005462:	3338      	adds	r3, #56	@ 0x38
 8005464:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	4413      	add	r3, r2
 800546e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	0cdb      	lsrs	r3, r3, #19
 8005476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800547a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4613      	mov	r3, r2
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	3328      	adds	r3, #40	@ 0x28
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4293      	cmp	r3, r2
 8005494:	d13f      	bne.n	8005516 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d03c      	beq.n	8005516 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c8:	461a      	mov	r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	4613      	mov	r3, r2
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	1a9b      	subs	r3, r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	333c      	adds	r3, #60	@ 0x3c
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	f083 0301 	eor.w	r3, r3, #1
 80054e4:	b2d8      	uxtb	r0, r3
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	333c      	adds	r3, #60	@ 0x3c
 80054f6:	4602      	mov	r2, r0
 80054f8:	701a      	strb	r2, [r3, #0]
      break;
 80054fa:	e00c      	b.n	8005516 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	334c      	adds	r3, #76	@ 0x4c
 800550c:	2204      	movs	r2, #4
 800550e:	701a      	strb	r2, [r3, #0]
      break;
 8005510:	e001      	b.n	8005516 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005512:	bf00      	nop
 8005514:	e000      	b.n	8005518 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005516:	bf00      	nop
  }
}
 8005518:	bf00      	nop
 800551a:	3728      	adds	r7, #40	@ 0x28
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800554c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b02      	cmp	r3, #2
 8005556:	d10b      	bne.n	8005570 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b01      	cmp	r3, #1
 8005560:	d102      	bne.n	8005568 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f009 f99c 	bl	800e8a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f043 0302 	orr.w	r3, r3, #2
 800556e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b08      	cmp	r3, #8
 8005578:	d132      	bne.n	80055e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f043 0308 	orr.w	r3, r3, #8
 8005580:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b04      	cmp	r3, #4
 800558a:	d126      	bne.n	80055da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	7a5b      	ldrb	r3, [r3, #9]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d113      	bne.n	80055bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800559a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800559e:	d106      	bne.n	80055ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2102      	movs	r1, #2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f003 f860 	bl	800866c <USB_InitFSLSPClkSel>
 80055ac:	e011      	b.n	80055d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2101      	movs	r1, #1
 80055b4:	4618      	mov	r0, r3
 80055b6:	f003 f859 	bl	800866c <USB_InitFSLSPClkSel>
 80055ba:	e00a      	b.n	80055d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	79db      	ldrb	r3, [r3, #7]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d106      	bne.n	80055d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055ca:	461a      	mov	r2, r3
 80055cc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80055d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f009 f992 	bl	800e8fc <HAL_HCD_PortEnabled_Callback>
 80055d8:	e002      	b.n	80055e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f009 f99c 	bl	800e918 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d103      	bne.n	80055f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f043 0320 	orr.w	r3, r3, #32
 80055f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055f8:	461a      	mov	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6013      	str	r3, [r2, #0]
}
 80055fe:	bf00      	nop
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e267      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d075      	beq.n	8005712 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005626:	4b88      	ldr	r3, [pc, #544]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b04      	cmp	r3, #4
 8005630:	d00c      	beq.n	800564c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005632:	4b85      	ldr	r3, [pc, #532]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800563a:	2b08      	cmp	r3, #8
 800563c:	d112      	bne.n	8005664 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800563e:	4b82      	ldr	r3, [pc, #520]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005646:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800564a:	d10b      	bne.n	8005664 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800564c:	4b7e      	ldr	r3, [pc, #504]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d05b      	beq.n	8005710 <HAL_RCC_OscConfig+0x108>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d157      	bne.n	8005710 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e242      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800566c:	d106      	bne.n	800567c <HAL_RCC_OscConfig+0x74>
 800566e:	4b76      	ldr	r3, [pc, #472]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a75      	ldr	r2, [pc, #468]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	e01d      	b.n	80056b8 <HAL_RCC_OscConfig+0xb0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005684:	d10c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x98>
 8005686:	4b70      	ldr	r3, [pc, #448]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a6f      	ldr	r2, [pc, #444]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 800568c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4b6d      	ldr	r3, [pc, #436]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a6c      	ldr	r2, [pc, #432]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	e00b      	b.n	80056b8 <HAL_RCC_OscConfig+0xb0>
 80056a0:	4b69      	ldr	r3, [pc, #420]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a68      	ldr	r2, [pc, #416]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b66      	ldr	r3, [pc, #408]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a65      	ldr	r2, [pc, #404]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 80056b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c0:	f7fc ff7e 	bl	80025c0 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c8:	f7fc ff7a 	bl	80025c0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	@ 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e207      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056da:	4b5b      	ldr	r3, [pc, #364]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0xc0>
 80056e6:	e014      	b.n	8005712 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056e8:	f7fc ff6a 	bl	80025c0 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fc ff66 	bl	80025c0 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	@ 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e1f3      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005702:	4b51      	ldr	r3, [pc, #324]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0xe8>
 800570e:	e000      	b.n	8005712 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d063      	beq.n	80057e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800571e:	4b4a      	ldr	r3, [pc, #296]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800572a:	4b47      	ldr	r3, [pc, #284]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005732:	2b08      	cmp	r3, #8
 8005734:	d11c      	bne.n	8005770 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005736:	4b44      	ldr	r3, [pc, #272]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d116      	bne.n	8005770 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005742:	4b41      	ldr	r3, [pc, #260]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <HAL_RCC_OscConfig+0x152>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d001      	beq.n	800575a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e1c7      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800575a:	4b3b      	ldr	r3, [pc, #236]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4937      	ldr	r1, [pc, #220]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 800576a:	4313      	orrs	r3, r2
 800576c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576e:	e03a      	b.n	80057e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d020      	beq.n	80057ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005778:	4b34      	ldr	r3, [pc, #208]	@ (800584c <HAL_RCC_OscConfig+0x244>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7fc ff1f 	bl	80025c0 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005786:	f7fc ff1b 	bl	80025c0 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e1a8      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005798:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a4:	4b28      	ldr	r3, [pc, #160]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4925      	ldr	r1, [pc, #148]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	600b      	str	r3, [r1, #0]
 80057b8:	e015      	b.n	80057e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ba:	4b24      	ldr	r3, [pc, #144]	@ (800584c <HAL_RCC_OscConfig+0x244>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c0:	f7fc fefe 	bl	80025c0 <HAL_GetTick>
 80057c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c8:	f7fc fefa 	bl	80025c0 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e187      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057da:	4b1b      	ldr	r3, [pc, #108]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f0      	bne.n	80057c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d036      	beq.n	8005860 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057fa:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <HAL_RCC_OscConfig+0x248>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005800:	f7fc fede 	bl	80025c0 <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005808:	f7fc feda 	bl	80025c0 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e167      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581a:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <HAL_RCC_OscConfig+0x240>)
 800581c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0f0      	beq.n	8005808 <HAL_RCC_OscConfig+0x200>
 8005826:	e01b      	b.n	8005860 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005828:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <HAL_RCC_OscConfig+0x248>)
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800582e:	f7fc fec7 	bl	80025c0 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005834:	e00e      	b.n	8005854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005836:	f7fc fec3 	bl	80025c0 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d907      	bls.n	8005854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e150      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
 8005848:	40023800 	.word	0x40023800
 800584c:	42470000 	.word	0x42470000
 8005850:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005854:	4b88      	ldr	r3, [pc, #544]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ea      	bne.n	8005836 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8097 	beq.w	800599c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800586e:	2300      	movs	r3, #0
 8005870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005872:	4b81      	ldr	r3, [pc, #516]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	4b7d      	ldr	r3, [pc, #500]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	4a7c      	ldr	r2, [pc, #496]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588c:	6413      	str	r3, [r2, #64]	@ 0x40
 800588e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005896:	60bb      	str	r3, [r7, #8]
 8005898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800589a:	2301      	movs	r3, #1
 800589c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589e:	4b77      	ldr	r3, [pc, #476]	@ (8005a7c <HAL_RCC_OscConfig+0x474>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d118      	bne.n	80058dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058aa:	4b74      	ldr	r3, [pc, #464]	@ (8005a7c <HAL_RCC_OscConfig+0x474>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a73      	ldr	r2, [pc, #460]	@ (8005a7c <HAL_RCC_OscConfig+0x474>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b6:	f7fc fe83 	bl	80025c0 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fc fe7f 	bl	80025c0 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e10c      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d0:	4b6a      	ldr	r3, [pc, #424]	@ (8005a7c <HAL_RCC_OscConfig+0x474>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d106      	bne.n	80058f2 <HAL_RCC_OscConfig+0x2ea>
 80058e4:	4b64      	ldr	r3, [pc, #400]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e8:	4a63      	ldr	r2, [pc, #396]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80058f0:	e01c      	b.n	800592c <HAL_RCC_OscConfig+0x324>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b05      	cmp	r3, #5
 80058f8:	d10c      	bne.n	8005914 <HAL_RCC_OscConfig+0x30c>
 80058fa:	4b5f      	ldr	r3, [pc, #380]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fe:	4a5e      	ldr	r2, [pc, #376]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005900:	f043 0304 	orr.w	r3, r3, #4
 8005904:	6713      	str	r3, [r2, #112]	@ 0x70
 8005906:	4b5c      	ldr	r3, [pc, #368]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590a:	4a5b      	ldr	r2, [pc, #364]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	6713      	str	r3, [r2, #112]	@ 0x70
 8005912:	e00b      	b.n	800592c <HAL_RCC_OscConfig+0x324>
 8005914:	4b58      	ldr	r3, [pc, #352]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005918:	4a57      	ldr	r2, [pc, #348]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005920:	4b55      	ldr	r3, [pc, #340]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005924:	4a54      	ldr	r2, [pc, #336]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005926:	f023 0304 	bic.w	r3, r3, #4
 800592a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d015      	beq.n	8005960 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005934:	f7fc fe44 	bl	80025c0 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593a:	e00a      	b.n	8005952 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593c:	f7fc fe40 	bl	80025c0 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e0cb      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005952:	4b49      	ldr	r3, [pc, #292]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0ee      	beq.n	800593c <HAL_RCC_OscConfig+0x334>
 800595e:	e014      	b.n	800598a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005960:	f7fc fe2e 	bl	80025c0 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005966:	e00a      	b.n	800597e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005968:	f7fc fe2a 	bl	80025c0 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e0b5      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1ee      	bne.n	8005968 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d105      	bne.n	800599c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005990:	4b39      	ldr	r3, [pc, #228]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	4a38      	ldr	r2, [pc, #224]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800599a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80a1 	beq.w	8005ae8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059a6:	4b34      	ldr	r3, [pc, #208]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 030c 	and.w	r3, r3, #12
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d05c      	beq.n	8005a6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d141      	bne.n	8005a3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ba:	4b31      	ldr	r3, [pc, #196]	@ (8005a80 <HAL_RCC_OscConfig+0x478>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fc fdfe 	bl	80025c0 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fc fdfa 	bl	80025c0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e087      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059da:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	69da      	ldr	r2, [r3, #28]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	019b      	lsls	r3, r3, #6
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	3b01      	subs	r3, #1
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	491b      	ldr	r1, [pc, #108]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a10:	4b1b      	ldr	r3, [pc, #108]	@ (8005a80 <HAL_RCC_OscConfig+0x478>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a16:	f7fc fdd3 	bl	80025c0 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1e:	f7fc fdcf 	bl	80025c0 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e05c      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a30:	4b11      	ldr	r3, [pc, #68]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x416>
 8005a3c:	e054      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3e:	4b10      	ldr	r3, [pc, #64]	@ (8005a80 <HAL_RCC_OscConfig+0x478>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7fc fdbc 	bl	80025c0 <HAL_GetTick>
 8005a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4c:	f7fc fdb8 	bl	80025c0 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e045      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a5e:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <HAL_RCC_OscConfig+0x470>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f0      	bne.n	8005a4c <HAL_RCC_OscConfig+0x444>
 8005a6a:	e03d      	b.n	8005ae8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e038      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
 8005a78:	40023800 	.word	0x40023800
 8005a7c:	40007000 	.word	0x40007000
 8005a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a84:	4b1b      	ldr	r3, [pc, #108]	@ (8005af4 <HAL_RCC_OscConfig+0x4ec>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d028      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d121      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d11a      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d111      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aca:	085b      	lsrs	r3, r3, #1
 8005acc:	3b01      	subs	r3, #1
 8005ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d107      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800

08005af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0cc      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b0c:	4b68      	ldr	r3, [pc, #416]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d90c      	bls.n	8005b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1a:	4b65      	ldr	r3, [pc, #404]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	4b63      	ldr	r3, [pc, #396]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0307 	and.w	r3, r3, #7
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0b8      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b4c:	4b59      	ldr	r3, [pc, #356]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a58      	ldr	r2, [pc, #352]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b64:	4b53      	ldr	r3, [pc, #332]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a52      	ldr	r2, [pc, #328]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b70:	4b50      	ldr	r3, [pc, #320]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	494d      	ldr	r1, [pc, #308]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d044      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b96:	4b47      	ldr	r3, [pc, #284]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d119      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e07f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d003      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d107      	bne.n	8005bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d109      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e06f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e067      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bd6:	4b37      	ldr	r3, [pc, #220]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f023 0203 	bic.w	r2, r3, #3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4934      	ldr	r1, [pc, #208]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005be8:	f7fc fcea 	bl	80025c0 <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	e00a      	b.n	8005c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf0:	f7fc fce6 	bl	80025c0 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e04f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c06:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 020c 	and.w	r2, r3, #12
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d1eb      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c18:	4b25      	ldr	r3, [pc, #148]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d20c      	bcs.n	8005c40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	4b22      	ldr	r3, [pc, #136]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b20      	ldr	r3, [pc, #128]	@ (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e032      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c4c:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	4916      	ldr	r1, [pc, #88]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c6a:	4b12      	ldr	r3, [pc, #72]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	490e      	ldr	r1, [pc, #56]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c7e:	f000 f821 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8005c82:	4602      	mov	r2, r0
 8005c84:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	091b      	lsrs	r3, r3, #4
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	490a      	ldr	r1, [pc, #40]	@ (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c90:	5ccb      	ldrb	r3, [r1, r3]
 8005c92:	fa22 f303 	lsr.w	r3, r2, r3
 8005c96:	4a09      	ldr	r2, [pc, #36]	@ (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c9a:	4b09      	ldr	r3, [pc, #36]	@ (8005cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fc fc4a 	bl	8002538 <HAL_InitTick>

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40023c00 	.word	0x40023c00
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	0801d28c 	.word	0x0801d28c
 8005cbc:	20000004 	.word	0x20000004
 8005cc0:	20000008 	.word	0x20000008

08005cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc8:	b094      	sub	sp, #80	@ 0x50
 8005cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cdc:	4b79      	ldr	r3, [pc, #484]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d00d      	beq.n	8005d04 <HAL_RCC_GetSysClockFreq+0x40>
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	f200 80e1 	bhi.w	8005eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	d003      	beq.n	8005cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8005cf6:	e0db      	b.n	8005eb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cf8:	4b73      	ldr	r3, [pc, #460]	@ (8005ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cfc:	e0db      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cfe:	4b73      	ldr	r3, [pc, #460]	@ (8005ecc <HAL_RCC_GetSysClockFreq+0x208>)
 8005d00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d02:	e0d8      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d04:	4b6f      	ldr	r3, [pc, #444]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d063      	beq.n	8005de2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	099b      	lsrs	r3, r3, #6
 8005d20:	2200      	movs	r2, #0
 8005d22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d2e:	2300      	movs	r3, #0
 8005d30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d36:	4622      	mov	r2, r4
 8005d38:	462b      	mov	r3, r5
 8005d3a:	f04f 0000 	mov.w	r0, #0
 8005d3e:	f04f 0100 	mov.w	r1, #0
 8005d42:	0159      	lsls	r1, r3, #5
 8005d44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d48:	0150      	lsls	r0, r2, #5
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	4621      	mov	r1, r4
 8005d50:	1a51      	subs	r1, r2, r1
 8005d52:	6139      	str	r1, [r7, #16]
 8005d54:	4629      	mov	r1, r5
 8005d56:	eb63 0301 	sbc.w	r3, r3, r1
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d68:	4659      	mov	r1, fp
 8005d6a:	018b      	lsls	r3, r1, #6
 8005d6c:	4651      	mov	r1, sl
 8005d6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d72:	4651      	mov	r1, sl
 8005d74:	018a      	lsls	r2, r1, #6
 8005d76:	4651      	mov	r1, sl
 8005d78:	ebb2 0801 	subs.w	r8, r2, r1
 8005d7c:	4659      	mov	r1, fp
 8005d7e:	eb63 0901 	sbc.w	r9, r3, r1
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d96:	4690      	mov	r8, r2
 8005d98:	4699      	mov	r9, r3
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	eb18 0303 	adds.w	r3, r8, r3
 8005da0:	60bb      	str	r3, [r7, #8]
 8005da2:	462b      	mov	r3, r5
 8005da4:	eb49 0303 	adc.w	r3, r9, r3
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005db6:	4629      	mov	r1, r5
 8005db8:	024b      	lsls	r3, r1, #9
 8005dba:	4621      	mov	r1, r4
 8005dbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	024a      	lsls	r2, r1, #9
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dca:	2200      	movs	r2, #0
 8005dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dd4:	f7fa fb04 	bl	80003e0 <__aeabi_uldivmod>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4613      	mov	r3, r2
 8005dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005de0:	e058      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de2:	4b38      	ldr	r3, [pc, #224]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	2200      	movs	r2, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	4611      	mov	r1, r2
 8005dee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	2300      	movs	r3, #0
 8005df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005df8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	f04f 0000 	mov.w	r0, #0
 8005e04:	f04f 0100 	mov.w	r1, #0
 8005e08:	0159      	lsls	r1, r3, #5
 8005e0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e0e:	0150      	lsls	r0, r2, #5
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4641      	mov	r1, r8
 8005e16:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e34:	ebb2 040a 	subs.w	r4, r2, sl
 8005e38:	eb63 050b 	sbc.w	r5, r3, fp
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	00eb      	lsls	r3, r5, #3
 8005e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e4a:	00e2      	lsls	r2, r4, #3
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	461d      	mov	r5, r3
 8005e50:	4643      	mov	r3, r8
 8005e52:	18e3      	adds	r3, r4, r3
 8005e54:	603b      	str	r3, [r7, #0]
 8005e56:	464b      	mov	r3, r9
 8005e58:	eb45 0303 	adc.w	r3, r5, r3
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	028b      	lsls	r3, r1, #10
 8005e6e:	4621      	mov	r1, r4
 8005e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e74:	4621      	mov	r1, r4
 8005e76:	028a      	lsls	r2, r1, #10
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7e:	2200      	movs	r2, #0
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	61fa      	str	r2, [r7, #28]
 8005e84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e88:	f7fa faaa 	bl	80003e0 <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4613      	mov	r3, r2
 8005e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e94:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	0c1b      	lsrs	r3, r3, #16
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ea4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005eae:	e002      	b.n	8005eb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005eb0:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3750      	adds	r7, #80	@ 0x50
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	00f42400 	.word	0x00f42400
 8005ecc:	007a1200 	.word	0x007a1200

08005ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ed4:	4b03      	ldr	r3, [pc, #12]	@ (8005ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	20000004 	.word	0x20000004

08005ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005eec:	f7ff fff0 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	4b05      	ldr	r3, [pc, #20]	@ (8005f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	0a9b      	lsrs	r3, r3, #10
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	4903      	ldr	r1, [pc, #12]	@ (8005f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005efe:	5ccb      	ldrb	r3, [r1, r3]
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	0801d29c 	.word	0x0801d29c

08005f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f14:	f7ff ffdc 	bl	8005ed0 <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b05      	ldr	r3, [pc, #20]	@ (8005f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0b5b      	lsrs	r3, r3, #13
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4903      	ldr	r1, [pc, #12]	@ (8005f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40023800 	.word	0x40023800
 8005f34:	0801d29c 	.word	0x0801d29c

08005f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e041      	b.n	8005fce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fb ff94 	bl	8001e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f000 faec 	bl	8006554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d109      	bne.n	8005ffc <HAL_TIM_PWM_Start+0x24>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	bf14      	ite	ne
 8005ff4:	2301      	movne	r3, #1
 8005ff6:	2300      	moveq	r3, #0
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	e022      	b.n	8006042 <HAL_TIM_PWM_Start+0x6a>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d109      	bne.n	8006016 <HAL_TIM_PWM_Start+0x3e>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	bf14      	ite	ne
 800600e:	2301      	movne	r3, #1
 8006010:	2300      	moveq	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	e015      	b.n	8006042 <HAL_TIM_PWM_Start+0x6a>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d109      	bne.n	8006030 <HAL_TIM_PWM_Start+0x58>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	bf14      	ite	ne
 8006028:	2301      	movne	r3, #1
 800602a:	2300      	moveq	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	e008      	b.n	8006042 <HAL_TIM_PWM_Start+0x6a>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b01      	cmp	r3, #1
 800603a:	bf14      	ite	ne
 800603c:	2301      	movne	r3, #1
 800603e:	2300      	moveq	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e07c      	b.n	8006144 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d104      	bne.n	800605a <HAL_TIM_PWM_Start+0x82>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006058:	e013      	b.n	8006082 <HAL_TIM_PWM_Start+0xaa>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b04      	cmp	r3, #4
 800605e:	d104      	bne.n	800606a <HAL_TIM_PWM_Start+0x92>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006068:	e00b      	b.n	8006082 <HAL_TIM_PWM_Start+0xaa>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d104      	bne.n	800607a <HAL_TIM_PWM_Start+0xa2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006078:	e003      	b.n	8006082 <HAL_TIM_PWM_Start+0xaa>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2202      	movs	r2, #2
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2201      	movs	r2, #1
 8006088:	6839      	ldr	r1, [r7, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fcb8 	bl	8006a00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a2d      	ldr	r2, [pc, #180]	@ (800614c <HAL_TIM_PWM_Start+0x174>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_TIM_PWM_Start+0xcc>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2c      	ldr	r2, [pc, #176]	@ (8006150 <HAL_TIM_PWM_Start+0x178>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_TIM_PWM_Start+0xd0>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_TIM_PWM_Start+0xd2>
 80060a8:	2300      	movs	r3, #0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a22      	ldr	r2, [pc, #136]	@ (800614c <HAL_TIM_PWM_Start+0x174>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d022      	beq.n	800610e <HAL_TIM_PWM_Start+0x136>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d0:	d01d      	beq.n	800610e <HAL_TIM_PWM_Start+0x136>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006154 <HAL_TIM_PWM_Start+0x17c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d018      	beq.n	800610e <HAL_TIM_PWM_Start+0x136>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006158 <HAL_TIM_PWM_Start+0x180>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_TIM_PWM_Start+0x136>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	@ (800615c <HAL_TIM_PWM_Start+0x184>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIM_PWM_Start+0x136>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <HAL_TIM_PWM_Start+0x178>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIM_PWM_Start+0x136>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a18      	ldr	r2, [pc, #96]	@ (8006160 <HAL_TIM_PWM_Start+0x188>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIM_PWM_Start+0x136>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a16      	ldr	r2, [pc, #88]	@ (8006164 <HAL_TIM_PWM_Start+0x18c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d111      	bne.n	8006132 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b06      	cmp	r3, #6
 800611e:	d010      	beq.n	8006142 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006130:	e007      	b.n	8006142 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f042 0201 	orr.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40010000 	.word	0x40010000
 8006150:	40010400 	.word	0x40010400
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40014000 	.word	0x40014000
 8006164:	40001800 	.word	0x40001800

08006168 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e097      	b.n	80062ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d106      	bne.n	8006196 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fb fdc7 	bl	8001d24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f000 f9c9 	bl	8006554 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	4313      	orrs	r3, r2
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006208:	f023 030c 	bic.w	r3, r3, #12
 800620c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006214:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	4313      	orrs	r3, r2
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	011a      	lsls	r2, r3, #4
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	031b      	lsls	r3, r3, #12
 8006238:	4313      	orrs	r3, r2
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800624e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	4313      	orrs	r3, r2
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80062cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80062dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d110      	bne.n	8006306 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d102      	bne.n	80062f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80062ea:	7b7b      	ldrb	r3, [r7, #13]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d001      	beq.n	80062f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e069      	b.n	80063c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006304:	e031      	b.n	800636a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b04      	cmp	r3, #4
 800630a:	d110      	bne.n	800632e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d102      	bne.n	8006318 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006312:	7b3b      	ldrb	r3, [r7, #12]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d001      	beq.n	800631c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e055      	b.n	80063c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800632c:	e01d      	b.n	800636a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d108      	bne.n	8006346 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800633a:	7b7b      	ldrb	r3, [r7, #13]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d102      	bne.n	8006346 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006340:	7b3b      	ldrb	r3, [r7, #12]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d001      	beq.n	800634a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e03e      	b.n	80063c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2202      	movs	r2, #2
 800634e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2202      	movs	r2, #2
 8006366:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_TIM_Encoder_Start+0xc4>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b04      	cmp	r3, #4
 8006374:	d008      	beq.n	8006388 <HAL_TIM_Encoder_Start+0xd4>
 8006376:	e00f      	b.n	8006398 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2201      	movs	r2, #1
 800637e:	2100      	movs	r1, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fb3d 	bl	8006a00 <TIM_CCxChannelCmd>
      break;
 8006386:	e016      	b.n	80063b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2201      	movs	r2, #1
 800638e:	2104      	movs	r1, #4
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fb35 	bl	8006a00 <TIM_CCxChannelCmd>
      break;
 8006396:	e00e      	b.n	80063b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2201      	movs	r2, #1
 800639e:	2100      	movs	r1, #0
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 fb2d 	bl	8006a00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2201      	movs	r2, #1
 80063ac:	2104      	movs	r1, #4
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fb26 	bl	8006a00 <TIM_CCxChannelCmd>
      break;
 80063b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f042 0201 	orr.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e0ae      	b.n	800654c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b0c      	cmp	r3, #12
 80063fa:	f200 809f 	bhi.w	800653c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006404 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006404:	08006439 	.word	0x08006439
 8006408:	0800653d 	.word	0x0800653d
 800640c:	0800653d 	.word	0x0800653d
 8006410:	0800653d 	.word	0x0800653d
 8006414:	08006479 	.word	0x08006479
 8006418:	0800653d 	.word	0x0800653d
 800641c:	0800653d 	.word	0x0800653d
 8006420:	0800653d 	.word	0x0800653d
 8006424:	080064bb 	.word	0x080064bb
 8006428:	0800653d 	.word	0x0800653d
 800642c:	0800653d 	.word	0x0800653d
 8006430:	0800653d 	.word	0x0800653d
 8006434:	080064fb 	.word	0x080064fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68b9      	ldr	r1, [r7, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f92e 	bl	80066a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0208 	orr.w	r2, r2, #8
 8006452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0204 	bic.w	r2, r2, #4
 8006462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6999      	ldr	r1, [r3, #24]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	619a      	str	r2, [r3, #24]
      break;
 8006476:	e064      	b.n	8006542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 f97e 	bl	8006780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6999      	ldr	r1, [r3, #24]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	021a      	lsls	r2, r3, #8
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	430a      	orrs	r2, r1
 80064b6:	619a      	str	r2, [r3, #24]
      break;
 80064b8:	e043      	b.n	8006542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 f9d3 	bl	800686c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0208 	orr.w	r2, r2, #8
 80064d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0204 	bic.w	r2, r2, #4
 80064e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69d9      	ldr	r1, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	61da      	str	r2, [r3, #28]
      break;
 80064f8:	e023      	b.n	8006542 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fa27 	bl	8006954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69d9      	ldr	r1, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	021a      	lsls	r2, r3, #8
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	61da      	str	r2, [r3, #28]
      break;
 800653a:	e002      	b.n	8006542 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	75fb      	strb	r3, [r7, #23]
      break;
 8006540:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a43      	ldr	r2, [pc, #268]	@ (8006674 <TIM_Base_SetConfig+0x120>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d013      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006572:	d00f      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a40      	ldr	r2, [pc, #256]	@ (8006678 <TIM_Base_SetConfig+0x124>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00b      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a3f      	ldr	r2, [pc, #252]	@ (800667c <TIM_Base_SetConfig+0x128>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d007      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a3e      	ldr	r2, [pc, #248]	@ (8006680 <TIM_Base_SetConfig+0x12c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d003      	beq.n	8006594 <TIM_Base_SetConfig+0x40>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a3d      	ldr	r2, [pc, #244]	@ (8006684 <TIM_Base_SetConfig+0x130>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800659a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a32      	ldr	r2, [pc, #200]	@ (8006674 <TIM_Base_SetConfig+0x120>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d02b      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065b4:	d027      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2f      	ldr	r2, [pc, #188]	@ (8006678 <TIM_Base_SetConfig+0x124>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d023      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2e      	ldr	r2, [pc, #184]	@ (800667c <TIM_Base_SetConfig+0x128>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01f      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006680 <TIM_Base_SetConfig+0x12c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d01b      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006684 <TIM_Base_SetConfig+0x130>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d017      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006688 <TIM_Base_SetConfig+0x134>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a2a      	ldr	r2, [pc, #168]	@ (800668c <TIM_Base_SetConfig+0x138>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00f      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a29      	ldr	r2, [pc, #164]	@ (8006690 <TIM_Base_SetConfig+0x13c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00b      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a28      	ldr	r2, [pc, #160]	@ (8006694 <TIM_Base_SetConfig+0x140>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d007      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a27      	ldr	r2, [pc, #156]	@ (8006698 <TIM_Base_SetConfig+0x144>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a26      	ldr	r2, [pc, #152]	@ (800669c <TIM_Base_SetConfig+0x148>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d108      	bne.n	8006618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a0e      	ldr	r2, [pc, #56]	@ (8006674 <TIM_Base_SetConfig+0x120>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_Base_SetConfig+0xf2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a10      	ldr	r2, [pc, #64]	@ (8006684 <TIM_Base_SetConfig+0x130>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d103      	bne.n	800664e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	691a      	ldr	r2, [r3, #16]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f043 0204 	orr.w	r2, r3, #4
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	601a      	str	r2, [r3, #0]
}
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40010000 	.word	0x40010000
 8006678:	40000400 	.word	0x40000400
 800667c:	40000800 	.word	0x40000800
 8006680:	40000c00 	.word	0x40000c00
 8006684:	40010400 	.word	0x40010400
 8006688:	40014000 	.word	0x40014000
 800668c:	40014400 	.word	0x40014400
 8006690:	40014800 	.word	0x40014800
 8006694:	40001800 	.word	0x40001800
 8006698:	40001c00 	.word	0x40001c00
 800669c:	40002000 	.word	0x40002000

080066a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	f023 0201 	bic.w	r2, r3, #1
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0303 	bic.w	r3, r3, #3
 80066d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f023 0302 	bic.w	r3, r3, #2
 80066e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a20      	ldr	r2, [pc, #128]	@ (8006778 <TIM_OC1_SetConfig+0xd8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC1_SetConfig+0x64>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a1f      	ldr	r2, [pc, #124]	@ (800677c <TIM_OC1_SetConfig+0xdc>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d10c      	bne.n	800671e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f023 0308 	bic.w	r3, r3, #8
 800670a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 0304 	bic.w	r3, r3, #4
 800671c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a15      	ldr	r2, [pc, #84]	@ (8006778 <TIM_OC1_SetConfig+0xd8>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC1_SetConfig+0x8e>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a14      	ldr	r2, [pc, #80]	@ (800677c <TIM_OC1_SetConfig+0xdc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d111      	bne.n	8006752 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800673c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	4313      	orrs	r3, r2
 8006746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	621a      	str	r2, [r3, #32]
}
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	40010000 	.word	0x40010000
 800677c:	40010400 	.word	0x40010400

08006780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	f023 0210 	bic.w	r2, r3, #16
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f023 0320 	bic.w	r3, r3, #32
 80067ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	011b      	lsls	r3, r3, #4
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a22      	ldr	r2, [pc, #136]	@ (8006864 <TIM_OC2_SetConfig+0xe4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_OC2_SetConfig+0x68>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a21      	ldr	r2, [pc, #132]	@ (8006868 <TIM_OC2_SetConfig+0xe8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d10d      	bne.n	8006804 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006802:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a17      	ldr	r2, [pc, #92]	@ (8006864 <TIM_OC2_SetConfig+0xe4>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_OC2_SetConfig+0x94>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a16      	ldr	r2, [pc, #88]	@ (8006868 <TIM_OC2_SetConfig+0xe8>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d113      	bne.n	800683c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800681a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40010000 	.word	0x40010000
 8006868:	40010400 	.word	0x40010400

0800686c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a21      	ldr	r2, [pc, #132]	@ (800694c <TIM_OC3_SetConfig+0xe0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d003      	beq.n	80068d2 <TIM_OC3_SetConfig+0x66>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a20      	ldr	r2, [pc, #128]	@ (8006950 <TIM_OC3_SetConfig+0xe4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10d      	bne.n	80068ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a16      	ldr	r2, [pc, #88]	@ (800694c <TIM_OC3_SetConfig+0xe0>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d003      	beq.n	80068fe <TIM_OC3_SetConfig+0x92>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a15      	ldr	r2, [pc, #84]	@ (8006950 <TIM_OC3_SetConfig+0xe4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d113      	bne.n	8006926 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800690c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	011b      	lsls	r3, r3, #4
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	621a      	str	r2, [r3, #32]
}
 8006940:	bf00      	nop
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	40010000 	.word	0x40010000
 8006950:	40010400 	.word	0x40010400

08006954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800698a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	021b      	lsls	r3, r3, #8
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800699e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	031b      	lsls	r3, r3, #12
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a12      	ldr	r2, [pc, #72]	@ (80069f8 <TIM_OC4_SetConfig+0xa4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_OC4_SetConfig+0x68>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a11      	ldr	r2, [pc, #68]	@ (80069fc <TIM_OC4_SetConfig+0xa8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d109      	bne.n	80069d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	019b      	lsls	r3, r3, #6
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	621a      	str	r2, [r3, #32]
}
 80069ea:	bf00      	nop
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40010000 	.word	0x40010000
 80069fc:	40010400 	.word	0x40010400

08006a00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f003 031f 	and.w	r3, r3, #31
 8006a12:	2201      	movs	r2, #1
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1a      	ldr	r2, [r3, #32]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	43db      	mvns	r3, r3
 8006a22:	401a      	ands	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	fa01 f303 	lsl.w	r3, r1, r3
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
	...

08006a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e05a      	b.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a21      	ldr	r2, [pc, #132]	@ (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d022      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab0:	d01d      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d018      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1a      	ldr	r2, [pc, #104]	@ (8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00e      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a18      	ldr	r2, [pc, #96]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d009      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a17      	ldr	r2, [pc, #92]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a15      	ldr	r2, [pc, #84]	@ (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d10c      	bne.n	8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40010000 	.word	0x40010000
 8006b2c:	40000400 	.word	0x40000400
 8006b30:	40000800 	.word	0x40000800
 8006b34:	40000c00 	.word	0x40000c00
 8006b38:	40010400 	.word	0x40010400
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	40001800 	.word	0x40001800

08006b44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e042      	b.n	8006bdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fb fa0a 	bl	8001f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	@ 0x24
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fff5 	bl	8007b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08c      	sub	sp, #48	@ 0x30
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d162      	bne.n	8006cc4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_UART_Transmit_DMA+0x26>
 8006c04:	88fb      	ldrh	r3, [r7, #6]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e05b      	b.n	8006cc6 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	88fa      	ldrh	r2, [r7, #6]
 8006c18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	88fa      	ldrh	r2, [r7, #6]
 8006c1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2221      	movs	r2, #33	@ 0x21
 8006c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c32:	4a27      	ldr	r2, [pc, #156]	@ (8006cd0 <HAL_UART_Transmit_DMA+0xec>)
 8006c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3a:	4a26      	ldr	r2, [pc, #152]	@ (8006cd4 <HAL_UART_Transmit_DMA+0xf0>)
 8006c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c42:	4a25      	ldr	r2, [pc, #148]	@ (8006cd8 <HAL_UART_Transmit_DMA+0xf4>)
 8006c44:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006c4e:	f107 0308 	add.w	r3, r7, #8
 8006c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	6819      	ldr	r1, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3304      	adds	r3, #4
 8006c62:	461a      	mov	r2, r3
 8006c64:	88fb      	ldrh	r3, [r7, #6]
 8006c66:	f7fb fe9b 	bl	80029a0 <HAL_DMA_Start_IT>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2210      	movs	r2, #16
 8006c74:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e021      	b.n	8006cc6 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3314      	adds	r3, #20
 8006c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cac:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6a39      	ldr	r1, [r7, #32]
 8006cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e5      	bne.n	8006c8c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006cc4:	2302      	movs	r3, #2
  }
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3730      	adds	r7, #48	@ 0x30
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	080073f5 	.word	0x080073f5
 8006cd4:	0800748f 	.word	0x0800748f
 8006cd8:	08007613 	.word	0x08007613

08006cdc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	d112      	bne.n	8006d1c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <HAL_UART_Receive_DMA+0x26>
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e00b      	b.n	8006d1e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fcc8 	bl	80076a8 <UART_Start_Receive_DMA>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	e000      	b.n	8006d1e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b090      	sub	sp, #64	@ 0x40
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d3c:	2b80      	cmp	r3, #128	@ 0x80
 8006d3e:	bf0c      	ite	eq
 8006d40:	2301      	moveq	r3, #1
 8006d42:	2300      	movne	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b21      	cmp	r3, #33	@ 0x21
 8006d52:	d128      	bne.n	8006da6 <HAL_UART_DMAStop+0x80>
 8006d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d025      	beq.n	8006da6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3314      	adds	r3, #20
 8006d60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	623b      	str	r3, [r7, #32]
   return(result);
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3314      	adds	r3, #20
 8006d78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e5      	bne.n	8006d5a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fb fe58 	bl	8002a50 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fd27 	bl	80077f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db0:	2b40      	cmp	r3, #64	@ 0x40
 8006db2:	bf0c      	ite	eq
 8006db4:	2301      	moveq	r3, #1
 8006db6:	2300      	movne	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b22      	cmp	r3, #34	@ 0x22
 8006dc6:	d128      	bne.n	8006e1a <HAL_UART_DMAStop+0xf4>
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d025      	beq.n	8006e1a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3314      	adds	r3, #20
 8006dd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3314      	adds	r3, #20
 8006dec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dee:	61fa      	str	r2, [r7, #28]
 8006df0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	69b9      	ldr	r1, [r7, #24]
 8006df4:	69fa      	ldr	r2, [r7, #28]
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e5      	bne.n	8006dce <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d004      	beq.n	8006e14 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fb fe1e 	bl	8002a50 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fd15 	bl	8007844 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3740      	adds	r7, #64	@ 0x40
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b0ba      	sub	sp, #232	@ 0xe8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10f      	bne.n	8006e8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <HAL_UART_IRQHandler+0x66>
 8006e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fdba 	bl	80079fc <UART_Receive_IT>
      return;
 8006e88:	e273      	b.n	8007372 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80de 	beq.w	8007050 <HAL_UART_IRQHandler+0x22c>
 8006e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ea4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80d1 	beq.w	8007050 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00b      	beq.n	8006ed2 <HAL_UART_IRQHandler+0xae>
 8006eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eca:	f043 0201 	orr.w	r2, r3, #1
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00b      	beq.n	8006ef6 <HAL_UART_IRQHandler+0xd2>
 8006ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d005      	beq.n	8006ef6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eee:	f043 0202 	orr.w	r2, r3, #2
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00b      	beq.n	8006f1a <HAL_UART_IRQHandler+0xf6>
 8006f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d005      	beq.n	8006f1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f12:	f043 0204 	orr.w	r2, r3, #4
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d011      	beq.n	8006f4a <HAL_UART_IRQHandler+0x126>
 8006f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d105      	bne.n	8006f3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d005      	beq.n	8006f4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f42:	f043 0208 	orr.w	r2, r3, #8
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 820a 	beq.w	8007368 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <HAL_UART_IRQHandler+0x14e>
 8006f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f64:	f003 0320 	and.w	r3, r3, #32
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fd45 	bl	80079fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7c:	2b40      	cmp	r3, #64	@ 0x40
 8006f7e:	bf0c      	ite	eq
 8006f80:	2301      	moveq	r3, #1
 8006f82:	2300      	movne	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d103      	bne.n	8006f9e <HAL_UART_IRQHandler+0x17a>
 8006f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d04f      	beq.n	800703e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fc50 	bl	8007844 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fae:	2b40      	cmp	r3, #64	@ 0x40
 8006fb0:	d141      	bne.n	8007036 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3314      	adds	r3, #20
 8006fb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3314      	adds	r3, #20
 8006fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006fde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1d9      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d013      	beq.n	800702e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700a:	4a8a      	ldr	r2, [pc, #552]	@ (8007234 <HAL_UART_IRQHandler+0x410>)
 800700c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007012:	4618      	mov	r0, r3
 8007014:	f7fb fd8c 	bl	8002b30 <HAL_DMA_Abort_IT>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d016      	beq.n	800704c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007028:	4610      	mov	r0, r2
 800702a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702c:	e00e      	b.n	800704c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f9ca 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	e00a      	b.n	800704c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9c6 	bl	80073c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	e006      	b.n	800704c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f9c2 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800704a:	e18d      	b.n	8007368 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704c:	bf00      	nop
    return;
 800704e:	e18b      	b.n	8007368 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007054:	2b01      	cmp	r3, #1
 8007056:	f040 8167 	bne.w	8007328 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800705a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 8160 	beq.w	8007328 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800706c:	f003 0310 	and.w	r3, r3, #16
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8159 	beq.w	8007328 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007076:	2300      	movs	r3, #0
 8007078:	60bb      	str	r3, [r7, #8]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	60bb      	str	r3, [r7, #8]
 800708a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007096:	2b40      	cmp	r3, #64	@ 0x40
 8007098:	f040 80ce 	bne.w	8007238 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 80a9 	beq.w	8007204 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f080 80a2 	bcs.w	8007204 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070d2:	f000 8088 	beq.w	80071e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	330c      	adds	r3, #12
 80070dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80070ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	330c      	adds	r3, #12
 80070fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007102:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007106:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800710e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800711a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1d9      	bne.n	80070d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3314      	adds	r3, #20
 8007128:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007134:	f023 0301 	bic.w	r3, r3, #1
 8007138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3314      	adds	r3, #20
 8007142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007146:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800714a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800714e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e1      	bne.n	8007122 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3314      	adds	r3, #20
 8007164:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800716e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3314      	adds	r3, #20
 800717e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007182:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007184:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007188:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e3      	bne.n	800715e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071b6:	f023 0310 	bic.w	r3, r3, #16
 80071ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80071c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80071ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e3      	bne.n	80071a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fb fc35 	bl	8002a50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f8ed 	bl	80073dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007202:	e0b3      	b.n	800736c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007208:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800720c:	429a      	cmp	r2, r3
 800720e:	f040 80ad 	bne.w	800736c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800721c:	f040 80a6 	bne.w	800736c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f8d5 	bl	80073dc <HAL_UARTEx_RxEventCallback>
      return;
 8007232:	e09b      	b.n	800736c <HAL_UART_IRQHandler+0x548>
 8007234:	0800790b 	.word	0x0800790b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007240:	b29b      	uxth	r3, r3
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800724c:	b29b      	uxth	r3, r3
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 808e 	beq.w	8007370 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8089 	beq.w	8007370 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	330c      	adds	r3, #12
 8007264:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800726e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007274:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	330c      	adds	r3, #12
 800727e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007282:	647a      	str	r2, [r7, #68]	@ 0x44
 8007284:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e3      	bne.n	800725e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3314      	adds	r3, #20
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	623b      	str	r3, [r7, #32]
   return(result);
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	f023 0301 	bic.w	r3, r3, #1
 80072ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3314      	adds	r3, #20
 80072b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80072bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e3      	bne.n	8007296 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	330c      	adds	r3, #12
 80072e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0310 	bic.w	r3, r3, #16
 80072f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007300:	61fa      	str	r2, [r7, #28]
 8007302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	69b9      	ldr	r1, [r7, #24]
 8007306:	69fa      	ldr	r2, [r7, #28]
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	617b      	str	r3, [r7, #20]
   return(result);
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e3      	bne.n	80072dc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800731a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f85b 	bl	80073dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007326:	e023      	b.n	8007370 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800732c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <HAL_UART_IRQHandler+0x524>
 8007334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 faf3 	bl	800792c <UART_Transmit_IT>
    return;
 8007346:	e014      	b.n	8007372 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800734c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00e      	beq.n	8007372 <HAL_UART_IRQHandler+0x54e>
 8007354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fb33 	bl	80079cc <UART_EndTransmit_IT>
    return;
 8007366:	e004      	b.n	8007372 <HAL_UART_IRQHandler+0x54e>
    return;
 8007368:	bf00      	nop
 800736a:	e002      	b.n	8007372 <HAL_UART_IRQHandler+0x54e>
      return;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <HAL_UART_IRQHandler+0x54e>
      return;
 8007370:	bf00      	nop
  }
}
 8007372:	37e8      	adds	r7, #232	@ 0xe8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b090      	sub	sp, #64	@ 0x40
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007400:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800740c:	2b00      	cmp	r3, #0
 800740e:	d137      	bne.n	8007480 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007412:	2200      	movs	r2, #0
 8007414:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3314      	adds	r3, #20
 800741c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	623b      	str	r3, [r7, #32]
   return(result);
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800742c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800742e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3314      	adds	r3, #20
 8007434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007436:	633a      	str	r2, [r7, #48]	@ 0x30
 8007438:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800743c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e5      	bne.n	8007416 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800744a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	330c      	adds	r3, #12
 8007450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	e853 3f00 	ldrex	r3, [r3]
 8007458:	60fb      	str	r3, [r7, #12]
   return(result);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
 8007462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800746a:	61fa      	str	r2, [r7, #28]
 800746c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746e:	69b9      	ldr	r1, [r7, #24]
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	e841 2300 	strex	r3, r2, [r1]
 8007476:	617b      	str	r3, [r7, #20]
   return(result);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1e5      	bne.n	800744a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800747e:	e002      	b.n	8007486 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007480:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007482:	f7ff ff79 	bl	8007378 <HAL_UART_TxCpltCallback>
}
 8007486:	bf00      	nop
 8007488:	3740      	adds	r7, #64	@ 0x40
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7ff ff75 	bl	800738c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b09c      	sub	sp, #112	@ 0x70
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d172      	bne.n	80075ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80074c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074c8:	2200      	movs	r2, #0
 80074ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	330c      	adds	r3, #12
 80074ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80074ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e5      	bne.n	80074cc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3314      	adds	r3, #20
 8007506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	667b      	str	r3, [r7, #100]	@ 0x64
 8007518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3314      	adds	r3, #20
 800751e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007520:	647a      	str	r2, [r7, #68]	@ 0x44
 8007522:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007524:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007528:	e841 2300 	strex	r3, r2, [r1]
 800752c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800752e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e5      	bne.n	8007500 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3314      	adds	r3, #20
 800753a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	623b      	str	r3, [r7, #32]
   return(result);
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800754a:	663b      	str	r3, [r7, #96]	@ 0x60
 800754c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3314      	adds	r3, #20
 8007552:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007554:	633a      	str	r2, [r7, #48]	@ 0x30
 8007556:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800755a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e5      	bne.n	8007534 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800756a:	2220      	movs	r2, #32
 800756c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007574:	2b01      	cmp	r3, #1
 8007576:	d119      	bne.n	80075ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	60fb      	str	r3, [r7, #12]
   return(result);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0310 	bic.w	r3, r3, #16
 800758e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	330c      	adds	r3, #12
 8007596:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007598:	61fa      	str	r2, [r7, #28]
 800759a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	69b9      	ldr	r1, [r7, #24]
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	617b      	str	r3, [r7, #20]
   return(result);
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e5      	bne.n	8007578 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075ae:	2200      	movs	r2, #0
 80075b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d106      	bne.n	80075c8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075be:	4619      	mov	r1, r3
 80075c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80075c2:	f7ff ff0b 	bl	80073dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075c6:	e002      	b.n	80075ce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80075c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80075ca:	f7ff fee9 	bl	80073a0 <HAL_UART_RxCpltCallback>
}
 80075ce:	bf00      	nop
 80075d0:	3770      	adds	r7, #112	@ 0x70
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d108      	bne.n	8007604 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075f6:	085b      	lsrs	r3, r3, #1
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	4619      	mov	r1, r3
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff feed 	bl	80073dc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007602:	e002      	b.n	800760a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7ff fed5 	bl	80073b4 <HAL_UART_RxHalfCpltCallback>
}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}

08007612 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007612:	b580      	push	{r7, lr}
 8007614:	b084      	sub	sp, #16
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007622:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800762e:	2b80      	cmp	r3, #128	@ 0x80
 8007630:	bf0c      	ite	eq
 8007632:	2301      	moveq	r3, #1
 8007634:	2300      	movne	r3, #0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b21      	cmp	r3, #33	@ 0x21
 8007644:	d108      	bne.n	8007658 <UART_DMAError+0x46>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2200      	movs	r2, #0
 8007650:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007652:	68b8      	ldr	r0, [r7, #8]
 8007654:	f000 f8ce 	bl	80077f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007662:	2b40      	cmp	r3, #64	@ 0x40
 8007664:	bf0c      	ite	eq
 8007666:	2301      	moveq	r3, #1
 8007668:	2300      	movne	r3, #0
 800766a:	b2db      	uxtb	r3, r3
 800766c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b22      	cmp	r3, #34	@ 0x22
 8007678:	d108      	bne.n	800768c <UART_DMAError+0x7a>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2200      	movs	r2, #0
 8007684:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007686:	68b8      	ldr	r0, [r7, #8]
 8007688:	f000 f8dc 	bl	8007844 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007690:	f043 0210 	orr.w	r2, r3, #16
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007698:	68b8      	ldr	r0, [r7, #8]
 800769a:	f7ff fe95 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b098      	sub	sp, #96	@ 0x60
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	4613      	mov	r3, r2
 80076b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	88fa      	ldrh	r2, [r7, #6]
 80076c0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2222      	movs	r2, #34	@ 0x22
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d4:	4a44      	ldr	r2, [pc, #272]	@ (80077e8 <UART_Start_Receive_DMA+0x140>)
 80076d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076dc:	4a43      	ldr	r2, [pc, #268]	@ (80077ec <UART_Start_Receive_DMA+0x144>)
 80076de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076e4:	4a42      	ldr	r2, [pc, #264]	@ (80077f0 <UART_Start_Receive_DMA+0x148>)
 80076e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ec:	2200      	movs	r2, #0
 80076ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80076f0:	f107 0308 	add.w	r3, r7, #8
 80076f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	f7fb f94a 	bl	80029a0 <HAL_DMA_Start_IT>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d008      	beq.n	8007724 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2210      	movs	r2, #16
 8007716:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e05d      	b.n	80077e0 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007724:	2300      	movs	r3, #0
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d019      	beq.n	8007776 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007758:	65bb      	str	r3, [r7, #88]	@ 0x58
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	330c      	adds	r3, #12
 8007760:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007762:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007764:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e5      	bne.n	8007742 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3314      	adds	r3, #20
 800777c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007788:	f043 0301 	orr.w	r3, r3, #1
 800778c:	657b      	str	r3, [r7, #84]	@ 0x54
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3314      	adds	r3, #20
 8007794:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007796:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007798:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800779c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e5      	bne.n	8007776 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3314      	adds	r3, #20
 80077b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	617b      	str	r3, [r7, #20]
   return(result);
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3314      	adds	r3, #20
 80077c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80077ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80077cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6a39      	ldr	r1, [r7, #32]
 80077d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e5      	bne.n	80077aa <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3760      	adds	r7, #96	@ 0x60
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	080074ab 	.word	0x080074ab
 80077ec:	080075d7 	.word	0x080075d7
 80077f0:	08007613 	.word	0x08007613

080077f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b089      	sub	sp, #36	@ 0x24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60bb      	str	r3, [r7, #8]
   return(result);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007812:	61fb      	str	r3, [r7, #28]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	330c      	adds	r3, #12
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	61ba      	str	r2, [r7, #24]
 800781e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6979      	ldr	r1, [r7, #20]
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	613b      	str	r3, [r7, #16]
   return(result);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e5      	bne.n	80077fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007838:	bf00      	nop
 800783a:	3724      	adds	r7, #36	@ 0x24
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007844:	b480      	push	{r7}
 8007846:	b095      	sub	sp, #84	@ 0x54
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	330c      	adds	r3, #12
 8007852:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	330c      	adds	r3, #12
 800786a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800786c:	643a      	str	r2, [r7, #64]	@ 0x40
 800786e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800787a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e5      	bne.n	800784c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3314      	adds	r3, #20
 8007886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f023 0301 	bic.w	r3, r3, #1
 8007896:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3314      	adds	r3, #20
 800789e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e5      	bne.n	8007880 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d119      	bne.n	80078f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	330c      	adds	r3, #12
 80078c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	e853 3f00 	ldrex	r3, [r3]
 80078ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f023 0310 	bic.w	r3, r3, #16
 80078d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	330c      	adds	r3, #12
 80078da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078dc:	61ba      	str	r2, [r7, #24]
 80078de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	6979      	ldr	r1, [r7, #20]
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e5      	bne.n	80078bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80078fe:	bf00      	nop
 8007900:	3754      	adds	r7, #84	@ 0x54
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b084      	sub	sp, #16
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007916:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f7ff fd52 	bl	80073c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b21      	cmp	r3, #33	@ 0x21
 800793e:	d13e      	bne.n	80079be <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007948:	d114      	bne.n	8007974 <UART_Transmit_IT+0x48>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d110      	bne.n	8007974 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007966:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	1c9a      	adds	r2, r3, #2
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	621a      	str	r2, [r3, #32]
 8007972:	e008      	b.n	8007986 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	1c59      	adds	r1, r3, #1
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6211      	str	r1, [r2, #32]
 800797e:	781a      	ldrb	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29b      	uxth	r3, r3
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	4619      	mov	r1, r3
 8007994:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10f      	bne.n	80079ba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079a8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079b8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	e000      	b.n	80079c0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079be:	2302      	movs	r3, #2
  }
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff fcc3 	bl	8007378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08c      	sub	sp, #48	@ 0x30
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b22      	cmp	r3, #34	@ 0x22
 8007a16:	f040 80aa 	bne.w	8007b6e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a22:	d115      	bne.n	8007a50 <UART_Receive_IT+0x54>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d111      	bne.n	8007a50 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a30:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a48:	1c9a      	adds	r2, r3, #2
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a4e:	e024      	b.n	8007a9a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a5e:	d007      	beq.n	8007a70 <UART_Receive_IT+0x74>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10a      	bne.n	8007a7e <UART_Receive_IT+0x82>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	e008      	b.n	8007a90 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d15d      	bne.n	8007b6a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68da      	ldr	r2, [r3, #12]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0220 	bic.w	r2, r2, #32
 8007abc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007acc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	695a      	ldr	r2, [r3, #20]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0201 	bic.w	r2, r2, #1
 8007adc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d135      	bne.n	8007b60 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f023 0310 	bic.w	r3, r3, #16
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	330c      	adds	r3, #12
 8007b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b1a:	623a      	str	r2, [r7, #32]
 8007b1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	69f9      	ldr	r1, [r7, #28]
 8007b20:	6a3a      	ldr	r2, [r7, #32]
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e5      	bne.n	8007afa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0310 	and.w	r3, r3, #16
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d10a      	bne.n	8007b52 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b56:	4619      	mov	r1, r3
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff fc3f 	bl	80073dc <HAL_UARTEx_RxEventCallback>
 8007b5e:	e002      	b.n	8007b66 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff fc1d 	bl	80073a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	e002      	b.n	8007b70 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e000      	b.n	8007b70 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b6e:	2302      	movs	r3, #2
  }
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3730      	adds	r7, #48	@ 0x30
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b7c:	b0c0      	sub	sp, #256	@ 0x100
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b94:	68d9      	ldr	r1, [r3, #12]
 8007b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	ea40 0301 	orr.w	r3, r0, r1
 8007ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007bd0:	f021 010c 	bic.w	r1, r1, #12
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007bde:	430b      	orrs	r3, r1
 8007be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf2:	6999      	ldr	r1, [r3, #24]
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	ea40 0301 	orr.w	r3, r0, r1
 8007bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	4b8f      	ldr	r3, [pc, #572]	@ (8007e44 <UART_SetConfig+0x2cc>)
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d005      	beq.n	8007c18 <UART_SetConfig+0xa0>
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	4b8d      	ldr	r3, [pc, #564]	@ (8007e48 <UART_SetConfig+0x2d0>)
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d104      	bne.n	8007c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c18:	f7fe f97a 	bl	8005f10 <HAL_RCC_GetPCLK2Freq>
 8007c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c20:	e003      	b.n	8007c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c22:	f7fe f961 	bl	8005ee8 <HAL_RCC_GetPCLK1Freq>
 8007c26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c34:	f040 810c 	bne.w	8007e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	1891      	adds	r1, r2, r2
 8007c50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c52:	415b      	adcs	r3, r3
 8007c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	eb12 0801 	adds.w	r8, r2, r1
 8007c60:	4629      	mov	r1, r5
 8007c62:	eb43 0901 	adc.w	r9, r3, r1
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	f04f 0300 	mov.w	r3, #0
 8007c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c7a:	4690      	mov	r8, r2
 8007c7c:	4699      	mov	r9, r3
 8007c7e:	4623      	mov	r3, r4
 8007c80:	eb18 0303 	adds.w	r3, r8, r3
 8007c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c88:	462b      	mov	r3, r5
 8007c8a:	eb49 0303 	adc.w	r3, r9, r3
 8007c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	18db      	adds	r3, r3, r3
 8007caa:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cac:	4613      	mov	r3, r2
 8007cae:	eb42 0303 	adc.w	r3, r2, r3
 8007cb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007cbc:	f7f8 fb90 	bl	80003e0 <__aeabi_uldivmod>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4b61      	ldr	r3, [pc, #388]	@ (8007e4c <UART_SetConfig+0x2d4>)
 8007cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cca:	095b      	lsrs	r3, r3, #5
 8007ccc:	011c      	lsls	r4, r3, #4
 8007cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	1891      	adds	r1, r2, r2
 8007ce6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ce8:	415b      	adcs	r3, r3
 8007cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d10:	4692      	mov	sl, r2
 8007d12:	469b      	mov	fp, r3
 8007d14:	4643      	mov	r3, r8
 8007d16:	eb1a 0303 	adds.w	r3, sl, r3
 8007d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	eb4b 0303 	adc.w	r3, fp, r3
 8007d24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	18db      	adds	r3, r3, r3
 8007d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d42:	4613      	mov	r3, r2
 8007d44:	eb42 0303 	adc.w	r3, r2, r3
 8007d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d52:	f7f8 fb45 	bl	80003e0 <__aeabi_uldivmod>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8007e4c <UART_SetConfig+0x2d4>)
 8007d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	2264      	movs	r2, #100	@ 0x64
 8007d66:	fb02 f303 	mul.w	r3, r2, r3
 8007d6a:	1acb      	subs	r3, r1, r3
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d72:	4b36      	ldr	r3, [pc, #216]	@ (8007e4c <UART_SetConfig+0x2d4>)
 8007d74:	fba3 2302 	umull	r2, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d80:	441c      	add	r4, r3
 8007d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d94:	4642      	mov	r2, r8
 8007d96:	464b      	mov	r3, r9
 8007d98:	1891      	adds	r1, r2, r2
 8007d9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d9c:	415b      	adcs	r3, r3
 8007d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007da4:	4641      	mov	r1, r8
 8007da6:	1851      	adds	r1, r2, r1
 8007da8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007daa:	4649      	mov	r1, r9
 8007dac:	414b      	adcs	r3, r1
 8007dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	00cb      	lsls	r3, r1, #3
 8007dc0:	4651      	mov	r1, sl
 8007dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc6:	4651      	mov	r1, sl
 8007dc8:	00ca      	lsls	r2, r1, #3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	189b      	adds	r3, r3, r2
 8007dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dd8:	464b      	mov	r3, r9
 8007dda:	460a      	mov	r2, r1
 8007ddc:	eb42 0303 	adc.w	r3, r2, r3
 8007de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007df0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007df8:	460b      	mov	r3, r1
 8007dfa:	18db      	adds	r3, r3, r3
 8007dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dfe:	4613      	mov	r3, r2
 8007e00:	eb42 0303 	adc.w	r3, r2, r3
 8007e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e0e:	f7f8 fae7 	bl	80003e0 <__aeabi_uldivmod>
 8007e12:	4602      	mov	r2, r0
 8007e14:	460b      	mov	r3, r1
 8007e16:	4b0d      	ldr	r3, [pc, #52]	@ (8007e4c <UART_SetConfig+0x2d4>)
 8007e18:	fba3 1302 	umull	r1, r3, r3, r2
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	2164      	movs	r1, #100	@ 0x64
 8007e20:	fb01 f303 	mul.w	r3, r1, r3
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	3332      	adds	r3, #50	@ 0x32
 8007e2a:	4a08      	ldr	r2, [pc, #32]	@ (8007e4c <UART_SetConfig+0x2d4>)
 8007e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e30:	095b      	lsrs	r3, r3, #5
 8007e32:	f003 0207 	and.w	r2, r3, #7
 8007e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4422      	add	r2, r4
 8007e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e40:	e106      	b.n	8008050 <UART_SetConfig+0x4d8>
 8007e42:	bf00      	nop
 8007e44:	40011000 	.word	0x40011000
 8007e48:	40011400 	.word	0x40011400
 8007e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e62:	4642      	mov	r2, r8
 8007e64:	464b      	mov	r3, r9
 8007e66:	1891      	adds	r1, r2, r2
 8007e68:	6239      	str	r1, [r7, #32]
 8007e6a:	415b      	adcs	r3, r3
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e72:	4641      	mov	r1, r8
 8007e74:	1854      	adds	r4, r2, r1
 8007e76:	4649      	mov	r1, r9
 8007e78:	eb43 0501 	adc.w	r5, r3, r1
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	00eb      	lsls	r3, r5, #3
 8007e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e8a:	00e2      	lsls	r2, r4, #3
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	461d      	mov	r5, r3
 8007e90:	4643      	mov	r3, r8
 8007e92:	18e3      	adds	r3, r4, r3
 8007e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e98:	464b      	mov	r3, r9
 8007e9a:	eb45 0303 	adc.w	r3, r5, r3
 8007e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007eb2:	f04f 0200 	mov.w	r2, #0
 8007eb6:	f04f 0300 	mov.w	r3, #0
 8007eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	008b      	lsls	r3, r1, #2
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec8:	4621      	mov	r1, r4
 8007eca:	008a      	lsls	r2, r1, #2
 8007ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ed0:	f7f8 fa86 	bl	80003e0 <__aeabi_uldivmod>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4b60      	ldr	r3, [pc, #384]	@ (800805c <UART_SetConfig+0x4e4>)
 8007eda:	fba3 2302 	umull	r2, r3, r3, r2
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	011c      	lsls	r4, r3, #4
 8007ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007eec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	1891      	adds	r1, r2, r2
 8007efa:	61b9      	str	r1, [r7, #24]
 8007efc:	415b      	adcs	r3, r3
 8007efe:	61fb      	str	r3, [r7, #28]
 8007f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f04:	4641      	mov	r1, r8
 8007f06:	1851      	adds	r1, r2, r1
 8007f08:	6139      	str	r1, [r7, #16]
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	414b      	adcs	r3, r1
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	f04f 0300 	mov.w	r3, #0
 8007f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	00cb      	lsls	r3, r1, #3
 8007f20:	4651      	mov	r1, sl
 8007f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f26:	4651      	mov	r1, sl
 8007f28:	00ca      	lsls	r2, r1, #3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	4642      	mov	r2, r8
 8007f32:	189b      	adds	r3, r3, r2
 8007f34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f38:	464b      	mov	r3, r9
 8007f3a:	460a      	mov	r2, r1
 8007f3c:	eb42 0303 	adc.w	r3, r2, r3
 8007f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f5c:	4649      	mov	r1, r9
 8007f5e:	008b      	lsls	r3, r1, #2
 8007f60:	4641      	mov	r1, r8
 8007f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f66:	4641      	mov	r1, r8
 8007f68:	008a      	lsls	r2, r1, #2
 8007f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f6e:	f7f8 fa37 	bl	80003e0 <__aeabi_uldivmod>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	4b38      	ldr	r3, [pc, #224]	@ (800805c <UART_SetConfig+0x4e4>)
 8007f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f7e:	095b      	lsrs	r3, r3, #5
 8007f80:	2264      	movs	r2, #100	@ 0x64
 8007f82:	fb02 f303 	mul.w	r3, r2, r3
 8007f86:	1acb      	subs	r3, r1, r3
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	3332      	adds	r3, #50	@ 0x32
 8007f8c:	4a33      	ldr	r2, [pc, #204]	@ (800805c <UART_SetConfig+0x4e4>)
 8007f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f92:	095b      	lsrs	r3, r3, #5
 8007f94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f98:	441c      	add	r4, r3
 8007f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007fa2:	677a      	str	r2, [r7, #116]	@ 0x74
 8007fa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	1891      	adds	r1, r2, r2
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	415b      	adcs	r3, r3
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fb8:	4641      	mov	r1, r8
 8007fba:	1851      	adds	r1, r2, r1
 8007fbc:	6039      	str	r1, [r7, #0]
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	414b      	adcs	r3, r1
 8007fc2:	607b      	str	r3, [r7, #4]
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fd0:	4659      	mov	r1, fp
 8007fd2:	00cb      	lsls	r3, r1, #3
 8007fd4:	4651      	mov	r1, sl
 8007fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fda:	4651      	mov	r1, sl
 8007fdc:	00ca      	lsls	r2, r1, #3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	189b      	adds	r3, r3, r2
 8007fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fea:	464b      	mov	r3, r9
 8007fec:	460a      	mov	r2, r1
 8007fee:	eb42 0303 	adc.w	r3, r2, r3
 8007ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ffe:	667a      	str	r2, [r7, #100]	@ 0x64
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800800c:	4649      	mov	r1, r9
 800800e:	008b      	lsls	r3, r1, #2
 8008010:	4641      	mov	r1, r8
 8008012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008016:	4641      	mov	r1, r8
 8008018:	008a      	lsls	r2, r1, #2
 800801a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800801e:	f7f8 f9df 	bl	80003e0 <__aeabi_uldivmod>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4b0d      	ldr	r3, [pc, #52]	@ (800805c <UART_SetConfig+0x4e4>)
 8008028:	fba3 1302 	umull	r1, r3, r3, r2
 800802c:	095b      	lsrs	r3, r3, #5
 800802e:	2164      	movs	r1, #100	@ 0x64
 8008030:	fb01 f303 	mul.w	r3, r1, r3
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	3332      	adds	r3, #50	@ 0x32
 800803a:	4a08      	ldr	r2, [pc, #32]	@ (800805c <UART_SetConfig+0x4e4>)
 800803c:	fba2 2303 	umull	r2, r3, r2, r3
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	f003 020f 	and.w	r2, r3, #15
 8008046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4422      	add	r2, r4
 800804e:	609a      	str	r2, [r3, #8]
}
 8008050:	bf00      	nop
 8008052:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008056:	46bd      	mov	sp, r7
 8008058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800805c:	51eb851f 	.word	0x51eb851f

08008060 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008060:	b084      	sub	sp, #16
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	f107 001c 	add.w	r0, r7, #28
 800806e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008072:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008076:	2b01      	cmp	r3, #1
 8008078:	d123      	bne.n	80080c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800808e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d105      	bne.n	80080b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f9dc 	bl	8008474 <USB_CoreReset>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]
 80080c0:	e01b      	b.n	80080fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f9d0 	bl	8008474 <USB_CoreReset>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80080ec:	e005      	b.n	80080fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80080fa:	7fbb      	ldrb	r3, [r7, #30]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d10b      	bne.n	8008118 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f043 0206 	orr.w	r2, r3, #6
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f043 0220 	orr.w	r2, r3, #32
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008124:	b004      	add	sp, #16
 8008126:	4770      	bx	lr

08008128 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f043 0201 	orr.w	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f023 0201 	bic.w	r2, r3, #1
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d115      	bne.n	80081ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800819a:	200a      	movs	r0, #10
 800819c:	f7fa fa1c 	bl	80025d8 <HAL_Delay>
      ms += 10U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	330a      	adds	r3, #10
 80081a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f956 	bl	8008458 <USB_GetMode>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d01e      	beq.n	80081f0 <USB_SetCurrentMode+0x84>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80081b6:	d9f0      	bls.n	800819a <USB_SetCurrentMode+0x2e>
 80081b8:	e01a      	b.n	80081f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d115      	bne.n	80081ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80081cc:	200a      	movs	r0, #10
 80081ce:	f7fa fa03 	bl	80025d8 <HAL_Delay>
      ms += 10U;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	330a      	adds	r3, #10
 80081d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f93d 	bl	8008458 <USB_GetMode>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <USB_SetCurrentMode+0x84>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2bc7      	cmp	r3, #199	@ 0xc7
 80081e8:	d9f0      	bls.n	80081cc <USB_SetCurrentMode+0x60>
 80081ea:	e001      	b.n	80081f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e005      	b.n	80081fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2bc8      	cmp	r3, #200	@ 0xc8
 80081f4:	d101      	bne.n	80081fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e000      	b.n	80081fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3301      	adds	r3, #1
 8008216:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800821e:	d901      	bls.n	8008224 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e01b      	b.n	800825c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	daf2      	bge.n	8008212 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	019b      	lsls	r3, r3, #6
 8008234:	f043 0220 	orr.w	r2, r3, #32
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
 8008240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008248:	d901      	bls.n	800824e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e006      	b.n	800825c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0320 	and.w	r3, r3, #32
 8008256:	2b20      	cmp	r3, #32
 8008258:	d0f0      	beq.n	800823c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008280:	d901      	bls.n	8008286 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e018      	b.n	80082b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	daf2      	bge.n	8008274 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2210      	movs	r2, #16
 8008296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082a4:	d901      	bls.n	80082aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e006      	b.n	80082b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0310 	and.w	r3, r3, #16
 80082b2:	2b10      	cmp	r3, #16
 80082b4:	d0f0      	beq.n	8008298 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b089      	sub	sp, #36	@ 0x24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4611      	mov	r1, r2
 80082d0:	461a      	mov	r2, r3
 80082d2:	460b      	mov	r3, r1
 80082d4:	71fb      	strb	r3, [r7, #7]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d123      	bne.n	8008332 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082ea:	88bb      	ldrh	r3, [r7, #4]
 80082ec:	3303      	adds	r3, #3
 80082ee:	089b      	lsrs	r3, r3, #2
 80082f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082f2:	2300      	movs	r3, #0
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	e018      	b.n	800832a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082f8:	79fb      	ldrb	r3, [r7, #7]
 80082fa:	031a      	lsls	r2, r3, #12
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008304:	461a      	mov	r2, r3
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	3301      	adds	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	3301      	adds	r3, #1
 8008316:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	3301      	adds	r3, #1
 800831c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3301      	adds	r3, #1
 8008322:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	3301      	adds	r3, #1
 8008328:	61bb      	str	r3, [r7, #24]
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	429a      	cmp	r2, r3
 8008330:	d3e2      	bcc.n	80082f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3724      	adds	r7, #36	@ 0x24
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008340:	b480      	push	{r7}
 8008342:	b08b      	sub	sp, #44	@ 0x2c
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008356:	88fb      	ldrh	r3, [r7, #6]
 8008358:	089b      	lsrs	r3, r3, #2
 800835a:	b29b      	uxth	r3, r3
 800835c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800835e:	88fb      	ldrh	r3, [r7, #6]
 8008360:	f003 0303 	and.w	r3, r3, #3
 8008364:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008366:	2300      	movs	r3, #0
 8008368:	623b      	str	r3, [r7, #32]
 800836a:	e014      	b.n	8008396 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008376:	601a      	str	r2, [r3, #0]
    pDest++;
 8008378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837a:	3301      	adds	r3, #1
 800837c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800837e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008380:	3301      	adds	r3, #1
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008386:	3301      	adds	r3, #1
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	3301      	adds	r3, #1
 800838e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	3301      	adds	r3, #1
 8008394:	623b      	str	r3, [r7, #32]
 8008396:	6a3a      	ldr	r2, [r7, #32]
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	429a      	cmp	r2, r3
 800839c:	d3e6      	bcc.n	800836c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800839e:	8bfb      	ldrh	r3, [r7, #30]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d01e      	beq.n	80083e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083ae:	461a      	mov	r2, r3
 80083b0:	f107 0310 	add.w	r3, r7, #16
 80083b4:	6812      	ldr	r2, [r2, #0]
 80083b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	fa22 f303 	lsr.w	r3, r2, r3
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	701a      	strb	r2, [r3, #0]
      i++;
 80083ca:	6a3b      	ldr	r3, [r7, #32]
 80083cc:	3301      	adds	r3, #1
 80083ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	3301      	adds	r3, #1
 80083d4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80083d6:	8bfb      	ldrh	r3, [r7, #30]
 80083d8:	3b01      	subs	r3, #1
 80083da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083dc:	8bfb      	ldrh	r3, [r7, #30]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1ea      	bne.n	80083b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	372c      	adds	r7, #44	@ 0x2c
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	4013      	ands	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008408:	68fb      	ldr	r3, [r7, #12]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008416:	b480      	push	{r7}
 8008418:	b085      	sub	sp, #20
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4413      	add	r3, r2
 800842e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	4013      	ands	r3, r2
 8008448:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800844a:	68bb      	ldr	r3, [r7, #8]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	f003 0301 	and.w	r3, r3, #1
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3301      	adds	r3, #1
 8008484:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800848c:	d901      	bls.n	8008492 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e022      	b.n	80084d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	daf2      	bge.n	8008480 <USB_CoreReset+0xc>

  count = 10U;
 800849a:	230a      	movs	r3, #10
 800849c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800849e:	e002      	b.n	80084a6 <USB_CoreReset+0x32>
  {
    count--;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1f9      	bne.n	80084a0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	f043 0201 	orr.w	r2, r3, #1
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3301      	adds	r3, #1
 80084bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084c4:	d901      	bls.n	80084ca <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e006      	b.n	80084d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d0f0      	beq.n	80084b8 <USB_CoreReset+0x44>

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084e4:	b084      	sub	sp, #16
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80084f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008504:	461a      	mov	r2, r3
 8008506:	2300      	movs	r3, #0
 8008508:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008526:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d119      	bne.n	800856e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800853a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800853e:	2b01      	cmp	r3, #1
 8008540:	d10a      	bne.n	8008558 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008550:	f043 0304 	orr.w	r3, r3, #4
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e014      	b.n	8008582 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008566:	f023 0304 	bic.w	r3, r3, #4
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	e009      	b.n	8008582 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800857c:	f023 0304 	bic.w	r3, r3, #4
 8008580:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008582:	2110      	movs	r1, #16
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7ff fe3d 	bl	8008204 <USB_FlushTxFifo>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff fe67 	bl	8008268 <USB_FlushRxFifo>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80085a4:	2300      	movs	r3, #0
 80085a6:	613b      	str	r3, [r7, #16]
 80085a8:	e015      	b.n	80085d6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085b6:	461a      	mov	r2, r3
 80085b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085bc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ca:	461a      	mov	r2, r3
 80085cc:	2300      	movs	r3, #0
 80085ce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	3301      	adds	r3, #1
 80085d4:	613b      	str	r3, [r7, #16]
 80085d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80085da:	461a      	mov	r2, r3
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	4293      	cmp	r3, r2
 80085e0:	d3e3      	bcc.n	80085aa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085ee:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a18      	ldr	r2, [pc, #96]	@ (8008654 <USB_HostInit+0x170>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d10b      	bne.n	8008610 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085fe:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a15      	ldr	r2, [pc, #84]	@ (8008658 <USB_HostInit+0x174>)
 8008604:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a14      	ldr	r2, [pc, #80]	@ (800865c <USB_HostInit+0x178>)
 800860a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800860e:	e009      	b.n	8008624 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2280      	movs	r2, #128	@ 0x80
 8008614:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a11      	ldr	r2, [pc, #68]	@ (8008660 <USB_HostInit+0x17c>)
 800861a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a11      	ldr	r2, [pc, #68]	@ (8008664 <USB_HostInit+0x180>)
 8008620:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008628:	2b00      	cmp	r3, #0
 800862a:	d105      	bne.n	8008638 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	f043 0210 	orr.w	r2, r3, #16
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	4b0a      	ldr	r3, [pc, #40]	@ (8008668 <USB_HostInit+0x184>)
 800863e:	4313      	orrs	r3, r2
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008644:	7dfb      	ldrb	r3, [r7, #23]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008650:	b004      	add	sp, #16
 8008652:	4770      	bx	lr
 8008654:	40040000 	.word	0x40040000
 8008658:	01000200 	.word	0x01000200
 800865c:	00e00300 	.word	0x00e00300
 8008660:	00600080 	.word	0x00600080
 8008664:	004000e0 	.word	0x004000e0
 8008668:	a3200008 	.word	0xa3200008

0800866c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80086a4:	4313      	orrs	r3, r2
 80086a6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d107      	bne.n	80086be <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086b4:	461a      	mov	r2, r3
 80086b6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80086ba:	6053      	str	r3, [r2, #4]
 80086bc:	e00c      	b.n	80086d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d107      	bne.n	80086d4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086ca:	461a      	mov	r2, r3
 80086cc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80086d0:	6053      	str	r3, [r2, #4]
 80086d2:	e001      	b.n	80086d8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80086f2:	2300      	movs	r3, #0
 80086f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008706:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008714:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008716:	2064      	movs	r0, #100	@ 0x64
 8008718:	f7f9 ff5e 	bl	80025d8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008728:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800872a:	200a      	movs	r0, #10
 800872c:	f7f9 ff54 	bl	80025d8 <HAL_Delay>

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	460b      	mov	r3, r1
 8008744:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800875e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d109      	bne.n	800877e <USB_DriveVbus+0x44>
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d106      	bne.n	800877e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008778:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800877c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008788:	d109      	bne.n	800879e <USB_DriveVbus+0x64>
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d106      	bne.n	800879e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800879c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	0c5b      	lsrs	r3, r3, #17
 80087ca:	f003 0303 	and.w	r3, r3, #3
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80087da:	b480      	push	{r7}
 80087dc:	b085      	sub	sp, #20
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	b29b      	uxth	r3, r3
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	4608      	mov	r0, r1
 8008806:	4611      	mov	r1, r2
 8008808:	461a      	mov	r2, r3
 800880a:	4603      	mov	r3, r0
 800880c:	70fb      	strb	r3, [r7, #3]
 800880e:	460b      	mov	r3, r1
 8008810:	70bb      	strb	r3, [r7, #2]
 8008812:	4613      	mov	r3, r2
 8008814:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	4413      	add	r3, r2
 8008826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800882a:	461a      	mov	r2, r3
 800882c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008830:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008832:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008836:	2b03      	cmp	r3, #3
 8008838:	d87c      	bhi.n	8008934 <USB_HC_Init+0x138>
 800883a:	a201      	add	r2, pc, #4	@ (adr r2, 8008840 <USB_HC_Init+0x44>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008851 	.word	0x08008851
 8008844:	080088f7 	.word	0x080088f7
 8008848:	08008851 	.word	0x08008851
 800884c:	080088b9 	.word	0x080088b9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	4413      	add	r3, r2
 8008858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800885c:	461a      	mov	r2, r3
 800885e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008862:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008864:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008868:	2b00      	cmp	r3, #0
 800886a:	da10      	bge.n	800888e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800886c:	78fb      	ldrb	r3, [r7, #3]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	4413      	add	r3, r2
 8008874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	78fa      	ldrb	r2, [r7, #3]
 800887c:	0151      	lsls	r1, r2, #5
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	440a      	add	r2, r1
 8008882:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800888a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800888c:	e055      	b.n	800893a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a6f      	ldr	r2, [pc, #444]	@ (8008a50 <USB_HC_Init+0x254>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d151      	bne.n	800893a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4413      	add	r3, r2
 800889e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	78fa      	ldrb	r2, [r7, #3]
 80088a6:	0151      	lsls	r1, r2, #5
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	440a      	add	r2, r1
 80088ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80088b4:	60d3      	str	r3, [r2, #12]
      break;
 80088b6:	e040      	b.n	800893a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c4:	461a      	mov	r2, r3
 80088c6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80088ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80088cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	da34      	bge.n	800893e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	78fa      	ldrb	r2, [r7, #3]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088f2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80088f4:	e023      	b.n	800893e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008902:	461a      	mov	r2, r3
 8008904:	f240 2325 	movw	r3, #549	@ 0x225
 8008908:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800890a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800890e:	2b00      	cmp	r3, #0
 8008910:	da17      	bge.n	8008942 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	4413      	add	r3, r2
 800891a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	78fa      	ldrb	r2, [r7, #3]
 8008922:	0151      	lsls	r1, r2, #5
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	440a      	add	r2, r1
 8008928:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800892c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008930:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008932:	e006      	b.n	8008942 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	77fb      	strb	r3, [r7, #31]
      break;
 8008938:	e004      	b.n	8008944 <USB_HC_Init+0x148>
      break;
 800893a:	bf00      	nop
 800893c:	e002      	b.n	8008944 <USB_HC_Init+0x148>
      break;
 800893e:	bf00      	nop
 8008940:	e000      	b.n	8008944 <USB_HC_Init+0x148>
      break;
 8008942:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	4413      	add	r3, r2
 800894c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008950:	461a      	mov	r2, r3
 8008952:	2300      	movs	r3, #0
 8008954:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	4413      	add	r3, r2
 800895e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	78fa      	ldrb	r2, [r7, #3]
 8008966:	0151      	lsls	r1, r2, #5
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	440a      	add	r2, r1
 800896c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008970:	f043 0302 	orr.w	r3, r3, #2
 8008974:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800897c:	699a      	ldr	r2, [r3, #24]
 800897e:	78fb      	ldrb	r3, [r7, #3]
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	2101      	movs	r1, #1
 8008986:	fa01 f303 	lsl.w	r3, r1, r3
 800898a:	6939      	ldr	r1, [r7, #16]
 800898c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008990:	4313      	orrs	r3, r2
 8008992:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80089a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	da03      	bge.n	80089b0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80089a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	e001      	b.n	80089b4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f7ff fef9 	bl	80087ac <USB_GetHostSpeed>
 80089ba:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80089bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d106      	bne.n	80089d2 <USB_HC_Init+0x1d6>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d003      	beq.n	80089d2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80089ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80089ce:	617b      	str	r3, [r7, #20]
 80089d0:	e001      	b.n	80089d6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80089d2:	2300      	movs	r3, #0
 80089d4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089d6:	787b      	ldrb	r3, [r7, #1]
 80089d8:	059b      	lsls	r3, r3, #22
 80089da:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80089de:	78bb      	ldrb	r3, [r7, #2]
 80089e0:	02db      	lsls	r3, r3, #11
 80089e2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089e6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80089e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80089ec:	049b      	lsls	r3, r3, #18
 80089ee:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80089f2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80089f4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80089f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80089fa:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	431a      	orrs	r2, r3
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	0151      	lsls	r1, r2, #5
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	440a      	add	r2, r1
 8008a0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008a10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a14:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008a16:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d003      	beq.n	8008a26 <USB_HC_Init+0x22a>
 8008a1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d10f      	bne.n	8008a46 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	0151      	lsls	r1, r2, #5
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	440a      	add	r2, r1
 8008a3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008a44:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008a46:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3720      	adds	r7, #32
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	40040000 	.word	0x40040000

08008a54 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08c      	sub	sp, #48	@ 0x30
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008a6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a70:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4a5d      	ldr	r2, [pc, #372]	@ (8008bec <USB_HC_StartXfer+0x198>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d12f      	bne.n	8008ada <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d11c      	bne.n	8008aba <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	7c9b      	ldrb	r3, [r3, #18]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d003      	beq.n	8008a90 <USB_HC_StartXfer+0x3c>
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	7c9b      	ldrb	r3, [r3, #18]
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d124      	bne.n	8008ada <USB_HC_StartXfer+0x86>
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	799b      	ldrb	r3, [r3, #6]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d120      	bne.n	8008ada <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	6a3a      	ldr	r2, [r7, #32]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ab6:	60d3      	str	r3, [r2, #12]
 8008ab8:	e00f      	b.n	8008ada <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	791b      	ldrb	r3, [r3, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10b      	bne.n	8008ada <USB_HC_StartXfer+0x86>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	795b      	ldrb	r3, [r3, #5]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d107      	bne.n	8008ada <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 fb6b 	bl	80091ac <USB_DoPing>
        return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e232      	b.n	8008f40 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	799b      	ldrb	r3, [r3, #6]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d158      	bne.n	8008b94 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	78db      	ldrb	r3, [r3, #3]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008aee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	8a92      	ldrh	r2, [r2, #20]
 8008af4:	fb03 f202 	mul.w	r2, r3, r2
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	61da      	str	r2, [r3, #28]
 8008afc:	e07c      	b.n	8008bf8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	7c9b      	ldrb	r3, [r3, #18]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d130      	bne.n	8008b68 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	2bbc      	cmp	r3, #188	@ 0xbc
 8008b0c:	d918      	bls.n	8008b40 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	8a9b      	ldrh	r3, [r3, #20]
 8008b12:	461a      	mov	r2, r3
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	69da      	ldr	r2, [r3, #28]
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d003      	beq.n	8008b30 <USB_HC_StartXfer+0xdc>
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d103      	bne.n	8008b38 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2202      	movs	r2, #2
 8008b34:	60da      	str	r2, [r3, #12]
 8008b36:	e05f      	b.n	8008bf8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	e05b      	b.n	8008bf8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	6a1a      	ldr	r2, [r3, #32]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d007      	beq.n	8008b60 <USB_HC_StartXfer+0x10c>
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d003      	beq.n	8008b60 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2204      	movs	r2, #4
 8008b5c:	60da      	str	r2, [r3, #12]
 8008b5e:	e04b      	b.n	8008bf8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2203      	movs	r2, #3
 8008b64:	60da      	str	r2, [r3, #12]
 8008b66:	e047      	b.n	8008bf8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008b68:	79fb      	ldrb	r3, [r7, #7]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d10d      	bne.n	8008b8a <USB_HC_StartXfer+0x136>
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	8a92      	ldrh	r2, [r2, #20]
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d907      	bls.n	8008b8a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008b7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	8a92      	ldrh	r2, [r2, #20]
 8008b80:	fb03 f202 	mul.w	r2, r3, r2
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	61da      	str	r2, [r3, #28]
 8008b88:	e036      	b.n	8008bf8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	6a1a      	ldr	r2, [r3, #32]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	61da      	str	r2, [r3, #28]
 8008b92:	e031      	b.n	8008bf8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6a1b      	ldr	r3, [r3, #32]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d018      	beq.n	8008bce <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	8a92      	ldrh	r2, [r2, #20]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	8a92      	ldrh	r2, [r2, #20]
 8008bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bb0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008bb2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008bb4:	8b7b      	ldrh	r3, [r7, #26]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d90b      	bls.n	8008bd2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008bba:	8b7b      	ldrh	r3, [r7, #26]
 8008bbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008bbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	8a92      	ldrh	r2, [r2, #20]
 8008bc4:	fb03 f202 	mul.w	r2, r3, r2
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	61da      	str	r2, [r3, #28]
 8008bcc:	e001      	b.n	8008bd2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	78db      	ldrb	r3, [r3, #3]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00a      	beq.n	8008bf0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008bda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	8a92      	ldrh	r2, [r2, #20]
 8008be0:	fb03 f202 	mul.w	r2, r3, r2
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	61da      	str	r2, [r3, #28]
 8008be8:	e006      	b.n	8008bf8 <USB_HC_StartXfer+0x1a4>
 8008bea:	bf00      	nop
 8008bec:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6a1a      	ldr	r2, [r3, #32]
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c02:	04d9      	lsls	r1, r3, #19
 8008c04:	4ba3      	ldr	r3, [pc, #652]	@ (8008e94 <USB_HC_StartXfer+0x440>)
 8008c06:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c08:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	7d9b      	ldrb	r3, [r3, #22]
 8008c0e:	075b      	lsls	r3, r3, #29
 8008c10:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c14:	69f9      	ldr	r1, [r7, #28]
 8008c16:	0148      	lsls	r0, r1, #5
 8008c18:	6a39      	ldr	r1, [r7, #32]
 8008c1a:	4401      	add	r1, r0
 8008c1c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c20:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c22:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d009      	beq.n	8008c3e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6999      	ldr	r1, [r3, #24]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c3a:	460a      	mov	r2, r1
 8008c3c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	bf0c      	ite	eq
 8008c4e:	2301      	moveq	r3, #1
 8008c50:	2300      	movne	r3, #0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69fa      	ldr	r2, [r7, #28]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	6a3a      	ldr	r2, [r7, #32]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008c74:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	7e7b      	ldrb	r3, [r7, #25]
 8008c86:	075b      	lsls	r3, r3, #29
 8008c88:	69f9      	ldr	r1, [r7, #28]
 8008c8a:	0148      	lsls	r0, r1, #5
 8008c8c:	6a39      	ldr	r1, [r7, #32]
 8008c8e:	4401      	add	r1, r0
 8008c90:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008c94:	4313      	orrs	r3, r2
 8008c96:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	799b      	ldrb	r3, [r3, #6]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	f040 80c3 	bne.w	8008e28 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	7c5b      	ldrb	r3, [r3, #17]
 8008ca6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008cac:	4313      	orrs	r3, r2
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	0151      	lsls	r1, r2, #5
 8008cb2:	6a3a      	ldr	r2, [r7, #32]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008cba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008cbe:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	6a3a      	ldr	r2, [r7, #32]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cda:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008cde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	79db      	ldrb	r3, [r3, #7]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d123      	bne.n	8008d30 <USB_HC_StartXfer+0x2dc>
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	78db      	ldrb	r3, [r3, #3]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d11f      	bne.n	8008d30 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	69fa      	ldr	r2, [r7, #28]
 8008d00:	0151      	lsls	r1, r2, #5
 8008d02:	6a3a      	ldr	r2, [r7, #32]
 8008d04:	440a      	add	r2, r1
 8008d06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d0e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	69fa      	ldr	r2, [r7, #28]
 8008d20:	0151      	lsls	r1, r2, #5
 8008d22:	6a3a      	ldr	r2, [r7, #32]
 8008d24:	440a      	add	r2, r1
 8008d26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d2e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	7c9b      	ldrb	r3, [r3, #18]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d003      	beq.n	8008d40 <USB_HC_StartXfer+0x2ec>
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	7c9b      	ldrb	r3, [r3, #18]
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d117      	bne.n	8008d70 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d113      	bne.n	8008d70 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	78db      	ldrb	r3, [r3, #3]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d10f      	bne.n	8008d70 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	0151      	lsls	r1, r2, #5
 8008d62:	6a3a      	ldr	r2, [r7, #32]
 8008d64:	440a      	add	r2, r1
 8008d66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d6e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	7c9b      	ldrb	r3, [r3, #18]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d162      	bne.n	8008e3e <USB_HC_StartXfer+0x3ea>
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	78db      	ldrb	r3, [r3, #3]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d15e      	bne.n	8008e3e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d858      	bhi.n	8008e3c <USB_HC_StartXfer+0x3e8>
 8008d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d90 <USB_HC_StartXfer+0x33c>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008da1 	.word	0x08008da1
 8008d94:	08008dc3 	.word	0x08008dc3
 8008d98:	08008de5 	.word	0x08008de5
 8008d9c:	08008e07 	.word	0x08008e07
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	6a3b      	ldr	r3, [r7, #32]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	0151      	lsls	r1, r2, #5
 8008db2:	6a3a      	ldr	r2, [r7, #32]
 8008db4:	440a      	add	r2, r1
 8008db6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dbe:	6053      	str	r3, [r2, #4]
          break;
 8008dc0:	e03d      	b.n	8008e3e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	6a3b      	ldr	r3, [r7, #32]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	0151      	lsls	r1, r2, #5
 8008dd4:	6a3a      	ldr	r2, [r7, #32]
 8008dd6:	440a      	add	r2, r1
 8008dd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ddc:	f043 030e 	orr.w	r3, r3, #14
 8008de0:	6053      	str	r3, [r2, #4]
          break;
 8008de2:	e02c      	b.n	8008e3e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	69fa      	ldr	r2, [r7, #28]
 8008df4:	0151      	lsls	r1, r2, #5
 8008df6:	6a3a      	ldr	r2, [r7, #32]
 8008df8:	440a      	add	r2, r1
 8008dfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e02:	6053      	str	r3, [r2, #4]
          break;
 8008e04:	e01b      	b.n	8008e3e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	0151      	lsls	r1, r2, #5
 8008e18:	6a3a      	ldr	r2, [r7, #32]
 8008e1a:	440a      	add	r2, r1
 8008e1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e24:	6053      	str	r3, [r2, #4]
          break;
 8008e26:	e00a      	b.n	8008e3e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e34:	461a      	mov	r2, r3
 8008e36:	2300      	movs	r3, #0
 8008e38:	6053      	str	r3, [r2, #4]
 8008e3a:	e000      	b.n	8008e3e <USB_HC_StartXfer+0x3ea>
          break;
 8008e3c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008e54:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	78db      	ldrb	r3, [r3, #3]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e64:	613b      	str	r3, [r7, #16]
 8008e66:	e003      	b.n	8008e70 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e6e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e76:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e84:	461a      	mov	r2, r3
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	e055      	b.n	8008f40 <USB_HC_StartXfer+0x4ec>
 8008e94:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	78db      	ldrb	r3, [r3, #3]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d14e      	bne.n	8008f3e <USB_HC_StartXfer+0x4ea>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d04a      	beq.n	8008f3e <USB_HC_StartXfer+0x4ea>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	79db      	ldrb	r3, [r3, #7]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d146      	bne.n	8008f3e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	7c9b      	ldrb	r3, [r3, #18]
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d831      	bhi.n	8008f1c <USB_HC_StartXfer+0x4c8>
 8008eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec0 <USB_HC_StartXfer+0x46c>)
 8008eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebe:	bf00      	nop
 8008ec0:	08008ed1 	.word	0x08008ed1
 8008ec4:	08008ef5 	.word	0x08008ef5
 8008ec8:	08008ed1 	.word	0x08008ed1
 8008ecc:	08008ef5 	.word	0x08008ef5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	3303      	adds	r3, #3
 8008ed6:	089b      	lsrs	r3, r3, #2
 8008ed8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008eda:	8afa      	ldrh	r2, [r7, #22]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d91c      	bls.n	8008f20 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	f043 0220 	orr.w	r2, r3, #32
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ef2:	e015      	b.n	8008f20 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	3303      	adds	r3, #3
 8008efa:	089b      	lsrs	r3, r3, #2
 8008efc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008efe:	8afa      	ldrh	r2, [r7, #22]
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d90a      	bls.n	8008f24 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	619a      	str	r2, [r3, #24]
        }
        break;
 8008f1a:	e003      	b.n	8008f24 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008f1c:	bf00      	nop
 8008f1e:	e002      	b.n	8008f26 <USB_HC_StartXfer+0x4d2>
        break;
 8008f20:	bf00      	nop
 8008f22:	e000      	b.n	8008f26 <USB_HC_StartXfer+0x4d2>
        break;
 8008f24:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6999      	ldr	r1, [r3, #24]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	785a      	ldrb	r2, [r3, #1]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2000      	movs	r0, #0
 8008f36:	9000      	str	r0, [sp, #0]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7ff f9c3 	bl	80082c4 <USB_WritePacket>
  }

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3728      	adds	r7, #40	@ 0x28
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	b29b      	uxth	r3, r3
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b089      	sub	sp, #36	@ 0x24
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	0c9b      	lsrs	r3, r3, #18
 8008f92:	f003 0303 	and.w	r3, r3, #3
 8008f96:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	0fdb      	lsrs	r3, r3, #31
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	0fdb      	lsrs	r3, r3, #31
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f003 0320 	and.w	r3, r3, #32
 8008fcc:	2b20      	cmp	r3, #32
 8008fce:	d10d      	bne.n	8008fec <USB_HC_Halt+0x82>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10a      	bne.n	8008fec <USB_HC_Halt+0x82>
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d002      	beq.n	8008fe8 <USB_HC_Halt+0x7e>
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b03      	cmp	r3, #3
 8008fe6:	d101      	bne.n	8008fec <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e0d8      	b.n	800919e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <USB_HC_Halt+0x8e>
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d173      	bne.n	80090e0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	0151      	lsls	r1, r2, #5
 800900a:	69fa      	ldr	r2, [r7, #28]
 800900c:	440a      	add	r2, r1
 800900e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009012:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009016:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d14a      	bne.n	80090ba <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009028:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800902c:	2b00      	cmp	r3, #0
 800902e:	d133      	bne.n	8009098 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	015a      	lsls	r2, r3, #5
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	4413      	add	r3, r2
 8009038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	69ba      	ldr	r2, [r7, #24]
 8009040:	0151      	lsls	r1, r2, #5
 8009042:	69fa      	ldr	r2, [r7, #28]
 8009044:	440a      	add	r2, r1
 8009046:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800904a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800904e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	4413      	add	r3, r2
 8009058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	0151      	lsls	r1, r2, #5
 8009062:	69fa      	ldr	r2, [r7, #28]
 8009064:	440a      	add	r2, r1
 8009066:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800906a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800906e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	3301      	adds	r3, #1
 8009074:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800907c:	d82e      	bhi.n	80090dc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	4413      	add	r3, r2
 8009086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009094:	d0ec      	beq.n	8009070 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009096:	e081      	b.n	800919c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	69fa      	ldr	r2, [r7, #28]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090b6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090b8:	e070      	b.n	800919c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	0151      	lsls	r1, r2, #5
 80090cc:	69fa      	ldr	r2, [r7, #28]
 80090ce:	440a      	add	r2, r1
 80090d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090da:	e05f      	b.n	800919c <USB_HC_Halt+0x232>
            break;
 80090dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090de:	e05d      	b.n	800919c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69ba      	ldr	r2, [r7, #24]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d133      	bne.n	8009178 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	4413      	add	r3, r2
 8009118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	440a      	add	r2, r1
 8009126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800912a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800912e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	4413      	add	r3, r2
 8009138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	440a      	add	r2, r1
 8009146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800914a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800914e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	3301      	adds	r3, #1
 8009154:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800915c:	d81d      	bhi.n	800919a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	4413      	add	r3, r2
 8009166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009170:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009174:	d0ec      	beq.n	8009150 <USB_HC_Halt+0x1e6>
 8009176:	e011      	b.n	800919c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	4413      	add	r3, r2
 8009180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	440a      	add	r2, r1
 800918e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009192:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	e000      	b.n	800919c <USB_HC_Halt+0x232>
          break;
 800919a:	bf00      	nop
    }
  }

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3724      	adds	r7, #36	@ 0x24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
	...

080091ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80091c0:	2301      	movs	r3, #1
 80091c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	04da      	lsls	r2, r3, #19
 80091c8:	4b15      	ldr	r3, [pc, #84]	@ (8009220 <USB_DoPing+0x74>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	0151      	lsls	r1, r2, #5
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	440a      	add	r2, r1
 80091d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80091f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	4413      	add	r3, r2
 8009206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800920a:	461a      	mov	r2, r3
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	1ff80000 	.word	0x1ff80000

08009224 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fe ff86 	bl	800814a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800923e:	2110      	movs	r1, #16
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7fe ffdf 	bl	8008204 <USB_FlushTxFifo>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff f809 	bl	8008268 <USB_FlushRxFifo>
 8009256:	4603      	mov	r3, r0
 8009258:	2b00      	cmp	r3, #0
 800925a:	d001      	beq.n	8009260 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009260:	2300      	movs	r3, #0
 8009262:	61bb      	str	r3, [r7, #24]
 8009264:	e01f      	b.n	80092a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	4413      	add	r3, r2
 800926e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800927c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009284:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800928c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	4413      	add	r3, r2
 8009296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800929a:	461a      	mov	r2, r3
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	3301      	adds	r3, #1
 80092a4:	61bb      	str	r3, [r7, #24]
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	2b0f      	cmp	r3, #15
 80092aa:	d9dc      	bls.n	8009266 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80092ac:	2300      	movs	r3, #0
 80092ae:	61bb      	str	r3, [r7, #24]
 80092b0:	e034      	b.n	800931c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80092d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092e6:	461a      	mov	r2, r3
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80092f8:	d80c      	bhi.n	8009314 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	4413      	add	r3, r2
 8009302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800930c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009310:	d0ec      	beq.n	80092ec <USB_StopHost+0xc8>
 8009312:	e000      	b.n	8009316 <USB_StopHost+0xf2>
        break;
 8009314:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	3301      	adds	r3, #1
 800931a:	61bb      	str	r3, [r7, #24]
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	2b0f      	cmp	r3, #15
 8009320:	d9c7      	bls.n	80092b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009328:	461a      	mov	r2, r3
 800932a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800932e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009336:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7fe fef5 	bl	8008128 <USB_EnableGlobalInt>

  return ret;
 800933e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009348:	b590      	push	{r4, r7, lr}
 800934a:	b089      	sub	sp, #36	@ 0x24
 800934c:	af04      	add	r7, sp, #16
 800934e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009350:	2301      	movs	r3, #1
 8009352:	2202      	movs	r2, #2
 8009354:	2102      	movs	r1, #2
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fcb7 	bl	8009cca <USBH_FindInterface>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009360:	7bfb      	ldrb	r3, [r7, #15]
 8009362:	2bff      	cmp	r3, #255	@ 0xff
 8009364:	d002      	beq.n	800936c <USBH_CDC_InterfaceInit+0x24>
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d901      	bls.n	8009370 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800936c:	2302      	movs	r3, #2
 800936e:	e13d      	b.n	80095ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009370:	7bfb      	ldrb	r3, [r7, #15]
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fc8c 	bl	8009c92 <USBH_SelectInterface>
 800937a:	4603      	mov	r3, r0
 800937c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009384:	2302      	movs	r3, #2
 8009386:	e131      	b.n	80095ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800938e:	2050      	movs	r0, #80	@ 0x50
 8009390:	f012 fbc4 	bl	801bb1c <malloc>
 8009394:	4603      	mov	r3, r0
 8009396:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80093a8:	2302      	movs	r3, #2
 80093aa:	e11f      	b.n	80095ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80093ac:	2250      	movs	r2, #80	@ 0x50
 80093ae:	2100      	movs	r1, #0
 80093b0:	68b8      	ldr	r0, [r7, #8]
 80093b2:	f012 ff3f 	bl	801c234 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	211a      	movs	r1, #26
 80093bc:	fb01 f303 	mul.w	r3, r1, r3
 80093c0:	4413      	add	r3, r2
 80093c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	b25b      	sxtb	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	da15      	bge.n	80093fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	211a      	movs	r1, #26
 80093d4:	fb01 f303 	mul.w	r3, r1, r3
 80093d8:	4413      	add	r3, r2
 80093da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80093de:	781a      	ldrb	r2, [r3, #0]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80093e4:	7bfb      	ldrb	r3, [r7, #15]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	211a      	movs	r1, #26
 80093ea:	fb01 f303 	mul.w	r3, r1, r3
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80093f4:	881a      	ldrh	r2, [r3, #0]
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f002 f904 	bl	800b60e <USBH_AllocPipe>
 8009406:	4603      	mov	r3, r0
 8009408:	461a      	mov	r2, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	7819      	ldrb	r1, [r3, #0]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	7858      	ldrb	r0, [r3, #1]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	8952      	ldrh	r2, [r2, #10]
 8009426:	9202      	str	r2, [sp, #8]
 8009428:	2203      	movs	r2, #3
 800942a:	9201      	str	r2, [sp, #4]
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4623      	mov	r3, r4
 8009430:	4602      	mov	r2, r0
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f002 f8bc 	bl	800b5b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2200      	movs	r2, #0
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f005 fbd5 	bl	800ebf0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009446:	2300      	movs	r3, #0
 8009448:	2200      	movs	r2, #0
 800944a:	210a      	movs	r1, #10
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fc3c 	bl	8009cca <USBH_FindInterface>
 8009452:	4603      	mov	r3, r0
 8009454:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009456:	7bfb      	ldrb	r3, [r7, #15]
 8009458:	2bff      	cmp	r3, #255	@ 0xff
 800945a:	d002      	beq.n	8009462 <USBH_CDC_InterfaceInit+0x11a>
 800945c:	7bfb      	ldrb	r3, [r7, #15]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d901      	bls.n	8009466 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009462:	2302      	movs	r3, #2
 8009464:	e0c2      	b.n	80095ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	211a      	movs	r1, #26
 800946c:	fb01 f303 	mul.w	r3, r1, r3
 8009470:	4413      	add	r3, r2
 8009472:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	b25b      	sxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	da16      	bge.n	80094ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	211a      	movs	r1, #26
 8009484:	fb01 f303 	mul.w	r3, r1, r3
 8009488:	4413      	add	r3, r2
 800948a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800948e:	781a      	ldrb	r2, [r3, #0]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	211a      	movs	r1, #26
 800949a:	fb01 f303 	mul.w	r3, r1, r3
 800949e:	4413      	add	r3, r2
 80094a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80094a4:	881a      	ldrh	r2, [r3, #0]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	835a      	strh	r2, [r3, #26]
 80094aa:	e015      	b.n	80094d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	211a      	movs	r1, #26
 80094b2:	fb01 f303 	mul.w	r3, r1, r3
 80094b6:	4413      	add	r3, r2
 80094b8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80094bc:	781a      	ldrb	r2, [r3, #0]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	211a      	movs	r1, #26
 80094c8:	fb01 f303 	mul.w	r3, r1, r3
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80094d2:	881a      	ldrh	r2, [r3, #0]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	211a      	movs	r1, #26
 80094de:	fb01 f303 	mul.w	r3, r1, r3
 80094e2:	4413      	add	r3, r2
 80094e4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	b25b      	sxtb	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da16      	bge.n	800951e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	211a      	movs	r1, #26
 80094f6:	fb01 f303 	mul.w	r3, r1, r3
 80094fa:	4413      	add	r3, r2
 80094fc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009500:	781a      	ldrb	r2, [r3, #0]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009506:	7bfb      	ldrb	r3, [r7, #15]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	211a      	movs	r1, #26
 800950c:	fb01 f303 	mul.w	r3, r1, r3
 8009510:	4413      	add	r3, r2
 8009512:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009516:	881a      	ldrh	r2, [r3, #0]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	835a      	strh	r2, [r3, #26]
 800951c:	e015      	b.n	800954a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	211a      	movs	r1, #26
 8009524:	fb01 f303 	mul.w	r3, r1, r3
 8009528:	4413      	add	r3, r2
 800952a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800952e:	781a      	ldrb	r2, [r3, #0]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	211a      	movs	r1, #26
 800953a:	fb01 f303 	mul.w	r3, r1, r3
 800953e:	4413      	add	r3, r2
 8009540:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009544:	881a      	ldrh	r2, [r3, #0]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	7b9b      	ldrb	r3, [r3, #14]
 800954e:	4619      	mov	r1, r3
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f002 f85c 	bl	800b60e <USBH_AllocPipe>
 8009556:	4603      	mov	r3, r0
 8009558:	461a      	mov	r2, r3
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	7bdb      	ldrb	r3, [r3, #15]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f002 f852 	bl	800b60e <USBH_AllocPipe>
 800956a:	4603      	mov	r3, r0
 800956c:	461a      	mov	r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	7b59      	ldrb	r1, [r3, #13]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	7b98      	ldrb	r0, [r3, #14]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	8b12      	ldrh	r2, [r2, #24]
 800958a:	9202      	str	r2, [sp, #8]
 800958c:	2202      	movs	r2, #2
 800958e:	9201      	str	r2, [sp, #4]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4623      	mov	r3, r4
 8009594:	4602      	mov	r2, r0
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f002 f80a 	bl	800b5b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	7b19      	ldrb	r1, [r3, #12]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	7bd8      	ldrb	r0, [r3, #15]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	8b52      	ldrh	r2, [r2, #26]
 80095b4:	9202      	str	r2, [sp, #8]
 80095b6:	2202      	movs	r2, #2
 80095b8:	9201      	str	r2, [sp, #4]
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	4623      	mov	r3, r4
 80095be:	4602      	mov	r2, r0
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 fff5 	bl	800b5b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	7b5b      	ldrb	r3, [r3, #13]
 80095d2:	2200      	movs	r2, #0
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f005 fb0a 	bl	800ebf0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	7b1b      	ldrb	r3, [r3, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f005 fb03 	bl	800ebf0 <USBH_LL_SetToggle>

  return USBH_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd90      	pop	{r4, r7, pc}

080095f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00e      	beq.n	800962c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 ffea 	bl	800b5ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f002 f815 	bl	800b650 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	7b1b      	ldrb	r3, [r3, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00e      	beq.n	8009652 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	7b1b      	ldrb	r3, [r3, #12]
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f001 ffd7 	bl	800b5ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	7b1b      	ldrb	r3, [r3, #12]
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f002 f802 	bl	800b650 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	7b5b      	ldrb	r3, [r3, #13]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00e      	beq.n	8009678 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	7b5b      	ldrb	r3, [r3, #13]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 ffc4 	bl	800b5ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	7b5b      	ldrb	r3, [r3, #13]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 ffef 	bl	800b650 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	4618      	mov	r0, r3
 800968e:	f012 fa4d 	bl	801bb2c <free>
    phost->pActiveClass->pData = 0U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009698:	2200      	movs	r2, #0
 800969a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3340      	adds	r3, #64	@ 0x40
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f8b1 	bl	8009826 <GetLineCoding>
 80096c4:	4603      	mov	r3, r0
 80096c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d105      	bne.n	80096da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096d4:	2102      	movs	r1, #2
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80096da:	7afb      	ldrb	r3, [r7, #11]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80096ec:	2301      	movs	r3, #1
 80096ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009704:	2b04      	cmp	r3, #4
 8009706:	d877      	bhi.n	80097f8 <USBH_CDC_Process+0x114>
 8009708:	a201      	add	r2, pc, #4	@ (adr r2, 8009710 <USBH_CDC_Process+0x2c>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	08009725 	.word	0x08009725
 8009714:	0800972b 	.word	0x0800972b
 8009718:	0800975b 	.word	0x0800975b
 800971c:	080097cf 	.word	0x080097cf
 8009720:	080097dd 	.word	0x080097dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	73fb      	strb	r3, [r7, #15]
      break;
 8009728:	e06d      	b.n	8009806 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f897 	bl	8009864 <SetLineCoding>
 8009736:	4603      	mov	r3, r0
 8009738:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d104      	bne.n	800974a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009748:	e058      	b.n	80097fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800974a:	7bbb      	ldrb	r3, [r7, #14]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d055      	beq.n	80097fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2204      	movs	r2, #4
 8009754:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009758:	e050      	b.n	80097fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	3340      	adds	r3, #64	@ 0x40
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f860 	bl	8009826 <GetLineCoding>
 8009766:	4603      	mov	r3, r0
 8009768:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d126      	bne.n	80097be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009782:	791b      	ldrb	r3, [r3, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d13b      	bne.n	8009800 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009792:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009794:	429a      	cmp	r2, r3
 8009796:	d133      	bne.n	8009800 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d12b      	bne.n	8009800 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d124      	bne.n	8009800 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f96a 	bl	8009a90 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80097bc:	e020      	b.n	8009800 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d01d      	beq.n	8009800 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2204      	movs	r2, #4
 80097c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80097cc:	e018      	b.n	8009800 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f867 	bl	80098a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f8e6 	bl	80099a6 <CDC_ProcessReception>
      break;
 80097da:	e014      	b.n	8009806 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80097dc:	2100      	movs	r1, #0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f001 f8f8 	bl	800a9d4 <USBH_ClrFeature>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10a      	bne.n	8009804 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80097f6:	e005      	b.n	8009804 <USBH_CDC_Process+0x120>

    default:
      break;
 80097f8:	bf00      	nop
 80097fa:	e004      	b.n	8009806 <USBH_CDC_Process+0x122>
      break;
 80097fc:	bf00      	nop
 80097fe:	e002      	b.n	8009806 <USBH_CDC_Process+0x122>
      break;
 8009800:	bf00      	nop
 8009802:	e000      	b.n	8009806 <USBH_CDC_Process+0x122>
      break;
 8009804:	bf00      	nop

  }

  return status;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr

08009826 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b082      	sub	sp, #8
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	22a1      	movs	r2, #161	@ 0xa1
 8009834:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2221      	movs	r2, #33	@ 0x21
 800983a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2207      	movs	r2, #7
 800984c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2207      	movs	r2, #7
 8009852:	4619      	mov	r1, r3
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f001 fbf1 	bl	800b03c <USBH_CtlReq>
 800985a:	4603      	mov	r3, r0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2221      	movs	r2, #33	@ 0x21
 8009872:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2207      	movs	r2, #7
 800988a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2207      	movs	r2, #7
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 fbd2 	bl	800b03c <USBH_CtlReq>
 8009898:	4603      	mov	r3, r0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b086      	sub	sp, #24
 80098a6:	af02      	add	r7, sp, #8
 80098a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098b0:	69db      	ldr	r3, [r3, #28]
 80098b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098b4:	2300      	movs	r3, #0
 80098b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d002      	beq.n	80098c8 <CDC_ProcessTransmission+0x26>
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d023      	beq.n	800990e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80098c6:	e06a      	b.n	800999e <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	8b12      	ldrh	r2, [r2, #24]
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d90b      	bls.n	80098ec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	69d9      	ldr	r1, [r3, #28]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	8b1a      	ldrh	r2, [r3, #24]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	7b5b      	ldrb	r3, [r3, #13]
 80098e0:	2001      	movs	r0, #1
 80098e2:	9000      	str	r0, [sp, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f001 fe20 	bl	800b52a <USBH_BulkSendData>
 80098ea:	e00b      	b.n	8009904 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	7b5b      	ldrb	r3, [r3, #13]
 80098fa:	2001      	movs	r0, #1
 80098fc:	9000      	str	r0, [sp, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 fe13 	bl	800b52a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2202      	movs	r2, #2
 8009908:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800990c:	e047      	b.n	800999e <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	7b5b      	ldrb	r3, [r3, #13]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f005 f941 	bl	800eb9c <USBH_LL_GetURBState>
 800991a:	4603      	mov	r3, r0
 800991c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800991e:	7afb      	ldrb	r3, [r7, #11]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d12e      	bne.n	8009982 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	8b12      	ldrh	r2, [r2, #24]
 800992c:	4293      	cmp	r3, r2
 800992e:	d90e      	bls.n	800994e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	8b12      	ldrh	r2, [r2, #24]
 8009938:	1a9a      	subs	r2, r3, r2
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	69db      	ldr	r3, [r3, #28]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	8b12      	ldrh	r2, [r2, #24]
 8009946:	441a      	add	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	61da      	str	r2, [r3, #28]
 800994c:	e002      	b.n	8009954 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009958:	2b00      	cmp	r3, #0
 800995a:	d004      	beq.n	8009966 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009964:	e006      	b.n	8009974 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f87a 	bl	8009a68 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009974:	2300      	movs	r3, #0
 8009976:	2200      	movs	r2, #0
 8009978:	2104      	movs	r1, #4
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 feb6 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 8009980:	e00c      	b.n	800999c <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8009982:	7afb      	ldrb	r3, [r7, #11]
 8009984:	2b02      	cmp	r3, #2
 8009986:	d109      	bne.n	800999c <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009990:	2300      	movs	r3, #0
 8009992:	2200      	movs	r2, #0
 8009994:	2104      	movs	r1, #4
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fea8 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800999c:	bf00      	nop
  }
}
 800999e:	bf00      	nop
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b086      	sub	sp, #24
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099b8:	2300      	movs	r3, #0
 80099ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d002      	beq.n	80099cc <CDC_ProcessReception+0x26>
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	d00e      	beq.n	80099e8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80099ca:	e049      	b.n	8009a60 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	6a19      	ldr	r1, [r3, #32]
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	8b5a      	ldrh	r2, [r3, #26]
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	7b1b      	ldrb	r3, [r3, #12]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 fdcb 	bl	800b574 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2204      	movs	r2, #4
 80099e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80099e6:	e03b      	b.n	8009a60 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	7b1b      	ldrb	r3, [r3, #12]
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f005 f8d4 	bl	800eb9c <USBH_LL_GetURBState>
 80099f4:	4603      	mov	r3, r0
 80099f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80099f8:	7cfb      	ldrb	r3, [r7, #19]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d12f      	bne.n	8009a5e <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	7b1b      	ldrb	r3, [r3, #12]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f005 f849 	bl	800ea9c <USBH_LL_GetLastXferSize>
 8009a0a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d016      	beq.n	8009a44 <CDC_ProcessReception+0x9e>
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	8b5b      	ldrh	r3, [r3, #26]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d110      	bne.n	8009a44 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	1ad2      	subs	r2, r2, r3
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	6a1a      	ldr	r2, [r3, #32]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	441a      	add	r2, r3
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2203      	movs	r2, #3
 8009a3e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8009a42:	e006      	b.n	8009a52 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f815 	bl	8009a7c <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009a52:	2300      	movs	r3, #0
 8009a54:	2200      	movs	r2, #0
 8009a56:	2104      	movs	r1, #4
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fe47 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 8009a5e:	bf00      	nop
  }
}
 8009a60:	bf00      	nop
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e044      	b.n	8009b46 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	79fa      	ldrb	r2, [r7, #7]
 8009ac0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f841 	bl	8009b5c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2104      	movs	r1, #4
 8009b0c:	2010      	movs	r0, #16
 8009b0e:	f001 ff0c 	bl	800b92a <osMessageQueueNew>
 8009b12:	4602      	mov	r2, r0
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b50 <USBH_Init+0xac>)
 8009b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8009b54 <USBH_Init+0xb0>)
 8009b1e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8009b20:	4b0b      	ldr	r3, [pc, #44]	@ (8009b50 <USBH_Init+0xac>)
 8009b22:	2280      	movs	r2, #128	@ 0x80
 8009b24:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8009b26:	4b0a      	ldr	r3, [pc, #40]	@ (8009b50 <USBH_Init+0xac>)
 8009b28:	2218      	movs	r2, #24
 8009b2a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009b2c:	4a08      	ldr	r2, [pc, #32]	@ (8009b50 <USBH_Init+0xac>)
 8009b2e:	68f9      	ldr	r1, [r7, #12]
 8009b30:	4809      	ldr	r0, [pc, #36]	@ (8009b58 <USBH_Init+0xb4>)
 8009b32:	f001 fe4d 	bl	800b7d0 <osThreadNew>
 8009b36:	4602      	mov	r2, r0
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f004 fef8 	bl	800e934 <USBH_LL_Init>

  return USBH_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20004a64 	.word	0x20004a64
 8009b54:	0801d224 	.word	0x0801d224
 8009b58:	0800a735 	.word	0x0800a735

08009b5c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009b64:	2300      	movs	r3, #0
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	e009      	b.n	8009b7e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	33e0      	adds	r3, #224	@ 0xe0
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	2200      	movs	r2, #0
 8009b76:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b0f      	cmp	r3, #15
 8009b82:	d9f2      	bls.n	8009b6a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009b84:	2300      	movs	r3, #0
 8009b86:	60fb      	str	r3, [r7, #12]
 8009b88:	e009      	b.n	8009b9e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009b94:	2200      	movs	r2, #0
 8009b96:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	60fb      	str	r3, [r7, #12]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ba4:	d3f1      	bcc.n	8009b8a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2240      	movs	r2, #64	@ 0x40
 8009bca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	331c      	adds	r3, #28
 8009bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f012 fb19 	bl	801c234 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f012 fb10 	bl	801c234 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009c1a:	2212      	movs	r2, #18
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f012 fb08 	bl	801c234 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009c2a:	223e      	movs	r2, #62	@ 0x3e
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f012 fb00 	bl	801c234 <memset>

  return USBH_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b085      	sub	sp, #20
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d016      	beq.n	8009c80 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10e      	bne.n	8009c7a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009c62:	1c59      	adds	r1, r3, #1
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	33de      	adds	r3, #222	@ 0xde
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
 8009c78:	e004      	b.n	8009c84 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	73fb      	strb	r3, [r7, #15]
 8009c7e:	e001      	b.n	8009c84 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009c80:	2302      	movs	r3, #2
 8009c82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d204      	bcs.n	8009cb8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	78fa      	ldrb	r2, [r7, #3]
 8009cb2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009cb6:	e001      	b.n	8009cbc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009cb8:	2302      	movs	r3, #2
 8009cba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3714      	adds	r7, #20
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr

08009cca <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009cca:	b480      	push	{r7}
 8009ccc:	b087      	sub	sp, #28
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	4608      	mov	r0, r1
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	4603      	mov	r3, r0
 8009cda:	70fb      	strb	r3, [r7, #3]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70bb      	strb	r3, [r7, #2]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009cf2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009cf4:	e025      	b.n	8009d42 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
 8009cf8:	221a      	movs	r2, #26
 8009cfa:	fb02 f303 	mul.w	r3, r2, r3
 8009cfe:	3308      	adds	r3, #8
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4413      	add	r3, r2
 8009d04:	3302      	adds	r3, #2
 8009d06:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	795b      	ldrb	r3, [r3, #5]
 8009d0c:	78fa      	ldrb	r2, [r7, #3]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d002      	beq.n	8009d18 <USBH_FindInterface+0x4e>
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	2bff      	cmp	r3, #255	@ 0xff
 8009d16:	d111      	bne.n	8009d3c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d1c:	78ba      	ldrb	r2, [r7, #2]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d002      	beq.n	8009d28 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d22:	78bb      	ldrb	r3, [r7, #2]
 8009d24:	2bff      	cmp	r3, #255	@ 0xff
 8009d26:	d109      	bne.n	8009d3c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d2c:	787a      	ldrb	r2, [r7, #1]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d002      	beq.n	8009d38 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d32:	787b      	ldrb	r3, [r7, #1]
 8009d34:	2bff      	cmp	r3, #255	@ 0xff
 8009d36:	d101      	bne.n	8009d3c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
 8009d3a:	e006      	b.n	8009d4a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d9d6      	bls.n	8009cf6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009d48:	23ff      	movs	r3, #255	@ 0xff
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	371c      	adds	r7, #28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b082      	sub	sp, #8
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f004 fe24 	bl	800e9ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009d64:	2101      	movs	r1, #1
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f004 ff2b 	bl	800ebc2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af04      	add	r7, sp, #16
 8009d7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009d80:	2302      	movs	r3, #2
 8009d82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d102      	bne.n	8009d9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2203      	movs	r2, #3
 8009d98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b0b      	cmp	r3, #11
 8009da2:	f200 81f5 	bhi.w	800a190 <USBH_Process+0x418>
 8009da6:	a201      	add	r2, pc, #4	@ (adr r2, 8009dac <USBH_Process+0x34>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009ddd 	.word	0x08009ddd
 8009db0:	08009e1b 	.word	0x08009e1b
 8009db4:	08009e91 	.word	0x08009e91
 8009db8:	0800a11f 	.word	0x0800a11f
 8009dbc:	0800a191 	.word	0x0800a191
 8009dc0:	08009f3d 	.word	0x08009f3d
 8009dc4:	0800a0b9 	.word	0x0800a0b9
 8009dc8:	08009f7f 	.word	0x08009f7f
 8009dcc:	08009fab 	.word	0x08009fab
 8009dd0:	08009fd3 	.word	0x08009fd3
 8009dd4:	0800a021 	.word	0x0800a021
 8009dd8:	0800a107 	.word	0x0800a107
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 81d5 	beq.w	800a194 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009df0:	20c8      	movs	r0, #200	@ 0xc8
 8009df2:	f004 ff30 	bl	800ec56 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f004 fe35 	bl	800ea66 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	2200      	movs	r2, #0
 8009e10:	2101      	movs	r1, #1
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fc6a 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009e18:	e1bc      	b.n	800a194 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d107      	bne.n	8009e36 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2202      	movs	r2, #2
 8009e32:	701a      	strb	r2, [r3, #0]
 8009e34:	e025      	b.n	8009e82 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009e3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e40:	d914      	bls.n	8009e6c <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009e48:	3301      	adds	r3, #1
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d903      	bls.n	8009e64 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	220d      	movs	r2, #13
 8009e60:	701a      	strb	r2, [r3, #0]
 8009e62:	e00e      	b.n	8009e82 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]
 8009e6a:	e00a      	b.n	8009e82 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009e72:	f103 020a 	add.w	r2, r3, #10
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009e7c:	200a      	movs	r0, #10
 8009e7e:	f004 feea 	bl	800ec56 <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8009e82:	2300      	movs	r3, #0
 8009e84:	2200      	movs	r2, #0
 8009e86:	2101      	movs	r1, #1
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fc2f 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009e8e:	e188      	b.n	800a1a2 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d005      	beq.n	8009ea6 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ea0:	2104      	movs	r1, #4
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009ea6:	2064      	movs	r0, #100	@ 0x64
 8009ea8:	f004 fed5 	bl	800ec56 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f004 fdb3 	bl	800ea18 <USBH_LL_GetSpeed>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2205      	movs	r2, #5
 8009ec0:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 fba2 	bl	800b60e <USBH_AllocPipe>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	461a      	mov	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009ed2:	2180      	movs	r1, #128	@ 0x80
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 fb9a 	bl	800b60e <USBH_AllocPipe>
 8009eda:	4603      	mov	r3, r0
 8009edc:	461a      	mov	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	7919      	ldrb	r1, [r3, #4]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ef6:	9202      	str	r2, [sp, #8]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	9201      	str	r2, [sp, #4]
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	4603      	mov	r3, r0
 8009f00:	2280      	movs	r2, #128	@ 0x80
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 fb54 	bl	800b5b0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7959      	ldrb	r1, [r3, #5]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f1c:	9202      	str	r2, [sp, #8]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	9201      	str	r2, [sp, #4]
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	4603      	mov	r3, r0
 8009f26:	2200      	movs	r2, #0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 fb41 	bl	800b5b0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8009f2e:	2300      	movs	r3, #0
 8009f30:	2200      	movs	r2, #0
 8009f32:	2101      	movs	r1, #1
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fbd9 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009f3a:	e132      	b.n	800a1a2 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f935 	bl	800a1ac <USBH_HandleEnum>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f040 8124 	bne.w	800a198 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d103      	bne.n	8009f6a <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2208      	movs	r2, #8
 8009f66:	701a      	strb	r2, [r3, #0]
 8009f68:	e002      	b.n	8009f70 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2207      	movs	r2, #7
 8009f6e:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8009f70:	2300      	movs	r3, #0
 8009f72:	2200      	movs	r2, #0
 8009f74:	2105      	movs	r1, #5
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fbb8 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009f7c:	e10c      	b.n	800a198 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 8109 	beq.w	800a19c <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f90:	2101      	movs	r1, #1
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2208      	movs	r2, #8
 8009f9a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2105      	movs	r1, #5
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fba2 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8009fa8:	e0f8      	b.n	800a19c <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 fcc7 	bl	800a946 <USBH_SetCfg>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d102      	bne.n	8009fc4 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2209      	movs	r2, #9
 8009fc2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2101      	movs	r1, #1
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fb8e 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009fd0:	e0e7      	b.n	800a1a2 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009fd8:	f003 0320 	and.w	r3, r3, #32
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d015      	beq.n	800a00c <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fcd2 	bl	800a98c <USBH_SetFeature>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d103      	bne.n	8009ffc <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	220a      	movs	r2, #10
 8009ff8:	701a      	strb	r2, [r3, #0]
 8009ffa:	e00a      	b.n	800a012 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b03      	cmp	r3, #3
 800a002:	d106      	bne.n	800a012 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	220a      	movs	r2, #10
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	e002      	b.n	800a012 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	220a      	movs	r2, #10
 800a010:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a012:	2300      	movs	r3, #0
 800a014:	2200      	movs	r2, #0
 800a016:	2101      	movs	r1, #1
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fb67 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a01e:	e0c0      	b.n	800a1a2 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a026:	2b00      	cmp	r3, #0
 800a028:	d03f      	beq.n	800a0aa <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a032:	2300      	movs	r3, #0
 800a034:	73fb      	strb	r3, [r7, #15]
 800a036:	e016      	b.n	800a066 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a038:	7bfa      	ldrb	r2, [r7, #15]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	32de      	adds	r2, #222	@ 0xde
 800a03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a042:	791a      	ldrb	r2, [r3, #4]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d108      	bne.n	800a060 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a04e:	7bfa      	ldrb	r2, [r7, #15]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	32de      	adds	r2, #222	@ 0xde
 800a054:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a05e:	e005      	b.n	800a06c <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	3301      	adds	r3, #1
 800a064:	73fb      	strb	r3, [r7, #15]
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0e5      	beq.n	800a038 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a072:	2b00      	cmp	r3, #0
 800a074:	d016      	beq.n	800a0a4 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d109      	bne.n	800a09c <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2206      	movs	r2, #6
 800a08c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a094:	2103      	movs	r1, #3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	4798      	blx	r3
 800a09a:	e006      	b.n	800a0aa <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	220d      	movs	r2, #13
 800a0a0:	701a      	strb	r2, [r3, #0]
 800a0a2:	e002      	b.n	800a0aa <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	220d      	movs	r2, #13
 800a0a8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2105      	movs	r1, #5
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fb1b 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a0b6:	e074      	b.n	800a1a2 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d017      	beq.n	800a0f2 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	4798      	blx	r3
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d103      	bne.n	800a0e2 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	220b      	movs	r2, #11
 800a0de:	701a      	strb	r2, [r3, #0]
 800a0e0:	e00a      	b.n	800a0f8 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d106      	bne.n	800a0f8 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	220d      	movs	r2, #13
 800a0ee:	701a      	strb	r2, [r3, #0]
 800a0f0:	e002      	b.n	800a0f8 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	220d      	movs	r2, #13
 800a0f6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2105      	movs	r1, #5
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 faf4 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a104:	e04d      	b.n	800a1a2 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d047      	beq.n	800a1a0 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	4798      	blx	r3
      }
      break;
 800a11c:	e040      	b.n	800a1a0 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f7ff fd18 	bl	8009b5c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a132:	2b00      	cmp	r3, #0
 800a134:	d009      	beq.n	800a14a <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a150:	2b00      	cmp	r3, #0
 800a152:	d005      	beq.n	800a160 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a15a:	2105      	movs	r1, #5
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d107      	bne.n	800a17c <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff fdee 	bl	8009d56 <USBH_Start>
 800a17a:	e002      	b.n	800a182 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f004 fc15 	bl	800e9ac <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a182:	2300      	movs	r3, #0
 800a184:	2200      	movs	r2, #0
 800a186:	2101      	movs	r1, #1
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 faaf 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a18e:	e008      	b.n	800a1a2 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800a190:	bf00      	nop
 800a192:	e006      	b.n	800a1a2 <USBH_Process+0x42a>
      break;
 800a194:	bf00      	nop
 800a196:	e004      	b.n	800a1a2 <USBH_Process+0x42a>
      break;
 800a198:	bf00      	nop
 800a19a:	e002      	b.n	800a1a2 <USBH_Process+0x42a>
    break;
 800a19c:	bf00      	nop
 800a19e:	e000      	b.n	800a1a2 <USBH_Process+0x42a>
      break;
 800a1a0:	bf00      	nop
  }
  return USBH_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b088      	sub	sp, #32
 800a1b0:	af04      	add	r7, sp, #16
 800a1b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	785b      	ldrb	r3, [r3, #1]
 800a1c0:	2b07      	cmp	r3, #7
 800a1c2:	f200 81db 	bhi.w	800a57c <USBH_HandleEnum+0x3d0>
 800a1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1cc <USBH_HandleEnum+0x20>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a1ed 	.word	0x0800a1ed
 800a1d0:	0800a2a7 	.word	0x0800a2a7
 800a1d4:	0800a311 	.word	0x0800a311
 800a1d8:	0800a39b 	.word	0x0800a39b
 800a1dc:	0800a405 	.word	0x0800a405
 800a1e0:	0800a475 	.word	0x0800a475
 800a1e4:	0800a4df 	.word	0x0800a4df
 800a1e8:	0800a53d 	.word	0x0800a53d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a1ec:	2108      	movs	r1, #8
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fac6 	bl	800a780 <USBH_Get_DevDesc>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1f8:	7bbb      	ldrb	r3, [r7, #14]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d12e      	bne.n	800a25c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	7919      	ldrb	r1, [r3, #4]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a222:	9202      	str	r2, [sp, #8]
 800a224:	2200      	movs	r2, #0
 800a226:	9201      	str	r2, [sp, #4]
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	4603      	mov	r3, r0
 800a22c:	2280      	movs	r2, #128	@ 0x80
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f001 f9be 	bl	800b5b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	7959      	ldrb	r1, [r3, #5]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a248:	9202      	str	r2, [sp, #8]
 800a24a:	2200      	movs	r2, #0
 800a24c:	9201      	str	r2, [sp, #4]
 800a24e:	9300      	str	r3, [sp, #0]
 800a250:	4603      	mov	r3, r0
 800a252:	2200      	movs	r2, #0
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 f9ab 	bl	800b5b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a25a:	e191      	b.n	800a580 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a25c:	7bbb      	ldrb	r3, [r7, #14]
 800a25e:	2b03      	cmp	r3, #3
 800a260:	f040 818e 	bne.w	800a580 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a26a:	3301      	adds	r3, #1
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d903      	bls.n	800a286 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	220d      	movs	r2, #13
 800a282:	701a      	strb	r2, [r3, #0]
      break;
 800a284:	e17c      	b.n	800a580 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	795b      	ldrb	r3, [r3, #5]
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f001 f9df 	bl	800b650 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	791b      	ldrb	r3, [r3, #4]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f001 f9d9 	bl	800b650 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	701a      	strb	r2, [r3, #0]
      break;
 800a2a4:	e16c      	b.n	800a580 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a2a6:	2112      	movs	r1, #18
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fa69 	bl	800a780 <USBH_Get_DevDesc>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d103      	bne.n	800a2c0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a2be:	e161      	b.n	800a584 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	f040 815e 	bne.w	800a584 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d903      	bls.n	800a2ea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	220d      	movs	r2, #13
 800a2e6:	701a      	strb	r2, [r3, #0]
      break;
 800a2e8:	e14c      	b.n	800a584 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	795b      	ldrb	r3, [r3, #5]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 f9ad 	bl	800b650 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	791b      	ldrb	r3, [r3, #4]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f001 f9a7 	bl	800b650 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]
      break;
 800a30e:	e139      	b.n	800a584 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a310:	2101      	movs	r1, #1
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 faf3 	bl	800a8fe <USBH_SetAddress>
 800a318:	4603      	mov	r3, r0
 800a31a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a31c:	7bbb      	ldrb	r3, [r7, #14]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d130      	bne.n	800a384 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a322:	2002      	movs	r0, #2
 800a324:	f004 fc97 	bl	800ec56 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2203      	movs	r2, #3
 800a334:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	7919      	ldrb	r1, [r3, #4]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a34a:	9202      	str	r2, [sp, #8]
 800a34c:	2200      	movs	r2, #0
 800a34e:	9201      	str	r2, [sp, #4]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	4603      	mov	r3, r0
 800a354:	2280      	movs	r2, #128	@ 0x80
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 f92a 	bl	800b5b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7959      	ldrb	r1, [r3, #5]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a370:	9202      	str	r2, [sp, #8]
 800a372:	2200      	movs	r2, #0
 800a374:	9201      	str	r2, [sp, #4]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	4603      	mov	r3, r0
 800a37a:	2200      	movs	r2, #0
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f001 f917 	bl	800b5b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a382:	e101      	b.n	800a588 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	2b03      	cmp	r3, #3
 800a388:	f040 80fe 	bne.w	800a588 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	220d      	movs	r2, #13
 800a390:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	705a      	strb	r2, [r3, #1]
      break;
 800a398:	e0f6      	b.n	800a588 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a39a:	2109      	movs	r1, #9
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fa1b 	bl	800a7d8 <USBH_Get_CfgDesc>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3a6:	7bbb      	ldrb	r3, [r7, #14]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d103      	bne.n	800a3b4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2204      	movs	r2, #4
 800a3b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3b2:	e0eb      	b.n	800a58c <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3b4:	7bbb      	ldrb	r3, [r7, #14]
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	f040 80e8 	bne.w	800a58c <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d903      	bls.n	800a3de <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	220d      	movs	r2, #13
 800a3da:	701a      	strb	r2, [r3, #0]
      break;
 800a3dc:	e0d6      	b.n	800a58c <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	795b      	ldrb	r3, [r3, #5]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 f933 	bl	800b650 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	791b      	ldrb	r3, [r3, #4]
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f001 f92d 	bl	800b650 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	701a      	strb	r2, [r3, #0]
      break;
 800a402:	e0c3      	b.n	800a58c <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f9e3 	bl	800a7d8 <USBH_Get_CfgDesc>
 800a412:	4603      	mov	r3, r0
 800a414:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a416:	7bbb      	ldrb	r3, [r7, #14]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2205      	movs	r2, #5
 800a420:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a422:	e0b5      	b.n	800a590 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	2b03      	cmp	r3, #3
 800a428:	f040 80b2 	bne.w	800a590 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a432:	3301      	adds	r3, #1
 800a434:	b2da      	uxtb	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a442:	2b03      	cmp	r3, #3
 800a444:	d903      	bls.n	800a44e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	220d      	movs	r2, #13
 800a44a:	701a      	strb	r2, [r3, #0]
      break;
 800a44c:	e0a0      	b.n	800a590 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	795b      	ldrb	r3, [r3, #5]
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 f8fb 	bl	800b650 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	791b      	ldrb	r3, [r3, #4]
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f001 f8f5 	bl	800b650 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	701a      	strb	r2, [r3, #0]
      break;
 800a472:	e08d      	b.n	800a590 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d025      	beq.n	800a4ca <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a48a:	23ff      	movs	r3, #255	@ 0xff
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 f9cd 	bl	800a82c <USBH_Get_StringDesc>
 800a492:	4603      	mov	r3, r0
 800a494:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a496:	7bbb      	ldrb	r3, [r7, #14]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d109      	bne.n	800a4b0 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2206      	movs	r2, #6
 800a4a0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2105      	movs	r1, #5
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f91f 	bl	800a6ec <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a4ae:	e071      	b.n	800a594 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4b0:	7bbb      	ldrb	r3, [r7, #14]
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d16e      	bne.n	800a594 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2206      	movs	r2, #6
 800a4ba:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a4bc:	2300      	movs	r3, #0
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2105      	movs	r1, #5
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f912 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800a4c8:	e064      	b.n	800a594 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2206      	movs	r2, #6
 800a4ce:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2105      	movs	r1, #5
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f908 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800a4dc:	e05a      	b.n	800a594 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d01f      	beq.n	800a528 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a4f4:	23ff      	movs	r3, #255	@ 0xff
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f998 	bl	800a82c <USBH_Get_StringDesc>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a500:	7bbb      	ldrb	r3, [r7, #14]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d103      	bne.n	800a50e <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2207      	movs	r2, #7
 800a50a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a50c:	e044      	b.n	800a598 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
 800a510:	2b03      	cmp	r3, #3
 800a512:	d141      	bne.n	800a598 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2207      	movs	r2, #7
 800a518:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a51a:	2300      	movs	r3, #0
 800a51c:	2200      	movs	r2, #0
 800a51e:	2105      	movs	r1, #5
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f8e3 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800a526:	e037      	b.n	800a598 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2207      	movs	r2, #7
 800a52c:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a52e:	2300      	movs	r3, #0
 800a530:	2200      	movs	r2, #0
 800a532:	2105      	movs	r1, #5
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f8d9 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800a53a:	e02d      	b.n	800a598 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a542:	2b00      	cmp	r3, #0
 800a544:	d017      	beq.n	800a576 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a552:	23ff      	movs	r3, #255	@ 0xff
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f969 	bl	800a82c <USBH_Get_StringDesc>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a55e:	7bbb      	ldrb	r3, [r7, #14]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d102      	bne.n	800a56a <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a568:	e018      	b.n	800a59c <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d115      	bne.n	800a59c <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
      break;
 800a574:	e012      	b.n	800a59c <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800a576:	2300      	movs	r3, #0
 800a578:	73fb      	strb	r3, [r7, #15]
      break;
 800a57a:	e00f      	b.n	800a59c <USBH_HandleEnum+0x3f0>

    default:
      break;
 800a57c:	bf00      	nop
 800a57e:	e00e      	b.n	800a59e <USBH_HandleEnum+0x3f2>
      break;
 800a580:	bf00      	nop
 800a582:	e00c      	b.n	800a59e <USBH_HandleEnum+0x3f2>
      break;
 800a584:	bf00      	nop
 800a586:	e00a      	b.n	800a59e <USBH_HandleEnum+0x3f2>
      break;
 800a588:	bf00      	nop
 800a58a:	e008      	b.n	800a59e <USBH_HandleEnum+0x3f2>
      break;
 800a58c:	bf00      	nop
 800a58e:	e006      	b.n	800a59e <USBH_HandleEnum+0x3f2>
      break;
 800a590:	bf00      	nop
 800a592:	e004      	b.n	800a59e <USBH_HandleEnum+0x3f2>
      break;
 800a594:	bf00      	nop
 800a596:	e002      	b.n	800a59e <USBH_HandleEnum+0x3f2>
      break;
 800a598:	bf00      	nop
 800a59a:	e000      	b.n	800a59e <USBH_HandleEnum+0x3f2>
      break;
 800a59c:	bf00      	nop
  }
  return Status;
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a5ba:	bf00      	nop
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 f804 	bl	800a5ea <USBH_HandleSof>
}
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b0b      	cmp	r3, #11
 800a5fa:	d10a      	bne.n	800a612 <USBH_HandleSof+0x28>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d005      	beq.n	800a612 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a60c:	699b      	ldr	r3, [r3, #24]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	4798      	blx	r3
  }
}
 800a612:	bf00      	nop
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b082      	sub	sp, #8
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a62a:	2300      	movs	r3, #0
 800a62c:	2200      	movs	r2, #0
 800a62e:	2101      	movs	r1, #1
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f85b 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a636:	bf00      	nop
}
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a63e:	b480      	push	{r7}
 800a640:	b083      	sub	sp, #12
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a656:	bf00      	nop
}
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b082      	sub	sp, #8
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a682:	2300      	movs	r3, #0
 800a684:	2200      	movs	r2, #0
 800a686:	2101      	movs	r1, #1
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f82f 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f004 f992 	bl	800e9e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	791b      	ldrb	r3, [r3, #4]
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 ffc3 	bl	800b650 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	795b      	ldrb	r3, [r3, #5]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 ffbd 	bl	800b650 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2101      	movs	r1, #1
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f805 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	607a      	str	r2, [r7, #4]
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800a6fc:	7afa      	ldrb	r2, [r7, #11]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800a70a:	4618      	mov	r0, r3
 800a70c:	f001 fa3e 	bl	800bb8c <osMessageQueueGetSpace>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	b2da      	uxtb	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f001 f972 	bl	800ba10 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800a72c:	bf00      	nop
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a74c:	2200      	movs	r2, #0
 800a74e:	f001 f9bf 	bl	800bad0 <osMessageQueueGet>
 800a752:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1f0      	bne.n	800a73c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff fb0c 	bl	8009d78 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a760:	e7ec      	b.n	800a73c <USBH_Process_OS+0x8>

0800a762 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b082      	sub	sp, #8
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a76a:	2300      	movs	r3, #0
 800a76c:	2200      	movs	r2, #0
 800a76e:	2101      	movs	r1, #1
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f7ff ffbb 	bl	800a6ec <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af02      	add	r7, sp, #8
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a78c:	887b      	ldrh	r3, [r7, #2]
 800a78e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a792:	d901      	bls.n	800a798 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a794:	2303      	movs	r3, #3
 800a796:	e01b      	b.n	800a7d0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a79e:	887b      	ldrh	r3, [r7, #2]
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f872 	bl	800a894 <USBH_GetDescriptor>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a7c0:	887a      	ldrh	r2, [r7, #2]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f929 	bl	800aa1c <USBH_ParseDevDesc>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b086      	sub	sp, #24
 800a7dc:	af02      	add	r7, sp, #8
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	331c      	adds	r3, #28
 800a7e8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a7ea:	887b      	ldrh	r3, [r7, #2]
 800a7ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7f0:	d901      	bls.n	800a7f6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e016      	b.n	800a824 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a7f6:	887b      	ldrh	r3, [r7, #2]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a800:	2100      	movs	r1, #0
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f846 	bl	800a894 <USBH_GetDescriptor>
 800a808:	4603      	mov	r3, r0
 800a80a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d107      	bne.n	800a822 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a812:	887b      	ldrh	r3, [r7, #2]
 800a814:	461a      	mov	r2, r3
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f9af 	bl	800ab7c <USBH_ParseCfgDesc>
 800a81e:	4603      	mov	r3, r0
 800a820:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a822:	7bfb      	ldrb	r3, [r7, #15]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af02      	add	r7, sp, #8
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	607a      	str	r2, [r7, #4]
 800a836:	461a      	mov	r2, r3
 800a838:	460b      	mov	r3, r1
 800a83a:	72fb      	strb	r3, [r7, #11]
 800a83c:	4613      	mov	r3, r2
 800a83e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a840:	893b      	ldrh	r3, [r7, #8]
 800a842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a846:	d802      	bhi.n	800a84e <USBH_Get_StringDesc+0x22>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a84e:	2303      	movs	r3, #3
 800a850:	e01c      	b.n	800a88c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a852:	7afb      	ldrb	r3, [r7, #11]
 800a854:	b29b      	uxth	r3, r3
 800a856:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a85a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a862:	893b      	ldrh	r3, [r7, #8]
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	460b      	mov	r3, r1
 800a868:	2100      	movs	r1, #0
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f000 f812 	bl	800a894 <USBH_GetDescriptor>
 800a870:	4603      	mov	r3, r0
 800a872:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a874:	7dfb      	ldrb	r3, [r7, #23]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d107      	bne.n	800a88a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a880:	893a      	ldrh	r2, [r7, #8]
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	4618      	mov	r0, r3
 800a886:	f000 fb8c 	bl	800afa2 <USBH_ParseStringDesc>
  }

  return status;
 800a88a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3718      	adds	r7, #24
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	607b      	str	r3, [r7, #4]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	72fb      	strb	r3, [r7, #11]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	789b      	ldrb	r3, [r3, #2]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d11c      	bne.n	800a8e8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a8ae:	7afb      	ldrb	r3, [r7, #11]
 800a8b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2206      	movs	r2, #6
 800a8be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	893a      	ldrh	r2, [r7, #8]
 800a8c4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a8c6:	893b      	ldrh	r3, [r7, #8]
 800a8c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a8cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8d0:	d104      	bne.n	800a8dc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f240 4209 	movw	r2, #1033	@ 0x409
 800a8d8:	829a      	strh	r2, [r3, #20]
 800a8da:	e002      	b.n	800a8e2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	8b3a      	ldrh	r2, [r7, #24]
 800a8e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a8e8:	8b3b      	ldrh	r3, [r7, #24]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	6879      	ldr	r1, [r7, #4]
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f000 fba4 	bl	800b03c <USBH_CtlReq>
 800a8f4:	4603      	mov	r3, r0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b082      	sub	sp, #8
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	460b      	mov	r3, r1
 800a908:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	789b      	ldrb	r3, [r3, #2]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d10f      	bne.n	800a932 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2205      	movs	r2, #5
 800a91c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	b29a      	uxth	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a932:	2200      	movs	r2, #0
 800a934:	2100      	movs	r1, #0
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fb80 	bl	800b03c <USBH_CtlReq>
 800a93c:	4603      	mov	r3, r0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3708      	adds	r7, #8
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b082      	sub	sp, #8
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
 800a94e:	460b      	mov	r3, r1
 800a950:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	789b      	ldrb	r3, [r3, #2]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d10e      	bne.n	800a978 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2209      	movs	r2, #9
 800a964:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	887a      	ldrh	r2, [r7, #2]
 800a96a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a978:	2200      	movs	r2, #0
 800a97a:	2100      	movs	r1, #0
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fb5d 	bl	800b03c <USBH_CtlReq>
 800a982:	4603      	mov	r3, r0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	789b      	ldrb	r3, [r3, #2]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d10f      	bne.n	800a9c0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2203      	movs	r2, #3
 800a9aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a9ac:	78fb      	ldrb	r3, [r7, #3]
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fb39 	bl	800b03c <USBH_CtlReq>
 800a9ca:	4603      	mov	r3, r0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	789b      	ldrb	r3, [r3, #2]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d10f      	bne.n	800aa08 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a9fa:	78fb      	ldrb	r3, [r7, #3]
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fb15 	bl	800b03c <USBH_CtlReq>
 800aa12:	4603      	mov	r3, r0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b087      	sub	sp, #28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	4613      	mov	r3, r2
 800aa28:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800aa30:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800aa32:	2300      	movs	r3, #0
 800aa34:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	e094      	b.n	800ab6a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	781a      	ldrb	r2, [r3, #0]
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	785a      	ldrb	r2, [r3, #1]
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	3302      	adds	r3, #2
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	3303      	adds	r3, #3
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	021b      	lsls	r3, r3, #8
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	4313      	orrs	r3, r2
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	791a      	ldrb	r2, [r3, #4]
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	795a      	ldrb	r2, [r3, #5]
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	799a      	ldrb	r2, [r3, #6]
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	79da      	ldrb	r2, [r3, #7]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d004      	beq.n	800aa9e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d11b      	bne.n	800aad6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	79db      	ldrb	r3, [r3, #7]
 800aaa2:	2b20      	cmp	r3, #32
 800aaa4:	dc0f      	bgt.n	800aac6 <USBH_ParseDevDesc+0xaa>
 800aaa6:	2b08      	cmp	r3, #8
 800aaa8:	db0f      	blt.n	800aaca <USBH_ParseDevDesc+0xae>
 800aaaa:	3b08      	subs	r3, #8
 800aaac:	4a32      	ldr	r2, [pc, #200]	@ (800ab78 <USBH_ParseDevDesc+0x15c>)
 800aaae:	fa22 f303 	lsr.w	r3, r2, r3
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	bf14      	ite	ne
 800aaba:	2301      	movne	r3, #1
 800aabc:	2300      	moveq	r3, #0
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d106      	bne.n	800aad2 <USBH_ParseDevDesc+0xb6>
 800aac4:	e001      	b.n	800aaca <USBH_ParseDevDesc+0xae>
 800aac6:	2b40      	cmp	r3, #64	@ 0x40
 800aac8:	d003      	beq.n	800aad2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2208      	movs	r2, #8
 800aace:	71da      	strb	r2, [r3, #7]
        break;
 800aad0:	e000      	b.n	800aad4 <USBH_ParseDevDesc+0xb8>
        break;
 800aad2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800aad4:	e00e      	b.n	800aaf4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aadc:	2b02      	cmp	r3, #2
 800aade:	d107      	bne.n	800aaf0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	79db      	ldrb	r3, [r3, #7]
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d005      	beq.n	800aaf4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	2208      	movs	r2, #8
 800aaec:	71da      	strb	r2, [r3, #7]
 800aaee:	e001      	b.n	800aaf4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800aaf4:	88fb      	ldrh	r3, [r7, #6]
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	d936      	bls.n	800ab68 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	3308      	adds	r3, #8
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	461a      	mov	r2, r3
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	3309      	adds	r3, #9
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	021b      	lsls	r3, r3, #8
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	330a      	adds	r3, #10
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	330b      	adds	r3, #11
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	021b      	lsls	r3, r3, #8
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	4313      	orrs	r3, r2
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	330c      	adds	r3, #12
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	330d      	adds	r3, #13
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	021b      	lsls	r3, r3, #8
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	4313      	orrs	r3, r2
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	7b9a      	ldrb	r2, [r3, #14]
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	7bda      	ldrb	r2, [r3, #15]
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	7c1a      	ldrb	r2, [r3, #16]
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	7c5a      	ldrb	r2, [r3, #17]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	371c      	adds	r7, #28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	01000101 	.word	0x01000101

0800ab7c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08c      	sub	sp, #48	@ 0x30
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	4613      	mov	r3, r2
 800ab88:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ab90:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ab92:	2300      	movs	r3, #0
 800ab94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800abaa:	2302      	movs	r3, #2
 800abac:	e0de      	b.n	800ad6c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800abb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	2b09      	cmp	r3, #9
 800abb8:	d002      	beq.n	800abc0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800abba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abbc:	2209      	movs	r2, #9
 800abbe:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	781a      	ldrb	r2, [r3, #0]
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	785a      	ldrb	r2, [r3, #1]
 800abcc:	6a3b      	ldr	r3, [r7, #32]
 800abce:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	3302      	adds	r3, #2
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	3303      	adds	r3, #3
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	021b      	lsls	r3, r3, #8
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	4313      	orrs	r3, r2
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abea:	bf28      	it	cs
 800abec:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	6a3b      	ldr	r3, [r7, #32]
 800abf4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	791a      	ldrb	r2, [r3, #4]
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	795a      	ldrb	r2, [r3, #5]
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	799a      	ldrb	r2, [r3, #6]
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	79da      	ldrb	r2, [r3, #7]
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	7a1a      	ldrb	r2, [r3, #8]
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ac1e:	88fb      	ldrh	r3, [r7, #6]
 800ac20:	2b09      	cmp	r3, #9
 800ac22:	f240 80a1 	bls.w	800ad68 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800ac26:	2309      	movs	r3, #9
 800ac28:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ac2e:	e085      	b.n	800ad3c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ac30:	f107 0316 	add.w	r3, r7, #22
 800ac34:	4619      	mov	r1, r3
 800ac36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac38:	f000 f9e6 	bl	800b008 <USBH_GetNextDesc>
 800ac3c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ac3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac40:	785b      	ldrb	r3, [r3, #1]
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d17a      	bne.n	800ad3c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ac46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	2b09      	cmp	r3, #9
 800ac4c:	d002      	beq.n	800ac54 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ac4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac50:	2209      	movs	r2, #9
 800ac52:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ac54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac58:	221a      	movs	r2, #26
 800ac5a:	fb02 f303 	mul.w	r3, r2, r3
 800ac5e:	3308      	adds	r3, #8
 800ac60:	6a3a      	ldr	r2, [r7, #32]
 800ac62:	4413      	add	r3, r2
 800ac64:	3302      	adds	r3, #2
 800ac66:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ac68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac6a:	69f8      	ldr	r0, [r7, #28]
 800ac6c:	f000 f882 	bl	800ad74 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ac70:	2300      	movs	r3, #0
 800ac72:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ac7a:	e043      	b.n	800ad04 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ac7c:	f107 0316 	add.w	r3, r7, #22
 800ac80:	4619      	mov	r1, r3
 800ac82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac84:	f000 f9c0 	bl	800b008 <USBH_GetNextDesc>
 800ac88:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	2b05      	cmp	r3, #5
 800ac90:	d138      	bne.n	800ad04 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	795b      	ldrb	r3, [r3, #5]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d113      	bne.n	800acc2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d003      	beq.n	800acaa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	799b      	ldrb	r3, [r3, #6]
 800aca6:	2b03      	cmp	r3, #3
 800aca8:	d10b      	bne.n	800acc2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	79db      	ldrb	r3, [r3, #7]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10b      	bne.n	800acca <USBH_ParseCfgDesc+0x14e>
 800acb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	2b09      	cmp	r3, #9
 800acb8:	d007      	beq.n	800acca <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800acba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acbc:	2209      	movs	r2, #9
 800acbe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800acc0:	e003      	b.n	800acca <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800acc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc4:	2207      	movs	r2, #7
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e000      	b.n	800accc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800acca:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800accc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acd0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800acd4:	3201      	adds	r2, #1
 800acd6:	00d2      	lsls	r2, r2, #3
 800acd8:	211a      	movs	r1, #26
 800acda:	fb01 f303 	mul.w	r3, r1, r3
 800acde:	4413      	add	r3, r2
 800ace0:	3308      	adds	r3, #8
 800ace2:	6a3a      	ldr	r2, [r7, #32]
 800ace4:	4413      	add	r3, r2
 800ace6:	3304      	adds	r3, #4
 800ace8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800acea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acec:	69b9      	ldr	r1, [r7, #24]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f000 f86f 	bl	800add2 <USBH_ParseEPDesc>
 800acf4:	4603      	mov	r3, r0
 800acf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800acfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800acfe:	3301      	adds	r3, #1
 800ad00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ad04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d80a      	bhi.n	800ad22 <USBH_ParseCfgDesc+0x1a6>
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	791b      	ldrb	r3, [r3, #4]
 800ad10:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d204      	bcs.n	800ad22 <USBH_ParseCfgDesc+0x1a6>
 800ad18:	6a3b      	ldr	r3, [r7, #32]
 800ad1a:	885a      	ldrh	r2, [r3, #2]
 800ad1c:	8afb      	ldrh	r3, [r7, #22]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d8ac      	bhi.n	800ac7c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	791b      	ldrb	r3, [r3, #4]
 800ad26:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d201      	bcs.n	800ad32 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e01c      	b.n	800ad6c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800ad32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad36:	3301      	adds	r3, #1
 800ad38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ad3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d805      	bhi.n	800ad50 <USBH_ParseCfgDesc+0x1d4>
 800ad44:	6a3b      	ldr	r3, [r7, #32]
 800ad46:	885a      	ldrh	r2, [r3, #2]
 800ad48:	8afb      	ldrh	r3, [r7, #22]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	f63f af70 	bhi.w	800ac30 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	791b      	ldrb	r3, [r3, #4]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	bf28      	it	cs
 800ad58:	2302      	movcs	r3, #2
 800ad5a:	b2db      	uxtb	r3, r3
 800ad5c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d201      	bcs.n	800ad68 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800ad64:	2303      	movs	r3, #3
 800ad66:	e001      	b.n	800ad6c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800ad68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3730      	adds	r7, #48	@ 0x30
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	781a      	ldrb	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	785a      	ldrb	r2, [r3, #1]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	789a      	ldrb	r2, [r3, #2]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	78da      	ldrb	r2, [r3, #3]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	791a      	ldrb	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	795a      	ldrb	r2, [r3, #5]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	799a      	ldrb	r2, [r3, #6]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	79da      	ldrb	r2, [r3, #7]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	7a1a      	ldrb	r2, [r3, #8]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	721a      	strb	r2, [r3, #8]
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800add2:	b480      	push	{r7}
 800add4:	b087      	sub	sp, #28
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	781a      	ldrb	r2, [r3, #0]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	785a      	ldrb	r2, [r3, #1]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	789a      	ldrb	r2, [r3, #2]
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	78da      	ldrb	r2, [r3, #3]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3304      	adds	r3, #4
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	3305      	adds	r3, #5
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	4313      	orrs	r3, r2
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	799a      	ldrb	r2, [r3, #6]
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	889b      	ldrh	r3, [r3, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d009      	beq.n	800ae40 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ae30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae34:	d804      	bhi.n	800ae40 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ae3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae3e:	d901      	bls.n	800ae44 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ae40:	2303      	movs	r3, #3
 800ae42:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d136      	bne.n	800aebc <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	78db      	ldrb	r3, [r3, #3]
 800ae52:	f003 0303 	and.w	r3, r3, #3
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d108      	bne.n	800ae6c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	889b      	ldrh	r3, [r3, #4]
 800ae5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae62:	f240 8097 	bls.w	800af94 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae66:	2303      	movs	r3, #3
 800ae68:	75fb      	strb	r3, [r7, #23]
 800ae6a:	e093      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	78db      	ldrb	r3, [r3, #3]
 800ae70:	f003 0303 	and.w	r3, r3, #3
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d107      	bne.n	800ae88 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	889b      	ldrh	r3, [r3, #4]
 800ae7c:	2b40      	cmp	r3, #64	@ 0x40
 800ae7e:	f240 8089 	bls.w	800af94 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae82:	2303      	movs	r3, #3
 800ae84:	75fb      	strb	r3, [r7, #23]
 800ae86:	e085      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	78db      	ldrb	r3, [r3, #3]
 800ae8c:	f003 0303 	and.w	r3, r3, #3
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d005      	beq.n	800aea0 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	78db      	ldrb	r3, [r3, #3]
 800ae98:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d10a      	bne.n	800aeb6 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	799b      	ldrb	r3, [r3, #6]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <USBH_ParseEPDesc+0xde>
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	799b      	ldrb	r3, [r3, #6]
 800aeac:	2b10      	cmp	r3, #16
 800aeae:	d970      	bls.n	800af92 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aeb4:	e06d      	b.n	800af92 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	75fb      	strb	r3, [r7, #23]
 800aeba:	e06b      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d13c      	bne.n	800af40 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	78db      	ldrb	r3, [r3, #3]
 800aeca:	f003 0303 	and.w	r3, r3, #3
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d005      	beq.n	800aede <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	78db      	ldrb	r3, [r3, #3]
 800aed6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d106      	bne.n	800aeec <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	889b      	ldrh	r3, [r3, #4]
 800aee2:	2b40      	cmp	r3, #64	@ 0x40
 800aee4:	d956      	bls.n	800af94 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aee6:	2303      	movs	r3, #3
 800aee8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aeea:	e053      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	78db      	ldrb	r3, [r3, #3]
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d10e      	bne.n	800af16 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	799b      	ldrb	r3, [r3, #6]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d007      	beq.n	800af10 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800af04:	2b10      	cmp	r3, #16
 800af06:	d803      	bhi.n	800af10 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800af0c:	2b40      	cmp	r3, #64	@ 0x40
 800af0e:	d941      	bls.n	800af94 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800af10:	2303      	movs	r3, #3
 800af12:	75fb      	strb	r3, [r7, #23]
 800af14:	e03e      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	78db      	ldrb	r3, [r3, #3]
 800af1a:	f003 0303 	and.w	r3, r3, #3
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d10b      	bne.n	800af3a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	799b      	ldrb	r3, [r3, #6]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d004      	beq.n	800af34 <USBH_ParseEPDesc+0x162>
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	889b      	ldrh	r3, [r3, #4]
 800af2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af32:	d32f      	bcc.n	800af94 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800af34:	2303      	movs	r3, #3
 800af36:	75fb      	strb	r3, [r7, #23]
 800af38:	e02c      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800af3a:	2303      	movs	r3, #3
 800af3c:	75fb      	strb	r3, [r7, #23]
 800af3e:	e029      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800af46:	2b02      	cmp	r3, #2
 800af48:	d120      	bne.n	800af8c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	78db      	ldrb	r3, [r3, #3]
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d106      	bne.n	800af64 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	889b      	ldrh	r3, [r3, #4]
 800af5a:	2b08      	cmp	r3, #8
 800af5c:	d01a      	beq.n	800af94 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800af5e:	2303      	movs	r3, #3
 800af60:	75fb      	strb	r3, [r7, #23]
 800af62:	e017      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	78db      	ldrb	r3, [r3, #3]
 800af68:	f003 0303 	and.w	r3, r3, #3
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d10a      	bne.n	800af86 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	799b      	ldrb	r3, [r3, #6]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d003      	beq.n	800af80 <USBH_ParseEPDesc+0x1ae>
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	889b      	ldrh	r3, [r3, #4]
 800af7c:	2b08      	cmp	r3, #8
 800af7e:	d909      	bls.n	800af94 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800af80:	2303      	movs	r3, #3
 800af82:	75fb      	strb	r3, [r7, #23]
 800af84:	e006      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800af86:	2303      	movs	r3, #3
 800af88:	75fb      	strb	r3, [r7, #23]
 800af8a:	e003      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800af8c:	2303      	movs	r3, #3
 800af8e:	75fb      	strb	r3, [r7, #23]
 800af90:	e000      	b.n	800af94 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800af92:	bf00      	nop
  }

  return status;
 800af94:	7dfb      	ldrb	r3, [r7, #23]
}
 800af96:	4618      	mov	r0, r3
 800af98:	371c      	adds	r7, #28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b087      	sub	sp, #28
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	4613      	mov	r3, r2
 800afae:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	3301      	adds	r3, #1
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d120      	bne.n	800affc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	1e9a      	subs	r2, r3, #2
 800afc0:	88fb      	ldrh	r3, [r7, #6]
 800afc2:	4293      	cmp	r3, r2
 800afc4:	bf28      	it	cs
 800afc6:	4613      	movcs	r3, r2
 800afc8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3302      	adds	r3, #2
 800afce:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800afd0:	2300      	movs	r3, #0
 800afd2:	82fb      	strh	r3, [r7, #22]
 800afd4:	e00b      	b.n	800afee <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800afd6:	8afb      	ldrh	r3, [r7, #22]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4413      	add	r3, r2
 800afdc:	781a      	ldrb	r2, [r3, #0]
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	3301      	adds	r3, #1
 800afe6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800afe8:	8afb      	ldrh	r3, [r7, #22]
 800afea:	3302      	adds	r3, #2
 800afec:	82fb      	strh	r3, [r7, #22]
 800afee:	8afa      	ldrh	r2, [r7, #22]
 800aff0:	8abb      	ldrh	r3, [r7, #20]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d3ef      	bcc.n	800afd6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2200      	movs	r2, #0
 800affa:	701a      	strb	r2, [r3, #0]
  }
}
 800affc:	bf00      	nop
 800affe:	371c      	adds	r7, #28
 800b000:	46bd      	mov	sp, r7
 800b002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b006:	4770      	bx	lr

0800b008 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	881b      	ldrh	r3, [r3, #0]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	7812      	ldrb	r2, [r2, #0]
 800b01a:	4413      	add	r3, r2
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4413      	add	r3, r2
 800b02c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b02e:	68fb      	ldr	r3, [r7, #12]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	4613      	mov	r3, r2
 800b048:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b04a:	2301      	movs	r3, #1
 800b04c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	789b      	ldrb	r3, [r3, #2]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d002      	beq.n	800b05c <USBH_CtlReq+0x20>
 800b056:	2b02      	cmp	r3, #2
 800b058:	d015      	beq.n	800b086 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b05a:	e033      	b.n	800b0c4 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	68ba      	ldr	r2, [r7, #8]
 800b060:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	88fa      	ldrh	r2, [r7, #6]
 800b066:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2201      	movs	r2, #1
 800b06c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2202      	movs	r2, #2
 800b072:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b074:	2301      	movs	r3, #1
 800b076:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b078:	2300      	movs	r3, #0
 800b07a:	2200      	movs	r2, #0
 800b07c:	2103      	movs	r1, #3
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff fb34 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b084:	e01e      	b.n	800b0c4 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 f822 	bl	800b0d0 <USBH_HandleControl>
 800b08c:	4603      	mov	r3, r0
 800b08e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b090:	7dfb      	ldrb	r3, [r7, #23]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d002      	beq.n	800b09c <USBH_CtlReq+0x60>
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	2b03      	cmp	r3, #3
 800b09a:	d106      	bne.n	800b0aa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	761a      	strb	r2, [r3, #24]
 800b0a8:	e005      	b.n	800b0b6 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d102      	bne.n	800b0b6 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2103      	movs	r1, #3
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff fb15 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b0c2:	bf00      	nop
  }
  return status;
 800b0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
	...

0800b0d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7e1b      	ldrb	r3, [r3, #24]
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	2b0a      	cmp	r3, #10
 800b0e8:	f200 81b2 	bhi.w	800b450 <USBH_HandleControl+0x380>
 800b0ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b0f4 <USBH_HandleControl+0x24>)
 800b0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f2:	bf00      	nop
 800b0f4:	0800b121 	.word	0x0800b121
 800b0f8:	0800b13b 	.word	0x0800b13b
 800b0fc:	0800b1bd 	.word	0x0800b1bd
 800b100:	0800b1e3 	.word	0x0800b1e3
 800b104:	0800b241 	.word	0x0800b241
 800b108:	0800b26b 	.word	0x0800b26b
 800b10c:	0800b2ed 	.word	0x0800b2ed
 800b110:	0800b30f 	.word	0x0800b30f
 800b114:	0800b371 	.word	0x0800b371
 800b118:	0800b397 	.word	0x0800b397
 800b11c:	0800b3f9 	.word	0x0800b3f9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f103 0110 	add.w	r1, r3, #16
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	795b      	ldrb	r3, [r3, #5]
 800b12a:	461a      	mov	r2, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f99f 	bl	800b470 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2202      	movs	r2, #2
 800b136:	761a      	strb	r2, [r3, #24]
      break;
 800b138:	e195      	b.n	800b466 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	795b      	ldrb	r3, [r3, #5]
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f003 fd2b 	bl	800eb9c <USBH_LL_GetURBState>
 800b146:	4603      	mov	r3, r0
 800b148:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b14a:	7bbb      	ldrb	r3, [r7, #14]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d124      	bne.n	800b19a <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	7c1b      	ldrb	r3, [r3, #16]
 800b154:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b158:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	8adb      	ldrh	r3, [r3, #22]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00a      	beq.n	800b178 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b162:	7b7b      	ldrb	r3, [r7, #13]
 800b164:	2b80      	cmp	r3, #128	@ 0x80
 800b166:	d103      	bne.n	800b170 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2203      	movs	r2, #3
 800b16c:	761a      	strb	r2, [r3, #24]
 800b16e:	e00d      	b.n	800b18c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2205      	movs	r2, #5
 800b174:	761a      	strb	r2, [r3, #24]
 800b176:	e009      	b.n	800b18c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b178:	7b7b      	ldrb	r3, [r7, #13]
 800b17a:	2b80      	cmp	r3, #128	@ 0x80
 800b17c:	d103      	bne.n	800b186 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2209      	movs	r2, #9
 800b182:	761a      	strb	r2, [r3, #24]
 800b184:	e002      	b.n	800b18c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2207      	movs	r2, #7
 800b18a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b18c:	2300      	movs	r3, #0
 800b18e:	2200      	movs	r2, #0
 800b190:	2103      	movs	r1, #3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff faaa 	bl	800a6ec <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b198:	e15c      	b.n	800b454 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	2b04      	cmp	r3, #4
 800b19e:	d003      	beq.n	800b1a8 <USBH_HandleControl+0xd8>
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	f040 8156 	bne.w	800b454 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	220b      	movs	r2, #11
 800b1ac:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	2103      	movs	r1, #3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff fa99 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b1ba:	e14b      	b.n	800b454 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6899      	ldr	r1, [r3, #8]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	899a      	ldrh	r2, [r3, #12]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	791b      	ldrb	r3, [r3, #4]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f98a 	bl	800b4ee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2204      	movs	r2, #4
 800b1de:	761a      	strb	r2, [r3, #24]
      break;
 800b1e0:	e141      	b.n	800b466 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	791b      	ldrb	r3, [r3, #4]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f003 fcd7 	bl	800eb9c <USBH_LL_GetURBState>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b1f2:	7bbb      	ldrb	r3, [r7, #14]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d109      	bne.n	800b20c <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2209      	movs	r2, #9
 800b1fc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b1fe:	2300      	movs	r3, #0
 800b200:	2200      	movs	r2, #0
 800b202:	2103      	movs	r1, #3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f7ff fa71 	bl	800a6ec <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b20a:	e125      	b.n	800b458 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	2b05      	cmp	r3, #5
 800b210:	d108      	bne.n	800b224 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800b212:	2303      	movs	r3, #3
 800b214:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b216:	2300      	movs	r3, #0
 800b218:	2200      	movs	r2, #0
 800b21a:	2103      	movs	r1, #3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff fa65 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b222:	e119      	b.n	800b458 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	2b04      	cmp	r3, #4
 800b228:	f040 8116 	bne.w	800b458 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	220b      	movs	r2, #11
 800b230:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b232:	2300      	movs	r3, #0
 800b234:	2200      	movs	r2, #0
 800b236:	2103      	movs	r1, #3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7ff fa57 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b23e:	e10b      	b.n	800b458 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6899      	ldr	r1, [r3, #8]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	899a      	ldrh	r2, [r3, #12]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	795b      	ldrb	r3, [r3, #5]
 800b24c:	2001      	movs	r0, #1
 800b24e:	9000      	str	r0, [sp, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f927 	bl	800b4a4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2206      	movs	r2, #6
 800b266:	761a      	strb	r2, [r3, #24]
      break;
 800b268:	e0fd      	b.n	800b466 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	795b      	ldrb	r3, [r3, #5]
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f003 fc93 	bl	800eb9c <USBH_LL_GetURBState>
 800b276:	4603      	mov	r3, r0
 800b278:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b27a:	7bbb      	ldrb	r3, [r7, #14]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d109      	bne.n	800b294 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2207      	movs	r2, #7
 800b284:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b286:	2300      	movs	r3, #0
 800b288:	2200      	movs	r2, #0
 800b28a:	2103      	movs	r1, #3
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7ff fa2d 	bl	800a6ec <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b292:	e0e3      	b.n	800b45c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	2b05      	cmp	r3, #5
 800b298:	d10b      	bne.n	800b2b2 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	220c      	movs	r2, #12
 800b29e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	2103      	movs	r1, #3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff fa1e 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b2b0:	e0d4      	b.n	800b45c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b2b2:	7bbb      	ldrb	r3, [r7, #14]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d109      	bne.n	800b2cc <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2205      	movs	r2, #5
 800b2bc:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b2be:	2300      	movs	r3, #0
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	2103      	movs	r1, #3
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff fa11 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b2ca:	e0c7      	b.n	800b45c <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800b2cc:	7bbb      	ldrb	r3, [r7, #14]
 800b2ce:	2b04      	cmp	r3, #4
 800b2d0:	f040 80c4 	bne.w	800b45c <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	220b      	movs	r2, #11
 800b2d8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b2da:	2302      	movs	r3, #2
 800b2dc:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b2de:	2300      	movs	r3, #0
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2103      	movs	r1, #3
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff fa01 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b2ea:	e0b7      	b.n	800b45c <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	791b      	ldrb	r3, [r3, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f8fa 	bl	800b4ee <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b300:	b29a      	uxth	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2208      	movs	r2, #8
 800b30a:	761a      	strb	r2, [r3, #24]

      break;
 800b30c:	e0ab      	b.n	800b466 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	791b      	ldrb	r3, [r3, #4]
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f003 fc41 	bl	800eb9c <USBH_LL_GetURBState>
 800b31a:	4603      	mov	r3, r0
 800b31c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b31e:	7bbb      	ldrb	r3, [r7, #14]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d10b      	bne.n	800b33c <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	220d      	movs	r2, #13
 800b328:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b32e:	2300      	movs	r3, #0
 800b330:	2200      	movs	r2, #0
 800b332:	2103      	movs	r1, #3
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7ff f9d9 	bl	800a6ec <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b33a:	e091      	b.n	800b460 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800b33c:	7bbb      	ldrb	r3, [r7, #14]
 800b33e:	2b04      	cmp	r3, #4
 800b340:	d109      	bne.n	800b356 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	220b      	movs	r2, #11
 800b346:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b348:	2300      	movs	r3, #0
 800b34a:	2200      	movs	r2, #0
 800b34c:	2103      	movs	r1, #3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7ff f9cc 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b354:	e084      	b.n	800b460 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800b356:	7bbb      	ldrb	r3, [r7, #14]
 800b358:	2b05      	cmp	r3, #5
 800b35a:	f040 8081 	bne.w	800b460 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800b35e:	2303      	movs	r3, #3
 800b360:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b362:	2300      	movs	r3, #0
 800b364:	2200      	movs	r2, #0
 800b366:	2103      	movs	r1, #3
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff f9bf 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b36e:	e077      	b.n	800b460 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	795b      	ldrb	r3, [r3, #5]
 800b374:	2201      	movs	r2, #1
 800b376:	9200      	str	r2, [sp, #0]
 800b378:	2200      	movs	r2, #0
 800b37a:	2100      	movs	r1, #0
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 f891 	bl	800b4a4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b388:	b29a      	uxth	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	220a      	movs	r2, #10
 800b392:	761a      	strb	r2, [r3, #24]
      break;
 800b394:	e067      	b.n	800b466 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	795b      	ldrb	r3, [r3, #5]
 800b39a:	4619      	mov	r1, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f003 fbfd 	bl	800eb9c <USBH_LL_GetURBState>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d10b      	bne.n	800b3c4 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	220d      	movs	r2, #13
 800b3b4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	2103      	movs	r1, #3
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff f995 	bl	800a6ec <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b3c2:	e04f      	b.n	800b464 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b3c4:	7bbb      	ldrb	r3, [r7, #14]
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d109      	bne.n	800b3de <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2209      	movs	r2, #9
 800b3ce:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	2103      	movs	r1, #3
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff f988 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b3dc:	e042      	b.n	800b464 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800b3de:	7bbb      	ldrb	r3, [r7, #14]
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	d13f      	bne.n	800b464 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	220b      	movs	r2, #11
 800b3e8:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2103      	movs	r1, #3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f7ff f97b 	bl	800a6ec <USBH_OS_PutMessage>
      break;
 800b3f6:	e035      	b.n	800b464 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	7e5b      	ldrb	r3, [r3, #25]
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	b2da      	uxtb	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	765a      	strb	r2, [r3, #25]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	7e5b      	ldrb	r3, [r3, #25]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d806      	bhi.n	800b41a <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b418:	e025      	b.n	800b466 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b420:	2106      	movs	r1, #6
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	795b      	ldrb	r3, [r3, #5]
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 f90c 	bl	800b650 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	791b      	ldrb	r3, [r3, #4]
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f906 	bl	800b650 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b44a:	2302      	movs	r3, #2
 800b44c:	73fb      	strb	r3, [r7, #15]
      break;
 800b44e:	e00a      	b.n	800b466 <USBH_HandleControl+0x396>

    default:
      break;
 800b450:	bf00      	nop
 800b452:	e008      	b.n	800b466 <USBH_HandleControl+0x396>
      break;
 800b454:	bf00      	nop
 800b456:	e006      	b.n	800b466 <USBH_HandleControl+0x396>
      break;
 800b458:	bf00      	nop
 800b45a:	e004      	b.n	800b466 <USBH_HandleControl+0x396>
      break;
 800b45c:	bf00      	nop
 800b45e:	e002      	b.n	800b466 <USBH_HandleControl+0x396>
      break;
 800b460:	bf00      	nop
 800b462:	e000      	b.n	800b466 <USBH_HandleControl+0x396>
      break;
 800b464:	bf00      	nop
  }

  return status;
 800b466:	7bfb      	ldrb	r3, [r7, #15]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af04      	add	r7, sp, #16
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	4613      	mov	r3, r2
 800b47c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b47e:	79f9      	ldrb	r1, [r7, #7]
 800b480:	2300      	movs	r3, #0
 800b482:	9303      	str	r3, [sp, #12]
 800b484:	2308      	movs	r3, #8
 800b486:	9302      	str	r3, [sp, #8]
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	9301      	str	r3, [sp, #4]
 800b48c:	2300      	movs	r3, #0
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	2300      	movs	r3, #0
 800b492:	2200      	movs	r2, #0
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f003 fb50 	bl	800eb3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af04      	add	r7, sp, #16
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	80fb      	strh	r3, [r7, #6]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b4c8:	7979      	ldrb	r1, [r7, #5]
 800b4ca:	7e3b      	ldrb	r3, [r7, #24]
 800b4cc:	9303      	str	r3, [sp, #12]
 800b4ce:	88fb      	ldrh	r3, [r7, #6]
 800b4d0:	9302      	str	r3, [sp, #8]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	2200      	movs	r2, #0
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f003 fb2b 	bl	800eb3a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b088      	sub	sp, #32
 800b4f2:	af04      	add	r7, sp, #16
 800b4f4:	60f8      	str	r0, [r7, #12]
 800b4f6:	60b9      	str	r1, [r7, #8]
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	80fb      	strh	r3, [r7, #6]
 800b500:	4613      	mov	r3, r2
 800b502:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b504:	7979      	ldrb	r1, [r7, #5]
 800b506:	2300      	movs	r3, #0
 800b508:	9303      	str	r3, [sp, #12]
 800b50a:	88fb      	ldrh	r3, [r7, #6]
 800b50c:	9302      	str	r3, [sp, #8]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	2301      	movs	r3, #1
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	2300      	movs	r3, #0
 800b518:	2201      	movs	r2, #1
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f003 fb0d 	bl	800eb3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b520:	2300      	movs	r3, #0

}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b088      	sub	sp, #32
 800b52e:	af04      	add	r7, sp, #16
 800b530:	60f8      	str	r0, [r7, #12]
 800b532:	60b9      	str	r1, [r7, #8]
 800b534:	4611      	mov	r1, r2
 800b536:	461a      	mov	r2, r3
 800b538:	460b      	mov	r3, r1
 800b53a:	80fb      	strh	r3, [r7, #6]
 800b53c:	4613      	mov	r3, r2
 800b53e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b54a:	2300      	movs	r3, #0
 800b54c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b54e:	7979      	ldrb	r1, [r7, #5]
 800b550:	7e3b      	ldrb	r3, [r7, #24]
 800b552:	9303      	str	r3, [sp, #12]
 800b554:	88fb      	ldrh	r3, [r7, #6]
 800b556:	9302      	str	r3, [sp, #8]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	9301      	str	r3, [sp, #4]
 800b55c:	2301      	movs	r3, #1
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	2302      	movs	r3, #2
 800b562:	2200      	movs	r2, #0
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f003 fae8 	bl	800eb3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b088      	sub	sp, #32
 800b578:	af04      	add	r7, sp, #16
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	4611      	mov	r1, r2
 800b580:	461a      	mov	r2, r3
 800b582:	460b      	mov	r3, r1
 800b584:	80fb      	strh	r3, [r7, #6]
 800b586:	4613      	mov	r3, r2
 800b588:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b58a:	7979      	ldrb	r1, [r7, #5]
 800b58c:	2300      	movs	r3, #0
 800b58e:	9303      	str	r3, [sp, #12]
 800b590:	88fb      	ldrh	r3, [r7, #6]
 800b592:	9302      	str	r3, [sp, #8]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	9301      	str	r3, [sp, #4]
 800b598:	2301      	movs	r3, #1
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	2302      	movs	r3, #2
 800b59e:	2201      	movs	r2, #1
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	f003 faca 	bl	800eb3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af04      	add	r7, sp, #16
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	4608      	mov	r0, r1
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	70fb      	strb	r3, [r7, #3]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	70bb      	strb	r3, [r7, #2]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b5ca:	7878      	ldrb	r0, [r7, #1]
 800b5cc:	78ba      	ldrb	r2, [r7, #2]
 800b5ce:	78f9      	ldrb	r1, [r7, #3]
 800b5d0:	8b3b      	ldrh	r3, [r7, #24]
 800b5d2:	9302      	str	r3, [sp, #8]
 800b5d4:	7d3b      	ldrb	r3, [r7, #20]
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	7c3b      	ldrb	r3, [r7, #16]
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	4603      	mov	r3, r0
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f003 fa6f 	bl	800eac2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3708      	adds	r7, #8
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b082      	sub	sp, #8
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b5fa:	78fb      	ldrb	r3, [r7, #3]
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f003 fa8e 	bl	800eb20 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b084      	sub	sp, #16
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
 800b616:	460b      	mov	r3, r1
 800b618:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f836 	bl	800b68c <USBH_GetFreePipe>
 800b620:	4603      	mov	r3, r0
 800b622:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b624:	89fb      	ldrh	r3, [r7, #14]
 800b626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d00a      	beq.n	800b644 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b62e:	78fa      	ldrb	r2, [r7, #3]
 800b630:	89fb      	ldrh	r3, [r7, #14]
 800b632:	f003 030f 	and.w	r3, r3, #15
 800b636:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	33e0      	adds	r3, #224	@ 0xe0
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	440b      	add	r3, r1
 800b642:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b644:	89fb      	ldrh	r3, [r7, #14]
 800b646:	b2db      	uxtb	r3, r3
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b65c:	78fb      	ldrb	r3, [r7, #3]
 800b65e:	2b0f      	cmp	r3, #15
 800b660:	d80d      	bhi.n	800b67e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b662:	78fb      	ldrb	r3, [r7, #3]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	33e0      	adds	r3, #224	@ 0xe0
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	78fb      	ldrb	r3, [r7, #3]
 800b670:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b674:	6879      	ldr	r1, [r7, #4]
 800b676:	33e0      	adds	r3, #224	@ 0xe0
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	440b      	add	r3, r1
 800b67c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b694:	2300      	movs	r3, #0
 800b696:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b698:	2300      	movs	r3, #0
 800b69a:	73fb      	strb	r3, [r7, #15]
 800b69c:	e00f      	b.n	800b6be <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	33e0      	adds	r3, #224	@ 0xe0
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d102      	bne.n	800b6b8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	e007      	b.n	800b6c8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b6b8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	73fb      	strb	r3, [r7, #15]
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
 800b6c0:	2b0f      	cmp	r3, #15
 800b6c2:	d9ec      	bls.n	800b69e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b6c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3714      	adds	r7, #20
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <__NVIC_SetPriority>:
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	6039      	str	r1, [r7, #0]
 800b6de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	db0a      	blt.n	800b6fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	490c      	ldr	r1, [pc, #48]	@ (800b720 <__NVIC_SetPriority+0x4c>)
 800b6ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6f2:	0112      	lsls	r2, r2, #4
 800b6f4:	b2d2      	uxtb	r2, r2
 800b6f6:	440b      	add	r3, r1
 800b6f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b6fc:	e00a      	b.n	800b714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	b2da      	uxtb	r2, r3
 800b702:	4908      	ldr	r1, [pc, #32]	@ (800b724 <__NVIC_SetPriority+0x50>)
 800b704:	79fb      	ldrb	r3, [r7, #7]
 800b706:	f003 030f 	and.w	r3, r3, #15
 800b70a:	3b04      	subs	r3, #4
 800b70c:	0112      	lsls	r2, r2, #4
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	440b      	add	r3, r1
 800b712:	761a      	strb	r2, [r3, #24]
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	e000e100 	.word	0xe000e100
 800b724:	e000ed00 	.word	0xe000ed00

0800b728 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b728:	b580      	push	{r7, lr}
 800b72a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b72c:	2100      	movs	r1, #0
 800b72e:	f06f 0004 	mvn.w	r0, #4
 800b732:	f7ff ffcf 	bl	800b6d4 <__NVIC_SetPriority>
#endif
}
 800b736:	bf00      	nop
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b742:	f3ef 8305 	mrs	r3, IPSR
 800b746:	603b      	str	r3, [r7, #0]
  return(result);
 800b748:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b74e:	f06f 0305 	mvn.w	r3, #5
 800b752:	607b      	str	r3, [r7, #4]
 800b754:	e00c      	b.n	800b770 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b756:	4b0a      	ldr	r3, [pc, #40]	@ (800b780 <osKernelInitialize+0x44>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d105      	bne.n	800b76a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b75e:	4b08      	ldr	r3, [pc, #32]	@ (800b780 <osKernelInitialize+0x44>)
 800b760:	2201      	movs	r2, #1
 800b762:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b764:	2300      	movs	r3, #0
 800b766:	607b      	str	r3, [r7, #4]
 800b768:	e002      	b.n	800b770 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b76a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b76e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b770:	687b      	ldr	r3, [r7, #4]
}
 800b772:	4618      	mov	r0, r3
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	20004a88 	.word	0x20004a88

0800b784 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b78a:	f3ef 8305 	mrs	r3, IPSR
 800b78e:	603b      	str	r3, [r7, #0]
  return(result);
 800b790:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b792:	2b00      	cmp	r3, #0
 800b794:	d003      	beq.n	800b79e <osKernelStart+0x1a>
    stat = osErrorISR;
 800b796:	f06f 0305 	mvn.w	r3, #5
 800b79a:	607b      	str	r3, [r7, #4]
 800b79c:	e010      	b.n	800b7c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b79e:	4b0b      	ldr	r3, [pc, #44]	@ (800b7cc <osKernelStart+0x48>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d109      	bne.n	800b7ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b7a6:	f7ff ffbf 	bl	800b728 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b7aa:	4b08      	ldr	r3, [pc, #32]	@ (800b7cc <osKernelStart+0x48>)
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b7b0:	f001 fac2 	bl	800cd38 <vTaskStartScheduler>
      stat = osOK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	607b      	str	r3, [r7, #4]
 800b7b8:	e002      	b.n	800b7c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b7ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b7c0:	687b      	ldr	r3, [r7, #4]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20004a88 	.word	0x20004a88

0800b7d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08e      	sub	sp, #56	@ 0x38
 800b7d4:	af04      	add	r7, sp, #16
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7e0:	f3ef 8305 	mrs	r3, IPSR
 800b7e4:	617b      	str	r3, [r7, #20]
  return(result);
 800b7e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d17e      	bne.n	800b8ea <osThreadNew+0x11a>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d07b      	beq.n	800b8ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b7f2:	2380      	movs	r3, #128	@ 0x80
 800b7f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b7f6:	2318      	movs	r3, #24
 800b7f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b7fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b802:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d045      	beq.n	800b896 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d002      	beq.n	800b818 <osThreadNew+0x48>
        name = attr->name;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	699b      	ldr	r3, [r3, #24]
 800b824:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d008      	beq.n	800b83e <osThreadNew+0x6e>
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	2b38      	cmp	r3, #56	@ 0x38
 800b830:	d805      	bhi.n	800b83e <osThreadNew+0x6e>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <osThreadNew+0x72>
        return (NULL);
 800b83e:	2300      	movs	r3, #0
 800b840:	e054      	b.n	800b8ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d003      	beq.n	800b852 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	089b      	lsrs	r3, r3, #2
 800b850:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00e      	beq.n	800b878 <osThreadNew+0xa8>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	2b5b      	cmp	r3, #91	@ 0x5b
 800b860:	d90a      	bls.n	800b878 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b866:	2b00      	cmp	r3, #0
 800b868:	d006      	beq.n	800b878 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	695b      	ldr	r3, [r3, #20]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <osThreadNew+0xa8>
        mem = 1;
 800b872:	2301      	movs	r3, #1
 800b874:	61bb      	str	r3, [r7, #24]
 800b876:	e010      	b.n	800b89a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10c      	bne.n	800b89a <osThreadNew+0xca>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d108      	bne.n	800b89a <osThreadNew+0xca>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d104      	bne.n	800b89a <osThreadNew+0xca>
          mem = 0;
 800b890:	2300      	movs	r3, #0
 800b892:	61bb      	str	r3, [r7, #24]
 800b894:	e001      	b.n	800b89a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d110      	bne.n	800b8c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b8a8:	9202      	str	r2, [sp, #8]
 800b8aa:	9301      	str	r3, [sp, #4]
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	6a3a      	ldr	r2, [r7, #32]
 800b8b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f001 f862 	bl	800c980 <xTaskCreateStatic>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	613b      	str	r3, [r7, #16]
 800b8c0:	e013      	b.n	800b8ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d110      	bne.n	800b8ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b8c8:	6a3b      	ldr	r3, [r7, #32]
 800b8ca:	b29a      	uxth	r2, r3
 800b8cc:	f107 0310 	add.w	r3, r7, #16
 800b8d0:	9301      	str	r3, [sp, #4]
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f001 f8b0 	bl	800ca40 <xTaskCreate>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d001      	beq.n	800b8ea <osThreadNew+0x11a>
            hTask = NULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b8ea:	693b      	ldr	r3, [r7, #16]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3728      	adds	r7, #40	@ 0x28
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8fc:	f3ef 8305 	mrs	r3, IPSR
 800b900:	60bb      	str	r3, [r7, #8]
  return(result);
 800b902:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b904:	2b00      	cmp	r3, #0
 800b906:	d003      	beq.n	800b910 <osDelay+0x1c>
    stat = osErrorISR;
 800b908:	f06f 0305 	mvn.w	r3, #5
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	e007      	b.n	800b920 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b910:	2300      	movs	r3, #0
 800b912:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f001 f9d6 	bl	800cccc <vTaskDelay>
    }
  }

  return (stat);
 800b920:	68fb      	ldr	r3, [r7, #12]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b08a      	sub	sp, #40	@ 0x28
 800b92e:	af02      	add	r7, sp, #8
 800b930:	60f8      	str	r0, [r7, #12]
 800b932:	60b9      	str	r1, [r7, #8]
 800b934:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b936:	2300      	movs	r3, #0
 800b938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b93a:	f3ef 8305 	mrs	r3, IPSR
 800b93e:	613b      	str	r3, [r7, #16]
  return(result);
 800b940:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b942:	2b00      	cmp	r3, #0
 800b944:	d15f      	bne.n	800ba06 <osMessageQueueNew+0xdc>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d05c      	beq.n	800ba06 <osMessageQueueNew+0xdc>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d059      	beq.n	800ba06 <osMessageQueueNew+0xdc>
    mem = -1;
 800b952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b956:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d029      	beq.n	800b9b2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d012      	beq.n	800b98c <osMessageQueueNew+0x62>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	2b4f      	cmp	r3, #79	@ 0x4f
 800b96c:	d90e      	bls.n	800b98c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00a      	beq.n	800b98c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	695a      	ldr	r2, [r3, #20]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	68b9      	ldr	r1, [r7, #8]
 800b97e:	fb01 f303 	mul.w	r3, r1, r3
 800b982:	429a      	cmp	r2, r3
 800b984:	d302      	bcc.n	800b98c <osMessageQueueNew+0x62>
        mem = 1;
 800b986:	2301      	movs	r3, #1
 800b988:	61bb      	str	r3, [r7, #24]
 800b98a:	e014      	b.n	800b9b6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d110      	bne.n	800b9b6 <osMessageQueueNew+0x8c>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10c      	bne.n	800b9b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d108      	bne.n	800b9b6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d104      	bne.n	800b9b6 <osMessageQueueNew+0x8c>
          mem = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	61bb      	str	r3, [r7, #24]
 800b9b0:	e001      	b.n	800b9b6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d10b      	bne.n	800b9d4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	691a      	ldr	r2, [r3, #16]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	9100      	str	r1, [sp, #0]
 800b9c8:	68b9      	ldr	r1, [r7, #8]
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 fa66 	bl	800be9c <xQueueGenericCreateStatic>
 800b9d0:	61f8      	str	r0, [r7, #28]
 800b9d2:	e008      	b.n	800b9e6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d105      	bne.n	800b9e6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b9da:	2200      	movs	r2, #0
 800b9dc:	68b9      	ldr	r1, [r7, #8]
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f000 fad9 	bl	800bf96 <xQueueGenericCreate>
 800b9e4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00c      	beq.n	800ba06 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <osMessageQueueNew+0xd0>
        name = attr->name;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e001      	b.n	800b9fe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b9fe:	6979      	ldr	r1, [r7, #20]
 800ba00:	69f8      	ldr	r0, [r7, #28]
 800ba02:	f000 ff5f 	bl	800c8c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ba06:	69fb      	ldr	r3, [r7, #28]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3720      	adds	r7, #32
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	603b      	str	r3, [r7, #0]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba28:	f3ef 8305 	mrs	r3, IPSR
 800ba2c:	617b      	str	r3, [r7, #20]
  return(result);
 800ba2e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d028      	beq.n	800ba86 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d005      	beq.n	800ba46 <osMessageQueuePut+0x36>
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <osMessageQueuePut+0x36>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ba46:	f06f 0303 	mvn.w	r3, #3
 800ba4a:	61fb      	str	r3, [r7, #28]
 800ba4c:	e038      	b.n	800bac0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ba52:	f107 0210 	add.w	r2, r7, #16
 800ba56:	2300      	movs	r3, #0
 800ba58:	68b9      	ldr	r1, [r7, #8]
 800ba5a:	69b8      	ldr	r0, [r7, #24]
 800ba5c:	f000 fbfc 	bl	800c258 <xQueueGenericSendFromISR>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d003      	beq.n	800ba6e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ba66:	f06f 0302 	mvn.w	r3, #2
 800ba6a:	61fb      	str	r3, [r7, #28]
 800ba6c:	e028      	b.n	800bac0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d025      	beq.n	800bac0 <osMessageQueuePut+0xb0>
 800ba74:	4b15      	ldr	r3, [pc, #84]	@ (800bacc <osMessageQueuePut+0xbc>)
 800ba76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba7a:	601a      	str	r2, [r3, #0]
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	f3bf 8f6f 	isb	sy
 800ba84:	e01c      	b.n	800bac0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <osMessageQueuePut+0x82>
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d103      	bne.n	800ba9a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ba92:	f06f 0303 	mvn.w	r3, #3
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	e012      	b.n	800bac0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	68b9      	ldr	r1, [r7, #8]
 800baa0:	69b8      	ldr	r0, [r7, #24]
 800baa2:	f000 fad7 	bl	800c054 <xQueueGenericSend>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d009      	beq.n	800bac0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bab2:	f06f 0301 	mvn.w	r3, #1
 800bab6:	61fb      	str	r3, [r7, #28]
 800bab8:	e002      	b.n	800bac0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800baba:	f06f 0302 	mvn.w	r3, #2
 800babe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bac0:	69fb      	ldr	r3, [r7, #28]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3720      	adds	r7, #32
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b088      	sub	sp, #32
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
 800badc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bae6:	f3ef 8305 	mrs	r3, IPSR
 800baea:	617b      	str	r3, [r7, #20]
  return(result);
 800baec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d028      	beq.n	800bb44 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d005      	beq.n	800bb04 <osMessageQueueGet+0x34>
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <osMessageQueueGet+0x34>
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d003      	beq.n	800bb0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bb04:	f06f 0303 	mvn.w	r3, #3
 800bb08:	61fb      	str	r3, [r7, #28]
 800bb0a:	e037      	b.n	800bb7c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bb10:	f107 0310 	add.w	r3, r7, #16
 800bb14:	461a      	mov	r2, r3
 800bb16:	68b9      	ldr	r1, [r7, #8]
 800bb18:	69b8      	ldr	r0, [r7, #24]
 800bb1a:	f000 fd1d 	bl	800c558 <xQueueReceiveFromISR>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d003      	beq.n	800bb2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bb24:	f06f 0302 	mvn.w	r3, #2
 800bb28:	61fb      	str	r3, [r7, #28]
 800bb2a:	e027      	b.n	800bb7c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d024      	beq.n	800bb7c <osMessageQueueGet+0xac>
 800bb32:	4b15      	ldr	r3, [pc, #84]	@ (800bb88 <osMessageQueueGet+0xb8>)
 800bb34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb38:	601a      	str	r2, [r3, #0]
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	e01b      	b.n	800bb7c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <osMessageQueueGet+0x80>
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d103      	bne.n	800bb58 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bb50:	f06f 0303 	mvn.w	r3, #3
 800bb54:	61fb      	str	r3, [r7, #28]
 800bb56:	e011      	b.n	800bb7c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb58:	683a      	ldr	r2, [r7, #0]
 800bb5a:	68b9      	ldr	r1, [r7, #8]
 800bb5c:	69b8      	ldr	r0, [r7, #24]
 800bb5e:	f000 fc19 	bl	800c394 <xQueueReceive>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d009      	beq.n	800bb7c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d003      	beq.n	800bb76 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bb6e:	f06f 0301 	mvn.w	r3, #1
 800bb72:	61fb      	str	r3, [r7, #28]
 800bb74:	e002      	b.n	800bb7c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bb76:	f06f 0302 	mvn.w	r3, #2
 800bb7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bb7c:	69fb      	ldr	r3, [r7, #28]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3720      	adds	r7, #32
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	e000ed04 	.word	0xe000ed04

0800bb8c <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b08a      	sub	sp, #40	@ 0x28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800bb98:	6a3b      	ldr	r3, [r7, #32]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d102      	bne.n	800bba4 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bba2:	e023      	b.n	800bbec <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bba4:	f3ef 8305 	mrs	r3, IPSR
 800bba8:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbaa:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d019      	beq.n	800bbe4 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bbb0:	f3ef 8211 	mrs	r2, BASEPRI
 800bbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb8:	f383 8811 	msr	BASEPRI, r3
 800bbbc:	f3bf 8f6f 	isb	sy
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	613a      	str	r2, [r7, #16]
 800bbc6:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bbc8:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800bbca:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800bbcc:	6a3b      	ldr	r3, [r7, #32]
 800bbce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bbd0:	6a3b      	ldr	r3, [r7, #32]
 800bbd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bbe2:	e003      	b.n	800bbec <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800bbe4:	6a38      	ldr	r0, [r7, #32]
 800bbe6:	f000 fd39 	bl	800c65c <uxQueueSpacesAvailable>
 800bbea:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800bbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3728      	adds	r7, #40	@ 0x28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	4a07      	ldr	r2, [pc, #28]	@ (800bc24 <vApplicationGetIdleTaskMemory+0x2c>)
 800bc08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	4a06      	ldr	r2, [pc, #24]	@ (800bc28 <vApplicationGetIdleTaskMemory+0x30>)
 800bc0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2280      	movs	r2, #128	@ 0x80
 800bc14:	601a      	str	r2, [r3, #0]
}
 800bc16:	bf00      	nop
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	20004a8c 	.word	0x20004a8c
 800bc28:	20004ae8 	.word	0x20004ae8

0800bc2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	4a07      	ldr	r2, [pc, #28]	@ (800bc58 <vApplicationGetTimerTaskMemory+0x2c>)
 800bc3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	4a06      	ldr	r2, [pc, #24]	@ (800bc5c <vApplicationGetTimerTaskMemory+0x30>)
 800bc42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc4a:	601a      	str	r2, [r3, #0]
}
 800bc4c:	bf00      	nop
 800bc4e:	3714      	adds	r7, #20
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	20004ce8 	.word	0x20004ce8
 800bc5c:	20004d44 	.word	0x20004d44

0800bc60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f103 0208 	add.w	r2, r3, #8
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f103 0208 	add.w	r2, r3, #8
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f103 0208 	add.w	r2, r3, #8
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc94:	bf00      	nop
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bcae:	bf00      	nop
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b085      	sub	sp, #20
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	683a      	ldr	r2, [r7, #0]
 800bcde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	683a      	ldr	r2, [r7, #0]
 800bce4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	1c5a      	adds	r2, r3, #1
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	601a      	str	r2, [r3, #0]
}
 800bcf6:	bf00      	nop
 800bcf8:	3714      	adds	r7, #20
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd02:	b480      	push	{r7}
 800bd04:	b085      	sub	sp, #20
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd18:	d103      	bne.n	800bd22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e00c      	b.n	800bd3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	3308      	adds	r3, #8
 800bd26:	60fb      	str	r3, [r7, #12]
 800bd28:	e002      	b.n	800bd30 <vListInsert+0x2e>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	60fb      	str	r3, [r7, #12]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d2f6      	bcs.n	800bd2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	683a      	ldr	r2, [r7, #0]
 800bd4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	601a      	str	r2, [r3, #0]
}
 800bd68:	bf00      	nop
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr

0800bd74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6892      	ldr	r2, [r2, #8]
 800bd8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	6852      	ldr	r2, [r2, #4]
 800bd94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d103      	bne.n	800bda8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	1e5a      	subs	r2, r3, #1
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10b      	bne.n	800bdf4 <xQueueGenericReset+0x2c>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	60bb      	str	r3, [r7, #8]
}
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
 800bdf2:	e7fd      	b.n	800bdf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bdf4:	f002 f980 	bl	800e0f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be00:	68f9      	ldr	r1, [r7, #12]
 800be02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be04:	fb01 f303 	mul.w	r3, r1, r3
 800be08:	441a      	add	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be24:	3b01      	subs	r3, #1
 800be26:	68f9      	ldr	r1, [r7, #12]
 800be28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be2a:	fb01 f303 	mul.w	r3, r1, r3
 800be2e:	441a      	add	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	22ff      	movs	r2, #255	@ 0xff
 800be38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	22ff      	movs	r2, #255	@ 0xff
 800be40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d114      	bne.n	800be74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d01a      	beq.n	800be88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3310      	adds	r3, #16
 800be56:	4618      	mov	r0, r3
 800be58:	f001 f9fc 	bl	800d254 <xTaskRemoveFromEventList>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d012      	beq.n	800be88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800be62:	4b0d      	ldr	r3, [pc, #52]	@ (800be98 <xQueueGenericReset+0xd0>)
 800be64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	e009      	b.n	800be88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3310      	adds	r3, #16
 800be78:	4618      	mov	r0, r3
 800be7a:	f7ff fef1 	bl	800bc60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3324      	adds	r3, #36	@ 0x24
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff feec 	bl	800bc60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be88:	f002 f968 	bl	800e15c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be8c:	2301      	movs	r3, #1
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b08e      	sub	sp, #56	@ 0x38
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	60f8      	str	r0, [r7, #12]
 800bea4:	60b9      	str	r1, [r7, #8]
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10b      	bne.n	800bec8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bec2:	bf00      	nop
 800bec4:	bf00      	nop
 800bec6:	e7fd      	b.n	800bec4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10b      	bne.n	800bee6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bee0:	bf00      	nop
 800bee2:	bf00      	nop
 800bee4:	e7fd      	b.n	800bee2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <xQueueGenericCreateStatic+0x56>
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d001      	beq.n	800bef6 <xQueueGenericCreateStatic+0x5a>
 800bef2:	2301      	movs	r3, #1
 800bef4:	e000      	b.n	800bef8 <xQueueGenericCreateStatic+0x5c>
 800bef6:	2300      	movs	r3, #0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10b      	bne.n	800bf14 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	623b      	str	r3, [r7, #32]
}
 800bf0e:	bf00      	nop
 800bf10:	bf00      	nop
 800bf12:	e7fd      	b.n	800bf10 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d102      	bne.n	800bf20 <xQueueGenericCreateStatic+0x84>
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <xQueueGenericCreateStatic+0x88>
 800bf20:	2301      	movs	r3, #1
 800bf22:	e000      	b.n	800bf26 <xQueueGenericCreateStatic+0x8a>
 800bf24:	2300      	movs	r3, #0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10b      	bne.n	800bf42 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bf2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	61fb      	str	r3, [r7, #28]
}
 800bf3c:	bf00      	nop
 800bf3e:	bf00      	nop
 800bf40:	e7fd      	b.n	800bf3e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf42:	2350      	movs	r3, #80	@ 0x50
 800bf44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	2b50      	cmp	r3, #80	@ 0x50
 800bf4a:	d00b      	beq.n	800bf64 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bf4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	61bb      	str	r3, [r7, #24]
}
 800bf5e:	bf00      	nop
 800bf60:	bf00      	nop
 800bf62:	e7fd      	b.n	800bf60 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bf6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00d      	beq.n	800bf8c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf78:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bf7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	4613      	mov	r3, r2
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	68b9      	ldr	r1, [r7, #8]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f000 f840 	bl	800c00c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3730      	adds	r7, #48	@ 0x30
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b08a      	sub	sp, #40	@ 0x28
 800bf9a:	af02      	add	r7, sp, #8
 800bf9c:	60f8      	str	r0, [r7, #12]
 800bf9e:	60b9      	str	r1, [r7, #8]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10b      	bne.n	800bfc2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	613b      	str	r3, [r7, #16]
}
 800bfbc:	bf00      	nop
 800bfbe:	bf00      	nop
 800bfc0:	e7fd      	b.n	800bfbe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	fb02 f303 	mul.w	r3, r2, r3
 800bfca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	3350      	adds	r3, #80	@ 0x50
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f002 f9b3 	bl	800e33c <pvPortMalloc>
 800bfd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d011      	beq.n	800c002 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	3350      	adds	r3, #80	@ 0x50
 800bfe6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bff0:	79fa      	ldrb	r2, [r7, #7]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	4613      	mov	r3, r2
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	68b9      	ldr	r1, [r7, #8]
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f000 f805 	bl	800c00c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c002:	69bb      	ldr	r3, [r7, #24]
	}
 800c004:	4618      	mov	r0, r3
 800c006:	3720      	adds	r7, #32
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d103      	bne.n	800c028 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	69ba      	ldr	r2, [r7, #24]
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	e002      	b.n	800c02e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c03a:	2101      	movs	r1, #1
 800c03c:	69b8      	ldr	r0, [r7, #24]
 800c03e:	f7ff fec3 	bl	800bdc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	78fa      	ldrb	r2, [r7, #3]
 800c046:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c04a:	bf00      	nop
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b08e      	sub	sp, #56	@ 0x38
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c062:	2300      	movs	r3, #0
 800c064:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10b      	bne.n	800c088 <xQueueGenericSend+0x34>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c082:	bf00      	nop
 800c084:	bf00      	nop
 800c086:	e7fd      	b.n	800c084 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d103      	bne.n	800c096 <xQueueGenericSend+0x42>
 800c08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c092:	2b00      	cmp	r3, #0
 800c094:	d101      	bne.n	800c09a <xQueueGenericSend+0x46>
 800c096:	2301      	movs	r3, #1
 800c098:	e000      	b.n	800c09c <xQueueGenericSend+0x48>
 800c09a:	2300      	movs	r3, #0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10b      	bne.n	800c0b8 <xQueueGenericSend+0x64>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c0b2:	bf00      	nop
 800c0b4:	bf00      	nop
 800c0b6:	e7fd      	b.n	800c0b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d103      	bne.n	800c0c6 <xQueueGenericSend+0x72>
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d101      	bne.n	800c0ca <xQueueGenericSend+0x76>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e000      	b.n	800c0cc <xQueueGenericSend+0x78>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10b      	bne.n	800c0e8 <xQueueGenericSend+0x94>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	623b      	str	r3, [r7, #32]
}
 800c0e2:	bf00      	nop
 800c0e4:	bf00      	nop
 800c0e6:	e7fd      	b.n	800c0e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0e8:	f001 fa9c 	bl	800d624 <xTaskGetSchedulerState>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d102      	bne.n	800c0f8 <xQueueGenericSend+0xa4>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d101      	bne.n	800c0fc <xQueueGenericSend+0xa8>
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e000      	b.n	800c0fe <xQueueGenericSend+0xaa>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10b      	bne.n	800c11a <xQueueGenericSend+0xc6>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	61fb      	str	r3, [r7, #28]
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	e7fd      	b.n	800c116 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c11a:	f001 ffed 	bl	800e0f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c126:	429a      	cmp	r2, r3
 800c128:	d302      	bcc.n	800c130 <xQueueGenericSend+0xdc>
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d129      	bne.n	800c184 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c130:	683a      	ldr	r2, [r7, #0]
 800c132:	68b9      	ldr	r1, [r7, #8]
 800c134:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c136:	f000 fab5 	bl	800c6a4 <prvCopyDataToQueue>
 800c13a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c140:	2b00      	cmp	r3, #0
 800c142:	d010      	beq.n	800c166 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c146:	3324      	adds	r3, #36	@ 0x24
 800c148:	4618      	mov	r0, r3
 800c14a:	f001 f883 	bl	800d254 <xTaskRemoveFromEventList>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d013      	beq.n	800c17c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c154:	4b3f      	ldr	r3, [pc, #252]	@ (800c254 <xQueueGenericSend+0x200>)
 800c156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	e00a      	b.n	800c17c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d007      	beq.n	800c17c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c16c:	4b39      	ldr	r3, [pc, #228]	@ (800c254 <xQueueGenericSend+0x200>)
 800c16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c17c:	f001 ffee 	bl	800e15c <vPortExitCritical>
				return pdPASS;
 800c180:	2301      	movs	r3, #1
 800c182:	e063      	b.n	800c24c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d103      	bne.n	800c192 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c18a:	f001 ffe7 	bl	800e15c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c18e:	2300      	movs	r3, #0
 800c190:	e05c      	b.n	800c24c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c194:	2b00      	cmp	r3, #0
 800c196:	d106      	bne.n	800c1a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c198:	f107 0314 	add.w	r3, r7, #20
 800c19c:	4618      	mov	r0, r3
 800c19e:	f001 f8e5 	bl	800d36c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1a6:	f001 ffd9 	bl	800e15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1aa:	f000 fe2d 	bl	800ce08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1ae:	f001 ffa3 	bl	800e0f8 <vPortEnterCritical>
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c1b8:	b25b      	sxtb	r3, r3
 800c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1be:	d103      	bne.n	800c1c8 <xQueueGenericSend+0x174>
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c1ce:	b25b      	sxtb	r3, r3
 800c1d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1d4:	d103      	bne.n	800c1de <xQueueGenericSend+0x18a>
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1de:	f001 ffbd 	bl	800e15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1e2:	1d3a      	adds	r2, r7, #4
 800c1e4:	f107 0314 	add.w	r3, r7, #20
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f001 f8d4 	bl	800d398 <xTaskCheckForTimeOut>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d124      	bne.n	800c240 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c1f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1f8:	f000 fb4c 	bl	800c894 <prvIsQueueFull>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d018      	beq.n	800c234 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c204:	3310      	adds	r3, #16
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	4611      	mov	r1, r2
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 ffd0 	bl	800d1b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c212:	f000 fad7 	bl	800c7c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c216:	f000 fe05 	bl	800ce24 <xTaskResumeAll>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f47f af7c 	bne.w	800c11a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c222:	4b0c      	ldr	r3, [pc, #48]	@ (800c254 <xQueueGenericSend+0x200>)
 800c224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c228:	601a      	str	r2, [r3, #0]
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	e772      	b.n	800c11a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c234:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c236:	f000 fac5 	bl	800c7c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c23a:	f000 fdf3 	bl	800ce24 <xTaskResumeAll>
 800c23e:	e76c      	b.n	800c11a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c240:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c242:	f000 fabf 	bl	800c7c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c246:	f000 fded 	bl	800ce24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c24a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3738      	adds	r7, #56	@ 0x38
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	e000ed04 	.word	0xe000ed04

0800c258 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b090      	sub	sp, #64	@ 0x40
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10b      	bne.n	800c288 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	e7fd      	b.n	800c284 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d103      	bne.n	800c296 <xQueueGenericSendFromISR+0x3e>
 800c28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <xQueueGenericSendFromISR+0x42>
 800c296:	2301      	movs	r3, #1
 800c298:	e000      	b.n	800c29c <xQueueGenericSendFromISR+0x44>
 800c29a:	2300      	movs	r3, #0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d10b      	bne.n	800c2b8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c2b2:	bf00      	nop
 800c2b4:	bf00      	nop
 800c2b6:	e7fd      	b.n	800c2b4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d103      	bne.n	800c2c6 <xQueueGenericSendFromISR+0x6e>
 800c2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d101      	bne.n	800c2ca <xQueueGenericSendFromISR+0x72>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e000      	b.n	800c2cc <xQueueGenericSendFromISR+0x74>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10b      	bne.n	800c2e8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	623b      	str	r3, [r7, #32]
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	e7fd      	b.n	800c2e4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2e8:	f001 ffe6 	bl	800e2b8 <vPortValidateInterruptPriority>
	__asm volatile
 800c2ec:	f3ef 8211 	mrs	r2, BASEPRI
 800c2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	61fa      	str	r2, [r7, #28]
 800c302:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c304:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c306:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c310:	429a      	cmp	r2, r3
 800c312:	d302      	bcc.n	800c31a <xQueueGenericSendFromISR+0xc2>
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	2b02      	cmp	r3, #2
 800c318:	d12f      	bne.n	800c37a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c320:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c328:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c32a:	683a      	ldr	r2, [r7, #0]
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c330:	f000 f9b8 	bl	800c6a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c334:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c338:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c33c:	d112      	bne.n	800c364 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c342:	2b00      	cmp	r3, #0
 800c344:	d016      	beq.n	800c374 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c348:	3324      	adds	r3, #36	@ 0x24
 800c34a:	4618      	mov	r0, r3
 800c34c:	f000 ff82 	bl	800d254 <xTaskRemoveFromEventList>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00e      	beq.n	800c374 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00b      	beq.n	800c374 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	e007      	b.n	800c374 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c364:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c368:	3301      	adds	r3, #1
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	b25a      	sxtb	r2, r3
 800c36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c374:	2301      	movs	r3, #1
 800c376:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c378:	e001      	b.n	800c37e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c37a:	2300      	movs	r3, #0
 800c37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c380:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	f383 8811 	msr	BASEPRI, r3
}
 800c388:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3740      	adds	r7, #64	@ 0x40
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b08c      	sub	sp, #48	@ 0x30
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10b      	bne.n	800c3c6 <xQueueReceive+0x32>
	__asm volatile
 800c3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	623b      	str	r3, [r7, #32]
}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	e7fd      	b.n	800c3c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d103      	bne.n	800c3d4 <xQueueReceive+0x40>
 800c3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d101      	bne.n	800c3d8 <xQueueReceive+0x44>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e000      	b.n	800c3da <xQueueReceive+0x46>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10b      	bne.n	800c3f6 <xQueueReceive+0x62>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	61fb      	str	r3, [r7, #28]
}
 800c3f0:	bf00      	nop
 800c3f2:	bf00      	nop
 800c3f4:	e7fd      	b.n	800c3f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3f6:	f001 f915 	bl	800d624 <xTaskGetSchedulerState>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <xQueueReceive+0x72>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <xQueueReceive+0x76>
 800c406:	2301      	movs	r3, #1
 800c408:	e000      	b.n	800c40c <xQueueReceive+0x78>
 800c40a:	2300      	movs	r3, #0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10b      	bne.n	800c428 <xQueueReceive+0x94>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	61bb      	str	r3, [r7, #24]
}
 800c422:	bf00      	nop
 800c424:	bf00      	nop
 800c426:	e7fd      	b.n	800c424 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c428:	f001 fe66 	bl	800e0f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c430:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c434:	2b00      	cmp	r3, #0
 800c436:	d01f      	beq.n	800c478 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c438:	68b9      	ldr	r1, [r7, #8]
 800c43a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c43c:	f000 f99c 	bl	800c778 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c442:	1e5a      	subs	r2, r3, #1
 800c444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c446:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00f      	beq.n	800c470 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c452:	3310      	adds	r3, #16
 800c454:	4618      	mov	r0, r3
 800c456:	f000 fefd 	bl	800d254 <xTaskRemoveFromEventList>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d007      	beq.n	800c470 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c460:	4b3c      	ldr	r3, [pc, #240]	@ (800c554 <xQueueReceive+0x1c0>)
 800c462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c466:	601a      	str	r2, [r3, #0]
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c470:	f001 fe74 	bl	800e15c <vPortExitCritical>
				return pdPASS;
 800c474:	2301      	movs	r3, #1
 800c476:	e069      	b.n	800c54c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d103      	bne.n	800c486 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c47e:	f001 fe6d 	bl	800e15c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c482:	2300      	movs	r3, #0
 800c484:	e062      	b.n	800c54c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d106      	bne.n	800c49a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c48c:	f107 0310 	add.w	r3, r7, #16
 800c490:	4618      	mov	r0, r3
 800c492:	f000 ff6b 	bl	800d36c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c496:	2301      	movs	r3, #1
 800c498:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c49a:	f001 fe5f 	bl	800e15c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c49e:	f000 fcb3 	bl	800ce08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4a2:	f001 fe29 	bl	800e0f8 <vPortEnterCritical>
 800c4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c4ac:	b25b      	sxtb	r3, r3
 800c4ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4b2:	d103      	bne.n	800c4bc <xQueueReceive+0x128>
 800c4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4c2:	b25b      	sxtb	r3, r3
 800c4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4c8:	d103      	bne.n	800c4d2 <xQueueReceive+0x13e>
 800c4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4d2:	f001 fe43 	bl	800e15c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4d6:	1d3a      	adds	r2, r7, #4
 800c4d8:	f107 0310 	add.w	r3, r7, #16
 800c4dc:	4611      	mov	r1, r2
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 ff5a 	bl	800d398 <xTaskCheckForTimeOut>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d123      	bne.n	800c532 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4ec:	f000 f9bc 	bl	800c868 <prvIsQueueEmpty>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d017      	beq.n	800c526 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4f8:	3324      	adds	r3, #36	@ 0x24
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fe56 	bl	800d1b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c506:	f000 f95d 	bl	800c7c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c50a:	f000 fc8b 	bl	800ce24 <xTaskResumeAll>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d189      	bne.n	800c428 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c514:	4b0f      	ldr	r3, [pc, #60]	@ (800c554 <xQueueReceive+0x1c0>)
 800c516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c51a:	601a      	str	r2, [r3, #0]
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	e780      	b.n	800c428 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c528:	f000 f94c 	bl	800c7c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c52c:	f000 fc7a 	bl	800ce24 <xTaskResumeAll>
 800c530:	e77a      	b.n	800c428 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c534:	f000 f946 	bl	800c7c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c538:	f000 fc74 	bl	800ce24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c53c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c53e:	f000 f993 	bl	800c868 <prvIsQueueEmpty>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	f43f af6f 	beq.w	800c428 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c54a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3730      	adds	r7, #48	@ 0x30
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	e000ed04 	.word	0xe000ed04

0800c558 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08e      	sub	sp, #56	@ 0x38
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d10b      	bne.n	800c586 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	623b      	str	r3, [r7, #32]
}
 800c580:	bf00      	nop
 800c582:	bf00      	nop
 800c584:	e7fd      	b.n	800c582 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d103      	bne.n	800c594 <xQueueReceiveFromISR+0x3c>
 800c58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c590:	2b00      	cmp	r3, #0
 800c592:	d101      	bne.n	800c598 <xQueueReceiveFromISR+0x40>
 800c594:	2301      	movs	r3, #1
 800c596:	e000      	b.n	800c59a <xQueueReceiveFromISR+0x42>
 800c598:	2300      	movs	r3, #0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10b      	bne.n	800c5b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	61fb      	str	r3, [r7, #28]
}
 800c5b0:	bf00      	nop
 800c5b2:	bf00      	nop
 800c5b4:	e7fd      	b.n	800c5b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5b6:	f001 fe7f 	bl	800e2b8 <vPortValidateInterruptPriority>
	__asm volatile
 800c5ba:	f3ef 8211 	mrs	r2, BASEPRI
 800c5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	61ba      	str	r2, [r7, #24]
 800c5d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c5d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d02f      	beq.n	800c642 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5ec:	68b9      	ldr	r1, [r7, #8]
 800c5ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5f0:	f000 f8c2 	bl	800c778 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f6:	1e5a      	subs	r2, r3, #1
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c604:	d112      	bne.n	800c62c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c608:	691b      	ldr	r3, [r3, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d016      	beq.n	800c63c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c610:	3310      	adds	r3, #16
 800c612:	4618      	mov	r0, r3
 800c614:	f000 fe1e 	bl	800d254 <xTaskRemoveFromEventList>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00e      	beq.n	800c63c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00b      	beq.n	800c63c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	e007      	b.n	800c63c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c62c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c630:	3301      	adds	r3, #1
 800c632:	b2db      	uxtb	r3, r3
 800c634:	b25a      	sxtb	r2, r3
 800c636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c63c:	2301      	movs	r3, #1
 800c63e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c640:	e001      	b.n	800c646 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c642:	2300      	movs	r3, #0
 800c644:	637b      	str	r3, [r7, #52]	@ 0x34
 800c646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c648:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f383 8811 	msr	BASEPRI, r3
}
 800c650:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c654:	4618      	mov	r0, r3
 800c656:	3738      	adds	r7, #56	@ 0x38
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d10b      	bne.n	800c686 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	60fb      	str	r3, [r7, #12]
}
 800c680:	bf00      	nop
 800c682:	bf00      	nop
 800c684:	e7fd      	b.n	800c682 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800c686:	f001 fd37 	bl	800e0f8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c696:	f001 fd61 	bl	800e15c <vPortExitCritical>

	return uxReturn;
 800c69a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c69c:	4618      	mov	r0, r3
 800c69e:	3718      	adds	r7, #24
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d10d      	bne.n	800c6de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d14d      	bne.n	800c766 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 ffc6 	bl	800d660 <xTaskPriorityDisinherit>
 800c6d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	609a      	str	r2, [r3, #8]
 800c6dc:	e043      	b.n	800c766 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d119      	bne.n	800c718 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6858      	ldr	r0, [r3, #4]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	68b9      	ldr	r1, [r7, #8]
 800c6f0:	f00f fe69 	bl	801c3c6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6fc:	441a      	add	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d32b      	bcc.n	800c766 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	605a      	str	r2, [r3, #4]
 800c716:	e026      	b.n	800c766 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	68d8      	ldr	r0, [r3, #12]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c720:	461a      	mov	r2, r3
 800c722:	68b9      	ldr	r1, [r7, #8]
 800c724:	f00f fe4f 	bl	801c3c6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	68da      	ldr	r2, [r3, #12]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c730:	425b      	negs	r3, r3
 800c732:	441a      	add	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	68da      	ldr	r2, [r3, #12]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d207      	bcs.n	800c754 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	689a      	ldr	r2, [r3, #8]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c74c:	425b      	negs	r3, r3
 800c74e:	441a      	add	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b02      	cmp	r3, #2
 800c758:	d105      	bne.n	800c766 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	3b01      	subs	r3, #1
 800c764:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c76e:	697b      	ldr	r3, [r7, #20]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3718      	adds	r7, #24
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c786:	2b00      	cmp	r3, #0
 800c788:	d018      	beq.n	800c7bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68da      	ldr	r2, [r3, #12]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c792:	441a      	add	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	68da      	ldr	r2, [r3, #12]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d303      	bcc.n	800c7ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	68d9      	ldr	r1, [r3, #12]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	6838      	ldr	r0, [r7, #0]
 800c7b8:	f00f fe05 	bl	801c3c6 <memcpy>
	}
}
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7cc:	f001 fc94 	bl	800e0f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7d8:	e011      	b.n	800c7fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d012      	beq.n	800c808 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3324      	adds	r3, #36	@ 0x24
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 fd34 	bl	800d254 <xTaskRemoveFromEventList>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c7f2:	f000 fe35 	bl	800d460 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c802:	2b00      	cmp	r3, #0
 800c804:	dce9      	bgt.n	800c7da <prvUnlockQueue+0x16>
 800c806:	e000      	b.n	800c80a <prvUnlockQueue+0x46>
					break;
 800c808:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	22ff      	movs	r2, #255	@ 0xff
 800c80e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c812:	f001 fca3 	bl	800e15c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c816:	f001 fc6f 	bl	800e0f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c820:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c822:	e011      	b.n	800c848 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d012      	beq.n	800c852 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	3310      	adds	r3, #16
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fd0f 	bl	800d254 <xTaskRemoveFromEventList>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c83c:	f000 fe10 	bl	800d460 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c840:	7bbb      	ldrb	r3, [r7, #14]
 800c842:	3b01      	subs	r3, #1
 800c844:	b2db      	uxtb	r3, r3
 800c846:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c848:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	dce9      	bgt.n	800c824 <prvUnlockQueue+0x60>
 800c850:	e000      	b.n	800c854 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c852:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	22ff      	movs	r2, #255	@ 0xff
 800c858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c85c:	f001 fc7e 	bl	800e15c <vPortExitCritical>
}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c870:	f001 fc42 	bl	800e0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c87c:	2301      	movs	r3, #1
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	e001      	b.n	800c886 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c882:	2300      	movs	r3, #0
 800c884:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c886:	f001 fc69 	bl	800e15c <vPortExitCritical>

	return xReturn;
 800c88a:	68fb      	ldr	r3, [r7, #12]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c89c:	f001 fc2c 	bl	800e0f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d102      	bne.n	800c8b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	60fb      	str	r3, [r7, #12]
 800c8b0:	e001      	b.n	800c8b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8b6:	f001 fc51 	bl	800e15c <vPortExitCritical>

	return xReturn;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	60fb      	str	r3, [r7, #12]
 800c8d2:	e014      	b.n	800c8fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8d4:	4a0f      	ldr	r2, [pc, #60]	@ (800c914 <vQueueAddToRegistry+0x50>)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d10b      	bne.n	800c8f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c8e0:	490c      	ldr	r1, [pc, #48]	@ (800c914 <vQueueAddToRegistry+0x50>)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	683a      	ldr	r2, [r7, #0]
 800c8e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c8ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c914 <vQueueAddToRegistry+0x50>)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	00db      	lsls	r3, r3, #3
 800c8f0:	4413      	add	r3, r2
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c8f6:	e006      	b.n	800c906 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	60fb      	str	r3, [r7, #12]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2b07      	cmp	r3, #7
 800c902:	d9e7      	bls.n	800c8d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c904:	bf00      	nop
 800c906:	bf00      	nop
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	20005144 	.word	0x20005144

0800c918 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c928:	f001 fbe6 	bl	800e0f8 <vPortEnterCritical>
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c932:	b25b      	sxtb	r3, r3
 800c934:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c938:	d103      	bne.n	800c942 <vQueueWaitForMessageRestricted+0x2a>
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c948:	b25b      	sxtb	r3, r3
 800c94a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c94e:	d103      	bne.n	800c958 <vQueueWaitForMessageRestricted+0x40>
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c958:	f001 fc00 	bl	800e15c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c960:	2b00      	cmp	r3, #0
 800c962:	d106      	bne.n	800c972 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	3324      	adds	r3, #36	@ 0x24
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	68b9      	ldr	r1, [r7, #8]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 fc45 	bl	800d1fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c972:	6978      	ldr	r0, [r7, #20]
 800c974:	f7ff ff26 	bl	800c7c4 <prvUnlockQueue>
	}
 800c978:	bf00      	nop
 800c97a:	3718      	adds	r7, #24
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c980:	b580      	push	{r7, lr}
 800c982:	b08e      	sub	sp, #56	@ 0x38
 800c984:	af04      	add	r7, sp, #16
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]
 800c98c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c990:	2b00      	cmp	r3, #0
 800c992:	d10b      	bne.n	800c9ac <xTaskCreateStatic+0x2c>
	__asm volatile
 800c994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	623b      	str	r3, [r7, #32]
}
 800c9a6:	bf00      	nop
 800c9a8:	bf00      	nop
 800c9aa:	e7fd      	b.n	800c9a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10b      	bne.n	800c9ca <xTaskCreateStatic+0x4a>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b6:	f383 8811 	msr	BASEPRI, r3
 800c9ba:	f3bf 8f6f 	isb	sy
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	61fb      	str	r3, [r7, #28]
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop
 800c9c8:	e7fd      	b.n	800c9c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c9ca:	235c      	movs	r3, #92	@ 0x5c
 800c9cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c9d2:	d00b      	beq.n	800c9ec <xTaskCreateStatic+0x6c>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	61bb      	str	r3, [r7, #24]
}
 800c9e6:	bf00      	nop
 800c9e8:	bf00      	nop
 800c9ea:	e7fd      	b.n	800c9e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d01e      	beq.n	800ca32 <xTaskCreateStatic+0xb2>
 800c9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d01b      	beq.n	800ca32 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca06:	2202      	movs	r2, #2
 800ca08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9303      	str	r3, [sp, #12]
 800ca10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca12:	9302      	str	r3, [sp, #8]
 800ca14:	f107 0314 	add.w	r3, r7, #20
 800ca18:	9301      	str	r3, [sp, #4]
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	68b9      	ldr	r1, [r7, #8]
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f000 f850 	bl	800caca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca2c:	f000 f8de 	bl	800cbec <prvAddNewTaskToReadyList>
 800ca30:	e001      	b.n	800ca36 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ca32:	2300      	movs	r3, #0
 800ca34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca36:	697b      	ldr	r3, [r7, #20]
	}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3728      	adds	r7, #40	@ 0x28
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b08c      	sub	sp, #48	@ 0x30
 800ca44:	af04      	add	r7, sp, #16
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	603b      	str	r3, [r7, #0]
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca50:	88fb      	ldrh	r3, [r7, #6]
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4618      	mov	r0, r3
 800ca56:	f001 fc71 	bl	800e33c <pvPortMalloc>
 800ca5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d00e      	beq.n	800ca80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca62:	205c      	movs	r0, #92	@ 0x5c
 800ca64:	f001 fc6a 	bl	800e33c <pvPortMalloc>
 800ca68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d003      	beq.n	800ca78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	697a      	ldr	r2, [r7, #20]
 800ca74:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca76:	e005      	b.n	800ca84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca78:	6978      	ldr	r0, [r7, #20]
 800ca7a:	f001 fd2d 	bl	800e4d8 <vPortFree>
 800ca7e:	e001      	b.n	800ca84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca80:	2300      	movs	r3, #0
 800ca82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d017      	beq.n	800caba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca92:	88fa      	ldrh	r2, [r7, #6]
 800ca94:	2300      	movs	r3, #0
 800ca96:	9303      	str	r3, [sp, #12]
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	9302      	str	r3, [sp, #8]
 800ca9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9e:	9301      	str	r3, [sp, #4]
 800caa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	68b9      	ldr	r1, [r7, #8]
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 f80e 	bl	800caca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caae:	69f8      	ldr	r0, [r7, #28]
 800cab0:	f000 f89c 	bl	800cbec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cab4:	2301      	movs	r3, #1
 800cab6:	61bb      	str	r3, [r7, #24]
 800cab8:	e002      	b.n	800cac0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800caba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cabe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cac0:	69bb      	ldr	r3, [r7, #24]
	}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3720      	adds	r7, #32
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b088      	sub	sp, #32
 800cace:	af00      	add	r7, sp, #0
 800cad0:	60f8      	str	r0, [r7, #12]
 800cad2:	60b9      	str	r1, [r7, #8]
 800cad4:	607a      	str	r2, [r7, #4]
 800cad6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cada:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	461a      	mov	r2, r3
 800cae2:	21a5      	movs	r1, #165	@ 0xa5
 800cae4:	f00f fba6 	bl	801c234 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caf2:	3b01      	subs	r3, #1
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	4413      	add	r3, r2
 800caf8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	f023 0307 	bic.w	r3, r3, #7
 800cb00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	f003 0307 	and.w	r3, r3, #7
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00b      	beq.n	800cb24 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	617b      	str	r3, [r7, #20]
}
 800cb1e:	bf00      	nop
 800cb20:	bf00      	nop
 800cb22:	e7fd      	b.n	800cb20 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d01f      	beq.n	800cb6a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	61fb      	str	r3, [r7, #28]
 800cb2e:	e012      	b.n	800cb56 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	4413      	add	r3, r2
 800cb36:	7819      	ldrb	r1, [r3, #0]
 800cb38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	3334      	adds	r3, #52	@ 0x34
 800cb40:	460a      	mov	r2, r1
 800cb42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	69fb      	ldr	r3, [r7, #28]
 800cb48:	4413      	add	r3, r2
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d006      	beq.n	800cb5e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	3301      	adds	r3, #1
 800cb54:	61fb      	str	r3, [r7, #28]
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	2b0f      	cmp	r3, #15
 800cb5a:	d9e9      	bls.n	800cb30 <prvInitialiseNewTask+0x66>
 800cb5c:	e000      	b.n	800cb60 <prvInitialiseNewTask+0x96>
			{
				break;
 800cb5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb62:	2200      	movs	r2, #0
 800cb64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cb68:	e003      	b.n	800cb72 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb74:	2b37      	cmp	r3, #55	@ 0x37
 800cb76:	d901      	bls.n	800cb7c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb78:	2337      	movs	r3, #55	@ 0x37
 800cb7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb80:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb86:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb90:	3304      	adds	r3, #4
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff f884 	bl	800bca0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9a:	3318      	adds	r3, #24
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff f87f 	bl	800bca0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cba6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbaa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbb6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbba:	2200      	movs	r2, #0
 800cbbc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	68f9      	ldr	r1, [r7, #12]
 800cbca:	69b8      	ldr	r0, [r7, #24]
 800cbcc:	f001 f966 	bl	800de9c <pxPortInitialiseStack>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbe2:	bf00      	nop
 800cbe4:	3720      	adds	r7, #32
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
	...

0800cbec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cbf4:	f001 fa80 	bl	800e0f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cbf8:	4b2d      	ldr	r3, [pc, #180]	@ (800ccb0 <prvAddNewTaskToReadyList+0xc4>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	4a2c      	ldr	r2, [pc, #176]	@ (800ccb0 <prvAddNewTaskToReadyList+0xc4>)
 800cc00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc02:	4b2c      	ldr	r3, [pc, #176]	@ (800ccb4 <prvAddNewTaskToReadyList+0xc8>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d109      	bne.n	800cc1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc0a:	4a2a      	ldr	r2, [pc, #168]	@ (800ccb4 <prvAddNewTaskToReadyList+0xc8>)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc10:	4b27      	ldr	r3, [pc, #156]	@ (800ccb0 <prvAddNewTaskToReadyList+0xc4>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d110      	bne.n	800cc3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc18:	f000 fc46 	bl	800d4a8 <prvInitialiseTaskLists>
 800cc1c:	e00d      	b.n	800cc3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc1e:	4b26      	ldr	r3, [pc, #152]	@ (800ccb8 <prvAddNewTaskToReadyList+0xcc>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d109      	bne.n	800cc3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc26:	4b23      	ldr	r3, [pc, #140]	@ (800ccb4 <prvAddNewTaskToReadyList+0xc8>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d802      	bhi.n	800cc3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc34:	4a1f      	ldr	r2, [pc, #124]	@ (800ccb4 <prvAddNewTaskToReadyList+0xc8>)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc3a:	4b20      	ldr	r3, [pc, #128]	@ (800ccbc <prvAddNewTaskToReadyList+0xd0>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	4a1e      	ldr	r2, [pc, #120]	@ (800ccbc <prvAddNewTaskToReadyList+0xd0>)
 800cc42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cc44:	4b1d      	ldr	r3, [pc, #116]	@ (800ccbc <prvAddNewTaskToReadyList+0xd0>)
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc50:	4b1b      	ldr	r3, [pc, #108]	@ (800ccc0 <prvAddNewTaskToReadyList+0xd4>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d903      	bls.n	800cc60 <prvAddNewTaskToReadyList+0x74>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5c:	4a18      	ldr	r2, [pc, #96]	@ (800ccc0 <prvAddNewTaskToReadyList+0xd4>)
 800cc5e:	6013      	str	r3, [r2, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc64:	4613      	mov	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4a15      	ldr	r2, [pc, #84]	@ (800ccc4 <prvAddNewTaskToReadyList+0xd8>)
 800cc6e:	441a      	add	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	3304      	adds	r3, #4
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	f7ff f81f 	bl	800bcba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc7c:	f001 fa6e 	bl	800e15c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc80:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb8 <prvAddNewTaskToReadyList+0xcc>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00e      	beq.n	800cca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc88:	4b0a      	ldr	r3, [pc, #40]	@ (800ccb4 <prvAddNewTaskToReadyList+0xc8>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d207      	bcs.n	800cca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc96:	4b0c      	ldr	r3, [pc, #48]	@ (800ccc8 <prvAddNewTaskToReadyList+0xdc>)
 800cc98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cca6:	bf00      	nop
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20005658 	.word	0x20005658
 800ccb4:	20005184 	.word	0x20005184
 800ccb8:	20005664 	.word	0x20005664
 800ccbc:	20005674 	.word	0x20005674
 800ccc0:	20005660 	.word	0x20005660
 800ccc4:	20005188 	.word	0x20005188
 800ccc8:	e000ed04 	.word	0xe000ed04

0800cccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d018      	beq.n	800cd10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ccde:	4b14      	ldr	r3, [pc, #80]	@ (800cd30 <vTaskDelay+0x64>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00b      	beq.n	800ccfe <vTaskDelay+0x32>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccea:	f383 8811 	msr	BASEPRI, r3
 800ccee:	f3bf 8f6f 	isb	sy
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	60bb      	str	r3, [r7, #8]
}
 800ccf8:	bf00      	nop
 800ccfa:	bf00      	nop
 800ccfc:	e7fd      	b.n	800ccfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ccfe:	f000 f883 	bl	800ce08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd02:	2100      	movs	r1, #0
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fd1b 	bl	800d740 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd0a:	f000 f88b 	bl	800ce24 <xTaskResumeAll>
 800cd0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d107      	bne.n	800cd26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cd16:	4b07      	ldr	r3, [pc, #28]	@ (800cd34 <vTaskDelay+0x68>)
 800cd18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd26:	bf00      	nop
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	20005680 	.word	0x20005680
 800cd34:	e000ed04 	.word	0xe000ed04

0800cd38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b08a      	sub	sp, #40	@ 0x28
 800cd3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd46:	463a      	mov	r2, r7
 800cd48:	1d39      	adds	r1, r7, #4
 800cd4a:	f107 0308 	add.w	r3, r7, #8
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fe ff52 	bl	800bbf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	9202      	str	r2, [sp, #8]
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	2300      	movs	r3, #0
 800cd60:	9300      	str	r3, [sp, #0]
 800cd62:	2300      	movs	r3, #0
 800cd64:	460a      	mov	r2, r1
 800cd66:	4922      	ldr	r1, [pc, #136]	@ (800cdf0 <vTaskStartScheduler+0xb8>)
 800cd68:	4822      	ldr	r0, [pc, #136]	@ (800cdf4 <vTaskStartScheduler+0xbc>)
 800cd6a:	f7ff fe09 	bl	800c980 <xTaskCreateStatic>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	4a21      	ldr	r2, [pc, #132]	@ (800cdf8 <vTaskStartScheduler+0xc0>)
 800cd72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd74:	4b20      	ldr	r3, [pc, #128]	@ (800cdf8 <vTaskStartScheduler+0xc0>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	617b      	str	r3, [r7, #20]
 800cd80:	e001      	b.n	800cd86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d102      	bne.n	800cd92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cd8c:	f000 fd2c 	bl	800d7e8 <xTimerCreateTimerTask>
 800cd90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	2b01      	cmp	r3, #1
 800cd96:	d116      	bne.n	800cdc6 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	613b      	str	r3, [r7, #16]
}
 800cdaa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cdac:	4b13      	ldr	r3, [pc, #76]	@ (800cdfc <vTaskStartScheduler+0xc4>)
 800cdae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cdb4:	4b12      	ldr	r3, [pc, #72]	@ (800ce00 <vTaskStartScheduler+0xc8>)
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cdba:	4b12      	ldr	r3, [pc, #72]	@ (800ce04 <vTaskStartScheduler+0xcc>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdc0:	f001 f8f6 	bl	800dfb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cdc4:	e00f      	b.n	800cde6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdcc:	d10b      	bne.n	800cde6 <vTaskStartScheduler+0xae>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	60fb      	str	r3, [r7, #12]
}
 800cde0:	bf00      	nop
 800cde2:	bf00      	nop
 800cde4:	e7fd      	b.n	800cde2 <vTaskStartScheduler+0xaa>
}
 800cde6:	bf00      	nop
 800cde8:	3718      	adds	r7, #24
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	0801d230 	.word	0x0801d230
 800cdf4:	0800d479 	.word	0x0800d479
 800cdf8:	2000567c 	.word	0x2000567c
 800cdfc:	20005678 	.word	0x20005678
 800ce00:	20005664 	.word	0x20005664
 800ce04:	2000565c 	.word	0x2000565c

0800ce08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce08:	b480      	push	{r7}
 800ce0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ce0c:	4b04      	ldr	r3, [pc, #16]	@ (800ce20 <vTaskSuspendAll+0x18>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	3301      	adds	r3, #1
 800ce12:	4a03      	ldr	r2, [pc, #12]	@ (800ce20 <vTaskSuspendAll+0x18>)
 800ce14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ce16:	bf00      	nop
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1e:	4770      	bx	lr
 800ce20:	20005680 	.word	0x20005680

0800ce24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce32:	4b42      	ldr	r3, [pc, #264]	@ (800cf3c <xTaskResumeAll+0x118>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10b      	bne.n	800ce52 <xTaskResumeAll+0x2e>
	__asm volatile
 800ce3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce3e:	f383 8811 	msr	BASEPRI, r3
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	603b      	str	r3, [r7, #0]
}
 800ce4c:	bf00      	nop
 800ce4e:	bf00      	nop
 800ce50:	e7fd      	b.n	800ce4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce52:	f001 f951 	bl	800e0f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce56:	4b39      	ldr	r3, [pc, #228]	@ (800cf3c <xTaskResumeAll+0x118>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	4a37      	ldr	r2, [pc, #220]	@ (800cf3c <xTaskResumeAll+0x118>)
 800ce5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce60:	4b36      	ldr	r3, [pc, #216]	@ (800cf3c <xTaskResumeAll+0x118>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d162      	bne.n	800cf2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce68:	4b35      	ldr	r3, [pc, #212]	@ (800cf40 <xTaskResumeAll+0x11c>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d05e      	beq.n	800cf2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce70:	e02f      	b.n	800ced2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce72:	4b34      	ldr	r3, [pc, #208]	@ (800cf44 <xTaskResumeAll+0x120>)
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	3318      	adds	r3, #24
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fe ff78 	bl	800bd74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	3304      	adds	r3, #4
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fe ff73 	bl	800bd74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce92:	4b2d      	ldr	r3, [pc, #180]	@ (800cf48 <xTaskResumeAll+0x124>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d903      	bls.n	800cea2 <xTaskResumeAll+0x7e>
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce9e:	4a2a      	ldr	r2, [pc, #168]	@ (800cf48 <xTaskResumeAll+0x124>)
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cea6:	4613      	mov	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4a27      	ldr	r2, [pc, #156]	@ (800cf4c <xTaskResumeAll+0x128>)
 800ceb0:	441a      	add	r2, r3
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4610      	mov	r0, r2
 800ceba:	f7fe fefe 	bl	800bcba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cec2:	4b23      	ldr	r3, [pc, #140]	@ (800cf50 <xTaskResumeAll+0x12c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d302      	bcc.n	800ced2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cecc:	4b21      	ldr	r3, [pc, #132]	@ (800cf54 <xTaskResumeAll+0x130>)
 800cece:	2201      	movs	r2, #1
 800ced0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ced2:	4b1c      	ldr	r3, [pc, #112]	@ (800cf44 <xTaskResumeAll+0x120>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1cb      	bne.n	800ce72 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cee0:	f000 fb80 	bl	800d5e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cee4:	4b1c      	ldr	r3, [pc, #112]	@ (800cf58 <xTaskResumeAll+0x134>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d010      	beq.n	800cf12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cef0:	f000 f846 	bl	800cf80 <xTaskIncrementTick>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d002      	beq.n	800cf00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cefa:	4b16      	ldr	r3, [pc, #88]	@ (800cf54 <xTaskResumeAll+0x130>)
 800cefc:	2201      	movs	r2, #1
 800cefe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	3b01      	subs	r3, #1
 800cf04:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1f1      	bne.n	800cef0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cf0c:	4b12      	ldr	r3, [pc, #72]	@ (800cf58 <xTaskResumeAll+0x134>)
 800cf0e:	2200      	movs	r2, #0
 800cf10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf12:	4b10      	ldr	r3, [pc, #64]	@ (800cf54 <xTaskResumeAll+0x130>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d009      	beq.n	800cf2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf1e:	4b0f      	ldr	r3, [pc, #60]	@ (800cf5c <xTaskResumeAll+0x138>)
 800cf20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf2e:	f001 f915 	bl	800e15c <vPortExitCritical>

	return xAlreadyYielded;
 800cf32:	68bb      	ldr	r3, [r7, #8]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	20005680 	.word	0x20005680
 800cf40:	20005658 	.word	0x20005658
 800cf44:	20005618 	.word	0x20005618
 800cf48:	20005660 	.word	0x20005660
 800cf4c:	20005188 	.word	0x20005188
 800cf50:	20005184 	.word	0x20005184
 800cf54:	2000566c 	.word	0x2000566c
 800cf58:	20005668 	.word	0x20005668
 800cf5c:	e000ed04 	.word	0xe000ed04

0800cf60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf66:	4b05      	ldr	r3, [pc, #20]	@ (800cf7c <xTaskGetTickCount+0x1c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf6c:	687b      	ldr	r3, [r7, #4]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	370c      	adds	r7, #12
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	2000565c 	.word	0x2000565c

0800cf80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b086      	sub	sp, #24
 800cf84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf86:	2300      	movs	r3, #0
 800cf88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf8a:	4b4f      	ldr	r3, [pc, #316]	@ (800d0c8 <xTaskIncrementTick+0x148>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f040 8090 	bne.w	800d0b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf94:	4b4d      	ldr	r3, [pc, #308]	@ (800d0cc <xTaskIncrementTick+0x14c>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf9c:	4a4b      	ldr	r2, [pc, #300]	@ (800d0cc <xTaskIncrementTick+0x14c>)
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d121      	bne.n	800cfec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfa8:	4b49      	ldr	r3, [pc, #292]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00b      	beq.n	800cfca <xTaskIncrementTick+0x4a>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	603b      	str	r3, [r7, #0]
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop
 800cfc8:	e7fd      	b.n	800cfc6 <xTaskIncrementTick+0x46>
 800cfca:	4b41      	ldr	r3, [pc, #260]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	4b40      	ldr	r3, [pc, #256]	@ (800d0d4 <xTaskIncrementTick+0x154>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a3e      	ldr	r2, [pc, #248]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cfd6:	6013      	str	r3, [r2, #0]
 800cfd8:	4a3e      	ldr	r2, [pc, #248]	@ (800d0d4 <xTaskIncrementTick+0x154>)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6013      	str	r3, [r2, #0]
 800cfde:	4b3e      	ldr	r3, [pc, #248]	@ (800d0d8 <xTaskIncrementTick+0x158>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	4a3c      	ldr	r2, [pc, #240]	@ (800d0d8 <xTaskIncrementTick+0x158>)
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	f000 fafc 	bl	800d5e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cfec:	4b3b      	ldr	r3, [pc, #236]	@ (800d0dc <xTaskIncrementTick+0x15c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	693a      	ldr	r2, [r7, #16]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d349      	bcc.n	800d08a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cff6:	4b36      	ldr	r3, [pc, #216]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d104      	bne.n	800d00a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d000:	4b36      	ldr	r3, [pc, #216]	@ (800d0dc <xTaskIncrementTick+0x15c>)
 800d002:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d006:	601a      	str	r2, [r3, #0]
					break;
 800d008:	e03f      	b.n	800d08a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d00a:	4b31      	ldr	r3, [pc, #196]	@ (800d0d0 <xTaskIncrementTick+0x150>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d01a:	693a      	ldr	r2, [r7, #16]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d203      	bcs.n	800d02a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d022:	4a2e      	ldr	r2, [pc, #184]	@ (800d0dc <xTaskIncrementTick+0x15c>)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d028:	e02f      	b.n	800d08a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fea0 	bl	800bd74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d004      	beq.n	800d046 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	3318      	adds	r3, #24
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fe97 	bl	800bd74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d04a:	4b25      	ldr	r3, [pc, #148]	@ (800d0e0 <xTaskIncrementTick+0x160>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d903      	bls.n	800d05a <xTaskIncrementTick+0xda>
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d056:	4a22      	ldr	r2, [pc, #136]	@ (800d0e0 <xTaskIncrementTick+0x160>)
 800d058:	6013      	str	r3, [r2, #0]
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d05e:	4613      	mov	r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4a1f      	ldr	r2, [pc, #124]	@ (800d0e4 <xTaskIncrementTick+0x164>)
 800d068:	441a      	add	r2, r3
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	3304      	adds	r3, #4
 800d06e:	4619      	mov	r1, r3
 800d070:	4610      	mov	r0, r2
 800d072:	f7fe fe22 	bl	800bcba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d07a:	4b1b      	ldr	r3, [pc, #108]	@ (800d0e8 <xTaskIncrementTick+0x168>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d080:	429a      	cmp	r2, r3
 800d082:	d3b8      	bcc.n	800cff6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d084:	2301      	movs	r3, #1
 800d086:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d088:	e7b5      	b.n	800cff6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d08a:	4b17      	ldr	r3, [pc, #92]	@ (800d0e8 <xTaskIncrementTick+0x168>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d090:	4914      	ldr	r1, [pc, #80]	@ (800d0e4 <xTaskIncrementTick+0x164>)
 800d092:	4613      	mov	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	440b      	add	r3, r1
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d901      	bls.n	800d0a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d0a6:	4b11      	ldr	r3, [pc, #68]	@ (800d0ec <xTaskIncrementTick+0x16c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d007      	beq.n	800d0be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	617b      	str	r3, [r7, #20]
 800d0b2:	e004      	b.n	800d0be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d0b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d0f0 <xTaskIncrementTick+0x170>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	4a0d      	ldr	r2, [pc, #52]	@ (800d0f0 <xTaskIncrementTick+0x170>)
 800d0bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d0be:	697b      	ldr	r3, [r7, #20]
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3718      	adds	r7, #24
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	20005680 	.word	0x20005680
 800d0cc:	2000565c 	.word	0x2000565c
 800d0d0:	20005610 	.word	0x20005610
 800d0d4:	20005614 	.word	0x20005614
 800d0d8:	20005670 	.word	0x20005670
 800d0dc:	20005678 	.word	0x20005678
 800d0e0:	20005660 	.word	0x20005660
 800d0e4:	20005188 	.word	0x20005188
 800d0e8:	20005184 	.word	0x20005184
 800d0ec:	2000566c 	.word	0x2000566c
 800d0f0:	20005668 	.word	0x20005668

0800d0f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d0fa:	4b28      	ldr	r3, [pc, #160]	@ (800d19c <vTaskSwitchContext+0xa8>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d003      	beq.n	800d10a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d102:	4b27      	ldr	r3, [pc, #156]	@ (800d1a0 <vTaskSwitchContext+0xac>)
 800d104:	2201      	movs	r2, #1
 800d106:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d108:	e042      	b.n	800d190 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800d10a:	4b25      	ldr	r3, [pc, #148]	@ (800d1a0 <vTaskSwitchContext+0xac>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d110:	4b24      	ldr	r3, [pc, #144]	@ (800d1a4 <vTaskSwitchContext+0xb0>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	60fb      	str	r3, [r7, #12]
 800d116:	e011      	b.n	800d13c <vTaskSwitchContext+0x48>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10b      	bne.n	800d136 <vTaskSwitchContext+0x42>
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	607b      	str	r3, [r7, #4]
}
 800d130:	bf00      	nop
 800d132:	bf00      	nop
 800d134:	e7fd      	b.n	800d132 <vTaskSwitchContext+0x3e>
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	3b01      	subs	r3, #1
 800d13a:	60fb      	str	r3, [r7, #12]
 800d13c:	491a      	ldr	r1, [pc, #104]	@ (800d1a8 <vTaskSwitchContext+0xb4>)
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	4613      	mov	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	4413      	add	r3, r2
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	440b      	add	r3, r1
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d0e3      	beq.n	800d118 <vTaskSwitchContext+0x24>
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4a13      	ldr	r2, [pc, #76]	@ (800d1a8 <vTaskSwitchContext+0xb4>)
 800d15c:	4413      	add	r3, r2
 800d15e:	60bb      	str	r3, [r7, #8]
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	605a      	str	r2, [r3, #4]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	3308      	adds	r3, #8
 800d172:	429a      	cmp	r2, r3
 800d174:	d104      	bne.n	800d180 <vTaskSwitchContext+0x8c>
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	605a      	str	r2, [r3, #4]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	4a09      	ldr	r2, [pc, #36]	@ (800d1ac <vTaskSwitchContext+0xb8>)
 800d188:	6013      	str	r3, [r2, #0]
 800d18a:	4a06      	ldr	r2, [pc, #24]	@ (800d1a4 <vTaskSwitchContext+0xb0>)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6013      	str	r3, [r2, #0]
}
 800d190:	bf00      	nop
 800d192:	3714      	adds	r7, #20
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	20005680 	.word	0x20005680
 800d1a0:	2000566c 	.word	0x2000566c
 800d1a4:	20005660 	.word	0x20005660
 800d1a8:	20005188 	.word	0x20005188
 800d1ac:	20005184 	.word	0x20005184

0800d1b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10b      	bne.n	800d1d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	60fb      	str	r3, [r7, #12]
}
 800d1d2:	bf00      	nop
 800d1d4:	bf00      	nop
 800d1d6:	e7fd      	b.n	800d1d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1d8:	4b07      	ldr	r3, [pc, #28]	@ (800d1f8 <vTaskPlaceOnEventList+0x48>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3318      	adds	r3, #24
 800d1de:	4619      	mov	r1, r3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7fe fd8e 	bl	800bd02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1e6:	2101      	movs	r1, #1
 800d1e8:	6838      	ldr	r0, [r7, #0]
 800d1ea:	f000 faa9 	bl	800d740 <prvAddCurrentTaskToDelayedList>
}
 800d1ee:	bf00      	nop
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	20005184 	.word	0x20005184

0800d1fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b086      	sub	sp, #24
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10b      	bne.n	800d226 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	617b      	str	r3, [r7, #20]
}
 800d220:	bf00      	nop
 800d222:	bf00      	nop
 800d224:	e7fd      	b.n	800d222 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d226:	4b0a      	ldr	r3, [pc, #40]	@ (800d250 <vTaskPlaceOnEventListRestricted+0x54>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	3318      	adds	r3, #24
 800d22c:	4619      	mov	r1, r3
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f7fe fd43 	bl	800bcba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d23a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d23e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d240:	6879      	ldr	r1, [r7, #4]
 800d242:	68b8      	ldr	r0, [r7, #8]
 800d244:	f000 fa7c 	bl	800d740 <prvAddCurrentTaskToDelayedList>
	}
 800d248:	bf00      	nop
 800d24a:	3718      	adds	r7, #24
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	20005184 	.word	0x20005184

0800d254 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d10b      	bne.n	800d282 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	60fb      	str	r3, [r7, #12]
}
 800d27c:	bf00      	nop
 800d27e:	bf00      	nop
 800d280:	e7fd      	b.n	800d27e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	3318      	adds	r3, #24
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe fd74 	bl	800bd74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d28c:	4b1d      	ldr	r3, [pc, #116]	@ (800d304 <xTaskRemoveFromEventList+0xb0>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d11d      	bne.n	800d2d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	3304      	adds	r3, #4
 800d298:	4618      	mov	r0, r3
 800d29a:	f7fe fd6b 	bl	800bd74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2a2:	4b19      	ldr	r3, [pc, #100]	@ (800d308 <xTaskRemoveFromEventList+0xb4>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d903      	bls.n	800d2b2 <xTaskRemoveFromEventList+0x5e>
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ae:	4a16      	ldr	r2, [pc, #88]	@ (800d308 <xTaskRemoveFromEventList+0xb4>)
 800d2b0:	6013      	str	r3, [r2, #0]
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4413      	add	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4a13      	ldr	r2, [pc, #76]	@ (800d30c <xTaskRemoveFromEventList+0xb8>)
 800d2c0:	441a      	add	r2, r3
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	f7fe fcf6 	bl	800bcba <vListInsertEnd>
 800d2ce:	e005      	b.n	800d2dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	3318      	adds	r3, #24
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	480e      	ldr	r0, [pc, #56]	@ (800d310 <xTaskRemoveFromEventList+0xbc>)
 800d2d8:	f7fe fcef 	bl	800bcba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d314 <xTaskRemoveFromEventList+0xc0>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d905      	bls.n	800d2f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2ee:	4b0a      	ldr	r3, [pc, #40]	@ (800d318 <xTaskRemoveFromEventList+0xc4>)
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	e001      	b.n	800d2fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d2fa:	697b      	ldr	r3, [r7, #20]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3718      	adds	r7, #24
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	20005680 	.word	0x20005680
 800d308:	20005660 	.word	0x20005660
 800d30c:	20005188 	.word	0x20005188
 800d310:	20005618 	.word	0x20005618
 800d314:	20005184 	.word	0x20005184
 800d318:	2000566c 	.word	0x2000566c

0800d31c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10b      	bne.n	800d342 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	60fb      	str	r3, [r7, #12]
}
 800d33c:	bf00      	nop
 800d33e:	bf00      	nop
 800d340:	e7fd      	b.n	800d33e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d342:	f000 fed9 	bl	800e0f8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d346:	4b07      	ldr	r3, [pc, #28]	@ (800d364 <vTaskSetTimeOutState+0x48>)
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d34e:	4b06      	ldr	r3, [pc, #24]	@ (800d368 <vTaskSetTimeOutState+0x4c>)
 800d350:	681a      	ldr	r2, [r3, #0]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d356:	f000 ff01 	bl	800e15c <vPortExitCritical>
}
 800d35a:	bf00      	nop
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	20005670 	.word	0x20005670
 800d368:	2000565c 	.word	0x2000565c

0800d36c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d374:	4b06      	ldr	r3, [pc, #24]	@ (800d390 <vTaskInternalSetTimeOutState+0x24>)
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d37c:	4b05      	ldr	r3, [pc, #20]	@ (800d394 <vTaskInternalSetTimeOutState+0x28>)
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	605a      	str	r2, [r3, #4]
}
 800d384:	bf00      	nop
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr
 800d390:	20005670 	.word	0x20005670
 800d394:	2000565c 	.word	0x2000565c

0800d398 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b088      	sub	sp, #32
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d10b      	bne.n	800d3c0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	613b      	str	r3, [r7, #16]
}
 800d3ba:	bf00      	nop
 800d3bc:	bf00      	nop
 800d3be:	e7fd      	b.n	800d3bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10b      	bne.n	800d3de <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ca:	f383 8811 	msr	BASEPRI, r3
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	60fb      	str	r3, [r7, #12]
}
 800d3d8:	bf00      	nop
 800d3da:	bf00      	nop
 800d3dc:	e7fd      	b.n	800d3da <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d3de:	f000 fe8b 	bl	800e0f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d3e2:	4b1d      	ldr	r3, [pc, #116]	@ (800d458 <xTaskCheckForTimeOut+0xc0>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	69ba      	ldr	r2, [r7, #24]
 800d3ee:	1ad3      	subs	r3, r2, r3
 800d3f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3fa:	d102      	bne.n	800d402 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	61fb      	str	r3, [r7, #28]
 800d400:	e023      	b.n	800d44a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	4b15      	ldr	r3, [pc, #84]	@ (800d45c <xTaskCheckForTimeOut+0xc4>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d007      	beq.n	800d41e <xTaskCheckForTimeOut+0x86>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	69ba      	ldr	r2, [r7, #24]
 800d414:	429a      	cmp	r2, r3
 800d416:	d302      	bcc.n	800d41e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d418:	2301      	movs	r3, #1
 800d41a:	61fb      	str	r3, [r7, #28]
 800d41c:	e015      	b.n	800d44a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	429a      	cmp	r2, r3
 800d426:	d20b      	bcs.n	800d440 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	1ad2      	subs	r2, r2, r3
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f7ff ff99 	bl	800d36c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d43a:	2300      	movs	r3, #0
 800d43c:	61fb      	str	r3, [r7, #28]
 800d43e:	e004      	b.n	800d44a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	2200      	movs	r2, #0
 800d444:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d446:	2301      	movs	r3, #1
 800d448:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d44a:	f000 fe87 	bl	800e15c <vPortExitCritical>

	return xReturn;
 800d44e:	69fb      	ldr	r3, [r7, #28]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3720      	adds	r7, #32
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	2000565c 	.word	0x2000565c
 800d45c:	20005670 	.word	0x20005670

0800d460 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d460:	b480      	push	{r7}
 800d462:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d464:	4b03      	ldr	r3, [pc, #12]	@ (800d474 <vTaskMissedYield+0x14>)
 800d466:	2201      	movs	r2, #1
 800d468:	601a      	str	r2, [r3, #0]
}
 800d46a:	bf00      	nop
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr
 800d474:	2000566c 	.word	0x2000566c

0800d478 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d480:	f000 f852 	bl	800d528 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d484:	4b06      	ldr	r3, [pc, #24]	@ (800d4a0 <prvIdleTask+0x28>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d9f9      	bls.n	800d480 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d48c:	4b05      	ldr	r3, [pc, #20]	@ (800d4a4 <prvIdleTask+0x2c>)
 800d48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d492:	601a      	str	r2, [r3, #0]
 800d494:	f3bf 8f4f 	dsb	sy
 800d498:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d49c:	e7f0      	b.n	800d480 <prvIdleTask+0x8>
 800d49e:	bf00      	nop
 800d4a0:	20005188 	.word	0x20005188
 800d4a4:	e000ed04 	.word	0xe000ed04

0800d4a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	607b      	str	r3, [r7, #4]
 800d4b2:	e00c      	b.n	800d4ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4413      	add	r3, r2
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	4a12      	ldr	r2, [pc, #72]	@ (800d508 <prvInitialiseTaskLists+0x60>)
 800d4c0:	4413      	add	r3, r2
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fe fbcc 	bl	800bc60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	607b      	str	r3, [r7, #4]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2b37      	cmp	r3, #55	@ 0x37
 800d4d2:	d9ef      	bls.n	800d4b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d4d4:	480d      	ldr	r0, [pc, #52]	@ (800d50c <prvInitialiseTaskLists+0x64>)
 800d4d6:	f7fe fbc3 	bl	800bc60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d4da:	480d      	ldr	r0, [pc, #52]	@ (800d510 <prvInitialiseTaskLists+0x68>)
 800d4dc:	f7fe fbc0 	bl	800bc60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d4e0:	480c      	ldr	r0, [pc, #48]	@ (800d514 <prvInitialiseTaskLists+0x6c>)
 800d4e2:	f7fe fbbd 	bl	800bc60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d4e6:	480c      	ldr	r0, [pc, #48]	@ (800d518 <prvInitialiseTaskLists+0x70>)
 800d4e8:	f7fe fbba 	bl	800bc60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d4ec:	480b      	ldr	r0, [pc, #44]	@ (800d51c <prvInitialiseTaskLists+0x74>)
 800d4ee:	f7fe fbb7 	bl	800bc60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d4f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d520 <prvInitialiseTaskLists+0x78>)
 800d4f4:	4a05      	ldr	r2, [pc, #20]	@ (800d50c <prvInitialiseTaskLists+0x64>)
 800d4f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d524 <prvInitialiseTaskLists+0x7c>)
 800d4fa:	4a05      	ldr	r2, [pc, #20]	@ (800d510 <prvInitialiseTaskLists+0x68>)
 800d4fc:	601a      	str	r2, [r3, #0]
}
 800d4fe:	bf00      	nop
 800d500:	3708      	adds	r7, #8
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20005188 	.word	0x20005188
 800d50c:	200055e8 	.word	0x200055e8
 800d510:	200055fc 	.word	0x200055fc
 800d514:	20005618 	.word	0x20005618
 800d518:	2000562c 	.word	0x2000562c
 800d51c:	20005644 	.word	0x20005644
 800d520:	20005610 	.word	0x20005610
 800d524:	20005614 	.word	0x20005614

0800d528 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d52e:	e019      	b.n	800d564 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d530:	f000 fde2 	bl	800e0f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d534:	4b10      	ldr	r3, [pc, #64]	@ (800d578 <prvCheckTasksWaitingTermination+0x50>)
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	3304      	adds	r3, #4
 800d540:	4618      	mov	r0, r3
 800d542:	f7fe fc17 	bl	800bd74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d546:	4b0d      	ldr	r3, [pc, #52]	@ (800d57c <prvCheckTasksWaitingTermination+0x54>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	3b01      	subs	r3, #1
 800d54c:	4a0b      	ldr	r2, [pc, #44]	@ (800d57c <prvCheckTasksWaitingTermination+0x54>)
 800d54e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d550:	4b0b      	ldr	r3, [pc, #44]	@ (800d580 <prvCheckTasksWaitingTermination+0x58>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	3b01      	subs	r3, #1
 800d556:	4a0a      	ldr	r2, [pc, #40]	@ (800d580 <prvCheckTasksWaitingTermination+0x58>)
 800d558:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d55a:	f000 fdff 	bl	800e15c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f810 	bl	800d584 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d564:	4b06      	ldr	r3, [pc, #24]	@ (800d580 <prvCheckTasksWaitingTermination+0x58>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d1e1      	bne.n	800d530 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d56c:	bf00      	nop
 800d56e:	bf00      	nop
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	2000562c 	.word	0x2000562c
 800d57c:	20005658 	.word	0x20005658
 800d580:	20005640 	.word	0x20005640

0800d584 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d592:	2b00      	cmp	r3, #0
 800d594:	d108      	bne.n	800d5a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 ff9c 	bl	800e4d8 <vPortFree>
				vPortFree( pxTCB );
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 ff99 	bl	800e4d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d5a6:	e019      	b.n	800d5dc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d103      	bne.n	800d5ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 ff90 	bl	800e4d8 <vPortFree>
	}
 800d5b8:	e010      	b.n	800d5dc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d00b      	beq.n	800d5dc <prvDeleteTCB+0x58>
	__asm volatile
 800d5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	60fb      	str	r3, [r7, #12]
}
 800d5d6:	bf00      	nop
 800d5d8:	bf00      	nop
 800d5da:	e7fd      	b.n	800d5d8 <prvDeleteTCB+0x54>
	}
 800d5dc:	bf00      	nop
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5ea:	4b0c      	ldr	r3, [pc, #48]	@ (800d61c <prvResetNextTaskUnblockTime+0x38>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d104      	bne.n	800d5fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d5f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d620 <prvResetNextTaskUnblockTime+0x3c>)
 800d5f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d5fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d5fc:	e008      	b.n	800d610 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5fe:	4b07      	ldr	r3, [pc, #28]	@ (800d61c <prvResetNextTaskUnblockTime+0x38>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	4a04      	ldr	r2, [pc, #16]	@ (800d620 <prvResetNextTaskUnblockTime+0x3c>)
 800d60e:	6013      	str	r3, [r2, #0]
}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr
 800d61c:	20005610 	.word	0x20005610
 800d620:	20005678 	.word	0x20005678

0800d624 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d62a:	4b0b      	ldr	r3, [pc, #44]	@ (800d658 <xTaskGetSchedulerState+0x34>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d102      	bne.n	800d638 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d632:	2301      	movs	r3, #1
 800d634:	607b      	str	r3, [r7, #4]
 800d636:	e008      	b.n	800d64a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d638:	4b08      	ldr	r3, [pc, #32]	@ (800d65c <xTaskGetSchedulerState+0x38>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d102      	bne.n	800d646 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d640:	2302      	movs	r3, #2
 800d642:	607b      	str	r3, [r7, #4]
 800d644:	e001      	b.n	800d64a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d646:	2300      	movs	r3, #0
 800d648:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d64a:	687b      	ldr	r3, [r7, #4]
	}
 800d64c:	4618      	mov	r0, r3
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr
 800d658:	20005664 	.word	0x20005664
 800d65c:	20005680 	.word	0x20005680

0800d660 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d66c:	2300      	movs	r3, #0
 800d66e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d058      	beq.n	800d728 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d676:	4b2f      	ldr	r3, [pc, #188]	@ (800d734 <xTaskPriorityDisinherit+0xd4>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	693a      	ldr	r2, [r7, #16]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d00b      	beq.n	800d698 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	60fb      	str	r3, [r7, #12]
}
 800d692:	bf00      	nop
 800d694:	bf00      	nop
 800d696:	e7fd      	b.n	800d694 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10b      	bne.n	800d6b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	60bb      	str	r3, [r7, #8]
}
 800d6b2:	bf00      	nop
 800d6b4:	bf00      	nop
 800d6b6:	e7fd      	b.n	800d6b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6bc:	1e5a      	subs	r2, r3, #1
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d02c      	beq.n	800d728 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d128      	bne.n	800d728 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	3304      	adds	r3, #4
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fe fb4a 	bl	800bd74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d738 <xTaskPriorityDisinherit+0xd8>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d903      	bls.n	800d708 <xTaskPriorityDisinherit+0xa8>
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d704:	4a0c      	ldr	r2, [pc, #48]	@ (800d738 <xTaskPriorityDisinherit+0xd8>)
 800d706:	6013      	str	r3, [r2, #0]
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d70c:	4613      	mov	r3, r2
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	4413      	add	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4a09      	ldr	r2, [pc, #36]	@ (800d73c <xTaskPriorityDisinherit+0xdc>)
 800d716:	441a      	add	r2, r3
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	3304      	adds	r3, #4
 800d71c:	4619      	mov	r1, r3
 800d71e:	4610      	mov	r0, r2
 800d720:	f7fe facb 	bl	800bcba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d724:	2301      	movs	r3, #1
 800d726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d728:	697b      	ldr	r3, [r7, #20]
	}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3718      	adds	r7, #24
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	20005184 	.word	0x20005184
 800d738:	20005660 	.word	0x20005660
 800d73c:	20005188 	.word	0x20005188

0800d740 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d74a:	4b21      	ldr	r3, [pc, #132]	@ (800d7d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d750:	4b20      	ldr	r3, [pc, #128]	@ (800d7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	3304      	adds	r3, #4
 800d756:	4618      	mov	r0, r3
 800d758:	f7fe fb0c 	bl	800bd74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d762:	d10a      	bne.n	800d77a <prvAddCurrentTaskToDelayedList+0x3a>
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d007      	beq.n	800d77a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d76a:	4b1a      	ldr	r3, [pc, #104]	@ (800d7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	3304      	adds	r3, #4
 800d770:	4619      	mov	r1, r3
 800d772:	4819      	ldr	r0, [pc, #100]	@ (800d7d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800d774:	f7fe faa1 	bl	800bcba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d778:	e026      	b.n	800d7c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	4413      	add	r3, r2
 800d780:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d782:	4b14      	ldr	r3, [pc, #80]	@ (800d7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	68ba      	ldr	r2, [r7, #8]
 800d788:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d78a:	68ba      	ldr	r2, [r7, #8]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d209      	bcs.n	800d7a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d792:	4b12      	ldr	r3, [pc, #72]	@ (800d7dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	3304      	adds	r3, #4
 800d79c:	4619      	mov	r1, r3
 800d79e:	4610      	mov	r0, r2
 800d7a0:	f7fe faaf 	bl	800bd02 <vListInsert>
}
 800d7a4:	e010      	b.n	800d7c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d7a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d7e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d7a8:	681a      	ldr	r2, [r3, #0]
 800d7aa:	4b0a      	ldr	r3, [pc, #40]	@ (800d7d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	3304      	adds	r3, #4
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	f7fe faa5 	bl	800bd02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d7e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d202      	bcs.n	800d7c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d7c2:	4a08      	ldr	r2, [pc, #32]	@ (800d7e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	6013      	str	r3, [r2, #0]
}
 800d7c8:	bf00      	nop
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	2000565c 	.word	0x2000565c
 800d7d4:	20005184 	.word	0x20005184
 800d7d8:	20005644 	.word	0x20005644
 800d7dc:	20005614 	.word	0x20005614
 800d7e0:	20005610 	.word	0x20005610
 800d7e4:	20005678 	.word	0x20005678

0800d7e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b08a      	sub	sp, #40	@ 0x28
 800d7ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d7f2:	f000 fb13 	bl	800de1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d7f6:	4b1d      	ldr	r3, [pc, #116]	@ (800d86c <xTimerCreateTimerTask+0x84>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d021      	beq.n	800d842 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d7fe:	2300      	movs	r3, #0
 800d800:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d802:	2300      	movs	r3, #0
 800d804:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d806:	1d3a      	adds	r2, r7, #4
 800d808:	f107 0108 	add.w	r1, r7, #8
 800d80c:	f107 030c 	add.w	r3, r7, #12
 800d810:	4618      	mov	r0, r3
 800d812:	f7fe fa0b 	bl	800bc2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d816:	6879      	ldr	r1, [r7, #4]
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	9202      	str	r2, [sp, #8]
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	2302      	movs	r3, #2
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	2300      	movs	r3, #0
 800d826:	460a      	mov	r2, r1
 800d828:	4911      	ldr	r1, [pc, #68]	@ (800d870 <xTimerCreateTimerTask+0x88>)
 800d82a:	4812      	ldr	r0, [pc, #72]	@ (800d874 <xTimerCreateTimerTask+0x8c>)
 800d82c:	f7ff f8a8 	bl	800c980 <xTaskCreateStatic>
 800d830:	4603      	mov	r3, r0
 800d832:	4a11      	ldr	r2, [pc, #68]	@ (800d878 <xTimerCreateTimerTask+0x90>)
 800d834:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d836:	4b10      	ldr	r3, [pc, #64]	@ (800d878 <xTimerCreateTimerTask+0x90>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d001      	beq.n	800d842 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d83e:	2301      	movs	r3, #1
 800d840:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d10b      	bne.n	800d860 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	613b      	str	r3, [r7, #16]
}
 800d85a:	bf00      	nop
 800d85c:	bf00      	nop
 800d85e:	e7fd      	b.n	800d85c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d860:	697b      	ldr	r3, [r7, #20]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3718      	adds	r7, #24
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	200056b4 	.word	0x200056b4
 800d870:	0801d238 	.word	0x0801d238
 800d874:	0800d9b5 	.word	0x0800d9b5
 800d878:	200056b8 	.word	0x200056b8

0800d87c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08a      	sub	sp, #40	@ 0x28
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d88a:	2300      	movs	r3, #0
 800d88c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10b      	bne.n	800d8ac <xTimerGenericCommand+0x30>
	__asm volatile
 800d894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d898:	f383 8811 	msr	BASEPRI, r3
 800d89c:	f3bf 8f6f 	isb	sy
 800d8a0:	f3bf 8f4f 	dsb	sy
 800d8a4:	623b      	str	r3, [r7, #32]
}
 800d8a6:	bf00      	nop
 800d8a8:	bf00      	nop
 800d8aa:	e7fd      	b.n	800d8a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d8ac:	4b19      	ldr	r3, [pc, #100]	@ (800d914 <xTimerGenericCommand+0x98>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d02a      	beq.n	800d90a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	2b05      	cmp	r3, #5
 800d8c4:	dc18      	bgt.n	800d8f8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d8c6:	f7ff fead 	bl	800d624 <xTaskGetSchedulerState>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	d109      	bne.n	800d8e4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d8d0:	4b10      	ldr	r3, [pc, #64]	@ (800d914 <xTimerGenericCommand+0x98>)
 800d8d2:	6818      	ldr	r0, [r3, #0]
 800d8d4:	f107 0110 	add.w	r1, r7, #16
 800d8d8:	2300      	movs	r3, #0
 800d8da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8dc:	f7fe fbba 	bl	800c054 <xQueueGenericSend>
 800d8e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800d8e2:	e012      	b.n	800d90a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d8e4:	4b0b      	ldr	r3, [pc, #44]	@ (800d914 <xTimerGenericCommand+0x98>)
 800d8e6:	6818      	ldr	r0, [r3, #0]
 800d8e8:	f107 0110 	add.w	r1, r7, #16
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	f7fe fbb0 	bl	800c054 <xQueueGenericSend>
 800d8f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800d8f6:	e008      	b.n	800d90a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d8f8:	4b06      	ldr	r3, [pc, #24]	@ (800d914 <xTimerGenericCommand+0x98>)
 800d8fa:	6818      	ldr	r0, [r3, #0]
 800d8fc:	f107 0110 	add.w	r1, r7, #16
 800d900:	2300      	movs	r3, #0
 800d902:	683a      	ldr	r2, [r7, #0]
 800d904:	f7fe fca8 	bl	800c258 <xQueueGenericSendFromISR>
 800d908:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3728      	adds	r7, #40	@ 0x28
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	200056b4 	.word	0x200056b4

0800d918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b088      	sub	sp, #32
 800d91c:	af02      	add	r7, sp, #8
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d922:	4b23      	ldr	r3, [pc, #140]	@ (800d9b0 <prvProcessExpiredTimer+0x98>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	3304      	adds	r3, #4
 800d930:	4618      	mov	r0, r3
 800d932:	f7fe fa1f 	bl	800bd74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d93c:	f003 0304 	and.w	r3, r3, #4
 800d940:	2b00      	cmp	r3, #0
 800d942:	d023      	beq.n	800d98c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	699a      	ldr	r2, [r3, #24]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	18d1      	adds	r1, r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	683a      	ldr	r2, [r7, #0]
 800d950:	6978      	ldr	r0, [r7, #20]
 800d952:	f000 f8d5 	bl	800db00 <prvInsertTimerInActiveList>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d020      	beq.n	800d99e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d95c:	2300      	movs	r3, #0
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	2300      	movs	r3, #0
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	2100      	movs	r1, #0
 800d966:	6978      	ldr	r0, [r7, #20]
 800d968:	f7ff ff88 	bl	800d87c <xTimerGenericCommand>
 800d96c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d114      	bne.n	800d99e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	60fb      	str	r3, [r7, #12]
}
 800d986:	bf00      	nop
 800d988:	bf00      	nop
 800d98a:	e7fd      	b.n	800d988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d992:	f023 0301 	bic.w	r3, r3, #1
 800d996:	b2da      	uxtb	r2, r3
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	6978      	ldr	r0, [r7, #20]
 800d9a4:	4798      	blx	r3
}
 800d9a6:	bf00      	nop
 800d9a8:	3718      	adds	r7, #24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	200056ac 	.word	0x200056ac

0800d9b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9bc:	f107 0308 	add.w	r3, r7, #8
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f000 f859 	bl	800da78 <prvGetNextExpireTime>
 800d9c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f000 f805 	bl	800d9dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d9d2:	f000 f8d7 	bl	800db84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9d6:	bf00      	nop
 800d9d8:	e7f0      	b.n	800d9bc <prvTimerTask+0x8>
	...

0800d9dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d9e6:	f7ff fa0f 	bl	800ce08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9ea:	f107 0308 	add.w	r3, r7, #8
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 f866 	bl	800dac0 <prvSampleTimeNow>
 800d9f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d130      	bne.n	800da5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d10a      	bne.n	800da18 <prvProcessTimerOrBlockTask+0x3c>
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	429a      	cmp	r2, r3
 800da08:	d806      	bhi.n	800da18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da0a:	f7ff fa0b 	bl	800ce24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da0e:	68f9      	ldr	r1, [r7, #12]
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f7ff ff81 	bl	800d918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da16:	e024      	b.n	800da62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d008      	beq.n	800da30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da1e:	4b13      	ldr	r3, [pc, #76]	@ (800da6c <prvProcessTimerOrBlockTask+0x90>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d101      	bne.n	800da2c <prvProcessTimerOrBlockTask+0x50>
 800da28:	2301      	movs	r3, #1
 800da2a:	e000      	b.n	800da2e <prvProcessTimerOrBlockTask+0x52>
 800da2c:	2300      	movs	r3, #0
 800da2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800da30:	4b0f      	ldr	r3, [pc, #60]	@ (800da70 <prvProcessTimerOrBlockTask+0x94>)
 800da32:	6818      	ldr	r0, [r3, #0]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	1ad3      	subs	r3, r2, r3
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	4619      	mov	r1, r3
 800da3e:	f7fe ff6b 	bl	800c918 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800da42:	f7ff f9ef 	bl	800ce24 <xTaskResumeAll>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d10a      	bne.n	800da62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800da4c:	4b09      	ldr	r3, [pc, #36]	@ (800da74 <prvProcessTimerOrBlockTask+0x98>)
 800da4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	f3bf 8f6f 	isb	sy
}
 800da5c:	e001      	b.n	800da62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da5e:	f7ff f9e1 	bl	800ce24 <xTaskResumeAll>
}
 800da62:	bf00      	nop
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	200056b0 	.word	0x200056b0
 800da70:	200056b4 	.word	0x200056b4
 800da74:	e000ed04 	.word	0xe000ed04

0800da78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da80:	4b0e      	ldr	r3, [pc, #56]	@ (800dabc <prvGetNextExpireTime+0x44>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <prvGetNextExpireTime+0x16>
 800da8a:	2201      	movs	r2, #1
 800da8c:	e000      	b.n	800da90 <prvGetNextExpireTime+0x18>
 800da8e:	2200      	movs	r2, #0
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d105      	bne.n	800daa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da9c:	4b07      	ldr	r3, [pc, #28]	@ (800dabc <prvGetNextExpireTime+0x44>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	60fb      	str	r3, [r7, #12]
 800daa6:	e001      	b.n	800daac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800daa8:	2300      	movs	r3, #0
 800daaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800daac:	68fb      	ldr	r3, [r7, #12]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3714      	adds	r7, #20
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	200056ac 	.word	0x200056ac

0800dac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dac8:	f7ff fa4a 	bl	800cf60 <xTaskGetTickCount>
 800dacc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dace:	4b0b      	ldr	r3, [pc, #44]	@ (800dafc <prvSampleTimeNow+0x3c>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d205      	bcs.n	800dae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dad8:	f000 f93a 	bl	800dd50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	601a      	str	r2, [r3, #0]
 800dae2:	e002      	b.n	800daea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800daea:	4a04      	ldr	r2, [pc, #16]	@ (800dafc <prvSampleTimeNow+0x3c>)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800daf0:	68fb      	ldr	r3, [r7, #12]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	200056bc 	.word	0x200056bc

0800db00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b086      	sub	sp, #24
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
 800db0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db0e:	2300      	movs	r3, #0
 800db10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db1e:	68ba      	ldr	r2, [r7, #8]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	429a      	cmp	r2, r3
 800db24:	d812      	bhi.n	800db4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	1ad2      	subs	r2, r2, r3
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	699b      	ldr	r3, [r3, #24]
 800db30:	429a      	cmp	r2, r3
 800db32:	d302      	bcc.n	800db3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db34:	2301      	movs	r3, #1
 800db36:	617b      	str	r3, [r7, #20]
 800db38:	e01b      	b.n	800db72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db3a:	4b10      	ldr	r3, [pc, #64]	@ (800db7c <prvInsertTimerInActiveList+0x7c>)
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	3304      	adds	r3, #4
 800db42:	4619      	mov	r1, r3
 800db44:	4610      	mov	r0, r2
 800db46:	f7fe f8dc 	bl	800bd02 <vListInsert>
 800db4a:	e012      	b.n	800db72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	429a      	cmp	r2, r3
 800db52:	d206      	bcs.n	800db62 <prvInsertTimerInActiveList+0x62>
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d302      	bcc.n	800db62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db5c:	2301      	movs	r3, #1
 800db5e:	617b      	str	r3, [r7, #20]
 800db60:	e007      	b.n	800db72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db62:	4b07      	ldr	r3, [pc, #28]	@ (800db80 <prvInsertTimerInActiveList+0x80>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3304      	adds	r3, #4
 800db6a:	4619      	mov	r1, r3
 800db6c:	4610      	mov	r0, r2
 800db6e:	f7fe f8c8 	bl	800bd02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800db72:	697b      	ldr	r3, [r7, #20]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3718      	adds	r7, #24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	200056b0 	.word	0x200056b0
 800db80:	200056ac 	.word	0x200056ac

0800db84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b08e      	sub	sp, #56	@ 0x38
 800db88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db8a:	e0ce      	b.n	800dd2a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	da19      	bge.n	800dbc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800db92:	1d3b      	adds	r3, r7, #4
 800db94:	3304      	adds	r3, #4
 800db96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800db98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d10b      	bne.n	800dbb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800db9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	61fb      	str	r3, [r7, #28]
}
 800dbb0:	bf00      	nop
 800dbb2:	bf00      	nop
 800dbb4:	e7fd      	b.n	800dbb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbbc:	6850      	ldr	r0, [r2, #4]
 800dbbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbc0:	6892      	ldr	r2, [r2, #8]
 800dbc2:	4611      	mov	r1, r2
 800dbc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f2c0 80ae 	blt.w	800dd2a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d004      	beq.n	800dbe4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbdc:	3304      	adds	r3, #4
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fe f8c8 	bl	800bd74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbe4:	463b      	mov	r3, r7
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7ff ff6a 	bl	800dac0 <prvSampleTimeNow>
 800dbec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b09      	cmp	r3, #9
 800dbf2:	f200 8097 	bhi.w	800dd24 <prvProcessReceivedCommands+0x1a0>
 800dbf6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbfc <prvProcessReceivedCommands+0x78>)
 800dbf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbfc:	0800dc25 	.word	0x0800dc25
 800dc00:	0800dc25 	.word	0x0800dc25
 800dc04:	0800dc25 	.word	0x0800dc25
 800dc08:	0800dc9b 	.word	0x0800dc9b
 800dc0c:	0800dcaf 	.word	0x0800dcaf
 800dc10:	0800dcfb 	.word	0x0800dcfb
 800dc14:	0800dc25 	.word	0x0800dc25
 800dc18:	0800dc25 	.word	0x0800dc25
 800dc1c:	0800dc9b 	.word	0x0800dc9b
 800dc20:	0800dcaf 	.word	0x0800dcaf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc2a:	f043 0301 	orr.w	r3, r3, #1
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc36:	68ba      	ldr	r2, [r7, #8]
 800dc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	18d1      	adds	r1, r2, r3
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc44:	f7ff ff5c 	bl	800db00 <prvInsertTimerInActiveList>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d06c      	beq.n	800dd28 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc50:	6a1b      	ldr	r3, [r3, #32]
 800dc52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc5c:	f003 0304 	and.w	r3, r3, #4
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d061      	beq.n	800dd28 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc68:	699b      	ldr	r3, [r3, #24]
 800dc6a:	441a      	add	r2, r3
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	2300      	movs	r3, #0
 800dc72:	2100      	movs	r1, #0
 800dc74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc76:	f7ff fe01 	bl	800d87c <xTimerGenericCommand>
 800dc7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dc7c:	6a3b      	ldr	r3, [r7, #32]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d152      	bne.n	800dd28 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc86:	f383 8811 	msr	BASEPRI, r3
 800dc8a:	f3bf 8f6f 	isb	sy
 800dc8e:	f3bf 8f4f 	dsb	sy
 800dc92:	61bb      	str	r3, [r7, #24]
}
 800dc94:	bf00      	nop
 800dc96:	bf00      	nop
 800dc98:	e7fd      	b.n	800dc96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dca0:	f023 0301 	bic.w	r3, r3, #1
 800dca4:	b2da      	uxtb	r2, r3
 800dca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dca8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dcac:	e03d      	b.n	800dd2a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcb4:	f043 0301 	orr.w	r3, r3, #1
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dcc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc8:	699b      	ldr	r3, [r3, #24]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d10b      	bne.n	800dce6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800dcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd2:	f383 8811 	msr	BASEPRI, r3
 800dcd6:	f3bf 8f6f 	isb	sy
 800dcda:	f3bf 8f4f 	dsb	sy
 800dcde:	617b      	str	r3, [r7, #20]
}
 800dce0:	bf00      	nop
 800dce2:	bf00      	nop
 800dce4:	e7fd      	b.n	800dce2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce8:	699a      	ldr	r2, [r3, #24]
 800dcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcec:	18d1      	adds	r1, r2, r3
 800dcee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcf4:	f7ff ff04 	bl	800db00 <prvInsertTimerInActiveList>
					break;
 800dcf8:	e017      	b.n	800dd2a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd00:	f003 0302 	and.w	r3, r3, #2
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d103      	bne.n	800dd10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dd08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd0a:	f000 fbe5 	bl	800e4d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd0e:	e00c      	b.n	800dd2a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd16:	f023 0301 	bic.w	r3, r3, #1
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dd22:	e002      	b.n	800dd2a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dd24:	bf00      	nop
 800dd26:	e000      	b.n	800dd2a <prvProcessReceivedCommands+0x1a6>
					break;
 800dd28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd2a:	4b08      	ldr	r3, [pc, #32]	@ (800dd4c <prvProcessReceivedCommands+0x1c8>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	1d39      	adds	r1, r7, #4
 800dd30:	2200      	movs	r2, #0
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe fb2e 	bl	800c394 <xQueueReceive>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	f47f af26 	bne.w	800db8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dd40:	bf00      	nop
 800dd42:	bf00      	nop
 800dd44:	3730      	adds	r7, #48	@ 0x30
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	200056b4 	.word	0x200056b4

0800dd50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b088      	sub	sp, #32
 800dd54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd56:	e049      	b.n	800ddec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd58:	4b2e      	ldr	r3, [pc, #184]	@ (800de14 <prvSwitchTimerLists+0xc4>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	68db      	ldr	r3, [r3, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd62:	4b2c      	ldr	r3, [pc, #176]	@ (800de14 <prvSwitchTimerLists+0xc4>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	3304      	adds	r3, #4
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fd ffff 	bl	800bd74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6a1b      	ldr	r3, [r3, #32]
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd84:	f003 0304 	and.w	r3, r3, #4
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d02f      	beq.n	800ddec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	693a      	ldr	r2, [r7, #16]
 800dd92:	4413      	add	r3, r2
 800dd94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dd96:	68ba      	ldr	r2, [r7, #8]
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d90e      	bls.n	800ddbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddaa:	4b1a      	ldr	r3, [pc, #104]	@ (800de14 <prvSwitchTimerLists+0xc4>)
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	4610      	mov	r0, r2
 800ddb6:	f7fd ffa4 	bl	800bd02 <vListInsert>
 800ddba:	e017      	b.n	800ddec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	693a      	ldr	r2, [r7, #16]
 800ddc4:	2100      	movs	r1, #0
 800ddc6:	68f8      	ldr	r0, [r7, #12]
 800ddc8:	f7ff fd58 	bl	800d87c <xTimerGenericCommand>
 800ddcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10b      	bne.n	800ddec <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ddd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	603b      	str	r3, [r7, #0]
}
 800dde6:	bf00      	nop
 800dde8:	bf00      	nop
 800ddea:	e7fd      	b.n	800dde8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddec:	4b09      	ldr	r3, [pc, #36]	@ (800de14 <prvSwitchTimerLists+0xc4>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d1b0      	bne.n	800dd58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ddf6:	4b07      	ldr	r3, [pc, #28]	@ (800de14 <prvSwitchTimerLists+0xc4>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ddfc:	4b06      	ldr	r3, [pc, #24]	@ (800de18 <prvSwitchTimerLists+0xc8>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4a04      	ldr	r2, [pc, #16]	@ (800de14 <prvSwitchTimerLists+0xc4>)
 800de02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de04:	4a04      	ldr	r2, [pc, #16]	@ (800de18 <prvSwitchTimerLists+0xc8>)
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	6013      	str	r3, [r2, #0]
}
 800de0a:	bf00      	nop
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	200056ac 	.word	0x200056ac
 800de18:	200056b0 	.word	0x200056b0

0800de1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de22:	f000 f969 	bl	800e0f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de26:	4b15      	ldr	r3, [pc, #84]	@ (800de7c <prvCheckForValidListAndQueue+0x60>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d120      	bne.n	800de70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de2e:	4814      	ldr	r0, [pc, #80]	@ (800de80 <prvCheckForValidListAndQueue+0x64>)
 800de30:	f7fd ff16 	bl	800bc60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de34:	4813      	ldr	r0, [pc, #76]	@ (800de84 <prvCheckForValidListAndQueue+0x68>)
 800de36:	f7fd ff13 	bl	800bc60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de3a:	4b13      	ldr	r3, [pc, #76]	@ (800de88 <prvCheckForValidListAndQueue+0x6c>)
 800de3c:	4a10      	ldr	r2, [pc, #64]	@ (800de80 <prvCheckForValidListAndQueue+0x64>)
 800de3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de40:	4b12      	ldr	r3, [pc, #72]	@ (800de8c <prvCheckForValidListAndQueue+0x70>)
 800de42:	4a10      	ldr	r2, [pc, #64]	@ (800de84 <prvCheckForValidListAndQueue+0x68>)
 800de44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de46:	2300      	movs	r3, #0
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	4b11      	ldr	r3, [pc, #68]	@ (800de90 <prvCheckForValidListAndQueue+0x74>)
 800de4c:	4a11      	ldr	r2, [pc, #68]	@ (800de94 <prvCheckForValidListAndQueue+0x78>)
 800de4e:	2110      	movs	r1, #16
 800de50:	200a      	movs	r0, #10
 800de52:	f7fe f823 	bl	800be9c <xQueueGenericCreateStatic>
 800de56:	4603      	mov	r3, r0
 800de58:	4a08      	ldr	r2, [pc, #32]	@ (800de7c <prvCheckForValidListAndQueue+0x60>)
 800de5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de5c:	4b07      	ldr	r3, [pc, #28]	@ (800de7c <prvCheckForValidListAndQueue+0x60>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d005      	beq.n	800de70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de64:	4b05      	ldr	r3, [pc, #20]	@ (800de7c <prvCheckForValidListAndQueue+0x60>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	490b      	ldr	r1, [pc, #44]	@ (800de98 <prvCheckForValidListAndQueue+0x7c>)
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe fd2a 	bl	800c8c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de70:	f000 f974 	bl	800e15c <vPortExitCritical>
}
 800de74:	bf00      	nop
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	200056b4 	.word	0x200056b4
 800de80:	20005684 	.word	0x20005684
 800de84:	20005698 	.word	0x20005698
 800de88:	200056ac 	.word	0x200056ac
 800de8c:	200056b0 	.word	0x200056b0
 800de90:	20005760 	.word	0x20005760
 800de94:	200056c0 	.word	0x200056c0
 800de98:	0801d240 	.word	0x0801d240

0800de9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800de9c:	b480      	push	{r7}
 800de9e:	b085      	sub	sp, #20
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	3b04      	subs	r3, #4
 800deac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800deb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3b04      	subs	r3, #4
 800deba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	f023 0201 	bic.w	r2, r3, #1
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3b04      	subs	r3, #4
 800deca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800decc:	4a0c      	ldr	r2, [pc, #48]	@ (800df00 <pxPortInitialiseStack+0x64>)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	3b14      	subs	r3, #20
 800ded6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	3b04      	subs	r3, #4
 800dee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f06f 0202 	mvn.w	r2, #2
 800deea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	3b20      	subs	r3, #32
 800def0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800def2:	68fb      	ldr	r3, [r7, #12]
}
 800def4:	4618      	mov	r0, r3
 800def6:	3714      	adds	r7, #20
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	0800df05 	.word	0x0800df05

0800df04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df04:	b480      	push	{r7}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df0a:	2300      	movs	r3, #0
 800df0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df0e:	4b13      	ldr	r3, [pc, #76]	@ (800df5c <prvTaskExitError+0x58>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800df16:	d00b      	beq.n	800df30 <prvTaskExitError+0x2c>
	__asm volatile
 800df18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1c:	f383 8811 	msr	BASEPRI, r3
 800df20:	f3bf 8f6f 	isb	sy
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	60fb      	str	r3, [r7, #12]
}
 800df2a:	bf00      	nop
 800df2c:	bf00      	nop
 800df2e:	e7fd      	b.n	800df2c <prvTaskExitError+0x28>
	__asm volatile
 800df30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df34:	f383 8811 	msr	BASEPRI, r3
 800df38:	f3bf 8f6f 	isb	sy
 800df3c:	f3bf 8f4f 	dsb	sy
 800df40:	60bb      	str	r3, [r7, #8]
}
 800df42:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df44:	bf00      	nop
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d0fc      	beq.n	800df46 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df4c:	bf00      	nop
 800df4e:	bf00      	nop
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	20000030 	.word	0x20000030

0800df60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df60:	4b07      	ldr	r3, [pc, #28]	@ (800df80 <pxCurrentTCBConst2>)
 800df62:	6819      	ldr	r1, [r3, #0]
 800df64:	6808      	ldr	r0, [r1, #0]
 800df66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df6a:	f380 8809 	msr	PSP, r0
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	f04f 0000 	mov.w	r0, #0
 800df76:	f380 8811 	msr	BASEPRI, r0
 800df7a:	4770      	bx	lr
 800df7c:	f3af 8000 	nop.w

0800df80 <pxCurrentTCBConst2>:
 800df80:	20005184 	.word	0x20005184
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800df84:	bf00      	nop
 800df86:	bf00      	nop

0800df88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800df88:	4808      	ldr	r0, [pc, #32]	@ (800dfac <prvPortStartFirstTask+0x24>)
 800df8a:	6800      	ldr	r0, [r0, #0]
 800df8c:	6800      	ldr	r0, [r0, #0]
 800df8e:	f380 8808 	msr	MSP, r0
 800df92:	f04f 0000 	mov.w	r0, #0
 800df96:	f380 8814 	msr	CONTROL, r0
 800df9a:	b662      	cpsie	i
 800df9c:	b661      	cpsie	f
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	f3bf 8f6f 	isb	sy
 800dfa6:	df00      	svc	0
 800dfa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dfaa:	bf00      	nop
 800dfac:	e000ed08 	.word	0xe000ed08

0800dfb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dfb6:	4b47      	ldr	r3, [pc, #284]	@ (800e0d4 <xPortStartScheduler+0x124>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4a47      	ldr	r2, [pc, #284]	@ (800e0d8 <xPortStartScheduler+0x128>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d10b      	bne.n	800dfd8 <xPortStartScheduler+0x28>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc4:	f383 8811 	msr	BASEPRI, r3
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	60fb      	str	r3, [r7, #12]
}
 800dfd2:	bf00      	nop
 800dfd4:	bf00      	nop
 800dfd6:	e7fd      	b.n	800dfd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dfd8:	4b3e      	ldr	r3, [pc, #248]	@ (800e0d4 <xPortStartScheduler+0x124>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a3f      	ldr	r2, [pc, #252]	@ (800e0dc <xPortStartScheduler+0x12c>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d10b      	bne.n	800dffa <xPortStartScheduler+0x4a>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	613b      	str	r3, [r7, #16]
}
 800dff4:	bf00      	nop
 800dff6:	bf00      	nop
 800dff8:	e7fd      	b.n	800dff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dffa:	4b39      	ldr	r3, [pc, #228]	@ (800e0e0 <xPortStartScheduler+0x130>)
 800dffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	b2db      	uxtb	r3, r3
 800e004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	22ff      	movs	r2, #255	@ 0xff
 800e00a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	b2db      	uxtb	r3, r3
 800e012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e014:	78fb      	ldrb	r3, [r7, #3]
 800e016:	b2db      	uxtb	r3, r3
 800e018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	4b31      	ldr	r3, [pc, #196]	@ (800e0e4 <xPortStartScheduler+0x134>)
 800e020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e022:	4b31      	ldr	r3, [pc, #196]	@ (800e0e8 <xPortStartScheduler+0x138>)
 800e024:	2207      	movs	r2, #7
 800e026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e028:	e009      	b.n	800e03e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e02a:	4b2f      	ldr	r3, [pc, #188]	@ (800e0e8 <xPortStartScheduler+0x138>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	3b01      	subs	r3, #1
 800e030:	4a2d      	ldr	r2, [pc, #180]	@ (800e0e8 <xPortStartScheduler+0x138>)
 800e032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e034:	78fb      	ldrb	r3, [r7, #3]
 800e036:	b2db      	uxtb	r3, r3
 800e038:	005b      	lsls	r3, r3, #1
 800e03a:	b2db      	uxtb	r3, r3
 800e03c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e03e:	78fb      	ldrb	r3, [r7, #3]
 800e040:	b2db      	uxtb	r3, r3
 800e042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e046:	2b80      	cmp	r3, #128	@ 0x80
 800e048:	d0ef      	beq.n	800e02a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e04a:	4b27      	ldr	r3, [pc, #156]	@ (800e0e8 <xPortStartScheduler+0x138>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f1c3 0307 	rsb	r3, r3, #7
 800e052:	2b04      	cmp	r3, #4
 800e054:	d00b      	beq.n	800e06e <xPortStartScheduler+0xbe>
	__asm volatile
 800e056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05a:	f383 8811 	msr	BASEPRI, r3
 800e05e:	f3bf 8f6f 	isb	sy
 800e062:	f3bf 8f4f 	dsb	sy
 800e066:	60bb      	str	r3, [r7, #8]
}
 800e068:	bf00      	nop
 800e06a:	bf00      	nop
 800e06c:	e7fd      	b.n	800e06a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e06e:	4b1e      	ldr	r3, [pc, #120]	@ (800e0e8 <xPortStartScheduler+0x138>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	021b      	lsls	r3, r3, #8
 800e074:	4a1c      	ldr	r2, [pc, #112]	@ (800e0e8 <xPortStartScheduler+0x138>)
 800e076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e078:	4b1b      	ldr	r3, [pc, #108]	@ (800e0e8 <xPortStartScheduler+0x138>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e080:	4a19      	ldr	r2, [pc, #100]	@ (800e0e8 <xPortStartScheduler+0x138>)
 800e082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	b2da      	uxtb	r2, r3
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e08c:	4b17      	ldr	r3, [pc, #92]	@ (800e0ec <xPortStartScheduler+0x13c>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	4a16      	ldr	r2, [pc, #88]	@ (800e0ec <xPortStartScheduler+0x13c>)
 800e092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e098:	4b14      	ldr	r3, [pc, #80]	@ (800e0ec <xPortStartScheduler+0x13c>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4a13      	ldr	r2, [pc, #76]	@ (800e0ec <xPortStartScheduler+0x13c>)
 800e09e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e0a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e0a4:	f000 f8da 	bl	800e25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e0a8:	4b11      	ldr	r3, [pc, #68]	@ (800e0f0 <xPortStartScheduler+0x140>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e0ae:	f000 f8f9 	bl	800e2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e0b2:	4b10      	ldr	r3, [pc, #64]	@ (800e0f4 <xPortStartScheduler+0x144>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e0f4 <xPortStartScheduler+0x144>)
 800e0b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e0bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e0be:	f7ff ff63 	bl	800df88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e0c2:	f7ff f817 	bl	800d0f4 <vTaskSwitchContext>
	prvTaskExitError();
 800e0c6:	f7ff ff1d 	bl	800df04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e0ca:	2300      	movs	r3, #0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3718      	adds	r7, #24
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	e000ed00 	.word	0xe000ed00
 800e0d8:	410fc271 	.word	0x410fc271
 800e0dc:	410fc270 	.word	0x410fc270
 800e0e0:	e000e400 	.word	0xe000e400
 800e0e4:	200057b0 	.word	0x200057b0
 800e0e8:	200057b4 	.word	0x200057b4
 800e0ec:	e000ed20 	.word	0xe000ed20
 800e0f0:	20000030 	.word	0x20000030
 800e0f4:	e000ef34 	.word	0xe000ef34

0800e0f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	607b      	str	r3, [r7, #4]
}
 800e110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e112:	4b10      	ldr	r3, [pc, #64]	@ (800e154 <vPortEnterCritical+0x5c>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	3301      	adds	r3, #1
 800e118:	4a0e      	ldr	r2, [pc, #56]	@ (800e154 <vPortEnterCritical+0x5c>)
 800e11a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e11c:	4b0d      	ldr	r3, [pc, #52]	@ (800e154 <vPortEnterCritical+0x5c>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	2b01      	cmp	r3, #1
 800e122:	d110      	bne.n	800e146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e124:	4b0c      	ldr	r3, [pc, #48]	@ (800e158 <vPortEnterCritical+0x60>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00b      	beq.n	800e146 <vPortEnterCritical+0x4e>
	__asm volatile
 800e12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e132:	f383 8811 	msr	BASEPRI, r3
 800e136:	f3bf 8f6f 	isb	sy
 800e13a:	f3bf 8f4f 	dsb	sy
 800e13e:	603b      	str	r3, [r7, #0]
}
 800e140:	bf00      	nop
 800e142:	bf00      	nop
 800e144:	e7fd      	b.n	800e142 <vPortEnterCritical+0x4a>
	}
}
 800e146:	bf00      	nop
 800e148:	370c      	adds	r7, #12
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop
 800e154:	20000030 	.word	0x20000030
 800e158:	e000ed04 	.word	0xe000ed04

0800e15c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e162:	4b12      	ldr	r3, [pc, #72]	@ (800e1ac <vPortExitCritical+0x50>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10b      	bne.n	800e182 <vPortExitCritical+0x26>
	__asm volatile
 800e16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16e:	f383 8811 	msr	BASEPRI, r3
 800e172:	f3bf 8f6f 	isb	sy
 800e176:	f3bf 8f4f 	dsb	sy
 800e17a:	607b      	str	r3, [r7, #4]
}
 800e17c:	bf00      	nop
 800e17e:	bf00      	nop
 800e180:	e7fd      	b.n	800e17e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e182:	4b0a      	ldr	r3, [pc, #40]	@ (800e1ac <vPortExitCritical+0x50>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	3b01      	subs	r3, #1
 800e188:	4a08      	ldr	r2, [pc, #32]	@ (800e1ac <vPortExitCritical+0x50>)
 800e18a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e18c:	4b07      	ldr	r3, [pc, #28]	@ (800e1ac <vPortExitCritical+0x50>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d105      	bne.n	800e1a0 <vPortExitCritical+0x44>
 800e194:	2300      	movs	r3, #0
 800e196:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	f383 8811 	msr	BASEPRI, r3
}
 800e19e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e1a0:	bf00      	nop
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr
 800e1ac:	20000030 	.word	0x20000030

0800e1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e1b0:	f3ef 8009 	mrs	r0, PSP
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	4b15      	ldr	r3, [pc, #84]	@ (800e210 <pxCurrentTCBConst>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	f01e 0f10 	tst.w	lr, #16
 800e1c0:	bf08      	it	eq
 800e1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ca:	6010      	str	r0, [r2, #0]
 800e1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e1d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e1d4:	f380 8811 	msr	BASEPRI, r0
 800e1d8:	f3bf 8f4f 	dsb	sy
 800e1dc:	f3bf 8f6f 	isb	sy
 800e1e0:	f7fe ff88 	bl	800d0f4 <vTaskSwitchContext>
 800e1e4:	f04f 0000 	mov.w	r0, #0
 800e1e8:	f380 8811 	msr	BASEPRI, r0
 800e1ec:	bc09      	pop	{r0, r3}
 800e1ee:	6819      	ldr	r1, [r3, #0]
 800e1f0:	6808      	ldr	r0, [r1, #0]
 800e1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f6:	f01e 0f10 	tst.w	lr, #16
 800e1fa:	bf08      	it	eq
 800e1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e200:	f380 8809 	msr	PSP, r0
 800e204:	f3bf 8f6f 	isb	sy
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	f3af 8000 	nop.w

0800e210 <pxCurrentTCBConst>:
 800e210:	20005184 	.word	0x20005184
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e214:	bf00      	nop
 800e216:	bf00      	nop

0800e218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
	__asm volatile
 800e21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e222:	f383 8811 	msr	BASEPRI, r3
 800e226:	f3bf 8f6f 	isb	sy
 800e22a:	f3bf 8f4f 	dsb	sy
 800e22e:	607b      	str	r3, [r7, #4]
}
 800e230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e232:	f7fe fea5 	bl	800cf80 <xTaskIncrementTick>
 800e236:	4603      	mov	r3, r0
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d003      	beq.n	800e244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e23c:	4b06      	ldr	r3, [pc, #24]	@ (800e258 <xPortSysTickHandler+0x40>)
 800e23e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e242:	601a      	str	r2, [r3, #0]
 800e244:	2300      	movs	r3, #0
 800e246:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	f383 8811 	msr	BASEPRI, r3
}
 800e24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e250:	bf00      	nop
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	e000ed04 	.word	0xe000ed04

0800e25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e25c:	b480      	push	{r7}
 800e25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e260:	4b0b      	ldr	r3, [pc, #44]	@ (800e290 <vPortSetupTimerInterrupt+0x34>)
 800e262:	2200      	movs	r2, #0
 800e264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e266:	4b0b      	ldr	r3, [pc, #44]	@ (800e294 <vPortSetupTimerInterrupt+0x38>)
 800e268:	2200      	movs	r2, #0
 800e26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e26c:	4b0a      	ldr	r3, [pc, #40]	@ (800e298 <vPortSetupTimerInterrupt+0x3c>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a0a      	ldr	r2, [pc, #40]	@ (800e29c <vPortSetupTimerInterrupt+0x40>)
 800e272:	fba2 2303 	umull	r2, r3, r2, r3
 800e276:	099b      	lsrs	r3, r3, #6
 800e278:	4a09      	ldr	r2, [pc, #36]	@ (800e2a0 <vPortSetupTimerInterrupt+0x44>)
 800e27a:	3b01      	subs	r3, #1
 800e27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e27e:	4b04      	ldr	r3, [pc, #16]	@ (800e290 <vPortSetupTimerInterrupt+0x34>)
 800e280:	2207      	movs	r2, #7
 800e282:	601a      	str	r2, [r3, #0]
}
 800e284:	bf00      	nop
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
 800e28e:	bf00      	nop
 800e290:	e000e010 	.word	0xe000e010
 800e294:	e000e018 	.word	0xe000e018
 800e298:	20000004 	.word	0x20000004
 800e29c:	10624dd3 	.word	0x10624dd3
 800e2a0:	e000e014 	.word	0xe000e014

0800e2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e2b4 <vPortEnableVFP+0x10>
 800e2a8:	6801      	ldr	r1, [r0, #0]
 800e2aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e2ae:	6001      	str	r1, [r0, #0]
 800e2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e2b2:	bf00      	nop
 800e2b4:	e000ed88 	.word	0xe000ed88

0800e2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b085      	sub	sp, #20
 800e2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2be:	f3ef 8305 	mrs	r3, IPSR
 800e2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b0f      	cmp	r3, #15
 800e2c8:	d915      	bls.n	800e2f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2ca:	4a18      	ldr	r2, [pc, #96]	@ (800e32c <vPortValidateInterruptPriority+0x74>)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	4413      	add	r3, r2
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e2d4:	4b16      	ldr	r3, [pc, #88]	@ (800e330 <vPortValidateInterruptPriority+0x78>)
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	7afa      	ldrb	r2, [r7, #11]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d20b      	bcs.n	800e2f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e2:	f383 8811 	msr	BASEPRI, r3
 800e2e6:	f3bf 8f6f 	isb	sy
 800e2ea:	f3bf 8f4f 	dsb	sy
 800e2ee:	607b      	str	r3, [r7, #4]
}
 800e2f0:	bf00      	nop
 800e2f2:	bf00      	nop
 800e2f4:	e7fd      	b.n	800e2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e334 <vPortValidateInterruptPriority+0x7c>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800e338 <vPortValidateInterruptPriority+0x80>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	429a      	cmp	r2, r3
 800e304:	d90b      	bls.n	800e31e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	603b      	str	r3, [r7, #0]
}
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	e7fd      	b.n	800e31a <vPortValidateInterruptPriority+0x62>
	}
 800e31e:	bf00      	nop
 800e320:	3714      	adds	r7, #20
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	e000e3f0 	.word	0xe000e3f0
 800e330:	200057b0 	.word	0x200057b0
 800e334:	e000ed0c 	.word	0xe000ed0c
 800e338:	200057b4 	.word	0x200057b4

0800e33c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b08a      	sub	sp, #40	@ 0x28
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e344:	2300      	movs	r3, #0
 800e346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e348:	f7fe fd5e 	bl	800ce08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e34c:	4b5c      	ldr	r3, [pc, #368]	@ (800e4c0 <pvPortMalloc+0x184>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d101      	bne.n	800e358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e354:	f000 f924 	bl	800e5a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e358:	4b5a      	ldr	r3, [pc, #360]	@ (800e4c4 <pvPortMalloc+0x188>)
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4013      	ands	r3, r2
 800e360:	2b00      	cmp	r3, #0
 800e362:	f040 8095 	bne.w	800e490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d01e      	beq.n	800e3aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e36c:	2208      	movs	r2, #8
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4413      	add	r3, r2
 800e372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f003 0307 	and.w	r3, r3, #7
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d015      	beq.n	800e3aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f023 0307 	bic.w	r3, r3, #7
 800e384:	3308      	adds	r3, #8
 800e386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f003 0307 	and.w	r3, r3, #7
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00b      	beq.n	800e3aa <pvPortMalloc+0x6e>
	__asm volatile
 800e392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e396:	f383 8811 	msr	BASEPRI, r3
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	617b      	str	r3, [r7, #20]
}
 800e3a4:	bf00      	nop
 800e3a6:	bf00      	nop
 800e3a8:	e7fd      	b.n	800e3a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d06f      	beq.n	800e490 <pvPortMalloc+0x154>
 800e3b0:	4b45      	ldr	r3, [pc, #276]	@ (800e4c8 <pvPortMalloc+0x18c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d86a      	bhi.n	800e490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e3ba:	4b44      	ldr	r3, [pc, #272]	@ (800e4cc <pvPortMalloc+0x190>)
 800e3bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e3be:	4b43      	ldr	r3, [pc, #268]	@ (800e4cc <pvPortMalloc+0x190>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3c4:	e004      	b.n	800e3d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d903      	bls.n	800e3e2 <pvPortMalloc+0xa6>
 800e3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1f1      	bne.n	800e3c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e3e2:	4b37      	ldr	r3, [pc, #220]	@ (800e4c0 <pvPortMalloc+0x184>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d051      	beq.n	800e490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e3ec:	6a3b      	ldr	r3, [r7, #32]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2208      	movs	r2, #8
 800e3f2:	4413      	add	r3, r2
 800e3f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	6a3b      	ldr	r3, [r7, #32]
 800e3fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e400:	685a      	ldr	r2, [r3, #4]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	1ad2      	subs	r2, r2, r3
 800e406:	2308      	movs	r3, #8
 800e408:	005b      	lsls	r3, r3, #1
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d920      	bls.n	800e450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4413      	add	r3, r2
 800e414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	f003 0307 	and.w	r3, r3, #7
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d00b      	beq.n	800e438 <pvPortMalloc+0xfc>
	__asm volatile
 800e420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e424:	f383 8811 	msr	BASEPRI, r3
 800e428:	f3bf 8f6f 	isb	sy
 800e42c:	f3bf 8f4f 	dsb	sy
 800e430:	613b      	str	r3, [r7, #16]
}
 800e432:	bf00      	nop
 800e434:	bf00      	nop
 800e436:	e7fd      	b.n	800e434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e43a:	685a      	ldr	r2, [r3, #4]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	1ad2      	subs	r2, r2, r3
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e44a:	69b8      	ldr	r0, [r7, #24]
 800e44c:	f000 f90a 	bl	800e664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e450:	4b1d      	ldr	r3, [pc, #116]	@ (800e4c8 <pvPortMalloc+0x18c>)
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	1ad3      	subs	r3, r2, r3
 800e45a:	4a1b      	ldr	r2, [pc, #108]	@ (800e4c8 <pvPortMalloc+0x18c>)
 800e45c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e45e:	4b1a      	ldr	r3, [pc, #104]	@ (800e4c8 <pvPortMalloc+0x18c>)
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	4b1b      	ldr	r3, [pc, #108]	@ (800e4d0 <pvPortMalloc+0x194>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	d203      	bcs.n	800e472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e46a:	4b17      	ldr	r3, [pc, #92]	@ (800e4c8 <pvPortMalloc+0x18c>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a18      	ldr	r2, [pc, #96]	@ (800e4d0 <pvPortMalloc+0x194>)
 800e470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e474:	685a      	ldr	r2, [r3, #4]
 800e476:	4b13      	ldr	r3, [pc, #76]	@ (800e4c4 <pvPortMalloc+0x188>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	431a      	orrs	r2, r3
 800e47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e482:	2200      	movs	r2, #0
 800e484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e486:	4b13      	ldr	r3, [pc, #76]	@ (800e4d4 <pvPortMalloc+0x198>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	3301      	adds	r3, #1
 800e48c:	4a11      	ldr	r2, [pc, #68]	@ (800e4d4 <pvPortMalloc+0x198>)
 800e48e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e490:	f7fe fcc8 	bl	800ce24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	f003 0307 	and.w	r3, r3, #7
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00b      	beq.n	800e4b6 <pvPortMalloc+0x17a>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	60fb      	str	r3, [r7, #12]
}
 800e4b0:	bf00      	nop
 800e4b2:	bf00      	nop
 800e4b4:	e7fd      	b.n	800e4b2 <pvPortMalloc+0x176>
	return pvReturn;
 800e4b6:	69fb      	ldr	r3, [r7, #28]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3728      	adds	r7, #40	@ 0x28
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	200093c0 	.word	0x200093c0
 800e4c4:	200093d4 	.word	0x200093d4
 800e4c8:	200093c4 	.word	0x200093c4
 800e4cc:	200093b8 	.word	0x200093b8
 800e4d0:	200093c8 	.word	0x200093c8
 800e4d4:	200093cc 	.word	0x200093cc

0800e4d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b086      	sub	sp, #24
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d04f      	beq.n	800e58a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e4ea:	2308      	movs	r3, #8
 800e4ec:	425b      	negs	r3, r3
 800e4ee:	697a      	ldr	r2, [r7, #20]
 800e4f0:	4413      	add	r3, r2
 800e4f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	685a      	ldr	r2, [r3, #4]
 800e4fc:	4b25      	ldr	r3, [pc, #148]	@ (800e594 <vPortFree+0xbc>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4013      	ands	r3, r2
 800e502:	2b00      	cmp	r3, #0
 800e504:	d10b      	bne.n	800e51e <vPortFree+0x46>
	__asm volatile
 800e506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e50a:	f383 8811 	msr	BASEPRI, r3
 800e50e:	f3bf 8f6f 	isb	sy
 800e512:	f3bf 8f4f 	dsb	sy
 800e516:	60fb      	str	r3, [r7, #12]
}
 800e518:	bf00      	nop
 800e51a:	bf00      	nop
 800e51c:	e7fd      	b.n	800e51a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00b      	beq.n	800e53e <vPortFree+0x66>
	__asm volatile
 800e526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e52a:	f383 8811 	msr	BASEPRI, r3
 800e52e:	f3bf 8f6f 	isb	sy
 800e532:	f3bf 8f4f 	dsb	sy
 800e536:	60bb      	str	r3, [r7, #8]
}
 800e538:	bf00      	nop
 800e53a:	bf00      	nop
 800e53c:	e7fd      	b.n	800e53a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	685a      	ldr	r2, [r3, #4]
 800e542:	4b14      	ldr	r3, [pc, #80]	@ (800e594 <vPortFree+0xbc>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4013      	ands	r3, r2
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d01e      	beq.n	800e58a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d11a      	bne.n	800e58a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	685a      	ldr	r2, [r3, #4]
 800e558:	4b0e      	ldr	r3, [pc, #56]	@ (800e594 <vPortFree+0xbc>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	43db      	mvns	r3, r3
 800e55e:	401a      	ands	r2, r3
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e564:	f7fe fc50 	bl	800ce08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	685a      	ldr	r2, [r3, #4]
 800e56c:	4b0a      	ldr	r3, [pc, #40]	@ (800e598 <vPortFree+0xc0>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4413      	add	r3, r2
 800e572:	4a09      	ldr	r2, [pc, #36]	@ (800e598 <vPortFree+0xc0>)
 800e574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e576:	6938      	ldr	r0, [r7, #16]
 800e578:	f000 f874 	bl	800e664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e57c:	4b07      	ldr	r3, [pc, #28]	@ (800e59c <vPortFree+0xc4>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3301      	adds	r3, #1
 800e582:	4a06      	ldr	r2, [pc, #24]	@ (800e59c <vPortFree+0xc4>)
 800e584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e586:	f7fe fc4d 	bl	800ce24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e58a:	bf00      	nop
 800e58c:	3718      	adds	r7, #24
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	200093d4 	.word	0x200093d4
 800e598:	200093c4 	.word	0x200093c4
 800e59c:	200093d0 	.word	0x200093d0

0800e5a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e5a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e5aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e5ac:	4b27      	ldr	r3, [pc, #156]	@ (800e64c <prvHeapInit+0xac>)
 800e5ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f003 0307 	and.w	r3, r3, #7
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d00c      	beq.n	800e5d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	3307      	adds	r3, #7
 800e5be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f023 0307 	bic.w	r3, r3, #7
 800e5c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e5c8:	68ba      	ldr	r2, [r7, #8]
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	4a1f      	ldr	r2, [pc, #124]	@ (800e64c <prvHeapInit+0xac>)
 800e5d0:	4413      	add	r3, r2
 800e5d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800e650 <prvHeapInit+0xb0>)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e5de:	4b1c      	ldr	r3, [pc, #112]	@ (800e650 <prvHeapInit+0xb0>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	68ba      	ldr	r2, [r7, #8]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e5ec:	2208      	movs	r2, #8
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	1a9b      	subs	r3, r3, r2
 800e5f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f023 0307 	bic.w	r3, r3, #7
 800e5fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4a15      	ldr	r2, [pc, #84]	@ (800e654 <prvHeapInit+0xb4>)
 800e600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e602:	4b14      	ldr	r3, [pc, #80]	@ (800e654 <prvHeapInit+0xb4>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2200      	movs	r2, #0
 800e608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e60a:	4b12      	ldr	r3, [pc, #72]	@ (800e654 <prvHeapInit+0xb4>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2200      	movs	r2, #0
 800e610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	68fa      	ldr	r2, [r7, #12]
 800e61a:	1ad2      	subs	r2, r2, r3
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e620:	4b0c      	ldr	r3, [pc, #48]	@ (800e654 <prvHeapInit+0xb4>)
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	4a0a      	ldr	r2, [pc, #40]	@ (800e658 <prvHeapInit+0xb8>)
 800e62e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	4a09      	ldr	r2, [pc, #36]	@ (800e65c <prvHeapInit+0xbc>)
 800e636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e638:	4b09      	ldr	r3, [pc, #36]	@ (800e660 <prvHeapInit+0xc0>)
 800e63a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e63e:	601a      	str	r2, [r3, #0]
}
 800e640:	bf00      	nop
 800e642:	3714      	adds	r7, #20
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr
 800e64c:	200057b8 	.word	0x200057b8
 800e650:	200093b8 	.word	0x200093b8
 800e654:	200093c0 	.word	0x200093c0
 800e658:	200093c8 	.word	0x200093c8
 800e65c:	200093c4 	.word	0x200093c4
 800e660:	200093d4 	.word	0x200093d4

0800e664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e664:	b480      	push	{r7}
 800e666:	b085      	sub	sp, #20
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e66c:	4b28      	ldr	r3, [pc, #160]	@ (800e710 <prvInsertBlockIntoFreeList+0xac>)
 800e66e:	60fb      	str	r3, [r7, #12]
 800e670:	e002      	b.n	800e678 <prvInsertBlockIntoFreeList+0x14>
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	60fb      	str	r3, [r7, #12]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d8f7      	bhi.n	800e672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	68ba      	ldr	r2, [r7, #8]
 800e68c:	4413      	add	r3, r2
 800e68e:	687a      	ldr	r2, [r7, #4]
 800e690:	429a      	cmp	r2, r3
 800e692:	d108      	bne.n	800e6a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	685a      	ldr	r2, [r3, #4]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	441a      	add	r2, r3
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	68ba      	ldr	r2, [r7, #8]
 800e6b0:	441a      	add	r2, r3
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	429a      	cmp	r2, r3
 800e6b8:	d118      	bne.n	800e6ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	4b15      	ldr	r3, [pc, #84]	@ (800e714 <prvInsertBlockIntoFreeList+0xb0>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d00d      	beq.n	800e6e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	685a      	ldr	r2, [r3, #4]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	441a      	add	r2, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	e008      	b.n	800e6f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e6e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e714 <prvInsertBlockIntoFreeList+0xb0>)
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	601a      	str	r2, [r3, #0]
 800e6ea:	e003      	b.n	800e6f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d002      	beq.n	800e702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e702:	bf00      	nop
 800e704:	3714      	adds	r7, #20
 800e706:	46bd      	mov	sp, r7
 800e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70c:	4770      	bx	lr
 800e70e:	bf00      	nop
 800e710:	200093b8 	.word	0x200093b8
 800e714:	200093c0 	.word	0x200093c0

0800e718 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e71c:	2201      	movs	r2, #1
 800e71e:	490e      	ldr	r1, [pc, #56]	@ (800e758 <MX_USB_HOST_Init+0x40>)
 800e720:	480e      	ldr	r0, [pc, #56]	@ (800e75c <MX_USB_HOST_Init+0x44>)
 800e722:	f7fb f9bf 	bl	8009aa4 <USBH_Init>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e72c:	f7f2 ff34 	bl	8001598 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e730:	490b      	ldr	r1, [pc, #44]	@ (800e760 <MX_USB_HOST_Init+0x48>)
 800e732:	480a      	ldr	r0, [pc, #40]	@ (800e75c <MX_USB_HOST_Init+0x44>)
 800e734:	f7fb fa83 	bl	8009c3e <USBH_RegisterClass>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e73e:	f7f2 ff2b 	bl	8001598 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e742:	4806      	ldr	r0, [pc, #24]	@ (800e75c <MX_USB_HOST_Init+0x44>)
 800e744:	f7fb fb07 	bl	8009d56 <USBH_Start>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e74e:	f7f2 ff23 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e752:	bf00      	nop
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	0800e765 	.word	0x0800e765
 800e75c:	200093d8 	.word	0x200093d8
 800e760:	20000010 	.word	0x20000010

0800e764 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
 800e76c:	460b      	mov	r3, r1
 800e76e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e770:	78fb      	ldrb	r3, [r7, #3]
 800e772:	3b01      	subs	r3, #1
 800e774:	2b04      	cmp	r3, #4
 800e776:	d819      	bhi.n	800e7ac <USBH_UserProcess+0x48>
 800e778:	a201      	add	r2, pc, #4	@ (adr r2, 800e780 <USBH_UserProcess+0x1c>)
 800e77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77e:	bf00      	nop
 800e780:	0800e7ad 	.word	0x0800e7ad
 800e784:	0800e79d 	.word	0x0800e79d
 800e788:	0800e7ad 	.word	0x0800e7ad
 800e78c:	0800e7a5 	.word	0x0800e7a5
 800e790:	0800e795 	.word	0x0800e795
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e794:	4b09      	ldr	r3, [pc, #36]	@ (800e7bc <USBH_UserProcess+0x58>)
 800e796:	2203      	movs	r2, #3
 800e798:	701a      	strb	r2, [r3, #0]
  break;
 800e79a:	e008      	b.n	800e7ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e79c:	4b07      	ldr	r3, [pc, #28]	@ (800e7bc <USBH_UserProcess+0x58>)
 800e79e:	2202      	movs	r2, #2
 800e7a0:	701a      	strb	r2, [r3, #0]
  break;
 800e7a2:	e004      	b.n	800e7ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e7a4:	4b05      	ldr	r3, [pc, #20]	@ (800e7bc <USBH_UserProcess+0x58>)
 800e7a6:	2201      	movs	r2, #1
 800e7a8:	701a      	strb	r2, [r3, #0]
  break;
 800e7aa:	e000      	b.n	800e7ae <USBH_UserProcess+0x4a>

  default:
  break;
 800e7ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e7ae:	bf00      	nop
 800e7b0:	370c      	adds	r7, #12
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	200097bc 	.word	0x200097bc

0800e7c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b08a      	sub	sp, #40	@ 0x28
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7c8:	f107 0314 	add.w	r3, r7, #20
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	605a      	str	r2, [r3, #4]
 800e7d2:	609a      	str	r2, [r3, #8]
 800e7d4:	60da      	str	r2, [r3, #12]
 800e7d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e7e0:	d147      	bne.n	800e872 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	613b      	str	r3, [r7, #16]
 800e7e6:	4b25      	ldr	r3, [pc, #148]	@ (800e87c <HAL_HCD_MspInit+0xbc>)
 800e7e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7ea:	4a24      	ldr	r2, [pc, #144]	@ (800e87c <HAL_HCD_MspInit+0xbc>)
 800e7ec:	f043 0301 	orr.w	r3, r3, #1
 800e7f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800e7f2:	4b22      	ldr	r3, [pc, #136]	@ (800e87c <HAL_HCD_MspInit+0xbc>)
 800e7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7f6:	f003 0301 	and.w	r3, r3, #1
 800e7fa:	613b      	str	r3, [r7, #16]
 800e7fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e7fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e804:	2300      	movs	r3, #0
 800e806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e808:	2300      	movs	r3, #0
 800e80a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e80c:	f107 0314 	add.w	r3, r7, #20
 800e810:	4619      	mov	r1, r3
 800e812:	481b      	ldr	r0, [pc, #108]	@ (800e880 <HAL_HCD_MspInit+0xc0>)
 800e814:	f7f4 fc18 	bl	8003048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e818:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e81c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e81e:	2302      	movs	r3, #2
 800e820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e822:	2300      	movs	r3, #0
 800e824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e826:	2300      	movs	r3, #0
 800e828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e82a:	230a      	movs	r3, #10
 800e82c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e82e:	f107 0314 	add.w	r3, r7, #20
 800e832:	4619      	mov	r1, r3
 800e834:	4812      	ldr	r0, [pc, #72]	@ (800e880 <HAL_HCD_MspInit+0xc0>)
 800e836:	f7f4 fc07 	bl	8003048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e83a:	4b10      	ldr	r3, [pc, #64]	@ (800e87c <HAL_HCD_MspInit+0xbc>)
 800e83c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e83e:	4a0f      	ldr	r2, [pc, #60]	@ (800e87c <HAL_HCD_MspInit+0xbc>)
 800e840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e844:	6353      	str	r3, [r2, #52]	@ 0x34
 800e846:	2300      	movs	r3, #0
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	4b0c      	ldr	r3, [pc, #48]	@ (800e87c <HAL_HCD_MspInit+0xbc>)
 800e84c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e84e:	4a0b      	ldr	r2, [pc, #44]	@ (800e87c <HAL_HCD_MspInit+0xbc>)
 800e850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e854:	6453      	str	r3, [r2, #68]	@ 0x44
 800e856:	4b09      	ldr	r3, [pc, #36]	@ (800e87c <HAL_HCD_MspInit+0xbc>)
 800e858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e85a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e85e:	60fb      	str	r3, [r7, #12]
 800e860:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e862:	2200      	movs	r2, #0
 800e864:	2105      	movs	r1, #5
 800e866:	2043      	movs	r0, #67	@ 0x43
 800e868:	f7f3 ffb5 	bl	80027d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e86c:	2043      	movs	r0, #67	@ 0x43
 800e86e:	f7f3 ffce 	bl	800280e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e872:	bf00      	nop
 800e874:	3728      	adds	r7, #40	@ 0x28
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	40023800 	.word	0x40023800
 800e880:	40020000 	.word	0x40020000

0800e884 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e892:	4618      	mov	r0, r3
 800e894:	f7fb fe97 	bl	800a5c6 <USBH_LL_IncTimer>
}
 800e898:	bf00      	nop
 800e89a:	3708      	adds	r7, #8
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7fb fed7 	bl	800a662 <USBH_LL_Connect>
}
 800e8b4:	bf00      	nop
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fb fee4 	bl	800a698 <USBH_LL_Disconnect>
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	70fb      	strb	r3, [r7, #3]
 800e8e4:	4613      	mov	r3, r2
 800e8e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fb ff37 	bl	800a762 <USBH_LL_NotifyURBChange>
#endif
}
 800e8f4:	bf00      	nop
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}

0800e8fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fb fe85 	bl	800a61a <USBH_LL_PortEnabled>
}
 800e910:	bf00      	nop
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e926:	4618      	mov	r0, r3
 800e928:	f7fb fe89 	bl	800a63e <USBH_LL_PortDisabled>
}
 800e92c:	bf00      	nop
 800e92e:	3708      	adds	r7, #8
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e942:	2b01      	cmp	r3, #1
 800e944:	d12a      	bne.n	800e99c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e946:	4a18      	ldr	r2, [pc, #96]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a15      	ldr	r2, [pc, #84]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e952:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e956:	4b14      	ldr	r3, [pc, #80]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e958:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e95c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e95e:	4b12      	ldr	r3, [pc, #72]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e960:	2208      	movs	r2, #8
 800e962:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e964:	4b10      	ldr	r3, [pc, #64]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e966:	2201      	movs	r2, #1
 800e968:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e96a:	4b0f      	ldr	r3, [pc, #60]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e96c:	2200      	movs	r2, #0
 800e96e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e970:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e972:	2202      	movs	r2, #2
 800e974:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e976:	4b0c      	ldr	r3, [pc, #48]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e978:	2200      	movs	r2, #0
 800e97a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e97c:	480a      	ldr	r0, [pc, #40]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e97e:	f7f4 fd32 	bl	80033e6 <HAL_HCD_Init>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d001      	beq.n	800e98c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e988:	f7f2 fe06 	bl	8001598 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e98c:	4806      	ldr	r0, [pc, #24]	@ (800e9a8 <USBH_LL_Init+0x74>)
 800e98e:	f7f5 f96f 	bl	8003c70 <HAL_HCD_GetCurrentFrame>
 800e992:	4603      	mov	r3, r0
 800e994:	4619      	mov	r1, r3
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7fb fe06 	bl	800a5a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3708      	adds	r7, #8
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	200097c0 	.word	0x200097c0

0800e9ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7f5 f8dc 	bl	8003b80 <HAL_HCD_Start>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e9cc:	7bfb      	ldrb	r3, [r7, #15]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f000 f94c 	bl	800ec6c <USBH_Get_USB_Status>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b084      	sub	sp, #16
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7f5 f8e4 	bl	8003bc6 <HAL_HCD_Stop>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea02:	7bfb      	ldrb	r3, [r7, #15]
 800ea04:	4618      	mov	r0, r3
 800ea06:	f000 f931 	bl	800ec6c <USBH_Get_USB_Status>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ea20:	2301      	movs	r3, #1
 800ea22:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7f5 f92e 	bl	8003c8c <HAL_HCD_GetCurrentSpeed>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d00c      	beq.n	800ea50 <USBH_LL_GetSpeed+0x38>
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d80d      	bhi.n	800ea56 <USBH_LL_GetSpeed+0x3e>
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d002      	beq.n	800ea44 <USBH_LL_GetSpeed+0x2c>
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d003      	beq.n	800ea4a <USBH_LL_GetSpeed+0x32>
 800ea42:	e008      	b.n	800ea56 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ea44:	2300      	movs	r3, #0
 800ea46:	73fb      	strb	r3, [r7, #15]
    break;
 800ea48:	e008      	b.n	800ea5c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ea4e:	e005      	b.n	800ea5c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ea50:	2302      	movs	r3, #2
 800ea52:	73fb      	strb	r3, [r7, #15]
    break;
 800ea54:	e002      	b.n	800ea5c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ea56:	2301      	movs	r3, #1
 800ea58:	73fb      	strb	r3, [r7, #15]
    break;
 800ea5a:	bf00      	nop
  }
  return  speed;
 800ea5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b084      	sub	sp, #16
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ea72:	2300      	movs	r3, #0
 800ea74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7f5 f8bf 	bl	8003c00 <HAL_HCD_ResetPort>
 800ea82:	4603      	mov	r3, r0
 800ea84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ea86:	7bfb      	ldrb	r3, [r7, #15]
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f000 f8ef 	bl	800ec6c <USBH_Get_USB_Status>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eaae:	78fa      	ldrb	r2, [r7, #3]
 800eab0:	4611      	mov	r1, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7f5 f8c7 	bl	8003c46 <HAL_HCD_HC_GetXferCount>
 800eab8:	4603      	mov	r3, r0
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3708      	adds	r7, #8
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}

0800eac2 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 800eac2:	b590      	push	{r4, r7, lr}
 800eac4:	b089      	sub	sp, #36	@ 0x24
 800eac6:	af04      	add	r7, sp, #16
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	4608      	mov	r0, r1
 800eacc:	4611      	mov	r1, r2
 800eace:	461a      	mov	r2, r3
 800ead0:	4603      	mov	r3, r0
 800ead2:	70fb      	strb	r3, [r7, #3]
 800ead4:	460b      	mov	r3, r1
 800ead6:	70bb      	strb	r3, [r7, #2]
 800ead8:	4613      	mov	r3, r2
 800eada:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eadc:	2300      	movs	r3, #0
 800eade:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800eaea:	787c      	ldrb	r4, [r7, #1]
 800eaec:	78ba      	ldrb	r2, [r7, #2]
 800eaee:	78f9      	ldrb	r1, [r7, #3]
 800eaf0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eaf2:	9302      	str	r3, [sp, #8]
 800eaf4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800eaf8:	9301      	str	r3, [sp, #4]
 800eafa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	4623      	mov	r3, r4
 800eb02:	f7f4 fcd7 	bl	80034b4 <HAL_HCD_HC_Init>
 800eb06:	4603      	mov	r3, r0
 800eb08:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb0a:	7bfb      	ldrb	r3, [r7, #15]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f000 f8ad 	bl	800ec6c <USBH_Get_USB_Status>
 800eb12:	4603      	mov	r3, r0
 800eb14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb16:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3714      	adds	r7, #20
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd90      	pop	{r4, r7, pc}

0800eb20 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 800eb2c:	2300      	movs	r3, #0
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	370c      	adds	r7, #12
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr

0800eb3a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800eb3a:	b590      	push	{r4, r7, lr}
 800eb3c:	b089      	sub	sp, #36	@ 0x24
 800eb3e:	af04      	add	r7, sp, #16
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	4608      	mov	r0, r1
 800eb44:	4611      	mov	r1, r2
 800eb46:	461a      	mov	r2, r3
 800eb48:	4603      	mov	r3, r0
 800eb4a:	70fb      	strb	r3, [r7, #3]
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	70bb      	strb	r3, [r7, #2]
 800eb50:	4613      	mov	r3, r2
 800eb52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb54:	2300      	movs	r3, #0
 800eb56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800eb62:	787c      	ldrb	r4, [r7, #1]
 800eb64:	78ba      	ldrb	r2, [r7, #2]
 800eb66:	78f9      	ldrb	r1, [r7, #3]
 800eb68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800eb6c:	9303      	str	r3, [sp, #12]
 800eb6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eb70:	9302      	str	r3, [sp, #8]
 800eb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb74:	9301      	str	r3, [sp, #4]
 800eb76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	4623      	mov	r3, r4
 800eb7e:	f7f4 fd51 	bl	8003624 <HAL_HCD_HC_SubmitRequest>
 800eb82:	4603      	mov	r3, r0
 800eb84:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800eb86:	7bfb      	ldrb	r3, [r7, #15]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f000 f86f 	bl	800ec6c <USBH_Get_USB_Status>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb92:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3714      	adds	r7, #20
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd90      	pop	{r4, r7, pc}

0800eb9c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	460b      	mov	r3, r1
 800eba6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ebae:	78fa      	ldrb	r2, [r7, #3]
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7f5 f832 	bl	8003c1c <HAL_HCD_HC_GetURBState>
 800ebb8:	4603      	mov	r3, r0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b082      	sub	sp, #8
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d103      	bne.n	800ebe0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ebd8:	78fb      	ldrb	r3, [r7, #3]
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f000 f872 	bl	800ecc4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ebe0:	20c8      	movs	r0, #200	@ 0xc8
 800ebe2:	f7f3 fcf9 	bl	80025d8 <HAL_Delay>
  return USBH_OK;
 800ebe6:	2300      	movs	r3, #0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	70fb      	strb	r3, [r7, #3]
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ec06:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ec08:	78fa      	ldrb	r2, [r7, #3]
 800ec0a:	68f9      	ldr	r1, [r7, #12]
 800ec0c:	4613      	mov	r3, r2
 800ec0e:	011b      	lsls	r3, r3, #4
 800ec10:	1a9b      	subs	r3, r3, r2
 800ec12:	009b      	lsls	r3, r3, #2
 800ec14:	440b      	add	r3, r1
 800ec16:	3317      	adds	r3, #23
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00a      	beq.n	800ec34 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ec1e:	78fa      	ldrb	r2, [r7, #3]
 800ec20:	68f9      	ldr	r1, [r7, #12]
 800ec22:	4613      	mov	r3, r2
 800ec24:	011b      	lsls	r3, r3, #4
 800ec26:	1a9b      	subs	r3, r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	440b      	add	r3, r1
 800ec2c:	333c      	adds	r3, #60	@ 0x3c
 800ec2e:	78ba      	ldrb	r2, [r7, #2]
 800ec30:	701a      	strb	r2, [r3, #0]
 800ec32:	e009      	b.n	800ec48 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ec34:	78fa      	ldrb	r2, [r7, #3]
 800ec36:	68f9      	ldr	r1, [r7, #12]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	011b      	lsls	r3, r3, #4
 800ec3c:	1a9b      	subs	r3, r3, r2
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	440b      	add	r3, r1
 800ec42:	333d      	adds	r3, #61	@ 0x3d
 800ec44:	78ba      	ldrb	r2, [r7, #2]
 800ec46:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3714      	adds	r7, #20
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b082      	sub	sp, #8
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f7f3 fcba 	bl	80025d8 <HAL_Delay>
}
 800ec64:	bf00      	nop
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	4603      	mov	r3, r0
 800ec74:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec76:	2300      	movs	r3, #0
 800ec78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec7a:	79fb      	ldrb	r3, [r7, #7]
 800ec7c:	2b03      	cmp	r3, #3
 800ec7e:	d817      	bhi.n	800ecb0 <USBH_Get_USB_Status+0x44>
 800ec80:	a201      	add	r2, pc, #4	@ (adr r2, 800ec88 <USBH_Get_USB_Status+0x1c>)
 800ec82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec86:	bf00      	nop
 800ec88:	0800ec99 	.word	0x0800ec99
 800ec8c:	0800ec9f 	.word	0x0800ec9f
 800ec90:	0800eca5 	.word	0x0800eca5
 800ec94:	0800ecab 	.word	0x0800ecab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec9c:	e00b      	b.n	800ecb6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ec9e:	2302      	movs	r3, #2
 800eca0:	73fb      	strb	r3, [r7, #15]
    break;
 800eca2:	e008      	b.n	800ecb6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800eca4:	2301      	movs	r3, #1
 800eca6:	73fb      	strb	r3, [r7, #15]
    break;
 800eca8:	e005      	b.n	800ecb6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ecaa:	2302      	movs	r3, #2
 800ecac:	73fb      	strb	r3, [r7, #15]
    break;
 800ecae:	e002      	b.n	800ecb6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ecb4:	bf00      	nop
  }
  return usb_status;
 800ecb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3714      	adds	r7, #20
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	4603      	mov	r3, r0
 800eccc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ecce:	79fb      	ldrb	r3, [r7, #7]
 800ecd0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ecd2:	79fb      	ldrb	r3, [r7, #7]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d102      	bne.n	800ecde <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	73fb      	strb	r3, [r7, #15]
 800ecdc:	e001      	b.n	800ece2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ecde:	2301      	movs	r3, #1
 800ece0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ece2:	7bfb      	ldrb	r3, [r7, #15]
 800ece4:	461a      	mov	r2, r3
 800ece6:	2101      	movs	r1, #1
 800ece8:	4803      	ldr	r0, [pc, #12]	@ (800ecf8 <MX_DriverVbusFS+0x34>)
 800ecea:	f7f4 fb49 	bl	8003380 <HAL_GPIO_WritePin>
}
 800ecee:	bf00      	nop
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	40020800 	.word	0x40020800

0800ecfc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ecfc:	4b04      	ldr	r3, [pc, #16]	@ (800ed10 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	b10a      	cbz	r2, 800ed06 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ed02:	4803      	ldr	r0, [pc, #12]	@ (800ed10 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ed04:	4770      	bx	lr
 800ed06:	4a03      	ldr	r2, [pc, #12]	@ (800ed14 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ed08:	4801      	ldr	r0, [pc, #4]	@ (800ed10 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ed0a:	6812      	ldr	r2, [r2, #0]
 800ed0c:	601a      	str	r2, [r3, #0]
 800ed0e:	4770      	bx	lr
 800ed10:	2000003c 	.word	0x2000003c
 800ed14:	200001f0 	.word	0x200001f0

0800ed18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ed18:	4a02      	ldr	r2, [pc, #8]	@ (800ed24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ed1a:	4b03      	ldr	r3, [pc, #12]	@ (800ed28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ed1c:	6812      	ldr	r2, [r2, #0]
 800ed1e:	601a      	str	r2, [r3, #0]
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	200001f0 	.word	0x200001f0
 800ed28:	2000003c 	.word	0x2000003c

0800ed2c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ed2c:	f003 bb1a 	b.w	8012364 <geometry_msgs__msg__Twist__init>

0800ed30 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800ed30:	f003 bb3c 	b.w	80123ac <geometry_msgs__msg__Twist__fini>

0800ed34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ed34:	b510      	push	{r4, lr}
 800ed36:	f000 f819 	bl	800ed6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ed3a:	4c07      	ldr	r4, [pc, #28]	@ (800ed58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800ed3c:	60e0      	str	r0, [r4, #12]
 800ed3e:	f000 f815 	bl	800ed6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ed42:	4b06      	ldr	r3, [pc, #24]	@ (800ed5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ed44:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ed46:	681a      	ldr	r2, [r3, #0]
 800ed48:	b10a      	cbz	r2, 800ed4e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800ed4a:	4804      	ldr	r0, [pc, #16]	@ (800ed5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ed4c:	bd10      	pop	{r4, pc}
 800ed4e:	4a04      	ldr	r2, [pc, #16]	@ (800ed60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800ed50:	4802      	ldr	r0, [pc, #8]	@ (800ed5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ed52:	6812      	ldr	r2, [r2, #0]
 800ed54:	601a      	str	r2, [r3, #0]
 800ed56:	bd10      	pop	{r4, pc}
 800ed58:	20000048 	.word	0x20000048
 800ed5c:	200000c0 	.word	0x200000c0
 800ed60:	200001f4 	.word	0x200001f4

0800ed64 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800ed64:	f003 bb2e 	b.w	80123c4 <geometry_msgs__msg__Vector3__init>

0800ed68 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800ed68:	f003 bb30 	b.w	80123cc <geometry_msgs__msg__Vector3__fini>

0800ed6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ed6c:	4b04      	ldr	r3, [pc, #16]	@ (800ed80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	b10a      	cbz	r2, 800ed76 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800ed72:	4803      	ldr	r0, [pc, #12]	@ (800ed80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ed74:	4770      	bx	lr
 800ed76:	4a03      	ldr	r2, [pc, #12]	@ (800ed84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800ed78:	4801      	ldr	r0, [pc, #4]	@ (800ed80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800ed7a:	6812      	ldr	r2, [r2, #0]
 800ed7c:	601a      	str	r2, [r3, #0]
 800ed7e:	4770      	bx	lr
 800ed80:	20000180 	.word	0x20000180
 800ed84:	200001f4 	.word	0x200001f4

0800ed88 <get_serialized_size_geometry_msgs__msg__Twist>:
 800ed88:	b570      	push	{r4, r5, r6, lr}
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	b148      	cbz	r0, 800eda2 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800ed8e:	460d      	mov	r5, r1
 800ed90:	f000 f860 	bl	800ee54 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ed94:	4606      	mov	r6, r0
 800ed96:	1829      	adds	r1, r5, r0
 800ed98:	f104 0018 	add.w	r0, r4, #24
 800ed9c:	f000 f85a 	bl	800ee54 <get_serialized_size_geometry_msgs__msg__Vector3>
 800eda0:	4430      	add	r0, r6
 800eda2:	bd70      	pop	{r4, r5, r6, pc}

0800eda4 <_Twist__cdr_deserialize>:
 800eda4:	b570      	push	{r4, r5, r6, lr}
 800eda6:	460c      	mov	r4, r1
 800eda8:	b189      	cbz	r1, 800edce <_Twist__cdr_deserialize+0x2a>
 800edaa:	4605      	mov	r5, r0
 800edac:	f000 f8de 	bl	800ef6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800edb0:	6843      	ldr	r3, [r0, #4]
 800edb2:	4621      	mov	r1, r4
 800edb4:	68db      	ldr	r3, [r3, #12]
 800edb6:	4628      	mov	r0, r5
 800edb8:	4798      	blx	r3
 800edba:	f000 f8d7 	bl	800ef6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800edbe:	6843      	ldr	r3, [r0, #4]
 800edc0:	f104 0118 	add.w	r1, r4, #24
 800edc4:	4628      	mov	r0, r5
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edcc:	4718      	bx	r3
 800edce:	4608      	mov	r0, r1
 800edd0:	bd70      	pop	{r4, r5, r6, pc}
 800edd2:	bf00      	nop

0800edd4 <_Twist__cdr_serialize>:
 800edd4:	b510      	push	{r4, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	9101      	str	r1, [sp, #4]
 800edda:	b190      	cbz	r0, 800ee02 <_Twist__cdr_serialize+0x2e>
 800eddc:	4604      	mov	r4, r0
 800edde:	f000 f8c5 	bl	800ef6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ede2:	6843      	ldr	r3, [r0, #4]
 800ede4:	9901      	ldr	r1, [sp, #4]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	4620      	mov	r0, r4
 800edea:	4798      	blx	r3
 800edec:	f000 f8be 	bl	800ef6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800edf0:	6843      	ldr	r3, [r0, #4]
 800edf2:	9901      	ldr	r1, [sp, #4]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	f104 0018 	add.w	r0, r4, #24
 800edfa:	b002      	add	sp, #8
 800edfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee00:	4718      	bx	r3
 800ee02:	b002      	add	sp, #8
 800ee04:	bd10      	pop	{r4, pc}
 800ee06:	bf00      	nop

0800ee08 <_Twist__get_serialized_size>:
 800ee08:	b538      	push	{r3, r4, r5, lr}
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	b148      	cbz	r0, 800ee22 <_Twist__get_serialized_size+0x1a>
 800ee0e:	2100      	movs	r1, #0
 800ee10:	f000 f820 	bl	800ee54 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ee14:	4605      	mov	r5, r0
 800ee16:	4601      	mov	r1, r0
 800ee18:	f104 0018 	add.w	r0, r4, #24
 800ee1c:	f000 f81a 	bl	800ee54 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ee20:	4428      	add	r0, r5
 800ee22:	bd38      	pop	{r3, r4, r5, pc}

0800ee24 <_Twist__max_serialized_size>:
 800ee24:	b510      	push	{r4, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	2301      	movs	r3, #1
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	f10d 0007 	add.w	r0, sp, #7
 800ee30:	f88d 3007 	strb.w	r3, [sp, #7]
 800ee34:	f000 f87e 	bl	800ef34 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ee38:	4604      	mov	r4, r0
 800ee3a:	4601      	mov	r1, r0
 800ee3c:	f10d 0007 	add.w	r0, sp, #7
 800ee40:	f000 f878 	bl	800ef34 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ee44:	4420      	add	r0, r4
 800ee46:	b002      	add	sp, #8
 800ee48:	bd10      	pop	{r4, pc}
 800ee4a:	bf00      	nop

0800ee4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ee4c:	4800      	ldr	r0, [pc, #0]	@ (800ee50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800ee4e:	4770      	bx	lr
 800ee50:	2000018c 	.word	0x2000018c

0800ee54 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ee54:	b1b8      	cbz	r0, 800ee86 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ee56:	b538      	push	{r3, r4, r5, lr}
 800ee58:	460d      	mov	r5, r1
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	2108      	movs	r1, #8
 800ee5e:	f001 fb25 	bl	80104ac <ucdr_alignment>
 800ee62:	f105 0308 	add.w	r3, r5, #8
 800ee66:	181c      	adds	r4, r3, r0
 800ee68:	2108      	movs	r1, #8
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	f001 fb1e 	bl	80104ac <ucdr_alignment>
 800ee70:	3008      	adds	r0, #8
 800ee72:	4404      	add	r4, r0
 800ee74:	2108      	movs	r1, #8
 800ee76:	4620      	mov	r0, r4
 800ee78:	f001 fb18 	bl	80104ac <ucdr_alignment>
 800ee7c:	f1c5 0508 	rsb	r5, r5, #8
 800ee80:	4428      	add	r0, r5
 800ee82:	4420      	add	r0, r4
 800ee84:	bd38      	pop	{r3, r4, r5, pc}
 800ee86:	4770      	bx	lr

0800ee88 <_Vector3__cdr_deserialize>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	b171      	cbz	r1, 800eeac <_Vector3__cdr_deserialize+0x24>
 800ee8e:	4605      	mov	r5, r0
 800ee90:	f001 f9ee 	bl	8010270 <ucdr_deserialize_double>
 800ee94:	f104 0108 	add.w	r1, r4, #8
 800ee98:	4628      	mov	r0, r5
 800ee9a:	f001 f9e9 	bl	8010270 <ucdr_deserialize_double>
 800ee9e:	f104 0110 	add.w	r1, r4, #16
 800eea2:	4628      	mov	r0, r5
 800eea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eea8:	f001 b9e2 	b.w	8010270 <ucdr_deserialize_double>
 800eeac:	4608      	mov	r0, r1
 800eeae:	bd38      	pop	{r3, r4, r5, pc}

0800eeb0 <_Vector3__cdr_serialize>:
 800eeb0:	b198      	cbz	r0, 800eeda <_Vector3__cdr_serialize+0x2a>
 800eeb2:	b538      	push	{r3, r4, r5, lr}
 800eeb4:	ed90 0b00 	vldr	d0, [r0]
 800eeb8:	460d      	mov	r5, r1
 800eeba:	4604      	mov	r4, r0
 800eebc:	4608      	mov	r0, r1
 800eebe:	f001 f907 	bl	80100d0 <ucdr_serialize_double>
 800eec2:	ed94 0b02 	vldr	d0, [r4, #8]
 800eec6:	4628      	mov	r0, r5
 800eec8:	f001 f902 	bl	80100d0 <ucdr_serialize_double>
 800eecc:	ed94 0b04 	vldr	d0, [r4, #16]
 800eed0:	4628      	mov	r0, r5
 800eed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eed6:	f001 b8fb 	b.w	80100d0 <ucdr_serialize_double>
 800eeda:	4770      	bx	lr

0800eedc <_Vector3__get_serialized_size>:
 800eedc:	b198      	cbz	r0, 800ef06 <_Vector3__get_serialized_size+0x2a>
 800eede:	b510      	push	{r4, lr}
 800eee0:	2108      	movs	r1, #8
 800eee2:	2000      	movs	r0, #0
 800eee4:	f001 fae2 	bl	80104ac <ucdr_alignment>
 800eee8:	f100 0408 	add.w	r4, r0, #8
 800eeec:	2108      	movs	r1, #8
 800eeee:	4620      	mov	r0, r4
 800eef0:	f001 fadc 	bl	80104ac <ucdr_alignment>
 800eef4:	3008      	adds	r0, #8
 800eef6:	4404      	add	r4, r0
 800eef8:	2108      	movs	r1, #8
 800eefa:	4620      	mov	r0, r4
 800eefc:	f001 fad6 	bl	80104ac <ucdr_alignment>
 800ef00:	3008      	adds	r0, #8
 800ef02:	4420      	add	r0, r4
 800ef04:	bd10      	pop	{r4, pc}
 800ef06:	4770      	bx	lr

0800ef08 <_Vector3__max_serialized_size>:
 800ef08:	b538      	push	{r3, r4, r5, lr}
 800ef0a:	2108      	movs	r1, #8
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	f001 facd 	bl	80104ac <ucdr_alignment>
 800ef12:	f100 0508 	add.w	r5, r0, #8
 800ef16:	2108      	movs	r1, #8
 800ef18:	4628      	mov	r0, r5
 800ef1a:	f001 fac7 	bl	80104ac <ucdr_alignment>
 800ef1e:	f100 0408 	add.w	r4, r0, #8
 800ef22:	442c      	add	r4, r5
 800ef24:	2108      	movs	r1, #8
 800ef26:	4620      	mov	r0, r4
 800ef28:	f001 fac0 	bl	80104ac <ucdr_alignment>
 800ef2c:	3008      	adds	r0, #8
 800ef2e:	4420      	add	r0, r4
 800ef30:	bd38      	pop	{r3, r4, r5, pc}
 800ef32:	bf00      	nop

0800ef34 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800ef34:	b570      	push	{r4, r5, r6, lr}
 800ef36:	2301      	movs	r3, #1
 800ef38:	460c      	mov	r4, r1
 800ef3a:	7003      	strb	r3, [r0, #0]
 800ef3c:	2108      	movs	r1, #8
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f001 fab4 	bl	80104ac <ucdr_alignment>
 800ef44:	f104 0508 	add.w	r5, r4, #8
 800ef48:	1946      	adds	r6, r0, r5
 800ef4a:	2108      	movs	r1, #8
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f001 faad 	bl	80104ac <ucdr_alignment>
 800ef52:	f100 0508 	add.w	r5, r0, #8
 800ef56:	4435      	add	r5, r6
 800ef58:	2108      	movs	r1, #8
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	f001 faa6 	bl	80104ac <ucdr_alignment>
 800ef60:	f1c4 0408 	rsb	r4, r4, #8
 800ef64:	4420      	add	r0, r4
 800ef66:	4428      	add	r0, r5
 800ef68:	bd70      	pop	{r4, r5, r6, pc}
 800ef6a:	bf00      	nop

0800ef6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800ef6c:	4800      	ldr	r0, [pc, #0]	@ (800ef70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800ef6e:	4770      	bx	lr
 800ef70:	200001b4 	.word	0x200001b4

0800ef74 <ucdr_serialize_bool>:
 800ef74:	b538      	push	{r3, r4, r5, lr}
 800ef76:	460d      	mov	r5, r1
 800ef78:	2101      	movs	r1, #1
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	f001 fa4a 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800ef80:	b148      	cbz	r0, 800ef96 <ucdr_serialize_bool+0x22>
 800ef82:	68a3      	ldr	r3, [r4, #8]
 800ef84:	701d      	strb	r5, [r3, #0]
 800ef86:	68a2      	ldr	r2, [r4, #8]
 800ef88:	6923      	ldr	r3, [r4, #16]
 800ef8a:	2101      	movs	r1, #1
 800ef8c:	440a      	add	r2, r1
 800ef8e:	440b      	add	r3, r1
 800ef90:	60a2      	str	r2, [r4, #8]
 800ef92:	6123      	str	r3, [r4, #16]
 800ef94:	7561      	strb	r1, [r4, #21]
 800ef96:	7da0      	ldrb	r0, [r4, #22]
 800ef98:	f080 0001 	eor.w	r0, r0, #1
 800ef9c:	bd38      	pop	{r3, r4, r5, pc}
 800ef9e:	bf00      	nop

0800efa0 <ucdr_deserialize_bool>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	460d      	mov	r5, r1
 800efa4:	2101      	movs	r1, #1
 800efa6:	4604      	mov	r4, r0
 800efa8:	f001 fa34 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800efac:	b160      	cbz	r0, 800efc8 <ucdr_deserialize_bool+0x28>
 800efae:	68a2      	ldr	r2, [r4, #8]
 800efb0:	6923      	ldr	r3, [r4, #16]
 800efb2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800efb6:	3900      	subs	r1, #0
 800efb8:	bf18      	it	ne
 800efba:	2101      	movne	r1, #1
 800efbc:	7029      	strb	r1, [r5, #0]
 800efbe:	3301      	adds	r3, #1
 800efc0:	2101      	movs	r1, #1
 800efc2:	60a2      	str	r2, [r4, #8]
 800efc4:	6123      	str	r3, [r4, #16]
 800efc6:	7561      	strb	r1, [r4, #21]
 800efc8:	7da0      	ldrb	r0, [r4, #22]
 800efca:	f080 0001 	eor.w	r0, r0, #1
 800efce:	bd38      	pop	{r3, r4, r5, pc}

0800efd0 <ucdr_serialize_uint8_t>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	460d      	mov	r5, r1
 800efd4:	2101      	movs	r1, #1
 800efd6:	4604      	mov	r4, r0
 800efd8:	f001 fa1c 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800efdc:	b148      	cbz	r0, 800eff2 <ucdr_serialize_uint8_t+0x22>
 800efde:	68a3      	ldr	r3, [r4, #8]
 800efe0:	701d      	strb	r5, [r3, #0]
 800efe2:	68a2      	ldr	r2, [r4, #8]
 800efe4:	6923      	ldr	r3, [r4, #16]
 800efe6:	2101      	movs	r1, #1
 800efe8:	440a      	add	r2, r1
 800efea:	440b      	add	r3, r1
 800efec:	60a2      	str	r2, [r4, #8]
 800efee:	6123      	str	r3, [r4, #16]
 800eff0:	7561      	strb	r1, [r4, #21]
 800eff2:	7da0      	ldrb	r0, [r4, #22]
 800eff4:	f080 0001 	eor.w	r0, r0, #1
 800eff8:	bd38      	pop	{r3, r4, r5, pc}
 800effa:	bf00      	nop

0800effc <ucdr_deserialize_uint8_t>:
 800effc:	b538      	push	{r3, r4, r5, lr}
 800effe:	460d      	mov	r5, r1
 800f000:	2101      	movs	r1, #1
 800f002:	4604      	mov	r4, r0
 800f004:	f001 fa06 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f008:	b150      	cbz	r0, 800f020 <ucdr_deserialize_uint8_t+0x24>
 800f00a:	68a3      	ldr	r3, [r4, #8]
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	702b      	strb	r3, [r5, #0]
 800f010:	68a2      	ldr	r2, [r4, #8]
 800f012:	6923      	ldr	r3, [r4, #16]
 800f014:	2101      	movs	r1, #1
 800f016:	440a      	add	r2, r1
 800f018:	440b      	add	r3, r1
 800f01a:	60a2      	str	r2, [r4, #8]
 800f01c:	6123      	str	r3, [r4, #16]
 800f01e:	7561      	strb	r1, [r4, #21]
 800f020:	7da0      	ldrb	r0, [r4, #22]
 800f022:	f080 0001 	eor.w	r0, r0, #1
 800f026:	bd38      	pop	{r3, r4, r5, pc}

0800f028 <ucdr_serialize_uint16_t>:
 800f028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f02c:	b082      	sub	sp, #8
 800f02e:	460b      	mov	r3, r1
 800f030:	2102      	movs	r1, #2
 800f032:	4604      	mov	r4, r0
 800f034:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f038:	f001 fa40 	bl	80104bc <ucdr_buffer_alignment>
 800f03c:	4601      	mov	r1, r0
 800f03e:	4620      	mov	r0, r4
 800f040:	7d67      	ldrb	r7, [r4, #21]
 800f042:	f001 fa7f 	bl	8010544 <ucdr_advance_buffer>
 800f046:	2102      	movs	r1, #2
 800f048:	4620      	mov	r0, r4
 800f04a:	f001 f9d7 	bl	80103fc <ucdr_check_buffer_available_for>
 800f04e:	bb78      	cbnz	r0, 800f0b0 <ucdr_serialize_uint16_t+0x88>
 800f050:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f054:	42ab      	cmp	r3, r5
 800f056:	d926      	bls.n	800f0a6 <ucdr_serialize_uint16_t+0x7e>
 800f058:	1b5e      	subs	r6, r3, r5
 800f05a:	60a3      	str	r3, [r4, #8]
 800f05c:	6923      	ldr	r3, [r4, #16]
 800f05e:	f1c6 0802 	rsb	r8, r6, #2
 800f062:	4433      	add	r3, r6
 800f064:	6123      	str	r3, [r4, #16]
 800f066:	4641      	mov	r1, r8
 800f068:	4620      	mov	r0, r4
 800f06a:	f001 f9d3 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f06e:	2800      	cmp	r0, #0
 800f070:	d03b      	beq.n	800f0ea <ucdr_serialize_uint16_t+0xc2>
 800f072:	7d23      	ldrb	r3, [r4, #20]
 800f074:	2b01      	cmp	r3, #1
 800f076:	d04a      	beq.n	800f10e <ucdr_serialize_uint16_t+0xe6>
 800f078:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f07c:	702b      	strb	r3, [r5, #0]
 800f07e:	2e00      	cmp	r6, #0
 800f080:	d040      	beq.n	800f104 <ucdr_serialize_uint16_t+0xdc>
 800f082:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f086:	706b      	strb	r3, [r5, #1]
 800f088:	6923      	ldr	r3, [r4, #16]
 800f08a:	68a2      	ldr	r2, [r4, #8]
 800f08c:	7da0      	ldrb	r0, [r4, #22]
 800f08e:	3302      	adds	r3, #2
 800f090:	1b9e      	subs	r6, r3, r6
 800f092:	4442      	add	r2, r8
 800f094:	2302      	movs	r3, #2
 800f096:	f080 0001 	eor.w	r0, r0, #1
 800f09a:	60a2      	str	r2, [r4, #8]
 800f09c:	6126      	str	r6, [r4, #16]
 800f09e:	7563      	strb	r3, [r4, #21]
 800f0a0:	b002      	add	sp, #8
 800f0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a6:	2102      	movs	r1, #2
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f001 f9b3 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f0ae:	b190      	cbz	r0, 800f0d6 <ucdr_serialize_uint16_t+0xae>
 800f0b0:	7d23      	ldrb	r3, [r4, #20]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	68a3      	ldr	r3, [r4, #8]
 800f0b6:	d014      	beq.n	800f0e2 <ucdr_serialize_uint16_t+0xba>
 800f0b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f0bc:	701a      	strb	r2, [r3, #0]
 800f0be:	68a3      	ldr	r3, [r4, #8]
 800f0c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0c4:	705a      	strb	r2, [r3, #1]
 800f0c6:	68a2      	ldr	r2, [r4, #8]
 800f0c8:	6923      	ldr	r3, [r4, #16]
 800f0ca:	3202      	adds	r2, #2
 800f0cc:	3302      	adds	r3, #2
 800f0ce:	2102      	movs	r1, #2
 800f0d0:	60a2      	str	r2, [r4, #8]
 800f0d2:	6123      	str	r3, [r4, #16]
 800f0d4:	7561      	strb	r1, [r4, #21]
 800f0d6:	7da0      	ldrb	r0, [r4, #22]
 800f0d8:	f080 0001 	eor.w	r0, r0, #1
 800f0dc:	b002      	add	sp, #8
 800f0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f0e6:	801a      	strh	r2, [r3, #0]
 800f0e8:	e7ed      	b.n	800f0c6 <ucdr_serialize_uint16_t+0x9e>
 800f0ea:	68a2      	ldr	r2, [r4, #8]
 800f0ec:	6923      	ldr	r3, [r4, #16]
 800f0ee:	7da0      	ldrb	r0, [r4, #22]
 800f0f0:	7567      	strb	r7, [r4, #21]
 800f0f2:	1b92      	subs	r2, r2, r6
 800f0f4:	1b9b      	subs	r3, r3, r6
 800f0f6:	f080 0001 	eor.w	r0, r0, #1
 800f0fa:	60a2      	str	r2, [r4, #8]
 800f0fc:	6123      	str	r3, [r4, #16]
 800f0fe:	b002      	add	sp, #8
 800f100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f104:	68a3      	ldr	r3, [r4, #8]
 800f106:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f10a:	701a      	strb	r2, [r3, #0]
 800f10c:	e7bc      	b.n	800f088 <ucdr_serialize_uint16_t+0x60>
 800f10e:	4628      	mov	r0, r5
 800f110:	f10d 0506 	add.w	r5, sp, #6
 800f114:	4629      	mov	r1, r5
 800f116:	4632      	mov	r2, r6
 800f118:	f00d f955 	bl	801c3c6 <memcpy>
 800f11c:	68a0      	ldr	r0, [r4, #8]
 800f11e:	4642      	mov	r2, r8
 800f120:	19a9      	adds	r1, r5, r6
 800f122:	f00d f950 	bl	801c3c6 <memcpy>
 800f126:	e7af      	b.n	800f088 <ucdr_serialize_uint16_t+0x60>

0800f128 <ucdr_serialize_endian_uint16_t>:
 800f128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f12c:	b083      	sub	sp, #12
 800f12e:	460d      	mov	r5, r1
 800f130:	2102      	movs	r1, #2
 800f132:	4604      	mov	r4, r0
 800f134:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f138:	f001 f9c0 	bl	80104bc <ucdr_buffer_alignment>
 800f13c:	4601      	mov	r1, r0
 800f13e:	4620      	mov	r0, r4
 800f140:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f144:	f001 f9fe 	bl	8010544 <ucdr_advance_buffer>
 800f148:	2102      	movs	r1, #2
 800f14a:	4620      	mov	r0, r4
 800f14c:	f001 f956 	bl	80103fc <ucdr_check_buffer_available_for>
 800f150:	bb70      	cbnz	r0, 800f1b0 <ucdr_serialize_endian_uint16_t+0x88>
 800f152:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f156:	42be      	cmp	r6, r7
 800f158:	d925      	bls.n	800f1a6 <ucdr_serialize_endian_uint16_t+0x7e>
 800f15a:	6923      	ldr	r3, [r4, #16]
 800f15c:	60a6      	str	r6, [r4, #8]
 800f15e:	1bf6      	subs	r6, r6, r7
 800f160:	4433      	add	r3, r6
 800f162:	f1c6 0902 	rsb	r9, r6, #2
 800f166:	6123      	str	r3, [r4, #16]
 800f168:	4649      	mov	r1, r9
 800f16a:	4620      	mov	r0, r4
 800f16c:	f001 f952 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f170:	2800      	cmp	r0, #0
 800f172:	d039      	beq.n	800f1e8 <ucdr_serialize_endian_uint16_t+0xc0>
 800f174:	2d01      	cmp	r5, #1
 800f176:	d04a      	beq.n	800f20e <ucdr_serialize_endian_uint16_t+0xe6>
 800f178:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f17c:	703b      	strb	r3, [r7, #0]
 800f17e:	2e00      	cmp	r6, #0
 800f180:	d040      	beq.n	800f204 <ucdr_serialize_endian_uint16_t+0xdc>
 800f182:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f186:	707b      	strb	r3, [r7, #1]
 800f188:	6923      	ldr	r3, [r4, #16]
 800f18a:	68a2      	ldr	r2, [r4, #8]
 800f18c:	7da0      	ldrb	r0, [r4, #22]
 800f18e:	3302      	adds	r3, #2
 800f190:	444a      	add	r2, r9
 800f192:	1b9b      	subs	r3, r3, r6
 800f194:	2102      	movs	r1, #2
 800f196:	f080 0001 	eor.w	r0, r0, #1
 800f19a:	60a2      	str	r2, [r4, #8]
 800f19c:	6123      	str	r3, [r4, #16]
 800f19e:	7561      	strb	r1, [r4, #21]
 800f1a0:	b003      	add	sp, #12
 800f1a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1a6:	2102      	movs	r1, #2
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f001 f933 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f1ae:	b188      	cbz	r0, 800f1d4 <ucdr_serialize_endian_uint16_t+0xac>
 800f1b0:	2d01      	cmp	r5, #1
 800f1b2:	68a3      	ldr	r3, [r4, #8]
 800f1b4:	d014      	beq.n	800f1e0 <ucdr_serialize_endian_uint16_t+0xb8>
 800f1b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f1ba:	701a      	strb	r2, [r3, #0]
 800f1bc:	68a3      	ldr	r3, [r4, #8]
 800f1be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f1c2:	705a      	strb	r2, [r3, #1]
 800f1c4:	68a2      	ldr	r2, [r4, #8]
 800f1c6:	6923      	ldr	r3, [r4, #16]
 800f1c8:	3202      	adds	r2, #2
 800f1ca:	3302      	adds	r3, #2
 800f1cc:	2102      	movs	r1, #2
 800f1ce:	60a2      	str	r2, [r4, #8]
 800f1d0:	6123      	str	r3, [r4, #16]
 800f1d2:	7561      	strb	r1, [r4, #21]
 800f1d4:	7da0      	ldrb	r0, [r4, #22]
 800f1d6:	f080 0001 	eor.w	r0, r0, #1
 800f1da:	b003      	add	sp, #12
 800f1dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f1e4:	801a      	strh	r2, [r3, #0]
 800f1e6:	e7ed      	b.n	800f1c4 <ucdr_serialize_endian_uint16_t+0x9c>
 800f1e8:	68a2      	ldr	r2, [r4, #8]
 800f1ea:	6923      	ldr	r3, [r4, #16]
 800f1ec:	7da0      	ldrb	r0, [r4, #22]
 800f1ee:	f884 8015 	strb.w	r8, [r4, #21]
 800f1f2:	1b92      	subs	r2, r2, r6
 800f1f4:	1b9b      	subs	r3, r3, r6
 800f1f6:	f080 0001 	eor.w	r0, r0, #1
 800f1fa:	60a2      	str	r2, [r4, #8]
 800f1fc:	6123      	str	r3, [r4, #16]
 800f1fe:	b003      	add	sp, #12
 800f200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f204:	68a3      	ldr	r3, [r4, #8]
 800f206:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f20a:	701a      	strb	r2, [r3, #0]
 800f20c:	e7bc      	b.n	800f188 <ucdr_serialize_endian_uint16_t+0x60>
 800f20e:	f10d 0506 	add.w	r5, sp, #6
 800f212:	4629      	mov	r1, r5
 800f214:	4632      	mov	r2, r6
 800f216:	4638      	mov	r0, r7
 800f218:	f00d f8d5 	bl	801c3c6 <memcpy>
 800f21c:	68a0      	ldr	r0, [r4, #8]
 800f21e:	464a      	mov	r2, r9
 800f220:	19a9      	adds	r1, r5, r6
 800f222:	f00d f8d0 	bl	801c3c6 <memcpy>
 800f226:	e7af      	b.n	800f188 <ucdr_serialize_endian_uint16_t+0x60>

0800f228 <ucdr_deserialize_uint16_t>:
 800f228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f22c:	460d      	mov	r5, r1
 800f22e:	2102      	movs	r1, #2
 800f230:	4604      	mov	r4, r0
 800f232:	f001 f943 	bl	80104bc <ucdr_buffer_alignment>
 800f236:	4601      	mov	r1, r0
 800f238:	4620      	mov	r0, r4
 800f23a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f23e:	f001 f981 	bl	8010544 <ucdr_advance_buffer>
 800f242:	2102      	movs	r1, #2
 800f244:	4620      	mov	r0, r4
 800f246:	f001 f8d9 	bl	80103fc <ucdr_check_buffer_available_for>
 800f24a:	bb60      	cbnz	r0, 800f2a6 <ucdr_deserialize_uint16_t+0x7e>
 800f24c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f250:	42be      	cmp	r6, r7
 800f252:	d923      	bls.n	800f29c <ucdr_deserialize_uint16_t+0x74>
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	60a6      	str	r6, [r4, #8]
 800f258:	1bf6      	subs	r6, r6, r7
 800f25a:	4433      	add	r3, r6
 800f25c:	f1c6 0902 	rsb	r9, r6, #2
 800f260:	6123      	str	r3, [r4, #16]
 800f262:	4649      	mov	r1, r9
 800f264:	4620      	mov	r0, r4
 800f266:	f001 f8d5 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d034      	beq.n	800f2d8 <ucdr_deserialize_uint16_t+0xb0>
 800f26e:	7d23      	ldrb	r3, [r4, #20]
 800f270:	2b01      	cmp	r3, #1
 800f272:	d042      	beq.n	800f2fa <ucdr_deserialize_uint16_t+0xd2>
 800f274:	787b      	ldrb	r3, [r7, #1]
 800f276:	702b      	strb	r3, [r5, #0]
 800f278:	2e00      	cmp	r6, #0
 800f27a:	d03a      	beq.n	800f2f2 <ucdr_deserialize_uint16_t+0xca>
 800f27c:	783b      	ldrb	r3, [r7, #0]
 800f27e:	706b      	strb	r3, [r5, #1]
 800f280:	6923      	ldr	r3, [r4, #16]
 800f282:	68a2      	ldr	r2, [r4, #8]
 800f284:	7da0      	ldrb	r0, [r4, #22]
 800f286:	2102      	movs	r1, #2
 800f288:	3302      	adds	r3, #2
 800f28a:	444a      	add	r2, r9
 800f28c:	1b9b      	subs	r3, r3, r6
 800f28e:	7561      	strb	r1, [r4, #21]
 800f290:	60a2      	str	r2, [r4, #8]
 800f292:	6123      	str	r3, [r4, #16]
 800f294:	f080 0001 	eor.w	r0, r0, #1
 800f298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f29c:	2102      	movs	r1, #2
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f001 f8b8 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f2a4:	b180      	cbz	r0, 800f2c8 <ucdr_deserialize_uint16_t+0xa0>
 800f2a6:	7d23      	ldrb	r3, [r4, #20]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	68a3      	ldr	r3, [r4, #8]
 800f2ac:	d011      	beq.n	800f2d2 <ucdr_deserialize_uint16_t+0xaa>
 800f2ae:	785b      	ldrb	r3, [r3, #1]
 800f2b0:	702b      	strb	r3, [r5, #0]
 800f2b2:	68a3      	ldr	r3, [r4, #8]
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	706b      	strb	r3, [r5, #1]
 800f2b8:	68a2      	ldr	r2, [r4, #8]
 800f2ba:	6923      	ldr	r3, [r4, #16]
 800f2bc:	3202      	adds	r2, #2
 800f2be:	3302      	adds	r3, #2
 800f2c0:	2102      	movs	r1, #2
 800f2c2:	60a2      	str	r2, [r4, #8]
 800f2c4:	6123      	str	r3, [r4, #16]
 800f2c6:	7561      	strb	r1, [r4, #21]
 800f2c8:	7da0      	ldrb	r0, [r4, #22]
 800f2ca:	f080 0001 	eor.w	r0, r0, #1
 800f2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2d2:	881b      	ldrh	r3, [r3, #0]
 800f2d4:	802b      	strh	r3, [r5, #0]
 800f2d6:	e7ef      	b.n	800f2b8 <ucdr_deserialize_uint16_t+0x90>
 800f2d8:	68a2      	ldr	r2, [r4, #8]
 800f2da:	6923      	ldr	r3, [r4, #16]
 800f2dc:	7da0      	ldrb	r0, [r4, #22]
 800f2de:	f884 8015 	strb.w	r8, [r4, #21]
 800f2e2:	1b92      	subs	r2, r2, r6
 800f2e4:	1b9b      	subs	r3, r3, r6
 800f2e6:	60a2      	str	r2, [r4, #8]
 800f2e8:	6123      	str	r3, [r4, #16]
 800f2ea:	f080 0001 	eor.w	r0, r0, #1
 800f2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2f2:	68a3      	ldr	r3, [r4, #8]
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	706b      	strb	r3, [r5, #1]
 800f2f8:	e7c2      	b.n	800f280 <ucdr_deserialize_uint16_t+0x58>
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	4632      	mov	r2, r6
 800f2fe:	4628      	mov	r0, r5
 800f300:	f00d f861 	bl	801c3c6 <memcpy>
 800f304:	68a1      	ldr	r1, [r4, #8]
 800f306:	464a      	mov	r2, r9
 800f308:	19a8      	adds	r0, r5, r6
 800f30a:	f00d f85c 	bl	801c3c6 <memcpy>
 800f30e:	e7b7      	b.n	800f280 <ucdr_deserialize_uint16_t+0x58>

0800f310 <ucdr_deserialize_endian_uint16_t>:
 800f310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f314:	460e      	mov	r6, r1
 800f316:	2102      	movs	r1, #2
 800f318:	4604      	mov	r4, r0
 800f31a:	4615      	mov	r5, r2
 800f31c:	f001 f8ce 	bl	80104bc <ucdr_buffer_alignment>
 800f320:	4601      	mov	r1, r0
 800f322:	4620      	mov	r0, r4
 800f324:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f328:	f001 f90c 	bl	8010544 <ucdr_advance_buffer>
 800f32c:	2102      	movs	r1, #2
 800f32e:	4620      	mov	r0, r4
 800f330:	f001 f864 	bl	80103fc <ucdr_check_buffer_available_for>
 800f334:	bb70      	cbnz	r0, 800f394 <ucdr_deserialize_endian_uint16_t+0x84>
 800f336:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f33a:	4547      	cmp	r7, r8
 800f33c:	d925      	bls.n	800f38a <ucdr_deserialize_endian_uint16_t+0x7a>
 800f33e:	6923      	ldr	r3, [r4, #16]
 800f340:	60a7      	str	r7, [r4, #8]
 800f342:	eba7 0708 	sub.w	r7, r7, r8
 800f346:	443b      	add	r3, r7
 800f348:	f1c7 0a02 	rsb	sl, r7, #2
 800f34c:	6123      	str	r3, [r4, #16]
 800f34e:	4651      	mov	r1, sl
 800f350:	4620      	mov	r0, r4
 800f352:	f001 f85f 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f356:	2800      	cmp	r0, #0
 800f358:	d034      	beq.n	800f3c4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f35a:	2e01      	cmp	r6, #1
 800f35c:	d043      	beq.n	800f3e6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f35e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f362:	702b      	strb	r3, [r5, #0]
 800f364:	2f00      	cmp	r7, #0
 800f366:	d03a      	beq.n	800f3de <ucdr_deserialize_endian_uint16_t+0xce>
 800f368:	f898 3000 	ldrb.w	r3, [r8]
 800f36c:	706b      	strb	r3, [r5, #1]
 800f36e:	6923      	ldr	r3, [r4, #16]
 800f370:	68a2      	ldr	r2, [r4, #8]
 800f372:	7da0      	ldrb	r0, [r4, #22]
 800f374:	2102      	movs	r1, #2
 800f376:	3302      	adds	r3, #2
 800f378:	4452      	add	r2, sl
 800f37a:	1bdb      	subs	r3, r3, r7
 800f37c:	7561      	strb	r1, [r4, #21]
 800f37e:	60a2      	str	r2, [r4, #8]
 800f380:	6123      	str	r3, [r4, #16]
 800f382:	f080 0001 	eor.w	r0, r0, #1
 800f386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38a:	2102      	movs	r1, #2
 800f38c:	4620      	mov	r0, r4
 800f38e:	f001 f841 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f392:	b178      	cbz	r0, 800f3b4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f394:	2e01      	cmp	r6, #1
 800f396:	68a3      	ldr	r3, [r4, #8]
 800f398:	d011      	beq.n	800f3be <ucdr_deserialize_endian_uint16_t+0xae>
 800f39a:	785b      	ldrb	r3, [r3, #1]
 800f39c:	702b      	strb	r3, [r5, #0]
 800f39e:	68a3      	ldr	r3, [r4, #8]
 800f3a0:	781b      	ldrb	r3, [r3, #0]
 800f3a2:	706b      	strb	r3, [r5, #1]
 800f3a4:	68a2      	ldr	r2, [r4, #8]
 800f3a6:	6923      	ldr	r3, [r4, #16]
 800f3a8:	3202      	adds	r2, #2
 800f3aa:	3302      	adds	r3, #2
 800f3ac:	2102      	movs	r1, #2
 800f3ae:	60a2      	str	r2, [r4, #8]
 800f3b0:	6123      	str	r3, [r4, #16]
 800f3b2:	7561      	strb	r1, [r4, #21]
 800f3b4:	7da0      	ldrb	r0, [r4, #22]
 800f3b6:	f080 0001 	eor.w	r0, r0, #1
 800f3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	802b      	strh	r3, [r5, #0]
 800f3c2:	e7ef      	b.n	800f3a4 <ucdr_deserialize_endian_uint16_t+0x94>
 800f3c4:	68a2      	ldr	r2, [r4, #8]
 800f3c6:	6923      	ldr	r3, [r4, #16]
 800f3c8:	7da0      	ldrb	r0, [r4, #22]
 800f3ca:	f884 9015 	strb.w	r9, [r4, #21]
 800f3ce:	1bd2      	subs	r2, r2, r7
 800f3d0:	1bdb      	subs	r3, r3, r7
 800f3d2:	60a2      	str	r2, [r4, #8]
 800f3d4:	6123      	str	r3, [r4, #16]
 800f3d6:	f080 0001 	eor.w	r0, r0, #1
 800f3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3de:	68a3      	ldr	r3, [r4, #8]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	706b      	strb	r3, [r5, #1]
 800f3e4:	e7c3      	b.n	800f36e <ucdr_deserialize_endian_uint16_t+0x5e>
 800f3e6:	4641      	mov	r1, r8
 800f3e8:	463a      	mov	r2, r7
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	f00c ffeb 	bl	801c3c6 <memcpy>
 800f3f0:	68a1      	ldr	r1, [r4, #8]
 800f3f2:	4652      	mov	r2, sl
 800f3f4:	19e8      	adds	r0, r5, r7
 800f3f6:	f00c ffe6 	bl	801c3c6 <memcpy>
 800f3fa:	e7b8      	b.n	800f36e <ucdr_deserialize_endian_uint16_t+0x5e>

0800f3fc <ucdr_serialize_uint32_t>:
 800f3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f400:	b082      	sub	sp, #8
 800f402:	4604      	mov	r4, r0
 800f404:	9101      	str	r1, [sp, #4]
 800f406:	2104      	movs	r1, #4
 800f408:	f001 f858 	bl	80104bc <ucdr_buffer_alignment>
 800f40c:	4601      	mov	r1, r0
 800f40e:	4620      	mov	r0, r4
 800f410:	7d67      	ldrb	r7, [r4, #21]
 800f412:	f001 f897 	bl	8010544 <ucdr_advance_buffer>
 800f416:	2104      	movs	r1, #4
 800f418:	4620      	mov	r0, r4
 800f41a:	f000 ffef 	bl	80103fc <ucdr_check_buffer_available_for>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d139      	bne.n	800f496 <ucdr_serialize_uint32_t+0x9a>
 800f422:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f426:	42ab      	cmp	r3, r5
 800f428:	d930      	bls.n	800f48c <ucdr_serialize_uint32_t+0x90>
 800f42a:	1b5e      	subs	r6, r3, r5
 800f42c:	60a3      	str	r3, [r4, #8]
 800f42e:	6923      	ldr	r3, [r4, #16]
 800f430:	f1c6 0804 	rsb	r8, r6, #4
 800f434:	4433      	add	r3, r6
 800f436:	6123      	str	r3, [r4, #16]
 800f438:	4641      	mov	r1, r8
 800f43a:	4620      	mov	r0, r4
 800f43c:	f000 ffea 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f440:	2800      	cmp	r0, #0
 800f442:	d04c      	beq.n	800f4de <ucdr_serialize_uint32_t+0xe2>
 800f444:	7d23      	ldrb	r3, [r4, #20]
 800f446:	2b01      	cmp	r3, #1
 800f448:	d063      	beq.n	800f512 <ucdr_serialize_uint32_t+0x116>
 800f44a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f44e:	702b      	strb	r3, [r5, #0]
 800f450:	2e00      	cmp	r6, #0
 800f452:	d051      	beq.n	800f4f8 <ucdr_serialize_uint32_t+0xfc>
 800f454:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f458:	706b      	strb	r3, [r5, #1]
 800f45a:	2e01      	cmp	r6, #1
 800f45c:	d050      	beq.n	800f500 <ucdr_serialize_uint32_t+0x104>
 800f45e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f462:	70ab      	strb	r3, [r5, #2]
 800f464:	2e02      	cmp	r6, #2
 800f466:	d04f      	beq.n	800f508 <ucdr_serialize_uint32_t+0x10c>
 800f468:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f46c:	70eb      	strb	r3, [r5, #3]
 800f46e:	6923      	ldr	r3, [r4, #16]
 800f470:	68a2      	ldr	r2, [r4, #8]
 800f472:	7da0      	ldrb	r0, [r4, #22]
 800f474:	3304      	adds	r3, #4
 800f476:	1b9e      	subs	r6, r3, r6
 800f478:	4442      	add	r2, r8
 800f47a:	2304      	movs	r3, #4
 800f47c:	f080 0001 	eor.w	r0, r0, #1
 800f480:	60a2      	str	r2, [r4, #8]
 800f482:	6126      	str	r6, [r4, #16]
 800f484:	7563      	strb	r3, [r4, #21]
 800f486:	b002      	add	sp, #8
 800f488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f48c:	2104      	movs	r1, #4
 800f48e:	4620      	mov	r0, r4
 800f490:	f000 ffc0 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f494:	b1d0      	cbz	r0, 800f4cc <ucdr_serialize_uint32_t+0xd0>
 800f496:	7d23      	ldrb	r3, [r4, #20]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	68a3      	ldr	r3, [r4, #8]
 800f49c:	d01c      	beq.n	800f4d8 <ucdr_serialize_uint32_t+0xdc>
 800f49e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f4a2:	701a      	strb	r2, [r3, #0]
 800f4a4:	68a3      	ldr	r3, [r4, #8]
 800f4a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4aa:	705a      	strb	r2, [r3, #1]
 800f4ac:	68a3      	ldr	r3, [r4, #8]
 800f4ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f4b2:	709a      	strb	r2, [r3, #2]
 800f4b4:	68a3      	ldr	r3, [r4, #8]
 800f4b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f4ba:	70da      	strb	r2, [r3, #3]
 800f4bc:	68a2      	ldr	r2, [r4, #8]
 800f4be:	6923      	ldr	r3, [r4, #16]
 800f4c0:	3204      	adds	r2, #4
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	2104      	movs	r1, #4
 800f4c6:	60a2      	str	r2, [r4, #8]
 800f4c8:	6123      	str	r3, [r4, #16]
 800f4ca:	7561      	strb	r1, [r4, #21]
 800f4cc:	7da0      	ldrb	r0, [r4, #22]
 800f4ce:	f080 0001 	eor.w	r0, r0, #1
 800f4d2:	b002      	add	sp, #8
 800f4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4d8:	9a01      	ldr	r2, [sp, #4]
 800f4da:	601a      	str	r2, [r3, #0]
 800f4dc:	e7ee      	b.n	800f4bc <ucdr_serialize_uint32_t+0xc0>
 800f4de:	68a2      	ldr	r2, [r4, #8]
 800f4e0:	6923      	ldr	r3, [r4, #16]
 800f4e2:	7da0      	ldrb	r0, [r4, #22]
 800f4e4:	7567      	strb	r7, [r4, #21]
 800f4e6:	1b92      	subs	r2, r2, r6
 800f4e8:	1b9b      	subs	r3, r3, r6
 800f4ea:	f080 0001 	eor.w	r0, r0, #1
 800f4ee:	60a2      	str	r2, [r4, #8]
 800f4f0:	6123      	str	r3, [r4, #16]
 800f4f2:	b002      	add	sp, #8
 800f4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f8:	68a3      	ldr	r3, [r4, #8]
 800f4fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f4fe:	701a      	strb	r2, [r3, #0]
 800f500:	68a3      	ldr	r3, [r4, #8]
 800f502:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f506:	701a      	strb	r2, [r3, #0]
 800f508:	68a3      	ldr	r3, [r4, #8]
 800f50a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f50e:	701a      	strb	r2, [r3, #0]
 800f510:	e7ad      	b.n	800f46e <ucdr_serialize_uint32_t+0x72>
 800f512:	4628      	mov	r0, r5
 800f514:	ad01      	add	r5, sp, #4
 800f516:	4629      	mov	r1, r5
 800f518:	4632      	mov	r2, r6
 800f51a:	f00c ff54 	bl	801c3c6 <memcpy>
 800f51e:	68a0      	ldr	r0, [r4, #8]
 800f520:	4642      	mov	r2, r8
 800f522:	19a9      	adds	r1, r5, r6
 800f524:	f00c ff4f 	bl	801c3c6 <memcpy>
 800f528:	e7a1      	b.n	800f46e <ucdr_serialize_uint32_t+0x72>
 800f52a:	bf00      	nop

0800f52c <ucdr_serialize_endian_uint32_t>:
 800f52c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f530:	b083      	sub	sp, #12
 800f532:	460d      	mov	r5, r1
 800f534:	2104      	movs	r1, #4
 800f536:	4604      	mov	r4, r0
 800f538:	9201      	str	r2, [sp, #4]
 800f53a:	f000 ffbf 	bl	80104bc <ucdr_buffer_alignment>
 800f53e:	4601      	mov	r1, r0
 800f540:	4620      	mov	r0, r4
 800f542:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f546:	f000 fffd 	bl	8010544 <ucdr_advance_buffer>
 800f54a:	2104      	movs	r1, #4
 800f54c:	4620      	mov	r0, r4
 800f54e:	f000 ff55 	bl	80103fc <ucdr_check_buffer_available_for>
 800f552:	2800      	cmp	r0, #0
 800f554:	d138      	bne.n	800f5c8 <ucdr_serialize_endian_uint32_t+0x9c>
 800f556:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f55a:	42b7      	cmp	r7, r6
 800f55c:	d92f      	bls.n	800f5be <ucdr_serialize_endian_uint32_t+0x92>
 800f55e:	6923      	ldr	r3, [r4, #16]
 800f560:	60a7      	str	r7, [r4, #8]
 800f562:	1bbf      	subs	r7, r7, r6
 800f564:	443b      	add	r3, r7
 800f566:	f1c7 0904 	rsb	r9, r7, #4
 800f56a:	6123      	str	r3, [r4, #16]
 800f56c:	4649      	mov	r1, r9
 800f56e:	4620      	mov	r0, r4
 800f570:	f000 ff50 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f574:	2800      	cmp	r0, #0
 800f576:	d04a      	beq.n	800f60e <ucdr_serialize_endian_uint32_t+0xe2>
 800f578:	2d01      	cmp	r5, #1
 800f57a:	d063      	beq.n	800f644 <ucdr_serialize_endian_uint32_t+0x118>
 800f57c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f580:	7033      	strb	r3, [r6, #0]
 800f582:	2f00      	cmp	r7, #0
 800f584:	d051      	beq.n	800f62a <ucdr_serialize_endian_uint32_t+0xfe>
 800f586:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f58a:	7073      	strb	r3, [r6, #1]
 800f58c:	2f01      	cmp	r7, #1
 800f58e:	d050      	beq.n	800f632 <ucdr_serialize_endian_uint32_t+0x106>
 800f590:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f594:	70b3      	strb	r3, [r6, #2]
 800f596:	2f02      	cmp	r7, #2
 800f598:	d04f      	beq.n	800f63a <ucdr_serialize_endian_uint32_t+0x10e>
 800f59a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f59e:	70f3      	strb	r3, [r6, #3]
 800f5a0:	6923      	ldr	r3, [r4, #16]
 800f5a2:	68a2      	ldr	r2, [r4, #8]
 800f5a4:	7da0      	ldrb	r0, [r4, #22]
 800f5a6:	3304      	adds	r3, #4
 800f5a8:	444a      	add	r2, r9
 800f5aa:	1bdb      	subs	r3, r3, r7
 800f5ac:	2104      	movs	r1, #4
 800f5ae:	f080 0001 	eor.w	r0, r0, #1
 800f5b2:	60a2      	str	r2, [r4, #8]
 800f5b4:	6123      	str	r3, [r4, #16]
 800f5b6:	7561      	strb	r1, [r4, #21]
 800f5b8:	b003      	add	sp, #12
 800f5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5be:	2104      	movs	r1, #4
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	f000 ff27 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f5c6:	b1c8      	cbz	r0, 800f5fc <ucdr_serialize_endian_uint32_t+0xd0>
 800f5c8:	2d01      	cmp	r5, #1
 800f5ca:	68a3      	ldr	r3, [r4, #8]
 800f5cc:	d01c      	beq.n	800f608 <ucdr_serialize_endian_uint32_t+0xdc>
 800f5ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f5d2:	701a      	strb	r2, [r3, #0]
 800f5d4:	68a3      	ldr	r3, [r4, #8]
 800f5d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5da:	705a      	strb	r2, [r3, #1]
 800f5dc:	68a3      	ldr	r3, [r4, #8]
 800f5de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f5e2:	709a      	strb	r2, [r3, #2]
 800f5e4:	68a3      	ldr	r3, [r4, #8]
 800f5e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f5ea:	70da      	strb	r2, [r3, #3]
 800f5ec:	68a2      	ldr	r2, [r4, #8]
 800f5ee:	6923      	ldr	r3, [r4, #16]
 800f5f0:	3204      	adds	r2, #4
 800f5f2:	3304      	adds	r3, #4
 800f5f4:	2104      	movs	r1, #4
 800f5f6:	60a2      	str	r2, [r4, #8]
 800f5f8:	6123      	str	r3, [r4, #16]
 800f5fa:	7561      	strb	r1, [r4, #21]
 800f5fc:	7da0      	ldrb	r0, [r4, #22]
 800f5fe:	f080 0001 	eor.w	r0, r0, #1
 800f602:	b003      	add	sp, #12
 800f604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f608:	9a01      	ldr	r2, [sp, #4]
 800f60a:	601a      	str	r2, [r3, #0]
 800f60c:	e7ee      	b.n	800f5ec <ucdr_serialize_endian_uint32_t+0xc0>
 800f60e:	68a2      	ldr	r2, [r4, #8]
 800f610:	6923      	ldr	r3, [r4, #16]
 800f612:	7da0      	ldrb	r0, [r4, #22]
 800f614:	f884 8015 	strb.w	r8, [r4, #21]
 800f618:	1bd2      	subs	r2, r2, r7
 800f61a:	1bdb      	subs	r3, r3, r7
 800f61c:	f080 0001 	eor.w	r0, r0, #1
 800f620:	60a2      	str	r2, [r4, #8]
 800f622:	6123      	str	r3, [r4, #16]
 800f624:	b003      	add	sp, #12
 800f626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f62a:	68a3      	ldr	r3, [r4, #8]
 800f62c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f630:	701a      	strb	r2, [r3, #0]
 800f632:	68a3      	ldr	r3, [r4, #8]
 800f634:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f638:	701a      	strb	r2, [r3, #0]
 800f63a:	68a3      	ldr	r3, [r4, #8]
 800f63c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f640:	701a      	strb	r2, [r3, #0]
 800f642:	e7ad      	b.n	800f5a0 <ucdr_serialize_endian_uint32_t+0x74>
 800f644:	ad01      	add	r5, sp, #4
 800f646:	4629      	mov	r1, r5
 800f648:	463a      	mov	r2, r7
 800f64a:	4630      	mov	r0, r6
 800f64c:	f00c febb 	bl	801c3c6 <memcpy>
 800f650:	68a0      	ldr	r0, [r4, #8]
 800f652:	464a      	mov	r2, r9
 800f654:	19e9      	adds	r1, r5, r7
 800f656:	f00c feb6 	bl	801c3c6 <memcpy>
 800f65a:	e7a1      	b.n	800f5a0 <ucdr_serialize_endian_uint32_t+0x74>

0800f65c <ucdr_deserialize_uint32_t>:
 800f65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f660:	460d      	mov	r5, r1
 800f662:	2104      	movs	r1, #4
 800f664:	4604      	mov	r4, r0
 800f666:	f000 ff29 	bl	80104bc <ucdr_buffer_alignment>
 800f66a:	4601      	mov	r1, r0
 800f66c:	4620      	mov	r0, r4
 800f66e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f672:	f000 ff67 	bl	8010544 <ucdr_advance_buffer>
 800f676:	2104      	movs	r1, #4
 800f678:	4620      	mov	r0, r4
 800f67a:	f000 febf 	bl	80103fc <ucdr_check_buffer_available_for>
 800f67e:	2800      	cmp	r0, #0
 800f680:	d138      	bne.n	800f6f4 <ucdr_deserialize_uint32_t+0x98>
 800f682:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f686:	42b7      	cmp	r7, r6
 800f688:	d92f      	bls.n	800f6ea <ucdr_deserialize_uint32_t+0x8e>
 800f68a:	6923      	ldr	r3, [r4, #16]
 800f68c:	60a7      	str	r7, [r4, #8]
 800f68e:	1bbf      	subs	r7, r7, r6
 800f690:	443b      	add	r3, r7
 800f692:	f1c7 0904 	rsb	r9, r7, #4
 800f696:	6123      	str	r3, [r4, #16]
 800f698:	4649      	mov	r1, r9
 800f69a:	4620      	mov	r0, r4
 800f69c:	f000 feba 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	d046      	beq.n	800f732 <ucdr_deserialize_uint32_t+0xd6>
 800f6a4:	7d23      	ldrb	r3, [r4, #20]
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	d05c      	beq.n	800f764 <ucdr_deserialize_uint32_t+0x108>
 800f6aa:	78f3      	ldrb	r3, [r6, #3]
 800f6ac:	702b      	strb	r3, [r5, #0]
 800f6ae:	2f00      	cmp	r7, #0
 800f6b0:	d04c      	beq.n	800f74c <ucdr_deserialize_uint32_t+0xf0>
 800f6b2:	78b3      	ldrb	r3, [r6, #2]
 800f6b4:	706b      	strb	r3, [r5, #1]
 800f6b6:	2f01      	cmp	r7, #1
 800f6b8:	f105 0302 	add.w	r3, r5, #2
 800f6bc:	d04a      	beq.n	800f754 <ucdr_deserialize_uint32_t+0xf8>
 800f6be:	7873      	ldrb	r3, [r6, #1]
 800f6c0:	70ab      	strb	r3, [r5, #2]
 800f6c2:	2f02      	cmp	r7, #2
 800f6c4:	f105 0303 	add.w	r3, r5, #3
 800f6c8:	d048      	beq.n	800f75c <ucdr_deserialize_uint32_t+0x100>
 800f6ca:	7833      	ldrb	r3, [r6, #0]
 800f6cc:	70eb      	strb	r3, [r5, #3]
 800f6ce:	6923      	ldr	r3, [r4, #16]
 800f6d0:	68a2      	ldr	r2, [r4, #8]
 800f6d2:	7da0      	ldrb	r0, [r4, #22]
 800f6d4:	2104      	movs	r1, #4
 800f6d6:	3304      	adds	r3, #4
 800f6d8:	444a      	add	r2, r9
 800f6da:	1bdb      	subs	r3, r3, r7
 800f6dc:	7561      	strb	r1, [r4, #21]
 800f6de:	60a2      	str	r2, [r4, #8]
 800f6e0:	6123      	str	r3, [r4, #16]
 800f6e2:	f080 0001 	eor.w	r0, r0, #1
 800f6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ea:	2104      	movs	r1, #4
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f000 fe91 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f6f2:	b1b0      	cbz	r0, 800f722 <ucdr_deserialize_uint32_t+0xc6>
 800f6f4:	7d23      	ldrb	r3, [r4, #20]
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	68a3      	ldr	r3, [r4, #8]
 800f6fa:	d017      	beq.n	800f72c <ucdr_deserialize_uint32_t+0xd0>
 800f6fc:	78db      	ldrb	r3, [r3, #3]
 800f6fe:	702b      	strb	r3, [r5, #0]
 800f700:	68a3      	ldr	r3, [r4, #8]
 800f702:	789b      	ldrb	r3, [r3, #2]
 800f704:	706b      	strb	r3, [r5, #1]
 800f706:	68a3      	ldr	r3, [r4, #8]
 800f708:	785b      	ldrb	r3, [r3, #1]
 800f70a:	70ab      	strb	r3, [r5, #2]
 800f70c:	68a3      	ldr	r3, [r4, #8]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	70eb      	strb	r3, [r5, #3]
 800f712:	68a2      	ldr	r2, [r4, #8]
 800f714:	6923      	ldr	r3, [r4, #16]
 800f716:	3204      	adds	r2, #4
 800f718:	3304      	adds	r3, #4
 800f71a:	2104      	movs	r1, #4
 800f71c:	60a2      	str	r2, [r4, #8]
 800f71e:	6123      	str	r3, [r4, #16]
 800f720:	7561      	strb	r1, [r4, #21]
 800f722:	7da0      	ldrb	r0, [r4, #22]
 800f724:	f080 0001 	eor.w	r0, r0, #1
 800f728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	602b      	str	r3, [r5, #0]
 800f730:	e7ef      	b.n	800f712 <ucdr_deserialize_uint32_t+0xb6>
 800f732:	68a2      	ldr	r2, [r4, #8]
 800f734:	6923      	ldr	r3, [r4, #16]
 800f736:	7da0      	ldrb	r0, [r4, #22]
 800f738:	f884 8015 	strb.w	r8, [r4, #21]
 800f73c:	1bd2      	subs	r2, r2, r7
 800f73e:	1bdb      	subs	r3, r3, r7
 800f740:	60a2      	str	r2, [r4, #8]
 800f742:	6123      	str	r3, [r4, #16]
 800f744:	f080 0001 	eor.w	r0, r0, #1
 800f748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f74c:	68a3      	ldr	r3, [r4, #8]
 800f74e:	789b      	ldrb	r3, [r3, #2]
 800f750:	706b      	strb	r3, [r5, #1]
 800f752:	1cab      	adds	r3, r5, #2
 800f754:	68a2      	ldr	r2, [r4, #8]
 800f756:	7852      	ldrb	r2, [r2, #1]
 800f758:	f803 2b01 	strb.w	r2, [r3], #1
 800f75c:	68a2      	ldr	r2, [r4, #8]
 800f75e:	7812      	ldrb	r2, [r2, #0]
 800f760:	701a      	strb	r2, [r3, #0]
 800f762:	e7b4      	b.n	800f6ce <ucdr_deserialize_uint32_t+0x72>
 800f764:	4631      	mov	r1, r6
 800f766:	463a      	mov	r2, r7
 800f768:	4628      	mov	r0, r5
 800f76a:	f00c fe2c 	bl	801c3c6 <memcpy>
 800f76e:	68a1      	ldr	r1, [r4, #8]
 800f770:	464a      	mov	r2, r9
 800f772:	19e8      	adds	r0, r5, r7
 800f774:	f00c fe27 	bl	801c3c6 <memcpy>
 800f778:	e7a9      	b.n	800f6ce <ucdr_deserialize_uint32_t+0x72>
 800f77a:	bf00      	nop

0800f77c <ucdr_deserialize_endian_uint32_t>:
 800f77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f780:	460e      	mov	r6, r1
 800f782:	2104      	movs	r1, #4
 800f784:	4604      	mov	r4, r0
 800f786:	4615      	mov	r5, r2
 800f788:	f000 fe98 	bl	80104bc <ucdr_buffer_alignment>
 800f78c:	4601      	mov	r1, r0
 800f78e:	4620      	mov	r0, r4
 800f790:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f794:	f000 fed6 	bl	8010544 <ucdr_advance_buffer>
 800f798:	2104      	movs	r1, #4
 800f79a:	4620      	mov	r0, r4
 800f79c:	f000 fe2e 	bl	80103fc <ucdr_check_buffer_available_for>
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	d13c      	bne.n	800f81e <ucdr_deserialize_endian_uint32_t+0xa2>
 800f7a4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f7a8:	42bb      	cmp	r3, r7
 800f7aa:	d933      	bls.n	800f814 <ucdr_deserialize_endian_uint32_t+0x98>
 800f7ac:	eba3 0807 	sub.w	r8, r3, r7
 800f7b0:	60a3      	str	r3, [r4, #8]
 800f7b2:	6923      	ldr	r3, [r4, #16]
 800f7b4:	f1c8 0a04 	rsb	sl, r8, #4
 800f7b8:	4443      	add	r3, r8
 800f7ba:	6123      	str	r3, [r4, #16]
 800f7bc:	4651      	mov	r1, sl
 800f7be:	4620      	mov	r0, r4
 800f7c0:	f000 fe28 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d048      	beq.n	800f85a <ucdr_deserialize_endian_uint32_t+0xde>
 800f7c8:	2e01      	cmp	r6, #1
 800f7ca:	d061      	beq.n	800f890 <ucdr_deserialize_endian_uint32_t+0x114>
 800f7cc:	78fb      	ldrb	r3, [r7, #3]
 800f7ce:	702b      	strb	r3, [r5, #0]
 800f7d0:	f1b8 0f00 	cmp.w	r8, #0
 800f7d4:	d050      	beq.n	800f878 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f7d6:	78bb      	ldrb	r3, [r7, #2]
 800f7d8:	706b      	strb	r3, [r5, #1]
 800f7da:	f1b8 0f01 	cmp.w	r8, #1
 800f7de:	f105 0302 	add.w	r3, r5, #2
 800f7e2:	d04d      	beq.n	800f880 <ucdr_deserialize_endian_uint32_t+0x104>
 800f7e4:	787b      	ldrb	r3, [r7, #1]
 800f7e6:	70ab      	strb	r3, [r5, #2]
 800f7e8:	f1b8 0f02 	cmp.w	r8, #2
 800f7ec:	f105 0303 	add.w	r3, r5, #3
 800f7f0:	d04a      	beq.n	800f888 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f7f2:	783b      	ldrb	r3, [r7, #0]
 800f7f4:	70eb      	strb	r3, [r5, #3]
 800f7f6:	6923      	ldr	r3, [r4, #16]
 800f7f8:	68a2      	ldr	r2, [r4, #8]
 800f7fa:	7da0      	ldrb	r0, [r4, #22]
 800f7fc:	2104      	movs	r1, #4
 800f7fe:	3304      	adds	r3, #4
 800f800:	4452      	add	r2, sl
 800f802:	eba3 0308 	sub.w	r3, r3, r8
 800f806:	7561      	strb	r1, [r4, #21]
 800f808:	60a2      	str	r2, [r4, #8]
 800f80a:	6123      	str	r3, [r4, #16]
 800f80c:	f080 0001 	eor.w	r0, r0, #1
 800f810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f814:	2104      	movs	r1, #4
 800f816:	4620      	mov	r0, r4
 800f818:	f000 fdfc 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f81c:	b1a8      	cbz	r0, 800f84a <ucdr_deserialize_endian_uint32_t+0xce>
 800f81e:	2e01      	cmp	r6, #1
 800f820:	68a3      	ldr	r3, [r4, #8]
 800f822:	d017      	beq.n	800f854 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f824:	78db      	ldrb	r3, [r3, #3]
 800f826:	702b      	strb	r3, [r5, #0]
 800f828:	68a3      	ldr	r3, [r4, #8]
 800f82a:	789b      	ldrb	r3, [r3, #2]
 800f82c:	706b      	strb	r3, [r5, #1]
 800f82e:	68a3      	ldr	r3, [r4, #8]
 800f830:	785b      	ldrb	r3, [r3, #1]
 800f832:	70ab      	strb	r3, [r5, #2]
 800f834:	68a3      	ldr	r3, [r4, #8]
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	70eb      	strb	r3, [r5, #3]
 800f83a:	68a2      	ldr	r2, [r4, #8]
 800f83c:	6923      	ldr	r3, [r4, #16]
 800f83e:	3204      	adds	r2, #4
 800f840:	3304      	adds	r3, #4
 800f842:	2104      	movs	r1, #4
 800f844:	60a2      	str	r2, [r4, #8]
 800f846:	6123      	str	r3, [r4, #16]
 800f848:	7561      	strb	r1, [r4, #21]
 800f84a:	7da0      	ldrb	r0, [r4, #22]
 800f84c:	f080 0001 	eor.w	r0, r0, #1
 800f850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	602b      	str	r3, [r5, #0]
 800f858:	e7ef      	b.n	800f83a <ucdr_deserialize_endian_uint32_t+0xbe>
 800f85a:	68a2      	ldr	r2, [r4, #8]
 800f85c:	6923      	ldr	r3, [r4, #16]
 800f85e:	7da0      	ldrb	r0, [r4, #22]
 800f860:	f884 9015 	strb.w	r9, [r4, #21]
 800f864:	eba2 0208 	sub.w	r2, r2, r8
 800f868:	eba3 0308 	sub.w	r3, r3, r8
 800f86c:	60a2      	str	r2, [r4, #8]
 800f86e:	6123      	str	r3, [r4, #16]
 800f870:	f080 0001 	eor.w	r0, r0, #1
 800f874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f878:	68a3      	ldr	r3, [r4, #8]
 800f87a:	789b      	ldrb	r3, [r3, #2]
 800f87c:	706b      	strb	r3, [r5, #1]
 800f87e:	1cab      	adds	r3, r5, #2
 800f880:	68a2      	ldr	r2, [r4, #8]
 800f882:	7852      	ldrb	r2, [r2, #1]
 800f884:	f803 2b01 	strb.w	r2, [r3], #1
 800f888:	68a2      	ldr	r2, [r4, #8]
 800f88a:	7812      	ldrb	r2, [r2, #0]
 800f88c:	701a      	strb	r2, [r3, #0]
 800f88e:	e7b2      	b.n	800f7f6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f890:	4639      	mov	r1, r7
 800f892:	4642      	mov	r2, r8
 800f894:	4628      	mov	r0, r5
 800f896:	f00c fd96 	bl	801c3c6 <memcpy>
 800f89a:	68a1      	ldr	r1, [r4, #8]
 800f89c:	4652      	mov	r2, sl
 800f89e:	eb05 0008 	add.w	r0, r5, r8
 800f8a2:	f00c fd90 	bl	801c3c6 <memcpy>
 800f8a6:	e7a6      	b.n	800f7f6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f8a8 <ucdr_serialize_uint64_t>:
 800f8a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ac:	2108      	movs	r1, #8
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	e9cd 2300 	strd	r2, r3, [sp]
 800f8b6:	f000 fe01 	bl	80104bc <ucdr_buffer_alignment>
 800f8ba:	4601      	mov	r1, r0
 800f8bc:	4620      	mov	r0, r4
 800f8be:	7d67      	ldrb	r7, [r4, #21]
 800f8c0:	f000 fe40 	bl	8010544 <ucdr_advance_buffer>
 800f8c4:	2108      	movs	r1, #8
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 fd98 	bl	80103fc <ucdr_check_buffer_available_for>
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d14e      	bne.n	800f96e <ucdr_serialize_uint64_t+0xc6>
 800f8d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f8d4:	42ab      	cmp	r3, r5
 800f8d6:	d945      	bls.n	800f964 <ucdr_serialize_uint64_t+0xbc>
 800f8d8:	1b5e      	subs	r6, r3, r5
 800f8da:	60a3      	str	r3, [r4, #8]
 800f8dc:	6923      	ldr	r3, [r4, #16]
 800f8de:	f1c6 0808 	rsb	r8, r6, #8
 800f8e2:	4433      	add	r3, r6
 800f8e4:	6123      	str	r3, [r4, #16]
 800f8e6:	4641      	mov	r1, r8
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f000 fd93 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	d074      	beq.n	800f9dc <ucdr_serialize_uint64_t+0x134>
 800f8f2:	7d23      	ldrb	r3, [r4, #20]
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	f000 809b 	beq.w	800fa30 <ucdr_serialize_uint64_t+0x188>
 800f8fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f8fe:	702b      	strb	r3, [r5, #0]
 800f900:	2e00      	cmp	r6, #0
 800f902:	d078      	beq.n	800f9f6 <ucdr_serialize_uint64_t+0x14e>
 800f904:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f908:	706b      	strb	r3, [r5, #1]
 800f90a:	2e01      	cmp	r6, #1
 800f90c:	d077      	beq.n	800f9fe <ucdr_serialize_uint64_t+0x156>
 800f90e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f912:	70ab      	strb	r3, [r5, #2]
 800f914:	2e02      	cmp	r6, #2
 800f916:	d076      	beq.n	800fa06 <ucdr_serialize_uint64_t+0x15e>
 800f918:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f91c:	70eb      	strb	r3, [r5, #3]
 800f91e:	2e03      	cmp	r6, #3
 800f920:	d075      	beq.n	800fa0e <ucdr_serialize_uint64_t+0x166>
 800f922:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f926:	712b      	strb	r3, [r5, #4]
 800f928:	2e04      	cmp	r6, #4
 800f92a:	d074      	beq.n	800fa16 <ucdr_serialize_uint64_t+0x16e>
 800f92c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f930:	716b      	strb	r3, [r5, #5]
 800f932:	2e05      	cmp	r6, #5
 800f934:	d073      	beq.n	800fa1e <ucdr_serialize_uint64_t+0x176>
 800f936:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f93a:	71ab      	strb	r3, [r5, #6]
 800f93c:	2e06      	cmp	r6, #6
 800f93e:	d072      	beq.n	800fa26 <ucdr_serialize_uint64_t+0x17e>
 800f940:	f89d 3000 	ldrb.w	r3, [sp]
 800f944:	71eb      	strb	r3, [r5, #7]
 800f946:	6923      	ldr	r3, [r4, #16]
 800f948:	68a2      	ldr	r2, [r4, #8]
 800f94a:	7da0      	ldrb	r0, [r4, #22]
 800f94c:	3308      	adds	r3, #8
 800f94e:	1b9e      	subs	r6, r3, r6
 800f950:	4442      	add	r2, r8
 800f952:	2308      	movs	r3, #8
 800f954:	f080 0001 	eor.w	r0, r0, #1
 800f958:	60a2      	str	r2, [r4, #8]
 800f95a:	6126      	str	r6, [r4, #16]
 800f95c:	7563      	strb	r3, [r4, #21]
 800f95e:	b002      	add	sp, #8
 800f960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f964:	2108      	movs	r1, #8
 800f966:	4620      	mov	r0, r4
 800f968:	f000 fd54 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800f96c:	b350      	cbz	r0, 800f9c4 <ucdr_serialize_uint64_t+0x11c>
 800f96e:	7d23      	ldrb	r3, [r4, #20]
 800f970:	2b01      	cmp	r3, #1
 800f972:	d02d      	beq.n	800f9d0 <ucdr_serialize_uint64_t+0x128>
 800f974:	68a3      	ldr	r3, [r4, #8]
 800f976:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f97a:	701a      	strb	r2, [r3, #0]
 800f97c:	68a3      	ldr	r3, [r4, #8]
 800f97e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f982:	705a      	strb	r2, [r3, #1]
 800f984:	68a3      	ldr	r3, [r4, #8]
 800f986:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f98a:	709a      	strb	r2, [r3, #2]
 800f98c:	68a3      	ldr	r3, [r4, #8]
 800f98e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f992:	70da      	strb	r2, [r3, #3]
 800f994:	68a3      	ldr	r3, [r4, #8]
 800f996:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f99a:	711a      	strb	r2, [r3, #4]
 800f99c:	68a3      	ldr	r3, [r4, #8]
 800f99e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f9a2:	715a      	strb	r2, [r3, #5]
 800f9a4:	68a3      	ldr	r3, [r4, #8]
 800f9a6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f9aa:	719a      	strb	r2, [r3, #6]
 800f9ac:	68a3      	ldr	r3, [r4, #8]
 800f9ae:	f89d 2000 	ldrb.w	r2, [sp]
 800f9b2:	71da      	strb	r2, [r3, #7]
 800f9b4:	68a2      	ldr	r2, [r4, #8]
 800f9b6:	6923      	ldr	r3, [r4, #16]
 800f9b8:	3208      	adds	r2, #8
 800f9ba:	3308      	adds	r3, #8
 800f9bc:	2108      	movs	r1, #8
 800f9be:	60a2      	str	r2, [r4, #8]
 800f9c0:	6123      	str	r3, [r4, #16]
 800f9c2:	7561      	strb	r1, [r4, #21]
 800f9c4:	7da0      	ldrb	r0, [r4, #22]
 800f9c6:	f080 0001 	eor.w	r0, r0, #1
 800f9ca:	b002      	add	sp, #8
 800f9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d0:	466b      	mov	r3, sp
 800f9d2:	cb03      	ldmia	r3!, {r0, r1}
 800f9d4:	68a3      	ldr	r3, [r4, #8]
 800f9d6:	6018      	str	r0, [r3, #0]
 800f9d8:	6059      	str	r1, [r3, #4]
 800f9da:	e7eb      	b.n	800f9b4 <ucdr_serialize_uint64_t+0x10c>
 800f9dc:	68a2      	ldr	r2, [r4, #8]
 800f9de:	6923      	ldr	r3, [r4, #16]
 800f9e0:	7da0      	ldrb	r0, [r4, #22]
 800f9e2:	7567      	strb	r7, [r4, #21]
 800f9e4:	1b92      	subs	r2, r2, r6
 800f9e6:	1b9b      	subs	r3, r3, r6
 800f9e8:	f080 0001 	eor.w	r0, r0, #1
 800f9ec:	60a2      	str	r2, [r4, #8]
 800f9ee:	6123      	str	r3, [r4, #16]
 800f9f0:	b002      	add	sp, #8
 800f9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f6:	68a3      	ldr	r3, [r4, #8]
 800f9f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9fc:	701a      	strb	r2, [r3, #0]
 800f9fe:	68a3      	ldr	r3, [r4, #8]
 800fa00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fa04:	701a      	strb	r2, [r3, #0]
 800fa06:	68a3      	ldr	r3, [r4, #8]
 800fa08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa0c:	701a      	strb	r2, [r3, #0]
 800fa0e:	68a3      	ldr	r3, [r4, #8]
 800fa10:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fa14:	701a      	strb	r2, [r3, #0]
 800fa16:	68a3      	ldr	r3, [r4, #8]
 800fa18:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fa1c:	701a      	strb	r2, [r3, #0]
 800fa1e:	68a3      	ldr	r3, [r4, #8]
 800fa20:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fa24:	701a      	strb	r2, [r3, #0]
 800fa26:	68a3      	ldr	r3, [r4, #8]
 800fa28:	f89d 2000 	ldrb.w	r2, [sp]
 800fa2c:	701a      	strb	r2, [r3, #0]
 800fa2e:	e78a      	b.n	800f946 <ucdr_serialize_uint64_t+0x9e>
 800fa30:	4628      	mov	r0, r5
 800fa32:	466d      	mov	r5, sp
 800fa34:	4629      	mov	r1, r5
 800fa36:	4632      	mov	r2, r6
 800fa38:	f00c fcc5 	bl	801c3c6 <memcpy>
 800fa3c:	68a0      	ldr	r0, [r4, #8]
 800fa3e:	4642      	mov	r2, r8
 800fa40:	19a9      	adds	r1, r5, r6
 800fa42:	f00c fcc0 	bl	801c3c6 <memcpy>
 800fa46:	e77e      	b.n	800f946 <ucdr_serialize_uint64_t+0x9e>

0800fa48 <ucdr_serialize_int16_t>:
 800fa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	460b      	mov	r3, r1
 800fa50:	2102      	movs	r1, #2
 800fa52:	4604      	mov	r4, r0
 800fa54:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fa58:	f000 fd30 	bl	80104bc <ucdr_buffer_alignment>
 800fa5c:	4601      	mov	r1, r0
 800fa5e:	4620      	mov	r0, r4
 800fa60:	7d67      	ldrb	r7, [r4, #21]
 800fa62:	f000 fd6f 	bl	8010544 <ucdr_advance_buffer>
 800fa66:	2102      	movs	r1, #2
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f000 fcc7 	bl	80103fc <ucdr_check_buffer_available_for>
 800fa6e:	bb78      	cbnz	r0, 800fad0 <ucdr_serialize_int16_t+0x88>
 800fa70:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fa74:	42ab      	cmp	r3, r5
 800fa76:	d926      	bls.n	800fac6 <ucdr_serialize_int16_t+0x7e>
 800fa78:	1b5e      	subs	r6, r3, r5
 800fa7a:	60a3      	str	r3, [r4, #8]
 800fa7c:	6923      	ldr	r3, [r4, #16]
 800fa7e:	f1c6 0802 	rsb	r8, r6, #2
 800fa82:	4433      	add	r3, r6
 800fa84:	6123      	str	r3, [r4, #16]
 800fa86:	4641      	mov	r1, r8
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f000 fcc3 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	d03b      	beq.n	800fb0a <ucdr_serialize_int16_t+0xc2>
 800fa92:	7d23      	ldrb	r3, [r4, #20]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d04a      	beq.n	800fb2e <ucdr_serialize_int16_t+0xe6>
 800fa98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa9c:	702b      	strb	r3, [r5, #0]
 800fa9e:	2e00      	cmp	r6, #0
 800faa0:	d040      	beq.n	800fb24 <ucdr_serialize_int16_t+0xdc>
 800faa2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800faa6:	706b      	strb	r3, [r5, #1]
 800faa8:	6923      	ldr	r3, [r4, #16]
 800faaa:	68a2      	ldr	r2, [r4, #8]
 800faac:	7da0      	ldrb	r0, [r4, #22]
 800faae:	3302      	adds	r3, #2
 800fab0:	1b9e      	subs	r6, r3, r6
 800fab2:	4442      	add	r2, r8
 800fab4:	2302      	movs	r3, #2
 800fab6:	f080 0001 	eor.w	r0, r0, #1
 800faba:	60a2      	str	r2, [r4, #8]
 800fabc:	6126      	str	r6, [r4, #16]
 800fabe:	7563      	strb	r3, [r4, #21]
 800fac0:	b002      	add	sp, #8
 800fac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac6:	2102      	movs	r1, #2
 800fac8:	4620      	mov	r0, r4
 800faca:	f000 fca3 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800face:	b190      	cbz	r0, 800faf6 <ucdr_serialize_int16_t+0xae>
 800fad0:	7d23      	ldrb	r3, [r4, #20]
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	68a3      	ldr	r3, [r4, #8]
 800fad6:	d014      	beq.n	800fb02 <ucdr_serialize_int16_t+0xba>
 800fad8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fadc:	701a      	strb	r2, [r3, #0]
 800fade:	68a3      	ldr	r3, [r4, #8]
 800fae0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fae4:	705a      	strb	r2, [r3, #1]
 800fae6:	68a2      	ldr	r2, [r4, #8]
 800fae8:	6923      	ldr	r3, [r4, #16]
 800faea:	3202      	adds	r2, #2
 800faec:	3302      	adds	r3, #2
 800faee:	2102      	movs	r1, #2
 800faf0:	60a2      	str	r2, [r4, #8]
 800faf2:	6123      	str	r3, [r4, #16]
 800faf4:	7561      	strb	r1, [r4, #21]
 800faf6:	7da0      	ldrb	r0, [r4, #22]
 800faf8:	f080 0001 	eor.w	r0, r0, #1
 800fafc:	b002      	add	sp, #8
 800fafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fb06:	801a      	strh	r2, [r3, #0]
 800fb08:	e7ed      	b.n	800fae6 <ucdr_serialize_int16_t+0x9e>
 800fb0a:	68a2      	ldr	r2, [r4, #8]
 800fb0c:	6923      	ldr	r3, [r4, #16]
 800fb0e:	7da0      	ldrb	r0, [r4, #22]
 800fb10:	7567      	strb	r7, [r4, #21]
 800fb12:	1b92      	subs	r2, r2, r6
 800fb14:	1b9b      	subs	r3, r3, r6
 800fb16:	f080 0001 	eor.w	r0, r0, #1
 800fb1a:	60a2      	str	r2, [r4, #8]
 800fb1c:	6123      	str	r3, [r4, #16]
 800fb1e:	b002      	add	sp, #8
 800fb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb24:	68a3      	ldr	r3, [r4, #8]
 800fb26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb2a:	701a      	strb	r2, [r3, #0]
 800fb2c:	e7bc      	b.n	800faa8 <ucdr_serialize_int16_t+0x60>
 800fb2e:	4628      	mov	r0, r5
 800fb30:	f10d 0506 	add.w	r5, sp, #6
 800fb34:	4629      	mov	r1, r5
 800fb36:	4632      	mov	r2, r6
 800fb38:	f00c fc45 	bl	801c3c6 <memcpy>
 800fb3c:	68a0      	ldr	r0, [r4, #8]
 800fb3e:	4642      	mov	r2, r8
 800fb40:	19a9      	adds	r1, r5, r6
 800fb42:	f00c fc40 	bl	801c3c6 <memcpy>
 800fb46:	e7af      	b.n	800faa8 <ucdr_serialize_int16_t+0x60>

0800fb48 <ucdr_deserialize_int16_t>:
 800fb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb4c:	460d      	mov	r5, r1
 800fb4e:	2102      	movs	r1, #2
 800fb50:	4604      	mov	r4, r0
 800fb52:	f000 fcb3 	bl	80104bc <ucdr_buffer_alignment>
 800fb56:	4601      	mov	r1, r0
 800fb58:	4620      	mov	r0, r4
 800fb5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fb5e:	f000 fcf1 	bl	8010544 <ucdr_advance_buffer>
 800fb62:	2102      	movs	r1, #2
 800fb64:	4620      	mov	r0, r4
 800fb66:	f000 fc49 	bl	80103fc <ucdr_check_buffer_available_for>
 800fb6a:	bb60      	cbnz	r0, 800fbc6 <ucdr_deserialize_int16_t+0x7e>
 800fb6c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fb70:	42be      	cmp	r6, r7
 800fb72:	d923      	bls.n	800fbbc <ucdr_deserialize_int16_t+0x74>
 800fb74:	6923      	ldr	r3, [r4, #16]
 800fb76:	60a6      	str	r6, [r4, #8]
 800fb78:	1bf6      	subs	r6, r6, r7
 800fb7a:	4433      	add	r3, r6
 800fb7c:	f1c6 0902 	rsb	r9, r6, #2
 800fb80:	6123      	str	r3, [r4, #16]
 800fb82:	4649      	mov	r1, r9
 800fb84:	4620      	mov	r0, r4
 800fb86:	f000 fc45 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d034      	beq.n	800fbf8 <ucdr_deserialize_int16_t+0xb0>
 800fb8e:	7d23      	ldrb	r3, [r4, #20]
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d042      	beq.n	800fc1a <ucdr_deserialize_int16_t+0xd2>
 800fb94:	787b      	ldrb	r3, [r7, #1]
 800fb96:	702b      	strb	r3, [r5, #0]
 800fb98:	2e00      	cmp	r6, #0
 800fb9a:	d03a      	beq.n	800fc12 <ucdr_deserialize_int16_t+0xca>
 800fb9c:	783b      	ldrb	r3, [r7, #0]
 800fb9e:	706b      	strb	r3, [r5, #1]
 800fba0:	6923      	ldr	r3, [r4, #16]
 800fba2:	68a2      	ldr	r2, [r4, #8]
 800fba4:	7da0      	ldrb	r0, [r4, #22]
 800fba6:	2102      	movs	r1, #2
 800fba8:	3302      	adds	r3, #2
 800fbaa:	444a      	add	r2, r9
 800fbac:	1b9b      	subs	r3, r3, r6
 800fbae:	7561      	strb	r1, [r4, #21]
 800fbb0:	60a2      	str	r2, [r4, #8]
 800fbb2:	6123      	str	r3, [r4, #16]
 800fbb4:	f080 0001 	eor.w	r0, r0, #1
 800fbb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbbc:	2102      	movs	r1, #2
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f000 fc28 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800fbc4:	b180      	cbz	r0, 800fbe8 <ucdr_deserialize_int16_t+0xa0>
 800fbc6:	7d23      	ldrb	r3, [r4, #20]
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	68a3      	ldr	r3, [r4, #8]
 800fbcc:	d011      	beq.n	800fbf2 <ucdr_deserialize_int16_t+0xaa>
 800fbce:	785b      	ldrb	r3, [r3, #1]
 800fbd0:	702b      	strb	r3, [r5, #0]
 800fbd2:	68a3      	ldr	r3, [r4, #8]
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	706b      	strb	r3, [r5, #1]
 800fbd8:	68a2      	ldr	r2, [r4, #8]
 800fbda:	6923      	ldr	r3, [r4, #16]
 800fbdc:	3202      	adds	r2, #2
 800fbde:	3302      	adds	r3, #2
 800fbe0:	2102      	movs	r1, #2
 800fbe2:	60a2      	str	r2, [r4, #8]
 800fbe4:	6123      	str	r3, [r4, #16]
 800fbe6:	7561      	strb	r1, [r4, #21]
 800fbe8:	7da0      	ldrb	r0, [r4, #22]
 800fbea:	f080 0001 	eor.w	r0, r0, #1
 800fbee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbf2:	881b      	ldrh	r3, [r3, #0]
 800fbf4:	802b      	strh	r3, [r5, #0]
 800fbf6:	e7ef      	b.n	800fbd8 <ucdr_deserialize_int16_t+0x90>
 800fbf8:	68a2      	ldr	r2, [r4, #8]
 800fbfa:	6923      	ldr	r3, [r4, #16]
 800fbfc:	7da0      	ldrb	r0, [r4, #22]
 800fbfe:	f884 8015 	strb.w	r8, [r4, #21]
 800fc02:	1b92      	subs	r2, r2, r6
 800fc04:	1b9b      	subs	r3, r3, r6
 800fc06:	60a2      	str	r2, [r4, #8]
 800fc08:	6123      	str	r3, [r4, #16]
 800fc0a:	f080 0001 	eor.w	r0, r0, #1
 800fc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc12:	68a3      	ldr	r3, [r4, #8]
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	706b      	strb	r3, [r5, #1]
 800fc18:	e7c2      	b.n	800fba0 <ucdr_deserialize_int16_t+0x58>
 800fc1a:	4639      	mov	r1, r7
 800fc1c:	4632      	mov	r2, r6
 800fc1e:	4628      	mov	r0, r5
 800fc20:	f00c fbd1 	bl	801c3c6 <memcpy>
 800fc24:	68a1      	ldr	r1, [r4, #8]
 800fc26:	464a      	mov	r2, r9
 800fc28:	19a8      	adds	r0, r5, r6
 800fc2a:	f00c fbcc 	bl	801c3c6 <memcpy>
 800fc2e:	e7b7      	b.n	800fba0 <ucdr_deserialize_int16_t+0x58>

0800fc30 <ucdr_serialize_int32_t>:
 800fc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc34:	b082      	sub	sp, #8
 800fc36:	4604      	mov	r4, r0
 800fc38:	9101      	str	r1, [sp, #4]
 800fc3a:	2104      	movs	r1, #4
 800fc3c:	f000 fc3e 	bl	80104bc <ucdr_buffer_alignment>
 800fc40:	4601      	mov	r1, r0
 800fc42:	4620      	mov	r0, r4
 800fc44:	7d67      	ldrb	r7, [r4, #21]
 800fc46:	f000 fc7d 	bl	8010544 <ucdr_advance_buffer>
 800fc4a:	2104      	movs	r1, #4
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f000 fbd5 	bl	80103fc <ucdr_check_buffer_available_for>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	d139      	bne.n	800fcca <ucdr_serialize_int32_t+0x9a>
 800fc56:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fc5a:	42ab      	cmp	r3, r5
 800fc5c:	d930      	bls.n	800fcc0 <ucdr_serialize_int32_t+0x90>
 800fc5e:	1b5e      	subs	r6, r3, r5
 800fc60:	60a3      	str	r3, [r4, #8]
 800fc62:	6923      	ldr	r3, [r4, #16]
 800fc64:	f1c6 0804 	rsb	r8, r6, #4
 800fc68:	4433      	add	r3, r6
 800fc6a:	6123      	str	r3, [r4, #16]
 800fc6c:	4641      	mov	r1, r8
 800fc6e:	4620      	mov	r0, r4
 800fc70:	f000 fbd0 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d04c      	beq.n	800fd12 <ucdr_serialize_int32_t+0xe2>
 800fc78:	7d23      	ldrb	r3, [r4, #20]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d063      	beq.n	800fd46 <ucdr_serialize_int32_t+0x116>
 800fc7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc82:	702b      	strb	r3, [r5, #0]
 800fc84:	2e00      	cmp	r6, #0
 800fc86:	d051      	beq.n	800fd2c <ucdr_serialize_int32_t+0xfc>
 800fc88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc8c:	706b      	strb	r3, [r5, #1]
 800fc8e:	2e01      	cmp	r6, #1
 800fc90:	d050      	beq.n	800fd34 <ucdr_serialize_int32_t+0x104>
 800fc92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fc96:	70ab      	strb	r3, [r5, #2]
 800fc98:	2e02      	cmp	r6, #2
 800fc9a:	d04f      	beq.n	800fd3c <ucdr_serialize_int32_t+0x10c>
 800fc9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fca0:	70eb      	strb	r3, [r5, #3]
 800fca2:	6923      	ldr	r3, [r4, #16]
 800fca4:	68a2      	ldr	r2, [r4, #8]
 800fca6:	7da0      	ldrb	r0, [r4, #22]
 800fca8:	3304      	adds	r3, #4
 800fcaa:	1b9e      	subs	r6, r3, r6
 800fcac:	4442      	add	r2, r8
 800fcae:	2304      	movs	r3, #4
 800fcb0:	f080 0001 	eor.w	r0, r0, #1
 800fcb4:	60a2      	str	r2, [r4, #8]
 800fcb6:	6126      	str	r6, [r4, #16]
 800fcb8:	7563      	strb	r3, [r4, #21]
 800fcba:	b002      	add	sp, #8
 800fcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc0:	2104      	movs	r1, #4
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	f000 fba6 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800fcc8:	b1d0      	cbz	r0, 800fd00 <ucdr_serialize_int32_t+0xd0>
 800fcca:	7d23      	ldrb	r3, [r4, #20]
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	68a3      	ldr	r3, [r4, #8]
 800fcd0:	d01c      	beq.n	800fd0c <ucdr_serialize_int32_t+0xdc>
 800fcd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fcd6:	701a      	strb	r2, [r3, #0]
 800fcd8:	68a3      	ldr	r3, [r4, #8]
 800fcda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fcde:	705a      	strb	r2, [r3, #1]
 800fce0:	68a3      	ldr	r3, [r4, #8]
 800fce2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fce6:	709a      	strb	r2, [r3, #2]
 800fce8:	68a3      	ldr	r3, [r4, #8]
 800fcea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fcee:	70da      	strb	r2, [r3, #3]
 800fcf0:	68a2      	ldr	r2, [r4, #8]
 800fcf2:	6923      	ldr	r3, [r4, #16]
 800fcf4:	3204      	adds	r2, #4
 800fcf6:	3304      	adds	r3, #4
 800fcf8:	2104      	movs	r1, #4
 800fcfa:	60a2      	str	r2, [r4, #8]
 800fcfc:	6123      	str	r3, [r4, #16]
 800fcfe:	7561      	strb	r1, [r4, #21]
 800fd00:	7da0      	ldrb	r0, [r4, #22]
 800fd02:	f080 0001 	eor.w	r0, r0, #1
 800fd06:	b002      	add	sp, #8
 800fd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd0c:	9a01      	ldr	r2, [sp, #4]
 800fd0e:	601a      	str	r2, [r3, #0]
 800fd10:	e7ee      	b.n	800fcf0 <ucdr_serialize_int32_t+0xc0>
 800fd12:	68a2      	ldr	r2, [r4, #8]
 800fd14:	6923      	ldr	r3, [r4, #16]
 800fd16:	7da0      	ldrb	r0, [r4, #22]
 800fd18:	7567      	strb	r7, [r4, #21]
 800fd1a:	1b92      	subs	r2, r2, r6
 800fd1c:	1b9b      	subs	r3, r3, r6
 800fd1e:	f080 0001 	eor.w	r0, r0, #1
 800fd22:	60a2      	str	r2, [r4, #8]
 800fd24:	6123      	str	r3, [r4, #16]
 800fd26:	b002      	add	sp, #8
 800fd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd2c:	68a3      	ldr	r3, [r4, #8]
 800fd2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd32:	701a      	strb	r2, [r3, #0]
 800fd34:	68a3      	ldr	r3, [r4, #8]
 800fd36:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd3a:	701a      	strb	r2, [r3, #0]
 800fd3c:	68a3      	ldr	r3, [r4, #8]
 800fd3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fd42:	701a      	strb	r2, [r3, #0]
 800fd44:	e7ad      	b.n	800fca2 <ucdr_serialize_int32_t+0x72>
 800fd46:	4628      	mov	r0, r5
 800fd48:	ad01      	add	r5, sp, #4
 800fd4a:	4629      	mov	r1, r5
 800fd4c:	4632      	mov	r2, r6
 800fd4e:	f00c fb3a 	bl	801c3c6 <memcpy>
 800fd52:	68a0      	ldr	r0, [r4, #8]
 800fd54:	4642      	mov	r2, r8
 800fd56:	19a9      	adds	r1, r5, r6
 800fd58:	f00c fb35 	bl	801c3c6 <memcpy>
 800fd5c:	e7a1      	b.n	800fca2 <ucdr_serialize_int32_t+0x72>
 800fd5e:	bf00      	nop

0800fd60 <ucdr_deserialize_int32_t>:
 800fd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd64:	460d      	mov	r5, r1
 800fd66:	2104      	movs	r1, #4
 800fd68:	4604      	mov	r4, r0
 800fd6a:	f000 fba7 	bl	80104bc <ucdr_buffer_alignment>
 800fd6e:	4601      	mov	r1, r0
 800fd70:	4620      	mov	r0, r4
 800fd72:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fd76:	f000 fbe5 	bl	8010544 <ucdr_advance_buffer>
 800fd7a:	2104      	movs	r1, #4
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f000 fb3d 	bl	80103fc <ucdr_check_buffer_available_for>
 800fd82:	2800      	cmp	r0, #0
 800fd84:	d138      	bne.n	800fdf8 <ucdr_deserialize_int32_t+0x98>
 800fd86:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fd8a:	42b7      	cmp	r7, r6
 800fd8c:	d92f      	bls.n	800fdee <ucdr_deserialize_int32_t+0x8e>
 800fd8e:	6923      	ldr	r3, [r4, #16]
 800fd90:	60a7      	str	r7, [r4, #8]
 800fd92:	1bbf      	subs	r7, r7, r6
 800fd94:	443b      	add	r3, r7
 800fd96:	f1c7 0904 	rsb	r9, r7, #4
 800fd9a:	6123      	str	r3, [r4, #16]
 800fd9c:	4649      	mov	r1, r9
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f000 fb38 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d046      	beq.n	800fe36 <ucdr_deserialize_int32_t+0xd6>
 800fda8:	7d23      	ldrb	r3, [r4, #20]
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	d05c      	beq.n	800fe68 <ucdr_deserialize_int32_t+0x108>
 800fdae:	78f3      	ldrb	r3, [r6, #3]
 800fdb0:	702b      	strb	r3, [r5, #0]
 800fdb2:	2f00      	cmp	r7, #0
 800fdb4:	d04c      	beq.n	800fe50 <ucdr_deserialize_int32_t+0xf0>
 800fdb6:	78b3      	ldrb	r3, [r6, #2]
 800fdb8:	706b      	strb	r3, [r5, #1]
 800fdba:	2f01      	cmp	r7, #1
 800fdbc:	f105 0302 	add.w	r3, r5, #2
 800fdc0:	d04a      	beq.n	800fe58 <ucdr_deserialize_int32_t+0xf8>
 800fdc2:	7873      	ldrb	r3, [r6, #1]
 800fdc4:	70ab      	strb	r3, [r5, #2]
 800fdc6:	2f02      	cmp	r7, #2
 800fdc8:	f105 0303 	add.w	r3, r5, #3
 800fdcc:	d048      	beq.n	800fe60 <ucdr_deserialize_int32_t+0x100>
 800fdce:	7833      	ldrb	r3, [r6, #0]
 800fdd0:	70eb      	strb	r3, [r5, #3]
 800fdd2:	6923      	ldr	r3, [r4, #16]
 800fdd4:	68a2      	ldr	r2, [r4, #8]
 800fdd6:	7da0      	ldrb	r0, [r4, #22]
 800fdd8:	2104      	movs	r1, #4
 800fdda:	3304      	adds	r3, #4
 800fddc:	444a      	add	r2, r9
 800fdde:	1bdb      	subs	r3, r3, r7
 800fde0:	7561      	strb	r1, [r4, #21]
 800fde2:	60a2      	str	r2, [r4, #8]
 800fde4:	6123      	str	r3, [r4, #16]
 800fde6:	f080 0001 	eor.w	r0, r0, #1
 800fdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdee:	2104      	movs	r1, #4
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f000 fb0f 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800fdf6:	b1b0      	cbz	r0, 800fe26 <ucdr_deserialize_int32_t+0xc6>
 800fdf8:	7d23      	ldrb	r3, [r4, #20]
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	68a3      	ldr	r3, [r4, #8]
 800fdfe:	d017      	beq.n	800fe30 <ucdr_deserialize_int32_t+0xd0>
 800fe00:	78db      	ldrb	r3, [r3, #3]
 800fe02:	702b      	strb	r3, [r5, #0]
 800fe04:	68a3      	ldr	r3, [r4, #8]
 800fe06:	789b      	ldrb	r3, [r3, #2]
 800fe08:	706b      	strb	r3, [r5, #1]
 800fe0a:	68a3      	ldr	r3, [r4, #8]
 800fe0c:	785b      	ldrb	r3, [r3, #1]
 800fe0e:	70ab      	strb	r3, [r5, #2]
 800fe10:	68a3      	ldr	r3, [r4, #8]
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	70eb      	strb	r3, [r5, #3]
 800fe16:	68a2      	ldr	r2, [r4, #8]
 800fe18:	6923      	ldr	r3, [r4, #16]
 800fe1a:	3204      	adds	r2, #4
 800fe1c:	3304      	adds	r3, #4
 800fe1e:	2104      	movs	r1, #4
 800fe20:	60a2      	str	r2, [r4, #8]
 800fe22:	6123      	str	r3, [r4, #16]
 800fe24:	7561      	strb	r1, [r4, #21]
 800fe26:	7da0      	ldrb	r0, [r4, #22]
 800fe28:	f080 0001 	eor.w	r0, r0, #1
 800fe2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	602b      	str	r3, [r5, #0]
 800fe34:	e7ef      	b.n	800fe16 <ucdr_deserialize_int32_t+0xb6>
 800fe36:	68a2      	ldr	r2, [r4, #8]
 800fe38:	6923      	ldr	r3, [r4, #16]
 800fe3a:	7da0      	ldrb	r0, [r4, #22]
 800fe3c:	f884 8015 	strb.w	r8, [r4, #21]
 800fe40:	1bd2      	subs	r2, r2, r7
 800fe42:	1bdb      	subs	r3, r3, r7
 800fe44:	60a2      	str	r2, [r4, #8]
 800fe46:	6123      	str	r3, [r4, #16]
 800fe48:	f080 0001 	eor.w	r0, r0, #1
 800fe4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe50:	68a3      	ldr	r3, [r4, #8]
 800fe52:	789b      	ldrb	r3, [r3, #2]
 800fe54:	706b      	strb	r3, [r5, #1]
 800fe56:	1cab      	adds	r3, r5, #2
 800fe58:	68a2      	ldr	r2, [r4, #8]
 800fe5a:	7852      	ldrb	r2, [r2, #1]
 800fe5c:	f803 2b01 	strb.w	r2, [r3], #1
 800fe60:	68a2      	ldr	r2, [r4, #8]
 800fe62:	7812      	ldrb	r2, [r2, #0]
 800fe64:	701a      	strb	r2, [r3, #0]
 800fe66:	e7b4      	b.n	800fdd2 <ucdr_deserialize_int32_t+0x72>
 800fe68:	4631      	mov	r1, r6
 800fe6a:	463a      	mov	r2, r7
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	f00c faaa 	bl	801c3c6 <memcpy>
 800fe72:	68a1      	ldr	r1, [r4, #8]
 800fe74:	464a      	mov	r2, r9
 800fe76:	19e8      	adds	r0, r5, r7
 800fe78:	f00c faa5 	bl	801c3c6 <memcpy>
 800fe7c:	e7a9      	b.n	800fdd2 <ucdr_deserialize_int32_t+0x72>
 800fe7e:	bf00      	nop

0800fe80 <ucdr_serialize_float>:
 800fe80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe84:	2104      	movs	r1, #4
 800fe86:	b082      	sub	sp, #8
 800fe88:	4604      	mov	r4, r0
 800fe8a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fe8e:	f000 fb15 	bl	80104bc <ucdr_buffer_alignment>
 800fe92:	4601      	mov	r1, r0
 800fe94:	4620      	mov	r0, r4
 800fe96:	7d67      	ldrb	r7, [r4, #21]
 800fe98:	f000 fb54 	bl	8010544 <ucdr_advance_buffer>
 800fe9c:	2104      	movs	r1, #4
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f000 faac 	bl	80103fc <ucdr_check_buffer_available_for>
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d139      	bne.n	800ff1c <ucdr_serialize_float+0x9c>
 800fea8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800feac:	42ab      	cmp	r3, r5
 800feae:	d930      	bls.n	800ff12 <ucdr_serialize_float+0x92>
 800feb0:	1b5e      	subs	r6, r3, r5
 800feb2:	60a3      	str	r3, [r4, #8]
 800feb4:	6923      	ldr	r3, [r4, #16]
 800feb6:	f1c6 0804 	rsb	r8, r6, #4
 800feba:	4433      	add	r3, r6
 800febc:	6123      	str	r3, [r4, #16]
 800febe:	4641      	mov	r1, r8
 800fec0:	4620      	mov	r0, r4
 800fec2:	f000 faa7 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800fec6:	2800      	cmp	r0, #0
 800fec8:	d04c      	beq.n	800ff64 <ucdr_serialize_float+0xe4>
 800feca:	7d23      	ldrb	r3, [r4, #20]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d063      	beq.n	800ff98 <ucdr_serialize_float+0x118>
 800fed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fed4:	702b      	strb	r3, [r5, #0]
 800fed6:	2e00      	cmp	r6, #0
 800fed8:	d051      	beq.n	800ff7e <ucdr_serialize_float+0xfe>
 800feda:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fede:	706b      	strb	r3, [r5, #1]
 800fee0:	2e01      	cmp	r6, #1
 800fee2:	d050      	beq.n	800ff86 <ucdr_serialize_float+0x106>
 800fee4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fee8:	70ab      	strb	r3, [r5, #2]
 800feea:	2e02      	cmp	r6, #2
 800feec:	d04f      	beq.n	800ff8e <ucdr_serialize_float+0x10e>
 800feee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fef2:	70eb      	strb	r3, [r5, #3]
 800fef4:	6923      	ldr	r3, [r4, #16]
 800fef6:	68a2      	ldr	r2, [r4, #8]
 800fef8:	7da0      	ldrb	r0, [r4, #22]
 800fefa:	3304      	adds	r3, #4
 800fefc:	1b9e      	subs	r6, r3, r6
 800fefe:	4442      	add	r2, r8
 800ff00:	2304      	movs	r3, #4
 800ff02:	f080 0001 	eor.w	r0, r0, #1
 800ff06:	60a2      	str	r2, [r4, #8]
 800ff08:	6126      	str	r6, [r4, #16]
 800ff0a:	7563      	strb	r3, [r4, #21]
 800ff0c:	b002      	add	sp, #8
 800ff0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff12:	2104      	movs	r1, #4
 800ff14:	4620      	mov	r0, r4
 800ff16:	f000 fa7d 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800ff1a:	b1d0      	cbz	r0, 800ff52 <ucdr_serialize_float+0xd2>
 800ff1c:	7d23      	ldrb	r3, [r4, #20]
 800ff1e:	2b01      	cmp	r3, #1
 800ff20:	68a3      	ldr	r3, [r4, #8]
 800ff22:	d01c      	beq.n	800ff5e <ucdr_serialize_float+0xde>
 800ff24:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ff28:	701a      	strb	r2, [r3, #0]
 800ff2a:	68a3      	ldr	r3, [r4, #8]
 800ff2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff30:	705a      	strb	r2, [r3, #1]
 800ff32:	68a3      	ldr	r3, [r4, #8]
 800ff34:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ff38:	709a      	strb	r2, [r3, #2]
 800ff3a:	68a3      	ldr	r3, [r4, #8]
 800ff3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff40:	70da      	strb	r2, [r3, #3]
 800ff42:	68a2      	ldr	r2, [r4, #8]
 800ff44:	6923      	ldr	r3, [r4, #16]
 800ff46:	3204      	adds	r2, #4
 800ff48:	3304      	adds	r3, #4
 800ff4a:	2104      	movs	r1, #4
 800ff4c:	60a2      	str	r2, [r4, #8]
 800ff4e:	6123      	str	r3, [r4, #16]
 800ff50:	7561      	strb	r1, [r4, #21]
 800ff52:	7da0      	ldrb	r0, [r4, #22]
 800ff54:	f080 0001 	eor.w	r0, r0, #1
 800ff58:	b002      	add	sp, #8
 800ff5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5e:	9a01      	ldr	r2, [sp, #4]
 800ff60:	601a      	str	r2, [r3, #0]
 800ff62:	e7ee      	b.n	800ff42 <ucdr_serialize_float+0xc2>
 800ff64:	68a2      	ldr	r2, [r4, #8]
 800ff66:	6923      	ldr	r3, [r4, #16]
 800ff68:	7da0      	ldrb	r0, [r4, #22]
 800ff6a:	7567      	strb	r7, [r4, #21]
 800ff6c:	1b92      	subs	r2, r2, r6
 800ff6e:	1b9b      	subs	r3, r3, r6
 800ff70:	f080 0001 	eor.w	r0, r0, #1
 800ff74:	60a2      	str	r2, [r4, #8]
 800ff76:	6123      	str	r3, [r4, #16]
 800ff78:	b002      	add	sp, #8
 800ff7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff7e:	68a3      	ldr	r3, [r4, #8]
 800ff80:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff84:	701a      	strb	r2, [r3, #0]
 800ff86:	68a3      	ldr	r3, [r4, #8]
 800ff88:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ff8c:	701a      	strb	r2, [r3, #0]
 800ff8e:	68a3      	ldr	r3, [r4, #8]
 800ff90:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff94:	701a      	strb	r2, [r3, #0]
 800ff96:	e7ad      	b.n	800fef4 <ucdr_serialize_float+0x74>
 800ff98:	4628      	mov	r0, r5
 800ff9a:	ad01      	add	r5, sp, #4
 800ff9c:	4629      	mov	r1, r5
 800ff9e:	4632      	mov	r2, r6
 800ffa0:	f00c fa11 	bl	801c3c6 <memcpy>
 800ffa4:	68a0      	ldr	r0, [r4, #8]
 800ffa6:	4642      	mov	r2, r8
 800ffa8:	19a9      	adds	r1, r5, r6
 800ffaa:	f00c fa0c 	bl	801c3c6 <memcpy>
 800ffae:	e7a1      	b.n	800fef4 <ucdr_serialize_float+0x74>

0800ffb0 <ucdr_deserialize_float>:
 800ffb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffb4:	460d      	mov	r5, r1
 800ffb6:	2104      	movs	r1, #4
 800ffb8:	4604      	mov	r4, r0
 800ffba:	f000 fa7f 	bl	80104bc <ucdr_buffer_alignment>
 800ffbe:	4601      	mov	r1, r0
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ffc6:	f000 fabd 	bl	8010544 <ucdr_advance_buffer>
 800ffca:	2104      	movs	r1, #4
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f000 fa15 	bl	80103fc <ucdr_check_buffer_available_for>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d138      	bne.n	8010048 <ucdr_deserialize_float+0x98>
 800ffd6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ffda:	42b7      	cmp	r7, r6
 800ffdc:	d92f      	bls.n	801003e <ucdr_deserialize_float+0x8e>
 800ffde:	6923      	ldr	r3, [r4, #16]
 800ffe0:	60a7      	str	r7, [r4, #8]
 800ffe2:	1bbf      	subs	r7, r7, r6
 800ffe4:	443b      	add	r3, r7
 800ffe6:	f1c7 0904 	rsb	r9, r7, #4
 800ffea:	6123      	str	r3, [r4, #16]
 800ffec:	4649      	mov	r1, r9
 800ffee:	4620      	mov	r0, r4
 800fff0:	f000 fa10 	bl	8010414 <ucdr_check_final_buffer_behavior>
 800fff4:	2800      	cmp	r0, #0
 800fff6:	d046      	beq.n	8010086 <ucdr_deserialize_float+0xd6>
 800fff8:	7d23      	ldrb	r3, [r4, #20]
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d05c      	beq.n	80100b8 <ucdr_deserialize_float+0x108>
 800fffe:	78f3      	ldrb	r3, [r6, #3]
 8010000:	702b      	strb	r3, [r5, #0]
 8010002:	2f00      	cmp	r7, #0
 8010004:	d04c      	beq.n	80100a0 <ucdr_deserialize_float+0xf0>
 8010006:	78b3      	ldrb	r3, [r6, #2]
 8010008:	706b      	strb	r3, [r5, #1]
 801000a:	2f01      	cmp	r7, #1
 801000c:	f105 0302 	add.w	r3, r5, #2
 8010010:	d04a      	beq.n	80100a8 <ucdr_deserialize_float+0xf8>
 8010012:	7873      	ldrb	r3, [r6, #1]
 8010014:	70ab      	strb	r3, [r5, #2]
 8010016:	2f02      	cmp	r7, #2
 8010018:	f105 0303 	add.w	r3, r5, #3
 801001c:	d048      	beq.n	80100b0 <ucdr_deserialize_float+0x100>
 801001e:	7833      	ldrb	r3, [r6, #0]
 8010020:	70eb      	strb	r3, [r5, #3]
 8010022:	6923      	ldr	r3, [r4, #16]
 8010024:	68a2      	ldr	r2, [r4, #8]
 8010026:	7da0      	ldrb	r0, [r4, #22]
 8010028:	2104      	movs	r1, #4
 801002a:	3304      	adds	r3, #4
 801002c:	444a      	add	r2, r9
 801002e:	1bdb      	subs	r3, r3, r7
 8010030:	7561      	strb	r1, [r4, #21]
 8010032:	60a2      	str	r2, [r4, #8]
 8010034:	6123      	str	r3, [r4, #16]
 8010036:	f080 0001 	eor.w	r0, r0, #1
 801003a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801003e:	2104      	movs	r1, #4
 8010040:	4620      	mov	r0, r4
 8010042:	f000 f9e7 	bl	8010414 <ucdr_check_final_buffer_behavior>
 8010046:	b1b0      	cbz	r0, 8010076 <ucdr_deserialize_float+0xc6>
 8010048:	7d23      	ldrb	r3, [r4, #20]
 801004a:	2b01      	cmp	r3, #1
 801004c:	68a3      	ldr	r3, [r4, #8]
 801004e:	d017      	beq.n	8010080 <ucdr_deserialize_float+0xd0>
 8010050:	78db      	ldrb	r3, [r3, #3]
 8010052:	702b      	strb	r3, [r5, #0]
 8010054:	68a3      	ldr	r3, [r4, #8]
 8010056:	789b      	ldrb	r3, [r3, #2]
 8010058:	706b      	strb	r3, [r5, #1]
 801005a:	68a3      	ldr	r3, [r4, #8]
 801005c:	785b      	ldrb	r3, [r3, #1]
 801005e:	70ab      	strb	r3, [r5, #2]
 8010060:	68a3      	ldr	r3, [r4, #8]
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	70eb      	strb	r3, [r5, #3]
 8010066:	68a2      	ldr	r2, [r4, #8]
 8010068:	6923      	ldr	r3, [r4, #16]
 801006a:	3204      	adds	r2, #4
 801006c:	3304      	adds	r3, #4
 801006e:	2104      	movs	r1, #4
 8010070:	60a2      	str	r2, [r4, #8]
 8010072:	6123      	str	r3, [r4, #16]
 8010074:	7561      	strb	r1, [r4, #21]
 8010076:	7da0      	ldrb	r0, [r4, #22]
 8010078:	f080 0001 	eor.w	r0, r0, #1
 801007c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	602b      	str	r3, [r5, #0]
 8010084:	e7ef      	b.n	8010066 <ucdr_deserialize_float+0xb6>
 8010086:	68a2      	ldr	r2, [r4, #8]
 8010088:	6923      	ldr	r3, [r4, #16]
 801008a:	7da0      	ldrb	r0, [r4, #22]
 801008c:	f884 8015 	strb.w	r8, [r4, #21]
 8010090:	1bd2      	subs	r2, r2, r7
 8010092:	1bdb      	subs	r3, r3, r7
 8010094:	60a2      	str	r2, [r4, #8]
 8010096:	6123      	str	r3, [r4, #16]
 8010098:	f080 0001 	eor.w	r0, r0, #1
 801009c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100a0:	68a3      	ldr	r3, [r4, #8]
 80100a2:	789b      	ldrb	r3, [r3, #2]
 80100a4:	706b      	strb	r3, [r5, #1]
 80100a6:	1cab      	adds	r3, r5, #2
 80100a8:	68a2      	ldr	r2, [r4, #8]
 80100aa:	7852      	ldrb	r2, [r2, #1]
 80100ac:	f803 2b01 	strb.w	r2, [r3], #1
 80100b0:	68a2      	ldr	r2, [r4, #8]
 80100b2:	7812      	ldrb	r2, [r2, #0]
 80100b4:	701a      	strb	r2, [r3, #0]
 80100b6:	e7b4      	b.n	8010022 <ucdr_deserialize_float+0x72>
 80100b8:	4631      	mov	r1, r6
 80100ba:	463a      	mov	r2, r7
 80100bc:	4628      	mov	r0, r5
 80100be:	f00c f982 	bl	801c3c6 <memcpy>
 80100c2:	68a1      	ldr	r1, [r4, #8]
 80100c4:	464a      	mov	r2, r9
 80100c6:	19e8      	adds	r0, r5, r7
 80100c8:	f00c f97d 	bl	801c3c6 <memcpy>
 80100cc:	e7a9      	b.n	8010022 <ucdr_deserialize_float+0x72>
 80100ce:	bf00      	nop

080100d0 <ucdr_serialize_double>:
 80100d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d4:	2108      	movs	r1, #8
 80100d6:	b082      	sub	sp, #8
 80100d8:	4604      	mov	r4, r0
 80100da:	ed8d 0b00 	vstr	d0, [sp]
 80100de:	f000 f9ed 	bl	80104bc <ucdr_buffer_alignment>
 80100e2:	4601      	mov	r1, r0
 80100e4:	4620      	mov	r0, r4
 80100e6:	7d67      	ldrb	r7, [r4, #21]
 80100e8:	f000 fa2c 	bl	8010544 <ucdr_advance_buffer>
 80100ec:	2108      	movs	r1, #8
 80100ee:	4620      	mov	r0, r4
 80100f0:	f000 f984 	bl	80103fc <ucdr_check_buffer_available_for>
 80100f4:	2800      	cmp	r0, #0
 80100f6:	d14e      	bne.n	8010196 <ucdr_serialize_double+0xc6>
 80100f8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80100fc:	42ab      	cmp	r3, r5
 80100fe:	d945      	bls.n	801018c <ucdr_serialize_double+0xbc>
 8010100:	1b5e      	subs	r6, r3, r5
 8010102:	60a3      	str	r3, [r4, #8]
 8010104:	6923      	ldr	r3, [r4, #16]
 8010106:	f1c6 0808 	rsb	r8, r6, #8
 801010a:	4433      	add	r3, r6
 801010c:	6123      	str	r3, [r4, #16]
 801010e:	4641      	mov	r1, r8
 8010110:	4620      	mov	r0, r4
 8010112:	f000 f97f 	bl	8010414 <ucdr_check_final_buffer_behavior>
 8010116:	2800      	cmp	r0, #0
 8010118:	d074      	beq.n	8010204 <ucdr_serialize_double+0x134>
 801011a:	7d23      	ldrb	r3, [r4, #20]
 801011c:	2b01      	cmp	r3, #1
 801011e:	f000 809b 	beq.w	8010258 <ucdr_serialize_double+0x188>
 8010122:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010126:	702b      	strb	r3, [r5, #0]
 8010128:	2e00      	cmp	r6, #0
 801012a:	d078      	beq.n	801021e <ucdr_serialize_double+0x14e>
 801012c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010130:	706b      	strb	r3, [r5, #1]
 8010132:	2e01      	cmp	r6, #1
 8010134:	d077      	beq.n	8010226 <ucdr_serialize_double+0x156>
 8010136:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801013a:	70ab      	strb	r3, [r5, #2]
 801013c:	2e02      	cmp	r6, #2
 801013e:	d076      	beq.n	801022e <ucdr_serialize_double+0x15e>
 8010140:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010144:	70eb      	strb	r3, [r5, #3]
 8010146:	2e03      	cmp	r6, #3
 8010148:	d075      	beq.n	8010236 <ucdr_serialize_double+0x166>
 801014a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801014e:	712b      	strb	r3, [r5, #4]
 8010150:	2e04      	cmp	r6, #4
 8010152:	d074      	beq.n	801023e <ucdr_serialize_double+0x16e>
 8010154:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010158:	716b      	strb	r3, [r5, #5]
 801015a:	2e05      	cmp	r6, #5
 801015c:	d073      	beq.n	8010246 <ucdr_serialize_double+0x176>
 801015e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010162:	71ab      	strb	r3, [r5, #6]
 8010164:	2e06      	cmp	r6, #6
 8010166:	d072      	beq.n	801024e <ucdr_serialize_double+0x17e>
 8010168:	f89d 3000 	ldrb.w	r3, [sp]
 801016c:	71eb      	strb	r3, [r5, #7]
 801016e:	6923      	ldr	r3, [r4, #16]
 8010170:	68a2      	ldr	r2, [r4, #8]
 8010172:	7da0      	ldrb	r0, [r4, #22]
 8010174:	3308      	adds	r3, #8
 8010176:	1b9e      	subs	r6, r3, r6
 8010178:	4442      	add	r2, r8
 801017a:	2308      	movs	r3, #8
 801017c:	f080 0001 	eor.w	r0, r0, #1
 8010180:	60a2      	str	r2, [r4, #8]
 8010182:	6126      	str	r6, [r4, #16]
 8010184:	7563      	strb	r3, [r4, #21]
 8010186:	b002      	add	sp, #8
 8010188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801018c:	2108      	movs	r1, #8
 801018e:	4620      	mov	r0, r4
 8010190:	f000 f940 	bl	8010414 <ucdr_check_final_buffer_behavior>
 8010194:	b350      	cbz	r0, 80101ec <ucdr_serialize_double+0x11c>
 8010196:	7d23      	ldrb	r3, [r4, #20]
 8010198:	2b01      	cmp	r3, #1
 801019a:	d02d      	beq.n	80101f8 <ucdr_serialize_double+0x128>
 801019c:	68a3      	ldr	r3, [r4, #8]
 801019e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80101a2:	701a      	strb	r2, [r3, #0]
 80101a4:	68a3      	ldr	r3, [r4, #8]
 80101a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80101aa:	705a      	strb	r2, [r3, #1]
 80101ac:	68a3      	ldr	r3, [r4, #8]
 80101ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80101b2:	709a      	strb	r2, [r3, #2]
 80101b4:	68a3      	ldr	r3, [r4, #8]
 80101b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80101ba:	70da      	strb	r2, [r3, #3]
 80101bc:	68a3      	ldr	r3, [r4, #8]
 80101be:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80101c2:	711a      	strb	r2, [r3, #4]
 80101c4:	68a3      	ldr	r3, [r4, #8]
 80101c6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80101ca:	715a      	strb	r2, [r3, #5]
 80101cc:	68a3      	ldr	r3, [r4, #8]
 80101ce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80101d2:	719a      	strb	r2, [r3, #6]
 80101d4:	68a3      	ldr	r3, [r4, #8]
 80101d6:	f89d 2000 	ldrb.w	r2, [sp]
 80101da:	71da      	strb	r2, [r3, #7]
 80101dc:	68a2      	ldr	r2, [r4, #8]
 80101de:	6923      	ldr	r3, [r4, #16]
 80101e0:	3208      	adds	r2, #8
 80101e2:	3308      	adds	r3, #8
 80101e4:	2108      	movs	r1, #8
 80101e6:	60a2      	str	r2, [r4, #8]
 80101e8:	6123      	str	r3, [r4, #16]
 80101ea:	7561      	strb	r1, [r4, #21]
 80101ec:	7da0      	ldrb	r0, [r4, #22]
 80101ee:	f080 0001 	eor.w	r0, r0, #1
 80101f2:	b002      	add	sp, #8
 80101f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f8:	466b      	mov	r3, sp
 80101fa:	cb03      	ldmia	r3!, {r0, r1}
 80101fc:	68a3      	ldr	r3, [r4, #8]
 80101fe:	6018      	str	r0, [r3, #0]
 8010200:	6059      	str	r1, [r3, #4]
 8010202:	e7eb      	b.n	80101dc <ucdr_serialize_double+0x10c>
 8010204:	68a2      	ldr	r2, [r4, #8]
 8010206:	6923      	ldr	r3, [r4, #16]
 8010208:	7da0      	ldrb	r0, [r4, #22]
 801020a:	7567      	strb	r7, [r4, #21]
 801020c:	1b92      	subs	r2, r2, r6
 801020e:	1b9b      	subs	r3, r3, r6
 8010210:	f080 0001 	eor.w	r0, r0, #1
 8010214:	60a2      	str	r2, [r4, #8]
 8010216:	6123      	str	r3, [r4, #16]
 8010218:	b002      	add	sp, #8
 801021a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801021e:	68a3      	ldr	r3, [r4, #8]
 8010220:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010224:	701a      	strb	r2, [r3, #0]
 8010226:	68a3      	ldr	r3, [r4, #8]
 8010228:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801022c:	701a      	strb	r2, [r3, #0]
 801022e:	68a3      	ldr	r3, [r4, #8]
 8010230:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010234:	701a      	strb	r2, [r3, #0]
 8010236:	68a3      	ldr	r3, [r4, #8]
 8010238:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801023c:	701a      	strb	r2, [r3, #0]
 801023e:	68a3      	ldr	r3, [r4, #8]
 8010240:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010244:	701a      	strb	r2, [r3, #0]
 8010246:	68a3      	ldr	r3, [r4, #8]
 8010248:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801024c:	701a      	strb	r2, [r3, #0]
 801024e:	68a3      	ldr	r3, [r4, #8]
 8010250:	f89d 2000 	ldrb.w	r2, [sp]
 8010254:	701a      	strb	r2, [r3, #0]
 8010256:	e78a      	b.n	801016e <ucdr_serialize_double+0x9e>
 8010258:	4628      	mov	r0, r5
 801025a:	466d      	mov	r5, sp
 801025c:	4629      	mov	r1, r5
 801025e:	4632      	mov	r2, r6
 8010260:	f00c f8b1 	bl	801c3c6 <memcpy>
 8010264:	68a0      	ldr	r0, [r4, #8]
 8010266:	4642      	mov	r2, r8
 8010268:	19a9      	adds	r1, r5, r6
 801026a:	f00c f8ac 	bl	801c3c6 <memcpy>
 801026e:	e77e      	b.n	801016e <ucdr_serialize_double+0x9e>

08010270 <ucdr_deserialize_double>:
 8010270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010274:	460d      	mov	r5, r1
 8010276:	2108      	movs	r1, #8
 8010278:	4604      	mov	r4, r0
 801027a:	f000 f91f 	bl	80104bc <ucdr_buffer_alignment>
 801027e:	4601      	mov	r1, r0
 8010280:	4620      	mov	r0, r4
 8010282:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010286:	f000 f95d 	bl	8010544 <ucdr_advance_buffer>
 801028a:	2108      	movs	r1, #8
 801028c:	4620      	mov	r0, r4
 801028e:	f000 f8b5 	bl	80103fc <ucdr_check_buffer_available_for>
 8010292:	2800      	cmp	r0, #0
 8010294:	d151      	bne.n	801033a <ucdr_deserialize_double+0xca>
 8010296:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801029a:	42be      	cmp	r6, r7
 801029c:	d948      	bls.n	8010330 <ucdr_deserialize_double+0xc0>
 801029e:	6923      	ldr	r3, [r4, #16]
 80102a0:	60a6      	str	r6, [r4, #8]
 80102a2:	1bf6      	subs	r6, r6, r7
 80102a4:	4433      	add	r3, r6
 80102a6:	f1c6 0808 	rsb	r8, r6, #8
 80102aa:	6123      	str	r3, [r4, #16]
 80102ac:	4641      	mov	r1, r8
 80102ae:	4620      	mov	r0, r4
 80102b0:	f000 f8b0 	bl	8010414 <ucdr_check_final_buffer_behavior>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d06d      	beq.n	8010394 <ucdr_deserialize_double+0x124>
 80102b8:	7d23      	ldrb	r3, [r4, #20]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	f000 8093 	beq.w	80103e6 <ucdr_deserialize_double+0x176>
 80102c0:	79fb      	ldrb	r3, [r7, #7]
 80102c2:	702b      	strb	r3, [r5, #0]
 80102c4:	2e00      	cmp	r6, #0
 80102c6:	d072      	beq.n	80103ae <ucdr_deserialize_double+0x13e>
 80102c8:	79bb      	ldrb	r3, [r7, #6]
 80102ca:	706b      	strb	r3, [r5, #1]
 80102cc:	2e01      	cmp	r6, #1
 80102ce:	f105 0302 	add.w	r3, r5, #2
 80102d2:	d070      	beq.n	80103b6 <ucdr_deserialize_double+0x146>
 80102d4:	797b      	ldrb	r3, [r7, #5]
 80102d6:	70ab      	strb	r3, [r5, #2]
 80102d8:	2e02      	cmp	r6, #2
 80102da:	f105 0303 	add.w	r3, r5, #3
 80102de:	d06e      	beq.n	80103be <ucdr_deserialize_double+0x14e>
 80102e0:	793b      	ldrb	r3, [r7, #4]
 80102e2:	70eb      	strb	r3, [r5, #3]
 80102e4:	2e03      	cmp	r6, #3
 80102e6:	f105 0304 	add.w	r3, r5, #4
 80102ea:	d06c      	beq.n	80103c6 <ucdr_deserialize_double+0x156>
 80102ec:	78fb      	ldrb	r3, [r7, #3]
 80102ee:	712b      	strb	r3, [r5, #4]
 80102f0:	2e04      	cmp	r6, #4
 80102f2:	f105 0305 	add.w	r3, r5, #5
 80102f6:	d06a      	beq.n	80103ce <ucdr_deserialize_double+0x15e>
 80102f8:	78bb      	ldrb	r3, [r7, #2]
 80102fa:	716b      	strb	r3, [r5, #5]
 80102fc:	2e05      	cmp	r6, #5
 80102fe:	f105 0306 	add.w	r3, r5, #6
 8010302:	d068      	beq.n	80103d6 <ucdr_deserialize_double+0x166>
 8010304:	787b      	ldrb	r3, [r7, #1]
 8010306:	71ab      	strb	r3, [r5, #6]
 8010308:	2e06      	cmp	r6, #6
 801030a:	f105 0307 	add.w	r3, r5, #7
 801030e:	d066      	beq.n	80103de <ucdr_deserialize_double+0x16e>
 8010310:	783b      	ldrb	r3, [r7, #0]
 8010312:	71eb      	strb	r3, [r5, #7]
 8010314:	6923      	ldr	r3, [r4, #16]
 8010316:	68a2      	ldr	r2, [r4, #8]
 8010318:	7da0      	ldrb	r0, [r4, #22]
 801031a:	3308      	adds	r3, #8
 801031c:	1b9e      	subs	r6, r3, r6
 801031e:	2308      	movs	r3, #8
 8010320:	4442      	add	r2, r8
 8010322:	7563      	strb	r3, [r4, #21]
 8010324:	60a2      	str	r2, [r4, #8]
 8010326:	6126      	str	r6, [r4, #16]
 8010328:	f080 0001 	eor.w	r0, r0, #1
 801032c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010330:	2108      	movs	r1, #8
 8010332:	4620      	mov	r0, r4
 8010334:	f000 f86e 	bl	8010414 <ucdr_check_final_buffer_behavior>
 8010338:	b310      	cbz	r0, 8010380 <ucdr_deserialize_double+0x110>
 801033a:	7d23      	ldrb	r3, [r4, #20]
 801033c:	2b01      	cmp	r3, #1
 801033e:	68a3      	ldr	r3, [r4, #8]
 8010340:	d023      	beq.n	801038a <ucdr_deserialize_double+0x11a>
 8010342:	79db      	ldrb	r3, [r3, #7]
 8010344:	702b      	strb	r3, [r5, #0]
 8010346:	68a3      	ldr	r3, [r4, #8]
 8010348:	799b      	ldrb	r3, [r3, #6]
 801034a:	706b      	strb	r3, [r5, #1]
 801034c:	68a3      	ldr	r3, [r4, #8]
 801034e:	795b      	ldrb	r3, [r3, #5]
 8010350:	70ab      	strb	r3, [r5, #2]
 8010352:	68a3      	ldr	r3, [r4, #8]
 8010354:	791b      	ldrb	r3, [r3, #4]
 8010356:	70eb      	strb	r3, [r5, #3]
 8010358:	68a3      	ldr	r3, [r4, #8]
 801035a:	78db      	ldrb	r3, [r3, #3]
 801035c:	712b      	strb	r3, [r5, #4]
 801035e:	68a3      	ldr	r3, [r4, #8]
 8010360:	789b      	ldrb	r3, [r3, #2]
 8010362:	716b      	strb	r3, [r5, #5]
 8010364:	68a3      	ldr	r3, [r4, #8]
 8010366:	785b      	ldrb	r3, [r3, #1]
 8010368:	71ab      	strb	r3, [r5, #6]
 801036a:	68a3      	ldr	r3, [r4, #8]
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	71eb      	strb	r3, [r5, #7]
 8010370:	68a2      	ldr	r2, [r4, #8]
 8010372:	6923      	ldr	r3, [r4, #16]
 8010374:	3208      	adds	r2, #8
 8010376:	3308      	adds	r3, #8
 8010378:	2108      	movs	r1, #8
 801037a:	60a2      	str	r2, [r4, #8]
 801037c:	6123      	str	r3, [r4, #16]
 801037e:	7561      	strb	r1, [r4, #21]
 8010380:	7da0      	ldrb	r0, [r4, #22]
 8010382:	f080 0001 	eor.w	r0, r0, #1
 8010386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	606b      	str	r3, [r5, #4]
 8010390:	602a      	str	r2, [r5, #0]
 8010392:	e7ed      	b.n	8010370 <ucdr_deserialize_double+0x100>
 8010394:	68a2      	ldr	r2, [r4, #8]
 8010396:	6923      	ldr	r3, [r4, #16]
 8010398:	7da0      	ldrb	r0, [r4, #22]
 801039a:	f884 9015 	strb.w	r9, [r4, #21]
 801039e:	1b92      	subs	r2, r2, r6
 80103a0:	1b9b      	subs	r3, r3, r6
 80103a2:	60a2      	str	r2, [r4, #8]
 80103a4:	6123      	str	r3, [r4, #16]
 80103a6:	f080 0001 	eor.w	r0, r0, #1
 80103aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ae:	68a3      	ldr	r3, [r4, #8]
 80103b0:	799b      	ldrb	r3, [r3, #6]
 80103b2:	706b      	strb	r3, [r5, #1]
 80103b4:	1cab      	adds	r3, r5, #2
 80103b6:	68a2      	ldr	r2, [r4, #8]
 80103b8:	7952      	ldrb	r2, [r2, #5]
 80103ba:	f803 2b01 	strb.w	r2, [r3], #1
 80103be:	68a2      	ldr	r2, [r4, #8]
 80103c0:	7912      	ldrb	r2, [r2, #4]
 80103c2:	f803 2b01 	strb.w	r2, [r3], #1
 80103c6:	68a2      	ldr	r2, [r4, #8]
 80103c8:	78d2      	ldrb	r2, [r2, #3]
 80103ca:	f803 2b01 	strb.w	r2, [r3], #1
 80103ce:	68a2      	ldr	r2, [r4, #8]
 80103d0:	7892      	ldrb	r2, [r2, #2]
 80103d2:	f803 2b01 	strb.w	r2, [r3], #1
 80103d6:	68a2      	ldr	r2, [r4, #8]
 80103d8:	7852      	ldrb	r2, [r2, #1]
 80103da:	f803 2b01 	strb.w	r2, [r3], #1
 80103de:	68a2      	ldr	r2, [r4, #8]
 80103e0:	7812      	ldrb	r2, [r2, #0]
 80103e2:	701a      	strb	r2, [r3, #0]
 80103e4:	e796      	b.n	8010314 <ucdr_deserialize_double+0xa4>
 80103e6:	4639      	mov	r1, r7
 80103e8:	4632      	mov	r2, r6
 80103ea:	4628      	mov	r0, r5
 80103ec:	f00b ffeb 	bl	801c3c6 <memcpy>
 80103f0:	68a1      	ldr	r1, [r4, #8]
 80103f2:	4642      	mov	r2, r8
 80103f4:	19a8      	adds	r0, r5, r6
 80103f6:	f00b ffe6 	bl	801c3c6 <memcpy>
 80103fa:	e78b      	b.n	8010314 <ucdr_deserialize_double+0xa4>

080103fc <ucdr_check_buffer_available_for>:
 80103fc:	7d83      	ldrb	r3, [r0, #22]
 80103fe:	b93b      	cbnz	r3, 8010410 <ucdr_check_buffer_available_for+0x14>
 8010400:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010404:	4419      	add	r1, r3
 8010406:	4288      	cmp	r0, r1
 8010408:	bf34      	ite	cc
 801040a:	2000      	movcc	r0, #0
 801040c:	2001      	movcs	r0, #1
 801040e:	4770      	bx	lr
 8010410:	2000      	movs	r0, #0
 8010412:	4770      	bx	lr

08010414 <ucdr_check_final_buffer_behavior>:
 8010414:	7d83      	ldrb	r3, [r0, #22]
 8010416:	b943      	cbnz	r3, 801042a <ucdr_check_final_buffer_behavior+0x16>
 8010418:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801041c:	4291      	cmp	r1, r2
 801041e:	b510      	push	{r4, lr}
 8010420:	4604      	mov	r4, r0
 8010422:	d205      	bcs.n	8010430 <ucdr_check_final_buffer_behavior+0x1c>
 8010424:	2301      	movs	r3, #1
 8010426:	4618      	mov	r0, r3
 8010428:	bd10      	pop	{r4, pc}
 801042a:	2300      	movs	r3, #0
 801042c:	4618      	mov	r0, r3
 801042e:	4770      	bx	lr
 8010430:	6982      	ldr	r2, [r0, #24]
 8010432:	b13a      	cbz	r2, 8010444 <ucdr_check_final_buffer_behavior+0x30>
 8010434:	69c1      	ldr	r1, [r0, #28]
 8010436:	4790      	blx	r2
 8010438:	f080 0301 	eor.w	r3, r0, #1
 801043c:	b2db      	uxtb	r3, r3
 801043e:	75a0      	strb	r0, [r4, #22]
 8010440:	4618      	mov	r0, r3
 8010442:	bd10      	pop	{r4, pc}
 8010444:	2001      	movs	r0, #1
 8010446:	75a0      	strb	r0, [r4, #22]
 8010448:	e7fa      	b.n	8010440 <ucdr_check_final_buffer_behavior+0x2c>
 801044a:	bf00      	nop

0801044c <ucdr_set_on_full_buffer_callback>:
 801044c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop

08010454 <ucdr_init_buffer_origin_offset_endian>:
 8010454:	b410      	push	{r4}
 8010456:	9c01      	ldr	r4, [sp, #4]
 8010458:	6001      	str	r1, [r0, #0]
 801045a:	440a      	add	r2, r1
 801045c:	6042      	str	r2, [r0, #4]
 801045e:	190a      	adds	r2, r1, r4
 8010460:	441c      	add	r4, r3
 8010462:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010466:	6082      	str	r2, [r0, #8]
 8010468:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801046c:	7503      	strb	r3, [r0, #20]
 801046e:	2200      	movs	r2, #0
 8010470:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010474:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010478:	7542      	strb	r2, [r0, #21]
 801047a:	7582      	strb	r2, [r0, #22]
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop

08010480 <ucdr_init_buffer_origin_offset>:
 8010480:	b510      	push	{r4, lr}
 8010482:	b082      	sub	sp, #8
 8010484:	9c04      	ldr	r4, [sp, #16]
 8010486:	9400      	str	r4, [sp, #0]
 8010488:	2401      	movs	r4, #1
 801048a:	9401      	str	r4, [sp, #4]
 801048c:	f7ff ffe2 	bl	8010454 <ucdr_init_buffer_origin_offset_endian>
 8010490:	b002      	add	sp, #8
 8010492:	bd10      	pop	{r4, pc}

08010494 <ucdr_init_buffer_origin>:
 8010494:	b510      	push	{r4, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	2400      	movs	r4, #0
 801049a:	9400      	str	r4, [sp, #0]
 801049c:	f7ff fff0 	bl	8010480 <ucdr_init_buffer_origin_offset>
 80104a0:	b002      	add	sp, #8
 80104a2:	bd10      	pop	{r4, pc}

080104a4 <ucdr_init_buffer>:
 80104a4:	2300      	movs	r3, #0
 80104a6:	f7ff bff5 	b.w	8010494 <ucdr_init_buffer_origin>
 80104aa:	bf00      	nop

080104ac <ucdr_alignment>:
 80104ac:	fbb0 f3f1 	udiv	r3, r0, r1
 80104b0:	fb03 0011 	mls	r0, r3, r1, r0
 80104b4:	1a08      	subs	r0, r1, r0
 80104b6:	3901      	subs	r1, #1
 80104b8:	4008      	ands	r0, r1
 80104ba:	4770      	bx	lr

080104bc <ucdr_buffer_alignment>:
 80104bc:	7d43      	ldrb	r3, [r0, #21]
 80104be:	428b      	cmp	r3, r1
 80104c0:	d208      	bcs.n	80104d4 <ucdr_buffer_alignment+0x18>
 80104c2:	6900      	ldr	r0, [r0, #16]
 80104c4:	fbb0 f3f1 	udiv	r3, r0, r1
 80104c8:	fb01 0013 	mls	r0, r1, r3, r0
 80104cc:	1a08      	subs	r0, r1, r0
 80104ce:	3901      	subs	r1, #1
 80104d0:	4008      	ands	r0, r1
 80104d2:	4770      	bx	lr
 80104d4:	2000      	movs	r0, #0
 80104d6:	4770      	bx	lr

080104d8 <ucdr_align_to>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4604      	mov	r4, r0
 80104dc:	460d      	mov	r5, r1
 80104de:	f7ff ffed 	bl	80104bc <ucdr_buffer_alignment>
 80104e2:	68a3      	ldr	r3, [r4, #8]
 80104e4:	6921      	ldr	r1, [r4, #16]
 80104e6:	7565      	strb	r5, [r4, #21]
 80104e8:	181a      	adds	r2, r3, r0
 80104ea:	6863      	ldr	r3, [r4, #4]
 80104ec:	4293      	cmp	r3, r2
 80104ee:	4408      	add	r0, r1
 80104f0:	bf28      	it	cs
 80104f2:	4613      	movcs	r3, r2
 80104f4:	6120      	str	r0, [r4, #16]
 80104f6:	60a3      	str	r3, [r4, #8]
 80104f8:	bd38      	pop	{r3, r4, r5, pc}
 80104fa:	bf00      	nop

080104fc <ucdr_buffer_length>:
 80104fc:	6882      	ldr	r2, [r0, #8]
 80104fe:	6800      	ldr	r0, [r0, #0]
 8010500:	1a10      	subs	r0, r2, r0
 8010502:	4770      	bx	lr

08010504 <ucdr_buffer_remaining>:
 8010504:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010508:	1a10      	subs	r0, r2, r0
 801050a:	4770      	bx	lr

0801050c <ucdr_check_final_buffer_behavior_array>:
 801050c:	b538      	push	{r3, r4, r5, lr}
 801050e:	7d83      	ldrb	r3, [r0, #22]
 8010510:	b963      	cbnz	r3, 801052c <ucdr_check_final_buffer_behavior_array+0x20>
 8010512:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010516:	429a      	cmp	r2, r3
 8010518:	4604      	mov	r4, r0
 801051a:	460d      	mov	r5, r1
 801051c:	d308      	bcc.n	8010530 <ucdr_check_final_buffer_behavior_array+0x24>
 801051e:	b139      	cbz	r1, 8010530 <ucdr_check_final_buffer_behavior_array+0x24>
 8010520:	6983      	ldr	r3, [r0, #24]
 8010522:	b163      	cbz	r3, 801053e <ucdr_check_final_buffer_behavior_array+0x32>
 8010524:	69c1      	ldr	r1, [r0, #28]
 8010526:	4798      	blx	r3
 8010528:	75a0      	strb	r0, [r4, #22]
 801052a:	b108      	cbz	r0, 8010530 <ucdr_check_final_buffer_behavior_array+0x24>
 801052c:	2000      	movs	r0, #0
 801052e:	bd38      	pop	{r3, r4, r5, pc}
 8010530:	4620      	mov	r0, r4
 8010532:	f7ff ffe7 	bl	8010504 <ucdr_buffer_remaining>
 8010536:	42a8      	cmp	r0, r5
 8010538:	bf28      	it	cs
 801053a:	4628      	movcs	r0, r5
 801053c:	bd38      	pop	{r3, r4, r5, pc}
 801053e:	2301      	movs	r3, #1
 8010540:	7583      	strb	r3, [r0, #22]
 8010542:	e7f3      	b.n	801052c <ucdr_check_final_buffer_behavior_array+0x20>

08010544 <ucdr_advance_buffer>:
 8010544:	b538      	push	{r3, r4, r5, lr}
 8010546:	4604      	mov	r4, r0
 8010548:	460d      	mov	r5, r1
 801054a:	f7ff ff57 	bl	80103fc <ucdr_check_buffer_available_for>
 801054e:	b178      	cbz	r0, 8010570 <ucdr_advance_buffer+0x2c>
 8010550:	6923      	ldr	r3, [r4, #16]
 8010552:	68a2      	ldr	r2, [r4, #8]
 8010554:	442b      	add	r3, r5
 8010556:	6123      	str	r3, [r4, #16]
 8010558:	2301      	movs	r3, #1
 801055a:	442a      	add	r2, r5
 801055c:	7563      	strb	r3, [r4, #21]
 801055e:	60a2      	str	r2, [r4, #8]
 8010560:	bd38      	pop	{r3, r4, r5, pc}
 8010562:	68a2      	ldr	r2, [r4, #8]
 8010564:	6923      	ldr	r3, [r4, #16]
 8010566:	4402      	add	r2, r0
 8010568:	4403      	add	r3, r0
 801056a:	1a2d      	subs	r5, r5, r0
 801056c:	60a2      	str	r2, [r4, #8]
 801056e:	6123      	str	r3, [r4, #16]
 8010570:	4629      	mov	r1, r5
 8010572:	2201      	movs	r2, #1
 8010574:	4620      	mov	r0, r4
 8010576:	f7ff ffc9 	bl	801050c <ucdr_check_final_buffer_behavior_array>
 801057a:	2800      	cmp	r0, #0
 801057c:	d1f1      	bne.n	8010562 <ucdr_advance_buffer+0x1e>
 801057e:	2301      	movs	r3, #1
 8010580:	7563      	strb	r3, [r4, #21]
 8010582:	bd38      	pop	{r3, r4, r5, pc}

08010584 <rcl_get_zero_initialized_publisher>:
 8010584:	4b01      	ldr	r3, [pc, #4]	@ (801058c <rcl_get_zero_initialized_publisher+0x8>)
 8010586:	6818      	ldr	r0, [r3, #0]
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	0801d9e0 	.word	0x0801d9e0

08010590 <rcl_publisher_init>:
 8010590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010594:	b088      	sub	sp, #32
 8010596:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010598:	2d00      	cmp	r5, #0
 801059a:	d069      	beq.n	8010670 <rcl_publisher_init+0xe0>
 801059c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80105a0:	4604      	mov	r4, r0
 80105a2:	4648      	mov	r0, r9
 80105a4:	460e      	mov	r6, r1
 80105a6:	4690      	mov	r8, r2
 80105a8:	461f      	mov	r7, r3
 80105aa:	f001 f83d 	bl	8011628 <rcutils_allocator_is_valid>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	d05e      	beq.n	8010670 <rcl_publisher_init+0xe0>
 80105b2:	2c00      	cmp	r4, #0
 80105b4:	d05c      	beq.n	8010670 <rcl_publisher_init+0xe0>
 80105b6:	f8d4 a000 	ldr.w	sl, [r4]
 80105ba:	f1ba 0f00 	cmp.w	sl, #0
 80105be:	d004      	beq.n	80105ca <rcl_publisher_init+0x3a>
 80105c0:	2764      	movs	r7, #100	@ 0x64
 80105c2:	4638      	mov	r0, r7
 80105c4:	b008      	add	sp, #32
 80105c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105ca:	4630      	mov	r0, r6
 80105cc:	f005 f9f4 	bl	80159b8 <rcl_node_is_valid>
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d052      	beq.n	801067a <rcl_publisher_init+0xea>
 80105d4:	f1b8 0f00 	cmp.w	r8, #0
 80105d8:	d04a      	beq.n	8010670 <rcl_publisher_init+0xe0>
 80105da:	2f00      	cmp	r7, #0
 80105dc:	d048      	beq.n	8010670 <rcl_publisher_init+0xe0>
 80105de:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80105e2:	aa07      	add	r2, sp, #28
 80105e4:	9205      	str	r2, [sp, #20]
 80105e6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80105ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80105ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80105f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80105f6:	4639      	mov	r1, r7
 80105f8:	e899 000c 	ldmia.w	r9, {r2, r3}
 80105fc:	4630      	mov	r0, r6
 80105fe:	f005 fa2f 	bl	8015a60 <rcl_node_resolve_name>
 8010602:	4607      	mov	r7, r0
 8010604:	2800      	cmp	r0, #0
 8010606:	d14f      	bne.n	80106a8 <rcl_publisher_init+0x118>
 8010608:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801060a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 801060c:	20c8      	movs	r0, #200	@ 0xc8
 801060e:	4798      	blx	r3
 8010610:	6020      	str	r0, [r4, #0]
 8010612:	2800      	cmp	r0, #0
 8010614:	d04e      	beq.n	80106b4 <rcl_publisher_init+0x124>
 8010616:	4630      	mov	r0, r6
 8010618:	f005 f9f0 	bl	80159fc <rcl_node_get_rmw_handle>
 801061c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010620:	9300      	str	r3, [sp, #0]
 8010622:	9a07      	ldr	r2, [sp, #28]
 8010624:	6827      	ldr	r7, [r4, #0]
 8010626:	462b      	mov	r3, r5
 8010628:	4641      	mov	r1, r8
 801062a:	f001 f90b 	bl	8011844 <rmw_create_publisher>
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8010634:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8010638:	b370      	cbz	r0, 8010698 <rcl_publisher_init+0x108>
 801063a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801063e:	f001 f9df 	bl	8011a00 <rmw_publisher_get_actual_qos>
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	4607      	mov	r7, r0
 8010646:	b9d0      	cbnz	r0, 801067e <rcl_publisher_init+0xee>
 8010648:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 801064c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8010650:	4629      	mov	r1, r5
 8010652:	2270      	movs	r2, #112	@ 0x70
 8010654:	4618      	mov	r0, r3
 8010656:	f00b feb6 	bl	801c3c6 <memcpy>
 801065a:	6832      	ldr	r2, [r6, #0]
 801065c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8010660:	9807      	ldr	r0, [sp, #28]
 8010662:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8010664:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8010666:	4798      	blx	r3
 8010668:	4638      	mov	r0, r7
 801066a:	b008      	add	sp, #32
 801066c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010670:	270b      	movs	r7, #11
 8010672:	4638      	mov	r0, r7
 8010674:	b008      	add	sp, #32
 8010676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801067a:	27c8      	movs	r7, #200	@ 0xc8
 801067c:	e7a1      	b.n	80105c2 <rcl_publisher_init+0x32>
 801067e:	b18b      	cbz	r3, 80106a4 <rcl_publisher_init+0x114>
 8010680:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8010684:	b142      	cbz	r2, 8010698 <rcl_publisher_init+0x108>
 8010686:	4630      	mov	r0, r6
 8010688:	f005 f9b8 	bl	80159fc <rcl_node_get_rmw_handle>
 801068c:	6823      	ldr	r3, [r4, #0]
 801068e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8010692:	f001 f9c5 	bl	8011a20 <rmw_destroy_publisher>
 8010696:	6823      	ldr	r3, [r4, #0]
 8010698:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 801069a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 801069c:	4618      	mov	r0, r3
 801069e:	4790      	blx	r2
 80106a0:	2300      	movs	r3, #0
 80106a2:	6023      	str	r3, [r4, #0]
 80106a4:	2701      	movs	r7, #1
 80106a6:	e7db      	b.n	8010660 <rcl_publisher_init+0xd0>
 80106a8:	2867      	cmp	r0, #103	@ 0x67
 80106aa:	d0d9      	beq.n	8010660 <rcl_publisher_init+0xd0>
 80106ac:	2869      	cmp	r0, #105	@ 0x69
 80106ae:	d003      	beq.n	80106b8 <rcl_publisher_init+0x128>
 80106b0:	280a      	cmp	r0, #10
 80106b2:	d1f7      	bne.n	80106a4 <rcl_publisher_init+0x114>
 80106b4:	270a      	movs	r7, #10
 80106b6:	e7d3      	b.n	8010660 <rcl_publisher_init+0xd0>
 80106b8:	2767      	movs	r7, #103	@ 0x67
 80106ba:	e7d1      	b.n	8010660 <rcl_publisher_init+0xd0>

080106bc <rcl_publisher_get_default_options>:
 80106bc:	b570      	push	{r4, r5, r6, lr}
 80106be:	4d14      	ldr	r5, [pc, #80]	@ (8010710 <rcl_publisher_get_default_options+0x54>)
 80106c0:	4914      	ldr	r1, [pc, #80]	@ (8010714 <rcl_publisher_get_default_options+0x58>)
 80106c2:	b088      	sub	sp, #32
 80106c4:	4604      	mov	r4, r0
 80106c6:	2250      	movs	r2, #80	@ 0x50
 80106c8:	4628      	mov	r0, r5
 80106ca:	f00b fe7c 	bl	801c3c6 <memcpy>
 80106ce:	a802      	add	r0, sp, #8
 80106d0:	f000 ff9c 	bl	801160c <rcutils_get_default_allocator>
 80106d4:	f10d 0c08 	add.w	ip, sp, #8
 80106d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80106dc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80106e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80106e4:	466e      	mov	r6, sp
 80106e6:	f8dc 3000 	ldr.w	r3, [ip]
 80106ea:	f8ce 3000 	str.w	r3, [lr]
 80106ee:	4630      	mov	r0, r6
 80106f0:	f001 f82a 	bl	8011748 <rmw_get_default_publisher_options>
 80106f4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80106f8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80106fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8010700:	2270      	movs	r2, #112	@ 0x70
 8010702:	4629      	mov	r1, r5
 8010704:	4620      	mov	r0, r4
 8010706:	f00b fe5e 	bl	801c3c6 <memcpy>
 801070a:	4620      	mov	r0, r4
 801070c:	b008      	add	sp, #32
 801070e:	bd70      	pop	{r4, r5, r6, pc}
 8010710:	20009ba0 	.word	0x20009ba0
 8010714:	0801d9e8 	.word	0x0801d9e8

08010718 <rcl_publish>:
 8010718:	b1f8      	cbz	r0, 801075a <rcl_publish+0x42>
 801071a:	6803      	ldr	r3, [r0, #0]
 801071c:	b570      	push	{r4, r5, r6, lr}
 801071e:	4604      	mov	r4, r0
 8010720:	b1b3      	cbz	r3, 8010750 <rcl_publish+0x38>
 8010722:	4616      	mov	r6, r2
 8010724:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8010728:	b192      	cbz	r2, 8010750 <rcl_publish+0x38>
 801072a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801072e:	460d      	mov	r5, r1
 8010730:	f004 fd7e 	bl	8015230 <rcl_context_is_valid>
 8010734:	b160      	cbz	r0, 8010750 <rcl_publish+0x38>
 8010736:	6823      	ldr	r3, [r4, #0]
 8010738:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801073c:	b140      	cbz	r0, 8010750 <rcl_publish+0x38>
 801073e:	b155      	cbz	r5, 8010756 <rcl_publish+0x3e>
 8010740:	4632      	mov	r2, r6
 8010742:	4629      	mov	r1, r5
 8010744:	f001 f81e 	bl	8011784 <rmw_publish>
 8010748:	3800      	subs	r0, #0
 801074a:	bf18      	it	ne
 801074c:	2001      	movne	r0, #1
 801074e:	bd70      	pop	{r4, r5, r6, pc}
 8010750:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8010754:	bd70      	pop	{r4, r5, r6, pc}
 8010756:	200b      	movs	r0, #11
 8010758:	bd70      	pop	{r4, r5, r6, pc}
 801075a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801075e:	4770      	bx	lr

08010760 <rcl_publisher_is_valid>:
 8010760:	b1a0      	cbz	r0, 801078c <rcl_publisher_is_valid+0x2c>
 8010762:	6803      	ldr	r3, [r0, #0]
 8010764:	b510      	push	{r4, lr}
 8010766:	4604      	mov	r4, r0
 8010768:	b173      	cbz	r3, 8010788 <rcl_publisher_is_valid+0x28>
 801076a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801076e:	b15a      	cbz	r2, 8010788 <rcl_publisher_is_valid+0x28>
 8010770:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8010774:	f004 fd5c 	bl	8015230 <rcl_context_is_valid>
 8010778:	b130      	cbz	r0, 8010788 <rcl_publisher_is_valid+0x28>
 801077a:	6823      	ldr	r3, [r4, #0]
 801077c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8010780:	3800      	subs	r0, #0
 8010782:	bf18      	it	ne
 8010784:	2001      	movne	r0, #1
 8010786:	bd10      	pop	{r4, pc}
 8010788:	2000      	movs	r0, #0
 801078a:	bd10      	pop	{r4, pc}
 801078c:	2000      	movs	r0, #0
 801078e:	4770      	bx	lr

08010790 <rcl_publisher_is_valid_except_context>:
 8010790:	b130      	cbz	r0, 80107a0 <rcl_publisher_is_valid_except_context+0x10>
 8010792:	6800      	ldr	r0, [r0, #0]
 8010794:	b120      	cbz	r0, 80107a0 <rcl_publisher_is_valid_except_context+0x10>
 8010796:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801079a:	3800      	subs	r0, #0
 801079c:	bf18      	it	ne
 801079e:	2001      	movne	r0, #1
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop

080107a4 <_rclc_check_for_new_data>:
 80107a4:	2800      	cmp	r0, #0
 80107a6:	d046      	beq.n	8010836 <_rclc_check_for_new_data+0x92>
 80107a8:	b510      	push	{r4, lr}
 80107aa:	7802      	ldrb	r2, [r0, #0]
 80107ac:	b084      	sub	sp, #16
 80107ae:	4603      	mov	r3, r0
 80107b0:	2a0a      	cmp	r2, #10
 80107b2:	d842      	bhi.n	801083a <_rclc_check_for_new_data+0x96>
 80107b4:	e8df f002 	tbb	[pc, r2]
 80107b8:	14181212 	.word	0x14181212
 80107bc:	06060614 	.word	0x06060614
 80107c0:	2e1a      	.short	0x2e1a
 80107c2:	16          	.byte	0x16
 80107c3:	00          	.byte	0x00
 80107c4:	6a0a      	ldr	r2, [r1, #32]
 80107c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80107c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80107cc:	2000      	movs	r0, #0
 80107ce:	1a12      	subs	r2, r2, r0
 80107d0:	bf18      	it	ne
 80107d2:	2201      	movne	r2, #1
 80107d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80107d8:	b004      	add	sp, #16
 80107da:	bd10      	pop	{r4, pc}
 80107dc:	680a      	ldr	r2, [r1, #0]
 80107de:	e7f2      	b.n	80107c6 <_rclc_check_for_new_data+0x22>
 80107e0:	698a      	ldr	r2, [r1, #24]
 80107e2:	e7f0      	b.n	80107c6 <_rclc_check_for_new_data+0x22>
 80107e4:	688a      	ldr	r2, [r1, #8]
 80107e6:	e7ee      	b.n	80107c6 <_rclc_check_for_new_data+0x22>
 80107e8:	690a      	ldr	r2, [r1, #16]
 80107ea:	e7ec      	b.n	80107c6 <_rclc_check_for_new_data+0x22>
 80107ec:	685c      	ldr	r4, [r3, #4]
 80107ee:	4608      	mov	r0, r1
 80107f0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80107f4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80107f8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80107fc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010800:	9300      	str	r3, [sp, #0]
 8010802:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8010806:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 801080a:	f104 0110 	add.w	r1, r4, #16
 801080e:	f006 fc8f 	bl	8017130 <rcl_action_client_wait_set_get_entities_ready>
 8010812:	e7e1      	b.n	80107d8 <_rclc_check_for_new_data+0x34>
 8010814:	685c      	ldr	r4, [r3, #4]
 8010816:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 801081a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 801081e:	e9cd 3200 	strd	r3, r2, [sp]
 8010822:	4608      	mov	r0, r1
 8010824:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010828:	f104 0220 	add.w	r2, r4, #32
 801082c:	f104 0110 	add.w	r1, r4, #16
 8010830:	f006 fe96 	bl	8017560 <rcl_action_server_wait_set_get_entities_ready>
 8010834:	e7d0      	b.n	80107d8 <_rclc_check_for_new_data+0x34>
 8010836:	200b      	movs	r0, #11
 8010838:	4770      	bx	lr
 801083a:	2001      	movs	r0, #1
 801083c:	e7cc      	b.n	80107d8 <_rclc_check_for_new_data+0x34>
 801083e:	bf00      	nop

08010840 <_rclc_take_new_data>:
 8010840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010842:	b09b      	sub	sp, #108	@ 0x6c
 8010844:	2800      	cmp	r0, #0
 8010846:	f000 8088 	beq.w	801095a <_rclc_take_new_data+0x11a>
 801084a:	7803      	ldrb	r3, [r0, #0]
 801084c:	4604      	mov	r4, r0
 801084e:	2b0a      	cmp	r3, #10
 8010850:	f200 8167 	bhi.w	8010b22 <_rclc_take_new_data+0x2e2>
 8010854:	e8df f003 	tbb	[pc, r3]
 8010858:	44152d2d 	.word	0x44152d2d
 801085c:	19191944 	.word	0x19191944
 8010860:	065a      	.short	0x065a
 8010862:	15          	.byte	0x15
 8010863:	00          	.byte	0x00
 8010864:	6840      	ldr	r0, [r0, #4]
 8010866:	f890 3020 	ldrb.w	r3, [r0, #32]
 801086a:	2b00      	cmp	r3, #0
 801086c:	f040 80b2 	bne.w	80109d4 <_rclc_take_new_data+0x194>
 8010870:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8010874:	2b00      	cmp	r3, #0
 8010876:	f040 80e4 	bne.w	8010a42 <_rclc_take_new_data+0x202>
 801087a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801087e:	2b00      	cmp	r3, #0
 8010880:	d16f      	bne.n	8010962 <_rclc_take_new_data+0x122>
 8010882:	2500      	movs	r5, #0
 8010884:	4628      	mov	r0, r5
 8010886:	b01b      	add	sp, #108	@ 0x6c
 8010888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801088a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801088c:	6a0b      	ldr	r3, [r1, #32]
 801088e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d0f5      	beq.n	8010882 <_rclc_take_new_data+0x42>
 8010896:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 801089a:	f104 0110 	add.w	r1, r4, #16
 801089e:	f005 f98d 	bl	8015bbc <rcl_take_request>
 80108a2:	4605      	mov	r5, r0
 80108a4:	2800      	cmp	r0, #0
 80108a6:	d0ec      	beq.n	8010882 <_rclc_take_new_data+0x42>
 80108a8:	f240 2359 	movw	r3, #601	@ 0x259
 80108ac:	4298      	cmp	r0, r3
 80108ae:	d013      	beq.n	80108d8 <_rclc_take_new_data+0x98>
 80108b0:	e029      	b.n	8010906 <_rclc_take_new_data+0xc6>
 80108b2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80108b4:	680b      	ldr	r3, [r1, #0]
 80108b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d0e1      	beq.n	8010882 <_rclc_take_new_data+0x42>
 80108be:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80108c2:	2300      	movs	r3, #0
 80108c4:	aa0a      	add	r2, sp, #40	@ 0x28
 80108c6:	f005 fab7 	bl	8015e38 <rcl_take>
 80108ca:	4605      	mov	r5, r0
 80108cc:	2800      	cmp	r0, #0
 80108ce:	d0d9      	beq.n	8010884 <_rclc_take_new_data+0x44>
 80108d0:	f240 1391 	movw	r3, #401	@ 0x191
 80108d4:	4298      	cmp	r0, r3
 80108d6:	d116      	bne.n	8010906 <_rclc_take_new_data+0xc6>
 80108d8:	2300      	movs	r3, #0
 80108da:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80108de:	e7d1      	b.n	8010884 <_rclc_take_new_data+0x44>
 80108e0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80108e2:	698b      	ldr	r3, [r1, #24]
 80108e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d0ca      	beq.n	8010882 <_rclc_take_new_data+0x42>
 80108ec:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80108f0:	f104 0110 	add.w	r1, r4, #16
 80108f4:	f004 fc2c 	bl	8015150 <rcl_take_response>
 80108f8:	4605      	mov	r5, r0
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d0c1      	beq.n	8010882 <_rclc_take_new_data+0x42>
 80108fe:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010902:	4298      	cmp	r0, r3
 8010904:	d0be      	beq.n	8010884 <_rclc_take_new_data+0x44>
 8010906:	f000 feb3 	bl	8011670 <rcutils_reset_error>
 801090a:	e7bb      	b.n	8010884 <_rclc_take_new_data+0x44>
 801090c:	6840      	ldr	r0, [r0, #4]
 801090e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8010912:	2b00      	cmp	r3, #0
 8010914:	d17d      	bne.n	8010a12 <_rclc_take_new_data+0x1d2>
 8010916:	69c3      	ldr	r3, [r0, #28]
 8010918:	b11b      	cbz	r3, 8010922 <_rclc_take_new_data+0xe2>
 801091a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801091e:	2b00      	cmp	r3, #0
 8010920:	d144      	bne.n	80109ac <_rclc_take_new_data+0x16c>
 8010922:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010926:	2b00      	cmp	r3, #0
 8010928:	f040 80ac 	bne.w	8010a84 <_rclc_take_new_data+0x244>
 801092c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8010930:	2b00      	cmp	r3, #0
 8010932:	d0a6      	beq.n	8010882 <_rclc_take_new_data+0x42>
 8010934:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8010936:	a90a      	add	r1, sp, #40	@ 0x28
 8010938:	3010      	adds	r0, #16
 801093a:	f006 fad1 	bl	8016ee0 <rcl_action_take_result_response>
 801093e:	4605      	mov	r5, r0
 8010940:	2800      	cmp	r0, #0
 8010942:	d1e0      	bne.n	8010906 <_rclc_take_new_data+0xc6>
 8010944:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010948:	6860      	ldr	r0, [r4, #4]
 801094a:	f006 ff2d 	bl	80177a8 <rclc_action_find_handle_by_result_request_sequence_number>
 801094e:	2800      	cmp	r0, #0
 8010950:	d098      	beq.n	8010884 <_rclc_take_new_data+0x44>
 8010952:	2301      	movs	r3, #1
 8010954:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8010958:	e794      	b.n	8010884 <_rclc_take_new_data+0x44>
 801095a:	250b      	movs	r5, #11
 801095c:	4628      	mov	r0, r5
 801095e:	b01b      	add	sp, #108	@ 0x6c
 8010960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010962:	ae04      	add	r6, sp, #16
 8010964:	aa0a      	add	r2, sp, #40	@ 0x28
 8010966:	3010      	adds	r0, #16
 8010968:	4631      	mov	r1, r6
 801096a:	f006 fd2d 	bl	80173c8 <rcl_action_take_cancel_request>
 801096e:	4605      	mov	r5, r0
 8010970:	2800      	cmp	r0, #0
 8010972:	d1c8      	bne.n	8010906 <_rclc_take_new_data+0xc6>
 8010974:	6860      	ldr	r0, [r4, #4]
 8010976:	a90a      	add	r1, sp, #40	@ 0x28
 8010978:	f006 fed4 	bl	8017724 <rclc_action_find_goal_handle_by_uuid>
 801097c:	4607      	mov	r7, r0
 801097e:	2800      	cmp	r0, #0
 8010980:	f000 80bb 	beq.w	8010afa <_rclc_take_new_data+0x2ba>
 8010984:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8010988:	2101      	movs	r1, #1
 801098a:	f006 fe55 	bl	8017638 <rcl_action_transition_goal_state>
 801098e:	2803      	cmp	r0, #3
 8010990:	4684      	mov	ip, r0
 8010992:	f040 80a7 	bne.w	8010ae4 <_rclc_take_new_data+0x2a4>
 8010996:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010998:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801099e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80109a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80109a6:	f887 c008 	strb.w	ip, [r7, #8]
 80109aa:	e76b      	b.n	8010884 <_rclc_take_new_data+0x44>
 80109ac:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80109ae:	3010      	adds	r0, #16
 80109b0:	f006 fb16 	bl	8016fe0 <rcl_action_take_feedback>
 80109b4:	4605      	mov	r5, r0
 80109b6:	2800      	cmp	r0, #0
 80109b8:	d1a5      	bne.n	8010906 <_rclc_take_new_data+0xc6>
 80109ba:	6860      	ldr	r0, [r4, #4]
 80109bc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80109be:	f006 feb1 	bl	8017724 <rclc_action_find_goal_handle_by_uuid>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2800      	cmp	r0, #0
 80109c6:	f000 80a3 	beq.w	8010b10 <_rclc_take_new_data+0x2d0>
 80109ca:	2201      	movs	r2, #1
 80109cc:	6860      	ldr	r0, [r4, #4]
 80109ce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80109d2:	e7a6      	b.n	8010922 <_rclc_take_new_data+0xe2>
 80109d4:	f006 fe80 	bl	80176d8 <rclc_action_take_goal_handle>
 80109d8:	4606      	mov	r6, r0
 80109da:	6860      	ldr	r0, [r4, #4]
 80109dc:	2e00      	cmp	r6, #0
 80109de:	f43f af47 	beq.w	8010870 <_rclc_take_new_data+0x30>
 80109e2:	6070      	str	r0, [r6, #4]
 80109e4:	69f2      	ldr	r2, [r6, #28]
 80109e6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80109ea:	3010      	adds	r0, #16
 80109ec:	f006 fc34 	bl	8017258 <rcl_action_take_goal_request>
 80109f0:	4605      	mov	r5, r0
 80109f2:	2800      	cmp	r0, #0
 80109f4:	f040 808e 	bne.w	8010b14 <_rclc_take_new_data+0x2d4>
 80109f8:	69f7      	ldr	r7, [r6, #28]
 80109fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80109fc:	7235      	strb	r5, [r6, #8]
 80109fe:	f8c6 0009 	str.w	r0, [r6, #9]
 8010a02:	f8c6 100d 	str.w	r1, [r6, #13]
 8010a06:	6860      	ldr	r0, [r4, #4]
 8010a08:	f8c6 2011 	str.w	r2, [r6, #17]
 8010a0c:	f8c6 3015 	str.w	r3, [r6, #21]
 8010a10:	e72e      	b.n	8010870 <_rclc_take_new_data+0x30>
 8010a12:	aa04      	add	r2, sp, #16
 8010a14:	a90a      	add	r1, sp, #40	@ 0x28
 8010a16:	3010      	adds	r0, #16
 8010a18:	f006 f9ea 	bl	8016df0 <rcl_action_take_goal_response>
 8010a1c:	4605      	mov	r5, r0
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	f47f af71 	bne.w	8010906 <_rclc_take_new_data+0xc6>
 8010a24:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010a28:	6860      	ldr	r0, [r4, #4]
 8010a2a:	f006 feab 	bl	8017784 <rclc_action_find_handle_by_goal_request_sequence_number>
 8010a2e:	b130      	cbz	r0, 8010a3e <_rclc_take_new_data+0x1fe>
 8010a30:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010a34:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010a38:	2201      	movs	r2, #1
 8010a3a:	f880 2020 	strb.w	r2, [r0, #32]
 8010a3e:	6860      	ldr	r0, [r4, #4]
 8010a40:	e769      	b.n	8010916 <_rclc_take_new_data+0xd6>
 8010a42:	aa04      	add	r2, sp, #16
 8010a44:	3010      	adds	r0, #16
 8010a46:	a90a      	add	r1, sp, #40	@ 0x28
 8010a48:	f006 fc7e 	bl	8017348 <rcl_action_take_result_request>
 8010a4c:	4605      	mov	r5, r0
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	f47f af59 	bne.w	8010906 <_rclc_take_new_data+0xc6>
 8010a54:	6860      	ldr	r0, [r4, #4]
 8010a56:	a904      	add	r1, sp, #16
 8010a58:	f006 fe64 	bl	8017724 <rclc_action_find_goal_handle_by_uuid>
 8010a5c:	4607      	mov	r7, r0
 8010a5e:	b160      	cbz	r0, 8010a7a <_rclc_take_new_data+0x23a>
 8010a60:	ad0a      	add	r5, sp, #40	@ 0x28
 8010a62:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8010a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a68:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010a6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010a6e:	f04f 0c02 	mov.w	ip, #2
 8010a72:	e886 0003 	stmia.w	r6, {r0, r1}
 8010a76:	f887 c008 	strb.w	ip, [r7, #8]
 8010a7a:	6860      	ldr	r0, [r4, #4]
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8010a82:	e6fa      	b.n	801087a <_rclc_take_new_data+0x3a>
 8010a84:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8010a88:	a90a      	add	r1, sp, #40	@ 0x28
 8010a8a:	3010      	adds	r0, #16
 8010a8c:	f006 fa68 	bl	8016f60 <rcl_action_take_cancel_response>
 8010a90:	4605      	mov	r5, r0
 8010a92:	2800      	cmp	r0, #0
 8010a94:	f47f af37 	bne.w	8010906 <_rclc_take_new_data+0xc6>
 8010a98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010a9c:	6860      	ldr	r0, [r4, #4]
 8010a9e:	f006 fe95 	bl	80177cc <rclc_action_find_handle_by_cancel_request_sequence_number>
 8010aa2:	4606      	mov	r6, r0
 8010aa4:	6860      	ldr	r0, [r4, #4]
 8010aa6:	2e00      	cmp	r6, #0
 8010aa8:	f43f af40 	beq.w	801092c <_rclc_take_new_data+0xec>
 8010aac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010aae:	2701      	movs	r7, #1
 8010ab0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f43f af3a 	beq.w	801092c <_rclc_take_new_data+0xec>
 8010ab8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010aba:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8010abe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010ac2:	f006 fe2f 	bl	8017724 <rclc_action_find_goal_handle_by_uuid>
 8010ac6:	b138      	cbz	r0, 8010ad8 <_rclc_take_new_data+0x298>
 8010ac8:	6860      	ldr	r0, [r4, #4]
 8010aca:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010acc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8010ad0:	3501      	adds	r5, #1
 8010ad2:	42ab      	cmp	r3, r5
 8010ad4:	d8f0      	bhi.n	8010ab8 <_rclc_take_new_data+0x278>
 8010ad6:	e729      	b.n	801092c <_rclc_take_new_data+0xec>
 8010ad8:	6860      	ldr	r0, [r4, #4]
 8010ada:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010adc:	3501      	adds	r5, #1
 8010ade:	42ab      	cmp	r3, r5
 8010ae0:	d8ea      	bhi.n	8010ab8 <_rclc_take_new_data+0x278>
 8010ae2:	e723      	b.n	801092c <_rclc_take_new_data+0xec>
 8010ae4:	ab06      	add	r3, sp, #24
 8010ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010ae8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010aec:	2103      	movs	r1, #3
 8010aee:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010af2:	6860      	ldr	r0, [r4, #4]
 8010af4:	f006 fee0 	bl	80178b8 <rclc_action_server_goal_cancel_reject>
 8010af8:	e6c4      	b.n	8010884 <_rclc_take_new_data+0x44>
 8010afa:	ab06      	add	r3, sp, #24
 8010afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010afe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010b02:	2102      	movs	r1, #2
 8010b04:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010b08:	6860      	ldr	r0, [r4, #4]
 8010b0a:	f006 fed5 	bl	80178b8 <rclc_action_server_goal_cancel_reject>
 8010b0e:	e6b9      	b.n	8010884 <_rclc_take_new_data+0x44>
 8010b10:	6860      	ldr	r0, [r4, #4]
 8010b12:	e706      	b.n	8010922 <_rclc_take_new_data+0xe2>
 8010b14:	6860      	ldr	r0, [r4, #4]
 8010b16:	4631      	mov	r1, r6
 8010b18:	f006 fdee 	bl	80176f8 <rclc_action_remove_used_goal_handle>
 8010b1c:	f000 fda8 	bl	8011670 <rcutils_reset_error>
 8010b20:	e6b0      	b.n	8010884 <_rclc_take_new_data+0x44>
 8010b22:	2501      	movs	r5, #1
 8010b24:	e6ae      	b.n	8010884 <_rclc_take_new_data+0x44>
 8010b26:	bf00      	nop

08010b28 <_rclc_execute.part.0>:
 8010b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b2a:	7803      	ldrb	r3, [r0, #0]
 8010b2c:	b087      	sub	sp, #28
 8010b2e:	4604      	mov	r4, r0
 8010b30:	2b0a      	cmp	r3, #10
 8010b32:	f200 8136 	bhi.w	8010da2 <_rclc_execute.part.0+0x27a>
 8010b36:	e8df f003 	tbb	[pc, r3]
 8010b3a:	435e      	.short	0x435e
 8010b3c:	06a1664f 	.word	0x06a1664f
 8010b40:	6c1e0606 	.word	0x6c1e0606
 8010b44:	59          	.byte	0x59
 8010b45:	00          	.byte	0x00
 8010b46:	2b06      	cmp	r3, #6
 8010b48:	f000 8122 	beq.w	8010d90 <_rclc_execute.part.0+0x268>
 8010b4c:	2b07      	cmp	r3, #7
 8010b4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010b50:	f040 8118 	bne.w	8010d84 <_rclc_execute.part.0+0x25c>
 8010b54:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8010b58:	6880      	ldr	r0, [r0, #8]
 8010b5a:	4798      	blx	r3
 8010b5c:	f104 0110 	add.w	r1, r4, #16
 8010b60:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8010b62:	6860      	ldr	r0, [r4, #4]
 8010b64:	f005 f86a 	bl	8015c3c <rcl_send_response>
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	d033      	beq.n	8010bd4 <_rclc_execute.part.0+0xac>
 8010b6c:	9005      	str	r0, [sp, #20]
 8010b6e:	f000 fd7f 	bl	8011670 <rcutils_reset_error>
 8010b72:	9805      	ldr	r0, [sp, #20]
 8010b74:	e02e      	b.n	8010bd4 <_rclc_execute.part.0+0xac>
 8010b76:	6840      	ldr	r0, [r0, #4]
 8010b78:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	f000 8086 	beq.w	8010c8e <_rclc_execute.part.0+0x166>
 8010b82:	2600      	movs	r6, #0
 8010b84:	2701      	movs	r7, #1
 8010b86:	e004      	b.n	8010b92 <_rclc_execute.part.0+0x6a>
 8010b88:	f006 fd80 	bl	801768c <rclc_action_send_result_request>
 8010b8c:	b998      	cbnz	r0, 8010bb6 <_rclc_execute.part.0+0x8e>
 8010b8e:	722f      	strb	r7, [r5, #8]
 8010b90:	6860      	ldr	r0, [r4, #4]
 8010b92:	f006 fe2d 	bl	80177f0 <rclc_action_find_first_handle_with_goal_response>
 8010b96:	4605      	mov	r5, r0
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	d077      	beq.n	8010c8c <_rclc_execute.part.0+0x164>
 8010b9c:	6863      	ldr	r3, [r4, #4]
 8010b9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010ba0:	699b      	ldr	r3, [r3, #24]
 8010ba2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8010ba6:	f885 6020 	strb.w	r6, [r5, #32]
 8010baa:	4798      	blx	r3
 8010bac:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d1e8      	bne.n	8010b88 <_rclc_execute.part.0+0x60>
 8010bb6:	6860      	ldr	r0, [r4, #4]
 8010bb8:	4629      	mov	r1, r5
 8010bba:	f006 fd9d 	bl	80176f8 <rclc_action_remove_used_goal_handle>
 8010bbe:	e7e7      	b.n	8010b90 <_rclc_execute.part.0+0x68>
 8010bc0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8010bc4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8010bc8:	2d00      	cmp	r5, #0
 8010bca:	f000 80c9 	beq.w	8010d60 <_rclc_execute.part.0+0x238>
 8010bce:	6880      	ldr	r0, [r0, #8]
 8010bd0:	4798      	blx	r3
 8010bd2:	2000      	movs	r0, #0
 8010bd4:	b007      	add	sp, #28
 8010bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd8:	6840      	ldr	r0, [r0, #4]
 8010bda:	f005 fa31 	bl	8016040 <rcl_timer_call>
 8010bde:	f240 3321 	movw	r3, #801	@ 0x321
 8010be2:	4298      	cmp	r0, r3
 8010be4:	d004      	beq.n	8010bf0 <_rclc_execute.part.0+0xc8>
 8010be6:	2800      	cmp	r0, #0
 8010be8:	d0f4      	beq.n	8010bd4 <_rclc_execute.part.0+0xac>
 8010bea:	e7bf      	b.n	8010b6c <_rclc_execute.part.0+0x44>
 8010bec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010bee:	4798      	blx	r3
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	b007      	add	sp, #28
 8010bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bf6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8010bfa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010bfc:	b925      	cbnz	r5, 8010c08 <_rclc_execute.part.0+0xe0>
 8010bfe:	4628      	mov	r0, r5
 8010c00:	4798      	blx	r3
 8010c02:	4628      	mov	r0, r5
 8010c04:	e7e6      	b.n	8010bd4 <_rclc_execute.part.0+0xac>
 8010c06:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010c08:	68a0      	ldr	r0, [r4, #8]
 8010c0a:	4798      	blx	r3
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	b007      	add	sp, #28
 8010c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c12:	6840      	ldr	r0, [r0, #4]
 8010c14:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8010c18:	bb3b      	cbnz	r3, 8010c6a <_rclc_execute.part.0+0x142>
 8010c1a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d07b      	beq.n	8010d1a <_rclc_execute.part.0+0x1f2>
 8010c22:	f640 0634 	movw	r6, #2100	@ 0x834
 8010c26:	2701      	movs	r7, #1
 8010c28:	e007      	b.n	8010c3a <_rclc_execute.part.0+0x112>
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	f006 fdf8 	bl	8017820 <rclc_action_server_response_goal_request>
 8010c30:	6860      	ldr	r0, [r4, #4]
 8010c32:	4629      	mov	r1, r5
 8010c34:	f006 fd60 	bl	80176f8 <rclc_action_remove_used_goal_handle>
 8010c38:	6860      	ldr	r0, [r4, #4]
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	f006 fd8a 	bl	8017754 <rclc_action_find_first_handle_by_status>
 8010c40:	4605      	mov	r5, r0
 8010c42:	2800      	cmp	r0, #0
 8010c44:	d066      	beq.n	8010d14 <_rclc_execute.part.0+0x1ec>
 8010c46:	6863      	ldr	r3, [r4, #4]
 8010c48:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010c4a:	699b      	ldr	r3, [r3, #24]
 8010c4c:	4798      	blx	r3
 8010c4e:	42b0      	cmp	r0, r6
 8010c50:	f04f 0100 	mov.w	r1, #0
 8010c54:	d1e9      	bne.n	8010c2a <_rclc_execute.part.0+0x102>
 8010c56:	2101      	movs	r1, #1
 8010c58:	4628      	mov	r0, r5
 8010c5a:	f006 fde1 	bl	8017820 <rclc_action_server_response_goal_request>
 8010c5e:	722f      	strb	r7, [r5, #8]
 8010c60:	e7ea      	b.n	8010c38 <_rclc_execute.part.0+0x110>
 8010c62:	6848      	ldr	r0, [r1, #4]
 8010c64:	f006 fd48 	bl	80176f8 <rclc_action_remove_used_goal_handle>
 8010c68:	6860      	ldr	r0, [r4, #4]
 8010c6a:	f006 fd7f 	bl	801776c <rclc_action_find_first_terminated_handle>
 8010c6e:	4601      	mov	r1, r0
 8010c70:	2800      	cmp	r0, #0
 8010c72:	d1f6      	bne.n	8010c62 <_rclc_execute.part.0+0x13a>
 8010c74:	6860      	ldr	r0, [r4, #4]
 8010c76:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8010c7a:	e7ce      	b.n	8010c1a <_rclc_execute.part.0+0xf2>
 8010c7c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010c7e:	6880      	ldr	r0, [r0, #8]
 8010c80:	f104 0110 	add.w	r1, r4, #16
 8010c84:	4798      	blx	r3
 8010c86:	2000      	movs	r0, #0
 8010c88:	b007      	add	sp, #28
 8010c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c8c:	6860      	ldr	r0, [r4, #4]
 8010c8e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010c92:	b18b      	cbz	r3, 8010cb8 <_rclc_execute.part.0+0x190>
 8010c94:	68c5      	ldr	r5, [r0, #12]
 8010c96:	b32d      	cbz	r5, 8010ce4 <_rclc_execute.part.0+0x1bc>
 8010c98:	2600      	movs	r6, #0
 8010c9a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8010c9e:	b143      	cbz	r3, 8010cb2 <_rclc_execute.part.0+0x18a>
 8010ca0:	69c3      	ldr	r3, [r0, #28]
 8010ca2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8010ca6:	b123      	cbz	r3, 8010cb2 <_rclc_execute.part.0+0x18a>
 8010ca8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010caa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010cac:	4628      	mov	r0, r5
 8010cae:	4798      	blx	r3
 8010cb0:	6860      	ldr	r0, [r4, #4]
 8010cb2:	682d      	ldr	r5, [r5, #0]
 8010cb4:	2d00      	cmp	r5, #0
 8010cb6:	d1f0      	bne.n	8010c9a <_rclc_execute.part.0+0x172>
 8010cb8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010cbc:	b193      	cbz	r3, 8010ce4 <_rclc_execute.part.0+0x1bc>
 8010cbe:	68c5      	ldr	r5, [r0, #12]
 8010cc0:	b185      	cbz	r5, 8010ce4 <_rclc_execute.part.0+0x1bc>
 8010cc2:	2600      	movs	r6, #0
 8010cc4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8010cc8:	b14b      	cbz	r3, 8010cde <_rclc_execute.part.0+0x1b6>
 8010cca:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010ccc:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8010cd0:	b12b      	cbz	r3, 8010cde <_rclc_execute.part.0+0x1b6>
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8010cd8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010cda:	4798      	blx	r3
 8010cdc:	6860      	ldr	r0, [r4, #4]
 8010cde:	682d      	ldr	r5, [r5, #0]
 8010ce0:	2d00      	cmp	r5, #0
 8010ce2:	d1ef      	bne.n	8010cc4 <_rclc_execute.part.0+0x19c>
 8010ce4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d081      	beq.n	8010bf0 <_rclc_execute.part.0+0xc8>
 8010cec:	2700      	movs	r7, #0
 8010cee:	e00b      	b.n	8010d08 <_rclc_execute.part.0+0x1e0>
 8010cf0:	6863      	ldr	r3, [r4, #4]
 8010cf2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8010cf6:	6a1e      	ldr	r6, [r3, #32]
 8010cf8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8010cfc:	47b0      	blx	r6
 8010cfe:	6860      	ldr	r0, [r4, #4]
 8010d00:	4629      	mov	r1, r5
 8010d02:	f006 fcf9 	bl	80176f8 <rclc_action_remove_used_goal_handle>
 8010d06:	6860      	ldr	r0, [r4, #4]
 8010d08:	f006 fd7e 	bl	8017808 <rclc_action_find_first_handle_with_result_response>
 8010d0c:	4605      	mov	r5, r0
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d1ee      	bne.n	8010cf0 <_rclc_execute.part.0+0x1c8>
 8010d12:	e76d      	b.n	8010bf0 <_rclc_execute.part.0+0xc8>
 8010d14:	6860      	ldr	r0, [r4, #4]
 8010d16:	f880 5020 	strb.w	r5, [r0, #32]
 8010d1a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f43f af66 	beq.w	8010bf0 <_rclc_execute.part.0+0xc8>
 8010d24:	68c5      	ldr	r5, [r0, #12]
 8010d26:	b1b5      	cbz	r5, 8010d56 <_rclc_execute.part.0+0x22e>
 8010d28:	2602      	movs	r6, #2
 8010d2a:	e001      	b.n	8010d30 <_rclc_execute.part.0+0x208>
 8010d2c:	682d      	ldr	r5, [r5, #0]
 8010d2e:	b195      	cbz	r5, 8010d56 <_rclc_execute.part.0+0x22e>
 8010d30:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8010d34:	2b03      	cmp	r3, #3
 8010d36:	d1f9      	bne.n	8010d2c <_rclc_execute.part.0+0x204>
 8010d38:	69c3      	ldr	r3, [r0, #28]
 8010d3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	4798      	blx	r3
 8010d40:	4603      	mov	r3, r0
 8010d42:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8010d46:	4628      	mov	r0, r5
 8010d48:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010d4c:	b163      	cbz	r3, 8010d68 <_rclc_execute.part.0+0x240>
 8010d4e:	f006 fd87 	bl	8017860 <rclc_action_server_goal_cancel_accept>
 8010d52:	6860      	ldr	r0, [r4, #4]
 8010d54:	e7ea      	b.n	8010d2c <_rclc_execute.part.0+0x204>
 8010d56:	2300      	movs	r3, #0
 8010d58:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	e739      	b.n	8010bd4 <_rclc_execute.part.0+0xac>
 8010d60:	4628      	mov	r0, r5
 8010d62:	4798      	blx	r3
 8010d64:	4628      	mov	r0, r5
 8010d66:	e735      	b.n	8010bd4 <_rclc_execute.part.0+0xac>
 8010d68:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8010d6a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010d6e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8010d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d76:	6860      	ldr	r0, [r4, #4]
 8010d78:	2101      	movs	r1, #1
 8010d7a:	f006 fd9d 	bl	80178b8 <rclc_action_server_goal_cancel_reject>
 8010d7e:	722e      	strb	r6, [r5, #8]
 8010d80:	6860      	ldr	r0, [r4, #4]
 8010d82:	e7d3      	b.n	8010d2c <_rclc_execute.part.0+0x204>
 8010d84:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010d86:	6880      	ldr	r0, [r0, #8]
 8010d88:	4798      	blx	r3
 8010d8a:	f104 0110 	add.w	r1, r4, #16
 8010d8e:	e6e7      	b.n	8010b60 <_rclc_execute.part.0+0x38>
 8010d90:	f100 0110 	add.w	r1, r0, #16
 8010d94:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d96:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8010d98:	6880      	ldr	r0, [r0, #8]
 8010d9a:	9105      	str	r1, [sp, #20]
 8010d9c:	4798      	blx	r3
 8010d9e:	9905      	ldr	r1, [sp, #20]
 8010da0:	e6de      	b.n	8010b60 <_rclc_execute.part.0+0x38>
 8010da2:	2001      	movs	r0, #1
 8010da4:	e716      	b.n	8010bd4 <_rclc_execute.part.0+0xac>
 8010da6:	bf00      	nop

08010da8 <rclc_executor_trigger_any>:
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d03f      	beq.n	8010e2c <rclc_executor_trigger_any+0x84>
 8010dac:	2900      	cmp	r1, #0
 8010dae:	d03e      	beq.n	8010e2e <rclc_executor_trigger_any+0x86>
 8010db0:	4603      	mov	r3, r0
 8010db2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8010db6:	2200      	movs	r2, #0
 8010db8:	2800      	cmp	r0, #0
 8010dba:	d037      	beq.n	8010e2c <rclc_executor_trigger_any+0x84>
 8010dbc:	b430      	push	{r4, r5}
 8010dbe:	f893 c000 	ldrb.w	ip, [r3]
 8010dc2:	f1bc 0f08 	cmp.w	ip, #8
 8010dc6:	d11e      	bne.n	8010e06 <rclc_executor_trigger_any+0x5e>
 8010dc8:	685c      	ldr	r4, [r3, #4]
 8010dca:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8010dcc:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8010dd0:	d105      	bne.n	8010dde <rclc_executor_trigger_any+0x36>
 8010dd2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8010dd6:	b910      	cbnz	r0, 8010dde <rclc_executor_trigger_any+0x36>
 8010dd8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8010ddc:	b128      	cbz	r0, 8010dea <rclc_executor_trigger_any+0x42>
 8010dde:	bc30      	pop	{r4, r5}
 8010de0:	4770      	bx	lr
 8010de2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8010de6:	2800      	cmp	r0, #0
 8010de8:	d1f9      	bne.n	8010dde <rclc_executor_trigger_any+0x36>
 8010dea:	3201      	adds	r2, #1
 8010dec:	4291      	cmp	r1, r2
 8010dee:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8010df2:	d018      	beq.n	8010e26 <rclc_executor_trigger_any+0x7e>
 8010df4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	d0f0      	beq.n	8010dde <rclc_executor_trigger_any+0x36>
 8010dfc:	f893 c000 	ldrb.w	ip, [r3]
 8010e00:	f1bc 0f08 	cmp.w	ip, #8
 8010e04:	d0e0      	beq.n	8010dc8 <rclc_executor_trigger_any+0x20>
 8010e06:	f1bc 0f09 	cmp.w	ip, #9
 8010e0a:	d1ea      	bne.n	8010de2 <rclc_executor_trigger_any+0x3a>
 8010e0c:	685c      	ldr	r4, [r3, #4]
 8010e0e:	6a25      	ldr	r5, [r4, #32]
 8010e10:	2d00      	cmp	r5, #0
 8010e12:	d1e4      	bne.n	8010dde <rclc_executor_trigger_any+0x36>
 8010e14:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d1e0      	bne.n	8010dde <rclc_executor_trigger_any+0x36>
 8010e1c:	3201      	adds	r2, #1
 8010e1e:	4291      	cmp	r1, r2
 8010e20:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8010e24:	d1e6      	bne.n	8010df4 <rclc_executor_trigger_any+0x4c>
 8010e26:	2000      	movs	r0, #0
 8010e28:	bc30      	pop	{r4, r5}
 8010e2a:	4770      	bx	lr
 8010e2c:	4770      	bx	lr
 8010e2e:	4608      	mov	r0, r1
 8010e30:	4770      	bx	lr
 8010e32:	bf00      	nop
 8010e34:	0000      	movs	r0, r0
	...

08010e38 <rclc_executor_init>:
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	d05f      	beq.n	8010efc <rclc_executor_init+0xc4>
 8010e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e40:	460c      	mov	r4, r1
 8010e42:	b0b0      	sub	sp, #192	@ 0xc0
 8010e44:	2900      	cmp	r1, #0
 8010e46:	d051      	beq.n	8010eec <rclc_executor_init+0xb4>
 8010e48:	4605      	mov	r5, r0
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	4616      	mov	r6, r2
 8010e4e:	461f      	mov	r7, r3
 8010e50:	f000 fbea 	bl	8011628 <rcutils_allocator_is_valid>
 8010e54:	2800      	cmp	r0, #0
 8010e56:	d049      	beq.n	8010eec <rclc_executor_init+0xb4>
 8010e58:	2e00      	cmp	r6, #0
 8010e5a:	d047      	beq.n	8010eec <rclc_executor_init+0xb4>
 8010e5c:	492c      	ldr	r1, [pc, #176]	@ (8010f10 <rclc_executor_init+0xd8>)
 8010e5e:	2288      	movs	r2, #136	@ 0x88
 8010e60:	a80e      	add	r0, sp, #56	@ 0x38
 8010e62:	f00b fab0 	bl	801c3c6 <memcpy>
 8010e66:	a90e      	add	r1, sp, #56	@ 0x38
 8010e68:	2288      	movs	r2, #136	@ 0x88
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f00b faab 	bl	801c3c6 <memcpy>
 8010e70:	602c      	str	r4, [r5, #0]
 8010e72:	4668      	mov	r0, sp
 8010e74:	60ae      	str	r6, [r5, #8]
 8010e76:	466c      	mov	r4, sp
 8010e78:	f005 f9ea 	bl	8016250 <rcl_get_zero_initialized_wait_set>
 8010e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e7e:	f105 0c14 	add.w	ip, r5, #20
 8010e82:	f8d7 8000 	ldr.w	r8, [r7]
 8010e86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e96:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8010f08 <rclc_executor_init+0xd0>
 8010e9a:	6823      	ldr	r3, [r4, #0]
 8010e9c:	f8cc 3000 	str.w	r3, [ip]
 8010ea0:	6939      	ldr	r1, [r7, #16]
 8010ea2:	612f      	str	r7, [r5, #16]
 8010ea4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8010ea8:	01b0      	lsls	r0, r6, #6
 8010eaa:	47c0      	blx	r8
 8010eac:	6068      	str	r0, [r5, #4]
 8010eae:	b338      	cbz	r0, 8010f00 <rclc_executor_init+0xc8>
 8010eb0:	2400      	movs	r4, #0
 8010eb2:	e000      	b.n	8010eb6 <rclc_executor_init+0x7e>
 8010eb4:	6868      	ldr	r0, [r5, #4]
 8010eb6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8010eba:	4631      	mov	r1, r6
 8010ebc:	3401      	adds	r4, #1
 8010ebe:	f000 fa6b 	bl	8011398 <rclc_executor_handle_init>
 8010ec2:	42a6      	cmp	r6, r4
 8010ec4:	d1f6      	bne.n	8010eb4 <rclc_executor_init+0x7c>
 8010ec6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8010eca:	f000 fa5b 	bl	8011384 <rclc_executor_handle_counters_zero_init>
 8010ece:	4a11      	ldr	r2, [pc, #68]	@ (8010f14 <rclc_executor_init+0xdc>)
 8010ed0:	686b      	ldr	r3, [r5, #4]
 8010ed2:	2000      	movs	r0, #0
 8010ed4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8010ed8:	b163      	cbz	r3, 8010ef4 <rclc_executor_init+0xbc>
 8010eda:	692b      	ldr	r3, [r5, #16]
 8010edc:	b153      	cbz	r3, 8010ef4 <rclc_executor_init+0xbc>
 8010ede:	68ab      	ldr	r3, [r5, #8]
 8010ee0:	b143      	cbz	r3, 8010ef4 <rclc_executor_init+0xbc>
 8010ee2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8010ee6:	b030      	add	sp, #192	@ 0xc0
 8010ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eec:	200b      	movs	r0, #11
 8010eee:	b030      	add	sp, #192	@ 0xc0
 8010ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	b030      	add	sp, #192	@ 0xc0
 8010ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010efc:	200b      	movs	r0, #11
 8010efe:	4770      	bx	lr
 8010f00:	200a      	movs	r0, #10
 8010f02:	e7f4      	b.n	8010eee <rclc_executor_init+0xb6>
 8010f04:	f3af 8000 	nop.w
 8010f08:	3b9aca00 	.word	0x3b9aca00
 8010f0c:	00000000 	.word	0x00000000
 8010f10:	0801da38 	.word	0x0801da38
 8010f14:	08010da9 	.word	0x08010da9

08010f18 <rclc_executor_add_subscription>:
 8010f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1a:	f89d e018 	ldrb.w	lr, [sp, #24]
 8010f1e:	b338      	cbz	r0, 8010f70 <rclc_executor_add_subscription+0x58>
 8010f20:	b331      	cbz	r1, 8010f70 <rclc_executor_add_subscription+0x58>
 8010f22:	b32a      	cbz	r2, 8010f70 <rclc_executor_add_subscription+0x58>
 8010f24:	b323      	cbz	r3, 8010f70 <rclc_executor_add_subscription+0x58>
 8010f26:	4604      	mov	r4, r0
 8010f28:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8010f2c:	42a8      	cmp	r0, r5
 8010f2e:	d301      	bcc.n	8010f34 <rclc_executor_add_subscription+0x1c>
 8010f30:	2001      	movs	r0, #1
 8010f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f34:	6866      	ldr	r6, [r4, #4]
 8010f36:	0187      	lsls	r7, r0, #6
 8010f38:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8010f3c:	2500      	movs	r5, #0
 8010f3e:	55f5      	strb	r5, [r6, r7]
 8010f40:	3001      	adds	r0, #1
 8010f42:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8010f46:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8010f4a:	2301      	movs	r3, #1
 8010f4c:	f104 0514 	add.w	r5, r4, #20
 8010f50:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8010f54:	f88c e001 	strb.w	lr, [ip, #1]
 8010f58:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8010f5c:	60e0      	str	r0, [r4, #12]
 8010f5e:	4628      	mov	r0, r5
 8010f60:	f005 f98a 	bl	8016278 <rcl_wait_set_is_valid>
 8010f64:	b930      	cbnz	r0, 8010f74 <rclc_executor_add_subscription+0x5c>
 8010f66:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8010f68:	3301      	adds	r3, #1
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8010f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f70:	200b      	movs	r0, #11
 8010f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f74:	4628      	mov	r0, r5
 8010f76:	f005 f985 	bl	8016284 <rcl_wait_set_fini>
 8010f7a:	2800      	cmp	r0, #0
 8010f7c:	d0f3      	beq.n	8010f66 <rclc_executor_add_subscription+0x4e>
 8010f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f80 <rclc_executor_prepare>:
 8010f80:	2800      	cmp	r0, #0
 8010f82:	d044      	beq.n	801100e <rclc_executor_prepare+0x8e>
 8010f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f86:	f100 0514 	add.w	r5, r0, #20
 8010f8a:	b09b      	sub	sp, #108	@ 0x6c
 8010f8c:	4604      	mov	r4, r0
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f005 f972 	bl	8016278 <rcl_wait_set_is_valid>
 8010f94:	b110      	cbz	r0, 8010f9c <rclc_executor_prepare+0x1c>
 8010f96:	2000      	movs	r0, #0
 8010f98:	b01b      	add	sp, #108	@ 0x6c
 8010f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f005 f971 	bl	8016284 <rcl_wait_set_fini>
 8010fa2:	2800      	cmp	r0, #0
 8010fa4:	d130      	bne.n	8011008 <rclc_executor_prepare+0x88>
 8010fa6:	a80c      	add	r0, sp, #48	@ 0x30
 8010fa8:	f005 f952 	bl	8016250 <rcl_get_zero_initialized_wait_set>
 8010fac:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010fb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010fb4:	46ae      	mov	lr, r5
 8010fb6:	6927      	ldr	r7, [r4, #16]
 8010fb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010fbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010fc0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010fc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010fc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010fcc:	f8dc 3000 	ldr.w	r3, [ip]
 8010fd0:	f8ce 3000 	str.w	r3, [lr]
 8010fd4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010fd6:	ae04      	add	r6, sp, #16
 8010fd8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	6822      	ldr	r2, [r4, #0]
 8010fde:	6033      	str	r3, [r6, #0]
 8010fe0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010fe2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8010fe4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010fe8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8010fec:	e9cd 2100 	strd	r2, r1, [sp]
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8010ff4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010ff6:	f005 fc43 	bl	8016880 <rcl_wait_set_init>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	d0cc      	beq.n	8010f98 <rclc_executor_prepare+0x18>
 8010ffe:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011000:	f000 fb36 	bl	8011670 <rcutils_reset_error>
 8011004:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011006:	e7c7      	b.n	8010f98 <rclc_executor_prepare+0x18>
 8011008:	f000 fb32 	bl	8011670 <rcutils_reset_error>
 801100c:	e7cb      	b.n	8010fa6 <rclc_executor_prepare+0x26>
 801100e:	200b      	movs	r0, #11
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop

08011014 <rclc_executor_spin_some.part.0>:
 8011014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011018:	f100 0614 	add.w	r6, r0, #20
 801101c:	b083      	sub	sp, #12
 801101e:	4691      	mov	r9, r2
 8011020:	4698      	mov	r8, r3
 8011022:	4605      	mov	r5, r0
 8011024:	f7ff ffac 	bl	8010f80 <rclc_executor_prepare>
 8011028:	4630      	mov	r0, r6
 801102a:	f005 f9f7 	bl	801641c <rcl_wait_set_clear>
 801102e:	4607      	mov	r7, r0
 8011030:	2800      	cmp	r0, #0
 8011032:	f040 80ed 	bne.w	8011210 <rclc_executor_spin_some.part.0+0x1fc>
 8011036:	68ab      	ldr	r3, [r5, #8]
 8011038:	4604      	mov	r4, r0
 801103a:	b303      	cbz	r3, 801107e <rclc_executor_spin_some.part.0+0x6a>
 801103c:	6869      	ldr	r1, [r5, #4]
 801103e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8011042:	01a2      	lsls	r2, r4, #6
 8011044:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8011048:	b1cb      	cbz	r3, 801107e <rclc_executor_spin_some.part.0+0x6a>
 801104a:	5c8b      	ldrb	r3, [r1, r2]
 801104c:	2b0a      	cmp	r3, #10
 801104e:	f200 80d8 	bhi.w	8011202 <rclc_executor_spin_some.part.0+0x1ee>
 8011052:	e8df f003 	tbb	[pc, r3]
 8011056:	9c9c      	.short	0x9c9c
 8011058:	068c8ca7 	.word	0x068c8ca7
 801105c:	bdc90606 	.word	0xbdc90606
 8011060:	b2          	.byte	0xb2
 8011061:	00          	.byte	0x00
 8011062:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011066:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801106a:	4630      	mov	r0, r6
 801106c:	f005 fd1e 	bl	8016aac <rcl_wait_set_add_service>
 8011070:	2800      	cmp	r0, #0
 8011072:	f040 8086 	bne.w	8011182 <rclc_executor_spin_some.part.0+0x16e>
 8011076:	68ab      	ldr	r3, [r5, #8]
 8011078:	3401      	adds	r4, #1
 801107a:	429c      	cmp	r4, r3
 801107c:	d3de      	bcc.n	801103c <rclc_executor_spin_some.part.0+0x28>
 801107e:	4643      	mov	r3, r8
 8011080:	464a      	mov	r2, r9
 8011082:	4630      	mov	r0, r6
 8011084:	f005 fd40 	bl	8016b08 <rcl_wait>
 8011088:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 801108c:	2b00      	cmp	r3, #0
 801108e:	f000 80c7 	beq.w	8011220 <rclc_executor_spin_some.part.0+0x20c>
 8011092:	2b01      	cmp	r3, #1
 8011094:	f040 80b5 	bne.w	8011202 <rclc_executor_spin_some.part.0+0x1ee>
 8011098:	68ab      	ldr	r3, [r5, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	f000 8159 	beq.w	8011352 <rclc_executor_spin_some.part.0+0x33e>
 80110a0:	2400      	movs	r4, #0
 80110a2:	46a0      	mov	r8, r4
 80110a4:	f240 1991 	movw	r9, #401	@ 0x191
 80110a8:	e00a      	b.n	80110c0 <rclc_executor_spin_some.part.0+0xac>
 80110aa:	f7ff fb7b 	bl	80107a4 <_rclc_check_for_new_data>
 80110ae:	4604      	mov	r4, r0
 80110b0:	b110      	cbz	r0, 80110b8 <rclc_executor_spin_some.part.0+0xa4>
 80110b2:	4548      	cmp	r0, r9
 80110b4:	f040 80b2 	bne.w	801121c <rclc_executor_spin_some.part.0+0x208>
 80110b8:	68ab      	ldr	r3, [r5, #8]
 80110ba:	4598      	cmp	r8, r3
 80110bc:	f080 8126 	bcs.w	801130c <rclc_executor_spin_some.part.0+0x2f8>
 80110c0:	686a      	ldr	r2, [r5, #4]
 80110c2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80110c6:	4631      	mov	r1, r6
 80110c8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80110cc:	f108 0801 	add.w	r8, r8, #1
 80110d0:	f1bc 0f00 	cmp.w	ip, #0
 80110d4:	d1e9      	bne.n	80110aa <rclc_executor_spin_some.part.0+0x96>
 80110d6:	4619      	mov	r1, r3
 80110d8:	4610      	mov	r0, r2
 80110da:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80110de:	4798      	blx	r3
 80110e0:	2800      	cmp	r0, #0
 80110e2:	f000 809b 	beq.w	801121c <rclc_executor_spin_some.part.0+0x208>
 80110e6:	68ab      	ldr	r3, [r5, #8]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f000 8097 	beq.w	801121c <rclc_executor_spin_some.part.0+0x208>
 80110ee:	f04f 0800 	mov.w	r8, #0
 80110f2:	f240 1991 	movw	r9, #401	@ 0x191
 80110f6:	e009      	b.n	801110c <rclc_executor_spin_some.part.0+0xf8>
 80110f8:	f7ff fba2 	bl	8010840 <_rclc_take_new_data>
 80110fc:	4604      	mov	r4, r0
 80110fe:	b110      	cbz	r0, 8011106 <rclc_executor_spin_some.part.0+0xf2>
 8011100:	4548      	cmp	r0, r9
 8011102:	f040 808b 	bne.w	801121c <rclc_executor_spin_some.part.0+0x208>
 8011106:	68ab      	ldr	r3, [r5, #8]
 8011108:	4598      	cmp	r8, r3
 801110a:	d209      	bcs.n	8011120 <rclc_executor_spin_some.part.0+0x10c>
 801110c:	6868      	ldr	r0, [r5, #4]
 801110e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8011112:	4631      	mov	r1, r6
 8011114:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8011118:	f108 0801 	add.w	r8, r8, #1
 801111c:	2a00      	cmp	r2, #0
 801111e:	d1eb      	bne.n	80110f8 <rclc_executor_spin_some.part.0+0xe4>
 8011120:	2600      	movs	r6, #0
 8011122:	b97b      	cbnz	r3, 8011144 <rclc_executor_spin_some.part.0+0x130>
 8011124:	e07a      	b.n	801121c <rclc_executor_spin_some.part.0+0x208>
 8011126:	f812 200c 	ldrb.w	r2, [r2, ip]
 801112a:	2a08      	cmp	r2, #8
 801112c:	f000 80fd 	beq.w	801132a <rclc_executor_spin_some.part.0+0x316>
 8011130:	2a09      	cmp	r2, #9
 8011132:	f000 80ef 	beq.w	8011314 <rclc_executor_spin_some.part.0+0x300>
 8011136:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 801113a:	b98a      	cbnz	r2, 8011160 <rclc_executor_spin_some.part.0+0x14c>
 801113c:	3601      	adds	r6, #1
 801113e:	429e      	cmp	r6, r3
 8011140:	d262      	bcs.n	8011208 <rclc_executor_spin_some.part.0+0x1f4>
 8011142:	2400      	movs	r4, #0
 8011144:	686a      	ldr	r2, [r5, #4]
 8011146:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801114a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 801114e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8011152:	2900      	cmp	r1, #0
 8011154:	d062      	beq.n	801121c <rclc_executor_spin_some.part.0+0x208>
 8011156:	7841      	ldrb	r1, [r0, #1]
 8011158:	2900      	cmp	r1, #0
 801115a:	d0e4      	beq.n	8011126 <rclc_executor_spin_some.part.0+0x112>
 801115c:	2901      	cmp	r1, #1
 801115e:	d1ed      	bne.n	801113c <rclc_executor_spin_some.part.0+0x128>
 8011160:	f7ff fce2 	bl	8010b28 <_rclc_execute.part.0>
 8011164:	2800      	cmp	r0, #0
 8011166:	f040 80b6 	bne.w	80112d6 <rclc_executor_spin_some.part.0+0x2c2>
 801116a:	68ab      	ldr	r3, [r5, #8]
 801116c:	e7e6      	b.n	801113c <rclc_executor_spin_some.part.0+0x128>
 801116e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011172:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011176:	4630      	mov	r0, r6
 8011178:	f005 fc6c 	bl	8016a54 <rcl_wait_set_add_client>
 801117c:	2800      	cmp	r0, #0
 801117e:	f43f af7a 	beq.w	8011076 <rclc_executor_spin_some.part.0+0x62>
 8011182:	9001      	str	r0, [sp, #4]
 8011184:	f000 fa74 	bl	8011670 <rcutils_reset_error>
 8011188:	9801      	ldr	r0, [sp, #4]
 801118a:	4607      	mov	r7, r0
 801118c:	e03c      	b.n	8011208 <rclc_executor_spin_some.part.0+0x1f4>
 801118e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011192:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011196:	4630      	mov	r0, r6
 8011198:	f005 f914 	bl	80163c4 <rcl_wait_set_add_subscription>
 801119c:	2800      	cmp	r0, #0
 801119e:	f43f af6a 	beq.w	8011076 <rclc_executor_spin_some.part.0+0x62>
 80111a2:	e7ee      	b.n	8011182 <rclc_executor_spin_some.part.0+0x16e>
 80111a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80111a8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80111ac:	4630      	mov	r0, r6
 80111ae:	f005 fc21 	bl	80169f4 <rcl_wait_set_add_timer>
 80111b2:	2800      	cmp	r0, #0
 80111b4:	f43f af5f 	beq.w	8011076 <rclc_executor_spin_some.part.0+0x62>
 80111b8:	e7e3      	b.n	8011182 <rclc_executor_spin_some.part.0+0x16e>
 80111ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80111be:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80111c2:	4630      	mov	r0, r6
 80111c4:	f005 fbea 	bl	801699c <rcl_wait_set_add_guard_condition>
 80111c8:	2800      	cmp	r0, #0
 80111ca:	f43f af54 	beq.w	8011076 <rclc_executor_spin_some.part.0+0x62>
 80111ce:	e7d8      	b.n	8011182 <rclc_executor_spin_some.part.0+0x16e>
 80111d0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80111d4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80111d8:	3110      	adds	r1, #16
 80111da:	4630      	mov	r0, r6
 80111dc:	f006 f96c 	bl	80174b8 <rcl_action_wait_set_add_action_server>
 80111e0:	2800      	cmp	r0, #0
 80111e2:	f43f af48 	beq.w	8011076 <rclc_executor_spin_some.part.0+0x62>
 80111e6:	e7cc      	b.n	8011182 <rclc_executor_spin_some.part.0+0x16e>
 80111e8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80111ec:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80111f0:	3110      	adds	r1, #16
 80111f2:	2300      	movs	r3, #0
 80111f4:	4630      	mov	r0, r6
 80111f6:	f005 ff37 	bl	8017068 <rcl_action_wait_set_add_action_client>
 80111fa:	2800      	cmp	r0, #0
 80111fc:	f43f af3b 	beq.w	8011076 <rclc_executor_spin_some.part.0+0x62>
 8011200:	e7bf      	b.n	8011182 <rclc_executor_spin_some.part.0+0x16e>
 8011202:	f000 fa35 	bl	8011670 <rcutils_reset_error>
 8011206:	2701      	movs	r7, #1
 8011208:	4638      	mov	r0, r7
 801120a:	b003      	add	sp, #12
 801120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011210:	f000 fa2e 	bl	8011670 <rcutils_reset_error>
 8011214:	4638      	mov	r0, r7
 8011216:	b003      	add	sp, #12
 8011218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801121c:	4627      	mov	r7, r4
 801121e:	e7f3      	b.n	8011208 <rclc_executor_spin_some.part.0+0x1f4>
 8011220:	68ab      	ldr	r3, [r5, #8]
 8011222:	2b00      	cmp	r3, #0
 8011224:	f000 8092 	beq.w	801134c <rclc_executor_spin_some.part.0+0x338>
 8011228:	2400      	movs	r4, #0
 801122a:	46a0      	mov	r8, r4
 801122c:	f240 1991 	movw	r9, #401	@ 0x191
 8011230:	e008      	b.n	8011244 <rclc_executor_spin_some.part.0+0x230>
 8011232:	f7ff fab7 	bl	80107a4 <_rclc_check_for_new_data>
 8011236:	4604      	mov	r4, r0
 8011238:	b108      	cbz	r0, 801123e <rclc_executor_spin_some.part.0+0x22a>
 801123a:	4548      	cmp	r0, r9
 801123c:	d1ee      	bne.n	801121c <rclc_executor_spin_some.part.0+0x208>
 801123e:	68ab      	ldr	r3, [r5, #8]
 8011240:	4598      	cmp	r8, r3
 8011242:	d265      	bcs.n	8011310 <rclc_executor_spin_some.part.0+0x2fc>
 8011244:	686a      	ldr	r2, [r5, #4]
 8011246:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801124a:	4631      	mov	r1, r6
 801124c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8011250:	f108 0801 	add.w	r8, r8, #1
 8011254:	f1bc 0f00 	cmp.w	ip, #0
 8011258:	d1eb      	bne.n	8011232 <rclc_executor_spin_some.part.0+0x21e>
 801125a:	4619      	mov	r1, r3
 801125c:	4610      	mov	r0, r2
 801125e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8011262:	4798      	blx	r3
 8011264:	2800      	cmp	r0, #0
 8011266:	d0d9      	beq.n	801121c <rclc_executor_spin_some.part.0+0x208>
 8011268:	68ab      	ldr	r3, [r5, #8]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d0d6      	beq.n	801121c <rclc_executor_spin_some.part.0+0x208>
 801126e:	f04f 0800 	mov.w	r8, #0
 8011272:	f240 1991 	movw	r9, #401	@ 0x191
 8011276:	f240 2a59 	movw	sl, #601	@ 0x259
 801127a:	e00e      	b.n	801129a <rclc_executor_spin_some.part.0+0x286>
 801127c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8011280:	2b08      	cmp	r3, #8
 8011282:	d033      	beq.n	80112ec <rclc_executor_spin_some.part.0+0x2d8>
 8011284:	2b09      	cmp	r3, #9
 8011286:	d028      	beq.n	80112da <rclc_executor_spin_some.part.0+0x2c6>
 8011288:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 801128c:	b9fb      	cbnz	r3, 80112ce <rclc_executor_spin_some.part.0+0x2ba>
 801128e:	68ab      	ldr	r3, [r5, #8]
 8011290:	f108 0801 	add.w	r8, r8, #1
 8011294:	4598      	cmp	r8, r3
 8011296:	d2b7      	bcs.n	8011208 <rclc_executor_spin_some.part.0+0x1f4>
 8011298:	2400      	movs	r4, #0
 801129a:	6868      	ldr	r0, [r5, #4]
 801129c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80112a0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80112a4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d0b7      	beq.n	801121c <rclc_executor_spin_some.part.0+0x208>
 80112ac:	4631      	mov	r1, r6
 80112ae:	f7ff fac7 	bl	8010840 <_rclc_take_new_data>
 80112b2:	b118      	cbz	r0, 80112bc <rclc_executor_spin_some.part.0+0x2a8>
 80112b4:	4548      	cmp	r0, r9
 80112b6:	d001      	beq.n	80112bc <rclc_executor_spin_some.part.0+0x2a8>
 80112b8:	4550      	cmp	r0, sl
 80112ba:	d10c      	bne.n	80112d6 <rclc_executor_spin_some.part.0+0x2c2>
 80112bc:	686b      	ldr	r3, [r5, #4]
 80112be:	eb13 000b 	adds.w	r0, r3, fp
 80112c2:	d021      	beq.n	8011308 <rclc_executor_spin_some.part.0+0x2f4>
 80112c4:	7842      	ldrb	r2, [r0, #1]
 80112c6:	2a00      	cmp	r2, #0
 80112c8:	d0d8      	beq.n	801127c <rclc_executor_spin_some.part.0+0x268>
 80112ca:	2a01      	cmp	r2, #1
 80112cc:	d1df      	bne.n	801128e <rclc_executor_spin_some.part.0+0x27a>
 80112ce:	f7ff fc2b 	bl	8010b28 <_rclc_execute.part.0>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	d0db      	beq.n	801128e <rclc_executor_spin_some.part.0+0x27a>
 80112d6:	4607      	mov	r7, r0
 80112d8:	e796      	b.n	8011208 <rclc_executor_spin_some.part.0+0x1f4>
 80112da:	6843      	ldr	r3, [r0, #4]
 80112dc:	6a1a      	ldr	r2, [r3, #32]
 80112de:	2a00      	cmp	r2, #0
 80112e0:	d1f5      	bne.n	80112ce <rclc_executor_spin_some.part.0+0x2ba>
 80112e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d0d1      	beq.n	801128e <rclc_executor_spin_some.part.0+0x27a>
 80112ea:	e7f0      	b.n	80112ce <rclc_executor_spin_some.part.0+0x2ba>
 80112ec:	6843      	ldr	r3, [r0, #4]
 80112ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80112f0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80112f4:	d1eb      	bne.n	80112ce <rclc_executor_spin_some.part.0+0x2ba>
 80112f6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80112fa:	2a00      	cmp	r2, #0
 80112fc:	d1e7      	bne.n	80112ce <rclc_executor_spin_some.part.0+0x2ba>
 80112fe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0c3      	beq.n	801128e <rclc_executor_spin_some.part.0+0x27a>
 8011306:	e7e2      	b.n	80112ce <rclc_executor_spin_some.part.0+0x2ba>
 8011308:	270b      	movs	r7, #11
 801130a:	e77d      	b.n	8011208 <rclc_executor_spin_some.part.0+0x1f4>
 801130c:	686a      	ldr	r2, [r5, #4]
 801130e:	e6e2      	b.n	80110d6 <rclc_executor_spin_some.part.0+0xc2>
 8011310:	686a      	ldr	r2, [r5, #4]
 8011312:	e7a2      	b.n	801125a <rclc_executor_spin_some.part.0+0x246>
 8011314:	6842      	ldr	r2, [r0, #4]
 8011316:	6a11      	ldr	r1, [r2, #32]
 8011318:	2900      	cmp	r1, #0
 801131a:	f47f af21 	bne.w	8011160 <rclc_executor_spin_some.part.0+0x14c>
 801131e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8011322:	2a00      	cmp	r2, #0
 8011324:	f43f af0a 	beq.w	801113c <rclc_executor_spin_some.part.0+0x128>
 8011328:	e71a      	b.n	8011160 <rclc_executor_spin_some.part.0+0x14c>
 801132a:	6842      	ldr	r2, [r0, #4]
 801132c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801132e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8011332:	f47f af15 	bne.w	8011160 <rclc_executor_spin_some.part.0+0x14c>
 8011336:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 801133a:	2900      	cmp	r1, #0
 801133c:	f47f af10 	bne.w	8011160 <rclc_executor_spin_some.part.0+0x14c>
 8011340:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8011344:	2a00      	cmp	r2, #0
 8011346:	f43f aef9 	beq.w	801113c <rclc_executor_spin_some.part.0+0x128>
 801134a:	e709      	b.n	8011160 <rclc_executor_spin_some.part.0+0x14c>
 801134c:	686a      	ldr	r2, [r5, #4]
 801134e:	461c      	mov	r4, r3
 8011350:	e783      	b.n	801125a <rclc_executor_spin_some.part.0+0x246>
 8011352:	686a      	ldr	r2, [r5, #4]
 8011354:	461c      	mov	r4, r3
 8011356:	e6be      	b.n	80110d6 <rclc_executor_spin_some.part.0+0xc2>

08011358 <rclc_executor_spin_some>:
 8011358:	b190      	cbz	r0, 8011380 <rclc_executor_spin_some+0x28>
 801135a:	b570      	push	{r4, r5, r6, lr}
 801135c:	4604      	mov	r4, r0
 801135e:	6800      	ldr	r0, [r0, #0]
 8011360:	4616      	mov	r6, r2
 8011362:	461d      	mov	r5, r3
 8011364:	f003 ff64 	bl	8015230 <rcl_context_is_valid>
 8011368:	b130      	cbz	r0, 8011378 <rclc_executor_spin_some+0x20>
 801136a:	4632      	mov	r2, r6
 801136c:	462b      	mov	r3, r5
 801136e:	4620      	mov	r0, r4
 8011370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011374:	f7ff be4e 	b.w	8011014 <rclc_executor_spin_some.part.0>
 8011378:	f000 f97a 	bl	8011670 <rcutils_reset_error>
 801137c:	2001      	movs	r0, #1
 801137e:	bd70      	pop	{r4, r5, r6, pc}
 8011380:	200b      	movs	r0, #11
 8011382:	4770      	bx	lr

08011384 <rclc_executor_handle_counters_zero_init>:
 8011384:	b130      	cbz	r0, 8011394 <rclc_executor_handle_counters_zero_init+0x10>
 8011386:	b508      	push	{r3, lr}
 8011388:	2220      	movs	r2, #32
 801138a:	2100      	movs	r1, #0
 801138c:	f00a ff52 	bl	801c234 <memset>
 8011390:	2000      	movs	r0, #0
 8011392:	bd08      	pop	{r3, pc}
 8011394:	200b      	movs	r0, #11
 8011396:	4770      	bx	lr

08011398 <rclc_executor_handle_init>:
 8011398:	b168      	cbz	r0, 80113b6 <rclc_executor_handle_init+0x1e>
 801139a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80113c0 <rclc_executor_handle_init+0x28>
 801139e:	2300      	movs	r3, #0
 80113a0:	220b      	movs	r2, #11
 80113a2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 80113a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80113aa:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 80113ae:	8002      	strh	r2, [r0, #0]
 80113b0:	8703      	strh	r3, [r0, #56]	@ 0x38
 80113b2:	4618      	mov	r0, r3
 80113b4:	4770      	bx	lr
 80113b6:	200b      	movs	r0, #11
 80113b8:	4770      	bx	lr
 80113ba:	bf00      	nop
 80113bc:	f3af 8000 	nop.w
	...

080113c8 <rclc_support_init>:
 80113c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113cc:	b086      	sub	sp, #24
 80113ce:	b3b8      	cbz	r0, 8011440 <rclc_support_init+0x78>
 80113d0:	461c      	mov	r4, r3
 80113d2:	b3ab      	cbz	r3, 8011440 <rclc_support_init+0x78>
 80113d4:	460f      	mov	r7, r1
 80113d6:	4690      	mov	r8, r2
 80113d8:	4606      	mov	r6, r0
 80113da:	f004 f87d 	bl	80154d8 <rcl_get_zero_initialized_init_options>
 80113de:	f104 030c 	add.w	r3, r4, #12
 80113e2:	9005      	str	r0, [sp, #20]
 80113e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80113e8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80113ec:	a805      	add	r0, sp, #20
 80113ee:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80113f2:	f004 f873 	bl	80154dc <rcl_init_options_init>
 80113f6:	4605      	mov	r5, r0
 80113f8:	b9e0      	cbnz	r0, 8011434 <rclc_support_init+0x6c>
 80113fa:	ad02      	add	r5, sp, #8
 80113fc:	4628      	mov	r0, r5
 80113fe:	f003 ff0d 	bl	801521c <rcl_get_zero_initialized_context>
 8011402:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011406:	4633      	mov	r3, r6
 8011408:	e886 0003 	stmia.w	r6, {r0, r1}
 801140c:	aa05      	add	r2, sp, #20
 801140e:	4641      	mov	r1, r8
 8011410:	4638      	mov	r0, r7
 8011412:	f003 ff73 	bl	80152fc <rcl_init>
 8011416:	4605      	mov	r5, r0
 8011418:	b9b8      	cbnz	r0, 801144a <rclc_support_init+0x82>
 801141a:	60b4      	str	r4, [r6, #8]
 801141c:	4622      	mov	r2, r4
 801141e:	f106 010c 	add.w	r1, r6, #12
 8011422:	2003      	movs	r0, #3
 8011424:	f004 fd88 	bl	8015f38 <rcl_clock_init>
 8011428:	4605      	mov	r5, r0
 801142a:	b970      	cbnz	r0, 801144a <rclc_support_init+0x82>
 801142c:	a805      	add	r0, sp, #20
 801142e:	f004 f8bb 	bl	80155a8 <rcl_init_options_fini>
 8011432:	b108      	cbz	r0, 8011438 <rclc_support_init+0x70>
 8011434:	f000 f91c 	bl	8011670 <rcutils_reset_error>
 8011438:	4628      	mov	r0, r5
 801143a:	b006      	add	sp, #24
 801143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011440:	250b      	movs	r5, #11
 8011442:	4628      	mov	r0, r5
 8011444:	b006      	add	sp, #24
 8011446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801144a:	f000 f911 	bl	8011670 <rcutils_reset_error>
 801144e:	a805      	add	r0, sp, #20
 8011450:	f004 f8aa 	bl	80155a8 <rcl_init_options_fini>
 8011454:	2800      	cmp	r0, #0
 8011456:	d0ef      	beq.n	8011438 <rclc_support_init+0x70>
 8011458:	e7ec      	b.n	8011434 <rclc_support_init+0x6c>
 801145a:	bf00      	nop

0801145c <rclc_node_init_default>:
 801145c:	b3b8      	cbz	r0, 80114ce <rclc_node_init_default+0x72>
 801145e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011462:	460d      	mov	r5, r1
 8011464:	b0a1      	sub	sp, #132	@ 0x84
 8011466:	b329      	cbz	r1, 80114b4 <rclc_node_init_default+0x58>
 8011468:	4616      	mov	r6, r2
 801146a:	b31a      	cbz	r2, 80114b4 <rclc_node_init_default+0x58>
 801146c:	461f      	mov	r7, r3
 801146e:	b30b      	cbz	r3, 80114b4 <rclc_node_init_default+0x58>
 8011470:	f10d 0810 	add.w	r8, sp, #16
 8011474:	4604      	mov	r4, r0
 8011476:	4640      	mov	r0, r8
 8011478:	f004 f94e 	bl	8015718 <rcl_get_zero_initialized_node>
 801147c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8011480:	f10d 0918 	add.w	r9, sp, #24
 8011484:	e884 0003 	stmia.w	r4, {r0, r1}
 8011488:	4648      	mov	r0, r9
 801148a:	f004 fabd 	bl	8015a08 <rcl_node_get_default_options>
 801148e:	4640      	mov	r0, r8
 8011490:	f004 f942 	bl	8015718 <rcl_get_zero_initialized_node>
 8011494:	f8cd 9000 	str.w	r9, [sp]
 8011498:	e898 0003 	ldmia.w	r8, {r0, r1}
 801149c:	463b      	mov	r3, r7
 801149e:	e884 0003 	stmia.w	r4, {r0, r1}
 80114a2:	4632      	mov	r2, r6
 80114a4:	4629      	mov	r1, r5
 80114a6:	4620      	mov	r0, r4
 80114a8:	f004 f940 	bl	801572c <rcl_node_init>
 80114ac:	b930      	cbnz	r0, 80114bc <rclc_node_init_default+0x60>
 80114ae:	b021      	add	sp, #132	@ 0x84
 80114b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114b4:	200b      	movs	r0, #11
 80114b6:	b021      	add	sp, #132	@ 0x84
 80114b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114bc:	9003      	str	r0, [sp, #12]
 80114be:	f000 f8d7 	bl	8011670 <rcutils_reset_error>
 80114c2:	f000 f8d5 	bl	8011670 <rcutils_reset_error>
 80114c6:	9803      	ldr	r0, [sp, #12]
 80114c8:	b021      	add	sp, #132	@ 0x84
 80114ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114ce:	200b      	movs	r0, #11
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop

080114d4 <rclc_publisher_init_default>:
 80114d4:	b368      	cbz	r0, 8011532 <rclc_publisher_init_default+0x5e>
 80114d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114da:	460d      	mov	r5, r1
 80114dc:	b0a0      	sub	sp, #128	@ 0x80
 80114de:	b321      	cbz	r1, 801152a <rclc_publisher_init_default+0x56>
 80114e0:	4616      	mov	r6, r2
 80114e2:	b312      	cbz	r2, 801152a <rclc_publisher_init_default+0x56>
 80114e4:	461f      	mov	r7, r3
 80114e6:	b303      	cbz	r3, 801152a <rclc_publisher_init_default+0x56>
 80114e8:	4604      	mov	r4, r0
 80114ea:	f7ff f84b 	bl	8010584 <rcl_get_zero_initialized_publisher>
 80114ee:	f10d 0810 	add.w	r8, sp, #16
 80114f2:	6020      	str	r0, [r4, #0]
 80114f4:	4640      	mov	r0, r8
 80114f6:	f7ff f8e1 	bl	80106bc <rcl_publisher_get_default_options>
 80114fa:	490f      	ldr	r1, [pc, #60]	@ (8011538 <rclc_publisher_init_default+0x64>)
 80114fc:	2250      	movs	r2, #80	@ 0x50
 80114fe:	4640      	mov	r0, r8
 8011500:	f00a ff61 	bl	801c3c6 <memcpy>
 8011504:	f8cd 8000 	str.w	r8, [sp]
 8011508:	463b      	mov	r3, r7
 801150a:	4632      	mov	r2, r6
 801150c:	4629      	mov	r1, r5
 801150e:	4620      	mov	r0, r4
 8011510:	f7ff f83e 	bl	8010590 <rcl_publisher_init>
 8011514:	b910      	cbnz	r0, 801151c <rclc_publisher_init_default+0x48>
 8011516:	b020      	add	sp, #128	@ 0x80
 8011518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801151c:	9003      	str	r0, [sp, #12]
 801151e:	f000 f8a7 	bl	8011670 <rcutils_reset_error>
 8011522:	9803      	ldr	r0, [sp, #12]
 8011524:	b020      	add	sp, #128	@ 0x80
 8011526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801152a:	200b      	movs	r0, #11
 801152c:	b020      	add	sp, #128	@ 0x80
 801152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011532:	200b      	movs	r0, #11
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	0801dac0 	.word	0x0801dac0

0801153c <rclc_subscription_init_default>:
 801153c:	b368      	cbz	r0, 801159a <rclc_subscription_init_default+0x5e>
 801153e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011542:	460d      	mov	r5, r1
 8011544:	b0a0      	sub	sp, #128	@ 0x80
 8011546:	b321      	cbz	r1, 8011592 <rclc_subscription_init_default+0x56>
 8011548:	4616      	mov	r6, r2
 801154a:	b312      	cbz	r2, 8011592 <rclc_subscription_init_default+0x56>
 801154c:	461f      	mov	r7, r3
 801154e:	b303      	cbz	r3, 8011592 <rclc_subscription_init_default+0x56>
 8011550:	4604      	mov	r4, r0
 8011552:	f004 fb95 	bl	8015c80 <rcl_get_zero_initialized_subscription>
 8011556:	f10d 0810 	add.w	r8, sp, #16
 801155a:	6020      	str	r0, [r4, #0]
 801155c:	4640      	mov	r0, r8
 801155e:	f004 fc3d 	bl	8015ddc <rcl_subscription_get_default_options>
 8011562:	490f      	ldr	r1, [pc, #60]	@ (80115a0 <rclc_subscription_init_default+0x64>)
 8011564:	2250      	movs	r2, #80	@ 0x50
 8011566:	4640      	mov	r0, r8
 8011568:	f00a ff2d 	bl	801c3c6 <memcpy>
 801156c:	f8cd 8000 	str.w	r8, [sp]
 8011570:	463b      	mov	r3, r7
 8011572:	4632      	mov	r2, r6
 8011574:	4629      	mov	r1, r5
 8011576:	4620      	mov	r0, r4
 8011578:	f004 fb88 	bl	8015c8c <rcl_subscription_init>
 801157c:	b910      	cbnz	r0, 8011584 <rclc_subscription_init_default+0x48>
 801157e:	b020      	add	sp, #128	@ 0x80
 8011580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011584:	9003      	str	r0, [sp, #12]
 8011586:	f000 f873 	bl	8011670 <rcutils_reset_error>
 801158a:	9803      	ldr	r0, [sp, #12]
 801158c:	b020      	add	sp, #128	@ 0x80
 801158e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011592:	200b      	movs	r0, #11
 8011594:	b020      	add	sp, #128	@ 0x80
 8011596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801159a:	200b      	movs	r0, #11
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	0801db10 	.word	0x0801db10

080115a4 <__default_zero_allocate>:
 80115a4:	f00a ba56 	b.w	801ba54 <calloc>

080115a8 <__default_reallocate>:
 80115a8:	f00a bbe2 	b.w	801bd70 <realloc>

080115ac <__default_deallocate>:
 80115ac:	f00a babe 	b.w	801bb2c <free>

080115b0 <__default_allocate>:
 80115b0:	f00a bab4 	b.w	801bb1c <malloc>

080115b4 <rcutils_get_zero_initialized_allocator>:
 80115b4:	b510      	push	{r4, lr}
 80115b6:	4c05      	ldr	r4, [pc, #20]	@ (80115cc <rcutils_get_zero_initialized_allocator+0x18>)
 80115b8:	4686      	mov	lr, r0
 80115ba:	4684      	mov	ip, r0
 80115bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115c2:	6823      	ldr	r3, [r4, #0]
 80115c4:	f8cc 3000 	str.w	r3, [ip]
 80115c8:	4670      	mov	r0, lr
 80115ca:	bd10      	pop	{r4, pc}
 80115cc:	0801db60 	.word	0x0801db60

080115d0 <rcutils_set_default_allocator>:
 80115d0:	b1a8      	cbz	r0, 80115fe <rcutils_set_default_allocator+0x2e>
 80115d2:	6802      	ldr	r2, [r0, #0]
 80115d4:	b1a2      	cbz	r2, 8011600 <rcutils_set_default_allocator+0x30>
 80115d6:	6841      	ldr	r1, [r0, #4]
 80115d8:	b1a1      	cbz	r1, 8011604 <rcutils_set_default_allocator+0x34>
 80115da:	b410      	push	{r4}
 80115dc:	68c4      	ldr	r4, [r0, #12]
 80115de:	b164      	cbz	r4, 80115fa <rcutils_set_default_allocator+0x2a>
 80115e0:	6880      	ldr	r0, [r0, #8]
 80115e2:	b138      	cbz	r0, 80115f4 <rcutils_set_default_allocator+0x24>
 80115e4:	4b08      	ldr	r3, [pc, #32]	@ (8011608 <rcutils_set_default_allocator+0x38>)
 80115e6:	601a      	str	r2, [r3, #0]
 80115e8:	2200      	movs	r2, #0
 80115ea:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80115ee:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80115f2:	2001      	movs	r0, #1
 80115f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115f8:	4770      	bx	lr
 80115fa:	4620      	mov	r0, r4
 80115fc:	e7fa      	b.n	80115f4 <rcutils_set_default_allocator+0x24>
 80115fe:	4770      	bx	lr
 8011600:	4610      	mov	r0, r2
 8011602:	4770      	bx	lr
 8011604:	4608      	mov	r0, r1
 8011606:	4770      	bx	lr
 8011608:	200001dc 	.word	0x200001dc

0801160c <rcutils_get_default_allocator>:
 801160c:	b510      	push	{r4, lr}
 801160e:	4c05      	ldr	r4, [pc, #20]	@ (8011624 <rcutils_get_default_allocator+0x18>)
 8011610:	4686      	mov	lr, r0
 8011612:	4684      	mov	ip, r0
 8011614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011616:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801161a:	6823      	ldr	r3, [r4, #0]
 801161c:	f8cc 3000 	str.w	r3, [ip]
 8011620:	4670      	mov	r0, lr
 8011622:	bd10      	pop	{r4, pc}
 8011624:	200001dc 	.word	0x200001dc

08011628 <rcutils_allocator_is_valid>:
 8011628:	b158      	cbz	r0, 8011642 <rcutils_allocator_is_valid+0x1a>
 801162a:	6803      	ldr	r3, [r0, #0]
 801162c:	b143      	cbz	r3, 8011640 <rcutils_allocator_is_valid+0x18>
 801162e:	6843      	ldr	r3, [r0, #4]
 8011630:	b133      	cbz	r3, 8011640 <rcutils_allocator_is_valid+0x18>
 8011632:	68c3      	ldr	r3, [r0, #12]
 8011634:	b123      	cbz	r3, 8011640 <rcutils_allocator_is_valid+0x18>
 8011636:	6880      	ldr	r0, [r0, #8]
 8011638:	3800      	subs	r0, #0
 801163a:	bf18      	it	ne
 801163c:	2001      	movne	r0, #1
 801163e:	4770      	bx	lr
 8011640:	4618      	mov	r0, r3
 8011642:	4770      	bx	lr

08011644 <rcutils_get_error_string>:
 8011644:	4b06      	ldr	r3, [pc, #24]	@ (8011660 <rcutils_get_error_string+0x1c>)
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	b13b      	cbz	r3, 801165a <rcutils_get_error_string+0x16>
 801164a:	4b06      	ldr	r3, [pc, #24]	@ (8011664 <rcutils_get_error_string+0x20>)
 801164c:	781a      	ldrb	r2, [r3, #0]
 801164e:	b90a      	cbnz	r2, 8011654 <rcutils_get_error_string+0x10>
 8011650:	2201      	movs	r2, #1
 8011652:	701a      	strb	r2, [r3, #0]
 8011654:	4b04      	ldr	r3, [pc, #16]	@ (8011668 <rcutils_get_error_string+0x24>)
 8011656:	7818      	ldrb	r0, [r3, #0]
 8011658:	4770      	bx	lr
 801165a:	4b04      	ldr	r3, [pc, #16]	@ (801166c <rcutils_get_error_string+0x28>)
 801165c:	7818      	ldrb	r0, [r3, #0]
 801165e:	4770      	bx	lr
 8011660:	20009c10 	.word	0x20009c10
 8011664:	20009c29 	.word	0x20009c29
 8011668:	20009c28 	.word	0x20009c28
 801166c:	0801d410 	.word	0x0801d410

08011670 <rcutils_reset_error>:
 8011670:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8011690 <rcutils_reset_error+0x20>
 8011674:	4a08      	ldr	r2, [pc, #32]	@ (8011698 <rcutils_reset_error+0x28>)
 8011676:	4809      	ldr	r0, [pc, #36]	@ (801169c <rcutils_reset_error+0x2c>)
 8011678:	4909      	ldr	r1, [pc, #36]	@ (80116a0 <rcutils_reset_error+0x30>)
 801167a:	2300      	movs	r3, #0
 801167c:	8013      	strh	r3, [r2, #0]
 801167e:	ed82 7b02 	vstr	d7, [r2, #8]
 8011682:	4a08      	ldr	r2, [pc, #32]	@ (80116a4 <rcutils_reset_error+0x34>)
 8011684:	7003      	strb	r3, [r0, #0]
 8011686:	700b      	strb	r3, [r1, #0]
 8011688:	7013      	strb	r3, [r2, #0]
 801168a:	4770      	bx	lr
 801168c:	f3af 8000 	nop.w
	...
 8011698:	20009c18 	.word	0x20009c18
 801169c:	20009c29 	.word	0x20009c29
 80116a0:	20009c28 	.word	0x20009c28
 80116a4:	20009c10 	.word	0x20009c10

080116a8 <rcutils_system_time_now>:
 80116a8:	b308      	cbz	r0, 80116ee <rcutils_system_time_now+0x46>
 80116aa:	b570      	push	{r4, r5, r6, lr}
 80116ac:	b084      	sub	sp, #16
 80116ae:	4604      	mov	r4, r0
 80116b0:	4669      	mov	r1, sp
 80116b2:	2001      	movs	r0, #1
 80116b4:	f7f0 f864 	bl	8001780 <clock_gettime>
 80116b8:	e9dd 3500 	ldrd	r3, r5, [sp]
 80116bc:	2d00      	cmp	r5, #0
 80116be:	db13      	blt.n	80116e8 <rcutils_system_time_now+0x40>
 80116c0:	9902      	ldr	r1, [sp, #8]
 80116c2:	2900      	cmp	r1, #0
 80116c4:	db0d      	blt.n	80116e2 <rcutils_system_time_now+0x3a>
 80116c6:	4e0b      	ldr	r6, [pc, #44]	@ (80116f4 <rcutils_system_time_now+0x4c>)
 80116c8:	fba3 3206 	umull	r3, r2, r3, r6
 80116cc:	185b      	adds	r3, r3, r1
 80116ce:	fb06 2205 	mla	r2, r6, r5, r2
 80116d2:	f04f 0000 	mov.w	r0, #0
 80116d6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80116da:	e9c4 3200 	strd	r3, r2, [r4]
 80116de:	b004      	add	sp, #16
 80116e0:	bd70      	pop	{r4, r5, r6, pc}
 80116e2:	ea53 0205 	orrs.w	r2, r3, r5
 80116e6:	d1ee      	bne.n	80116c6 <rcutils_system_time_now+0x1e>
 80116e8:	2002      	movs	r0, #2
 80116ea:	b004      	add	sp, #16
 80116ec:	bd70      	pop	{r4, r5, r6, pc}
 80116ee:	200b      	movs	r0, #11
 80116f0:	4770      	bx	lr
 80116f2:	bf00      	nop
 80116f4:	3b9aca00 	.word	0x3b9aca00

080116f8 <rcutils_steady_time_now>:
 80116f8:	b308      	cbz	r0, 801173e <rcutils_steady_time_now+0x46>
 80116fa:	b570      	push	{r4, r5, r6, lr}
 80116fc:	b084      	sub	sp, #16
 80116fe:	4604      	mov	r4, r0
 8011700:	4669      	mov	r1, sp
 8011702:	2000      	movs	r0, #0
 8011704:	f7f0 f83c 	bl	8001780 <clock_gettime>
 8011708:	e9dd 3500 	ldrd	r3, r5, [sp]
 801170c:	2d00      	cmp	r5, #0
 801170e:	db13      	blt.n	8011738 <rcutils_steady_time_now+0x40>
 8011710:	9902      	ldr	r1, [sp, #8]
 8011712:	2900      	cmp	r1, #0
 8011714:	db0d      	blt.n	8011732 <rcutils_steady_time_now+0x3a>
 8011716:	4e0b      	ldr	r6, [pc, #44]	@ (8011744 <rcutils_steady_time_now+0x4c>)
 8011718:	fba3 3206 	umull	r3, r2, r3, r6
 801171c:	185b      	adds	r3, r3, r1
 801171e:	fb06 2205 	mla	r2, r6, r5, r2
 8011722:	f04f 0000 	mov.w	r0, #0
 8011726:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801172a:	e9c4 3200 	strd	r3, r2, [r4]
 801172e:	b004      	add	sp, #16
 8011730:	bd70      	pop	{r4, r5, r6, pc}
 8011732:	ea53 0205 	orrs.w	r2, r3, r5
 8011736:	d1ee      	bne.n	8011716 <rcutils_steady_time_now+0x1e>
 8011738:	2002      	movs	r0, #2
 801173a:	b004      	add	sp, #16
 801173c:	bd70      	pop	{r4, r5, r6, pc}
 801173e:	200b      	movs	r0, #11
 8011740:	4770      	bx	lr
 8011742:	bf00      	nop
 8011744:	3b9aca00 	.word	0x3b9aca00

08011748 <rmw_get_default_publisher_options>:
 8011748:	2200      	movs	r2, #0
 801174a:	6002      	str	r2, [r0, #0]
 801174c:	7102      	strb	r2, [r0, #4]
 801174e:	4770      	bx	lr

08011750 <rmw_uros_set_custom_transport>:
 8011750:	b470      	push	{r4, r5, r6}
 8011752:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8011756:	b162      	cbz	r2, 8011772 <rmw_uros_set_custom_transport+0x22>
 8011758:	b15b      	cbz	r3, 8011772 <rmw_uros_set_custom_transport+0x22>
 801175a:	b155      	cbz	r5, 8011772 <rmw_uros_set_custom_transport+0x22>
 801175c:	b14e      	cbz	r6, 8011772 <rmw_uros_set_custom_transport+0x22>
 801175e:	4c06      	ldr	r4, [pc, #24]	@ (8011778 <rmw_uros_set_custom_transport+0x28>)
 8011760:	7020      	strb	r0, [r4, #0]
 8011762:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8011766:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801176a:	6166      	str	r6, [r4, #20]
 801176c:	2000      	movs	r0, #0
 801176e:	bc70      	pop	{r4, r5, r6}
 8011770:	4770      	bx	lr
 8011772:	200b      	movs	r0, #11
 8011774:	bc70      	pop	{r4, r5, r6}
 8011776:	4770      	bx	lr
 8011778:	20009c2c 	.word	0x20009c2c

0801177c <flush_session>:
 801177c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801177e:	f001 bd37 	b.w	80131f0 <uxr_run_session_until_confirm_delivery>
 8011782:	bf00      	nop

08011784 <rmw_publish>:
 8011784:	2800      	cmp	r0, #0
 8011786:	d053      	beq.n	8011830 <rmw_publish+0xac>
 8011788:	b570      	push	{r4, r5, r6, lr}
 801178a:	460d      	mov	r5, r1
 801178c:	b08e      	sub	sp, #56	@ 0x38
 801178e:	2900      	cmp	r1, #0
 8011790:	d04b      	beq.n	801182a <rmw_publish+0xa6>
 8011792:	4604      	mov	r4, r0
 8011794:	6800      	ldr	r0, [r0, #0]
 8011796:	f000 fced 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 801179a:	2800      	cmp	r0, #0
 801179c:	d045      	beq.n	801182a <rmw_publish+0xa6>
 801179e:	6866      	ldr	r6, [r4, #4]
 80117a0:	2e00      	cmp	r6, #0
 80117a2:	d042      	beq.n	801182a <rmw_publish+0xa6>
 80117a4:	69b4      	ldr	r4, [r6, #24]
 80117a6:	4628      	mov	r0, r5
 80117a8:	6923      	ldr	r3, [r4, #16]
 80117aa:	4798      	blx	r3
 80117ac:	69f3      	ldr	r3, [r6, #28]
 80117ae:	9005      	str	r0, [sp, #20]
 80117b0:	b113      	cbz	r3, 80117b8 <rmw_publish+0x34>
 80117b2:	a805      	add	r0, sp, #20
 80117b4:	4798      	blx	r3
 80117b6:	9805      	ldr	r0, [sp, #20]
 80117b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80117bc:	691b      	ldr	r3, [r3, #16]
 80117be:	9000      	str	r0, [sp, #0]
 80117c0:	6972      	ldr	r2, [r6, #20]
 80117c2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80117c4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80117c8:	ab06      	add	r3, sp, #24
 80117ca:	f002 fafd 	bl	8013dc8 <uxr_prepare_output_stream>
 80117ce:	b1d8      	cbz	r0, 8011808 <rmw_publish+0x84>
 80117d0:	68a3      	ldr	r3, [r4, #8]
 80117d2:	a906      	add	r1, sp, #24
 80117d4:	4628      	mov	r0, r5
 80117d6:	4798      	blx	r3
 80117d8:	6a33      	ldr	r3, [r6, #32]
 80117da:	4604      	mov	r4, r0
 80117dc:	b10b      	cbz	r3, 80117e2 <rmw_publish+0x5e>
 80117de:	a806      	add	r0, sp, #24
 80117e0:	4798      	blx	r3
 80117e2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80117e6:	2b01      	cmp	r3, #1
 80117e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80117ec:	d022      	beq.n	8011834 <rmw_publish+0xb0>
 80117ee:	6918      	ldr	r0, [r3, #16]
 80117f0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80117f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80117f6:	f001 fcfb 	bl	80131f0 <uxr_run_session_until_confirm_delivery>
 80117fa:	4020      	ands	r0, r4
 80117fc:	b2c4      	uxtb	r4, r0
 80117fe:	f084 0001 	eor.w	r0, r4, #1
 8011802:	b2c0      	uxtb	r0, r0
 8011804:	b00e      	add	sp, #56	@ 0x38
 8011806:	bd70      	pop	{r4, r5, r6, pc}
 8011808:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801180c:	6918      	ldr	r0, [r3, #16]
 801180e:	9b05      	ldr	r3, [sp, #20]
 8011810:	9300      	str	r3, [sp, #0]
 8011812:	4b0b      	ldr	r3, [pc, #44]	@ (8011840 <rmw_publish+0xbc>)
 8011814:	9301      	str	r3, [sp, #4]
 8011816:	9602      	str	r6, [sp, #8]
 8011818:	6972      	ldr	r2, [r6, #20]
 801181a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801181c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011820:	ab06      	add	r3, sp, #24
 8011822:	f002 fb01 	bl	8013e28 <uxr_prepare_output_stream_fragmented>
 8011826:	2800      	cmp	r0, #0
 8011828:	d1d2      	bne.n	80117d0 <rmw_publish+0x4c>
 801182a:	2001      	movs	r0, #1
 801182c:	b00e      	add	sp, #56	@ 0x38
 801182e:	bd70      	pop	{r4, r5, r6, pc}
 8011830:	2001      	movs	r0, #1
 8011832:	4770      	bx	lr
 8011834:	6918      	ldr	r0, [r3, #16]
 8011836:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801183a:	f001 f919 	bl	8012a70 <uxr_flash_output_streams>
 801183e:	e7de      	b.n	80117fe <rmw_publish+0x7a>
 8011840:	0801177d 	.word	0x0801177d

08011844 <rmw_create_publisher>:
 8011844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011848:	b087      	sub	sp, #28
 801184a:	2800      	cmp	r0, #0
 801184c:	f000 80cc 	beq.w	80119e8 <rmw_create_publisher+0x1a4>
 8011850:	460e      	mov	r6, r1
 8011852:	2900      	cmp	r1, #0
 8011854:	f000 80c8 	beq.w	80119e8 <rmw_create_publisher+0x1a4>
 8011858:	4604      	mov	r4, r0
 801185a:	6800      	ldr	r0, [r0, #0]
 801185c:	4615      	mov	r5, r2
 801185e:	4698      	mov	r8, r3
 8011860:	f000 fc88 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 8011864:	2800      	cmp	r0, #0
 8011866:	f000 80bf 	beq.w	80119e8 <rmw_create_publisher+0x1a4>
 801186a:	2d00      	cmp	r5, #0
 801186c:	f000 80bc 	beq.w	80119e8 <rmw_create_publisher+0x1a4>
 8011870:	782b      	ldrb	r3, [r5, #0]
 8011872:	2b00      	cmp	r3, #0
 8011874:	f000 80b8 	beq.w	80119e8 <rmw_create_publisher+0x1a4>
 8011878:	f1b8 0f00 	cmp.w	r8, #0
 801187c:	f000 80b4 	beq.w	80119e8 <rmw_create_publisher+0x1a4>
 8011880:	485c      	ldr	r0, [pc, #368]	@ (80119f4 <rmw_create_publisher+0x1b0>)
 8011882:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011886:	f006 fd87 	bl	8018398 <get_memory>
 801188a:	2800      	cmp	r0, #0
 801188c:	f000 80ac 	beq.w	80119e8 <rmw_create_publisher+0x1a4>
 8011890:	6884      	ldr	r4, [r0, #8]
 8011892:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8011896:	f006 fde7 	bl	8018468 <rmw_get_implementation_identifier>
 801189a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801189e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80118a2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80118a6:	4628      	mov	r0, r5
 80118a8:	f7ee fc9c 	bl	80001e4 <strlen>
 80118ac:	3001      	adds	r0, #1
 80118ae:	283c      	cmp	r0, #60	@ 0x3c
 80118b0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80118b4:	f200 8091 	bhi.w	80119da <rmw_create_publisher+0x196>
 80118b8:	4a4f      	ldr	r2, [pc, #316]	@ (80119f8 <rmw_create_publisher+0x1b4>)
 80118ba:	462b      	mov	r3, r5
 80118bc:	213c      	movs	r1, #60	@ 0x3c
 80118be:	4650      	mov	r0, sl
 80118c0:	f00a fbd8 	bl	801c074 <sniprintf>
 80118c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80118c8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80118ca:	4641      	mov	r1, r8
 80118cc:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80118d0:	2250      	movs	r2, #80	@ 0x50
 80118d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80118d6:	f00a fd76 	bl	801c3c6 <memcpy>
 80118da:	f898 3008 	ldrb.w	r3, [r8, #8]
 80118de:	4947      	ldr	r1, [pc, #284]	@ (80119fc <rmw_create_publisher+0x1b8>)
 80118e0:	2b02      	cmp	r3, #2
 80118e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80118e6:	bf0c      	ite	eq
 80118e8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80118ec:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80118f0:	67a3      	str	r3, [r4, #120]	@ 0x78
 80118f2:	2300      	movs	r3, #0
 80118f4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80118f8:	4630      	mov	r0, r6
 80118fa:	f000 fc49 	bl	8012190 <get_message_typesupport_handle>
 80118fe:	2800      	cmp	r0, #0
 8011900:	d06b      	beq.n	80119da <rmw_create_publisher+0x196>
 8011902:	6842      	ldr	r2, [r0, #4]
 8011904:	61a2      	str	r2, [r4, #24]
 8011906:	2a00      	cmp	r2, #0
 8011908:	d067      	beq.n	80119da <rmw_create_publisher+0x196>
 801190a:	4629      	mov	r1, r5
 801190c:	4643      	mov	r3, r8
 801190e:	4648      	mov	r0, r9
 8011910:	f007 f83a 	bl	8018988 <create_topic>
 8011914:	6260      	str	r0, [r4, #36]	@ 0x24
 8011916:	2800      	cmp	r0, #0
 8011918:	d063      	beq.n	80119e2 <rmw_create_publisher+0x19e>
 801191a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801191e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011922:	2103      	movs	r1, #3
 8011924:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8011928:	1c42      	adds	r2, r0, #1
 801192a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801192e:	f000 ff51 	bl	80127d4 <uxr_object_id>
 8011932:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011936:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801193a:	6120      	str	r0, [r4, #16]
 801193c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8011940:	6910      	ldr	r0, [r2, #16]
 8011942:	2506      	movs	r5, #6
 8011944:	9500      	str	r5, [sp, #0]
 8011946:	6819      	ldr	r1, [r3, #0]
 8011948:	6922      	ldr	r2, [r4, #16]
 801194a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801194e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011952:	f000 fdf1 	bl	8012538 <uxr_buffer_create_publisher_bin>
 8011956:	4602      	mov	r2, r0
 8011958:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801195c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011960:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011964:	f000 fb86 	bl	8012074 <run_xrce_session>
 8011968:	b3b8      	cbz	r0, 80119da <rmw_create_publisher+0x196>
 801196a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801196e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011972:	2105      	movs	r1, #5
 8011974:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8011978:	1c42      	adds	r2, r0, #1
 801197a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801197e:	f000 ff29 	bl	80127d4 <uxr_object_id>
 8011982:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011986:	6160      	str	r0, [r4, #20]
 8011988:	691e      	ldr	r6, [r3, #16]
 801198a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801198e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011992:	f10d 0a10 	add.w	sl, sp, #16
 8011996:	4641      	mov	r1, r8
 8011998:	4650      	mov	r0, sl
 801199a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 801199e:	f000 fb85 	bl	80120ac <convert_qos_profile>
 80119a2:	9503      	str	r5, [sp, #12]
 80119a4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80119a8:	9001      	str	r0, [sp, #4]
 80119aa:	f8ad 1008 	strh.w	r1, [sp, #8]
 80119ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 80119b2:	9300      	str	r3, [sp, #0]
 80119b4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80119b8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80119bc:	f8d8 1000 	ldr.w	r1, [r8]
 80119c0:	4630      	mov	r0, r6
 80119c2:	f000 fe19 	bl	80125f8 <uxr_buffer_create_datawriter_bin>
 80119c6:	4602      	mov	r2, r0
 80119c8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80119cc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80119d0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80119d4:	f000 fb4e 	bl	8012074 <run_xrce_session>
 80119d8:	b938      	cbnz	r0, 80119ea <rmw_create_publisher+0x1a6>
 80119da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80119dc:	b108      	cbz	r0, 80119e2 <rmw_create_publisher+0x19e>
 80119de:	f000 fa47 	bl	8011e70 <rmw_uxrce_fini_topic_memory>
 80119e2:	4638      	mov	r0, r7
 80119e4:	f000 f9ec 	bl	8011dc0 <rmw_uxrce_fini_publisher_memory>
 80119e8:	2700      	movs	r7, #0
 80119ea:	4638      	mov	r0, r7
 80119ec:	b007      	add	sp, #28
 80119ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f2:	bf00      	nop
 80119f4:	2000e524 	.word	0x2000e524
 80119f8:	0801d424 	.word	0x0801d424
 80119fc:	0801d3a0 	.word	0x0801d3a0

08011a00 <rmw_publisher_get_actual_qos>:
 8011a00:	b150      	cbz	r0, 8011a18 <rmw_publisher_get_actual_qos+0x18>
 8011a02:	b508      	push	{r3, lr}
 8011a04:	460b      	mov	r3, r1
 8011a06:	b149      	cbz	r1, 8011a1c <rmw_publisher_get_actual_qos+0x1c>
 8011a08:	6841      	ldr	r1, [r0, #4]
 8011a0a:	2250      	movs	r2, #80	@ 0x50
 8011a0c:	3128      	adds	r1, #40	@ 0x28
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f00a fcd9 	bl	801c3c6 <memcpy>
 8011a14:	2000      	movs	r0, #0
 8011a16:	bd08      	pop	{r3, pc}
 8011a18:	200b      	movs	r0, #11
 8011a1a:	4770      	bx	lr
 8011a1c:	200b      	movs	r0, #11
 8011a1e:	bd08      	pop	{r3, pc}

08011a20 <rmw_destroy_publisher>:
 8011a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a22:	b128      	cbz	r0, 8011a30 <rmw_destroy_publisher+0x10>
 8011a24:	4604      	mov	r4, r0
 8011a26:	6800      	ldr	r0, [r0, #0]
 8011a28:	460d      	mov	r5, r1
 8011a2a:	f000 fba3 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 8011a2e:	b910      	cbnz	r0, 8011a36 <rmw_destroy_publisher+0x16>
 8011a30:	2401      	movs	r4, #1
 8011a32:	4620      	mov	r0, r4
 8011a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a36:	6863      	ldr	r3, [r4, #4]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d0f9      	beq.n	8011a30 <rmw_destroy_publisher+0x10>
 8011a3c:	2d00      	cmp	r5, #0
 8011a3e:	d0f7      	beq.n	8011a30 <rmw_destroy_publisher+0x10>
 8011a40:	6828      	ldr	r0, [r5, #0]
 8011a42:	f000 fb97 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	d0f2      	beq.n	8011a30 <rmw_destroy_publisher+0x10>
 8011a4a:	686c      	ldr	r4, [r5, #4]
 8011a4c:	2c00      	cmp	r4, #0
 8011a4e:	d0ef      	beq.n	8011a30 <rmw_destroy_publisher+0x10>
 8011a50:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011a52:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8011a56:	f006 ffe7 	bl	8018a28 <destroy_topic>
 8011a5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011a5e:	6962      	ldr	r2, [r4, #20]
 8011a60:	6918      	ldr	r0, [r3, #16]
 8011a62:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011a66:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011a6a:	6819      	ldr	r1, [r3, #0]
 8011a6c:	f000 fcb0 	bl	80123d0 <uxr_buffer_delete_entity>
 8011a70:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011a74:	6922      	ldr	r2, [r4, #16]
 8011a76:	691b      	ldr	r3, [r3, #16]
 8011a78:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011a7c:	4604      	mov	r4, r0
 8011a7e:	6809      	ldr	r1, [r1, #0]
 8011a80:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011a84:	f000 fca4 	bl	80123d0 <uxr_buffer_delete_entity>
 8011a88:	693e      	ldr	r6, [r7, #16]
 8011a8a:	4622      	mov	r2, r4
 8011a8c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011a90:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011a94:	4604      	mov	r4, r0
 8011a96:	4630      	mov	r0, r6
 8011a98:	f000 faec 	bl	8012074 <run_xrce_session>
 8011a9c:	693e      	ldr	r6, [r7, #16]
 8011a9e:	4622      	mov	r2, r4
 8011aa0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011aa4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011aa8:	4604      	mov	r4, r0
 8011aaa:	4630      	mov	r0, r6
 8011aac:	f000 fae2 	bl	8012074 <run_xrce_session>
 8011ab0:	b12c      	cbz	r4, 8011abe <rmw_destroy_publisher+0x9e>
 8011ab2:	b120      	cbz	r0, 8011abe <rmw_destroy_publisher+0x9e>
 8011ab4:	2400      	movs	r4, #0
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	f000 f982 	bl	8011dc0 <rmw_uxrce_fini_publisher_memory>
 8011abc:	e7b9      	b.n	8011a32 <rmw_destroy_publisher+0x12>
 8011abe:	2402      	movs	r4, #2
 8011ac0:	e7f9      	b.n	8011ab6 <rmw_destroy_publisher+0x96>
 8011ac2:	bf00      	nop

08011ac4 <rmw_uxrce_init_service_memory>:
 8011ac4:	b1e2      	cbz	r2, 8011b00 <rmw_uxrce_init_service_memory+0x3c>
 8011ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aca:	7b05      	ldrb	r5, [r0, #12]
 8011acc:	4606      	mov	r6, r0
 8011ace:	b9ad      	cbnz	r5, 8011afc <rmw_uxrce_init_service_memory+0x38>
 8011ad0:	23c8      	movs	r3, #200	@ 0xc8
 8011ad2:	e9c0 5500 	strd	r5, r5, [r0]
 8011ad6:	6083      	str	r3, [r0, #8]
 8011ad8:	f240 1301 	movw	r3, #257	@ 0x101
 8011adc:	4617      	mov	r7, r2
 8011ade:	8183      	strh	r3, [r0, #12]
 8011ae0:	460c      	mov	r4, r1
 8011ae2:	46a8      	mov	r8, r5
 8011ae4:	4621      	mov	r1, r4
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	3501      	adds	r5, #1
 8011aea:	f006 fc65 	bl	80183b8 <put_memory>
 8011aee:	42af      	cmp	r7, r5
 8011af0:	60a4      	str	r4, [r4, #8]
 8011af2:	f884 800c 	strb.w	r8, [r4, #12]
 8011af6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011afa:	d1f3      	bne.n	8011ae4 <rmw_uxrce_init_service_memory+0x20>
 8011afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b00:	4770      	bx	lr
 8011b02:	bf00      	nop

08011b04 <rmw_uxrce_init_client_memory>:
 8011b04:	b1e2      	cbz	r2, 8011b40 <rmw_uxrce_init_client_memory+0x3c>
 8011b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b0a:	7b05      	ldrb	r5, [r0, #12]
 8011b0c:	4606      	mov	r6, r0
 8011b0e:	b9ad      	cbnz	r5, 8011b3c <rmw_uxrce_init_client_memory+0x38>
 8011b10:	23c8      	movs	r3, #200	@ 0xc8
 8011b12:	e9c0 5500 	strd	r5, r5, [r0]
 8011b16:	6083      	str	r3, [r0, #8]
 8011b18:	f240 1301 	movw	r3, #257	@ 0x101
 8011b1c:	4617      	mov	r7, r2
 8011b1e:	8183      	strh	r3, [r0, #12]
 8011b20:	460c      	mov	r4, r1
 8011b22:	46a8      	mov	r8, r5
 8011b24:	4621      	mov	r1, r4
 8011b26:	4630      	mov	r0, r6
 8011b28:	3501      	adds	r5, #1
 8011b2a:	f006 fc45 	bl	80183b8 <put_memory>
 8011b2e:	42af      	cmp	r7, r5
 8011b30:	60a4      	str	r4, [r4, #8]
 8011b32:	f884 800c 	strb.w	r8, [r4, #12]
 8011b36:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011b3a:	d1f3      	bne.n	8011b24 <rmw_uxrce_init_client_memory+0x20>
 8011b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b40:	4770      	bx	lr
 8011b42:	bf00      	nop

08011b44 <rmw_uxrce_init_publisher_memory>:
 8011b44:	b1e2      	cbz	r2, 8011b80 <rmw_uxrce_init_publisher_memory+0x3c>
 8011b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b4a:	7b05      	ldrb	r5, [r0, #12]
 8011b4c:	4606      	mov	r6, r0
 8011b4e:	b9ad      	cbnz	r5, 8011b7c <rmw_uxrce_init_publisher_memory+0x38>
 8011b50:	23d8      	movs	r3, #216	@ 0xd8
 8011b52:	e9c0 5500 	strd	r5, r5, [r0]
 8011b56:	6083      	str	r3, [r0, #8]
 8011b58:	f240 1301 	movw	r3, #257	@ 0x101
 8011b5c:	4617      	mov	r7, r2
 8011b5e:	8183      	strh	r3, [r0, #12]
 8011b60:	460c      	mov	r4, r1
 8011b62:	46a8      	mov	r8, r5
 8011b64:	4621      	mov	r1, r4
 8011b66:	4630      	mov	r0, r6
 8011b68:	3501      	adds	r5, #1
 8011b6a:	f006 fc25 	bl	80183b8 <put_memory>
 8011b6e:	42af      	cmp	r7, r5
 8011b70:	60a4      	str	r4, [r4, #8]
 8011b72:	f884 800c 	strb.w	r8, [r4, #12]
 8011b76:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011b7a:	d1f3      	bne.n	8011b64 <rmw_uxrce_init_publisher_memory+0x20>
 8011b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b80:	4770      	bx	lr
 8011b82:	bf00      	nop

08011b84 <rmw_uxrce_init_subscription_memory>:
 8011b84:	b1e2      	cbz	r2, 8011bc0 <rmw_uxrce_init_subscription_memory+0x3c>
 8011b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b8a:	7b05      	ldrb	r5, [r0, #12]
 8011b8c:	4606      	mov	r6, r0
 8011b8e:	b9ad      	cbnz	r5, 8011bbc <rmw_uxrce_init_subscription_memory+0x38>
 8011b90:	23d8      	movs	r3, #216	@ 0xd8
 8011b92:	e9c0 5500 	strd	r5, r5, [r0]
 8011b96:	6083      	str	r3, [r0, #8]
 8011b98:	f240 1301 	movw	r3, #257	@ 0x101
 8011b9c:	4617      	mov	r7, r2
 8011b9e:	8183      	strh	r3, [r0, #12]
 8011ba0:	460c      	mov	r4, r1
 8011ba2:	46a8      	mov	r8, r5
 8011ba4:	4621      	mov	r1, r4
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	3501      	adds	r5, #1
 8011baa:	f006 fc05 	bl	80183b8 <put_memory>
 8011bae:	42af      	cmp	r7, r5
 8011bb0:	60a4      	str	r4, [r4, #8]
 8011bb2:	f884 800c 	strb.w	r8, [r4, #12]
 8011bb6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011bba:	d1f3      	bne.n	8011ba4 <rmw_uxrce_init_subscription_memory+0x20>
 8011bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc0:	4770      	bx	lr
 8011bc2:	bf00      	nop

08011bc4 <rmw_uxrce_init_node_memory>:
 8011bc4:	b1e2      	cbz	r2, 8011c00 <rmw_uxrce_init_node_memory+0x3c>
 8011bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bca:	7b05      	ldrb	r5, [r0, #12]
 8011bcc:	4606      	mov	r6, r0
 8011bce:	b9ad      	cbnz	r5, 8011bfc <rmw_uxrce_init_node_memory+0x38>
 8011bd0:	23a4      	movs	r3, #164	@ 0xa4
 8011bd2:	e9c0 5500 	strd	r5, r5, [r0]
 8011bd6:	6083      	str	r3, [r0, #8]
 8011bd8:	f240 1301 	movw	r3, #257	@ 0x101
 8011bdc:	4617      	mov	r7, r2
 8011bde:	8183      	strh	r3, [r0, #12]
 8011be0:	460c      	mov	r4, r1
 8011be2:	46a8      	mov	r8, r5
 8011be4:	4621      	mov	r1, r4
 8011be6:	4630      	mov	r0, r6
 8011be8:	3501      	adds	r5, #1
 8011bea:	f006 fbe5 	bl	80183b8 <put_memory>
 8011bee:	42af      	cmp	r7, r5
 8011bf0:	60a4      	str	r4, [r4, #8]
 8011bf2:	f884 800c 	strb.w	r8, [r4, #12]
 8011bf6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8011bfa:	d1f3      	bne.n	8011be4 <rmw_uxrce_init_node_memory+0x20>
 8011bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c00:	4770      	bx	lr
 8011c02:	bf00      	nop

08011c04 <rmw_uxrce_init_session_memory>:
 8011c04:	b1ea      	cbz	r2, 8011c42 <rmw_uxrce_init_session_memory+0x3e>
 8011c06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c0a:	7b05      	ldrb	r5, [r0, #12]
 8011c0c:	4606      	mov	r6, r0
 8011c0e:	b9b5      	cbnz	r5, 8011c3e <rmw_uxrce_init_session_memory+0x3a>
 8011c10:	e9c0 5500 	strd	r5, r5, [r0]
 8011c14:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011c18:	f240 1301 	movw	r3, #257	@ 0x101
 8011c1c:	4617      	mov	r7, r2
 8011c1e:	f8c0 8008 	str.w	r8, [r0, #8]
 8011c22:	460c      	mov	r4, r1
 8011c24:	8183      	strh	r3, [r0, #12]
 8011c26:	46a9      	mov	r9, r5
 8011c28:	4621      	mov	r1, r4
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	3501      	adds	r5, #1
 8011c2e:	f006 fbc3 	bl	80183b8 <put_memory>
 8011c32:	42af      	cmp	r7, r5
 8011c34:	60a4      	str	r4, [r4, #8]
 8011c36:	f884 900c 	strb.w	r9, [r4, #12]
 8011c3a:	4444      	add	r4, r8
 8011c3c:	d1f4      	bne.n	8011c28 <rmw_uxrce_init_session_memory+0x24>
 8011c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c42:	4770      	bx	lr

08011c44 <rmw_uxrce_init_topic_memory>:
 8011c44:	b1e2      	cbz	r2, 8011c80 <rmw_uxrce_init_topic_memory+0x3c>
 8011c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c4a:	7b05      	ldrb	r5, [r0, #12]
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	b9ad      	cbnz	r5, 8011c7c <rmw_uxrce_init_topic_memory+0x38>
 8011c50:	231c      	movs	r3, #28
 8011c52:	e9c0 5500 	strd	r5, r5, [r0]
 8011c56:	6083      	str	r3, [r0, #8]
 8011c58:	f240 1301 	movw	r3, #257	@ 0x101
 8011c5c:	4617      	mov	r7, r2
 8011c5e:	8183      	strh	r3, [r0, #12]
 8011c60:	460c      	mov	r4, r1
 8011c62:	46a8      	mov	r8, r5
 8011c64:	4621      	mov	r1, r4
 8011c66:	4630      	mov	r0, r6
 8011c68:	3501      	adds	r5, #1
 8011c6a:	f006 fba5 	bl	80183b8 <put_memory>
 8011c6e:	42af      	cmp	r7, r5
 8011c70:	60a4      	str	r4, [r4, #8]
 8011c72:	f884 800c 	strb.w	r8, [r4, #12]
 8011c76:	f104 041c 	add.w	r4, r4, #28
 8011c7a:	d1f3      	bne.n	8011c64 <rmw_uxrce_init_topic_memory+0x20>
 8011c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop

08011c84 <rmw_uxrce_init_static_input_buffer_memory>:
 8011c84:	b1ea      	cbz	r2, 8011cc2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8011c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8a:	7b05      	ldrb	r5, [r0, #12]
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	b9b5      	cbnz	r5, 8011cbe <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8011c90:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8011c94:	e9c0 5500 	strd	r5, r5, [r0]
 8011c98:	6083      	str	r3, [r0, #8]
 8011c9a:	f240 1301 	movw	r3, #257	@ 0x101
 8011c9e:	4617      	mov	r7, r2
 8011ca0:	8183      	strh	r3, [r0, #12]
 8011ca2:	460c      	mov	r4, r1
 8011ca4:	46a8      	mov	r8, r5
 8011ca6:	4621      	mov	r1, r4
 8011ca8:	4630      	mov	r0, r6
 8011caa:	3501      	adds	r5, #1
 8011cac:	f006 fb84 	bl	80183b8 <put_memory>
 8011cb0:	42af      	cmp	r7, r5
 8011cb2:	60a4      	str	r4, [r4, #8]
 8011cb4:	f884 800c 	strb.w	r8, [r4, #12]
 8011cb8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8011cbc:	d1f3      	bne.n	8011ca6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8011cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc2:	4770      	bx	lr

08011cc4 <rmw_uxrce_init_init_options_impl_memory>:
 8011cc4:	b1e2      	cbz	r2, 8011d00 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8011cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cca:	7b05      	ldrb	r5, [r0, #12]
 8011ccc:	4606      	mov	r6, r0
 8011cce:	b9ad      	cbnz	r5, 8011cfc <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011cd0:	232c      	movs	r3, #44	@ 0x2c
 8011cd2:	e9c0 5500 	strd	r5, r5, [r0]
 8011cd6:	6083      	str	r3, [r0, #8]
 8011cd8:	f240 1301 	movw	r3, #257	@ 0x101
 8011cdc:	4617      	mov	r7, r2
 8011cde:	8183      	strh	r3, [r0, #12]
 8011ce0:	460c      	mov	r4, r1
 8011ce2:	46a8      	mov	r8, r5
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	3501      	adds	r5, #1
 8011cea:	f006 fb65 	bl	80183b8 <put_memory>
 8011cee:	42af      	cmp	r7, r5
 8011cf0:	60a4      	str	r4, [r4, #8]
 8011cf2:	f884 800c 	strb.w	r8, [r4, #12]
 8011cf6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8011cfa:	d1f3      	bne.n	8011ce4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop

08011d04 <rmw_uxrce_init_wait_set_memory>:
 8011d04:	b1e2      	cbz	r2, 8011d40 <rmw_uxrce_init_wait_set_memory+0x3c>
 8011d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d0a:	7b05      	ldrb	r5, [r0, #12]
 8011d0c:	4606      	mov	r6, r0
 8011d0e:	b9ad      	cbnz	r5, 8011d3c <rmw_uxrce_init_wait_set_memory+0x38>
 8011d10:	231c      	movs	r3, #28
 8011d12:	e9c0 5500 	strd	r5, r5, [r0]
 8011d16:	6083      	str	r3, [r0, #8]
 8011d18:	f240 1301 	movw	r3, #257	@ 0x101
 8011d1c:	4617      	mov	r7, r2
 8011d1e:	8183      	strh	r3, [r0, #12]
 8011d20:	460c      	mov	r4, r1
 8011d22:	46a8      	mov	r8, r5
 8011d24:	4621      	mov	r1, r4
 8011d26:	4630      	mov	r0, r6
 8011d28:	3501      	adds	r5, #1
 8011d2a:	f006 fb45 	bl	80183b8 <put_memory>
 8011d2e:	42af      	cmp	r7, r5
 8011d30:	60a4      	str	r4, [r4, #8]
 8011d32:	f884 800c 	strb.w	r8, [r4, #12]
 8011d36:	f104 041c 	add.w	r4, r4, #28
 8011d3a:	d1f3      	bne.n	8011d24 <rmw_uxrce_init_wait_set_memory+0x20>
 8011d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop

08011d44 <rmw_uxrce_init_guard_condition_memory>:
 8011d44:	b1e2      	cbz	r2, 8011d80 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8011d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d4a:	7b05      	ldrb	r5, [r0, #12]
 8011d4c:	4606      	mov	r6, r0
 8011d4e:	b9ad      	cbnz	r5, 8011d7c <rmw_uxrce_init_guard_condition_memory+0x38>
 8011d50:	2320      	movs	r3, #32
 8011d52:	e9c0 5500 	strd	r5, r5, [r0]
 8011d56:	6083      	str	r3, [r0, #8]
 8011d58:	f240 1301 	movw	r3, #257	@ 0x101
 8011d5c:	4617      	mov	r7, r2
 8011d5e:	8183      	strh	r3, [r0, #12]
 8011d60:	460c      	mov	r4, r1
 8011d62:	46a8      	mov	r8, r5
 8011d64:	4621      	mov	r1, r4
 8011d66:	4630      	mov	r0, r6
 8011d68:	3501      	adds	r5, #1
 8011d6a:	f006 fb25 	bl	80183b8 <put_memory>
 8011d6e:	42af      	cmp	r7, r5
 8011d70:	60a4      	str	r4, [r4, #8]
 8011d72:	f884 800c 	strb.w	r8, [r4, #12]
 8011d76:	f104 0420 	add.w	r4, r4, #32
 8011d7a:	d1f3      	bne.n	8011d64 <rmw_uxrce_init_guard_condition_memory+0x20>
 8011d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop

08011d84 <rmw_uxrce_fini_session_memory>:
 8011d84:	4601      	mov	r1, r0
 8011d86:	4801      	ldr	r0, [pc, #4]	@ (8011d8c <rmw_uxrce_fini_session_memory+0x8>)
 8011d88:	f006 bb16 	b.w	80183b8 <put_memory>
 8011d8c:	2000e544 	.word	0x2000e544

08011d90 <rmw_uxrce_fini_node_memory>:
 8011d90:	b538      	push	{r3, r4, r5, lr}
 8011d92:	4604      	mov	r4, r0
 8011d94:	6800      	ldr	r0, [r0, #0]
 8011d96:	b128      	cbz	r0, 8011da4 <rmw_uxrce_fini_node_memory+0x14>
 8011d98:	4b07      	ldr	r3, [pc, #28]	@ (8011db8 <rmw_uxrce_fini_node_memory+0x28>)
 8011d9a:	6819      	ldr	r1, [r3, #0]
 8011d9c:	f7ee fa18 	bl	80001d0 <strcmp>
 8011da0:	b940      	cbnz	r0, 8011db4 <rmw_uxrce_fini_node_memory+0x24>
 8011da2:	6020      	str	r0, [r4, #0]
 8011da4:	6861      	ldr	r1, [r4, #4]
 8011da6:	b129      	cbz	r1, 8011db4 <rmw_uxrce_fini_node_memory+0x24>
 8011da8:	2500      	movs	r5, #0
 8011daa:	4804      	ldr	r0, [pc, #16]	@ (8011dbc <rmw_uxrce_fini_node_memory+0x2c>)
 8011dac:	610d      	str	r5, [r1, #16]
 8011dae:	f006 fb03 	bl	80183b8 <put_memory>
 8011db2:	6065      	str	r5, [r4, #4]
 8011db4:	bd38      	pop	{r3, r4, r5, pc}
 8011db6:	bf00      	nop
 8011db8:	0801dd78 	.word	0x0801dd78
 8011dbc:	2000e514 	.word	0x2000e514

08011dc0 <rmw_uxrce_fini_publisher_memory>:
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	6800      	ldr	r0, [r0, #0]
 8011dc6:	b128      	cbz	r0, 8011dd4 <rmw_uxrce_fini_publisher_memory+0x14>
 8011dc8:	4b06      	ldr	r3, [pc, #24]	@ (8011de4 <rmw_uxrce_fini_publisher_memory+0x24>)
 8011dca:	6819      	ldr	r1, [r3, #0]
 8011dcc:	f7ee fa00 	bl	80001d0 <strcmp>
 8011dd0:	b938      	cbnz	r0, 8011de2 <rmw_uxrce_fini_publisher_memory+0x22>
 8011dd2:	6020      	str	r0, [r4, #0]
 8011dd4:	6861      	ldr	r1, [r4, #4]
 8011dd6:	b121      	cbz	r1, 8011de2 <rmw_uxrce_fini_publisher_memory+0x22>
 8011dd8:	4803      	ldr	r0, [pc, #12]	@ (8011de8 <rmw_uxrce_fini_publisher_memory+0x28>)
 8011dda:	f006 faed 	bl	80183b8 <put_memory>
 8011dde:	2300      	movs	r3, #0
 8011de0:	6063      	str	r3, [r4, #4]
 8011de2:	bd10      	pop	{r4, pc}
 8011de4:	0801dd78 	.word	0x0801dd78
 8011de8:	2000e524 	.word	0x2000e524

08011dec <rmw_uxrce_fini_subscription_memory>:
 8011dec:	b510      	push	{r4, lr}
 8011dee:	4604      	mov	r4, r0
 8011df0:	6800      	ldr	r0, [r0, #0]
 8011df2:	b128      	cbz	r0, 8011e00 <rmw_uxrce_fini_subscription_memory+0x14>
 8011df4:	4b06      	ldr	r3, [pc, #24]	@ (8011e10 <rmw_uxrce_fini_subscription_memory+0x24>)
 8011df6:	6819      	ldr	r1, [r3, #0]
 8011df8:	f7ee f9ea 	bl	80001d0 <strcmp>
 8011dfc:	b938      	cbnz	r0, 8011e0e <rmw_uxrce_fini_subscription_memory+0x22>
 8011dfe:	6020      	str	r0, [r4, #0]
 8011e00:	6861      	ldr	r1, [r4, #4]
 8011e02:	b121      	cbz	r1, 8011e0e <rmw_uxrce_fini_subscription_memory+0x22>
 8011e04:	4803      	ldr	r0, [pc, #12]	@ (8011e14 <rmw_uxrce_fini_subscription_memory+0x28>)
 8011e06:	f006 fad7 	bl	80183b8 <put_memory>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	6063      	str	r3, [r4, #4]
 8011e0e:	bd10      	pop	{r4, pc}
 8011e10:	0801dd78 	.word	0x0801dd78
 8011e14:	2000e564 	.word	0x2000e564

08011e18 <rmw_uxrce_fini_service_memory>:
 8011e18:	b510      	push	{r4, lr}
 8011e1a:	4604      	mov	r4, r0
 8011e1c:	6800      	ldr	r0, [r0, #0]
 8011e1e:	b128      	cbz	r0, 8011e2c <rmw_uxrce_fini_service_memory+0x14>
 8011e20:	4b06      	ldr	r3, [pc, #24]	@ (8011e3c <rmw_uxrce_fini_service_memory+0x24>)
 8011e22:	6819      	ldr	r1, [r3, #0]
 8011e24:	f7ee f9d4 	bl	80001d0 <strcmp>
 8011e28:	b938      	cbnz	r0, 8011e3a <rmw_uxrce_fini_service_memory+0x22>
 8011e2a:	6020      	str	r0, [r4, #0]
 8011e2c:	6861      	ldr	r1, [r4, #4]
 8011e2e:	b121      	cbz	r1, 8011e3a <rmw_uxrce_fini_service_memory+0x22>
 8011e30:	4803      	ldr	r0, [pc, #12]	@ (8011e40 <rmw_uxrce_fini_service_memory+0x28>)
 8011e32:	f006 fac1 	bl	80183b8 <put_memory>
 8011e36:	2300      	movs	r3, #0
 8011e38:	6063      	str	r3, [r4, #4]
 8011e3a:	bd10      	pop	{r4, pc}
 8011e3c:	0801dd78 	.word	0x0801dd78
 8011e40:	2000e534 	.word	0x2000e534

08011e44 <rmw_uxrce_fini_client_memory>:
 8011e44:	b510      	push	{r4, lr}
 8011e46:	4604      	mov	r4, r0
 8011e48:	6800      	ldr	r0, [r0, #0]
 8011e4a:	b128      	cbz	r0, 8011e58 <rmw_uxrce_fini_client_memory+0x14>
 8011e4c:	4b06      	ldr	r3, [pc, #24]	@ (8011e68 <rmw_uxrce_fini_client_memory+0x24>)
 8011e4e:	6819      	ldr	r1, [r3, #0]
 8011e50:	f7ee f9be 	bl	80001d0 <strcmp>
 8011e54:	b938      	cbnz	r0, 8011e66 <rmw_uxrce_fini_client_memory+0x22>
 8011e56:	6020      	str	r0, [r4, #0]
 8011e58:	6861      	ldr	r1, [r4, #4]
 8011e5a:	b121      	cbz	r1, 8011e66 <rmw_uxrce_fini_client_memory+0x22>
 8011e5c:	4803      	ldr	r0, [pc, #12]	@ (8011e6c <rmw_uxrce_fini_client_memory+0x28>)
 8011e5e:	f006 faab 	bl	80183b8 <put_memory>
 8011e62:	2300      	movs	r3, #0
 8011e64:	6063      	str	r3, [r4, #4]
 8011e66:	bd10      	pop	{r4, pc}
 8011e68:	0801dd78 	.word	0x0801dd78
 8011e6c:	20009c48 	.word	0x20009c48

08011e70 <rmw_uxrce_fini_topic_memory>:
 8011e70:	b510      	push	{r4, lr}
 8011e72:	4604      	mov	r4, r0
 8011e74:	4621      	mov	r1, r4
 8011e76:	4803      	ldr	r0, [pc, #12]	@ (8011e84 <rmw_uxrce_fini_topic_memory+0x14>)
 8011e78:	f006 fa9e 	bl	80183b8 <put_memory>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	61a3      	str	r3, [r4, #24]
 8011e80:	bd10      	pop	{r4, pc}
 8011e82:	bf00      	nop
 8011e84:	2000e574 	.word	0x2000e574

08011e88 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011e88:	b082      	sub	sp, #8
 8011e8a:	b530      	push	{r4, r5, lr}
 8011e8c:	4925      	ldr	r1, [pc, #148]	@ (8011f24 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011e8e:	680d      	ldr	r5, [r1, #0]
 8011e90:	ac03      	add	r4, sp, #12
 8011e92:	e884 000c 	stmia.w	r4, {r2, r3}
 8011e96:	461c      	mov	r4, r3
 8011e98:	2d00      	cmp	r5, #0
 8011e9a:	d041      	beq.n	8011f20 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8011e9c:	462b      	mov	r3, r5
 8011e9e:	2100      	movs	r1, #0
 8011ea0:	689a      	ldr	r2, [r3, #8]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8011ea8:	4290      	cmp	r0, r2
 8011eaa:	bf08      	it	eq
 8011eac:	3101      	addeq	r1, #1
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d1f6      	bne.n	8011ea0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8011eb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011eb6:	2b02      	cmp	r3, #2
 8011eb8:	d029      	beq.n	8011f0e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011eba:	d907      	bls.n	8011ecc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011ebc:	2b03      	cmp	r3, #3
 8011ebe:	d005      	beq.n	8011ecc <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ec6:	4608      	mov	r0, r1
 8011ec8:	b002      	add	sp, #8
 8011eca:	4770      	bx	lr
 8011ecc:	b314      	cbz	r4, 8011f14 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011ece:	428c      	cmp	r4, r1
 8011ed0:	d820      	bhi.n	8011f14 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011ed2:	2d00      	cmp	r5, #0
 8011ed4:	d0f4      	beq.n	8011ec0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011edc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011ee0:	e002      	b.n	8011ee8 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8011ee2:	686d      	ldr	r5, [r5, #4]
 8011ee4:	2d00      	cmp	r5, #0
 8011ee6:	d0ec      	beq.n	8011ec2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8011ee8:	68ab      	ldr	r3, [r5, #8]
 8011eea:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8011eee:	4290      	cmp	r0, r2
 8011ef0:	d1f7      	bne.n	8011ee2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011ef2:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8011ef6:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8011efa:	4562      	cmp	r2, ip
 8011efc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011f00:	eb73 0e04 	sbcs.w	lr, r3, r4
 8011f04:	daed      	bge.n	8011ee2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011f06:	4694      	mov	ip, r2
 8011f08:	461c      	mov	r4, r3
 8011f0a:	4629      	mov	r1, r5
 8011f0c:	e7e9      	b.n	8011ee2 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011f0e:	b10c      	cbz	r4, 8011f14 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011f10:	428c      	cmp	r4, r1
 8011f12:	d9d5      	bls.n	8011ec0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f18:	4802      	ldr	r0, [pc, #8]	@ (8011f24 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011f1a:	b002      	add	sp, #8
 8011f1c:	f006 ba3c 	b.w	8018398 <get_memory>
 8011f20:	4629      	mov	r1, r5
 8011f22:	e7c6      	b.n	8011eb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8011f24:	2000e554 	.word	0x2000e554

08011f28 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8011f28:	4b11      	ldr	r3, [pc, #68]	@ (8011f70 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	b530      	push	{r4, r5, lr}
 8011f2e:	b1e3      	cbz	r3, 8011f6a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8011f30:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8011f34:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8011f38:	2400      	movs	r4, #0
 8011f3a:	e001      	b.n	8011f40 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	b193      	cbz	r3, 8011f66 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8011f40:	689a      	ldr	r2, [r3, #8]
 8011f42:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8011f46:	4288      	cmp	r0, r1
 8011f48:	d1f8      	bne.n	8011f3c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011f4a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8011f4e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8011f52:	4571      	cmp	r1, lr
 8011f54:	eb72 050c 	sbcs.w	r5, r2, ip
 8011f58:	daf0      	bge.n	8011f3c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011f5a:	461c      	mov	r4, r3
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	468e      	mov	lr, r1
 8011f60:	4694      	mov	ip, r2
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d1ec      	bne.n	8011f40 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011f66:	4620      	mov	r0, r4
 8011f68:	bd30      	pop	{r4, r5, pc}
 8011f6a:	461c      	mov	r4, r3
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	bd30      	pop	{r4, r5, pc}
 8011f70:	2000e554 	.word	0x2000e554
 8011f74:	00000000 	.word	0x00000000

08011f78 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8012070 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011f7e:	ed2d 8b06 	vpush	{d8-d10}
 8011f82:	681f      	ldr	r7, [r3, #0]
 8011f84:	b08d      	sub	sp, #52	@ 0x34
 8011f86:	f007 fb6f 	bl	8019668 <rmw_uros_epoch_nanos>
 8011f8a:	2f00      	cmp	r7, #0
 8011f8c:	d05d      	beq.n	801204a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011f8e:	46b8      	mov	r8, r7
 8011f90:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8012058 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011f94:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011f98:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011f9c:	2b04      	cmp	r3, #4
 8011f9e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8012060 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011fa2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8012068 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8011fa6:	4681      	mov	r9, r0
 8011fa8:	468a      	mov	sl, r1
 8011faa:	ac04      	add	r4, sp, #16
 8011fac:	d03f      	beq.n	801202e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011fae:	2b05      	cmp	r3, #5
 8011fb0:	d044      	beq.n	801203c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8011fb2:	2b03      	cmp	r3, #3
 8011fb4:	d03b      	beq.n	801202e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011fb6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011fba:	ed8d ab06 	vstr	d10, [sp, #24]
 8011fbe:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011fc2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8011fc6:	ab08      	add	r3, sp, #32
 8011fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011fce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011fd2:	f006 f815 	bl	8018000 <rmw_time_equal>
 8011fd6:	b118      	cbz	r0, 8011fe0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011fd8:	ed8d 9b04 	vstr	d9, [sp, #16]
 8011fdc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011fe0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011fe4:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8011fe8:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8011fec:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8011ff0:	f006 f85a 	bl	80180a8 <rmw_time_total_nsec>
 8011ff4:	1830      	adds	r0, r6, r0
 8011ff6:	eb47 0101 	adc.w	r1, r7, r1
 8011ffa:	4548      	cmp	r0, r9
 8011ffc:	eb71 030a 	sbcs.w	r3, r1, sl
 8012000:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8012004:	db05      	blt.n	8012012 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8012006:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801200a:	4591      	cmp	r9, r2
 801200c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8012010:	da03      	bge.n	801201a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8012012:	4817      	ldr	r0, [pc, #92]	@ (8012070 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8012014:	4641      	mov	r1, r8
 8012016:	f006 f9cf 	bl	80183b8 <put_memory>
 801201a:	f1bb 0f00 	cmp.w	fp, #0
 801201e:	d014      	beq.n	801204a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8012020:	46d8      	mov	r8, fp
 8012022:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012026:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801202a:	2b04      	cmp	r3, #4
 801202c:	d1bf      	bne.n	8011fae <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801202e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8012032:	3340      	adds	r3, #64	@ 0x40
 8012034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012036:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801203a:	e7c0      	b.n	8011fbe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801203c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8012040:	3348      	adds	r3, #72	@ 0x48
 8012042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012048:	e7b9      	b.n	8011fbe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801204a:	b00d      	add	sp, #52	@ 0x34
 801204c:	ecbd 8b06 	vpop	{d8-d10}
 8012050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012054:	f3af 8000 	nop.w
	...
 8012060:	00000001 	.word	0x00000001
 8012064:	00000000 	.word	0x00000000
 8012068:	0000001e 	.word	0x0000001e
 801206c:	00000000 	.word	0x00000000
 8012070:	2000e554 	.word	0x2000e554

08012074 <run_xrce_session>:
 8012074:	b510      	push	{r4, lr}
 8012076:	788c      	ldrb	r4, [r1, #2]
 8012078:	b086      	sub	sp, #24
 801207a:	2c01      	cmp	r4, #1
 801207c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8012080:	d00c      	beq.n	801209c <run_xrce_session+0x28>
 8012082:	4619      	mov	r1, r3
 8012084:	2301      	movs	r3, #1
 8012086:	9300      	str	r3, [sp, #0]
 8012088:	f10d 020e 	add.w	r2, sp, #14
 801208c:	f10d 0317 	add.w	r3, sp, #23
 8012090:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012094:	f001 f8d2 	bl	801323c <uxr_run_session_until_all_status>
 8012098:	b006      	add	sp, #24
 801209a:	bd10      	pop	{r4, pc}
 801209c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80120a0:	f000 fce6 	bl	8012a70 <uxr_flash_output_streams>
 80120a4:	4620      	mov	r0, r4
 80120a6:	b006      	add	sp, #24
 80120a8:	bd10      	pop	{r4, pc}
 80120aa:	bf00      	nop

080120ac <convert_qos_profile>:
 80120ac:	7a4a      	ldrb	r2, [r1, #9]
 80120ae:	f891 c008 	ldrb.w	ip, [r1, #8]
 80120b2:	2a02      	cmp	r2, #2
 80120b4:	bf18      	it	ne
 80120b6:	2200      	movne	r2, #0
 80120b8:	7002      	strb	r2, [r0, #0]
 80120ba:	780a      	ldrb	r2, [r1, #0]
 80120bc:	8889      	ldrh	r1, [r1, #4]
 80120be:	8081      	strh	r1, [r0, #4]
 80120c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80120c4:	f1a2 0202 	sub.w	r2, r2, #2
 80120c8:	fabc fc8c 	clz	ip, ip
 80120cc:	fab2 f282 	clz	r2, r2
 80120d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80120d4:	0952      	lsrs	r2, r2, #5
 80120d6:	f880 c001 	strb.w	ip, [r0, #1]
 80120da:	7082      	strb	r2, [r0, #2]
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop

080120e0 <generate_type_name>:
 80120e0:	b530      	push	{r4, r5, lr}
 80120e2:	2300      	movs	r3, #0
 80120e4:	700b      	strb	r3, [r1, #0]
 80120e6:	6803      	ldr	r3, [r0, #0]
 80120e8:	b087      	sub	sp, #28
 80120ea:	4614      	mov	r4, r2
 80120ec:	b1d3      	cbz	r3, 8012124 <generate_type_name+0x44>
 80120ee:	4a0f      	ldr	r2, [pc, #60]	@ (801212c <generate_type_name+0x4c>)
 80120f0:	4615      	mov	r5, r2
 80120f2:	9203      	str	r2, [sp, #12]
 80120f4:	9500      	str	r5, [sp, #0]
 80120f6:	6842      	ldr	r2, [r0, #4]
 80120f8:	480d      	ldr	r0, [pc, #52]	@ (8012130 <generate_type_name+0x50>)
 80120fa:	9001      	str	r0, [sp, #4]
 80120fc:	4608      	mov	r0, r1
 80120fe:	490d      	ldr	r1, [pc, #52]	@ (8012134 <generate_type_name+0x54>)
 8012100:	9204      	str	r2, [sp, #16]
 8012102:	9105      	str	r1, [sp, #20]
 8012104:	9102      	str	r1, [sp, #8]
 8012106:	4a0c      	ldr	r2, [pc, #48]	@ (8012138 <generate_type_name+0x58>)
 8012108:	4621      	mov	r1, r4
 801210a:	f009 ffb3 	bl	801c074 <sniprintf>
 801210e:	2800      	cmp	r0, #0
 8012110:	db05      	blt.n	801211e <generate_type_name+0x3e>
 8012112:	4284      	cmp	r4, r0
 8012114:	bfd4      	ite	le
 8012116:	2000      	movle	r0, #0
 8012118:	2001      	movgt	r0, #1
 801211a:	b007      	add	sp, #28
 801211c:	bd30      	pop	{r4, r5, pc}
 801211e:	2000      	movs	r0, #0
 8012120:	b007      	add	sp, #28
 8012122:	bd30      	pop	{r4, r5, pc}
 8012124:	4b05      	ldr	r3, [pc, #20]	@ (801213c <generate_type_name+0x5c>)
 8012126:	4a01      	ldr	r2, [pc, #4]	@ (801212c <generate_type_name+0x4c>)
 8012128:	461d      	mov	r5, r3
 801212a:	e7e2      	b.n	80120f2 <generate_type_name+0x12>
 801212c:	0801d414 	.word	0x0801d414
 8012130:	0801d42c 	.word	0x0801d42c
 8012134:	0801d428 	.word	0x0801d428
 8012138:	0801d418 	.word	0x0801d418
 801213c:	0801d75c 	.word	0x0801d75c

08012140 <generate_topic_name>:
 8012140:	b510      	push	{r4, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	4614      	mov	r4, r2
 8012146:	9000      	str	r0, [sp, #0]
 8012148:	4b08      	ldr	r3, [pc, #32]	@ (801216c <generate_topic_name+0x2c>)
 801214a:	4a09      	ldr	r2, [pc, #36]	@ (8012170 <generate_topic_name+0x30>)
 801214c:	4608      	mov	r0, r1
 801214e:	4621      	mov	r1, r4
 8012150:	f009 ff90 	bl	801c074 <sniprintf>
 8012154:	2800      	cmp	r0, #0
 8012156:	db05      	blt.n	8012164 <generate_topic_name+0x24>
 8012158:	4284      	cmp	r4, r0
 801215a:	bfd4      	ite	le
 801215c:	2000      	movle	r0, #0
 801215e:	2001      	movgt	r0, #1
 8012160:	b002      	add	sp, #8
 8012162:	bd10      	pop	{r4, pc}
 8012164:	2000      	movs	r0, #0
 8012166:	b002      	add	sp, #8
 8012168:	bd10      	pop	{r4, pc}
 801216a:	bf00      	nop
 801216c:	0801db74 	.word	0x0801db74
 8012170:	0801d430 	.word	0x0801d430

08012174 <is_uxrce_rmw_identifier_valid>:
 8012174:	b510      	push	{r4, lr}
 8012176:	4604      	mov	r4, r0
 8012178:	b140      	cbz	r0, 801218c <is_uxrce_rmw_identifier_valid+0x18>
 801217a:	f006 f975 	bl	8018468 <rmw_get_implementation_identifier>
 801217e:	4601      	mov	r1, r0
 8012180:	4620      	mov	r0, r4
 8012182:	f7ee f825 	bl	80001d0 <strcmp>
 8012186:	fab0 f080 	clz	r0, r0
 801218a:	0940      	lsrs	r0, r0, #5
 801218c:	bd10      	pop	{r4, pc}
 801218e:	bf00      	nop

08012190 <get_message_typesupport_handle>:
 8012190:	6883      	ldr	r3, [r0, #8]
 8012192:	4718      	bx	r3

08012194 <get_message_typesupport_handle_function>:
 8012194:	b510      	push	{r4, lr}
 8012196:	4604      	mov	r4, r0
 8012198:	6800      	ldr	r0, [r0, #0]
 801219a:	f7ee f819 	bl	80001d0 <strcmp>
 801219e:	2800      	cmp	r0, #0
 80121a0:	bf0c      	ite	eq
 80121a2:	4620      	moveq	r0, r4
 80121a4:	2000      	movne	r0, #0
 80121a6:	bd10      	pop	{r4, pc}

080121a8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80121a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ac:	6805      	ldr	r5, [r0, #0]
 80121ae:	4604      	mov	r4, r0
 80121b0:	4628      	mov	r0, r5
 80121b2:	460e      	mov	r6, r1
 80121b4:	f7ee f80c 	bl	80001d0 <strcmp>
 80121b8:	b1c8      	cbz	r0, 80121ee <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80121ba:	4b11      	ldr	r3, [pc, #68]	@ (8012200 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	429d      	cmp	r5, r3
 80121c0:	d112      	bne.n	80121e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80121c2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80121c6:	f8d8 4000 	ldr.w	r4, [r8]
 80121ca:	b16c      	cbz	r4, 80121e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80121cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80121d0:	2700      	movs	r7, #0
 80121d2:	3d04      	subs	r5, #4
 80121d4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80121d8:	4631      	mov	r1, r6
 80121da:	f7ed fff9 	bl	80001d0 <strcmp>
 80121de:	00bb      	lsls	r3, r7, #2
 80121e0:	b140      	cbz	r0, 80121f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80121e2:	3701      	adds	r7, #1
 80121e4:	42bc      	cmp	r4, r7
 80121e6:	d1f5      	bne.n	80121d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80121e8:	2000      	movs	r0, #0
 80121ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121ee:	4620      	mov	r0, r4
 80121f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80121f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121fc:	58d3      	ldr	r3, [r2, r3]
 80121fe:	4718      	bx	r3
 8012200:	200001f0 	.word	0x200001f0

08012204 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8012204:	4b04      	ldr	r3, [pc, #16]	@ (8012218 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8012206:	681a      	ldr	r2, [r3, #0]
 8012208:	b10a      	cbz	r2, 801220e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 801220a:	4803      	ldr	r0, [pc, #12]	@ (8012218 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 801220c:	4770      	bx	lr
 801220e:	4a03      	ldr	r2, [pc, #12]	@ (801221c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 8012210:	4801      	ldr	r0, [pc, #4]	@ (8012218 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8012212:	6812      	ldr	r2, [r2, #0]
 8012214:	601a      	str	r2, [r3, #0]
 8012216:	4770      	bx	lr
 8012218:	20000200 	.word	0x20000200
 801221c:	200001f0 	.word	0x200001f0

08012220 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8012220:	4a02      	ldr	r2, [pc, #8]	@ (801222c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 8012222:	4b03      	ldr	r3, [pc, #12]	@ (8012230 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 8012224:	6812      	ldr	r2, [r2, #0]
 8012226:	601a      	str	r2, [r3, #0]
 8012228:	4770      	bx	lr
 801222a:	bf00      	nop
 801222c:	200001f0 	.word	0x200001f0
 8012230:	20000200 	.word	0x20000200

08012234 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012234:	4b04      	ldr	r3, [pc, #16]	@ (8012248 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012236:	681a      	ldr	r2, [r3, #0]
 8012238:	b10a      	cbz	r2, 801223e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801223a:	4803      	ldr	r0, [pc, #12]	@ (8012248 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801223c:	4770      	bx	lr
 801223e:	4a03      	ldr	r2, [pc, #12]	@ (801224c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8012240:	4801      	ldr	r0, [pc, #4]	@ (8012248 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012242:	6812      	ldr	r2, [r2, #0]
 8012244:	601a      	str	r2, [r3, #0]
 8012246:	4770      	bx	lr
 8012248:	20000214 	.word	0x20000214
 801224c:	200001f0 	.word	0x200001f0

08012250 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012250:	4a02      	ldr	r2, [pc, #8]	@ (801225c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8012252:	4b03      	ldr	r3, [pc, #12]	@ (8012260 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8012254:	6812      	ldr	r2, [r2, #0]
 8012256:	601a      	str	r2, [r3, #0]
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	200001f0 	.word	0x200001f0
 8012260:	20000214 	.word	0x20000214

08012264 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 8012264:	f007 ba0e 	b.w	8019684 <std_msgs__msg__Float32__init>

08012268 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 8012268:	f007 ba10 	b.w	801968c <std_msgs__msg__Float32__fini>

0801226c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 801226c:	4b04      	ldr	r3, [pc, #16]	@ (8012280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	b10a      	cbz	r2, 8012276 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 8012272:	4803      	ldr	r0, [pc, #12]	@ (8012280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8012274:	4770      	bx	lr
 8012276:	4a03      	ldr	r2, [pc, #12]	@ (8012284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 8012278:	4801      	ldr	r0, [pc, #4]	@ (8012280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 801227a:	6812      	ldr	r2, [r2, #0]
 801227c:	601a      	str	r2, [r3, #0]
 801227e:	4770      	bx	lr
 8012280:	2000025c 	.word	0x2000025c
 8012284:	200001f4 	.word	0x200001f4

08012288 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8012288:	f007 ba02 	b.w	8019690 <std_msgs__msg__Int32__init>

0801228c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 801228c:	f007 ba04 	b.w	8019698 <std_msgs__msg__Int32__fini>

08012290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012290:	4b04      	ldr	r3, [pc, #16]	@ (80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	b10a      	cbz	r2, 801229a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8012296:	4803      	ldr	r0, [pc, #12]	@ (80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012298:	4770      	bx	lr
 801229a:	4a03      	ldr	r2, [pc, #12]	@ (80122a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 801229c:	4801      	ldr	r0, [pc, #4]	@ (80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801229e:	6812      	ldr	r2, [r2, #0]
 80122a0:	601a      	str	r2, [r3, #0]
 80122a2:	4770      	bx	lr
 80122a4:	200002a4 	.word	0x200002a4
 80122a8:	200001f4 	.word	0x200001f4

080122ac <_Float32__max_serialized_size>:
 80122ac:	b508      	push	{r3, lr}
 80122ae:	2104      	movs	r1, #4
 80122b0:	2000      	movs	r0, #0
 80122b2:	f7fe f8fb 	bl	80104ac <ucdr_alignment>
 80122b6:	3004      	adds	r0, #4
 80122b8:	bd08      	pop	{r3, pc}
 80122ba:	bf00      	nop

080122bc <_Float32__cdr_deserialize>:
 80122bc:	b109      	cbz	r1, 80122c2 <_Float32__cdr_deserialize+0x6>
 80122be:	f7fd be77 	b.w	800ffb0 <ucdr_deserialize_float>
 80122c2:	4608      	mov	r0, r1
 80122c4:	4770      	bx	lr
 80122c6:	bf00      	nop

080122c8 <get_serialized_size_std_msgs__msg__Float32>:
 80122c8:	b138      	cbz	r0, 80122da <get_serialized_size_std_msgs__msg__Float32+0x12>
 80122ca:	b508      	push	{r3, lr}
 80122cc:	460b      	mov	r3, r1
 80122ce:	4618      	mov	r0, r3
 80122d0:	2104      	movs	r1, #4
 80122d2:	f7fe f8eb 	bl	80104ac <ucdr_alignment>
 80122d6:	3004      	adds	r0, #4
 80122d8:	bd08      	pop	{r3, pc}
 80122da:	4770      	bx	lr

080122dc <_Float32__cdr_serialize>:
 80122dc:	b120      	cbz	r0, 80122e8 <_Float32__cdr_serialize+0xc>
 80122de:	ed90 0a00 	vldr	s0, [r0]
 80122e2:	4608      	mov	r0, r1
 80122e4:	f7fd bdcc 	b.w	800fe80 <ucdr_serialize_float>
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop

080122ec <_Float32__get_serialized_size>:
 80122ec:	b130      	cbz	r0, 80122fc <_Float32__get_serialized_size+0x10>
 80122ee:	b508      	push	{r3, lr}
 80122f0:	2104      	movs	r1, #4
 80122f2:	2000      	movs	r0, #0
 80122f4:	f7fe f8da 	bl	80104ac <ucdr_alignment>
 80122f8:	3004      	adds	r0, #4
 80122fa:	bd08      	pop	{r3, pc}
 80122fc:	4770      	bx	lr
 80122fe:	bf00      	nop

08012300 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8012300:	4800      	ldr	r0, [pc, #0]	@ (8012304 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 8012302:	4770      	bx	lr
 8012304:	200002b0 	.word	0x200002b0

08012308 <_Int32__max_serialized_size>:
 8012308:	b508      	push	{r3, lr}
 801230a:	2104      	movs	r1, #4
 801230c:	2000      	movs	r0, #0
 801230e:	f7fe f8cd 	bl	80104ac <ucdr_alignment>
 8012312:	3004      	adds	r0, #4
 8012314:	bd08      	pop	{r3, pc}
 8012316:	bf00      	nop

08012318 <_Int32__cdr_deserialize>:
 8012318:	b109      	cbz	r1, 801231e <_Int32__cdr_deserialize+0x6>
 801231a:	f7fd bd21 	b.w	800fd60 <ucdr_deserialize_int32_t>
 801231e:	4608      	mov	r0, r1
 8012320:	4770      	bx	lr
 8012322:	bf00      	nop

08012324 <get_serialized_size_std_msgs__msg__Int32>:
 8012324:	b138      	cbz	r0, 8012336 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8012326:	b508      	push	{r3, lr}
 8012328:	460b      	mov	r3, r1
 801232a:	4618      	mov	r0, r3
 801232c:	2104      	movs	r1, #4
 801232e:	f7fe f8bd 	bl	80104ac <ucdr_alignment>
 8012332:	3004      	adds	r0, #4
 8012334:	bd08      	pop	{r3, pc}
 8012336:	4770      	bx	lr

08012338 <_Int32__cdr_serialize>:
 8012338:	460a      	mov	r2, r1
 801233a:	b118      	cbz	r0, 8012344 <_Int32__cdr_serialize+0xc>
 801233c:	6801      	ldr	r1, [r0, #0]
 801233e:	4610      	mov	r0, r2
 8012340:	f7fd bc76 	b.w	800fc30 <ucdr_serialize_int32_t>
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop

08012348 <_Int32__get_serialized_size>:
 8012348:	b130      	cbz	r0, 8012358 <_Int32__get_serialized_size+0x10>
 801234a:	b508      	push	{r3, lr}
 801234c:	2104      	movs	r1, #4
 801234e:	2000      	movs	r0, #0
 8012350:	f7fe f8ac 	bl	80104ac <ucdr_alignment>
 8012354:	3004      	adds	r0, #4
 8012356:	bd08      	pop	{r3, pc}
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop

0801235c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801235c:	4800      	ldr	r0, [pc, #0]	@ (8012360 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801235e:	4770      	bx	lr
 8012360:	200002d8 	.word	0x200002d8

08012364 <geometry_msgs__msg__Twist__init>:
 8012364:	b570      	push	{r4, r5, r6, lr}
 8012366:	4605      	mov	r5, r0
 8012368:	b1a8      	cbz	r0, 8012396 <geometry_msgs__msg__Twist__init+0x32>
 801236a:	f000 f82b 	bl	80123c4 <geometry_msgs__msg__Vector3__init>
 801236e:	4604      	mov	r4, r0
 8012370:	b140      	cbz	r0, 8012384 <geometry_msgs__msg__Twist__init+0x20>
 8012372:	f105 0618 	add.w	r6, r5, #24
 8012376:	4630      	mov	r0, r6
 8012378:	f000 f824 	bl	80123c4 <geometry_msgs__msg__Vector3__init>
 801237c:	4604      	mov	r4, r0
 801237e:	b168      	cbz	r0, 801239c <geometry_msgs__msg__Twist__init+0x38>
 8012380:	4620      	mov	r0, r4
 8012382:	bd70      	pop	{r4, r5, r6, pc}
 8012384:	4628      	mov	r0, r5
 8012386:	f000 f821 	bl	80123cc <geometry_msgs__msg__Vector3__fini>
 801238a:	f105 0018 	add.w	r0, r5, #24
 801238e:	f000 f81d 	bl	80123cc <geometry_msgs__msg__Vector3__fini>
 8012392:	4620      	mov	r0, r4
 8012394:	bd70      	pop	{r4, r5, r6, pc}
 8012396:	4604      	mov	r4, r0
 8012398:	4620      	mov	r0, r4
 801239a:	bd70      	pop	{r4, r5, r6, pc}
 801239c:	4628      	mov	r0, r5
 801239e:	f000 f815 	bl	80123cc <geometry_msgs__msg__Vector3__fini>
 80123a2:	4630      	mov	r0, r6
 80123a4:	f000 f812 	bl	80123cc <geometry_msgs__msg__Vector3__fini>
 80123a8:	e7ea      	b.n	8012380 <geometry_msgs__msg__Twist__init+0x1c>
 80123aa:	bf00      	nop

080123ac <geometry_msgs__msg__Twist__fini>:
 80123ac:	b148      	cbz	r0, 80123c2 <geometry_msgs__msg__Twist__fini+0x16>
 80123ae:	b510      	push	{r4, lr}
 80123b0:	4604      	mov	r4, r0
 80123b2:	f000 f80b 	bl	80123cc <geometry_msgs__msg__Vector3__fini>
 80123b6:	f104 0018 	add.w	r0, r4, #24
 80123ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123be:	f000 b805 	b.w	80123cc <geometry_msgs__msg__Vector3__fini>
 80123c2:	4770      	bx	lr

080123c4 <geometry_msgs__msg__Vector3__init>:
 80123c4:	3800      	subs	r0, #0
 80123c6:	bf18      	it	ne
 80123c8:	2001      	movne	r0, #1
 80123ca:	4770      	bx	lr

080123cc <geometry_msgs__msg__Vector3__fini>:
 80123cc:	4770      	bx	lr
 80123ce:	bf00      	nop

080123d0 <uxr_buffer_delete_entity>:
 80123d0:	b510      	push	{r4, lr}
 80123d2:	2300      	movs	r3, #0
 80123d4:	b08e      	sub	sp, #56	@ 0x38
 80123d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80123da:	2303      	movs	r3, #3
 80123dc:	9300      	str	r3, [sp, #0]
 80123de:	2204      	movs	r2, #4
 80123e0:	ab06      	add	r3, sp, #24
 80123e2:	4604      	mov	r4, r0
 80123e4:	9103      	str	r1, [sp, #12]
 80123e6:	f001 f951 	bl	801368c <uxr_prepare_stream_to_write_submessage>
 80123ea:	b918      	cbnz	r0, 80123f4 <uxr_buffer_delete_entity+0x24>
 80123ec:	4604      	mov	r4, r0
 80123ee:	4620      	mov	r0, r4
 80123f0:	b00e      	add	sp, #56	@ 0x38
 80123f2:	bd10      	pop	{r4, pc}
 80123f4:	9902      	ldr	r1, [sp, #8]
 80123f6:	aa05      	add	r2, sp, #20
 80123f8:	4620      	mov	r0, r4
 80123fa:	f001 fa7d 	bl	80138f8 <uxr_init_base_object_request>
 80123fe:	a905      	add	r1, sp, #20
 8012400:	4604      	mov	r4, r0
 8012402:	a806      	add	r0, sp, #24
 8012404:	f002 fcce 	bl	8014da4 <uxr_serialize_DELETE_Payload>
 8012408:	4620      	mov	r0, r4
 801240a:	b00e      	add	sp, #56	@ 0x38
 801240c:	bd10      	pop	{r4, pc}
 801240e:	bf00      	nop

08012410 <uxr_common_create_entity>:
 8012410:	b510      	push	{r4, lr}
 8012412:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012416:	b08c      	sub	sp, #48	@ 0x30
 8012418:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801241c:	f1bc 0f01 	cmp.w	ip, #1
 8012420:	bf0c      	ite	eq
 8012422:	f003 0201 	andeq.w	r2, r3, #1
 8012426:	2200      	movne	r2, #0
 8012428:	330e      	adds	r3, #14
 801242a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801242e:	9101      	str	r1, [sp, #4]
 8012430:	441a      	add	r2, r3
 8012432:	2301      	movs	r3, #1
 8012434:	9300      	str	r3, [sp, #0]
 8012436:	9903      	ldr	r1, [sp, #12]
 8012438:	ab04      	add	r3, sp, #16
 801243a:	b292      	uxth	r2, r2
 801243c:	4604      	mov	r4, r0
 801243e:	f001 f925 	bl	801368c <uxr_prepare_stream_to_write_submessage>
 8012442:	b918      	cbnz	r0, 801244c <uxr_common_create_entity+0x3c>
 8012444:	4604      	mov	r4, r0
 8012446:	4620      	mov	r0, r4
 8012448:	b00c      	add	sp, #48	@ 0x30
 801244a:	bd10      	pop	{r4, pc}
 801244c:	9902      	ldr	r1, [sp, #8]
 801244e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012450:	4620      	mov	r0, r4
 8012452:	f001 fa51 	bl	80138f8 <uxr_init_base_object_request>
 8012456:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012458:	4604      	mov	r4, r0
 801245a:	a804      	add	r0, sp, #16
 801245c:	f002 fbfe 	bl	8014c5c <uxr_serialize_CREATE_Payload>
 8012460:	4620      	mov	r0, r4
 8012462:	b00c      	add	sp, #48	@ 0x30
 8012464:	bd10      	pop	{r4, pc}
 8012466:	bf00      	nop

08012468 <uxr_buffer_create_participant_bin>:
 8012468:	b570      	push	{r4, r5, r6, lr}
 801246a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801246e:	ac11      	add	r4, sp, #68	@ 0x44
 8012470:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8012474:	2303      	movs	r3, #3
 8012476:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801247a:	7223      	strb	r3, [r4, #8]
 801247c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801247e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012482:	2201      	movs	r2, #1
 8012484:	2100      	movs	r1, #0
 8012486:	4605      	mov	r5, r0
 8012488:	7122      	strb	r2, [r4, #4]
 801248a:	f88d 1014 	strb.w	r1, [sp, #20]
 801248e:	b1cb      	cbz	r3, 80124c4 <uxr_buffer_create_participant_bin+0x5c>
 8012490:	f88d 201c 	strb.w	r2, [sp, #28]
 8012494:	9308      	str	r3, [sp, #32]
 8012496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801249a:	a915      	add	r1, sp, #84	@ 0x54
 801249c:	a809      	add	r0, sp, #36	@ 0x24
 801249e:	f7fe f801 	bl	80104a4 <ucdr_init_buffer>
 80124a2:	a905      	add	r1, sp, #20
 80124a4:	a809      	add	r0, sp, #36	@ 0x24
 80124a6:	f001 ffbb 	bl	8014420 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80124aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80124ac:	9600      	str	r6, [sp, #0]
 80124ae:	9401      	str	r4, [sp, #4]
 80124b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80124b4:	60e3      	str	r3, [r4, #12]
 80124b6:	4628      	mov	r0, r5
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	f7ff ffa9 	bl	8012410 <uxr_common_create_entity>
 80124be:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80124c2:	bd70      	pop	{r4, r5, r6, pc}
 80124c4:	f88d 301c 	strb.w	r3, [sp, #28]
 80124c8:	e7e5      	b.n	8012496 <uxr_buffer_create_participant_bin+0x2e>
 80124ca:	bf00      	nop

080124cc <uxr_buffer_create_topic_bin>:
 80124cc:	b570      	push	{r4, r5, r6, lr}
 80124ce:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80124d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80124d6:	9105      	str	r1, [sp, #20]
 80124d8:	4605      	mov	r5, r0
 80124da:	a997      	add	r1, sp, #604	@ 0x25c
 80124dc:	4618      	mov	r0, r3
 80124de:	2302      	movs	r3, #2
 80124e0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80124e4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80124e8:	f000 f996 	bl	8012818 <uxr_object_id_to_raw>
 80124ec:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80124ee:	9306      	str	r3, [sp, #24]
 80124f0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80124f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80124f4:	2303      	movs	r3, #3
 80124f6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80124fa:	2301      	movs	r3, #1
 80124fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012500:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012504:	a917      	add	r1, sp, #92	@ 0x5c
 8012506:	2300      	movs	r3, #0
 8012508:	a80b      	add	r0, sp, #44	@ 0x2c
 801250a:	f88d 301c 	strb.w	r3, [sp, #28]
 801250e:	f7fd ffc9 	bl	80104a4 <ucdr_init_buffer>
 8012512:	a906      	add	r1, sp, #24
 8012514:	a80b      	add	r0, sp, #44	@ 0x2c
 8012516:	f001 ffa5 	bl	8014464 <uxr_serialize_OBJK_Topic_Binary>
 801251a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801251c:	9316      	str	r3, [sp, #88]	@ 0x58
 801251e:	ac13      	add	r4, sp, #76	@ 0x4c
 8012520:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012524:	9600      	str	r6, [sp, #0]
 8012526:	9401      	str	r4, [sp, #4]
 8012528:	b29b      	uxth	r3, r3
 801252a:	4628      	mov	r0, r5
 801252c:	f7ff ff70 	bl	8012410 <uxr_common_create_entity>
 8012530:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012534:	bd70      	pop	{r4, r5, r6, pc}
 8012536:	bf00      	nop

08012538 <uxr_buffer_create_publisher_bin>:
 8012538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801253a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801253e:	4605      	mov	r5, r0
 8012540:	9105      	str	r1, [sp, #20]
 8012542:	4618      	mov	r0, r3
 8012544:	2603      	movs	r6, #3
 8012546:	a992      	add	r1, sp, #584	@ 0x248
 8012548:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801254c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012550:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012554:	f000 f960 	bl	8012818 <uxr_object_id_to_raw>
 8012558:	2300      	movs	r3, #0
 801255a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801255e:	a912      	add	r1, sp, #72	@ 0x48
 8012560:	a806      	add	r0, sp, #24
 8012562:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012566:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801256a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801256e:	f7fd ff99 	bl	80104a4 <ucdr_init_buffer>
 8012572:	a993      	add	r1, sp, #588	@ 0x24c
 8012574:	a806      	add	r0, sp, #24
 8012576:	f002 f829 	bl	80145cc <uxr_serialize_OBJK_Publisher_Binary>
 801257a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801257c:	9311      	str	r3, [sp, #68]	@ 0x44
 801257e:	ac0e      	add	r4, sp, #56	@ 0x38
 8012580:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012584:	9700      	str	r7, [sp, #0]
 8012586:	9401      	str	r4, [sp, #4]
 8012588:	b29b      	uxth	r3, r3
 801258a:	4628      	mov	r0, r5
 801258c:	f7ff ff40 	bl	8012410 <uxr_common_create_entity>
 8012590:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012596:	bf00      	nop

08012598 <uxr_buffer_create_subscriber_bin>:
 8012598:	b570      	push	{r4, r5, r6, lr}
 801259a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801259e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80125a2:	9105      	str	r1, [sp, #20]
 80125a4:	4605      	mov	r5, r0
 80125a6:	a992      	add	r1, sp, #584	@ 0x248
 80125a8:	4618      	mov	r0, r3
 80125aa:	2304      	movs	r3, #4
 80125ac:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80125b0:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80125b4:	f000 f930 	bl	8012818 <uxr_object_id_to_raw>
 80125b8:	2300      	movs	r3, #0
 80125ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125be:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80125c2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80125c6:	a912      	add	r1, sp, #72	@ 0x48
 80125c8:	2303      	movs	r3, #3
 80125ca:	a806      	add	r0, sp, #24
 80125cc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80125d0:	f7fd ff68 	bl	80104a4 <ucdr_init_buffer>
 80125d4:	a993      	add	r1, sp, #588	@ 0x24c
 80125d6:	a806      	add	r0, sp, #24
 80125d8:	f002 f8a8 	bl	801472c <uxr_serialize_OBJK_Subscriber_Binary>
 80125dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125de:	9311      	str	r3, [sp, #68]	@ 0x44
 80125e0:	ac0e      	add	r4, sp, #56	@ 0x38
 80125e2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80125e6:	9600      	str	r6, [sp, #0]
 80125e8:	9401      	str	r4, [sp, #4]
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	4628      	mov	r0, r5
 80125ee:	f7ff ff0f 	bl	8012410 <uxr_common_create_entity>
 80125f2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80125f6:	bd70      	pop	{r4, r5, r6, pc}

080125f8 <uxr_buffer_create_datawriter_bin>:
 80125f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125fc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012600:	ac1d      	add	r4, sp, #116	@ 0x74
 8012602:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012606:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801260a:	9105      	str	r1, [sp, #20]
 801260c:	4606      	mov	r6, r0
 801260e:	a9a1      	add	r1, sp, #644	@ 0x284
 8012610:	4618      	mov	r0, r3
 8012612:	2305      	movs	r3, #5
 8012614:	7123      	strb	r3, [r4, #4]
 8012616:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801261a:	2703      	movs	r7, #3
 801261c:	f000 f8fc 	bl	8012818 <uxr_object_id_to_raw>
 8012620:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012622:	7227      	strb	r7, [r4, #8]
 8012624:	a90e      	add	r1, sp, #56	@ 0x38
 8012626:	f000 f8f7 	bl	8012818 <uxr_object_id_to_raw>
 801262a:	2300      	movs	r3, #0
 801262c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012630:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8012634:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012638:	3d00      	subs	r5, #0
 801263a:	bf18      	it	ne
 801263c:	2501      	movne	r5, #1
 801263e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012642:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012646:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801264a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801264e:	2301      	movs	r3, #1
 8012650:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012654:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012658:	bb8a      	cbnz	r2, 80126be <uxr_buffer_create_datawriter_bin+0xc6>
 801265a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801265e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012662:	f04f 0c13 	mov.w	ip, #19
 8012666:	250b      	movs	r5, #11
 8012668:	2221      	movs	r2, #33	@ 0x21
 801266a:	2111      	movs	r1, #17
 801266c:	2009      	movs	r0, #9
 801266e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8012672:	b923      	cbnz	r3, 801267e <uxr_buffer_create_datawriter_bin+0x86>
 8012674:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8012678:	4672      	mov	r2, lr
 801267a:	4661      	mov	r1, ip
 801267c:	4628      	mov	r0, r5
 801267e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8012682:	2b01      	cmp	r3, #1
 8012684:	d025      	beq.n	80126d2 <uxr_buffer_create_datawriter_bin+0xda>
 8012686:	2b03      	cmp	r3, #3
 8012688:	d029      	beq.n	80126de <uxr_buffer_create_datawriter_bin+0xe6>
 801268a:	b32b      	cbz	r3, 80126d8 <uxr_buffer_create_datawriter_bin+0xe0>
 801268c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012690:	a921      	add	r1, sp, #132	@ 0x84
 8012692:	a806      	add	r0, sp, #24
 8012694:	f7fd ff06 	bl	80104a4 <ucdr_init_buffer>
 8012698:	a90e      	add	r1, sp, #56	@ 0x38
 801269a:	a806      	add	r0, sp, #24
 801269c:	f002 f8f8 	bl	8014890 <uxr_serialize_OBJK_DataWriter_Binary>
 80126a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126a2:	f8cd 8000 	str.w	r8, [sp]
 80126a6:	9401      	str	r4, [sp, #4]
 80126a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80126ac:	60e3      	str	r3, [r4, #12]
 80126ae:	4630      	mov	r0, r6
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	f7ff fead 	bl	8012410 <uxr_common_create_entity>
 80126b6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80126ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126be:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80126c2:	f04f 0c12 	mov.w	ip, #18
 80126c6:	250a      	movs	r5, #10
 80126c8:	2220      	movs	r2, #32
 80126ca:	2110      	movs	r1, #16
 80126cc:	2008      	movs	r0, #8
 80126ce:	2702      	movs	r7, #2
 80126d0:	e7cd      	b.n	801266e <uxr_buffer_create_datawriter_bin+0x76>
 80126d2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80126d6:	e7d9      	b.n	801268c <uxr_buffer_create_datawriter_bin+0x94>
 80126d8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80126dc:	e7d6      	b.n	801268c <uxr_buffer_create_datawriter_bin+0x94>
 80126de:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80126e2:	e7d3      	b.n	801268c <uxr_buffer_create_datawriter_bin+0x94>

080126e4 <uxr_buffer_create_datareader_bin>:
 80126e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80126ec:	ac1f      	add	r4, sp, #124	@ 0x7c
 80126ee:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80126f2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80126f6:	9105      	str	r1, [sp, #20]
 80126f8:	4606      	mov	r6, r0
 80126fa:	a9a3      	add	r1, sp, #652	@ 0x28c
 80126fc:	4618      	mov	r0, r3
 80126fe:	2306      	movs	r3, #6
 8012700:	7123      	strb	r3, [r4, #4]
 8012702:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8012706:	2703      	movs	r7, #3
 8012708:	f000 f886 	bl	8012818 <uxr_object_id_to_raw>
 801270c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801270e:	7227      	strb	r7, [r4, #8]
 8012710:	a90e      	add	r1, sp, #56	@ 0x38
 8012712:	f000 f881 	bl	8012818 <uxr_object_id_to_raw>
 8012716:	2300      	movs	r3, #0
 8012718:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801271c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8012720:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8012724:	3d00      	subs	r5, #0
 8012726:	bf18      	it	ne
 8012728:	2501      	movne	r5, #1
 801272a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801272e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012732:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012736:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801273a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801273e:	2301      	movs	r3, #1
 8012740:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012744:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012748:	bb8a      	cbnz	r2, 80127ae <uxr_buffer_create_datareader_bin+0xca>
 801274a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801274e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012752:	f04f 0c13 	mov.w	ip, #19
 8012756:	250b      	movs	r5, #11
 8012758:	2221      	movs	r2, #33	@ 0x21
 801275a:	2111      	movs	r1, #17
 801275c:	2009      	movs	r0, #9
 801275e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8012762:	b923      	cbnz	r3, 801276e <uxr_buffer_create_datareader_bin+0x8a>
 8012764:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8012768:	4672      	mov	r2, lr
 801276a:	4661      	mov	r1, ip
 801276c:	4628      	mov	r0, r5
 801276e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8012772:	2b01      	cmp	r3, #1
 8012774:	d025      	beq.n	80127c2 <uxr_buffer_create_datareader_bin+0xde>
 8012776:	2b03      	cmp	r3, #3
 8012778:	d029      	beq.n	80127ce <uxr_buffer_create_datareader_bin+0xea>
 801277a:	b32b      	cbz	r3, 80127c8 <uxr_buffer_create_datareader_bin+0xe4>
 801277c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012780:	a923      	add	r1, sp, #140	@ 0x8c
 8012782:	a806      	add	r0, sp, #24
 8012784:	f7fd fe8e 	bl	80104a4 <ucdr_init_buffer>
 8012788:	a90e      	add	r1, sp, #56	@ 0x38
 801278a:	a806      	add	r0, sp, #24
 801278c:	f002 f844 	bl	8014818 <uxr_serialize_OBJK_DataReader_Binary>
 8012790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012792:	f8cd 8000 	str.w	r8, [sp]
 8012796:	9401      	str	r4, [sp, #4]
 8012798:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801279c:	60e3      	str	r3, [r4, #12]
 801279e:	4630      	mov	r0, r6
 80127a0:	b29b      	uxth	r3, r3
 80127a2:	f7ff fe35 	bl	8012410 <uxr_common_create_entity>
 80127a6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80127aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ae:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80127b2:	f04f 0c12 	mov.w	ip, #18
 80127b6:	250a      	movs	r5, #10
 80127b8:	2220      	movs	r2, #32
 80127ba:	2110      	movs	r1, #16
 80127bc:	2008      	movs	r0, #8
 80127be:	2702      	movs	r7, #2
 80127c0:	e7cd      	b.n	801275e <uxr_buffer_create_datareader_bin+0x7a>
 80127c2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80127c6:	e7d9      	b.n	801277c <uxr_buffer_create_datareader_bin+0x98>
 80127c8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80127cc:	e7d6      	b.n	801277c <uxr_buffer_create_datareader_bin+0x98>
 80127ce:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80127d2:	e7d3      	b.n	801277c <uxr_buffer_create_datareader_bin+0x98>

080127d4 <uxr_object_id>:
 80127d4:	b082      	sub	sp, #8
 80127d6:	2300      	movs	r3, #0
 80127d8:	f88d 1006 	strb.w	r1, [sp, #6]
 80127dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80127e0:	f360 030f 	bfi	r3, r0, #0, #16
 80127e4:	f362 431f 	bfi	r3, r2, #16, #16
 80127e8:	4618      	mov	r0, r3
 80127ea:	b002      	add	sp, #8
 80127ec:	4770      	bx	lr
 80127ee:	bf00      	nop

080127f0 <uxr_object_id_from_raw>:
 80127f0:	7843      	ldrb	r3, [r0, #1]
 80127f2:	7801      	ldrb	r1, [r0, #0]
 80127f4:	b082      	sub	sp, #8
 80127f6:	f003 020f 	and.w	r2, r3, #15
 80127fa:	f88d 2006 	strb.w	r2, [sp, #6]
 80127fe:	091b      	lsrs	r3, r3, #4
 8012800:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012804:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8012808:	2000      	movs	r0, #0
 801280a:	f363 000f 	bfi	r0, r3, #0, #16
 801280e:	f362 401f 	bfi	r0, r2, #16, #16
 8012812:	b002      	add	sp, #8
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop

08012818 <uxr_object_id_to_raw>:
 8012818:	4602      	mov	r2, r0
 801281a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801281e:	b082      	sub	sp, #8
 8012820:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8012824:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8012828:	f881 c000 	strb.w	ip, [r1]
 801282c:	7048      	strb	r0, [r1, #1]
 801282e:	b002      	add	sp, #8
 8012830:	4770      	bx	lr
 8012832:	bf00      	nop

08012834 <on_get_fragmentation_info>:
 8012834:	b500      	push	{lr}
 8012836:	b08b      	sub	sp, #44	@ 0x2c
 8012838:	4601      	mov	r1, r0
 801283a:	2204      	movs	r2, #4
 801283c:	a802      	add	r0, sp, #8
 801283e:	f7fd fe31 	bl	80104a4 <ucdr_init_buffer>
 8012842:	f10d 0305 	add.w	r3, sp, #5
 8012846:	f10d 0206 	add.w	r2, sp, #6
 801284a:	a901      	add	r1, sp, #4
 801284c:	a802      	add	r0, sp, #8
 801284e:	f001 f9d5 	bl	8013bfc <uxr_read_submessage_header>
 8012852:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012856:	2b0d      	cmp	r3, #13
 8012858:	d003      	beq.n	8012862 <on_get_fragmentation_info+0x2e>
 801285a:	2000      	movs	r0, #0
 801285c:	b00b      	add	sp, #44	@ 0x2c
 801285e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012862:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012866:	f013 0f02 	tst.w	r3, #2
 801286a:	bf14      	ite	ne
 801286c:	2002      	movne	r0, #2
 801286e:	2001      	moveq	r0, #1
 8012870:	b00b      	add	sp, #44	@ 0x2c
 8012872:	f85d fb04 	ldr.w	pc, [sp], #4
 8012876:	bf00      	nop

08012878 <read_submessage_get_info>:
 8012878:	b570      	push	{r4, r5, r6, lr}
 801287a:	2500      	movs	r5, #0
 801287c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8012880:	4604      	mov	r4, r0
 8012882:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8012886:	460e      	mov	r6, r1
 8012888:	a810      	add	r0, sp, #64	@ 0x40
 801288a:	4629      	mov	r1, r5
 801288c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8012890:	f009 fcd0 	bl	801c234 <memset>
 8012894:	a903      	add	r1, sp, #12
 8012896:	4630      	mov	r0, r6
 8012898:	f002 fa70 	bl	8014d7c <uxr_deserialize_GET_INFO_Payload>
 801289c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80128a0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80128a4:	4620      	mov	r0, r4
 80128a6:	f001 f81f 	bl	80138e8 <uxr_session_header_offset>
 80128aa:	462b      	mov	r3, r5
 80128ac:	9000      	str	r0, [sp, #0]
 80128ae:	220c      	movs	r2, #12
 80128b0:	a905      	add	r1, sp, #20
 80128b2:	a808      	add	r0, sp, #32
 80128b4:	f7fd fde4 	bl	8010480 <ucdr_init_buffer_origin_offset>
 80128b8:	a910      	add	r1, sp, #64	@ 0x40
 80128ba:	a808      	add	r0, sp, #32
 80128bc:	f002 fad0 	bl	8014e60 <uxr_serialize_INFO_Payload>
 80128c0:	9b08      	ldr	r3, [sp, #32]
 80128c2:	462a      	mov	r2, r5
 80128c4:	4629      	mov	r1, r5
 80128c6:	4620      	mov	r0, r4
 80128c8:	f000 ffb8 	bl	801383c <uxr_stamp_session_header>
 80128cc:	a808      	add	r0, sp, #32
 80128ce:	f7fd fe15 	bl	80104fc <ucdr_buffer_length>
 80128d2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80128d4:	4602      	mov	r2, r0
 80128d6:	a905      	add	r1, sp, #20
 80128d8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80128dc:	47a0      	blx	r4
 80128de:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80128e2:	bd70      	pop	{r4, r5, r6, pc}

080128e4 <write_submessage_acknack.isra.0>:
 80128e4:	b570      	push	{r4, r5, r6, lr}
 80128e6:	b092      	sub	sp, #72	@ 0x48
 80128e8:	4605      	mov	r5, r0
 80128ea:	460e      	mov	r6, r1
 80128ec:	4614      	mov	r4, r2
 80128ee:	f000 fffb 	bl	80138e8 <uxr_session_header_offset>
 80128f2:	a905      	add	r1, sp, #20
 80128f4:	9000      	str	r0, [sp, #0]
 80128f6:	2300      	movs	r3, #0
 80128f8:	a80a      	add	r0, sp, #40	@ 0x28
 80128fa:	2211      	movs	r2, #17
 80128fc:	f7fd fdc0 	bl	8010480 <ucdr_init_buffer_origin_offset>
 8012900:	2218      	movs	r2, #24
 8012902:	fb02 5404 	mla	r4, r2, r4, r5
 8012906:	2300      	movs	r3, #0
 8012908:	2205      	movs	r2, #5
 801290a:	3450      	adds	r4, #80	@ 0x50
 801290c:	210a      	movs	r1, #10
 801290e:	a80a      	add	r0, sp, #40	@ 0x28
 8012910:	f001 f95a 	bl	8013bc8 <uxr_buffer_submessage_header>
 8012914:	a903      	add	r1, sp, #12
 8012916:	4620      	mov	r0, r4
 8012918:	f007 fac0 	bl	8019e9c <uxr_compute_acknack>
 801291c:	ba40      	rev16	r0, r0
 801291e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012922:	a903      	add	r1, sp, #12
 8012924:	a80a      	add	r0, sp, #40	@ 0x28
 8012926:	f88d 6010 	strb.w	r6, [sp, #16]
 801292a:	f002 fb09 	bl	8014f40 <uxr_serialize_ACKNACK_Payload>
 801292e:	2200      	movs	r2, #0
 8012930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012932:	4611      	mov	r1, r2
 8012934:	4628      	mov	r0, r5
 8012936:	f000 ff81 	bl	801383c <uxr_stamp_session_header>
 801293a:	a80a      	add	r0, sp, #40	@ 0x28
 801293c:	f7fd fdde 	bl	80104fc <ucdr_buffer_length>
 8012940:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8012942:	4602      	mov	r2, r0
 8012944:	a905      	add	r1, sp, #20
 8012946:	e9d3 0400 	ldrd	r0, r4, [r3]
 801294a:	47a0      	blx	r4
 801294c:	b012      	add	sp, #72	@ 0x48
 801294e:	bd70      	pop	{r4, r5, r6, pc}

08012950 <uxr_init_session>:
 8012950:	b510      	push	{r4, lr}
 8012952:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012988 <uxr_init_session+0x38>
 8012956:	2300      	movs	r3, #0
 8012958:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801295c:	4604      	mov	r4, r0
 801295e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8012962:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8012966:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801296a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801296e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8012972:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8012976:	2181      	movs	r1, #129	@ 0x81
 8012978:	f000 fecc 	bl	8013714 <uxr_init_session_info>
 801297c:	f104 0008 	add.w	r0, r4, #8
 8012980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012984:	f001 b83c 	b.w	8013a00 <uxr_init_stream_storage>
	...

08012990 <uxr_set_status_callback>:
 8012990:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8012994:	4770      	bx	lr
 8012996:	bf00      	nop

08012998 <uxr_set_topic_callback>:
 8012998:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801299c:	4770      	bx	lr
 801299e:	bf00      	nop

080129a0 <uxr_set_request_callback>:
 80129a0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80129a4:	4770      	bx	lr
 80129a6:	bf00      	nop

080129a8 <uxr_set_reply_callback>:
 80129a8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80129ac:	4770      	bx	lr
 80129ae:	bf00      	nop

080129b0 <uxr_create_output_best_effort_stream>:
 80129b0:	b510      	push	{r4, lr}
 80129b2:	b084      	sub	sp, #16
 80129b4:	e9cd 2100 	strd	r2, r1, [sp]
 80129b8:	4604      	mov	r4, r0
 80129ba:	f000 ff95 	bl	80138e8 <uxr_session_header_offset>
 80129be:	e9dd 2100 	ldrd	r2, r1, [sp]
 80129c2:	4603      	mov	r3, r0
 80129c4:	f104 0008 	add.w	r0, r4, #8
 80129c8:	b004      	add	sp, #16
 80129ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ce:	f001 b861 	b.w	8013a94 <uxr_add_output_best_effort_buffer>
 80129d2:	bf00      	nop

080129d4 <uxr_create_output_reliable_stream>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	b088      	sub	sp, #32
 80129d8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80129dc:	4604      	mov	r4, r0
 80129de:	9303      	str	r3, [sp, #12]
 80129e0:	f000 ff82 	bl	80138e8 <uxr_session_header_offset>
 80129e4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80129e8:	9000      	str	r0, [sp, #0]
 80129ea:	9905      	ldr	r1, [sp, #20]
 80129ec:	f104 0008 	add.w	r0, r4, #8
 80129f0:	f001 f864 	bl	8013abc <uxr_add_output_reliable_buffer>
 80129f4:	2200      	movs	r2, #0
 80129f6:	b2c3      	uxtb	r3, r0
 80129f8:	f363 0207 	bfi	r2, r3, #0, #8
 80129fc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012a00:	f363 220f 	bfi	r2, r3, #8, #8
 8012a04:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012a08:	f363 4217 	bfi	r2, r3, #16, #8
 8012a0c:	0e03      	lsrs	r3, r0, #24
 8012a0e:	f363 621f 	bfi	r2, r3, #24, #8
 8012a12:	4610      	mov	r0, r2
 8012a14:	b008      	add	sp, #32
 8012a16:	bd10      	pop	{r4, pc}

08012a18 <uxr_create_input_best_effort_stream>:
 8012a18:	b082      	sub	sp, #8
 8012a1a:	3008      	adds	r0, #8
 8012a1c:	b002      	add	sp, #8
 8012a1e:	f001 b867 	b.w	8013af0 <uxr_add_input_best_effort_buffer>
 8012a22:	bf00      	nop

08012a24 <uxr_create_input_reliable_stream>:
 8012a24:	b510      	push	{r4, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	4c0b      	ldr	r4, [pc, #44]	@ (8012a58 <uxr_create_input_reliable_stream+0x34>)
 8012a2a:	9400      	str	r4, [sp, #0]
 8012a2c:	3008      	adds	r0, #8
 8012a2e:	f001 f875 	bl	8013b1c <uxr_add_input_reliable_buffer>
 8012a32:	2200      	movs	r2, #0
 8012a34:	b2c3      	uxtb	r3, r0
 8012a36:	f363 0207 	bfi	r2, r3, #0, #8
 8012a3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012a3e:	f363 220f 	bfi	r2, r3, #8, #8
 8012a42:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012a46:	f363 4217 	bfi	r2, r3, #16, #8
 8012a4a:	0e03      	lsrs	r3, r0, #24
 8012a4c:	f363 621f 	bfi	r2, r3, #24, #8
 8012a50:	4610      	mov	r0, r2
 8012a52:	b004      	add	sp, #16
 8012a54:	bd10      	pop	{r4, pc}
 8012a56:	bf00      	nop
 8012a58:	08012835 	.word	0x08012835

08012a5c <uxr_epoch_nanos>:
 8012a5c:	b510      	push	{r4, lr}
 8012a5e:	4604      	mov	r4, r0
 8012a60:	f001 f912 	bl	8013c88 <uxr_nanos>
 8012a64:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012a68:	1ac0      	subs	r0, r0, r3
 8012a6a:	eb61 0102 	sbc.w	r1, r1, r2
 8012a6e:	bd10      	pop	{r4, pc}

08012a70 <uxr_flash_output_streams>:
 8012a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a74:	7e03      	ldrb	r3, [r0, #24]
 8012a76:	b084      	sub	sp, #16
 8012a78:	4604      	mov	r4, r0
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d035      	beq.n	8012aea <uxr_flash_output_streams+0x7a>
 8012a7e:	f04f 0900 	mov.w	r9, #0
 8012a82:	4648      	mov	r0, r9
 8012a84:	f10d 0802 	add.w	r8, sp, #2
 8012a88:	af03      	add	r7, sp, #12
 8012a8a:	ae02      	add	r6, sp, #8
 8012a8c:	e006      	b.n	8012a9c <uxr_flash_output_streams+0x2c>
 8012a8e:	7e23      	ldrb	r3, [r4, #24]
 8012a90:	f109 0901 	add.w	r9, r9, #1
 8012a94:	fa5f f089 	uxtb.w	r0, r9
 8012a98:	4283      	cmp	r3, r0
 8012a9a:	d926      	bls.n	8012aea <uxr_flash_output_streams+0x7a>
 8012a9c:	2201      	movs	r2, #1
 8012a9e:	4611      	mov	r1, r2
 8012aa0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012aa4:	f000 ff58 	bl	8013958 <uxr_stream_id>
 8012aa8:	3508      	adds	r5, #8
 8012aaa:	4684      	mov	ip, r0
 8012aac:	4643      	mov	r3, r8
 8012aae:	463a      	mov	r2, r7
 8012ab0:	4631      	mov	r1, r6
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	f8cd c004 	str.w	ip, [sp, #4]
 8012ab8:	f007 fa76 	bl	8019fa8 <uxr_prepare_best_effort_buffer_to_send>
 8012abc:	2800      	cmp	r0, #0
 8012abe:	d0e6      	beq.n	8012a8e <uxr_flash_output_streams+0x1e>
 8012ac0:	9b02      	ldr	r3, [sp, #8]
 8012ac2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012ac6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012aca:	4620      	mov	r0, r4
 8012acc:	f000 feb6 	bl	801383c <uxr_stamp_session_header>
 8012ad0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012ad2:	9a03      	ldr	r2, [sp, #12]
 8012ad4:	685d      	ldr	r5, [r3, #4]
 8012ad6:	6818      	ldr	r0, [r3, #0]
 8012ad8:	9902      	ldr	r1, [sp, #8]
 8012ada:	47a8      	blx	r5
 8012adc:	f109 0901 	add.w	r9, r9, #1
 8012ae0:	7e23      	ldrb	r3, [r4, #24]
 8012ae2:	fa5f f089 	uxtb.w	r0, r9
 8012ae6:	4283      	cmp	r3, r0
 8012ae8:	d8d8      	bhi.n	8012a9c <uxr_flash_output_streams+0x2c>
 8012aea:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012aee:	b38b      	cbz	r3, 8012b54 <uxr_flash_output_streams+0xe4>
 8012af0:	f04f 0900 	mov.w	r9, #0
 8012af4:	f10d 0802 	add.w	r8, sp, #2
 8012af8:	af03      	add	r7, sp, #12
 8012afa:	ae02      	add	r6, sp, #8
 8012afc:	4648      	mov	r0, r9
 8012afe:	2201      	movs	r2, #1
 8012b00:	2102      	movs	r1, #2
 8012b02:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012b06:	f000 ff27 	bl	8013958 <uxr_stream_id>
 8012b0a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012b0e:	3520      	adds	r5, #32
 8012b10:	9001      	str	r0, [sp, #4]
 8012b12:	e00d      	b.n	8012b30 <uxr_flash_output_streams+0xc0>
 8012b14:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012b18:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012b1c:	9b02      	ldr	r3, [sp, #8]
 8012b1e:	f000 fe8d 	bl	801383c <uxr_stamp_session_header>
 8012b22:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012b24:	9a03      	ldr	r2, [sp, #12]
 8012b26:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8012b2a:	9902      	ldr	r1, [sp, #8]
 8012b2c:	6818      	ldr	r0, [r3, #0]
 8012b2e:	47d0      	blx	sl
 8012b30:	4643      	mov	r3, r8
 8012b32:	463a      	mov	r2, r7
 8012b34:	4631      	mov	r1, r6
 8012b36:	4628      	mov	r0, r5
 8012b38:	f007 fc54 	bl	801a3e4 <uxr_prepare_next_reliable_buffer_to_send>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	4620      	mov	r0, r4
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d1e7      	bne.n	8012b14 <uxr_flash_output_streams+0xa4>
 8012b44:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012b48:	f109 0901 	add.w	r9, r9, #1
 8012b4c:	fa5f f089 	uxtb.w	r0, r9
 8012b50:	4283      	cmp	r3, r0
 8012b52:	d8d4      	bhi.n	8012afe <uxr_flash_output_streams+0x8e>
 8012b54:	b004      	add	sp, #16
 8012b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b5a:	bf00      	nop

08012b5c <read_submessage_info>:
 8012b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b60:	460d      	mov	r5, r1
 8012b62:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012b66:	4669      	mov	r1, sp
 8012b68:	4607      	mov	r7, r0
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	f002 f814 	bl	8014b98 <uxr_deserialize_BaseObjectReply>
 8012b70:	a902      	add	r1, sp, #8
 8012b72:	4604      	mov	r4, r0
 8012b74:	4628      	mov	r0, r5
 8012b76:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012b7a:	f7fc fa11 	bl	800efa0 <ucdr_deserialize_bool>
 8012b7e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012b82:	4004      	ands	r4, r0
 8012b84:	b2e4      	uxtb	r4, r4
 8012b86:	b95b      	cbnz	r3, 8012ba0 <read_submessage_info+0x44>
 8012b88:	a987      	add	r1, sp, #540	@ 0x21c
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	f7fc fa08 	bl	800efa0 <ucdr_deserialize_bool>
 8012b90:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8012b94:	4606      	mov	r6, r0
 8012b96:	b94b      	cbnz	r3, 8012bac <read_submessage_info+0x50>
 8012b98:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ba0:	a903      	add	r1, sp, #12
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	f001 fea0 	bl	80148e8 <uxr_deserialize_ObjectVariant>
 8012ba8:	4004      	ands	r4, r0
 8012baa:	e7ed      	b.n	8012b88 <read_submessage_info+0x2c>
 8012bac:	a988      	add	r1, sp, #544	@ 0x220
 8012bae:	4628      	mov	r0, r5
 8012bb0:	f7fc fa24 	bl	800effc <ucdr_deserialize_uint8_t>
 8012bb4:	4234      	tst	r4, r6
 8012bb6:	d0ef      	beq.n	8012b98 <read_submessage_info+0x3c>
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d0ed      	beq.n	8012b98 <read_submessage_info+0x3c>
 8012bbc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012bc0:	2b0d      	cmp	r3, #13
 8012bc2:	d1e9      	bne.n	8012b98 <read_submessage_info+0x3c>
 8012bc4:	a98a      	add	r1, sp, #552	@ 0x228
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	f7fc ffbe 	bl	800fb48 <ucdr_deserialize_int16_t>
 8012bcc:	b140      	cbz	r0, 8012be0 <read_submessage_info+0x84>
 8012bce:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	dd07      	ble.n	8012be6 <read_submessage_info+0x8a>
 8012bd6:	f1b8 0f00 	cmp.w	r8, #0
 8012bda:	bf14      	ite	ne
 8012bdc:	2001      	movne	r0, #1
 8012bde:	2002      	moveq	r0, #2
 8012be0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8012be4:	e7d8      	b.n	8012b98 <read_submessage_info+0x3c>
 8012be6:	2000      	movs	r0, #0
 8012be8:	e7fa      	b.n	8012be0 <read_submessage_info+0x84>
 8012bea:	bf00      	nop

08012bec <read_submessage_list>:
 8012bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf0:	b097      	sub	sp, #92	@ 0x5c
 8012bf2:	4ec1      	ldr	r6, [pc, #772]	@ (8012ef8 <read_submessage_list+0x30c>)
 8012bf4:	9209      	str	r2, [sp, #36]	@ 0x24
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	460d      	mov	r5, r1
 8012bfa:	f04f 0801 	mov.w	r8, #1
 8012bfe:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8012c02:	aa0c      	add	r2, sp, #48	@ 0x30
 8012c04:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8012c08:	4628      	mov	r0, r5
 8012c0a:	f000 fff7 	bl	8013bfc <uxr_read_submessage_header>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	f000 813e 	beq.w	8012e90 <read_submessage_list+0x2a4>
 8012c14:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012c18:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8012c1c:	3b02      	subs	r3, #2
 8012c1e:	2b0d      	cmp	r3, #13
 8012c20:	d8ed      	bhi.n	8012bfe <read_submessage_list+0x12>
 8012c22:	a101      	add	r1, pc, #4	@ (adr r1, 8012c28 <read_submessage_list+0x3c>)
 8012c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c28:	08012e87 	.word	0x08012e87
 8012c2c:	08012bff 	.word	0x08012bff
 8012c30:	08012e77 	.word	0x08012e77
 8012c34:	08012e15 	.word	0x08012e15
 8012c38:	08012e0b 	.word	0x08012e0b
 8012c3c:	08012bff 	.word	0x08012bff
 8012c40:	08012bff 	.word	0x08012bff
 8012c44:	08012d6b 	.word	0x08012d6b
 8012c48:	08012cfb 	.word	0x08012cfb
 8012c4c:	08012cbb 	.word	0x08012cbb
 8012c50:	08012bff 	.word	0x08012bff
 8012c54:	08012bff 	.word	0x08012bff
 8012c58:	08012bff 	.word	0x08012bff
 8012c5c:	08012c61 	.word	0x08012c61
 8012c60:	a910      	add	r1, sp, #64	@ 0x40
 8012c62:	4628      	mov	r0, r5
 8012c64:	f002 f9bc 	bl	8014fe0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012c68:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8012c6c:	f1b9 0f00 	cmp.w	r9, #0
 8012c70:	f000 8116 	beq.w	8012ea0 <read_submessage_list+0x2b4>
 8012c74:	f001 f808 	bl	8013c88 <uxr_nanos>
 8012c78:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8012c7a:	4602      	mov	r2, r0
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8012c80:	2100      	movs	r1, #0
 8012c82:	468c      	mov	ip, r1
 8012c84:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8012c88:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8012c8c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012c8e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8012c90:	468c      	mov	ip, r1
 8012c92:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8012c96:	46e2      	mov	sl, ip
 8012c98:	46bc      	mov	ip, r7
 8012c9a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8012c9e:	fbc0 7106 	smlal	r7, r1, r0, r6
 8012ca2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8012ca6:	e9cd 7100 	strd	r7, r1, [sp]
 8012caa:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8012cae:	9106      	str	r1, [sp, #24]
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	47c8      	blx	r9
 8012cb4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8012cb8:	e7a1      	b.n	8012bfe <read_submessage_list+0x12>
 8012cba:	a910      	add	r1, sp, #64	@ 0x40
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	f002 f97d 	bl	8014fbc <uxr_deserialize_HEARTBEAT_Payload>
 8012cc2:	2100      	movs	r1, #0
 8012cc4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012cc8:	f000 fe70 	bl	80139ac <uxr_stream_id_from_raw>
 8012ccc:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012cd0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8012cd2:	4639      	mov	r1, r7
 8012cd4:	f104 0008 	add.w	r0, r4, #8
 8012cd8:	f000 ff56 	bl	8013b88 <uxr_get_input_reliable_stream>
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d08e      	beq.n	8012bfe <read_submessage_list+0x12>
 8012ce0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8012ce4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8012ce8:	f007 f8cc 	bl	8019e84 <uxr_process_heartbeat>
 8012cec:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8012cf0:	463a      	mov	r2, r7
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	f7ff fdf6 	bl	80128e4 <write_submessage_acknack.isra.0>
 8012cf8:	e781      	b.n	8012bfe <read_submessage_list+0x12>
 8012cfa:	a910      	add	r1, sp, #64	@ 0x40
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	f002 f935 	bl	8014f6c <uxr_deserialize_ACKNACK_Payload>
 8012d02:	2100      	movs	r1, #0
 8012d04:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012d08:	f000 fe50 	bl	80139ac <uxr_stream_id_from_raw>
 8012d0c:	900d      	str	r0, [sp, #52]	@ 0x34
 8012d0e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8012d12:	f104 0008 	add.w	r0, r4, #8
 8012d16:	f000 ff23 	bl	8013b60 <uxr_get_output_reliable_stream>
 8012d1a:	4607      	mov	r7, r0
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	f43f af6e 	beq.w	8012bfe <read_submessage_list+0x12>
 8012d22:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8012d26:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8012d2a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8012d2e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012d32:	b289      	uxth	r1, r1
 8012d34:	f007 fc00 	bl	801a538 <uxr_process_acknack>
 8012d38:	4638      	mov	r0, r7
 8012d3a:	f007 fbbd 	bl	801a4b8 <uxr_begin_output_nack_buffer_it>
 8012d3e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012d42:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8012d46:	e006      	b.n	8012d56 <read_submessage_list+0x16a>
 8012d48:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012d4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012d4c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8012d50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012d52:	6818      	ldr	r0, [r3, #0]
 8012d54:	47c8      	blx	r9
 8012d56:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8012d5a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8012d5c:	4651      	mov	r1, sl
 8012d5e:	4638      	mov	r0, r7
 8012d60:	f007 fbac 	bl	801a4bc <uxr_next_reliable_nack_buffer_to_send>
 8012d64:	2800      	cmp	r0, #0
 8012d66:	d1ef      	bne.n	8012d48 <read_submessage_list+0x15c>
 8012d68:	e749      	b.n	8012bfe <read_submessage_list+0x12>
 8012d6a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012d6e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8012d72:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012d76:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8012d7a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8012d7e:	4651      	mov	r1, sl
 8012d80:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012d84:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8012d88:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8012d8c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8012d90:	4628      	mov	r0, r5
 8012d92:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8012d96:	f001 fe49 	bl	8014a2c <uxr_deserialize_BaseObjectRequest>
 8012d9a:	4650      	mov	r0, sl
 8012d9c:	a90f      	add	r1, sp, #60	@ 0x3c
 8012d9e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8012da2:	f000 fdc7 	bl	8013934 <uxr_parse_base_object_request>
 8012da6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8012daa:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012dac:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8012db0:	9110      	str	r1, [sp, #64]	@ 0x40
 8012db2:	3f04      	subs	r7, #4
 8012db4:	f009 090e 	and.w	r9, r9, #14
 8012db8:	b2bf      	uxth	r7, r7
 8012dba:	f1bb 0f00 	cmp.w	fp, #0
 8012dbe:	d006      	beq.n	8012dce <read_submessage_list+0x1e2>
 8012dc0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012dc4:	9300      	str	r3, [sp, #0]
 8012dc6:	4652      	mov	r2, sl
 8012dc8:	2300      	movs	r3, #0
 8012dca:	4620      	mov	r0, r4
 8012dcc:	47d8      	blx	fp
 8012dce:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012dd0:	b16a      	cbz	r2, 8012dee <read_submessage_list+0x202>
 8012dd2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012dd4:	2100      	movs	r1, #0
 8012dd6:	3802      	subs	r0, #2
 8012dd8:	e002      	b.n	8012de0 <read_submessage_list+0x1f4>
 8012dda:	3101      	adds	r1, #1
 8012ddc:	4291      	cmp	r1, r2
 8012dde:	d006      	beq.n	8012dee <read_submessage_list+0x202>
 8012de0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012de4:	4553      	cmp	r3, sl
 8012de6:	d1f8      	bne.n	8012dda <read_submessage_list+0x1ee>
 8012de8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012dea:	2200      	movs	r2, #0
 8012dec:	545a      	strb	r2, [r3, r1]
 8012dee:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8012df2:	9102      	str	r1, [sp, #8]
 8012df4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012df6:	9101      	str	r1, [sp, #4]
 8012df8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012dfa:	9100      	str	r1, [sp, #0]
 8012dfc:	464b      	mov	r3, r9
 8012dfe:	463a      	mov	r2, r7
 8012e00:	4629      	mov	r1, r5
 8012e02:	4620      	mov	r0, r4
 8012e04:	f007 fc56 	bl	801a6b4 <read_submessage_format>
 8012e08:	e6f9      	b.n	8012bfe <read_submessage_list+0x12>
 8012e0a:	4629      	mov	r1, r5
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f7ff fea5 	bl	8012b5c <read_submessage_info>
 8012e12:	e6f4      	b.n	8012bfe <read_submessage_list+0x12>
 8012e14:	2a00      	cmp	r2, #0
 8012e16:	d03e      	beq.n	8012e96 <read_submessage_list+0x2aa>
 8012e18:	a910      	add	r1, sp, #64	@ 0x40
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	f002 f802 	bl	8014e24 <uxr_deserialize_STATUS_Payload>
 8012e20:	a90e      	add	r1, sp, #56	@ 0x38
 8012e22:	aa0d      	add	r2, sp, #52	@ 0x34
 8012e24:	a810      	add	r0, sp, #64	@ 0x40
 8012e26:	f000 fd85 	bl	8013934 <uxr_parse_base_object_request>
 8012e2a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8012e2e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012e30:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8012e34:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8012e38:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012e3a:	f1ba 0f00 	cmp.w	sl, #0
 8012e3e:	d006      	beq.n	8012e4e <read_submessage_list+0x262>
 8012e40:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012e44:	9300      	str	r3, [sp, #0]
 8012e46:	463a      	mov	r2, r7
 8012e48:	464b      	mov	r3, r9
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	47d0      	blx	sl
 8012e4e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012e50:	2a00      	cmp	r2, #0
 8012e52:	f43f aed4 	beq.w	8012bfe <read_submessage_list+0x12>
 8012e56:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012e58:	2100      	movs	r1, #0
 8012e5a:	3802      	subs	r0, #2
 8012e5c:	e003      	b.n	8012e66 <read_submessage_list+0x27a>
 8012e5e:	3101      	adds	r1, #1
 8012e60:	4291      	cmp	r1, r2
 8012e62:	f43f aecc 	beq.w	8012bfe <read_submessage_list+0x12>
 8012e66:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012e6a:	42bb      	cmp	r3, r7
 8012e6c:	d1f7      	bne.n	8012e5e <read_submessage_list+0x272>
 8012e6e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012e70:	f803 9001 	strb.w	r9, [r3, r1]
 8012e74:	e6c3      	b.n	8012bfe <read_submessage_list+0x12>
 8012e76:	2a00      	cmp	r2, #0
 8012e78:	f47f aec1 	bne.w	8012bfe <read_submessage_list+0x12>
 8012e7c:	4629      	mov	r1, r5
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 fc9e 	bl	80137c0 <uxr_read_create_session_status>
 8012e84:	e6bb      	b.n	8012bfe <read_submessage_list+0x12>
 8012e86:	4629      	mov	r1, r5
 8012e88:	4620      	mov	r0, r4
 8012e8a:	f7ff fcf5 	bl	8012878 <read_submessage_get_info>
 8012e8e:	e6b6      	b.n	8012bfe <read_submessage_list+0x12>
 8012e90:	b017      	add	sp, #92	@ 0x5c
 8012e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e96:	4629      	mov	r1, r5
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f000 fc9d 	bl	80137d8 <uxr_read_delete_session_status>
 8012e9e:	e6ae      	b.n	8012bfe <read_submessage_list+0x12>
 8012ea0:	f000 fef2 	bl	8013c88 <uxr_nanos>
 8012ea4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012ea6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012ea8:	464f      	mov	r7, r9
 8012eaa:	fbc3 2706 	smlal	r2, r7, r3, r6
 8012eae:	1812      	adds	r2, r2, r0
 8012eb0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012eb2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8012eb4:	eb47 0101 	adc.w	r1, r7, r1
 8012eb8:	464f      	mov	r7, r9
 8012eba:	fbc3 0706 	smlal	r0, r7, r3, r6
 8012ebe:	463b      	mov	r3, r7
 8012ec0:	4684      	mov	ip, r0
 8012ec2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8012ec6:	fbc7 0906 	smlal	r0, r9, r7, r6
 8012eca:	eb1c 0c00 	adds.w	ip, ip, r0
 8012ece:	464f      	mov	r7, r9
 8012ed0:	eb43 0307 	adc.w	r3, r3, r7
 8012ed4:	ebb2 0c0c 	subs.w	ip, r2, ip
 8012ed8:	eb61 0303 	sbc.w	r3, r1, r3
 8012edc:	0fda      	lsrs	r2, r3, #31
 8012ede:	eb12 020c 	adds.w	r2, r2, ip
 8012ee2:	f143 0300 	adc.w	r3, r3, #0
 8012ee6:	0852      	lsrs	r2, r2, #1
 8012ee8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8012eec:	105b      	asrs	r3, r3, #1
 8012eee:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8012ef2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8012ef6:	e6dd      	b.n	8012cb4 <read_submessage_list+0xc8>
 8012ef8:	3b9aca00 	.word	0x3b9aca00

08012efc <listen_message_reliably>:
 8012efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f00:	1e0b      	subs	r3, r1, #0
 8012f02:	b09d      	sub	sp, #116	@ 0x74
 8012f04:	bfb8      	it	lt
 8012f06:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8012f0a:	4680      	mov	r8, r0
 8012f0c:	9305      	str	r3, [sp, #20]
 8012f0e:	f000 fea1 	bl	8013c54 <uxr_millis>
 8012f12:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8012f16:	4681      	mov	r9, r0
 8012f18:	2a00      	cmp	r2, #0
 8012f1a:	f000 80a1 	beq.w	8013060 <listen_message_reliably+0x164>
 8012f1e:	2600      	movs	r6, #0
 8012f20:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012f24:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012f28:	9303      	str	r3, [sp, #12]
 8012f2a:	4630      	mov	r0, r6
 8012f2c:	460f      	mov	r7, r1
 8012f2e:	e00f      	b.n	8012f50 <listen_message_reliably+0x54>
 8012f30:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8012f34:	9903      	ldr	r1, [sp, #12]
 8012f36:	455a      	cmp	r2, fp
 8012f38:	f106 0601 	add.w	r6, r6, #1
 8012f3c:	eb73 0101 	sbcs.w	r1, r3, r1
 8012f40:	b2f0      	uxtb	r0, r6
 8012f42:	da01      	bge.n	8012f48 <listen_message_reliably+0x4c>
 8012f44:	4693      	mov	fp, r2
 8012f46:	9303      	str	r3, [sp, #12]
 8012f48:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8012f4c:	4283      	cmp	r3, r0
 8012f4e:	d960      	bls.n	8013012 <listen_message_reliably+0x116>
 8012f50:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012f54:	2102      	movs	r1, #2
 8012f56:	2201      	movs	r2, #1
 8012f58:	f000 fcfe 	bl	8013958 <uxr_stream_id>
 8012f5c:	00e4      	lsls	r4, r4, #3
 8012f5e:	f104 0520 	add.w	r5, r4, #32
 8012f62:	4445      	add	r5, r8
 8012f64:	4601      	mov	r1, r0
 8012f66:	463b      	mov	r3, r7
 8012f68:	464a      	mov	r2, r9
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f6e:	f007 fa79 	bl	801a464 <uxr_update_output_stream_heartbeat_timestamp>
 8012f72:	eb08 0304 	add.w	r3, r8, r4
 8012f76:	2800      	cmp	r0, #0
 8012f78:	d0da      	beq.n	8012f30 <listen_message_reliably+0x34>
 8012f7a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012f7e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8012f82:	9304      	str	r3, [sp, #16]
 8012f84:	4640      	mov	r0, r8
 8012f86:	f000 fcaf 	bl	80138e8 <uxr_session_header_offset>
 8012f8a:	3501      	adds	r5, #1
 8012f8c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8012f90:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012f94:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012f98:	2300      	movs	r3, #0
 8012f9a:	2211      	movs	r2, #17
 8012f9c:	9000      	str	r0, [sp, #0]
 8012f9e:	a90c      	add	r1, sp, #48	@ 0x30
 8012fa0:	4650      	mov	r0, sl
 8012fa2:	f7fd fa6d 	bl	8010480 <ucdr_init_buffer_origin_offset>
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	2205      	movs	r2, #5
 8012faa:	210b      	movs	r1, #11
 8012fac:	4650      	mov	r0, sl
 8012fae:	f000 fe0b 	bl	8013bc8 <uxr_buffer_submessage_header>
 8012fb2:	8968      	ldrh	r0, [r5, #10]
 8012fb4:	2101      	movs	r1, #1
 8012fb6:	f007 fc47 	bl	801a848 <uxr_seq_num_add>
 8012fba:	892b      	ldrh	r3, [r5, #8]
 8012fbc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	9b04      	ldr	r3, [sp, #16]
 8012fc4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012fc8:	a90a      	add	r1, sp, #40	@ 0x28
 8012fca:	4650      	mov	r0, sl
 8012fcc:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012fd0:	f001 ffe0 	bl	8014f94 <uxr_serialize_HEARTBEAT_Payload>
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	4611      	mov	r1, r2
 8012fd8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012fda:	4640      	mov	r0, r8
 8012fdc:	f000 fc2e 	bl	801383c <uxr_stamp_session_header>
 8012fe0:	4650      	mov	r0, sl
 8012fe2:	f7fd fa8b 	bl	80104fc <ucdr_buffer_length>
 8012fe6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8012fea:	4602      	mov	r2, r0
 8012fec:	a90c      	add	r1, sp, #48	@ 0x30
 8012fee:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012ff2:	4444      	add	r4, r8
 8012ff4:	47a8      	blx	r5
 8012ff6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8012ffa:	9903      	ldr	r1, [sp, #12]
 8012ffc:	455a      	cmp	r2, fp
 8012ffe:	f106 0601 	add.w	r6, r6, #1
 8013002:	eb73 0101 	sbcs.w	r1, r3, r1
 8013006:	b2f0      	uxtb	r0, r6
 8013008:	db9c      	blt.n	8012f44 <listen_message_reliably+0x48>
 801300a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801300e:	4283      	cmp	r3, r0
 8013010:	d89e      	bhi.n	8012f50 <listen_message_reliably+0x54>
 8013012:	9a03      	ldr	r2, [sp, #12]
 8013014:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013018:	429a      	cmp	r2, r3
 801301a:	bf08      	it	eq
 801301c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013020:	d01e      	beq.n	8013060 <listen_message_reliably+0x164>
 8013022:	ebab 0309 	sub.w	r3, fp, r9
 8013026:	9905      	ldr	r1, [sp, #20]
 8013028:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 801302c:	2b00      	cmp	r3, #0
 801302e:	bf08      	it	eq
 8013030:	2301      	moveq	r3, #1
 8013032:	4299      	cmp	r1, r3
 8013034:	bfa8      	it	ge
 8013036:	4619      	movge	r1, r3
 8013038:	6894      	ldr	r4, [r2, #8]
 801303a:	6810      	ldr	r0, [r2, #0]
 801303c:	4689      	mov	r9, r1
 801303e:	460b      	mov	r3, r1
 8013040:	aa08      	add	r2, sp, #32
 8013042:	a907      	add	r1, sp, #28
 8013044:	47a0      	blx	r4
 8013046:	b968      	cbnz	r0, 8013064 <listen_message_reliably+0x168>
 8013048:	9b05      	ldr	r3, [sp, #20]
 801304a:	eba3 0309 	sub.w	r3, r3, r9
 801304e:	2b00      	cmp	r3, #0
 8013050:	9305      	str	r3, [sp, #20]
 8013052:	f73f af5c 	bgt.w	8012f0e <listen_message_reliably+0x12>
 8013056:	4604      	mov	r4, r0
 8013058:	4620      	mov	r0, r4
 801305a:	b01d      	add	sp, #116	@ 0x74
 801305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013060:	9b05      	ldr	r3, [sp, #20]
 8013062:	e7e0      	b.n	8013026 <listen_message_reliably+0x12a>
 8013064:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013068:	4604      	mov	r4, r0
 801306a:	a80c      	add	r0, sp, #48	@ 0x30
 801306c:	f7fd fa1a 	bl	80104a4 <ucdr_init_buffer>
 8013070:	2500      	movs	r5, #0
 8013072:	f10d 031a 	add.w	r3, sp, #26
 8013076:	aa06      	add	r2, sp, #24
 8013078:	a90c      	add	r1, sp, #48	@ 0x30
 801307a:	4640      	mov	r0, r8
 801307c:	f88d 5018 	strb.w	r5, [sp, #24]
 8013080:	f000 fbf0 	bl	8013864 <uxr_read_session_header>
 8013084:	b918      	cbnz	r0, 801308e <listen_message_reliably+0x192>
 8013086:	4620      	mov	r0, r4
 8013088:	b01d      	add	sp, #116	@ 0x74
 801308a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801308e:	4629      	mov	r1, r5
 8013090:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013094:	f000 fc8a 	bl	80139ac <uxr_stream_id_from_raw>
 8013098:	f3c0 4507 	ubfx	r5, r0, #16, #8
 801309c:	2d01      	cmp	r5, #1
 801309e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80130a2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80130a6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80130aa:	d04b      	beq.n	8013144 <listen_message_reliably+0x248>
 80130ac:	2d02      	cmp	r5, #2
 80130ae:	d00f      	beq.n	80130d0 <listen_message_reliably+0x1d4>
 80130b0:	2d00      	cmp	r5, #0
 80130b2:	d1e8      	bne.n	8013086 <listen_message_reliably+0x18a>
 80130b4:	4629      	mov	r1, r5
 80130b6:	4628      	mov	r0, r5
 80130b8:	f000 fc78 	bl	80139ac <uxr_stream_id_from_raw>
 80130bc:	a90c      	add	r1, sp, #48	@ 0x30
 80130be:	4602      	mov	r2, r0
 80130c0:	4640      	mov	r0, r8
 80130c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80130c4:	f7ff fd92 	bl	8012bec <read_submessage_list>
 80130c8:	4620      	mov	r0, r4
 80130ca:	b01d      	add	sp, #116	@ 0x74
 80130cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d0:	4631      	mov	r1, r6
 80130d2:	f108 0008 	add.w	r0, r8, #8
 80130d6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80130da:	f000 fd55 	bl	8013b88 <uxr_get_input_reliable_stream>
 80130de:	4607      	mov	r7, r0
 80130e0:	b338      	cbz	r0, 8013132 <listen_message_reliably+0x236>
 80130e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80130e4:	9203      	str	r2, [sp, #12]
 80130e6:	a80c      	add	r0, sp, #48	@ 0x30
 80130e8:	f7fd fa0c 	bl	8010504 <ucdr_buffer_remaining>
 80130ec:	4603      	mov	r3, r0
 80130ee:	f10d 0019 	add.w	r0, sp, #25
 80130f2:	9000      	str	r0, [sp, #0]
 80130f4:	9a03      	ldr	r2, [sp, #12]
 80130f6:	4651      	mov	r1, sl
 80130f8:	4638      	mov	r0, r7
 80130fa:	f006 fdc9 	bl	8019c90 <uxr_receive_reliable_message>
 80130fe:	b1c0      	cbz	r0, 8013132 <listen_message_reliably+0x236>
 8013100:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013104:	b393      	cbz	r3, 801316c <listen_message_reliably+0x270>
 8013106:	ad14      	add	r5, sp, #80	@ 0x50
 8013108:	f04f 0a02 	mov.w	sl, #2
 801310c:	e00a      	b.n	8013124 <listen_message_reliably+0x228>
 801310e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013112:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8013116:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801311a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801311c:	4629      	mov	r1, r5
 801311e:	4640      	mov	r0, r8
 8013120:	f7ff fd64 	bl	8012bec <read_submessage_list>
 8013124:	2204      	movs	r2, #4
 8013126:	4629      	mov	r1, r5
 8013128:	4638      	mov	r0, r7
 801312a:	f006 fe31 	bl	8019d90 <uxr_next_input_reliable_buffer_available>
 801312e:	2800      	cmp	r0, #0
 8013130:	d1ed      	bne.n	801310e <listen_message_reliably+0x212>
 8013132:	4640      	mov	r0, r8
 8013134:	4632      	mov	r2, r6
 8013136:	4649      	mov	r1, r9
 8013138:	f7ff fbd4 	bl	80128e4 <write_submessage_acknack.isra.0>
 801313c:	4620      	mov	r0, r4
 801313e:	b01d      	add	sp, #116	@ 0x74
 8013140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013144:	4631      	mov	r1, r6
 8013146:	f108 0008 	add.w	r0, r8, #8
 801314a:	f000 fd13 	bl	8013b74 <uxr_get_input_best_effort_stream>
 801314e:	2800      	cmp	r0, #0
 8013150:	d099      	beq.n	8013086 <listen_message_reliably+0x18a>
 8013152:	4651      	mov	r1, sl
 8013154:	f006 fd08 	bl	8019b68 <uxr_receive_best_effort_message>
 8013158:	2800      	cmp	r0, #0
 801315a:	d094      	beq.n	8013086 <listen_message_reliably+0x18a>
 801315c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013160:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013162:	a90c      	add	r1, sp, #48	@ 0x30
 8013164:	4640      	mov	r0, r8
 8013166:	f7ff fd41 	bl	8012bec <read_submessage_list>
 801316a:	e78c      	b.n	8013086 <listen_message_reliably+0x18a>
 801316c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013170:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013172:	a90c      	add	r1, sp, #48	@ 0x30
 8013174:	4640      	mov	r0, r8
 8013176:	f7ff fd39 	bl	8012bec <read_submessage_list>
 801317a:	e7c4      	b.n	8013106 <listen_message_reliably+0x20a>

0801317c <uxr_run_session_timeout>:
 801317c:	b570      	push	{r4, r5, r6, lr}
 801317e:	4604      	mov	r4, r0
 8013180:	460d      	mov	r5, r1
 8013182:	f000 fd67 	bl	8013c54 <uxr_millis>
 8013186:	4606      	mov	r6, r0
 8013188:	4620      	mov	r0, r4
 801318a:	f7ff fc71 	bl	8012a70 <uxr_flash_output_streams>
 801318e:	4629      	mov	r1, r5
 8013190:	4620      	mov	r0, r4
 8013192:	f7ff feb3 	bl	8012efc <listen_message_reliably>
 8013196:	f000 fd5d 	bl	8013c54 <uxr_millis>
 801319a:	1b83      	subs	r3, r0, r6
 801319c:	1ae9      	subs	r1, r5, r3
 801319e:	2900      	cmp	r1, #0
 80131a0:	dcf6      	bgt.n	8013190 <uxr_run_session_timeout+0x14>
 80131a2:	f104 0008 	add.w	r0, r4, #8
 80131a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131aa:	f000 bcf7 	b.w	8013b9c <uxr_output_streams_confirmed>
 80131ae:	bf00      	nop

080131b0 <uxr_run_session_until_data>:
 80131b0:	b570      	push	{r4, r5, r6, lr}
 80131b2:	4604      	mov	r4, r0
 80131b4:	460d      	mov	r5, r1
 80131b6:	f000 fd4d 	bl	8013c54 <uxr_millis>
 80131ba:	4606      	mov	r6, r0
 80131bc:	4620      	mov	r0, r4
 80131be:	f7ff fc57 	bl	8012a70 <uxr_flash_output_streams>
 80131c2:	2300      	movs	r3, #0
 80131c4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80131c8:	4629      	mov	r1, r5
 80131ca:	e005      	b.n	80131d8 <uxr_run_session_until_data+0x28>
 80131cc:	f000 fd42 	bl	8013c54 <uxr_millis>
 80131d0:	1b83      	subs	r3, r0, r6
 80131d2:	1ae9      	subs	r1, r5, r3
 80131d4:	2900      	cmp	r1, #0
 80131d6:	dd07      	ble.n	80131e8 <uxr_run_session_until_data+0x38>
 80131d8:	4620      	mov	r0, r4
 80131da:	f7ff fe8f 	bl	8012efc <listen_message_reliably>
 80131de:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80131e2:	2800      	cmp	r0, #0
 80131e4:	d0f2      	beq.n	80131cc <uxr_run_session_until_data+0x1c>
 80131e6:	bd70      	pop	{r4, r5, r6, pc}
 80131e8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80131ec:	bd70      	pop	{r4, r5, r6, pc}
 80131ee:	bf00      	nop

080131f0 <uxr_run_session_until_confirm_delivery>:
 80131f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f4:	4606      	mov	r6, r0
 80131f6:	460d      	mov	r5, r1
 80131f8:	f000 fd2c 	bl	8013c54 <uxr_millis>
 80131fc:	4607      	mov	r7, r0
 80131fe:	4630      	mov	r0, r6
 8013200:	f7ff fc36 	bl	8012a70 <uxr_flash_output_streams>
 8013204:	2d00      	cmp	r5, #0
 8013206:	f106 0808 	add.w	r8, r6, #8
 801320a:	bfa8      	it	ge
 801320c:	462c      	movge	r4, r5
 801320e:	da07      	bge.n	8013220 <uxr_run_session_until_confirm_delivery+0x30>
 8013210:	e00e      	b.n	8013230 <uxr_run_session_until_confirm_delivery+0x40>
 8013212:	f7ff fe73 	bl	8012efc <listen_message_reliably>
 8013216:	f000 fd1d 	bl	8013c54 <uxr_millis>
 801321a:	1bc3      	subs	r3, r0, r7
 801321c:	1aec      	subs	r4, r5, r3
 801321e:	d407      	bmi.n	8013230 <uxr_run_session_until_confirm_delivery+0x40>
 8013220:	4640      	mov	r0, r8
 8013222:	f000 fcbb 	bl	8013b9c <uxr_output_streams_confirmed>
 8013226:	4603      	mov	r3, r0
 8013228:	4621      	mov	r1, r4
 801322a:	4630      	mov	r0, r6
 801322c:	2b00      	cmp	r3, #0
 801322e:	d0f0      	beq.n	8013212 <uxr_run_session_until_confirm_delivery+0x22>
 8013230:	4640      	mov	r0, r8
 8013232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013236:	f000 bcb1 	b.w	8013b9c <uxr_output_streams_confirmed>
 801323a:	bf00      	nop

0801323c <uxr_run_session_until_all_status>:
 801323c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013240:	9c08      	ldr	r4, [sp, #32]
 8013242:	4606      	mov	r6, r0
 8013244:	460f      	mov	r7, r1
 8013246:	4691      	mov	r9, r2
 8013248:	461d      	mov	r5, r3
 801324a:	f7ff fc11 	bl	8012a70 <uxr_flash_output_streams>
 801324e:	b124      	cbz	r4, 801325a <uxr_run_session_until_all_status+0x1e>
 8013250:	4622      	mov	r2, r4
 8013252:	21ff      	movs	r1, #255	@ 0xff
 8013254:	4628      	mov	r0, r5
 8013256:	f008 ffed 	bl	801c234 <memset>
 801325a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 801325e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013260:	f000 fcf8 	bl	8013c54 <uxr_millis>
 8013264:	3d01      	subs	r5, #1
 8013266:	f1a9 0902 	sub.w	r9, r9, #2
 801326a:	4680      	mov	r8, r0
 801326c:	4639      	mov	r1, r7
 801326e:	4630      	mov	r0, r6
 8013270:	f7ff fe44 	bl	8012efc <listen_message_reliably>
 8013274:	f000 fcee 	bl	8013c54 <uxr_millis>
 8013278:	eba0 0008 	sub.w	r0, r0, r8
 801327c:	1a39      	subs	r1, r7, r0
 801327e:	b344      	cbz	r4, 80132d2 <uxr_run_session_until_all_status+0x96>
 8013280:	4628      	mov	r0, r5
 8013282:	46ac      	mov	ip, r5
 8013284:	2301      	movs	r3, #1
 8013286:	e002      	b.n	801328e <uxr_run_session_until_all_status+0x52>
 8013288:	42a3      	cmp	r3, r4
 801328a:	d20d      	bcs.n	80132a8 <uxr_run_session_until_all_status+0x6c>
 801328c:	3301      	adds	r3, #1
 801328e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8013292:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8013296:	d1f7      	bne.n	8013288 <uxr_run_session_until_all_status+0x4c>
 8013298:	42a3      	cmp	r3, r4
 801329a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 801329e:	d213      	bcs.n	80132c8 <uxr_run_session_until_all_status+0x8c>
 80132a0:	2a00      	cmp	r2, #0
 80132a2:	d0f3      	beq.n	801328c <uxr_run_session_until_all_status+0x50>
 80132a4:	2900      	cmp	r1, #0
 80132a6:	dce2      	bgt.n	801326e <uxr_run_session_until_all_status+0x32>
 80132a8:	2300      	movs	r3, #0
 80132aa:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80132ac:	442c      	add	r4, r5
 80132ae:	e001      	b.n	80132b4 <uxr_run_session_until_all_status+0x78>
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d812      	bhi.n	80132da <uxr_run_session_until_all_status+0x9e>
 80132b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80132b8:	4284      	cmp	r4, r0
 80132ba:	d1f9      	bne.n	80132b0 <uxr_run_session_until_all_status+0x74>
 80132bc:	2b01      	cmp	r3, #1
 80132be:	bf8c      	ite	hi
 80132c0:	2000      	movhi	r0, #0
 80132c2:	2001      	movls	r0, #1
 80132c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132c8:	2900      	cmp	r1, #0
 80132ca:	dded      	ble.n	80132a8 <uxr_run_session_until_all_status+0x6c>
 80132cc:	2a00      	cmp	r2, #0
 80132ce:	d1ce      	bne.n	801326e <uxr_run_session_until_all_status+0x32>
 80132d0:	e7ea      	b.n	80132a8 <uxr_run_session_until_all_status+0x6c>
 80132d2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80132d4:	2001      	movs	r0, #1
 80132d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132da:	2000      	movs	r0, #0
 80132dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080132e0 <wait_session_status>:
 80132e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e4:	4604      	mov	r4, r0
 80132e6:	b09d      	sub	sp, #116	@ 0x74
 80132e8:	20ff      	movs	r0, #255	@ 0xff
 80132ea:	7160      	strb	r0, [r4, #5]
 80132ec:	9303      	str	r3, [sp, #12]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	f000 80b6 	beq.w	8013460 <wait_session_status+0x180>
 80132f4:	468a      	mov	sl, r1
 80132f6:	4691      	mov	r9, r2
 80132f8:	f04f 0b00 	mov.w	fp, #0
 80132fc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80132fe:	464a      	mov	r2, r9
 8013300:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013304:	4651      	mov	r1, sl
 8013306:	47a8      	blx	r5
 8013308:	f000 fca4 	bl	8013c54 <uxr_millis>
 801330c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013310:	4605      	mov	r5, r0
 8013312:	e009      	b.n	8013328 <wait_session_status+0x48>
 8013314:	f000 fc9e 	bl	8013c54 <uxr_millis>
 8013318:	1b40      	subs	r0, r0, r5
 801331a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801331e:	2b00      	cmp	r3, #0
 8013320:	dd40      	ble.n	80133a4 <wait_session_status+0xc4>
 8013322:	7960      	ldrb	r0, [r4, #5]
 8013324:	28ff      	cmp	r0, #255	@ 0xff
 8013326:	d145      	bne.n	80133b4 <wait_session_status+0xd4>
 8013328:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801332a:	a908      	add	r1, sp, #32
 801332c:	6896      	ldr	r6, [r2, #8]
 801332e:	6810      	ldr	r0, [r2, #0]
 8013330:	aa09      	add	r2, sp, #36	@ 0x24
 8013332:	47b0      	blx	r6
 8013334:	2800      	cmp	r0, #0
 8013336:	d0ed      	beq.n	8013314 <wait_session_status+0x34>
 8013338:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801333c:	a80c      	add	r0, sp, #48	@ 0x30
 801333e:	f7fd f8b1 	bl	80104a4 <ucdr_init_buffer>
 8013342:	2600      	movs	r6, #0
 8013344:	f10d 031e 	add.w	r3, sp, #30
 8013348:	aa07      	add	r2, sp, #28
 801334a:	a90c      	add	r1, sp, #48	@ 0x30
 801334c:	4620      	mov	r0, r4
 801334e:	f88d 601c 	strb.w	r6, [sp, #28]
 8013352:	f000 fa87 	bl	8013864 <uxr_read_session_header>
 8013356:	2800      	cmp	r0, #0
 8013358:	d0dc      	beq.n	8013314 <wait_session_status+0x34>
 801335a:	4631      	mov	r1, r6
 801335c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8013360:	f000 fb24 	bl	80139ac <uxr_stream_id_from_raw>
 8013364:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013368:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801336c:	9302      	str	r3, [sp, #8]
 801336e:	2f01      	cmp	r7, #1
 8013370:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8013374:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013378:	d05c      	beq.n	8013434 <wait_session_status+0x154>
 801337a:	2f02      	cmp	r7, #2
 801337c:	d020      	beq.n	80133c0 <wait_session_status+0xe0>
 801337e:	2f00      	cmp	r7, #0
 8013380:	d1c8      	bne.n	8013314 <wait_session_status+0x34>
 8013382:	4639      	mov	r1, r7
 8013384:	4638      	mov	r0, r7
 8013386:	f000 fb11 	bl	80139ac <uxr_stream_id_from_raw>
 801338a:	a90c      	add	r1, sp, #48	@ 0x30
 801338c:	4602      	mov	r2, r0
 801338e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013390:	4620      	mov	r0, r4
 8013392:	f7ff fc2b 	bl	8012bec <read_submessage_list>
 8013396:	f000 fc5d 	bl	8013c54 <uxr_millis>
 801339a:	1b40      	subs	r0, r0, r5
 801339c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	dcbe      	bgt.n	8013322 <wait_session_status+0x42>
 80133a4:	9b03      	ldr	r3, [sp, #12]
 80133a6:	7960      	ldrb	r0, [r4, #5]
 80133a8:	f10b 0b01 	add.w	fp, fp, #1
 80133ac:	455b      	cmp	r3, fp
 80133ae:	d001      	beq.n	80133b4 <wait_session_status+0xd4>
 80133b0:	28ff      	cmp	r0, #255	@ 0xff
 80133b2:	d0a3      	beq.n	80132fc <wait_session_status+0x1c>
 80133b4:	38ff      	subs	r0, #255	@ 0xff
 80133b6:	bf18      	it	ne
 80133b8:	2001      	movne	r0, #1
 80133ba:	b01d      	add	sp, #116	@ 0x74
 80133bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80133c4:	9304      	str	r3, [sp, #16]
 80133c6:	4631      	mov	r1, r6
 80133c8:	f104 0008 	add.w	r0, r4, #8
 80133cc:	f000 fbdc 	bl	8013b88 <uxr_get_input_reliable_stream>
 80133d0:	4680      	mov	r8, r0
 80133d2:	b348      	cbz	r0, 8013428 <wait_session_status+0x148>
 80133d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80133d6:	9205      	str	r2, [sp, #20]
 80133d8:	a80c      	add	r0, sp, #48	@ 0x30
 80133da:	f7fd f893 	bl	8010504 <ucdr_buffer_remaining>
 80133de:	4603      	mov	r3, r0
 80133e0:	f10d 001d 	add.w	r0, sp, #29
 80133e4:	9000      	str	r0, [sp, #0]
 80133e6:	9a05      	ldr	r2, [sp, #20]
 80133e8:	9902      	ldr	r1, [sp, #8]
 80133ea:	4640      	mov	r0, r8
 80133ec:	f006 fc50 	bl	8019c90 <uxr_receive_reliable_message>
 80133f0:	b1d0      	cbz	r0, 8013428 <wait_session_status+0x148>
 80133f2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d03a      	beq.n	8013470 <wait_session_status+0x190>
 80133fa:	9f04      	ldr	r7, [sp, #16]
 80133fc:	e00a      	b.n	8013414 <wait_session_status+0x134>
 80133fe:	f04f 0302 	mov.w	r3, #2
 8013402:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8013406:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801340a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801340e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013410:	f7ff fbec 	bl	8012bec <read_submessage_list>
 8013414:	a914      	add	r1, sp, #80	@ 0x50
 8013416:	2204      	movs	r2, #4
 8013418:	4640      	mov	r0, r8
 801341a:	f006 fcb9 	bl	8019d90 <uxr_next_input_reliable_buffer_available>
 801341e:	4603      	mov	r3, r0
 8013420:	a914      	add	r1, sp, #80	@ 0x50
 8013422:	4620      	mov	r0, r4
 8013424:	2b00      	cmp	r3, #0
 8013426:	d1ea      	bne.n	80133fe <wait_session_status+0x11e>
 8013428:	9904      	ldr	r1, [sp, #16]
 801342a:	4632      	mov	r2, r6
 801342c:	4620      	mov	r0, r4
 801342e:	f7ff fa59 	bl	80128e4 <write_submessage_acknack.isra.0>
 8013432:	e76f      	b.n	8013314 <wait_session_status+0x34>
 8013434:	4631      	mov	r1, r6
 8013436:	f104 0008 	add.w	r0, r4, #8
 801343a:	f000 fb9b 	bl	8013b74 <uxr_get_input_best_effort_stream>
 801343e:	2800      	cmp	r0, #0
 8013440:	f43f af68 	beq.w	8013314 <wait_session_status+0x34>
 8013444:	9902      	ldr	r1, [sp, #8]
 8013446:	f006 fb8f 	bl	8019b68 <uxr_receive_best_effort_message>
 801344a:	2800      	cmp	r0, #0
 801344c:	f43f af62 	beq.w	8013314 <wait_session_status+0x34>
 8013450:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013454:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013456:	a90c      	add	r1, sp, #48	@ 0x30
 8013458:	4620      	mov	r0, r4
 801345a:	f7ff fbc7 	bl	8012bec <read_submessage_list>
 801345e:	e759      	b.n	8013314 <wait_session_status+0x34>
 8013460:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013462:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013466:	47a0      	blx	r4
 8013468:	2001      	movs	r0, #1
 801346a:	b01d      	add	sp, #116	@ 0x74
 801346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013470:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013474:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013476:	a90c      	add	r1, sp, #48	@ 0x30
 8013478:	4620      	mov	r0, r4
 801347a:	f7ff fbb7 	bl	8012bec <read_submessage_list>
 801347e:	e7bc      	b.n	80133fa <wait_session_status+0x11a>

08013480 <uxr_delete_session_retries>:
 8013480:	b530      	push	{r4, r5, lr}
 8013482:	b08f      	sub	sp, #60	@ 0x3c
 8013484:	4604      	mov	r4, r0
 8013486:	460d      	mov	r5, r1
 8013488:	f000 fa2e 	bl	80138e8 <uxr_session_header_offset>
 801348c:	2300      	movs	r3, #0
 801348e:	2210      	movs	r2, #16
 8013490:	9000      	str	r0, [sp, #0]
 8013492:	a902      	add	r1, sp, #8
 8013494:	a806      	add	r0, sp, #24
 8013496:	f7fc fff3 	bl	8010480 <ucdr_init_buffer_origin_offset>
 801349a:	a906      	add	r1, sp, #24
 801349c:	4620      	mov	r0, r4
 801349e:	f000 f973 	bl	8013788 <uxr_buffer_delete_session>
 80134a2:	2200      	movs	r2, #0
 80134a4:	4611      	mov	r1, r2
 80134a6:	9b06      	ldr	r3, [sp, #24]
 80134a8:	4620      	mov	r0, r4
 80134aa:	f000 f9c7 	bl	801383c <uxr_stamp_session_header>
 80134ae:	a806      	add	r0, sp, #24
 80134b0:	f7fd f824 	bl	80104fc <ucdr_buffer_length>
 80134b4:	462b      	mov	r3, r5
 80134b6:	4602      	mov	r2, r0
 80134b8:	a902      	add	r1, sp, #8
 80134ba:	4620      	mov	r0, r4
 80134bc:	f7ff ff10 	bl	80132e0 <wait_session_status>
 80134c0:	b118      	cbz	r0, 80134ca <uxr_delete_session_retries+0x4a>
 80134c2:	7960      	ldrb	r0, [r4, #5]
 80134c4:	fab0 f080 	clz	r0, r0
 80134c8:	0940      	lsrs	r0, r0, #5
 80134ca:	b00f      	add	sp, #60	@ 0x3c
 80134cc:	bd30      	pop	{r4, r5, pc}
 80134ce:	bf00      	nop

080134d0 <uxr_create_session>:
 80134d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d4:	f100 0b08 	add.w	fp, r0, #8
 80134d8:	b0ab      	sub	sp, #172	@ 0xac
 80134da:	4604      	mov	r4, r0
 80134dc:	4658      	mov	r0, fp
 80134de:	f000 fa99 	bl	8013a14 <uxr_reset_stream_storage>
 80134e2:	4620      	mov	r0, r4
 80134e4:	f000 fa00 	bl	80138e8 <uxr_session_header_offset>
 80134e8:	2300      	movs	r3, #0
 80134ea:	9000      	str	r0, [sp, #0]
 80134ec:	221c      	movs	r2, #28
 80134ee:	a90b      	add	r1, sp, #44	@ 0x2c
 80134f0:	a812      	add	r0, sp, #72	@ 0x48
 80134f2:	f7fc ffc5 	bl	8010480 <ucdr_init_buffer_origin_offset>
 80134f6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80134f8:	8a1a      	ldrh	r2, [r3, #16]
 80134fa:	3a04      	subs	r2, #4
 80134fc:	b292      	uxth	r2, r2
 80134fe:	a912      	add	r1, sp, #72	@ 0x48
 8013500:	4620      	mov	r0, r4
 8013502:	f000 f917 	bl	8013734 <uxr_buffer_create_session>
 8013506:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013508:	4620      	mov	r0, r4
 801350a:	f000 f983 	bl	8013814 <uxr_stamp_create_session_header>
 801350e:	a812      	add	r0, sp, #72	@ 0x48
 8013510:	f7fc fff4 	bl	80104fc <ucdr_buffer_length>
 8013514:	23ff      	movs	r3, #255	@ 0xff
 8013516:	7163      	strb	r3, [r4, #5]
 8013518:	230a      	movs	r3, #10
 801351a:	46da      	mov	sl, fp
 801351c:	9303      	str	r3, [sp, #12]
 801351e:	4683      	mov	fp, r0
 8013520:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013522:	465a      	mov	r2, fp
 8013524:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013528:	a90b      	add	r1, sp, #44	@ 0x2c
 801352a:	47a8      	blx	r5
 801352c:	f000 fb92 	bl	8013c54 <uxr_millis>
 8013530:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013534:	4605      	mov	r5, r0
 8013536:	e009      	b.n	801354c <uxr_create_session+0x7c>
 8013538:	f000 fb8c 	bl	8013c54 <uxr_millis>
 801353c:	1b40      	subs	r0, r0, r5
 801353e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013542:	2b00      	cmp	r3, #0
 8013544:	7962      	ldrb	r2, [r4, #5]
 8013546:	dd38      	ble.n	80135ba <uxr_create_session+0xea>
 8013548:	2aff      	cmp	r2, #255	@ 0xff
 801354a:	d13c      	bne.n	80135c6 <uxr_create_session+0xf6>
 801354c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801354e:	a907      	add	r1, sp, #28
 8013550:	6896      	ldr	r6, [r2, #8]
 8013552:	6810      	ldr	r0, [r2, #0]
 8013554:	aa08      	add	r2, sp, #32
 8013556:	47b0      	blx	r6
 8013558:	2800      	cmp	r0, #0
 801355a:	d0ed      	beq.n	8013538 <uxr_create_session+0x68>
 801355c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013560:	a81a      	add	r0, sp, #104	@ 0x68
 8013562:	f7fc ff9f 	bl	80104a4 <ucdr_init_buffer>
 8013566:	2600      	movs	r6, #0
 8013568:	f10d 031a 	add.w	r3, sp, #26
 801356c:	aa06      	add	r2, sp, #24
 801356e:	a91a      	add	r1, sp, #104	@ 0x68
 8013570:	4620      	mov	r0, r4
 8013572:	f88d 6018 	strb.w	r6, [sp, #24]
 8013576:	f000 f975 	bl	8013864 <uxr_read_session_header>
 801357a:	2800      	cmp	r0, #0
 801357c:	d0dc      	beq.n	8013538 <uxr_create_session+0x68>
 801357e:	4631      	mov	r1, r6
 8013580:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013584:	f000 fa12 	bl	80139ac <uxr_stream_id_from_raw>
 8013588:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801358c:	2e01      	cmp	r6, #1
 801358e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013592:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8013596:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801359a:	d053      	beq.n	8013644 <uxr_create_session+0x174>
 801359c:	2e02      	cmp	r6, #2
 801359e:	d018      	beq.n	80135d2 <uxr_create_session+0x102>
 80135a0:	2e00      	cmp	r6, #0
 80135a2:	d1c9      	bne.n	8013538 <uxr_create_session+0x68>
 80135a4:	4631      	mov	r1, r6
 80135a6:	4630      	mov	r0, r6
 80135a8:	f000 fa00 	bl	80139ac <uxr_stream_id_from_raw>
 80135ac:	a91a      	add	r1, sp, #104	@ 0x68
 80135ae:	4602      	mov	r2, r0
 80135b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80135b2:	4620      	mov	r0, r4
 80135b4:	f7ff fb1a 	bl	8012bec <read_submessage_list>
 80135b8:	e7be      	b.n	8013538 <uxr_create_session+0x68>
 80135ba:	9b03      	ldr	r3, [sp, #12]
 80135bc:	3b01      	subs	r3, #1
 80135be:	9303      	str	r3, [sp, #12]
 80135c0:	d001      	beq.n	80135c6 <uxr_create_session+0xf6>
 80135c2:	2aff      	cmp	r2, #255	@ 0xff
 80135c4:	d0ac      	beq.n	8013520 <uxr_create_session+0x50>
 80135c6:	2a00      	cmp	r2, #0
 80135c8:	d051      	beq.n	801366e <uxr_create_session+0x19e>
 80135ca:	2000      	movs	r0, #0
 80135cc:	b02b      	add	sp, #172	@ 0xac
 80135ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135d2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80135d6:	9304      	str	r3, [sp, #16]
 80135d8:	4639      	mov	r1, r7
 80135da:	4650      	mov	r0, sl
 80135dc:	f000 fad4 	bl	8013b88 <uxr_get_input_reliable_stream>
 80135e0:	4680      	mov	r8, r0
 80135e2:	b348      	cbz	r0, 8013638 <uxr_create_session+0x168>
 80135e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80135e6:	9205      	str	r2, [sp, #20]
 80135e8:	a81a      	add	r0, sp, #104	@ 0x68
 80135ea:	f7fc ff8b 	bl	8010504 <ucdr_buffer_remaining>
 80135ee:	4603      	mov	r3, r0
 80135f0:	f10d 0019 	add.w	r0, sp, #25
 80135f4:	9000      	str	r0, [sp, #0]
 80135f6:	9a05      	ldr	r2, [sp, #20]
 80135f8:	4649      	mov	r1, r9
 80135fa:	4640      	mov	r0, r8
 80135fc:	f006 fb48 	bl	8019c90 <uxr_receive_reliable_message>
 8013600:	b1d0      	cbz	r0, 8013638 <uxr_create_session+0x168>
 8013602:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d038      	beq.n	801367c <uxr_create_session+0x1ac>
 801360a:	9e04      	ldr	r6, [sp, #16]
 801360c:	e00a      	b.n	8013624 <uxr_create_session+0x154>
 801360e:	f04f 0302 	mov.w	r3, #2
 8013612:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8013616:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 801361a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801361e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013620:	f7ff fae4 	bl	8012bec <read_submessage_list>
 8013624:	a922      	add	r1, sp, #136	@ 0x88
 8013626:	2204      	movs	r2, #4
 8013628:	4640      	mov	r0, r8
 801362a:	f006 fbb1 	bl	8019d90 <uxr_next_input_reliable_buffer_available>
 801362e:	4603      	mov	r3, r0
 8013630:	a922      	add	r1, sp, #136	@ 0x88
 8013632:	4620      	mov	r0, r4
 8013634:	2b00      	cmp	r3, #0
 8013636:	d1ea      	bne.n	801360e <uxr_create_session+0x13e>
 8013638:	9904      	ldr	r1, [sp, #16]
 801363a:	463a      	mov	r2, r7
 801363c:	4620      	mov	r0, r4
 801363e:	f7ff f951 	bl	80128e4 <write_submessage_acknack.isra.0>
 8013642:	e779      	b.n	8013538 <uxr_create_session+0x68>
 8013644:	4639      	mov	r1, r7
 8013646:	4650      	mov	r0, sl
 8013648:	f000 fa94 	bl	8013b74 <uxr_get_input_best_effort_stream>
 801364c:	2800      	cmp	r0, #0
 801364e:	f43f af73 	beq.w	8013538 <uxr_create_session+0x68>
 8013652:	4649      	mov	r1, r9
 8013654:	f006 fa88 	bl	8019b68 <uxr_receive_best_effort_message>
 8013658:	2800      	cmp	r0, #0
 801365a:	f43f af6d 	beq.w	8013538 <uxr_create_session+0x68>
 801365e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013662:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013664:	a91a      	add	r1, sp, #104	@ 0x68
 8013666:	4620      	mov	r0, r4
 8013668:	f7ff fac0 	bl	8012bec <read_submessage_list>
 801366c:	e764      	b.n	8013538 <uxr_create_session+0x68>
 801366e:	4650      	mov	r0, sl
 8013670:	f000 f9d0 	bl	8013a14 <uxr_reset_stream_storage>
 8013674:	2001      	movs	r0, #1
 8013676:	b02b      	add	sp, #172	@ 0xac
 8013678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8013680:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013682:	a91a      	add	r1, sp, #104	@ 0x68
 8013684:	4620      	mov	r0, r4
 8013686:	f7ff fab1 	bl	8012bec <read_submessage_list>
 801368a:	e7be      	b.n	801360a <uxr_create_session+0x13a>

0801368c <uxr_prepare_stream_to_write_submessage>:
 801368c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013690:	b082      	sub	sp, #8
 8013692:	4682      	mov	sl, r0
 8013694:	4610      	mov	r0, r2
 8013696:	4615      	mov	r5, r2
 8013698:	461e      	mov	r6, r3
 801369a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801369e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80136a2:	9101      	str	r1, [sp, #4]
 80136a4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80136a8:	f000 face 	bl	8013c48 <uxr_submessage_padding>
 80136ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80136b0:	f105 0904 	add.w	r9, r5, #4
 80136b4:	2b01      	cmp	r3, #1
 80136b6:	4481      	add	r9, r0
 80136b8:	d01d      	beq.n	80136f6 <uxr_prepare_stream_to_write_submessage+0x6a>
 80136ba:	2b02      	cmp	r3, #2
 80136bc:	d116      	bne.n	80136ec <uxr_prepare_stream_to_write_submessage+0x60>
 80136be:	4621      	mov	r1, r4
 80136c0:	f10a 0008 	add.w	r0, sl, #8
 80136c4:	f000 fa4c 	bl	8013b60 <uxr_get_output_reliable_stream>
 80136c8:	4604      	mov	r4, r0
 80136ca:	b158      	cbz	r0, 80136e4 <uxr_prepare_stream_to_write_submessage+0x58>
 80136cc:	4649      	mov	r1, r9
 80136ce:	4632      	mov	r2, r6
 80136d0:	f006 fd1a 	bl	801a108 <uxr_prepare_reliable_buffer_to_write>
 80136d4:	4604      	mov	r4, r0
 80136d6:	b12c      	cbz	r4, 80136e4 <uxr_prepare_stream_to_write_submessage+0x58>
 80136d8:	4643      	mov	r3, r8
 80136da:	b2aa      	uxth	r2, r5
 80136dc:	4639      	mov	r1, r7
 80136de:	4630      	mov	r0, r6
 80136e0:	f000 fa72 	bl	8013bc8 <uxr_buffer_submessage_header>
 80136e4:	4620      	mov	r0, r4
 80136e6:	b002      	add	sp, #8
 80136e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136ec:	2400      	movs	r4, #0
 80136ee:	4620      	mov	r0, r4
 80136f0:	b002      	add	sp, #8
 80136f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136f6:	4621      	mov	r1, r4
 80136f8:	f10a 0008 	add.w	r0, sl, #8
 80136fc:	f000 fa28 	bl	8013b50 <uxr_get_output_best_effort_stream>
 8013700:	4604      	mov	r4, r0
 8013702:	2800      	cmp	r0, #0
 8013704:	d0ee      	beq.n	80136e4 <uxr_prepare_stream_to_write_submessage+0x58>
 8013706:	4649      	mov	r1, r9
 8013708:	4632      	mov	r2, r6
 801370a:	f006 fc2d 	bl	8019f68 <uxr_prepare_best_effort_buffer_to_write>
 801370e:	4604      	mov	r4, r0
 8013710:	e7e1      	b.n	80136d6 <uxr_prepare_stream_to_write_submessage+0x4a>
 8013712:	bf00      	nop

08013714 <uxr_init_session_info>:
 8013714:	0e13      	lsrs	r3, r2, #24
 8013716:	7043      	strb	r3, [r0, #1]
 8013718:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801371c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013720:	7001      	strb	r1, [r0, #0]
 8013722:	70c3      	strb	r3, [r0, #3]
 8013724:	2109      	movs	r1, #9
 8013726:	23ff      	movs	r3, #255	@ 0xff
 8013728:	f880 c002 	strb.w	ip, [r0, #2]
 801372c:	7102      	strb	r2, [r0, #4]
 801372e:	80c1      	strh	r1, [r0, #6]
 8013730:	7143      	strb	r3, [r0, #5]
 8013732:	4770      	bx	lr

08013734 <uxr_buffer_create_session>:
 8013734:	b530      	push	{r4, r5, lr}
 8013736:	b089      	sub	sp, #36	@ 0x24
 8013738:	2300      	movs	r3, #0
 801373a:	4d12      	ldr	r5, [pc, #72]	@ (8013784 <uxr_buffer_create_session+0x50>)
 801373c:	9307      	str	r3, [sp, #28]
 801373e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013742:	2201      	movs	r2, #1
 8013744:	9301      	str	r3, [sp, #4]
 8013746:	80c2      	strh	r2, [r0, #6]
 8013748:	f88d 2004 	strb.w	r2, [sp, #4]
 801374c:	682a      	ldr	r2, [r5, #0]
 801374e:	9200      	str	r2, [sp, #0]
 8013750:	88aa      	ldrh	r2, [r5, #4]
 8013752:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013756:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801375a:	9202      	str	r2, [sp, #8]
 801375c:	460c      	mov	r4, r1
 801375e:	7802      	ldrb	r2, [r0, #0]
 8013760:	9303      	str	r3, [sp, #12]
 8013762:	4619      	mov	r1, r3
 8013764:	f88d 200c 	strb.w	r2, [sp, #12]
 8013768:	4620      	mov	r0, r4
 801376a:	2210      	movs	r2, #16
 801376c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8013770:	9306      	str	r3, [sp, #24]
 8013772:	f000 fa29 	bl	8013bc8 <uxr_buffer_submessage_header>
 8013776:	4669      	mov	r1, sp
 8013778:	4620      	mov	r0, r4
 801377a:	f001 fa6d 	bl	8014c58 <uxr_serialize_CREATE_CLIENT_Payload>
 801377e:	b009      	add	sp, #36	@ 0x24
 8013780:	bd30      	pop	{r4, r5, pc}
 8013782:	bf00      	nop
 8013784:	0801d248 	.word	0x0801d248

08013788 <uxr_buffer_delete_session>:
 8013788:	b510      	push	{r4, lr}
 801378a:	4b0c      	ldr	r3, [pc, #48]	@ (80137bc <uxr_buffer_delete_session+0x34>)
 801378c:	b082      	sub	sp, #8
 801378e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8013792:	f8ad c006 	strh.w	ip, [sp, #6]
 8013796:	460c      	mov	r4, r1
 8013798:	2202      	movs	r2, #2
 801379a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801379e:	80c2      	strh	r2, [r0, #6]
 80137a0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80137a4:	2204      	movs	r2, #4
 80137a6:	2300      	movs	r3, #0
 80137a8:	2103      	movs	r1, #3
 80137aa:	4620      	mov	r0, r4
 80137ac:	f000 fa0c 	bl	8013bc8 <uxr_buffer_submessage_header>
 80137b0:	a901      	add	r1, sp, #4
 80137b2:	4620      	mov	r0, r4
 80137b4:	f001 faf6 	bl	8014da4 <uxr_serialize_DELETE_Payload>
 80137b8:	b002      	add	sp, #8
 80137ba:	bd10      	pop	{r4, pc}
 80137bc:	0801d248 	.word	0x0801d248

080137c0 <uxr_read_create_session_status>:
 80137c0:	b510      	push	{r4, lr}
 80137c2:	b088      	sub	sp, #32
 80137c4:	4604      	mov	r4, r0
 80137c6:	4608      	mov	r0, r1
 80137c8:	a901      	add	r1, sp, #4
 80137ca:	f001 fafb 	bl	8014dc4 <uxr_deserialize_STATUS_AGENT_Payload>
 80137ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80137d2:	7163      	strb	r3, [r4, #5]
 80137d4:	b008      	add	sp, #32
 80137d6:	bd10      	pop	{r4, pc}

080137d8 <uxr_read_delete_session_status>:
 80137d8:	b510      	push	{r4, lr}
 80137da:	4604      	mov	r4, r0
 80137dc:	b084      	sub	sp, #16
 80137de:	4608      	mov	r0, r1
 80137e0:	a902      	add	r1, sp, #8
 80137e2:	f001 fb1f 	bl	8014e24 <uxr_deserialize_STATUS_Payload>
 80137e6:	88e3      	ldrh	r3, [r4, #6]
 80137e8:	2b02      	cmp	r3, #2
 80137ea:	d001      	beq.n	80137f0 <uxr_read_delete_session_status+0x18>
 80137ec:	b004      	add	sp, #16
 80137ee:	bd10      	pop	{r4, pc}
 80137f0:	f10d 000a 	add.w	r0, sp, #10
 80137f4:	f7fe fffc 	bl	80127f0 <uxr_object_id_from_raw>
 80137f8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80137fc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013800:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013804:	b29b      	uxth	r3, r3
 8013806:	2b02      	cmp	r3, #2
 8013808:	bf04      	itt	eq
 801380a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801380e:	7163      	strbeq	r3, [r4, #5]
 8013810:	b004      	add	sp, #16
 8013812:	bd10      	pop	{r4, pc}

08013814 <uxr_stamp_create_session_header>:
 8013814:	b510      	push	{r4, lr}
 8013816:	2208      	movs	r2, #8
 8013818:	b08a      	sub	sp, #40	@ 0x28
 801381a:	4604      	mov	r4, r0
 801381c:	eb0d 0002 	add.w	r0, sp, r2
 8013820:	f7fc fe40 	bl	80104a4 <ucdr_init_buffer>
 8013824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013828:	9400      	str	r4, [sp, #0]
 801382a:	2300      	movs	r3, #0
 801382c:	461a      	mov	r2, r3
 801382e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8013832:	a802      	add	r0, sp, #8
 8013834:	f000 fbc2 	bl	8013fbc <uxr_serialize_message_header>
 8013838:	b00a      	add	sp, #40	@ 0x28
 801383a:	bd10      	pop	{r4, pc}

0801383c <uxr_stamp_session_header>:
 801383c:	b530      	push	{r4, r5, lr}
 801383e:	b08d      	sub	sp, #52	@ 0x34
 8013840:	4604      	mov	r4, r0
 8013842:	460d      	mov	r5, r1
 8013844:	9203      	str	r2, [sp, #12]
 8013846:	4619      	mov	r1, r3
 8013848:	a804      	add	r0, sp, #16
 801384a:	2208      	movs	r2, #8
 801384c:	f7fc fe2a 	bl	80104a4 <ucdr_init_buffer>
 8013850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013854:	9b03      	ldr	r3, [sp, #12]
 8013856:	9400      	str	r4, [sp, #0]
 8013858:	462a      	mov	r2, r5
 801385a:	a804      	add	r0, sp, #16
 801385c:	f000 fbae 	bl	8013fbc <uxr_serialize_message_header>
 8013860:	b00d      	add	sp, #52	@ 0x34
 8013862:	bd30      	pop	{r4, r5, pc}

08013864 <uxr_read_session_header>:
 8013864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013868:	4607      	mov	r7, r0
 801386a:	b084      	sub	sp, #16
 801386c:	4608      	mov	r0, r1
 801386e:	460c      	mov	r4, r1
 8013870:	4615      	mov	r5, r2
 8013872:	461e      	mov	r6, r3
 8013874:	f7fc fe46 	bl	8010504 <ucdr_buffer_remaining>
 8013878:	2808      	cmp	r0, #8
 801387a:	d803      	bhi.n	8013884 <uxr_read_session_header+0x20>
 801387c:	2000      	movs	r0, #0
 801387e:	b004      	add	sp, #16
 8013880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013884:	f10d 080c 	add.w	r8, sp, #12
 8013888:	4633      	mov	r3, r6
 801388a:	462a      	mov	r2, r5
 801388c:	f8cd 8000 	str.w	r8, [sp]
 8013890:	4620      	mov	r0, r4
 8013892:	f10d 010b 	add.w	r1, sp, #11
 8013896:	f000 fbaf 	bl	8013ff8 <uxr_deserialize_message_header>
 801389a:	783a      	ldrb	r2, [r7, #0]
 801389c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80138a0:	4293      	cmp	r3, r2
 80138a2:	d1eb      	bne.n	801387c <uxr_read_session_header+0x18>
 80138a4:	061b      	lsls	r3, r3, #24
 80138a6:	d41c      	bmi.n	80138e2 <uxr_read_session_header+0x7e>
 80138a8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80138ac:	787b      	ldrb	r3, [r7, #1]
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d003      	beq.n	80138ba <uxr_read_session_header+0x56>
 80138b2:	2001      	movs	r0, #1
 80138b4:	f080 0001 	eor.w	r0, r0, #1
 80138b8:	e7e1      	b.n	801387e <uxr_read_session_header+0x1a>
 80138ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80138be:	78bb      	ldrb	r3, [r7, #2]
 80138c0:	429a      	cmp	r2, r3
 80138c2:	f107 0102 	add.w	r1, r7, #2
 80138c6:	d1f4      	bne.n	80138b2 <uxr_read_session_header+0x4e>
 80138c8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80138cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d1ee      	bne.n	80138b2 <uxr_read_session_header+0x4e>
 80138d4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80138d8:	784b      	ldrb	r3, [r1, #1]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d1e9      	bne.n	80138b2 <uxr_read_session_header+0x4e>
 80138de:	2000      	movs	r0, #0
 80138e0:	e7e8      	b.n	80138b4 <uxr_read_session_header+0x50>
 80138e2:	2001      	movs	r0, #1
 80138e4:	e7cb      	b.n	801387e <uxr_read_session_header+0x1a>
 80138e6:	bf00      	nop

080138e8 <uxr_session_header_offset>:
 80138e8:	f990 3000 	ldrsb.w	r3, [r0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	bfac      	ite	ge
 80138f0:	2008      	movge	r0, #8
 80138f2:	2004      	movlt	r0, #4
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop

080138f8 <uxr_init_base_object_request>:
 80138f8:	b510      	push	{r4, lr}
 80138fa:	88c3      	ldrh	r3, [r0, #6]
 80138fc:	b082      	sub	sp, #8
 80138fe:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8013902:	9101      	str	r1, [sp, #4]
 8013904:	f1a3 010a 	sub.w	r1, r3, #10
 8013908:	b289      	uxth	r1, r1
 801390a:	42a1      	cmp	r1, r4
 801390c:	d80e      	bhi.n	801392c <uxr_init_base_object_request+0x34>
 801390e:	3301      	adds	r3, #1
 8013910:	b29c      	uxth	r4, r3
 8013912:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013916:	b2db      	uxtb	r3, r3
 8013918:	80c4      	strh	r4, [r0, #6]
 801391a:	9801      	ldr	r0, [sp, #4]
 801391c:	7011      	strb	r1, [r2, #0]
 801391e:	7053      	strb	r3, [r2, #1]
 8013920:	1c91      	adds	r1, r2, #2
 8013922:	f7fe ff79 	bl	8012818 <uxr_object_id_to_raw>
 8013926:	4620      	mov	r0, r4
 8013928:	b002      	add	sp, #8
 801392a:	bd10      	pop	{r4, pc}
 801392c:	230a      	movs	r3, #10
 801392e:	2100      	movs	r1, #0
 8013930:	461c      	mov	r4, r3
 8013932:	e7f1      	b.n	8013918 <uxr_init_base_object_request+0x20>

08013934 <uxr_parse_base_object_request>:
 8013934:	b570      	push	{r4, r5, r6, lr}
 8013936:	4604      	mov	r4, r0
 8013938:	3002      	adds	r0, #2
 801393a:	460d      	mov	r5, r1
 801393c:	4616      	mov	r6, r2
 801393e:	f7fe ff57 	bl	80127f0 <uxr_object_id_from_raw>
 8013942:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013946:	8028      	strh	r0, [r5, #0]
 8013948:	806b      	strh	r3, [r5, #2]
 801394a:	7822      	ldrb	r2, [r4, #0]
 801394c:	7863      	ldrb	r3, [r4, #1]
 801394e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013952:	8033      	strh	r3, [r6, #0]
 8013954:	bd70      	pop	{r4, r5, r6, pc}
 8013956:	bf00      	nop

08013958 <uxr_stream_id>:
 8013958:	2901      	cmp	r1, #1
 801395a:	b082      	sub	sp, #8
 801395c:	d01d      	beq.n	801399a <uxr_stream_id+0x42>
 801395e:	2902      	cmp	r1, #2
 8013960:	f04f 0c00 	mov.w	ip, #0
 8013964:	d01e      	beq.n	80139a4 <uxr_stream_id+0x4c>
 8013966:	2300      	movs	r3, #0
 8013968:	f36c 0307 	bfi	r3, ip, #0, #8
 801396c:	f360 230f 	bfi	r3, r0, #8, #8
 8013970:	f361 4317 	bfi	r3, r1, #16, #8
 8013974:	f362 631f 	bfi	r3, r2, #24, #8
 8013978:	b2da      	uxtb	r2, r3
 801397a:	2000      	movs	r0, #0
 801397c:	f362 0007 	bfi	r0, r2, #0, #8
 8013980:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013984:	f362 200f 	bfi	r0, r2, #8, #8
 8013988:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801398c:	f362 4017 	bfi	r0, r2, #16, #8
 8013990:	0e1b      	lsrs	r3, r3, #24
 8013992:	f363 601f 	bfi	r0, r3, #24, #8
 8013996:	b002      	add	sp, #8
 8013998:	4770      	bx	lr
 801399a:	f100 0c01 	add.w	ip, r0, #1
 801399e:	fa5f fc8c 	uxtb.w	ip, ip
 80139a2:	e7e0      	b.n	8013966 <uxr_stream_id+0xe>
 80139a4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80139a8:	e7dd      	b.n	8013966 <uxr_stream_id+0xe>
 80139aa:	bf00      	nop

080139ac <uxr_stream_id_from_raw>:
 80139ac:	b082      	sub	sp, #8
 80139ae:	b130      	cbz	r0, 80139be <uxr_stream_id_from_raw+0x12>
 80139b0:	0603      	lsls	r3, r0, #24
 80139b2:	d420      	bmi.n	80139f6 <uxr_stream_id_from_raw+0x4a>
 80139b4:	1e42      	subs	r2, r0, #1
 80139b6:	b2d2      	uxtb	r2, r2
 80139b8:	f04f 0c01 	mov.w	ip, #1
 80139bc:	e001      	b.n	80139c2 <uxr_stream_id_from_raw+0x16>
 80139be:	4684      	mov	ip, r0
 80139c0:	4602      	mov	r2, r0
 80139c2:	2300      	movs	r3, #0
 80139c4:	f360 0307 	bfi	r3, r0, #0, #8
 80139c8:	f362 230f 	bfi	r3, r2, #8, #8
 80139cc:	f36c 4317 	bfi	r3, ip, #16, #8
 80139d0:	f361 631f 	bfi	r3, r1, #24, #8
 80139d4:	b2da      	uxtb	r2, r3
 80139d6:	2000      	movs	r0, #0
 80139d8:	f362 0007 	bfi	r0, r2, #0, #8
 80139dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80139e0:	f362 200f 	bfi	r0, r2, #8, #8
 80139e4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80139e8:	f362 4017 	bfi	r0, r2, #16, #8
 80139ec:	0e1b      	lsrs	r3, r3, #24
 80139ee:	f363 601f 	bfi	r0, r3, #24, #8
 80139f2:	b002      	add	sp, #8
 80139f4:	4770      	bx	lr
 80139f6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80139fa:	f04f 0c02 	mov.w	ip, #2
 80139fe:	e7e0      	b.n	80139c2 <uxr_stream_id_from_raw+0x16>

08013a00 <uxr_init_stream_storage>:
 8013a00:	2300      	movs	r3, #0
 8013a02:	7403      	strb	r3, [r0, #16]
 8013a04:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8013a08:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013a0c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013a10:	4770      	bx	lr
 8013a12:	bf00      	nop

08013a14 <uxr_reset_stream_storage>:
 8013a14:	b570      	push	{r4, r5, r6, lr}
 8013a16:	7c03      	ldrb	r3, [r0, #16]
 8013a18:	4604      	mov	r4, r0
 8013a1a:	b153      	cbz	r3, 8013a32 <uxr_reset_stream_storage+0x1e>
 8013a1c:	4606      	mov	r6, r0
 8013a1e:	2500      	movs	r5, #0
 8013a20:	4630      	mov	r0, r6
 8013a22:	f006 fa9b 	bl	8019f5c <uxr_reset_output_best_effort_stream>
 8013a26:	7c23      	ldrb	r3, [r4, #16]
 8013a28:	3501      	adds	r5, #1
 8013a2a:	42ab      	cmp	r3, r5
 8013a2c:	f106 0610 	add.w	r6, r6, #16
 8013a30:	d8f6      	bhi.n	8013a20 <uxr_reset_stream_storage+0xc>
 8013a32:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013a36:	b163      	cbz	r3, 8013a52 <uxr_reset_stream_storage+0x3e>
 8013a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013a3c:	2500      	movs	r5, #0
 8013a3e:	4630      	mov	r0, r6
 8013a40:	f006 f88e 	bl	8019b60 <uxr_reset_input_best_effort_stream>
 8013a44:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013a48:	3501      	adds	r5, #1
 8013a4a:	42ab      	cmp	r3, r5
 8013a4c:	f106 0602 	add.w	r6, r6, #2
 8013a50:	d8f5      	bhi.n	8013a3e <uxr_reset_stream_storage+0x2a>
 8013a52:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013a56:	b163      	cbz	r3, 8013a72 <uxr_reset_stream_storage+0x5e>
 8013a58:	f104 0618 	add.w	r6, r4, #24
 8013a5c:	2500      	movs	r5, #0
 8013a5e:	4630      	mov	r0, r6
 8013a60:	f006 fb28 	bl	801a0b4 <uxr_reset_output_reliable_stream>
 8013a64:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013a68:	3501      	adds	r5, #1
 8013a6a:	42ab      	cmp	r3, r5
 8013a6c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8013a70:	d8f5      	bhi.n	8013a5e <uxr_reset_stream_storage+0x4a>
 8013a72:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013a76:	b163      	cbz	r3, 8013a92 <uxr_reset_stream_storage+0x7e>
 8013a78:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8013a7c:	2500      	movs	r5, #0
 8013a7e:	4630      	mov	r0, r6
 8013a80:	f006 f8e2 	bl	8019c48 <uxr_reset_input_reliable_stream>
 8013a84:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013a88:	3501      	adds	r5, #1
 8013a8a:	42ab      	cmp	r3, r5
 8013a8c:	f106 0618 	add.w	r6, r6, #24
 8013a90:	d8f5      	bhi.n	8013a7e <uxr_reset_stream_storage+0x6a>
 8013a92:	bd70      	pop	{r4, r5, r6, pc}

08013a94 <uxr_add_output_best_effort_buffer>:
 8013a94:	b510      	push	{r4, lr}
 8013a96:	7c04      	ldrb	r4, [r0, #16]
 8013a98:	f104 0c01 	add.w	ip, r4, #1
 8013a9c:	b082      	sub	sp, #8
 8013a9e:	f880 c010 	strb.w	ip, [r0, #16]
 8013aa2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013aa6:	f006 fa4f 	bl	8019f48 <uxr_init_output_best_effort_stream>
 8013aaa:	2201      	movs	r2, #1
 8013aac:	4611      	mov	r1, r2
 8013aae:	4620      	mov	r0, r4
 8013ab0:	b002      	add	sp, #8
 8013ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ab6:	f7ff bf4f 	b.w	8013958 <uxr_stream_id>
 8013aba:	bf00      	nop

08013abc <uxr_add_output_reliable_buffer>:
 8013abc:	b510      	push	{r4, lr}
 8013abe:	b084      	sub	sp, #16
 8013ac0:	4684      	mov	ip, r0
 8013ac2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013ac6:	9000      	str	r0, [sp, #0]
 8013ac8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013acc:	2028      	movs	r0, #40	@ 0x28
 8013ace:	fb00 c004 	mla	r0, r0, r4, ip
 8013ad2:	f104 0e01 	add.w	lr, r4, #1
 8013ad6:	3018      	adds	r0, #24
 8013ad8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013adc:	f006 fab2 	bl	801a044 <uxr_init_output_reliable_stream>
 8013ae0:	2201      	movs	r2, #1
 8013ae2:	2102      	movs	r1, #2
 8013ae4:	4620      	mov	r0, r4
 8013ae6:	b004      	add	sp, #16
 8013ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013aec:	f7ff bf34 	b.w	8013958 <uxr_stream_id>

08013af0 <uxr_add_input_best_effort_buffer>:
 8013af0:	b510      	push	{r4, lr}
 8013af2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013af6:	4603      	mov	r3, r0
 8013af8:	1c62      	adds	r2, r4, #1
 8013afa:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8013afe:	b082      	sub	sp, #8
 8013b00:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013b08:	f006 f826 	bl	8019b58 <uxr_init_input_best_effort_stream>
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	2101      	movs	r1, #1
 8013b10:	4620      	mov	r0, r4
 8013b12:	b002      	add	sp, #8
 8013b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b18:	f7ff bf1e 	b.w	8013958 <uxr_stream_id>

08013b1c <uxr_add_input_reliable_buffer>:
 8013b1c:	b510      	push	{r4, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	4684      	mov	ip, r0
 8013b22:	9806      	ldr	r0, [sp, #24]
 8013b24:	9000      	str	r0, [sp, #0]
 8013b26:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8013b2a:	2018      	movs	r0, #24
 8013b2c:	fb00 c004 	mla	r0, r0, r4, ip
 8013b30:	f104 0e01 	add.w	lr, r4, #1
 8013b34:	3048      	adds	r0, #72	@ 0x48
 8013b36:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8013b3a:	f006 f859 	bl	8019bf0 <uxr_init_input_reliable_stream>
 8013b3e:	2200      	movs	r2, #0
 8013b40:	2102      	movs	r1, #2
 8013b42:	4620      	mov	r0, r4
 8013b44:	b004      	add	sp, #16
 8013b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b4a:	f7ff bf05 	b.w	8013958 <uxr_stream_id>
 8013b4e:	bf00      	nop

08013b50 <uxr_get_output_best_effort_stream>:
 8013b50:	7c03      	ldrb	r3, [r0, #16]
 8013b52:	428b      	cmp	r3, r1
 8013b54:	bf8c      	ite	hi
 8013b56:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013b5a:	2000      	movls	r0, #0
 8013b5c:	4770      	bx	lr
 8013b5e:	bf00      	nop

08013b60 <uxr_get_output_reliable_stream>:
 8013b60:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013b64:	428b      	cmp	r3, r1
 8013b66:	bf83      	ittte	hi
 8013b68:	2328      	movhi	r3, #40	@ 0x28
 8013b6a:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013b6e:	3018      	addhi	r0, #24
 8013b70:	2000      	movls	r0, #0
 8013b72:	4770      	bx	lr

08013b74 <uxr_get_input_best_effort_stream>:
 8013b74:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013b78:	428b      	cmp	r3, r1
 8013b7a:	bf86      	itte	hi
 8013b7c:	3121      	addhi	r1, #33	@ 0x21
 8013b7e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8013b82:	2000      	movls	r0, #0
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop

08013b88 <uxr_get_input_reliable_stream>:
 8013b88:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8013b8c:	428b      	cmp	r3, r1
 8013b8e:	bf83      	ittte	hi
 8013b90:	2318      	movhi	r3, #24
 8013b92:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013b96:	3048      	addhi	r0, #72	@ 0x48
 8013b98:	2000      	movls	r0, #0
 8013b9a:	4770      	bx	lr

08013b9c <uxr_output_streams_confirmed>:
 8013b9c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013ba0:	b183      	cbz	r3, 8013bc4 <uxr_output_streams_confirmed+0x28>
 8013ba2:	b570      	push	{r4, r5, r6, lr}
 8013ba4:	4606      	mov	r6, r0
 8013ba6:	f100 0518 	add.w	r5, r0, #24
 8013baa:	2400      	movs	r4, #0
 8013bac:	e001      	b.n	8013bb2 <uxr_output_streams_confirmed+0x16>
 8013bae:	3528      	adds	r5, #40	@ 0x28
 8013bb0:	b138      	cbz	r0, 8013bc2 <uxr_output_streams_confirmed+0x26>
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	f006 fcee 	bl	801a594 <uxr_is_output_up_to_date>
 8013bb8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013bbc:	3401      	adds	r4, #1
 8013bbe:	42a3      	cmp	r3, r4
 8013bc0:	d8f5      	bhi.n	8013bae <uxr_output_streams_confirmed+0x12>
 8013bc2:	bd70      	pop	{r4, r5, r6, pc}
 8013bc4:	2001      	movs	r0, #1
 8013bc6:	4770      	bx	lr

08013bc8 <uxr_buffer_submessage_header>:
 8013bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bca:	4604      	mov	r4, r0
 8013bcc:	460e      	mov	r6, r1
 8013bce:	2104      	movs	r1, #4
 8013bd0:	4615      	mov	r5, r2
 8013bd2:	461f      	mov	r7, r3
 8013bd4:	f7fc fc80 	bl	80104d8 <ucdr_align_to>
 8013bd8:	2301      	movs	r3, #1
 8013bda:	ea47 0203 	orr.w	r2, r7, r3
 8013bde:	4631      	mov	r1, r6
 8013be0:	7523      	strb	r3, [r4, #20]
 8013be2:	4620      	mov	r0, r4
 8013be4:	462b      	mov	r3, r5
 8013be6:	f000 fa27 	bl	8014038 <uxr_serialize_submessage_header>
 8013bea:	4620      	mov	r0, r4
 8013bec:	f7fc fc8a 	bl	8010504 <ucdr_buffer_remaining>
 8013bf0:	42a8      	cmp	r0, r5
 8013bf2:	bf34      	ite	cc
 8013bf4:	2000      	movcc	r0, #0
 8013bf6:	2001      	movcs	r0, #1
 8013bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bfa:	bf00      	nop

08013bfc <uxr_read_submessage_header>:
 8013bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c00:	4604      	mov	r4, r0
 8013c02:	460d      	mov	r5, r1
 8013c04:	2104      	movs	r1, #4
 8013c06:	4616      	mov	r6, r2
 8013c08:	4698      	mov	r8, r3
 8013c0a:	f7fc fc65 	bl	80104d8 <ucdr_align_to>
 8013c0e:	4620      	mov	r0, r4
 8013c10:	f7fc fc78 	bl	8010504 <ucdr_buffer_remaining>
 8013c14:	2803      	cmp	r0, #3
 8013c16:	bf8c      	ite	hi
 8013c18:	2701      	movhi	r7, #1
 8013c1a:	2700      	movls	r7, #0
 8013c1c:	d802      	bhi.n	8013c24 <uxr_read_submessage_header+0x28>
 8013c1e:	4638      	mov	r0, r7
 8013c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c24:	4633      	mov	r3, r6
 8013c26:	4642      	mov	r2, r8
 8013c28:	4620      	mov	r0, r4
 8013c2a:	4629      	mov	r1, r5
 8013c2c:	f000 fa18 	bl	8014060 <uxr_deserialize_submessage_header>
 8013c30:	f898 3000 	ldrb.w	r3, [r8]
 8013c34:	f003 0201 	and.w	r2, r3, #1
 8013c38:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013c3c:	f888 3000 	strb.w	r3, [r8]
 8013c40:	7522      	strb	r2, [r4, #20]
 8013c42:	4638      	mov	r0, r7
 8013c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c48 <uxr_submessage_padding>:
 8013c48:	f010 0003 	ands.w	r0, r0, #3
 8013c4c:	bf18      	it	ne
 8013c4e:	f1c0 0004 	rsbne	r0, r0, #4
 8013c52:	4770      	bx	lr

08013c54 <uxr_millis>:
 8013c54:	b510      	push	{r4, lr}
 8013c56:	b084      	sub	sp, #16
 8013c58:	4669      	mov	r1, sp
 8013c5a:	2001      	movs	r0, #1
 8013c5c:	f7ed fd90 	bl	8001780 <clock_gettime>
 8013c60:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8013c64:	4906      	ldr	r1, [pc, #24]	@ (8013c80 <uxr_millis+0x2c>)
 8013c66:	fba0 0301 	umull	r0, r3, r0, r1
 8013c6a:	1900      	adds	r0, r0, r4
 8013c6c:	fb01 3102 	mla	r1, r1, r2, r3
 8013c70:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013c74:	4a03      	ldr	r2, [pc, #12]	@ (8013c84 <uxr_millis+0x30>)
 8013c76:	2300      	movs	r3, #0
 8013c78:	f7ec fb62 	bl	8000340 <__aeabi_ldivmod>
 8013c7c:	b004      	add	sp, #16
 8013c7e:	bd10      	pop	{r4, pc}
 8013c80:	3b9aca00 	.word	0x3b9aca00
 8013c84:	000f4240 	.word	0x000f4240

08013c88 <uxr_nanos>:
 8013c88:	b510      	push	{r4, lr}
 8013c8a:	b084      	sub	sp, #16
 8013c8c:	4669      	mov	r1, sp
 8013c8e:	2001      	movs	r0, #1
 8013c90:	f7ed fd76 	bl	8001780 <clock_gettime>
 8013c94:	4a06      	ldr	r2, [pc, #24]	@ (8013cb0 <uxr_nanos+0x28>)
 8013c96:	9800      	ldr	r0, [sp, #0]
 8013c98:	9902      	ldr	r1, [sp, #8]
 8013c9a:	9c01      	ldr	r4, [sp, #4]
 8013c9c:	fba0 0302 	umull	r0, r3, r0, r2
 8013ca0:	1840      	adds	r0, r0, r1
 8013ca2:	fb02 3304 	mla	r3, r2, r4, r3
 8013ca6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013caa:	b004      	add	sp, #16
 8013cac:	bd10      	pop	{r4, pc}
 8013cae:	bf00      	nop
 8013cb0:	3b9aca00 	.word	0x3b9aca00

08013cb4 <on_full_output_buffer_fragmented>:
 8013cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cb8:	460c      	mov	r4, r1
 8013cba:	b08a      	sub	sp, #40	@ 0x28
 8013cbc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8013cc0:	4606      	mov	r6, r0
 8013cc2:	f104 0008 	add.w	r0, r4, #8
 8013cc6:	f7ff ff4b 	bl	8013b60 <uxr_get_output_reliable_stream>
 8013cca:	4605      	mov	r5, r0
 8013ccc:	f006 fc6c 	bl	801a5a8 <get_available_free_slots>
 8013cd0:	b968      	cbnz	r0, 8013cee <on_full_output_buffer_fragmented+0x3a>
 8013cd2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	4798      	blx	r3
 8013cda:	b918      	cbnz	r0, 8013ce4 <on_full_output_buffer_fragmented+0x30>
 8013cdc:	2001      	movs	r0, #1
 8013cde:	b00a      	add	sp, #40	@ 0x28
 8013ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce4:	4628      	mov	r0, r5
 8013ce6:	f006 fc5f 	bl	801a5a8 <get_available_free_slots>
 8013cea:	2800      	cmp	r0, #0
 8013cec:	d0f6      	beq.n	8013cdc <on_full_output_buffer_fragmented+0x28>
 8013cee:	8929      	ldrh	r1, [r5, #8]
 8013cf0:	89eb      	ldrh	r3, [r5, #14]
 8013cf2:	7b28      	ldrb	r0, [r5, #12]
 8013cf4:	686a      	ldr	r2, [r5, #4]
 8013cf6:	fbb2 f8f1 	udiv	r8, r2, r1
 8013cfa:	fbb3 f2f1 	udiv	r2, r3, r1
 8013cfe:	fb01 3112 	mls	r1, r1, r2, r3
 8013d02:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013d06:	b289      	uxth	r1, r1
 8013d08:	fb08 f101 	mul.w	r1, r8, r1
 8013d0c:	30fc      	adds	r0, #252	@ 0xfc
 8013d0e:	f1a8 0804 	sub.w	r8, r8, #4
 8013d12:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013d16:	4440      	add	r0, r8
 8013d18:	b287      	uxth	r7, r0
 8013d1a:	1bdb      	subs	r3, r3, r7
 8013d1c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8013d20:	682b      	ldr	r3, [r5, #0]
 8013d22:	3104      	adds	r1, #4
 8013d24:	4419      	add	r1, r3
 8013d26:	4642      	mov	r2, r8
 8013d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d2c:	9300      	str	r3, [sp, #0]
 8013d2e:	a802      	add	r0, sp, #8
 8013d30:	2300      	movs	r3, #0
 8013d32:	f7fc fba5 	bl	8010480 <ucdr_init_buffer_origin_offset>
 8013d36:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013d3a:	f102 0308 	add.w	r3, r2, #8
 8013d3e:	4543      	cmp	r3, r8
 8013d40:	d928      	bls.n	8013d94 <on_full_output_buffer_fragmented+0xe0>
 8013d42:	463a      	mov	r2, r7
 8013d44:	2300      	movs	r3, #0
 8013d46:	210d      	movs	r1, #13
 8013d48:	a802      	add	r0, sp, #8
 8013d4a:	f7ff ff3d 	bl	8013bc8 <uxr_buffer_submessage_header>
 8013d4e:	8929      	ldrh	r1, [r5, #8]
 8013d50:	89eb      	ldrh	r3, [r5, #14]
 8013d52:	fbb3 f2f1 	udiv	r2, r3, r1
 8013d56:	fb01 3312 	mls	r3, r1, r2, r3
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	686a      	ldr	r2, [r5, #4]
 8013d5e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013d62:	fb02 f303 	mul.w	r3, r2, r3
 8013d66:	682a      	ldr	r2, [r5, #0]
 8013d68:	f842 8003 	str.w	r8, [r2, r3]
 8013d6c:	89e8      	ldrh	r0, [r5, #14]
 8013d6e:	2101      	movs	r1, #1
 8013d70:	f006 fd6a 	bl	801a848 <uxr_seq_num_add>
 8013d74:	9904      	ldr	r1, [sp, #16]
 8013d76:	9a03      	ldr	r2, [sp, #12]
 8013d78:	81e8      	strh	r0, [r5, #14]
 8013d7a:	1a52      	subs	r2, r2, r1
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f7fc fb91 	bl	80104a4 <ucdr_init_buffer>
 8013d82:	4630      	mov	r0, r6
 8013d84:	490f      	ldr	r1, [pc, #60]	@ (8013dc4 <on_full_output_buffer_fragmented+0x110>)
 8013d86:	4622      	mov	r2, r4
 8013d88:	f7fc fb60 	bl	801044c <ucdr_set_on_full_buffer_callback>
 8013d8c:	2000      	movs	r0, #0
 8013d8e:	b00a      	add	sp, #40	@ 0x28
 8013d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d94:	b292      	uxth	r2, r2
 8013d96:	2302      	movs	r3, #2
 8013d98:	210d      	movs	r1, #13
 8013d9a:	a802      	add	r0, sp, #8
 8013d9c:	f7ff ff14 	bl	8013bc8 <uxr_buffer_submessage_header>
 8013da0:	8928      	ldrh	r0, [r5, #8]
 8013da2:	89eb      	ldrh	r3, [r5, #14]
 8013da4:	fbb3 f1f0 	udiv	r1, r3, r0
 8013da8:	fb00 3311 	mls	r3, r0, r1, r3
 8013dac:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013db0:	6869      	ldr	r1, [r5, #4]
 8013db2:	fbb1 f1f0 	udiv	r1, r1, r0
 8013db6:	b29b      	uxth	r3, r3
 8013db8:	fb01 f303 	mul.w	r3, r1, r3
 8013dbc:	6829      	ldr	r1, [r5, #0]
 8013dbe:	3208      	adds	r2, #8
 8013dc0:	50ca      	str	r2, [r1, r3]
 8013dc2:	e7d3      	b.n	8013d6c <on_full_output_buffer_fragmented+0xb8>
 8013dc4:	08013cb5 	.word	0x08013cb5

08013dc8 <uxr_prepare_output_stream>:
 8013dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dca:	b087      	sub	sp, #28
 8013dcc:	2707      	movs	r7, #7
 8013dce:	9202      	str	r2, [sp, #8]
 8013dd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013dd2:	9103      	str	r1, [sp, #12]
 8013dd4:	2500      	movs	r5, #0
 8013dd6:	3204      	adds	r2, #4
 8013dd8:	e9cd 7500 	strd	r7, r5, [sp]
 8013ddc:	461c      	mov	r4, r3
 8013dde:	4606      	mov	r6, r0
 8013de0:	f7ff fc54 	bl	801368c <uxr_prepare_stream_to_write_submessage>
 8013de4:	f080 0201 	eor.w	r2, r0, #1
 8013de8:	b2d2      	uxtb	r2, r2
 8013dea:	75a2      	strb	r2, [r4, #22]
 8013dec:	b112      	cbz	r2, 8013df4 <uxr_prepare_output_stream+0x2c>
 8013dee:	4628      	mov	r0, r5
 8013df0:	b007      	add	sp, #28
 8013df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df4:	aa05      	add	r2, sp, #20
 8013df6:	9902      	ldr	r1, [sp, #8]
 8013df8:	4630      	mov	r0, r6
 8013dfa:	f7ff fd7d 	bl	80138f8 <uxr_init_base_object_request>
 8013dfe:	a905      	add	r1, sp, #20
 8013e00:	4605      	mov	r5, r0
 8013e02:	4620      	mov	r0, r4
 8013e04:	f001 f88c 	bl	8014f20 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013e08:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013e0c:	69a6      	ldr	r6, [r4, #24]
 8013e0e:	69e7      	ldr	r7, [r4, #28]
 8013e10:	1a52      	subs	r2, r2, r1
 8013e12:	4620      	mov	r0, r4
 8013e14:	f7fc fb46 	bl	80104a4 <ucdr_init_buffer>
 8013e18:	4620      	mov	r0, r4
 8013e1a:	463a      	mov	r2, r7
 8013e1c:	4631      	mov	r1, r6
 8013e1e:	f7fc fb15 	bl	801044c <ucdr_set_on_full_buffer_callback>
 8013e22:	4628      	mov	r0, r5
 8013e24:	b007      	add	sp, #28
 8013e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e28 <uxr_prepare_output_stream_fragmented>:
 8013e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e2c:	b091      	sub	sp, #68	@ 0x44
 8013e2e:	4605      	mov	r5, r0
 8013e30:	9105      	str	r1, [sp, #20]
 8013e32:	3008      	adds	r0, #8
 8013e34:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013e38:	461e      	mov	r6, r3
 8013e3a:	9204      	str	r2, [sp, #16]
 8013e3c:	f7ff fe90 	bl	8013b60 <uxr_get_output_reliable_stream>
 8013e40:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013e44:	2b01      	cmp	r3, #1
 8013e46:	f000 8091 	beq.w	8013f6c <uxr_prepare_output_stream_fragmented+0x144>
 8013e4a:	4604      	mov	r4, r0
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	f000 808d 	beq.w	8013f6c <uxr_prepare_output_stream_fragmented+0x144>
 8013e52:	f006 fba9 	bl	801a5a8 <get_available_free_slots>
 8013e56:	2800      	cmp	r0, #0
 8013e58:	f000 8083 	beq.w	8013f62 <uxr_prepare_output_stream_fragmented+0x13a>
 8013e5c:	8922      	ldrh	r2, [r4, #8]
 8013e5e:	89e7      	ldrh	r7, [r4, #14]
 8013e60:	fbb7 f9f2 	udiv	r9, r7, r2
 8013e64:	fb02 7919 	mls	r9, r2, r9, r7
 8013e68:	fa1f f989 	uxth.w	r9, r9
 8013e6c:	6863      	ldr	r3, [r4, #4]
 8013e6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013e72:	6823      	ldr	r3, [r4, #0]
 8013e74:	9203      	str	r2, [sp, #12]
 8013e76:	fb02 f909 	mul.w	r9, r2, r9
 8013e7a:	f109 0904 	add.w	r9, r9, #4
 8013e7e:	4499      	add	r9, r3
 8013e80:	7b23      	ldrb	r3, [r4, #12]
 8013e82:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013e86:	4543      	cmp	r3, r8
 8013e88:	f1a2 0b04 	sub.w	fp, r2, #4
 8013e8c:	d37a      	bcc.n	8013f84 <uxr_prepare_output_stream_fragmented+0x15c>
 8013e8e:	f1ab 0a04 	sub.w	sl, fp, #4
 8013e92:	ebaa 0a03 	sub.w	sl, sl, r3
 8013e96:	465a      	mov	r2, fp
 8013e98:	2300      	movs	r3, #0
 8013e9a:	4649      	mov	r1, r9
 8013e9c:	a808      	add	r0, sp, #32
 8013e9e:	f8cd 8000 	str.w	r8, [sp]
 8013ea2:	f7fc faed 	bl	8010480 <ucdr_init_buffer_origin_offset>
 8013ea6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013ea8:	fa1f fa8a 	uxth.w	sl, sl
 8013eac:	4652      	mov	r2, sl
 8013eae:	f103 0a08 	add.w	sl, r3, #8
 8013eb2:	45da      	cmp	sl, fp
 8013eb4:	bf34      	ite	cc
 8013eb6:	2302      	movcc	r3, #2
 8013eb8:	2300      	movcs	r3, #0
 8013eba:	210d      	movs	r1, #13
 8013ebc:	a808      	add	r0, sp, #32
 8013ebe:	f7ff fe83 	bl	8013bc8 <uxr_buffer_submessage_header>
 8013ec2:	8921      	ldrh	r1, [r4, #8]
 8013ec4:	fbb7 f2f1 	udiv	r2, r7, r1
 8013ec8:	fb01 7212 	mls	r2, r1, r2, r7
 8013ecc:	b292      	uxth	r2, r2
 8013ece:	6863      	ldr	r3, [r4, #4]
 8013ed0:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ed4:	fb02 f303 	mul.w	r3, r2, r3
 8013ed8:	6822      	ldr	r2, [r4, #0]
 8013eda:	4638      	mov	r0, r7
 8013edc:	f842 b003 	str.w	fp, [r2, r3]
 8013ee0:	2101      	movs	r1, #1
 8013ee2:	f006 fcb1 	bl	801a848 <uxr_seq_num_add>
 8013ee6:	9b03      	ldr	r3, [sp, #12]
 8013ee8:	f108 0104 	add.w	r1, r8, #4
 8013eec:	f1a3 0208 	sub.w	r2, r3, #8
 8013ef0:	eba2 0208 	sub.w	r2, r2, r8
 8013ef4:	4449      	add	r1, r9
 8013ef6:	4607      	mov	r7, r0
 8013ef8:	4630      	mov	r0, r6
 8013efa:	f7fc fad3 	bl	80104a4 <ucdr_init_buffer>
 8013efe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013f00:	81e7      	strh	r7, [r4, #14]
 8013f02:	1d1a      	adds	r2, r3, #4
 8013f04:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013f08:	bf28      	it	cs
 8013f0a:	2200      	movcs	r2, #0
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	b292      	uxth	r2, r2
 8013f10:	2107      	movs	r1, #7
 8013f12:	4630      	mov	r0, r6
 8013f14:	f7ff fe58 	bl	8013bc8 <uxr_buffer_submessage_header>
 8013f18:	9904      	ldr	r1, [sp, #16]
 8013f1a:	aa07      	add	r2, sp, #28
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	f7ff fceb 	bl	80138f8 <uxr_init_base_object_request>
 8013f22:	4604      	mov	r4, r0
 8013f24:	b318      	cbz	r0, 8013f6e <uxr_prepare_output_stream_fragmented+0x146>
 8013f26:	a907      	add	r1, sp, #28
 8013f28:	4630      	mov	r0, r6
 8013f2a:	f000 fff9 	bl	8014f20 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013f2e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013f32:	4630      	mov	r0, r6
 8013f34:	1a52      	subs	r2, r2, r1
 8013f36:	f7fc fab5 	bl	80104a4 <ucdr_init_buffer>
 8013f3a:	9b05      	ldr	r3, [sp, #20]
 8013f3c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8013f40:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013f42:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8013f46:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8013f48:	491b      	ldr	r1, [pc, #108]	@ (8013fb8 <uxr_prepare_output_stream_fragmented+0x190>)
 8013f4a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8013f4e:	4630      	mov	r0, r6
 8013f50:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8013f54:	462a      	mov	r2, r5
 8013f56:	f7fc fa79 	bl	801044c <ucdr_set_on_full_buffer_callback>
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	b011      	add	sp, #68	@ 0x44
 8013f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f62:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8013f64:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8013f66:	4628      	mov	r0, r5
 8013f68:	4798      	blx	r3
 8013f6a:	b920      	cbnz	r0, 8013f76 <uxr_prepare_output_stream_fragmented+0x14e>
 8013f6c:	2400      	movs	r4, #0
 8013f6e:	4620      	mov	r0, r4
 8013f70:	b011      	add	sp, #68	@ 0x44
 8013f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f76:	4620      	mov	r0, r4
 8013f78:	f006 fb16 	bl	801a5a8 <get_available_free_slots>
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	f47f af6d 	bne.w	8013e5c <uxr_prepare_output_stream_fragmented+0x34>
 8013f82:	e7f3      	b.n	8013f6c <uxr_prepare_output_stream_fragmented+0x144>
 8013f84:	4638      	mov	r0, r7
 8013f86:	2101      	movs	r1, #1
 8013f88:	f006 fc5e 	bl	801a848 <uxr_seq_num_add>
 8013f8c:	8921      	ldrh	r1, [r4, #8]
 8013f8e:	fbb0 f2f1 	udiv	r2, r0, r1
 8013f92:	fb01 0912 	mls	r9, r1, r2, r0
 8013f96:	fa1f f289 	uxth.w	r2, r9
 8013f9a:	6863      	ldr	r3, [r4, #4]
 8013f9c:	fbb3 f9f1 	udiv	r9, r3, r1
 8013fa0:	6823      	ldr	r3, [r4, #0]
 8013fa2:	fb02 f909 	mul.w	r9, r2, r9
 8013fa6:	f109 0904 	add.w	r9, r9, #4
 8013faa:	4499      	add	r9, r3
 8013fac:	4607      	mov	r7, r0
 8013fae:	7b23      	ldrb	r3, [r4, #12]
 8013fb0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013fb4:	e76b      	b.n	8013e8e <uxr_prepare_output_stream_fragmented+0x66>
 8013fb6:	bf00      	nop
 8013fb8:	08013cb5 	.word	0x08013cb5

08013fbc <uxr_serialize_message_header>:
 8013fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fbe:	b083      	sub	sp, #12
 8013fc0:	4616      	mov	r6, r2
 8013fc2:	4604      	mov	r4, r0
 8013fc4:	9301      	str	r3, [sp, #4]
 8013fc6:	460d      	mov	r5, r1
 8013fc8:	9f08      	ldr	r7, [sp, #32]
 8013fca:	f7fb f801 	bl	800efd0 <ucdr_serialize_uint8_t>
 8013fce:	4631      	mov	r1, r6
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	f7fa fffd 	bl	800efd0 <ucdr_serialize_uint8_t>
 8013fd6:	9a01      	ldr	r2, [sp, #4]
 8013fd8:	2101      	movs	r1, #1
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f7fb f8a4 	bl	800f128 <ucdr_serialize_endian_uint16_t>
 8013fe0:	062b      	lsls	r3, r5, #24
 8013fe2:	d501      	bpl.n	8013fe8 <uxr_serialize_message_header+0x2c>
 8013fe4:	b003      	add	sp, #12
 8013fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fe8:	2204      	movs	r2, #4
 8013fea:	4639      	mov	r1, r7
 8013fec:	4620      	mov	r0, r4
 8013fee:	b003      	add	sp, #12
 8013ff0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013ff4:	f005 bbb6 	b.w	8019764 <ucdr_serialize_array_uint8_t>

08013ff8 <uxr_deserialize_message_header>:
 8013ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	4616      	mov	r6, r2
 8013ffe:	4604      	mov	r4, r0
 8014000:	9301      	str	r3, [sp, #4]
 8014002:	460d      	mov	r5, r1
 8014004:	9f08      	ldr	r7, [sp, #32]
 8014006:	f7fa fff9 	bl	800effc <ucdr_deserialize_uint8_t>
 801400a:	4631      	mov	r1, r6
 801400c:	4620      	mov	r0, r4
 801400e:	f7fa fff5 	bl	800effc <ucdr_deserialize_uint8_t>
 8014012:	9a01      	ldr	r2, [sp, #4]
 8014014:	2101      	movs	r1, #1
 8014016:	4620      	mov	r0, r4
 8014018:	f7fb f97a 	bl	800f310 <ucdr_deserialize_endian_uint16_t>
 801401c:	f995 3000 	ldrsb.w	r3, [r5]
 8014020:	2b00      	cmp	r3, #0
 8014022:	da01      	bge.n	8014028 <uxr_deserialize_message_header+0x30>
 8014024:	b003      	add	sp, #12
 8014026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014028:	2204      	movs	r2, #4
 801402a:	4639      	mov	r1, r7
 801402c:	4620      	mov	r0, r4
 801402e:	b003      	add	sp, #12
 8014030:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014034:	f005 bbfa 	b.w	801982c <ucdr_deserialize_array_uint8_t>

08014038 <uxr_serialize_submessage_header>:
 8014038:	b530      	push	{r4, r5, lr}
 801403a:	b083      	sub	sp, #12
 801403c:	4615      	mov	r5, r2
 801403e:	4604      	mov	r4, r0
 8014040:	9301      	str	r3, [sp, #4]
 8014042:	f7fa ffc5 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014046:	4629      	mov	r1, r5
 8014048:	4620      	mov	r0, r4
 801404a:	f7fa ffc1 	bl	800efd0 <ucdr_serialize_uint8_t>
 801404e:	9a01      	ldr	r2, [sp, #4]
 8014050:	2101      	movs	r1, #1
 8014052:	4620      	mov	r0, r4
 8014054:	b003      	add	sp, #12
 8014056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801405a:	f7fb b865 	b.w	800f128 <ucdr_serialize_endian_uint16_t>
 801405e:	bf00      	nop

08014060 <uxr_deserialize_submessage_header>:
 8014060:	b530      	push	{r4, r5, lr}
 8014062:	b083      	sub	sp, #12
 8014064:	4615      	mov	r5, r2
 8014066:	4604      	mov	r4, r0
 8014068:	9301      	str	r3, [sp, #4]
 801406a:	f7fa ffc7 	bl	800effc <ucdr_deserialize_uint8_t>
 801406e:	4629      	mov	r1, r5
 8014070:	4620      	mov	r0, r4
 8014072:	f7fa ffc3 	bl	800effc <ucdr_deserialize_uint8_t>
 8014076:	9a01      	ldr	r2, [sp, #4]
 8014078:	2101      	movs	r1, #1
 801407a:	4620      	mov	r0, r4
 801407c:	b003      	add	sp, #12
 801407e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014082:	f7fb b945 	b.w	800f310 <ucdr_deserialize_endian_uint16_t>
 8014086:	bf00      	nop

08014088 <uxr_serialize_CLIENT_Representation>:
 8014088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801408c:	2204      	movs	r2, #4
 801408e:	460e      	mov	r6, r1
 8014090:	4605      	mov	r5, r0
 8014092:	f005 fb67 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014096:	2202      	movs	r2, #2
 8014098:	4607      	mov	r7, r0
 801409a:	1d31      	adds	r1, r6, #4
 801409c:	4628      	mov	r0, r5
 801409e:	f005 fb61 	bl	8019764 <ucdr_serialize_array_uint8_t>
 80140a2:	4038      	ands	r0, r7
 80140a4:	2202      	movs	r2, #2
 80140a6:	1db1      	adds	r1, r6, #6
 80140a8:	b2c7      	uxtb	r7, r0
 80140aa:	4628      	mov	r0, r5
 80140ac:	f005 fb5a 	bl	8019764 <ucdr_serialize_array_uint8_t>
 80140b0:	2204      	movs	r2, #4
 80140b2:	4007      	ands	r7, r0
 80140b4:	f106 0108 	add.w	r1, r6, #8
 80140b8:	4628      	mov	r0, r5
 80140ba:	f005 fb53 	bl	8019764 <ucdr_serialize_array_uint8_t>
 80140be:	7b31      	ldrb	r1, [r6, #12]
 80140c0:	4007      	ands	r7, r0
 80140c2:	4628      	mov	r0, r5
 80140c4:	f7fa ff84 	bl	800efd0 <ucdr_serialize_uint8_t>
 80140c8:	7b71      	ldrb	r1, [r6, #13]
 80140ca:	4007      	ands	r7, r0
 80140cc:	4628      	mov	r0, r5
 80140ce:	f7fa ff51 	bl	800ef74 <ucdr_serialize_bool>
 80140d2:	7b73      	ldrb	r3, [r6, #13]
 80140d4:	ea07 0800 	and.w	r8, r7, r0
 80140d8:	b93b      	cbnz	r3, 80140ea <uxr_serialize_CLIENT_Representation+0x62>
 80140da:	8bb1      	ldrh	r1, [r6, #28]
 80140dc:	4628      	mov	r0, r5
 80140de:	f7fa ffa3 	bl	800f028 <ucdr_serialize_uint16_t>
 80140e2:	ea08 0000 	and.w	r0, r8, r0
 80140e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140ea:	6931      	ldr	r1, [r6, #16]
 80140ec:	4628      	mov	r0, r5
 80140ee:	f7fb f985 	bl	800f3fc <ucdr_serialize_uint32_t>
 80140f2:	6933      	ldr	r3, [r6, #16]
 80140f4:	b1e3      	cbz	r3, 8014130 <uxr_serialize_CLIENT_Representation+0xa8>
 80140f6:	b1c0      	cbz	r0, 801412a <uxr_serialize_CLIENT_Representation+0xa2>
 80140f8:	4637      	mov	r7, r6
 80140fa:	f04f 0900 	mov.w	r9, #0
 80140fe:	e001      	b.n	8014104 <uxr_serialize_CLIENT_Representation+0x7c>
 8014100:	3708      	adds	r7, #8
 8014102:	b194      	cbz	r4, 801412a <uxr_serialize_CLIENT_Representation+0xa2>
 8014104:	6979      	ldr	r1, [r7, #20]
 8014106:	4628      	mov	r0, r5
 8014108:	f005 fc4c 	bl	80199a4 <ucdr_serialize_string>
 801410c:	69b9      	ldr	r1, [r7, #24]
 801410e:	4604      	mov	r4, r0
 8014110:	4628      	mov	r0, r5
 8014112:	f005 fc47 	bl	80199a4 <ucdr_serialize_string>
 8014116:	6933      	ldr	r3, [r6, #16]
 8014118:	f109 0901 	add.w	r9, r9, #1
 801411c:	4004      	ands	r4, r0
 801411e:	4599      	cmp	r9, r3
 8014120:	b2e4      	uxtb	r4, r4
 8014122:	d3ed      	bcc.n	8014100 <uxr_serialize_CLIENT_Representation+0x78>
 8014124:	ea08 0804 	and.w	r8, r8, r4
 8014128:	e7d7      	b.n	80140da <uxr_serialize_CLIENT_Representation+0x52>
 801412a:	f04f 0800 	mov.w	r8, #0
 801412e:	e7d4      	b.n	80140da <uxr_serialize_CLIENT_Representation+0x52>
 8014130:	ea08 0800 	and.w	r8, r8, r0
 8014134:	e7d1      	b.n	80140da <uxr_serialize_CLIENT_Representation+0x52>
 8014136:	bf00      	nop

08014138 <uxr_deserialize_CLIENT_Representation>:
 8014138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801413c:	2204      	movs	r2, #4
 801413e:	460c      	mov	r4, r1
 8014140:	4605      	mov	r5, r0
 8014142:	f005 fb73 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014146:	2202      	movs	r2, #2
 8014148:	4607      	mov	r7, r0
 801414a:	1d21      	adds	r1, r4, #4
 801414c:	4628      	mov	r0, r5
 801414e:	f005 fb6d 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014152:	4038      	ands	r0, r7
 8014154:	2202      	movs	r2, #2
 8014156:	1da1      	adds	r1, r4, #6
 8014158:	b2c6      	uxtb	r6, r0
 801415a:	4628      	mov	r0, r5
 801415c:	f005 fb66 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014160:	2204      	movs	r2, #4
 8014162:	4006      	ands	r6, r0
 8014164:	f104 0108 	add.w	r1, r4, #8
 8014168:	4628      	mov	r0, r5
 801416a:	f005 fb5f 	bl	801982c <ucdr_deserialize_array_uint8_t>
 801416e:	f104 010c 	add.w	r1, r4, #12
 8014172:	4006      	ands	r6, r0
 8014174:	4628      	mov	r0, r5
 8014176:	f7fa ff41 	bl	800effc <ucdr_deserialize_uint8_t>
 801417a:	f104 010d 	add.w	r1, r4, #13
 801417e:	ea06 0700 	and.w	r7, r6, r0
 8014182:	4628      	mov	r0, r5
 8014184:	f7fa ff0c 	bl	800efa0 <ucdr_deserialize_bool>
 8014188:	7b63      	ldrb	r3, [r4, #13]
 801418a:	4007      	ands	r7, r0
 801418c:	b93b      	cbnz	r3, 801419e <uxr_deserialize_CLIENT_Representation+0x66>
 801418e:	f104 011c 	add.w	r1, r4, #28
 8014192:	4628      	mov	r0, r5
 8014194:	f7fb f848 	bl	800f228 <ucdr_deserialize_uint16_t>
 8014198:	4038      	ands	r0, r7
 801419a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801419e:	f104 0110 	add.w	r1, r4, #16
 80141a2:	4628      	mov	r0, r5
 80141a4:	f7fb fa5a 	bl	800f65c <ucdr_deserialize_uint32_t>
 80141a8:	6923      	ldr	r3, [r4, #16]
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d903      	bls.n	80141b6 <uxr_deserialize_CLIENT_Representation+0x7e>
 80141ae:	2301      	movs	r3, #1
 80141b0:	75ab      	strb	r3, [r5, #22]
 80141b2:	2700      	movs	r7, #0
 80141b4:	e7eb      	b.n	801418e <uxr_deserialize_CLIENT_Representation+0x56>
 80141b6:	b30b      	cbz	r3, 80141fc <uxr_deserialize_CLIENT_Representation+0xc4>
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d0fa      	beq.n	80141b2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80141bc:	46a0      	mov	r8, r4
 80141be:	f04f 0900 	mov.w	r9, #0
 80141c2:	e001      	b.n	80141c8 <uxr_deserialize_CLIENT_Representation+0x90>
 80141c4:	2e00      	cmp	r6, #0
 80141c6:	d0f4      	beq.n	80141b2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80141c8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80141cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80141d0:	4628      	mov	r0, r5
 80141d2:	f005 fbf7 	bl	80199c4 <ucdr_deserialize_string>
 80141d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80141da:	4606      	mov	r6, r0
 80141dc:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80141e0:	4628      	mov	r0, r5
 80141e2:	f005 fbef 	bl	80199c4 <ucdr_deserialize_string>
 80141e6:	6923      	ldr	r3, [r4, #16]
 80141e8:	f109 0901 	add.w	r9, r9, #1
 80141ec:	4006      	ands	r6, r0
 80141ee:	4599      	cmp	r9, r3
 80141f0:	f108 0808 	add.w	r8, r8, #8
 80141f4:	b2f6      	uxtb	r6, r6
 80141f6:	d3e5      	bcc.n	80141c4 <uxr_deserialize_CLIENT_Representation+0x8c>
 80141f8:	4037      	ands	r7, r6
 80141fa:	e7c8      	b.n	801418e <uxr_deserialize_CLIENT_Representation+0x56>
 80141fc:	4007      	ands	r7, r0
 80141fe:	e7c6      	b.n	801418e <uxr_deserialize_CLIENT_Representation+0x56>

08014200 <uxr_serialize_AGENT_Representation>:
 8014200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014204:	2204      	movs	r2, #4
 8014206:	460f      	mov	r7, r1
 8014208:	4605      	mov	r5, r0
 801420a:	f005 faab 	bl	8019764 <ucdr_serialize_array_uint8_t>
 801420e:	2202      	movs	r2, #2
 8014210:	4604      	mov	r4, r0
 8014212:	1d39      	adds	r1, r7, #4
 8014214:	4628      	mov	r0, r5
 8014216:	f005 faa5 	bl	8019764 <ucdr_serialize_array_uint8_t>
 801421a:	4020      	ands	r0, r4
 801421c:	2202      	movs	r2, #2
 801421e:	1db9      	adds	r1, r7, #6
 8014220:	b2c4      	uxtb	r4, r0
 8014222:	4628      	mov	r0, r5
 8014224:	f005 fa9e 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014228:	7a39      	ldrb	r1, [r7, #8]
 801422a:	4004      	ands	r4, r0
 801422c:	4628      	mov	r0, r5
 801422e:	f7fa fea1 	bl	800ef74 <ucdr_serialize_bool>
 8014232:	7a3b      	ldrb	r3, [r7, #8]
 8014234:	ea00 0804 	and.w	r8, r0, r4
 8014238:	b913      	cbnz	r3, 8014240 <uxr_serialize_AGENT_Representation+0x40>
 801423a:	4640      	mov	r0, r8
 801423c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014240:	68f9      	ldr	r1, [r7, #12]
 8014242:	4628      	mov	r0, r5
 8014244:	f7fb f8da 	bl	800f3fc <ucdr_serialize_uint32_t>
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	b303      	cbz	r3, 801428e <uxr_serialize_AGENT_Representation+0x8e>
 801424c:	b1d0      	cbz	r0, 8014284 <uxr_serialize_AGENT_Representation+0x84>
 801424e:	463e      	mov	r6, r7
 8014250:	f04f 0900 	mov.w	r9, #0
 8014254:	e001      	b.n	801425a <uxr_serialize_AGENT_Representation+0x5a>
 8014256:	3608      	adds	r6, #8
 8014258:	b1a4      	cbz	r4, 8014284 <uxr_serialize_AGENT_Representation+0x84>
 801425a:	6931      	ldr	r1, [r6, #16]
 801425c:	4628      	mov	r0, r5
 801425e:	f005 fba1 	bl	80199a4 <ucdr_serialize_string>
 8014262:	6971      	ldr	r1, [r6, #20]
 8014264:	4604      	mov	r4, r0
 8014266:	4628      	mov	r0, r5
 8014268:	f005 fb9c 	bl	80199a4 <ucdr_serialize_string>
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	f109 0901 	add.w	r9, r9, #1
 8014272:	4004      	ands	r4, r0
 8014274:	4599      	cmp	r9, r3
 8014276:	b2e4      	uxtb	r4, r4
 8014278:	d3ed      	bcc.n	8014256 <uxr_serialize_AGENT_Representation+0x56>
 801427a:	ea08 0804 	and.w	r8, r8, r4
 801427e:	4640      	mov	r0, r8
 8014280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014284:	f04f 0800 	mov.w	r8, #0
 8014288:	4640      	mov	r0, r8
 801428a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801428e:	ea08 0800 	and.w	r8, r8, r0
 8014292:	e7d2      	b.n	801423a <uxr_serialize_AGENT_Representation+0x3a>

08014294 <uxr_serialize_DATAWRITER_Representation>:
 8014294:	b570      	push	{r4, r5, r6, lr}
 8014296:	460d      	mov	r5, r1
 8014298:	7809      	ldrb	r1, [r1, #0]
 801429a:	4606      	mov	r6, r0
 801429c:	f7fa fe98 	bl	800efd0 <ucdr_serialize_uint8_t>
 80142a0:	4604      	mov	r4, r0
 80142a2:	b130      	cbz	r0, 80142b2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80142a4:	782b      	ldrb	r3, [r5, #0]
 80142a6:	2b02      	cmp	r3, #2
 80142a8:	d00c      	beq.n	80142c4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80142aa:	2b03      	cmp	r3, #3
 80142ac:	d010      	beq.n	80142d0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d008      	beq.n	80142c4 <uxr_serialize_DATAWRITER_Representation+0x30>
 80142b2:	2202      	movs	r2, #2
 80142b4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80142b8:	4630      	mov	r0, r6
 80142ba:	f005 fa53 	bl	8019764 <ucdr_serialize_array_uint8_t>
 80142be:	4020      	ands	r0, r4
 80142c0:	b2c0      	uxtb	r0, r0
 80142c2:	bd70      	pop	{r4, r5, r6, pc}
 80142c4:	6869      	ldr	r1, [r5, #4]
 80142c6:	4630      	mov	r0, r6
 80142c8:	f005 fb6c 	bl	80199a4 <ucdr_serialize_string>
 80142cc:	4604      	mov	r4, r0
 80142ce:	e7f0      	b.n	80142b2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80142d0:	4629      	mov	r1, r5
 80142d2:	4630      	mov	r0, r6
 80142d4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80142d8:	3104      	adds	r1, #4
 80142da:	f005 fb37 	bl	801994c <ucdr_serialize_sequence_uint8_t>
 80142de:	4604      	mov	r4, r0
 80142e0:	e7e7      	b.n	80142b2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80142e2:	bf00      	nop

080142e4 <uxr_serialize_ObjectVariant.part.0>:
 80142e4:	b570      	push	{r4, r5, r6, lr}
 80142e6:	780b      	ldrb	r3, [r1, #0]
 80142e8:	3b01      	subs	r3, #1
 80142ea:	460c      	mov	r4, r1
 80142ec:	4605      	mov	r5, r0
 80142ee:	2b0d      	cmp	r3, #13
 80142f0:	d854      	bhi.n	801439c <uxr_serialize_ObjectVariant.part.0+0xb8>
 80142f2:	e8df f003 	tbb	[pc, r3]
 80142f6:	0730      	.short	0x0730
 80142f8:	07071b1b 	.word	0x07071b1b
 80142fc:	0c530707 	.word	0x0c530707
 8014300:	494e0c0c 	.word	0x494e0c0c
 8014304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014308:	3104      	adds	r1, #4
 801430a:	f7ff bfc3 	b.w	8014294 <uxr_serialize_DATAWRITER_Representation>
 801430e:	7909      	ldrb	r1, [r1, #4]
 8014310:	f7fa fe5e 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014314:	b1e8      	cbz	r0, 8014352 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8014316:	7923      	ldrb	r3, [r4, #4]
 8014318:	2b01      	cmp	r3, #1
 801431a:	d001      	beq.n	8014320 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801431c:	2b02      	cmp	r3, #2
 801431e:	d13d      	bne.n	801439c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014320:	68a1      	ldr	r1, [r4, #8]
 8014322:	4628      	mov	r0, r5
 8014324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014328:	f005 bb3c 	b.w	80199a4 <ucdr_serialize_string>
 801432c:	7909      	ldrb	r1, [r1, #4]
 801432e:	f7fa fe4f 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014332:	4606      	mov	r6, r0
 8014334:	b120      	cbz	r0, 8014340 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014336:	7923      	ldrb	r3, [r4, #4]
 8014338:	2b02      	cmp	r3, #2
 801433a:	d039      	beq.n	80143b0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801433c:	2b03      	cmp	r3, #3
 801433e:	d02f      	beq.n	80143a0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8014340:	2202      	movs	r2, #2
 8014342:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8014346:	4628      	mov	r0, r5
 8014348:	f005 fa0c 	bl	8019764 <ucdr_serialize_array_uint8_t>
 801434c:	4030      	ands	r0, r6
 801434e:	b2c0      	uxtb	r0, r0
 8014350:	bd70      	pop	{r4, r5, r6, pc}
 8014352:	2000      	movs	r0, #0
 8014354:	bd70      	pop	{r4, r5, r6, pc}
 8014356:	7909      	ldrb	r1, [r1, #4]
 8014358:	f7fa fe3a 	bl	800efd0 <ucdr_serialize_uint8_t>
 801435c:	4606      	mov	r6, r0
 801435e:	b158      	cbz	r0, 8014378 <uxr_serialize_ObjectVariant.part.0+0x94>
 8014360:	7923      	ldrb	r3, [r4, #4]
 8014362:	2b02      	cmp	r3, #2
 8014364:	d003      	beq.n	801436e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8014366:	2b03      	cmp	r3, #3
 8014368:	d028      	beq.n	80143bc <uxr_serialize_ObjectVariant.part.0+0xd8>
 801436a:	2b01      	cmp	r3, #1
 801436c:	d104      	bne.n	8014378 <uxr_serialize_ObjectVariant.part.0+0x94>
 801436e:	68a1      	ldr	r1, [r4, #8]
 8014370:	4628      	mov	r0, r5
 8014372:	f005 fb17 	bl	80199a4 <ucdr_serialize_string>
 8014376:	4606      	mov	r6, r0
 8014378:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 801437c:	4628      	mov	r0, r5
 801437e:	f7fb fb63 	bl	800fa48 <ucdr_serialize_int16_t>
 8014382:	4030      	ands	r0, r6
 8014384:	b2c0      	uxtb	r0, r0
 8014386:	bd70      	pop	{r4, r5, r6, pc}
 8014388:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801438c:	3104      	adds	r1, #4
 801438e:	f7ff be7b 	b.w	8014088 <uxr_serialize_CLIENT_Representation>
 8014392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014396:	3104      	adds	r1, #4
 8014398:	f7ff bf32 	b.w	8014200 <uxr_serialize_AGENT_Representation>
 801439c:	2001      	movs	r0, #1
 801439e:	bd70      	pop	{r4, r5, r6, pc}
 80143a0:	68a2      	ldr	r2, [r4, #8]
 80143a2:	f104 010c 	add.w	r1, r4, #12
 80143a6:	4628      	mov	r0, r5
 80143a8:	f005 fad0 	bl	801994c <ucdr_serialize_sequence_uint8_t>
 80143ac:	4606      	mov	r6, r0
 80143ae:	e7c7      	b.n	8014340 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80143b0:	68a1      	ldr	r1, [r4, #8]
 80143b2:	4628      	mov	r0, r5
 80143b4:	f005 faf6 	bl	80199a4 <ucdr_serialize_string>
 80143b8:	4606      	mov	r6, r0
 80143ba:	e7c1      	b.n	8014340 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80143bc:	68a2      	ldr	r2, [r4, #8]
 80143be:	f104 010c 	add.w	r1, r4, #12
 80143c2:	4628      	mov	r0, r5
 80143c4:	f005 fac2 	bl	801994c <ucdr_serialize_sequence_uint8_t>
 80143c8:	4606      	mov	r6, r0
 80143ca:	e7d5      	b.n	8014378 <uxr_serialize_ObjectVariant.part.0+0x94>

080143cc <uxr_deserialize_DATAWRITER_Representation>:
 80143cc:	b570      	push	{r4, r5, r6, lr}
 80143ce:	4606      	mov	r6, r0
 80143d0:	460d      	mov	r5, r1
 80143d2:	f7fa fe13 	bl	800effc <ucdr_deserialize_uint8_t>
 80143d6:	4604      	mov	r4, r0
 80143d8:	b130      	cbz	r0, 80143e8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80143da:	782b      	ldrb	r3, [r5, #0]
 80143dc:	2b02      	cmp	r3, #2
 80143de:	d00c      	beq.n	80143fa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80143e0:	2b03      	cmp	r3, #3
 80143e2:	d012      	beq.n	801440a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80143e4:	2b01      	cmp	r3, #1
 80143e6:	d008      	beq.n	80143fa <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80143e8:	2202      	movs	r2, #2
 80143ea:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80143ee:	4630      	mov	r0, r6
 80143f0:	f005 fa1c 	bl	801982c <ucdr_deserialize_array_uint8_t>
 80143f4:	4020      	ands	r0, r4
 80143f6:	b2c0      	uxtb	r0, r0
 80143f8:	bd70      	pop	{r4, r5, r6, pc}
 80143fa:	6869      	ldr	r1, [r5, #4]
 80143fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014400:	4630      	mov	r0, r6
 8014402:	f005 fadf 	bl	80199c4 <ucdr_deserialize_string>
 8014406:	4604      	mov	r4, r0
 8014408:	e7ee      	b.n	80143e8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801440a:	1d2b      	adds	r3, r5, #4
 801440c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014410:	f105 0108 	add.w	r1, r5, #8
 8014414:	4630      	mov	r0, r6
 8014416:	f005 faab 	bl	8019970 <ucdr_deserialize_sequence_uint8_t>
 801441a:	4604      	mov	r4, r0
 801441c:	e7e4      	b.n	80143e8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801441e:	bf00      	nop

08014420 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014420:	b570      	push	{r4, r5, r6, lr}
 8014422:	460d      	mov	r5, r1
 8014424:	7809      	ldrb	r1, [r1, #0]
 8014426:	4606      	mov	r6, r0
 8014428:	f7fa fda4 	bl	800ef74 <ucdr_serialize_bool>
 801442c:	782b      	ldrb	r3, [r5, #0]
 801442e:	4604      	mov	r4, r0
 8014430:	b94b      	cbnz	r3, 8014446 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014432:	7a29      	ldrb	r1, [r5, #8]
 8014434:	4630      	mov	r0, r6
 8014436:	f7fa fd9d 	bl	800ef74 <ucdr_serialize_bool>
 801443a:	7a2b      	ldrb	r3, [r5, #8]
 801443c:	4004      	ands	r4, r0
 801443e:	b2e4      	uxtb	r4, r4
 8014440:	b943      	cbnz	r3, 8014454 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014442:	4620      	mov	r0, r4
 8014444:	bd70      	pop	{r4, r5, r6, pc}
 8014446:	6869      	ldr	r1, [r5, #4]
 8014448:	4630      	mov	r0, r6
 801444a:	f005 faab 	bl	80199a4 <ucdr_serialize_string>
 801444e:	4004      	ands	r4, r0
 8014450:	b2e4      	uxtb	r4, r4
 8014452:	e7ee      	b.n	8014432 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014454:	68e9      	ldr	r1, [r5, #12]
 8014456:	4630      	mov	r0, r6
 8014458:	f005 faa4 	bl	80199a4 <ucdr_serialize_string>
 801445c:	4004      	ands	r4, r0
 801445e:	4620      	mov	r0, r4
 8014460:	bd70      	pop	{r4, r5, r6, pc}
 8014462:	bf00      	nop

08014464 <uxr_serialize_OBJK_Topic_Binary>:
 8014464:	b570      	push	{r4, r5, r6, lr}
 8014466:	460d      	mov	r5, r1
 8014468:	6809      	ldr	r1, [r1, #0]
 801446a:	4606      	mov	r6, r0
 801446c:	f005 fa9a 	bl	80199a4 <ucdr_serialize_string>
 8014470:	7929      	ldrb	r1, [r5, #4]
 8014472:	4604      	mov	r4, r0
 8014474:	4630      	mov	r0, r6
 8014476:	f7fa fd7d 	bl	800ef74 <ucdr_serialize_bool>
 801447a:	792b      	ldrb	r3, [r5, #4]
 801447c:	4004      	ands	r4, r0
 801447e:	b2e4      	uxtb	r4, r4
 8014480:	b943      	cbnz	r3, 8014494 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8014482:	7b29      	ldrb	r1, [r5, #12]
 8014484:	4630      	mov	r0, r6
 8014486:	f7fa fd75 	bl	800ef74 <ucdr_serialize_bool>
 801448a:	7b2b      	ldrb	r3, [r5, #12]
 801448c:	4004      	ands	r4, r0
 801448e:	b93b      	cbnz	r3, 80144a0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8014490:	4620      	mov	r0, r4
 8014492:	bd70      	pop	{r4, r5, r6, pc}
 8014494:	68a9      	ldr	r1, [r5, #8]
 8014496:	4630      	mov	r0, r6
 8014498:	f005 fa84 	bl	80199a4 <ucdr_serialize_string>
 801449c:	4004      	ands	r4, r0
 801449e:	e7f0      	b.n	8014482 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80144a0:	6929      	ldr	r1, [r5, #16]
 80144a2:	4630      	mov	r0, r6
 80144a4:	f005 fa7e 	bl	80199a4 <ucdr_serialize_string>
 80144a8:	4004      	ands	r4, r0
 80144aa:	b2e4      	uxtb	r4, r4
 80144ac:	4620      	mov	r0, r4
 80144ae:	bd70      	pop	{r4, r5, r6, pc}

080144b0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80144b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144b4:	460c      	mov	r4, r1
 80144b6:	7809      	ldrb	r1, [r1, #0]
 80144b8:	4606      	mov	r6, r0
 80144ba:	f7fa fd5b 	bl	800ef74 <ucdr_serialize_bool>
 80144be:	7823      	ldrb	r3, [r4, #0]
 80144c0:	4605      	mov	r5, r0
 80144c2:	b96b      	cbnz	r3, 80144e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80144c4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80144c8:	4630      	mov	r0, r6
 80144ca:	f7fa fd53 	bl	800ef74 <ucdr_serialize_bool>
 80144ce:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80144d2:	4005      	ands	r5, r0
 80144d4:	b2ed      	uxtb	r5, r5
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d169      	bne.n	80145ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80144da:	4628      	mov	r0, r5
 80144dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144e0:	6861      	ldr	r1, [r4, #4]
 80144e2:	4630      	mov	r0, r6
 80144e4:	f7fa ff8a 	bl	800f3fc <ucdr_serialize_uint32_t>
 80144e8:	6863      	ldr	r3, [r4, #4]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d06b      	beq.n	80145c6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80144ee:	2800      	cmp	r0, #0
 80144f0:	d067      	beq.n	80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80144f2:	68a1      	ldr	r1, [r4, #8]
 80144f4:	4630      	mov	r0, r6
 80144f6:	f005 fa55 	bl	80199a4 <ucdr_serialize_string>
 80144fa:	6863      	ldr	r3, [r4, #4]
 80144fc:	2b01      	cmp	r3, #1
 80144fe:	d953      	bls.n	80145a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014500:	2800      	cmp	r0, #0
 8014502:	d05e      	beq.n	80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014504:	68e1      	ldr	r1, [r4, #12]
 8014506:	4630      	mov	r0, r6
 8014508:	f005 fa4c 	bl	80199a4 <ucdr_serialize_string>
 801450c:	6863      	ldr	r3, [r4, #4]
 801450e:	2b02      	cmp	r3, #2
 8014510:	d94a      	bls.n	80145a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014512:	2800      	cmp	r0, #0
 8014514:	d055      	beq.n	80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014516:	6921      	ldr	r1, [r4, #16]
 8014518:	4630      	mov	r0, r6
 801451a:	f005 fa43 	bl	80199a4 <ucdr_serialize_string>
 801451e:	6863      	ldr	r3, [r4, #4]
 8014520:	2b03      	cmp	r3, #3
 8014522:	d941      	bls.n	80145a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014524:	2800      	cmp	r0, #0
 8014526:	d04c      	beq.n	80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014528:	6961      	ldr	r1, [r4, #20]
 801452a:	4630      	mov	r0, r6
 801452c:	f005 fa3a 	bl	80199a4 <ucdr_serialize_string>
 8014530:	6863      	ldr	r3, [r4, #4]
 8014532:	2b04      	cmp	r3, #4
 8014534:	d938      	bls.n	80145a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014536:	2800      	cmp	r0, #0
 8014538:	d043      	beq.n	80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801453a:	69a1      	ldr	r1, [r4, #24]
 801453c:	4630      	mov	r0, r6
 801453e:	f005 fa31 	bl	80199a4 <ucdr_serialize_string>
 8014542:	6863      	ldr	r3, [r4, #4]
 8014544:	2b05      	cmp	r3, #5
 8014546:	d92f      	bls.n	80145a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014548:	2800      	cmp	r0, #0
 801454a:	d03a      	beq.n	80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801454c:	69e1      	ldr	r1, [r4, #28]
 801454e:	4630      	mov	r0, r6
 8014550:	f005 fa28 	bl	80199a4 <ucdr_serialize_string>
 8014554:	6863      	ldr	r3, [r4, #4]
 8014556:	2b06      	cmp	r3, #6
 8014558:	d926      	bls.n	80145a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801455a:	b390      	cbz	r0, 80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801455c:	6a21      	ldr	r1, [r4, #32]
 801455e:	4630      	mov	r0, r6
 8014560:	f005 fa20 	bl	80199a4 <ucdr_serialize_string>
 8014564:	6863      	ldr	r3, [r4, #4]
 8014566:	2b07      	cmp	r3, #7
 8014568:	d91e      	bls.n	80145a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801456a:	b350      	cbz	r0, 80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801456c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801456e:	4630      	mov	r0, r6
 8014570:	f005 fa18 	bl	80199a4 <ucdr_serialize_string>
 8014574:	6863      	ldr	r3, [r4, #4]
 8014576:	2b08      	cmp	r3, #8
 8014578:	d916      	bls.n	80145a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801457a:	b310      	cbz	r0, 80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801457c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801457e:	4630      	mov	r0, r6
 8014580:	f005 fa10 	bl	80199a4 <ucdr_serialize_string>
 8014584:	6863      	ldr	r3, [r4, #4]
 8014586:	2b09      	cmp	r3, #9
 8014588:	d90e      	bls.n	80145a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801458a:	b1d0      	cbz	r0, 80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801458c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014590:	2709      	movs	r7, #9
 8014592:	e000      	b.n	8014596 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014594:	b1a8      	cbz	r0, 80145c2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014596:	f858 1b04 	ldr.w	r1, [r8], #4
 801459a:	4630      	mov	r0, r6
 801459c:	f005 fa02 	bl	80199a4 <ucdr_serialize_string>
 80145a0:	6862      	ldr	r2, [r4, #4]
 80145a2:	3701      	adds	r7, #1
 80145a4:	4297      	cmp	r7, r2
 80145a6:	d3f5      	bcc.n	8014594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80145a8:	4005      	ands	r5, r0
 80145aa:	b2ed      	uxtb	r5, r5
 80145ac:	e78a      	b.n	80144c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80145ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80145b0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80145b4:	4630      	mov	r0, r6
 80145b6:	f005 f9c9 	bl	801994c <ucdr_serialize_sequence_uint8_t>
 80145ba:	4005      	ands	r5, r0
 80145bc:	4628      	mov	r0, r5
 80145be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145c2:	2500      	movs	r5, #0
 80145c4:	e77e      	b.n	80144c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80145c6:	4028      	ands	r0, r5
 80145c8:	b2c5      	uxtb	r5, r0
 80145ca:	e77b      	b.n	80144c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080145cc <uxr_serialize_OBJK_Publisher_Binary>:
 80145cc:	b570      	push	{r4, r5, r6, lr}
 80145ce:	460d      	mov	r5, r1
 80145d0:	7809      	ldrb	r1, [r1, #0]
 80145d2:	4606      	mov	r6, r0
 80145d4:	f7fa fcce 	bl	800ef74 <ucdr_serialize_bool>
 80145d8:	782b      	ldrb	r3, [r5, #0]
 80145da:	4604      	mov	r4, r0
 80145dc:	b94b      	cbnz	r3, 80145f2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80145de:	7a29      	ldrb	r1, [r5, #8]
 80145e0:	4630      	mov	r0, r6
 80145e2:	f7fa fcc7 	bl	800ef74 <ucdr_serialize_bool>
 80145e6:	7a2b      	ldrb	r3, [r5, #8]
 80145e8:	4004      	ands	r4, r0
 80145ea:	b2e4      	uxtb	r4, r4
 80145ec:	b943      	cbnz	r3, 8014600 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80145ee:	4620      	mov	r0, r4
 80145f0:	bd70      	pop	{r4, r5, r6, pc}
 80145f2:	6869      	ldr	r1, [r5, #4]
 80145f4:	4630      	mov	r0, r6
 80145f6:	f005 f9d5 	bl	80199a4 <ucdr_serialize_string>
 80145fa:	4004      	ands	r4, r0
 80145fc:	b2e4      	uxtb	r4, r4
 80145fe:	e7ee      	b.n	80145de <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014600:	f105 010c 	add.w	r1, r5, #12
 8014604:	4630      	mov	r0, r6
 8014606:	f7ff ff53 	bl	80144b0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801460a:	4004      	ands	r4, r0
 801460c:	4620      	mov	r0, r4
 801460e:	bd70      	pop	{r4, r5, r6, pc}

08014610 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8014610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014614:	460c      	mov	r4, r1
 8014616:	7809      	ldrb	r1, [r1, #0]
 8014618:	4606      	mov	r6, r0
 801461a:	f7fa fcab 	bl	800ef74 <ucdr_serialize_bool>
 801461e:	7823      	ldrb	r3, [r4, #0]
 8014620:	4605      	mov	r5, r0
 8014622:	b96b      	cbnz	r3, 8014640 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014624:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014628:	4630      	mov	r0, r6
 801462a:	f7fa fca3 	bl	800ef74 <ucdr_serialize_bool>
 801462e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014632:	4005      	ands	r5, r0
 8014634:	b2ed      	uxtb	r5, r5
 8014636:	2b00      	cmp	r3, #0
 8014638:	d169      	bne.n	801470e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801463a:	4628      	mov	r0, r5
 801463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014640:	6861      	ldr	r1, [r4, #4]
 8014642:	4630      	mov	r0, r6
 8014644:	f7fa feda 	bl	800f3fc <ucdr_serialize_uint32_t>
 8014648:	6863      	ldr	r3, [r4, #4]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d06b      	beq.n	8014726 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801464e:	2800      	cmp	r0, #0
 8014650:	d067      	beq.n	8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014652:	68a1      	ldr	r1, [r4, #8]
 8014654:	4630      	mov	r0, r6
 8014656:	f005 f9a5 	bl	80199a4 <ucdr_serialize_string>
 801465a:	6863      	ldr	r3, [r4, #4]
 801465c:	2b01      	cmp	r3, #1
 801465e:	d953      	bls.n	8014708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014660:	2800      	cmp	r0, #0
 8014662:	d05e      	beq.n	8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014664:	68e1      	ldr	r1, [r4, #12]
 8014666:	4630      	mov	r0, r6
 8014668:	f005 f99c 	bl	80199a4 <ucdr_serialize_string>
 801466c:	6863      	ldr	r3, [r4, #4]
 801466e:	2b02      	cmp	r3, #2
 8014670:	d94a      	bls.n	8014708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014672:	2800      	cmp	r0, #0
 8014674:	d055      	beq.n	8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014676:	6921      	ldr	r1, [r4, #16]
 8014678:	4630      	mov	r0, r6
 801467a:	f005 f993 	bl	80199a4 <ucdr_serialize_string>
 801467e:	6863      	ldr	r3, [r4, #4]
 8014680:	2b03      	cmp	r3, #3
 8014682:	d941      	bls.n	8014708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014684:	2800      	cmp	r0, #0
 8014686:	d04c      	beq.n	8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014688:	6961      	ldr	r1, [r4, #20]
 801468a:	4630      	mov	r0, r6
 801468c:	f005 f98a 	bl	80199a4 <ucdr_serialize_string>
 8014690:	6863      	ldr	r3, [r4, #4]
 8014692:	2b04      	cmp	r3, #4
 8014694:	d938      	bls.n	8014708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8014696:	2800      	cmp	r0, #0
 8014698:	d043      	beq.n	8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801469a:	69a1      	ldr	r1, [r4, #24]
 801469c:	4630      	mov	r0, r6
 801469e:	f005 f981 	bl	80199a4 <ucdr_serialize_string>
 80146a2:	6863      	ldr	r3, [r4, #4]
 80146a4:	2b05      	cmp	r3, #5
 80146a6:	d92f      	bls.n	8014708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d03a      	beq.n	8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146ac:	69e1      	ldr	r1, [r4, #28]
 80146ae:	4630      	mov	r0, r6
 80146b0:	f005 f978 	bl	80199a4 <ucdr_serialize_string>
 80146b4:	6863      	ldr	r3, [r4, #4]
 80146b6:	2b06      	cmp	r3, #6
 80146b8:	d926      	bls.n	8014708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146ba:	b390      	cbz	r0, 8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146bc:	6a21      	ldr	r1, [r4, #32]
 80146be:	4630      	mov	r0, r6
 80146c0:	f005 f970 	bl	80199a4 <ucdr_serialize_string>
 80146c4:	6863      	ldr	r3, [r4, #4]
 80146c6:	2b07      	cmp	r3, #7
 80146c8:	d91e      	bls.n	8014708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146ca:	b350      	cbz	r0, 8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80146ce:	4630      	mov	r0, r6
 80146d0:	f005 f968 	bl	80199a4 <ucdr_serialize_string>
 80146d4:	6863      	ldr	r3, [r4, #4]
 80146d6:	2b08      	cmp	r3, #8
 80146d8:	d916      	bls.n	8014708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146da:	b310      	cbz	r0, 8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80146de:	4630      	mov	r0, r6
 80146e0:	f005 f960 	bl	80199a4 <ucdr_serialize_string>
 80146e4:	6863      	ldr	r3, [r4, #4]
 80146e6:	2b09      	cmp	r3, #9
 80146e8:	d90e      	bls.n	8014708 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80146ea:	b1d0      	cbz	r0, 8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146ec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80146f0:	2709      	movs	r7, #9
 80146f2:	e000      	b.n	80146f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80146f4:	b1a8      	cbz	r0, 8014722 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80146f6:	f858 1b04 	ldr.w	r1, [r8], #4
 80146fa:	4630      	mov	r0, r6
 80146fc:	f005 f952 	bl	80199a4 <ucdr_serialize_string>
 8014700:	6862      	ldr	r2, [r4, #4]
 8014702:	3701      	adds	r7, #1
 8014704:	4297      	cmp	r7, r2
 8014706:	d3f5      	bcc.n	80146f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8014708:	4005      	ands	r5, r0
 801470a:	b2ed      	uxtb	r5, r5
 801470c:	e78a      	b.n	8014624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801470e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014710:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014714:	4630      	mov	r0, r6
 8014716:	f005 f919 	bl	801994c <ucdr_serialize_sequence_uint8_t>
 801471a:	4005      	ands	r5, r0
 801471c:	4628      	mov	r0, r5
 801471e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014722:	2500      	movs	r5, #0
 8014724:	e77e      	b.n	8014624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014726:	4028      	ands	r0, r5
 8014728:	b2c5      	uxtb	r5, r0
 801472a:	e77b      	b.n	8014624 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801472c <uxr_serialize_OBJK_Subscriber_Binary>:
 801472c:	b570      	push	{r4, r5, r6, lr}
 801472e:	460d      	mov	r5, r1
 8014730:	7809      	ldrb	r1, [r1, #0]
 8014732:	4606      	mov	r6, r0
 8014734:	f7fa fc1e 	bl	800ef74 <ucdr_serialize_bool>
 8014738:	782b      	ldrb	r3, [r5, #0]
 801473a:	4604      	mov	r4, r0
 801473c:	b94b      	cbnz	r3, 8014752 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801473e:	7a29      	ldrb	r1, [r5, #8]
 8014740:	4630      	mov	r0, r6
 8014742:	f7fa fc17 	bl	800ef74 <ucdr_serialize_bool>
 8014746:	7a2b      	ldrb	r3, [r5, #8]
 8014748:	4004      	ands	r4, r0
 801474a:	b2e4      	uxtb	r4, r4
 801474c:	b943      	cbnz	r3, 8014760 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801474e:	4620      	mov	r0, r4
 8014750:	bd70      	pop	{r4, r5, r6, pc}
 8014752:	6869      	ldr	r1, [r5, #4]
 8014754:	4630      	mov	r0, r6
 8014756:	f005 f925 	bl	80199a4 <ucdr_serialize_string>
 801475a:	4004      	ands	r4, r0
 801475c:	b2e4      	uxtb	r4, r4
 801475e:	e7ee      	b.n	801473e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8014760:	f105 010c 	add.w	r1, r5, #12
 8014764:	4630      	mov	r0, r6
 8014766:	f7ff ff53 	bl	8014610 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801476a:	4004      	ands	r4, r0
 801476c:	4620      	mov	r0, r4
 801476e:	bd70      	pop	{r4, r5, r6, pc}

08014770 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8014770:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014774:	4688      	mov	r8, r1
 8014776:	8809      	ldrh	r1, [r1, #0]
 8014778:	4681      	mov	r9, r0
 801477a:	f7fa fc55 	bl	800f028 <ucdr_serialize_uint16_t>
 801477e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014782:	4606      	mov	r6, r0
 8014784:	4648      	mov	r0, r9
 8014786:	f7fa fbf5 	bl	800ef74 <ucdr_serialize_bool>
 801478a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801478e:	4006      	ands	r6, r0
 8014790:	b2f5      	uxtb	r5, r6
 8014792:	b9eb      	cbnz	r3, 80147d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014794:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014798:	4648      	mov	r0, r9
 801479a:	f7fa fbeb 	bl	800ef74 <ucdr_serialize_bool>
 801479e:	f898 3006 	ldrb.w	r3, [r8, #6]
 80147a2:	4005      	ands	r5, r0
 80147a4:	bb7b      	cbnz	r3, 8014806 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80147a6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80147aa:	4648      	mov	r0, r9
 80147ac:	f7fa fbe2 	bl	800ef74 <ucdr_serialize_bool>
 80147b0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80147b4:	4005      	ands	r5, r0
 80147b6:	b9f3      	cbnz	r3, 80147f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80147b8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80147bc:	4648      	mov	r0, r9
 80147be:	f7fa fbd9 	bl	800ef74 <ucdr_serialize_bool>
 80147c2:	f898 3014 	ldrb.w	r3, [r8, #20]
 80147c6:	4005      	ands	r5, r0
 80147c8:	b94b      	cbnz	r3, 80147de <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80147ca:	4628      	mov	r0, r5
 80147cc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80147d0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80147d4:	4648      	mov	r0, r9
 80147d6:	f7fa fc27 	bl	800f028 <ucdr_serialize_uint16_t>
 80147da:	4005      	ands	r5, r0
 80147dc:	e7da      	b.n	8014794 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80147de:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80147e2:	f108 011c 	add.w	r1, r8, #28
 80147e6:	4648      	mov	r0, r9
 80147e8:	f005 f8b0 	bl	801994c <ucdr_serialize_sequence_uint8_t>
 80147ec:	4028      	ands	r0, r5
 80147ee:	b2c5      	uxtb	r5, r0
 80147f0:	4628      	mov	r0, r5
 80147f2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80147f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80147fa:	4648      	mov	r0, r9
 80147fc:	f7fa fdfe 	bl	800f3fc <ucdr_serialize_uint32_t>
 8014800:	4028      	ands	r0, r5
 8014802:	b2c5      	uxtb	r5, r0
 8014804:	e7d8      	b.n	80147b8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014806:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801480a:	4648      	mov	r0, r9
 801480c:	f7fa fdf6 	bl	800f3fc <ucdr_serialize_uint32_t>
 8014810:	4028      	ands	r0, r5
 8014812:	b2c5      	uxtb	r5, r0
 8014814:	e7c7      	b.n	80147a6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014816:	bf00      	nop

08014818 <uxr_serialize_OBJK_DataReader_Binary>:
 8014818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801481a:	2202      	movs	r2, #2
 801481c:	460c      	mov	r4, r1
 801481e:	4606      	mov	r6, r0
 8014820:	f004 ffa0 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014824:	78a1      	ldrb	r1, [r4, #2]
 8014826:	4605      	mov	r5, r0
 8014828:	4630      	mov	r0, r6
 801482a:	f7fa fba3 	bl	800ef74 <ucdr_serialize_bool>
 801482e:	78a3      	ldrb	r3, [r4, #2]
 8014830:	4005      	ands	r5, r0
 8014832:	b2ed      	uxtb	r5, r5
 8014834:	b90b      	cbnz	r3, 801483a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014836:	4628      	mov	r0, r5
 8014838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801483a:	f104 0108 	add.w	r1, r4, #8
 801483e:	4630      	mov	r0, r6
 8014840:	f7ff ff96 	bl	8014770 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014844:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014848:	4607      	mov	r7, r0
 801484a:	4630      	mov	r0, r6
 801484c:	f7fa fb92 	bl	800ef74 <ucdr_serialize_bool>
 8014850:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014854:	4038      	ands	r0, r7
 8014856:	b2c7      	uxtb	r7, r0
 8014858:	b95b      	cbnz	r3, 8014872 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801485a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801485e:	4630      	mov	r0, r6
 8014860:	f7fa fb88 	bl	800ef74 <ucdr_serialize_bool>
 8014864:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014868:	4007      	ands	r7, r0
 801486a:	b94b      	cbnz	r3, 8014880 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801486c:	403d      	ands	r5, r7
 801486e:	4628      	mov	r0, r5
 8014870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014872:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8014876:	4630      	mov	r0, r6
 8014878:	f7fb f816 	bl	800f8a8 <ucdr_serialize_uint64_t>
 801487c:	4007      	ands	r7, r0
 801487e:	e7ec      	b.n	801485a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8014880:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8014882:	4630      	mov	r0, r6
 8014884:	f005 f88e 	bl	80199a4 <ucdr_serialize_string>
 8014888:	4007      	ands	r7, r0
 801488a:	b2ff      	uxtb	r7, r7
 801488c:	e7ee      	b.n	801486c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801488e:	bf00      	nop

08014890 <uxr_serialize_OBJK_DataWriter_Binary>:
 8014890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014892:	2202      	movs	r2, #2
 8014894:	460d      	mov	r5, r1
 8014896:	4606      	mov	r6, r0
 8014898:	f004 ff64 	bl	8019764 <ucdr_serialize_array_uint8_t>
 801489c:	78a9      	ldrb	r1, [r5, #2]
 801489e:	4604      	mov	r4, r0
 80148a0:	4630      	mov	r0, r6
 80148a2:	f7fa fb67 	bl	800ef74 <ucdr_serialize_bool>
 80148a6:	78ab      	ldrb	r3, [r5, #2]
 80148a8:	4004      	ands	r4, r0
 80148aa:	b2e4      	uxtb	r4, r4
 80148ac:	b90b      	cbnz	r3, 80148b2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80148ae:	4620      	mov	r0, r4
 80148b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148b2:	f105 0108 	add.w	r1, r5, #8
 80148b6:	4630      	mov	r0, r6
 80148b8:	f7ff ff5a 	bl	8014770 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80148bc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80148c0:	4607      	mov	r7, r0
 80148c2:	4630      	mov	r0, r6
 80148c4:	f7fa fb56 	bl	800ef74 <ucdr_serialize_bool>
 80148c8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80148cc:	4038      	ands	r0, r7
 80148ce:	b2c7      	uxtb	r7, r0
 80148d0:	b913      	cbnz	r3, 80148d8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80148d2:	403c      	ands	r4, r7
 80148d4:	4620      	mov	r0, r4
 80148d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148d8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80148dc:	4630      	mov	r0, r6
 80148de:	f7fa ffe3 	bl	800f8a8 <ucdr_serialize_uint64_t>
 80148e2:	4007      	ands	r7, r0
 80148e4:	e7f5      	b.n	80148d2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80148e6:	bf00      	nop

080148e8 <uxr_deserialize_ObjectVariant>:
 80148e8:	b570      	push	{r4, r5, r6, lr}
 80148ea:	4605      	mov	r5, r0
 80148ec:	460e      	mov	r6, r1
 80148ee:	f7fa fb85 	bl	800effc <ucdr_deserialize_uint8_t>
 80148f2:	b168      	cbz	r0, 8014910 <uxr_deserialize_ObjectVariant+0x28>
 80148f4:	7833      	ldrb	r3, [r6, #0]
 80148f6:	3b01      	subs	r3, #1
 80148f8:	4604      	mov	r4, r0
 80148fa:	2b0d      	cmp	r3, #13
 80148fc:	d809      	bhi.n	8014912 <uxr_deserialize_ObjectVariant+0x2a>
 80148fe:	e8df f003 	tbb	[pc, r3]
 8014902:	0a41      	.short	0x0a41
 8014904:	0a0a2323 	.word	0x0a0a2323
 8014908:	10080a0a 	.word	0x10080a0a
 801490c:	565c1010 	.word	0x565c1010
 8014910:	2400      	movs	r4, #0
 8014912:	4620      	mov	r0, r4
 8014914:	bd70      	pop	{r4, r5, r6, pc}
 8014916:	1d31      	adds	r1, r6, #4
 8014918:	4628      	mov	r0, r5
 801491a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801491e:	f7ff bd55 	b.w	80143cc <uxr_deserialize_DATAWRITER_Representation>
 8014922:	1d31      	adds	r1, r6, #4
 8014924:	4628      	mov	r0, r5
 8014926:	f7fa fb69 	bl	800effc <ucdr_deserialize_uint8_t>
 801492a:	2800      	cmp	r0, #0
 801492c:	d0f0      	beq.n	8014910 <uxr_deserialize_ObjectVariant+0x28>
 801492e:	7933      	ldrb	r3, [r6, #4]
 8014930:	2b01      	cmp	r3, #1
 8014932:	d001      	beq.n	8014938 <uxr_deserialize_ObjectVariant+0x50>
 8014934:	2b02      	cmp	r3, #2
 8014936:	d1ec      	bne.n	8014912 <uxr_deserialize_ObjectVariant+0x2a>
 8014938:	68b1      	ldr	r1, [r6, #8]
 801493a:	4628      	mov	r0, r5
 801493c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014944:	f005 b83e 	b.w	80199c4 <ucdr_deserialize_string>
 8014948:	1d31      	adds	r1, r6, #4
 801494a:	4628      	mov	r0, r5
 801494c:	f7fa fb56 	bl	800effc <ucdr_deserialize_uint8_t>
 8014950:	4604      	mov	r4, r0
 8014952:	b170      	cbz	r0, 8014972 <uxr_deserialize_ObjectVariant+0x8a>
 8014954:	7933      	ldrb	r3, [r6, #4]
 8014956:	2b02      	cmp	r3, #2
 8014958:	d04c      	beq.n	80149f4 <uxr_deserialize_ObjectVariant+0x10c>
 801495a:	2b03      	cmp	r3, #3
 801495c:	d109      	bne.n	8014972 <uxr_deserialize_ObjectVariant+0x8a>
 801495e:	f106 0308 	add.w	r3, r6, #8
 8014962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014966:	f106 010c 	add.w	r1, r6, #12
 801496a:	4628      	mov	r0, r5
 801496c:	f005 f800 	bl	8019970 <ucdr_deserialize_sequence_uint8_t>
 8014970:	4604      	mov	r4, r0
 8014972:	2202      	movs	r2, #2
 8014974:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014978:	4628      	mov	r0, r5
 801497a:	f004 ff57 	bl	801982c <ucdr_deserialize_array_uint8_t>
 801497e:	4020      	ands	r0, r4
 8014980:	b2c4      	uxtb	r4, r0
 8014982:	e7c6      	b.n	8014912 <uxr_deserialize_ObjectVariant+0x2a>
 8014984:	1d31      	adds	r1, r6, #4
 8014986:	4628      	mov	r0, r5
 8014988:	f7fa fb38 	bl	800effc <ucdr_deserialize_uint8_t>
 801498c:	4604      	mov	r4, r0
 801498e:	b130      	cbz	r0, 801499e <uxr_deserialize_ObjectVariant+0xb6>
 8014990:	7933      	ldrb	r3, [r6, #4]
 8014992:	2b02      	cmp	r3, #2
 8014994:	d036      	beq.n	8014a04 <uxr_deserialize_ObjectVariant+0x11c>
 8014996:	2b03      	cmp	r3, #3
 8014998:	d03c      	beq.n	8014a14 <uxr_deserialize_ObjectVariant+0x12c>
 801499a:	2b01      	cmp	r3, #1
 801499c:	d032      	beq.n	8014a04 <uxr_deserialize_ObjectVariant+0x11c>
 801499e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80149a2:	4628      	mov	r0, r5
 80149a4:	f7fb f8d0 	bl	800fb48 <ucdr_deserialize_int16_t>
 80149a8:	4020      	ands	r0, r4
 80149aa:	b2c4      	uxtb	r4, r0
 80149ac:	e7b1      	b.n	8014912 <uxr_deserialize_ObjectVariant+0x2a>
 80149ae:	1d31      	adds	r1, r6, #4
 80149b0:	4628      	mov	r0, r5
 80149b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149b6:	f7ff bbbf 	b.w	8014138 <uxr_deserialize_CLIENT_Representation>
 80149ba:	2204      	movs	r2, #4
 80149bc:	18b1      	adds	r1, r6, r2
 80149be:	4628      	mov	r0, r5
 80149c0:	f004 ff34 	bl	801982c <ucdr_deserialize_array_uint8_t>
 80149c4:	2202      	movs	r2, #2
 80149c6:	f106 0108 	add.w	r1, r6, #8
 80149ca:	4604      	mov	r4, r0
 80149cc:	4628      	mov	r0, r5
 80149ce:	f004 ff2d 	bl	801982c <ucdr_deserialize_array_uint8_t>
 80149d2:	2202      	movs	r2, #2
 80149d4:	4004      	ands	r4, r0
 80149d6:	f106 010a 	add.w	r1, r6, #10
 80149da:	4628      	mov	r0, r5
 80149dc:	f004 ff26 	bl	801982c <ucdr_deserialize_array_uint8_t>
 80149e0:	b2e4      	uxtb	r4, r4
 80149e2:	4603      	mov	r3, r0
 80149e4:	f106 010c 	add.w	r1, r6, #12
 80149e8:	4628      	mov	r0, r5
 80149ea:	401c      	ands	r4, r3
 80149ec:	f7fa fad8 	bl	800efa0 <ucdr_deserialize_bool>
 80149f0:	4004      	ands	r4, r0
 80149f2:	e78e      	b.n	8014912 <uxr_deserialize_ObjectVariant+0x2a>
 80149f4:	68b1      	ldr	r1, [r6, #8]
 80149f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80149fa:	4628      	mov	r0, r5
 80149fc:	f004 ffe2 	bl	80199c4 <ucdr_deserialize_string>
 8014a00:	4604      	mov	r4, r0
 8014a02:	e7b6      	b.n	8014972 <uxr_deserialize_ObjectVariant+0x8a>
 8014a04:	68b1      	ldr	r1, [r6, #8]
 8014a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a0a:	4628      	mov	r0, r5
 8014a0c:	f004 ffda 	bl	80199c4 <ucdr_deserialize_string>
 8014a10:	4604      	mov	r4, r0
 8014a12:	e7c4      	b.n	801499e <uxr_deserialize_ObjectVariant+0xb6>
 8014a14:	f106 0308 	add.w	r3, r6, #8
 8014a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a1c:	f106 010c 	add.w	r1, r6, #12
 8014a20:	4628      	mov	r0, r5
 8014a22:	f004 ffa5 	bl	8019970 <ucdr_deserialize_sequence_uint8_t>
 8014a26:	4604      	mov	r4, r0
 8014a28:	e7b9      	b.n	801499e <uxr_deserialize_ObjectVariant+0xb6>
 8014a2a:	bf00      	nop

08014a2c <uxr_deserialize_BaseObjectRequest>:
 8014a2c:	b570      	push	{r4, r5, r6, lr}
 8014a2e:	2202      	movs	r2, #2
 8014a30:	4605      	mov	r5, r0
 8014a32:	460e      	mov	r6, r1
 8014a34:	f004 fefa 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014a38:	2202      	movs	r2, #2
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	18b1      	adds	r1, r6, r2
 8014a3e:	4628      	mov	r0, r5
 8014a40:	f004 fef4 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014a44:	4020      	ands	r0, r4
 8014a46:	b2c0      	uxtb	r0, r0
 8014a48:	bd70      	pop	{r4, r5, r6, pc}
 8014a4a:	bf00      	nop

08014a4c <uxr_serialize_ActivityInfoVariant>:
 8014a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a50:	460d      	mov	r5, r1
 8014a52:	7809      	ldrb	r1, [r1, #0]
 8014a54:	4607      	mov	r7, r0
 8014a56:	f7fa fabb 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014a5a:	4681      	mov	r9, r0
 8014a5c:	b138      	cbz	r0, 8014a6e <uxr_serialize_ActivityInfoVariant+0x22>
 8014a5e:	782b      	ldrb	r3, [r5, #0]
 8014a60:	2b06      	cmp	r3, #6
 8014a62:	f000 8082 	beq.w	8014b6a <uxr_serialize_ActivityInfoVariant+0x11e>
 8014a66:	2b0d      	cmp	r3, #13
 8014a68:	d016      	beq.n	8014a98 <uxr_serialize_ActivityInfoVariant+0x4c>
 8014a6a:	2b05      	cmp	r3, #5
 8014a6c:	d002      	beq.n	8014a74 <uxr_serialize_ActivityInfoVariant+0x28>
 8014a6e:	4648      	mov	r0, r9
 8014a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a74:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014a78:	4638      	mov	r0, r7
 8014a7a:	f7fa ffe5 	bl	800fa48 <ucdr_serialize_int16_t>
 8014a7e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014a82:	4681      	mov	r9, r0
 8014a84:	4638      	mov	r0, r7
 8014a86:	f7fa ff0f 	bl	800f8a8 <ucdr_serialize_uint64_t>
 8014a8a:	ea09 0000 	and.w	r0, r9, r0
 8014a8e:	fa5f f980 	uxtb.w	r9, r0
 8014a92:	4648      	mov	r0, r9
 8014a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a98:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014a9c:	4638      	mov	r0, r7
 8014a9e:	f7fa ffd3 	bl	800fa48 <ucdr_serialize_int16_t>
 8014aa2:	68e9      	ldr	r1, [r5, #12]
 8014aa4:	4681      	mov	r9, r0
 8014aa6:	4638      	mov	r0, r7
 8014aa8:	f7fa fca8 	bl	800f3fc <ucdr_serialize_uint32_t>
 8014aac:	68eb      	ldr	r3, [r5, #12]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d0eb      	beq.n	8014a8a <uxr_serialize_ActivityInfoVariant+0x3e>
 8014ab2:	b320      	cbz	r0, 8014afe <uxr_serialize_ActivityInfoVariant+0xb2>
 8014ab4:	f105 080c 	add.w	r8, r5, #12
 8014ab8:	2600      	movs	r6, #0
 8014aba:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8014abe:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8014ac2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8014ac6:	4638      	mov	r0, r7
 8014ac8:	f7fa fa82 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014acc:	2800      	cmp	r0, #0
 8014ace:	d053      	beq.n	8014b78 <uxr_serialize_ActivityInfoVariant+0x12c>
 8014ad0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8014ad4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014ad8:	0074      	lsls	r4, r6, #1
 8014ada:	00c9      	lsls	r1, r1, #3
 8014adc:	2b03      	cmp	r3, #3
 8014ade:	d854      	bhi.n	8014b8a <uxr_serialize_ActivityInfoVariant+0x13e>
 8014ae0:	e8df f003 	tbb	[pc, r3]
 8014ae4:	02102132 	.word	0x02102132
 8014ae8:	4441      	add	r1, r8
 8014aea:	4638      	mov	r0, r7
 8014aec:	6889      	ldr	r1, [r1, #8]
 8014aee:	f004 ff59 	bl	80199a4 <ucdr_serialize_string>
 8014af2:	68ea      	ldr	r2, [r5, #12]
 8014af4:	3601      	adds	r6, #1
 8014af6:	4296      	cmp	r6, r2
 8014af8:	d242      	bcs.n	8014b80 <uxr_serialize_ActivityInfoVariant+0x134>
 8014afa:	2800      	cmp	r0, #0
 8014afc:	d1dd      	bne.n	8014aba <uxr_serialize_ActivityInfoVariant+0x6e>
 8014afe:	f04f 0900 	mov.w	r9, #0
 8014b02:	e7b4      	b.n	8014a6e <uxr_serialize_ActivityInfoVariant+0x22>
 8014b04:	3108      	adds	r1, #8
 8014b06:	4441      	add	r1, r8
 8014b08:	2210      	movs	r2, #16
 8014b0a:	4638      	mov	r0, r7
 8014b0c:	f004 fe2a 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014b10:	4434      	add	r4, r6
 8014b12:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014b16:	4604      	mov	r4, r0
 8014b18:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014b1a:	4638      	mov	r0, r7
 8014b1c:	f7fa fc6e 	bl	800f3fc <ucdr_serialize_uint32_t>
 8014b20:	4020      	ands	r0, r4
 8014b22:	b2c0      	uxtb	r0, r0
 8014b24:	e7e5      	b.n	8014af2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014b26:	3108      	adds	r1, #8
 8014b28:	4441      	add	r1, r8
 8014b2a:	2204      	movs	r2, #4
 8014b2c:	4638      	mov	r0, r7
 8014b2e:	f004 fe19 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014b32:	4434      	add	r4, r6
 8014b34:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014b38:	4604      	mov	r4, r0
 8014b3a:	8b19      	ldrh	r1, [r3, #24]
 8014b3c:	4638      	mov	r0, r7
 8014b3e:	f7fa fa73 	bl	800f028 <ucdr_serialize_uint16_t>
 8014b42:	4020      	ands	r0, r4
 8014b44:	b2c0      	uxtb	r0, r0
 8014b46:	e7d4      	b.n	8014af2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014b48:	3108      	adds	r1, #8
 8014b4a:	4441      	add	r1, r8
 8014b4c:	2202      	movs	r2, #2
 8014b4e:	4638      	mov	r0, r7
 8014b50:	f004 fe08 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014b54:	4434      	add	r4, r6
 8014b56:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014b5a:	4604      	mov	r4, r0
 8014b5c:	7d99      	ldrb	r1, [r3, #22]
 8014b5e:	4638      	mov	r0, r7
 8014b60:	f7fa fa36 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014b64:	4020      	ands	r0, r4
 8014b66:	b2c0      	uxtb	r0, r0
 8014b68:	e7c3      	b.n	8014af2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014b6a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014b6e:	4638      	mov	r0, r7
 8014b70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b74:	f7fa bf68 	b.w	800fa48 <ucdr_serialize_int16_t>
 8014b78:	68ea      	ldr	r2, [r5, #12]
 8014b7a:	3601      	adds	r6, #1
 8014b7c:	42b2      	cmp	r2, r6
 8014b7e:	d8be      	bhi.n	8014afe <uxr_serialize_ActivityInfoVariant+0xb2>
 8014b80:	ea09 0900 	and.w	r9, r9, r0
 8014b84:	fa5f f989 	uxtb.w	r9, r9
 8014b88:	e771      	b.n	8014a6e <uxr_serialize_ActivityInfoVariant+0x22>
 8014b8a:	68eb      	ldr	r3, [r5, #12]
 8014b8c:	3601      	adds	r6, #1
 8014b8e:	429e      	cmp	r6, r3
 8014b90:	f10a 0a18 	add.w	sl, sl, #24
 8014b94:	d395      	bcc.n	8014ac2 <uxr_serialize_ActivityInfoVariant+0x76>
 8014b96:	e76a      	b.n	8014a6e <uxr_serialize_ActivityInfoVariant+0x22>

08014b98 <uxr_deserialize_BaseObjectReply>:
 8014b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b9c:	2202      	movs	r2, #2
 8014b9e:	4606      	mov	r6, r0
 8014ba0:	460f      	mov	r7, r1
 8014ba2:	f004 fe43 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014ba6:	2202      	movs	r2, #2
 8014ba8:	18b9      	adds	r1, r7, r2
 8014baa:	4605      	mov	r5, r0
 8014bac:	4630      	mov	r0, r6
 8014bae:	f004 fe3d 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014bb2:	1d39      	adds	r1, r7, #4
 8014bb4:	4680      	mov	r8, r0
 8014bb6:	4630      	mov	r0, r6
 8014bb8:	f7fa fa20 	bl	800effc <ucdr_deserialize_uint8_t>
 8014bbc:	1d79      	adds	r1, r7, #5
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	4630      	mov	r0, r6
 8014bc2:	f7fa fa1b 	bl	800effc <ucdr_deserialize_uint8_t>
 8014bc6:	ea05 0508 	and.w	r5, r5, r8
 8014bca:	402c      	ands	r4, r5
 8014bcc:	4020      	ands	r0, r4
 8014bce:	b2c0      	uxtb	r0, r0
 8014bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014bd4 <uxr_serialize_ReadSpecification>:
 8014bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd8:	460e      	mov	r6, r1
 8014bda:	7809      	ldrb	r1, [r1, #0]
 8014bdc:	4607      	mov	r7, r0
 8014bde:	f7fa f9f7 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014be2:	7871      	ldrb	r1, [r6, #1]
 8014be4:	4604      	mov	r4, r0
 8014be6:	4638      	mov	r0, r7
 8014be8:	f7fa f9f2 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014bec:	78b1      	ldrb	r1, [r6, #2]
 8014bee:	4004      	ands	r4, r0
 8014bf0:	4638      	mov	r0, r7
 8014bf2:	f7fa f9bf 	bl	800ef74 <ucdr_serialize_bool>
 8014bf6:	78b3      	ldrb	r3, [r6, #2]
 8014bf8:	b2e4      	uxtb	r4, r4
 8014bfa:	4004      	ands	r4, r0
 8014bfc:	b94b      	cbnz	r3, 8014c12 <uxr_serialize_ReadSpecification+0x3e>
 8014bfe:	7a31      	ldrb	r1, [r6, #8]
 8014c00:	4638      	mov	r0, r7
 8014c02:	f7fa f9b7 	bl	800ef74 <ucdr_serialize_bool>
 8014c06:	7a33      	ldrb	r3, [r6, #8]
 8014c08:	4004      	ands	r4, r0
 8014c0a:	b943      	cbnz	r3, 8014c1e <uxr_serialize_ReadSpecification+0x4a>
 8014c0c:	4620      	mov	r0, r4
 8014c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c12:	6871      	ldr	r1, [r6, #4]
 8014c14:	4638      	mov	r0, r7
 8014c16:	f004 fec5 	bl	80199a4 <ucdr_serialize_string>
 8014c1a:	4004      	ands	r4, r0
 8014c1c:	e7ef      	b.n	8014bfe <uxr_serialize_ReadSpecification+0x2a>
 8014c1e:	8971      	ldrh	r1, [r6, #10]
 8014c20:	4638      	mov	r0, r7
 8014c22:	f7fa fa01 	bl	800f028 <ucdr_serialize_uint16_t>
 8014c26:	89b1      	ldrh	r1, [r6, #12]
 8014c28:	4605      	mov	r5, r0
 8014c2a:	4638      	mov	r0, r7
 8014c2c:	f7fa f9fc 	bl	800f028 <ucdr_serialize_uint16_t>
 8014c30:	89f1      	ldrh	r1, [r6, #14]
 8014c32:	4005      	ands	r5, r0
 8014c34:	4638      	mov	r0, r7
 8014c36:	f7fa f9f7 	bl	800f028 <ucdr_serialize_uint16_t>
 8014c3a:	8a31      	ldrh	r1, [r6, #16]
 8014c3c:	4680      	mov	r8, r0
 8014c3e:	4638      	mov	r0, r7
 8014c40:	f7fa f9f2 	bl	800f028 <ucdr_serialize_uint16_t>
 8014c44:	b2ed      	uxtb	r5, r5
 8014c46:	4025      	ands	r5, r4
 8014c48:	ea08 0505 	and.w	r5, r8, r5
 8014c4c:	ea00 0405 	and.w	r4, r0, r5
 8014c50:	4620      	mov	r0, r4
 8014c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c56:	bf00      	nop

08014c58 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014c58:	f7ff ba16 	b.w	8014088 <uxr_serialize_CLIENT_Representation>

08014c5c <uxr_serialize_CREATE_Payload>:
 8014c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c5e:	2202      	movs	r2, #2
 8014c60:	4607      	mov	r7, r0
 8014c62:	460e      	mov	r6, r1
 8014c64:	f004 fd7e 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014c68:	2202      	movs	r2, #2
 8014c6a:	18b1      	adds	r1, r6, r2
 8014c6c:	4605      	mov	r5, r0
 8014c6e:	4638      	mov	r0, r7
 8014c70:	f004 fd78 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014c74:	7931      	ldrb	r1, [r6, #4]
 8014c76:	4604      	mov	r4, r0
 8014c78:	4638      	mov	r0, r7
 8014c7a:	f7fa f9a9 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014c7e:	b170      	cbz	r0, 8014c9e <uxr_serialize_CREATE_Payload+0x42>
 8014c80:	7933      	ldrb	r3, [r6, #4]
 8014c82:	402c      	ands	r4, r5
 8014c84:	3b01      	subs	r3, #1
 8014c86:	b2e4      	uxtb	r4, r4
 8014c88:	2b0d      	cmp	r3, #13
 8014c8a:	d809      	bhi.n	8014ca0 <uxr_serialize_CREATE_Payload+0x44>
 8014c8c:	e8df f003 	tbb	[pc, r3]
 8014c90:	23230a4c 	.word	0x23230a4c
 8014c94:	0a0a0a0a 	.word	0x0a0a0a0a
 8014c98:	12121208 	.word	0x12121208
 8014c9c:	3e45      	.short	0x3e45
 8014c9e:	2400      	movs	r4, #0
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ca4:	f106 0108 	add.w	r1, r6, #8
 8014ca8:	4638      	mov	r0, r7
 8014caa:	f7ff faf3 	bl	8014294 <uxr_serialize_DATAWRITER_Representation>
 8014cae:	4004      	ands	r4, r0
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cb4:	7a31      	ldrb	r1, [r6, #8]
 8014cb6:	4638      	mov	r0, r7
 8014cb8:	f7fa f98a 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	d0ee      	beq.n	8014c9e <uxr_serialize_CREATE_Payload+0x42>
 8014cc0:	7a33      	ldrb	r3, [r6, #8]
 8014cc2:	2b01      	cmp	r3, #1
 8014cc4:	d001      	beq.n	8014cca <uxr_serialize_CREATE_Payload+0x6e>
 8014cc6:	2b02      	cmp	r3, #2
 8014cc8:	d1ea      	bne.n	8014ca0 <uxr_serialize_CREATE_Payload+0x44>
 8014cca:	68f1      	ldr	r1, [r6, #12]
 8014ccc:	4638      	mov	r0, r7
 8014cce:	f004 fe69 	bl	80199a4 <ucdr_serialize_string>
 8014cd2:	4004      	ands	r4, r0
 8014cd4:	e7e4      	b.n	8014ca0 <uxr_serialize_CREATE_Payload+0x44>
 8014cd6:	7a31      	ldrb	r1, [r6, #8]
 8014cd8:	4638      	mov	r0, r7
 8014cda:	f7fa f979 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014cde:	4605      	mov	r5, r0
 8014ce0:	b158      	cbz	r0, 8014cfa <uxr_serialize_CREATE_Payload+0x9e>
 8014ce2:	7a33      	ldrb	r3, [r6, #8]
 8014ce4:	2b02      	cmp	r3, #2
 8014ce6:	d034      	beq.n	8014d52 <uxr_serialize_CREATE_Payload+0xf6>
 8014ce8:	2b03      	cmp	r3, #3
 8014cea:	d106      	bne.n	8014cfa <uxr_serialize_CREATE_Payload+0x9e>
 8014cec:	68f2      	ldr	r2, [r6, #12]
 8014cee:	f106 0110 	add.w	r1, r6, #16
 8014cf2:	4638      	mov	r0, r7
 8014cf4:	f004 fe2a 	bl	801994c <ucdr_serialize_sequence_uint8_t>
 8014cf8:	4605      	mov	r5, r0
 8014cfa:	2202      	movs	r2, #2
 8014cfc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014d00:	4638      	mov	r0, r7
 8014d02:	f004 fd2f 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014d06:	4028      	ands	r0, r5
 8014d08:	4004      	ands	r4, r0
 8014d0a:	e7c9      	b.n	8014ca0 <uxr_serialize_CREATE_Payload+0x44>
 8014d0c:	f106 0108 	add.w	r1, r6, #8
 8014d10:	4638      	mov	r0, r7
 8014d12:	f7ff f9b9 	bl	8014088 <uxr_serialize_CLIENT_Representation>
 8014d16:	4004      	ands	r4, r0
 8014d18:	e7c2      	b.n	8014ca0 <uxr_serialize_CREATE_Payload+0x44>
 8014d1a:	f106 0108 	add.w	r1, r6, #8
 8014d1e:	4638      	mov	r0, r7
 8014d20:	f7ff fa6e 	bl	8014200 <uxr_serialize_AGENT_Representation>
 8014d24:	4004      	ands	r4, r0
 8014d26:	e7bb      	b.n	8014ca0 <uxr_serialize_CREATE_Payload+0x44>
 8014d28:	7a31      	ldrb	r1, [r6, #8]
 8014d2a:	4638      	mov	r0, r7
 8014d2c:	f7fa f950 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014d30:	4605      	mov	r5, r0
 8014d32:	b130      	cbz	r0, 8014d42 <uxr_serialize_CREATE_Payload+0xe6>
 8014d34:	7a33      	ldrb	r3, [r6, #8]
 8014d36:	2b02      	cmp	r3, #2
 8014d38:	d011      	beq.n	8014d5e <uxr_serialize_CREATE_Payload+0x102>
 8014d3a:	2b03      	cmp	r3, #3
 8014d3c:	d015      	beq.n	8014d6a <uxr_serialize_CREATE_Payload+0x10e>
 8014d3e:	2b01      	cmp	r3, #1
 8014d40:	d00d      	beq.n	8014d5e <uxr_serialize_CREATE_Payload+0x102>
 8014d42:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8014d46:	4638      	mov	r0, r7
 8014d48:	f7fa fe7e 	bl	800fa48 <ucdr_serialize_int16_t>
 8014d4c:	4028      	ands	r0, r5
 8014d4e:	4004      	ands	r4, r0
 8014d50:	e7a6      	b.n	8014ca0 <uxr_serialize_CREATE_Payload+0x44>
 8014d52:	68f1      	ldr	r1, [r6, #12]
 8014d54:	4638      	mov	r0, r7
 8014d56:	f004 fe25 	bl	80199a4 <ucdr_serialize_string>
 8014d5a:	4605      	mov	r5, r0
 8014d5c:	e7cd      	b.n	8014cfa <uxr_serialize_CREATE_Payload+0x9e>
 8014d5e:	68f1      	ldr	r1, [r6, #12]
 8014d60:	4638      	mov	r0, r7
 8014d62:	f004 fe1f 	bl	80199a4 <ucdr_serialize_string>
 8014d66:	4605      	mov	r5, r0
 8014d68:	e7eb      	b.n	8014d42 <uxr_serialize_CREATE_Payload+0xe6>
 8014d6a:	68f2      	ldr	r2, [r6, #12]
 8014d6c:	f106 0110 	add.w	r1, r6, #16
 8014d70:	4638      	mov	r0, r7
 8014d72:	f004 fdeb 	bl	801994c <ucdr_serialize_sequence_uint8_t>
 8014d76:	4605      	mov	r5, r0
 8014d78:	e7e3      	b.n	8014d42 <uxr_serialize_CREATE_Payload+0xe6>
 8014d7a:	bf00      	nop

08014d7c <uxr_deserialize_GET_INFO_Payload>:
 8014d7c:	b570      	push	{r4, r5, r6, lr}
 8014d7e:	2202      	movs	r2, #2
 8014d80:	4605      	mov	r5, r0
 8014d82:	460e      	mov	r6, r1
 8014d84:	f004 fd52 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014d88:	2202      	movs	r2, #2
 8014d8a:	18b1      	adds	r1, r6, r2
 8014d8c:	4604      	mov	r4, r0
 8014d8e:	4628      	mov	r0, r5
 8014d90:	f004 fd4c 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014d94:	1d31      	adds	r1, r6, #4
 8014d96:	4004      	ands	r4, r0
 8014d98:	4628      	mov	r0, r5
 8014d9a:	f7fa fc5f 	bl	800f65c <ucdr_deserialize_uint32_t>
 8014d9e:	b2e4      	uxtb	r4, r4
 8014da0:	4020      	ands	r0, r4
 8014da2:	bd70      	pop	{r4, r5, r6, pc}

08014da4 <uxr_serialize_DELETE_Payload>:
 8014da4:	b570      	push	{r4, r5, r6, lr}
 8014da6:	2202      	movs	r2, #2
 8014da8:	4605      	mov	r5, r0
 8014daa:	460e      	mov	r6, r1
 8014dac:	f004 fcda 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014db0:	2202      	movs	r2, #2
 8014db2:	4604      	mov	r4, r0
 8014db4:	18b1      	adds	r1, r6, r2
 8014db6:	4628      	mov	r0, r5
 8014db8:	f004 fcd4 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014dbc:	4020      	ands	r0, r4
 8014dbe:	b2c0      	uxtb	r0, r0
 8014dc0:	bd70      	pop	{r4, r5, r6, pc}
 8014dc2:	bf00      	nop

08014dc4 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dc8:	4605      	mov	r5, r0
 8014dca:	460e      	mov	r6, r1
 8014dcc:	f7fa f916 	bl	800effc <ucdr_deserialize_uint8_t>
 8014dd0:	1c71      	adds	r1, r6, #1
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	4628      	mov	r0, r5
 8014dd6:	f7fa f911 	bl	800effc <ucdr_deserialize_uint8_t>
 8014dda:	2204      	movs	r2, #4
 8014ddc:	18b1      	adds	r1, r6, r2
 8014dde:	4680      	mov	r8, r0
 8014de0:	4628      	mov	r0, r5
 8014de2:	f004 fd23 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014de6:	f106 0108 	add.w	r1, r6, #8
 8014dea:	4607      	mov	r7, r0
 8014dec:	2202      	movs	r2, #2
 8014dee:	4628      	mov	r0, r5
 8014df0:	f004 fd1c 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014df4:	ea04 0308 	and.w	r3, r4, r8
 8014df8:	b2db      	uxtb	r3, r3
 8014dfa:	ea03 0407 	and.w	r4, r3, r7
 8014dfe:	2202      	movs	r2, #2
 8014e00:	4607      	mov	r7, r0
 8014e02:	f106 010a 	add.w	r1, r6, #10
 8014e06:	4628      	mov	r0, r5
 8014e08:	f004 fd10 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014e0c:	f106 010c 	add.w	r1, r6, #12
 8014e10:	4603      	mov	r3, r0
 8014e12:	4628      	mov	r0, r5
 8014e14:	461d      	mov	r5, r3
 8014e16:	f7fa f8c3 	bl	800efa0 <ucdr_deserialize_bool>
 8014e1a:	403c      	ands	r4, r7
 8014e1c:	4025      	ands	r5, r4
 8014e1e:	4028      	ands	r0, r5
 8014e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e24 <uxr_deserialize_STATUS_Payload>:
 8014e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e28:	2202      	movs	r2, #2
 8014e2a:	4606      	mov	r6, r0
 8014e2c:	460f      	mov	r7, r1
 8014e2e:	f004 fcfd 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014e32:	2202      	movs	r2, #2
 8014e34:	18b9      	adds	r1, r7, r2
 8014e36:	4605      	mov	r5, r0
 8014e38:	4630      	mov	r0, r6
 8014e3a:	f004 fcf7 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014e3e:	1d39      	adds	r1, r7, #4
 8014e40:	4680      	mov	r8, r0
 8014e42:	4630      	mov	r0, r6
 8014e44:	f7fa f8da 	bl	800effc <ucdr_deserialize_uint8_t>
 8014e48:	1d79      	adds	r1, r7, #5
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	4630      	mov	r0, r6
 8014e4e:	f7fa f8d5 	bl	800effc <ucdr_deserialize_uint8_t>
 8014e52:	ea05 0508 	and.w	r5, r5, r8
 8014e56:	402c      	ands	r4, r5
 8014e58:	4020      	ands	r0, r4
 8014e5a:	b2c0      	uxtb	r0, r0
 8014e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e60 <uxr_serialize_INFO_Payload>:
 8014e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e64:	2202      	movs	r2, #2
 8014e66:	460c      	mov	r4, r1
 8014e68:	4605      	mov	r5, r0
 8014e6a:	f004 fc7b 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014e6e:	2202      	movs	r2, #2
 8014e70:	18a1      	adds	r1, r4, r2
 8014e72:	4680      	mov	r8, r0
 8014e74:	4628      	mov	r0, r5
 8014e76:	f004 fc75 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014e7a:	7921      	ldrb	r1, [r4, #4]
 8014e7c:	4607      	mov	r7, r0
 8014e7e:	4628      	mov	r0, r5
 8014e80:	f7fa f8a6 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014e84:	7961      	ldrb	r1, [r4, #5]
 8014e86:	4606      	mov	r6, r0
 8014e88:	4628      	mov	r0, r5
 8014e8a:	f7fa f8a1 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014e8e:	ea08 0807 	and.w	r8, r8, r7
 8014e92:	ea06 0608 	and.w	r6, r6, r8
 8014e96:	4006      	ands	r6, r0
 8014e98:	7a21      	ldrb	r1, [r4, #8]
 8014e9a:	4628      	mov	r0, r5
 8014e9c:	f7fa f86a 	bl	800ef74 <ucdr_serialize_bool>
 8014ea0:	7a23      	ldrb	r3, [r4, #8]
 8014ea2:	b2f7      	uxtb	r7, r6
 8014ea4:	4606      	mov	r6, r0
 8014ea6:	b96b      	cbnz	r3, 8014ec4 <uxr_serialize_INFO_Payload+0x64>
 8014ea8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014eac:	4628      	mov	r0, r5
 8014eae:	f7fa f861 	bl	800ef74 <ucdr_serialize_bool>
 8014eb2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8014eb6:	4030      	ands	r0, r6
 8014eb8:	b2c6      	uxtb	r6, r0
 8014eba:	b983      	cbnz	r3, 8014ede <uxr_serialize_INFO_Payload+0x7e>
 8014ebc:	ea06 0007 	and.w	r0, r6, r7
 8014ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ec4:	7b21      	ldrb	r1, [r4, #12]
 8014ec6:	4628      	mov	r0, r5
 8014ec8:	f7fa f882 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014ecc:	b188      	cbz	r0, 8014ef2 <uxr_serialize_INFO_Payload+0x92>
 8014ece:	f104 010c 	add.w	r1, r4, #12
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	f7ff fa06 	bl	80142e4 <uxr_serialize_ObjectVariant.part.0>
 8014ed8:	4030      	ands	r0, r6
 8014eda:	b2c6      	uxtb	r6, r0
 8014edc:	e7e4      	b.n	8014ea8 <uxr_serialize_INFO_Payload+0x48>
 8014ede:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8014ee2:	4628      	mov	r0, r5
 8014ee4:	f7ff fdb2 	bl	8014a4c <uxr_serialize_ActivityInfoVariant>
 8014ee8:	4006      	ands	r6, r0
 8014eea:	ea06 0007 	and.w	r0, r6, r7
 8014eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef2:	4606      	mov	r6, r0
 8014ef4:	e7d8      	b.n	8014ea8 <uxr_serialize_INFO_Payload+0x48>
 8014ef6:	bf00      	nop

08014ef8 <uxr_serialize_READ_DATA_Payload>:
 8014ef8:	b570      	push	{r4, r5, r6, lr}
 8014efa:	2202      	movs	r2, #2
 8014efc:	4605      	mov	r5, r0
 8014efe:	460e      	mov	r6, r1
 8014f00:	f004 fc30 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014f04:	2202      	movs	r2, #2
 8014f06:	18b1      	adds	r1, r6, r2
 8014f08:	4604      	mov	r4, r0
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	f004 fc2a 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014f10:	1d31      	adds	r1, r6, #4
 8014f12:	4004      	ands	r4, r0
 8014f14:	4628      	mov	r0, r5
 8014f16:	f7ff fe5d 	bl	8014bd4 <uxr_serialize_ReadSpecification>
 8014f1a:	b2e4      	uxtb	r4, r4
 8014f1c:	4020      	ands	r0, r4
 8014f1e:	bd70      	pop	{r4, r5, r6, pc}

08014f20 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014f20:	b570      	push	{r4, r5, r6, lr}
 8014f22:	2202      	movs	r2, #2
 8014f24:	4605      	mov	r5, r0
 8014f26:	460e      	mov	r6, r1
 8014f28:	f004 fc1c 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014f2c:	2202      	movs	r2, #2
 8014f2e:	4604      	mov	r4, r0
 8014f30:	18b1      	adds	r1, r6, r2
 8014f32:	4628      	mov	r0, r5
 8014f34:	f004 fc16 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014f38:	4020      	ands	r0, r4
 8014f3a:	b2c0      	uxtb	r0, r0
 8014f3c:	bd70      	pop	{r4, r5, r6, pc}
 8014f3e:	bf00      	nop

08014f40 <uxr_serialize_ACKNACK_Payload>:
 8014f40:	b570      	push	{r4, r5, r6, lr}
 8014f42:	460c      	mov	r4, r1
 8014f44:	460e      	mov	r6, r1
 8014f46:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014f4a:	4605      	mov	r5, r0
 8014f4c:	f7fa f86c 	bl	800f028 <ucdr_serialize_uint16_t>
 8014f50:	2202      	movs	r2, #2
 8014f52:	4621      	mov	r1, r4
 8014f54:	4604      	mov	r4, r0
 8014f56:	4628      	mov	r0, r5
 8014f58:	f004 fc04 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8014f5c:	7931      	ldrb	r1, [r6, #4]
 8014f5e:	4004      	ands	r4, r0
 8014f60:	4628      	mov	r0, r5
 8014f62:	f7fa f835 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014f66:	b2e4      	uxtb	r4, r4
 8014f68:	4020      	ands	r0, r4
 8014f6a:	bd70      	pop	{r4, r5, r6, pc}

08014f6c <uxr_deserialize_ACKNACK_Payload>:
 8014f6c:	b570      	push	{r4, r5, r6, lr}
 8014f6e:	4605      	mov	r5, r0
 8014f70:	460e      	mov	r6, r1
 8014f72:	f7fa f959 	bl	800f228 <ucdr_deserialize_uint16_t>
 8014f76:	2202      	movs	r2, #2
 8014f78:	18b1      	adds	r1, r6, r2
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	f004 fc55 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8014f82:	1d31      	adds	r1, r6, #4
 8014f84:	4004      	ands	r4, r0
 8014f86:	4628      	mov	r0, r5
 8014f88:	f7fa f838 	bl	800effc <ucdr_deserialize_uint8_t>
 8014f8c:	b2e4      	uxtb	r4, r4
 8014f8e:	4020      	ands	r0, r4
 8014f90:	bd70      	pop	{r4, r5, r6, pc}
 8014f92:	bf00      	nop

08014f94 <uxr_serialize_HEARTBEAT_Payload>:
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	460d      	mov	r5, r1
 8014f98:	8809      	ldrh	r1, [r1, #0]
 8014f9a:	4606      	mov	r6, r0
 8014f9c:	f7fa f844 	bl	800f028 <ucdr_serialize_uint16_t>
 8014fa0:	8869      	ldrh	r1, [r5, #2]
 8014fa2:	4604      	mov	r4, r0
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	f7fa f83f 	bl	800f028 <ucdr_serialize_uint16_t>
 8014faa:	7929      	ldrb	r1, [r5, #4]
 8014fac:	4004      	ands	r4, r0
 8014fae:	4630      	mov	r0, r6
 8014fb0:	f7fa f80e 	bl	800efd0 <ucdr_serialize_uint8_t>
 8014fb4:	b2e4      	uxtb	r4, r4
 8014fb6:	4020      	ands	r0, r4
 8014fb8:	bd70      	pop	{r4, r5, r6, pc}
 8014fba:	bf00      	nop

08014fbc <uxr_deserialize_HEARTBEAT_Payload>:
 8014fbc:	b570      	push	{r4, r5, r6, lr}
 8014fbe:	4605      	mov	r5, r0
 8014fc0:	460e      	mov	r6, r1
 8014fc2:	f7fa f931 	bl	800f228 <ucdr_deserialize_uint16_t>
 8014fc6:	1cb1      	adds	r1, r6, #2
 8014fc8:	4604      	mov	r4, r0
 8014fca:	4628      	mov	r0, r5
 8014fcc:	f7fa f92c 	bl	800f228 <ucdr_deserialize_uint16_t>
 8014fd0:	1d31      	adds	r1, r6, #4
 8014fd2:	4004      	ands	r4, r0
 8014fd4:	4628      	mov	r0, r5
 8014fd6:	f7fa f811 	bl	800effc <ucdr_deserialize_uint8_t>
 8014fda:	b2e4      	uxtb	r4, r4
 8014fdc:	4020      	ands	r0, r4
 8014fde:	bd70      	pop	{r4, r5, r6, pc}

08014fe0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fe4:	4605      	mov	r5, r0
 8014fe6:	460e      	mov	r6, r1
 8014fe8:	f7fa feba 	bl	800fd60 <ucdr_deserialize_int32_t>
 8014fec:	1d31      	adds	r1, r6, #4
 8014fee:	4607      	mov	r7, r0
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	f7fa fb33 	bl	800f65c <ucdr_deserialize_uint32_t>
 8014ff6:	f106 0108 	add.w	r1, r6, #8
 8014ffa:	4680      	mov	r8, r0
 8014ffc:	4628      	mov	r0, r5
 8014ffe:	f7fa feaf 	bl	800fd60 <ucdr_deserialize_int32_t>
 8015002:	f106 010c 	add.w	r1, r6, #12
 8015006:	4604      	mov	r4, r0
 8015008:	4628      	mov	r0, r5
 801500a:	f7fa fb27 	bl	800f65c <ucdr_deserialize_uint32_t>
 801500e:	ea07 0708 	and.w	r7, r7, r8
 8015012:	403c      	ands	r4, r7
 8015014:	f106 0110 	add.w	r1, r6, #16
 8015018:	4004      	ands	r4, r0
 801501a:	4628      	mov	r0, r5
 801501c:	f7fa fea0 	bl	800fd60 <ucdr_deserialize_int32_t>
 8015020:	f106 0114 	add.w	r1, r6, #20
 8015024:	4607      	mov	r7, r0
 8015026:	4628      	mov	r0, r5
 8015028:	f7fa fb18 	bl	800f65c <ucdr_deserialize_uint32_t>
 801502c:	b2e4      	uxtb	r4, r4
 801502e:	403c      	ands	r4, r7
 8015030:	4020      	ands	r0, r4
 8015032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015036:	bf00      	nop

08015038 <uxr_serialize_SampleIdentity>:
 8015038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801503c:	220c      	movs	r2, #12
 801503e:	4604      	mov	r4, r0
 8015040:	460d      	mov	r5, r1
 8015042:	f004 fb8f 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8015046:	2203      	movs	r2, #3
 8015048:	f105 010c 	add.w	r1, r5, #12
 801504c:	4607      	mov	r7, r0
 801504e:	4620      	mov	r0, r4
 8015050:	f004 fb88 	bl	8019764 <ucdr_serialize_array_uint8_t>
 8015054:	7be9      	ldrb	r1, [r5, #15]
 8015056:	4680      	mov	r8, r0
 8015058:	4620      	mov	r0, r4
 801505a:	f7f9 ffb9 	bl	800efd0 <ucdr_serialize_uint8_t>
 801505e:	6929      	ldr	r1, [r5, #16]
 8015060:	4606      	mov	r6, r0
 8015062:	4620      	mov	r0, r4
 8015064:	f7fa fde4 	bl	800fc30 <ucdr_serialize_int32_t>
 8015068:	6969      	ldr	r1, [r5, #20]
 801506a:	4603      	mov	r3, r0
 801506c:	4620      	mov	r0, r4
 801506e:	ea07 0708 	and.w	r7, r7, r8
 8015072:	461c      	mov	r4, r3
 8015074:	f7fa f9c2 	bl	800f3fc <ucdr_serialize_uint32_t>
 8015078:	403e      	ands	r6, r7
 801507a:	4034      	ands	r4, r6
 801507c:	4020      	ands	r0, r4
 801507e:	b2c0      	uxtb	r0, r0
 8015080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015084 <uxr_deserialize_SampleIdentity>:
 8015084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015088:	220c      	movs	r2, #12
 801508a:	4604      	mov	r4, r0
 801508c:	460d      	mov	r5, r1
 801508e:	f004 fbcd 	bl	801982c <ucdr_deserialize_array_uint8_t>
 8015092:	2203      	movs	r2, #3
 8015094:	f105 010c 	add.w	r1, r5, #12
 8015098:	4607      	mov	r7, r0
 801509a:	4620      	mov	r0, r4
 801509c:	f004 fbc6 	bl	801982c <ucdr_deserialize_array_uint8_t>
 80150a0:	f105 010f 	add.w	r1, r5, #15
 80150a4:	4680      	mov	r8, r0
 80150a6:	4620      	mov	r0, r4
 80150a8:	f7f9 ffa8 	bl	800effc <ucdr_deserialize_uint8_t>
 80150ac:	f105 0110 	add.w	r1, r5, #16
 80150b0:	4606      	mov	r6, r0
 80150b2:	4620      	mov	r0, r4
 80150b4:	f7fa fe54 	bl	800fd60 <ucdr_deserialize_int32_t>
 80150b8:	f105 0114 	add.w	r1, r5, #20
 80150bc:	4603      	mov	r3, r0
 80150be:	4620      	mov	r0, r4
 80150c0:	ea07 0708 	and.w	r7, r7, r8
 80150c4:	461c      	mov	r4, r3
 80150c6:	f7fa fac9 	bl	800f65c <ucdr_deserialize_uint32_t>
 80150ca:	403e      	ands	r6, r7
 80150cc:	4034      	ands	r4, r6
 80150ce:	4020      	ands	r0, r4
 80150d0:	b2c0      	uxtb	r0, r0
 80150d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150d6:	bf00      	nop

080150d8 <rcl_client_get_rmw_handle>:
 80150d8:	b118      	cbz	r0, 80150e2 <rcl_client_get_rmw_handle+0xa>
 80150da:	6800      	ldr	r0, [r0, #0]
 80150dc:	b108      	cbz	r0, 80150e2 <rcl_client_get_rmw_handle+0xa>
 80150de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80150e2:	4770      	bx	lr

080150e4 <rcl_send_request>:
 80150e4:	b570      	push	{r4, r5, r6, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	b1e8      	cbz	r0, 8015126 <rcl_send_request+0x42>
 80150ea:	4604      	mov	r4, r0
 80150ec:	6800      	ldr	r0, [r0, #0]
 80150ee:	b1d0      	cbz	r0, 8015126 <rcl_send_request+0x42>
 80150f0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 80150f4:	b1bb      	cbz	r3, 8015126 <rcl_send_request+0x42>
 80150f6:	460e      	mov	r6, r1
 80150f8:	b1d1      	cbz	r1, 8015130 <rcl_send_request+0x4c>
 80150fa:	4615      	mov	r5, r2
 80150fc:	b1c2      	cbz	r2, 8015130 <rcl_send_request+0x4c>
 80150fe:	2105      	movs	r1, #5
 8015100:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015104:	f002 fbf8 	bl	80178f8 <__atomic_load_8>
 8015108:	6823      	ldr	r3, [r4, #0]
 801510a:	e9c5 0100 	strd	r0, r1, [r5]
 801510e:	462a      	mov	r2, r5
 8015110:	4631      	mov	r1, r6
 8015112:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015116:	f003 fdbd 	bl	8018c94 <rmw_send_request>
 801511a:	4606      	mov	r6, r0
 801511c:	b160      	cbz	r0, 8015138 <rcl_send_request+0x54>
 801511e:	2601      	movs	r6, #1
 8015120:	4630      	mov	r0, r6
 8015122:	b002      	add	sp, #8
 8015124:	bd70      	pop	{r4, r5, r6, pc}
 8015126:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801512a:	4630      	mov	r0, r6
 801512c:	b002      	add	sp, #8
 801512e:	bd70      	pop	{r4, r5, r6, pc}
 8015130:	260b      	movs	r6, #11
 8015132:	4630      	mov	r0, r6
 8015134:	b002      	add	sp, #8
 8015136:	bd70      	pop	{r4, r5, r6, pc}
 8015138:	6820      	ldr	r0, [r4, #0]
 801513a:	2105      	movs	r1, #5
 801513c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015140:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015144:	9100      	str	r1, [sp, #0]
 8015146:	f002 fc43 	bl	80179d0 <__atomic_exchange_8>
 801514a:	4630      	mov	r0, r6
 801514c:	b002      	add	sp, #8
 801514e:	bd70      	pop	{r4, r5, r6, pc}

08015150 <rcl_take_response>:
 8015150:	b570      	push	{r4, r5, r6, lr}
 8015152:	468e      	mov	lr, r1
 8015154:	460c      	mov	r4, r1
 8015156:	4616      	mov	r6, r2
 8015158:	4605      	mov	r5, r0
 801515a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801515e:	b08c      	sub	sp, #48	@ 0x30
 8015160:	f10d 0c18 	add.w	ip, sp, #24
 8015164:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015168:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801516c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015170:	b35d      	cbz	r5, 80151ca <rcl_take_response+0x7a>
 8015172:	682b      	ldr	r3, [r5, #0]
 8015174:	b34b      	cbz	r3, 80151ca <rcl_take_response+0x7a>
 8015176:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801517a:	b330      	cbz	r0, 80151ca <rcl_take_response+0x7a>
 801517c:	b346      	cbz	r6, 80151d0 <rcl_take_response+0x80>
 801517e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80151d8 <rcl_take_response+0x88>
 8015182:	2300      	movs	r3, #0
 8015184:	f88d 3007 	strb.w	r3, [sp, #7]
 8015188:	4632      	mov	r2, r6
 801518a:	f10d 0307 	add.w	r3, sp, #7
 801518e:	a902      	add	r1, sp, #8
 8015190:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015194:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015198:	f003 fe84 	bl	8018ea4 <rmw_take_response>
 801519c:	4605      	mov	r5, r0
 801519e:	b9c8      	cbnz	r0, 80151d4 <rcl_take_response+0x84>
 80151a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80151a4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80151a8:	2a00      	cmp	r2, #0
 80151aa:	bf08      	it	eq
 80151ac:	461d      	moveq	r5, r3
 80151ae:	f10d 0e18 	add.w	lr, sp, #24
 80151b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80151b6:	46a4      	mov	ip, r4
 80151b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80151c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80151c4:	4628      	mov	r0, r5
 80151c6:	b00c      	add	sp, #48	@ 0x30
 80151c8:	bd70      	pop	{r4, r5, r6, pc}
 80151ca:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80151ce:	e7ee      	b.n	80151ae <rcl_take_response+0x5e>
 80151d0:	250b      	movs	r5, #11
 80151d2:	e7ec      	b.n	80151ae <rcl_take_response+0x5e>
 80151d4:	2501      	movs	r5, #1
 80151d6:	e7ea      	b.n	80151ae <rcl_take_response+0x5e>
	...

080151e0 <rcl_client_is_valid>:
 80151e0:	b130      	cbz	r0, 80151f0 <rcl_client_is_valid+0x10>
 80151e2:	6800      	ldr	r0, [r0, #0]
 80151e4:	b120      	cbz	r0, 80151f0 <rcl_client_is_valid+0x10>
 80151e6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80151ea:	3800      	subs	r0, #0
 80151ec:	bf18      	it	ne
 80151ee:	2001      	movne	r0, #1
 80151f0:	4770      	bx	lr
 80151f2:	bf00      	nop

080151f4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80151f4:	280b      	cmp	r0, #11
 80151f6:	dc0d      	bgt.n	8015214 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80151f8:	2800      	cmp	r0, #0
 80151fa:	db09      	blt.n	8015210 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80151fc:	280b      	cmp	r0, #11
 80151fe:	d807      	bhi.n	8015210 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015200:	e8df f000 	tbb	[pc, r0]
 8015204:	07060607 	.word	0x07060607
 8015208:	06060606 	.word	0x06060606
 801520c:	07070606 	.word	0x07070606
 8015210:	2001      	movs	r0, #1
 8015212:	4770      	bx	lr
 8015214:	28cb      	cmp	r0, #203	@ 0xcb
 8015216:	bf18      	it	ne
 8015218:	2001      	movne	r0, #1
 801521a:	4770      	bx	lr

0801521c <rcl_get_zero_initialized_context>:
 801521c:	4a03      	ldr	r2, [pc, #12]	@ (801522c <rcl_get_zero_initialized_context+0x10>)
 801521e:	4603      	mov	r3, r0
 8015220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015224:	e883 0003 	stmia.w	r3, {r0, r1}
 8015228:	4618      	mov	r0, r3
 801522a:	4770      	bx	lr
 801522c:	0801dbf8 	.word	0x0801dbf8

08015230 <rcl_context_is_valid>:
 8015230:	b118      	cbz	r0, 801523a <rcl_context_is_valid+0xa>
 8015232:	6840      	ldr	r0, [r0, #4]
 8015234:	3800      	subs	r0, #0
 8015236:	bf18      	it	ne
 8015238:	2001      	movne	r0, #1
 801523a:	4770      	bx	lr

0801523c <__cleanup_context>:
 801523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015240:	4606      	mov	r6, r0
 8015242:	6800      	ldr	r0, [r0, #0]
 8015244:	2300      	movs	r3, #0
 8015246:	6073      	str	r3, [r6, #4]
 8015248:	2800      	cmp	r0, #0
 801524a:	d049      	beq.n	80152e0 <__cleanup_context+0xa4>
 801524c:	6947      	ldr	r7, [r0, #20]
 801524e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015252:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015256:	b137      	cbz	r7, 8015266 <__cleanup_context+0x2a>
 8015258:	3014      	adds	r0, #20
 801525a:	f000 f9a5 	bl	80155a8 <rcl_init_options_fini>
 801525e:	4607      	mov	r7, r0
 8015260:	2800      	cmp	r0, #0
 8015262:	d144      	bne.n	80152ee <__cleanup_context+0xb2>
 8015264:	6830      	ldr	r0, [r6, #0]
 8015266:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015268:	b143      	cbz	r3, 801527c <__cleanup_context+0x40>
 801526a:	3028      	adds	r0, #40	@ 0x28
 801526c:	f003 fb5a 	bl	8018924 <rmw_context_fini>
 8015270:	b118      	cbz	r0, 801527a <__cleanup_context+0x3e>
 8015272:	2f00      	cmp	r7, #0
 8015274:	d03e      	beq.n	80152f4 <__cleanup_context+0xb8>
 8015276:	f7fc f9fb 	bl	8011670 <rcutils_reset_error>
 801527a:	6830      	ldr	r0, [r6, #0]
 801527c:	6a03      	ldr	r3, [r0, #32]
 801527e:	b1db      	cbz	r3, 80152b8 <__cleanup_context+0x7c>
 8015280:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015284:	2a01      	cmp	r2, #1
 8015286:	f17c 0100 	sbcs.w	r1, ip, #0
 801528a:	db11      	blt.n	80152b0 <__cleanup_context+0x74>
 801528c:	2400      	movs	r4, #0
 801528e:	4625      	mov	r5, r4
 8015290:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015294:	4649      	mov	r1, r9
 8015296:	b1b8      	cbz	r0, 80152c8 <__cleanup_context+0x8c>
 8015298:	47c0      	blx	r8
 801529a:	6833      	ldr	r3, [r6, #0]
 801529c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80152a0:	3401      	adds	r4, #1
 80152a2:	f145 0500 	adc.w	r5, r5, #0
 80152a6:	4294      	cmp	r4, r2
 80152a8:	eb75 010c 	sbcs.w	r1, r5, ip
 80152ac:	6a1b      	ldr	r3, [r3, #32]
 80152ae:	dbef      	blt.n	8015290 <__cleanup_context+0x54>
 80152b0:	4618      	mov	r0, r3
 80152b2:	4649      	mov	r1, r9
 80152b4:	47c0      	blx	r8
 80152b6:	6830      	ldr	r0, [r6, #0]
 80152b8:	4649      	mov	r1, r9
 80152ba:	47c0      	blx	r8
 80152bc:	2300      	movs	r3, #0
 80152be:	e9c6 3300 	strd	r3, r3, [r6]
 80152c2:	4638      	mov	r0, r7
 80152c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152c8:	3401      	adds	r4, #1
 80152ca:	f145 0500 	adc.w	r5, r5, #0
 80152ce:	4294      	cmp	r4, r2
 80152d0:	eb75 010c 	sbcs.w	r1, r5, ip
 80152d4:	dbdc      	blt.n	8015290 <__cleanup_context+0x54>
 80152d6:	4618      	mov	r0, r3
 80152d8:	4649      	mov	r1, r9
 80152da:	47c0      	blx	r8
 80152dc:	6830      	ldr	r0, [r6, #0]
 80152de:	e7eb      	b.n	80152b8 <__cleanup_context+0x7c>
 80152e0:	4607      	mov	r7, r0
 80152e2:	2300      	movs	r3, #0
 80152e4:	e9c6 3300 	strd	r3, r3, [r6]
 80152e8:	4638      	mov	r0, r7
 80152ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152ee:	f7fc f9bf 	bl	8011670 <rcutils_reset_error>
 80152f2:	e7b7      	b.n	8015264 <__cleanup_context+0x28>
 80152f4:	f7ff ff7e 	bl	80151f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80152f8:	4607      	mov	r7, r0
 80152fa:	e7bc      	b.n	8015276 <__cleanup_context+0x3a>

080152fc <rcl_init>:
 80152fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015300:	1e05      	subs	r5, r0, #0
 8015302:	b09c      	sub	sp, #112	@ 0x70
 8015304:	460e      	mov	r6, r1
 8015306:	4690      	mov	r8, r2
 8015308:	461f      	mov	r7, r3
 801530a:	f340 8099 	ble.w	8015440 <rcl_init+0x144>
 801530e:	2900      	cmp	r1, #0
 8015310:	f000 8099 	beq.w	8015446 <rcl_init+0x14a>
 8015314:	f1a1 0e04 	sub.w	lr, r1, #4
 8015318:	f04f 0c00 	mov.w	ip, #0
 801531c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015320:	f10c 0c01 	add.w	ip, ip, #1
 8015324:	2c00      	cmp	r4, #0
 8015326:	f000 808e 	beq.w	8015446 <rcl_init+0x14a>
 801532a:	4565      	cmp	r5, ip
 801532c:	d1f6      	bne.n	801531c <rcl_init+0x20>
 801532e:	f1b8 0f00 	cmp.w	r8, #0
 8015332:	f000 8088 	beq.w	8015446 <rcl_init+0x14a>
 8015336:	f8d8 4000 	ldr.w	r4, [r8]
 801533a:	2c00      	cmp	r4, #0
 801533c:	f000 8083 	beq.w	8015446 <rcl_init+0x14a>
 8015340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015342:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8015346:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801534a:	6823      	ldr	r3, [r4, #0]
 801534c:	f8cc 3000 	str.w	r3, [ip]
 8015350:	a817      	add	r0, sp, #92	@ 0x5c
 8015352:	f7fc f969 	bl	8011628 <rcutils_allocator_is_valid>
 8015356:	2800      	cmp	r0, #0
 8015358:	d075      	beq.n	8015446 <rcl_init+0x14a>
 801535a:	2f00      	cmp	r7, #0
 801535c:	d073      	beq.n	8015446 <rcl_init+0x14a>
 801535e:	683b      	ldr	r3, [r7, #0]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d175      	bne.n	8015450 <rcl_init+0x154>
 8015364:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8015368:	2178      	movs	r1, #120	@ 0x78
 801536a:	2001      	movs	r0, #1
 801536c:	4798      	blx	r3
 801536e:	4604      	mov	r4, r0
 8015370:	6038      	str	r0, [r7, #0]
 8015372:	2800      	cmp	r0, #0
 8015374:	f000 80a0 	beq.w	80154b8 <rcl_init+0x1bc>
 8015378:	a802      	add	r0, sp, #8
 801537a:	f002 fdfd 	bl	8017f78 <rmw_get_zero_initialized_context>
 801537e:	a902      	add	r1, sp, #8
 8015380:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015384:	2250      	movs	r2, #80	@ 0x50
 8015386:	ac17      	add	r4, sp, #92	@ 0x5c
 8015388:	f007 f81d 	bl	801c3c6 <memcpy>
 801538c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801538e:	f8d7 e000 	ldr.w	lr, [r7]
 8015392:	46f4      	mov	ip, lr
 8015394:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015398:	6823      	ldr	r3, [r4, #0]
 801539a:	f8cc 3000 	str.w	r3, [ip]
 801539e:	f10e 0114 	add.w	r1, lr, #20
 80153a2:	4640      	mov	r0, r8
 80153a4:	f000 f92a 	bl	80155fc <rcl_init_options_copy>
 80153a8:	4604      	mov	r4, r0
 80153aa:	2800      	cmp	r0, #0
 80153ac:	d144      	bne.n	8015438 <rcl_init+0x13c>
 80153ae:	f8d7 9000 	ldr.w	r9, [r7]
 80153b2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80153b6:	f8c9 0020 	str.w	r0, [r9, #32]
 80153ba:	f8c9 5018 	str.w	r5, [r9, #24]
 80153be:	f8c9 801c 	str.w	r8, [r9, #28]
 80153c2:	2d00      	cmp	r5, #0
 80153c4:	d04b      	beq.n	801545e <rcl_init+0x162>
 80153c6:	2e00      	cmp	r6, #0
 80153c8:	d049      	beq.n	801545e <rcl_init+0x162>
 80153ca:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80153ce:	2104      	movs	r1, #4
 80153d0:	4628      	mov	r0, r5
 80153d2:	4798      	blx	r3
 80153d4:	f8c9 0020 	str.w	r0, [r9, #32]
 80153d8:	f8d7 9000 	ldr.w	r9, [r7]
 80153dc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80153e0:	46ca      	mov	sl, r9
 80153e2:	b343      	cbz	r3, 8015436 <rcl_init+0x13a>
 80153e4:	2d01      	cmp	r5, #1
 80153e6:	f178 0300 	sbcs.w	r3, r8, #0
 80153ea:	db38      	blt.n	801545e <rcl_init+0x162>
 80153ec:	2400      	movs	r4, #0
 80153ee:	3e04      	subs	r6, #4
 80153f0:	46a1      	mov	r9, r4
 80153f2:	e00b      	b.n	801540c <rcl_init+0x110>
 80153f4:	6831      	ldr	r1, [r6, #0]
 80153f6:	f006 ffe6 	bl	801c3c6 <memcpy>
 80153fa:	3401      	adds	r4, #1
 80153fc:	f149 0900 	adc.w	r9, r9, #0
 8015400:	45c8      	cmp	r8, r9
 8015402:	bf08      	it	eq
 8015404:	42a5      	cmpeq	r5, r4
 8015406:	d028      	beq.n	801545a <rcl_init+0x15e>
 8015408:	f8d7 a000 	ldr.w	sl, [r7]
 801540c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015410:	f7ea fee8 	bl	80001e4 <strlen>
 8015414:	1c42      	adds	r2, r0, #1
 8015416:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015418:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801541a:	f8da a020 	ldr.w	sl, [sl, #32]
 801541e:	9201      	str	r2, [sp, #4]
 8015420:	4610      	mov	r0, r2
 8015422:	4798      	blx	r3
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801542a:	6a1b      	ldr	r3, [r3, #32]
 801542c:	9a01      	ldr	r2, [sp, #4]
 801542e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015432:	2800      	cmp	r0, #0
 8015434:	d1de      	bne.n	80153f4 <rcl_init+0xf8>
 8015436:	240a      	movs	r4, #10
 8015438:	4638      	mov	r0, r7
 801543a:	f7ff feff 	bl	801523c <__cleanup_context>
 801543e:	e003      	b.n	8015448 <rcl_init+0x14c>
 8015440:	2900      	cmp	r1, #0
 8015442:	f43f af74 	beq.w	801532e <rcl_init+0x32>
 8015446:	240b      	movs	r4, #11
 8015448:	4620      	mov	r0, r4
 801544a:	b01c      	add	sp, #112	@ 0x70
 801544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015450:	2464      	movs	r4, #100	@ 0x64
 8015452:	4620      	mov	r0, r4
 8015454:	b01c      	add	sp, #112	@ 0x70
 8015456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801545a:	f8d7 9000 	ldr.w	r9, [r7]
 801545e:	491d      	ldr	r1, [pc, #116]	@ (80154d4 <rcl_init+0x1d8>)
 8015460:	680b      	ldr	r3, [r1, #0]
 8015462:	3301      	adds	r3, #1
 8015464:	d023      	beq.n	80154ae <rcl_init+0x1b2>
 8015466:	600b      	str	r3, [r1, #0]
 8015468:	461a      	mov	r2, r3
 801546a:	2400      	movs	r4, #0
 801546c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015470:	607b      	str	r3, [r7, #4]
 8015472:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015474:	6182      	str	r2, [r0, #24]
 8015476:	3301      	adds	r3, #1
 8015478:	61c4      	str	r4, [r0, #28]
 801547a:	d01f      	beq.n	80154bc <rcl_init+0x1c0>
 801547c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015480:	b94b      	cbnz	r3, 8015496 <rcl_init+0x19a>
 8015482:	3030      	adds	r0, #48	@ 0x30
 8015484:	f000 f926 	bl	80156d4 <rcl_get_localhost_only>
 8015488:	4604      	mov	r4, r0
 801548a:	2800      	cmp	r0, #0
 801548c:	d1d4      	bne.n	8015438 <rcl_init+0x13c>
 801548e:	f8d7 9000 	ldr.w	r9, [r7]
 8015492:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015496:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 801549a:	3018      	adds	r0, #24
 801549c:	f003 f90c 	bl	80186b8 <rmw_init>
 80154a0:	4604      	mov	r4, r0
 80154a2:	2800      	cmp	r0, #0
 80154a4:	d0d0      	beq.n	8015448 <rcl_init+0x14c>
 80154a6:	f7ff fea5 	bl	80151f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80154aa:	4604      	mov	r4, r0
 80154ac:	e7c4      	b.n	8015438 <rcl_init+0x13c>
 80154ae:	2201      	movs	r2, #1
 80154b0:	461c      	mov	r4, r3
 80154b2:	600a      	str	r2, [r1, #0]
 80154b4:	4613      	mov	r3, r2
 80154b6:	e7d9      	b.n	801546c <rcl_init+0x170>
 80154b8:	240a      	movs	r4, #10
 80154ba:	e7c5      	b.n	8015448 <rcl_init+0x14c>
 80154bc:	3024      	adds	r0, #36	@ 0x24
 80154be:	f005 fe75 	bl	801b1ac <rcl_get_default_domain_id>
 80154c2:	4604      	mov	r4, r0
 80154c4:	2800      	cmp	r0, #0
 80154c6:	d1b7      	bne.n	8015438 <rcl_init+0x13c>
 80154c8:	f8d7 9000 	ldr.w	r9, [r7]
 80154cc:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80154d0:	e7d4      	b.n	801547c <rcl_init+0x180>
 80154d2:	bf00      	nop
 80154d4:	2000e594 	.word	0x2000e594

080154d8 <rcl_get_zero_initialized_init_options>:
 80154d8:	2000      	movs	r0, #0
 80154da:	4770      	bx	lr

080154dc <rcl_init_options_init>:
 80154dc:	b084      	sub	sp, #16
 80154de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154e0:	b097      	sub	sp, #92	@ 0x5c
 80154e2:	ae1d      	add	r6, sp, #116	@ 0x74
 80154e4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 80154e8:	2800      	cmp	r0, #0
 80154ea:	d058      	beq.n	801559e <rcl_init_options_init+0xc2>
 80154ec:	6803      	ldr	r3, [r0, #0]
 80154ee:	4605      	mov	r5, r0
 80154f0:	b133      	cbz	r3, 8015500 <rcl_init_options_init+0x24>
 80154f2:	2464      	movs	r4, #100	@ 0x64
 80154f4:	4620      	mov	r0, r4
 80154f6:	b017      	add	sp, #92	@ 0x5c
 80154f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80154fc:	b004      	add	sp, #16
 80154fe:	4770      	bx	lr
 8015500:	4630      	mov	r0, r6
 8015502:	f7fc f891 	bl	8011628 <rcutils_allocator_is_valid>
 8015506:	2800      	cmp	r0, #0
 8015508:	d049      	beq.n	801559e <rcl_init_options_init+0xc2>
 801550a:	46b4      	mov	ip, r6
 801550c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015510:	ac11      	add	r4, sp, #68	@ 0x44
 8015512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015514:	f8dc 3000 	ldr.w	r3, [ip]
 8015518:	6023      	str	r3, [r4, #0]
 801551a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801551c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801551e:	2050      	movs	r0, #80	@ 0x50
 8015520:	4798      	blx	r3
 8015522:	4604      	mov	r4, r0
 8015524:	6028      	str	r0, [r5, #0]
 8015526:	2800      	cmp	r0, #0
 8015528:	d03b      	beq.n	80155a2 <rcl_init_options_init+0xc6>
 801552a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801552e:	4686      	mov	lr, r0
 8015530:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015534:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015538:	f8dc 3000 	ldr.w	r3, [ip]
 801553c:	f8ce 3000 	str.w	r3, [lr]
 8015540:	a802      	add	r0, sp, #8
 8015542:	f002 fd29 	bl	8017f98 <rmw_get_zero_initialized_init_options>
 8015546:	f10d 0e08 	add.w	lr, sp, #8
 801554a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801554e:	f104 0c18 	add.w	ip, r4, #24
 8015552:	682f      	ldr	r7, [r5, #0]
 8015554:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015558:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801555c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015560:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015564:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015568:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801556c:	ac20      	add	r4, sp, #128	@ 0x80
 801556e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015572:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015576:	e88d 0003 	stmia.w	sp, {r0, r1}
 801557a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801557e:	f107 0018 	add.w	r0, r7, #24
 8015582:	f002 ff77 	bl	8018474 <rmw_init_options_init>
 8015586:	4604      	mov	r4, r0
 8015588:	2800      	cmp	r0, #0
 801558a:	d0b3      	beq.n	80154f4 <rcl_init_options_init+0x18>
 801558c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801558e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015590:	6828      	ldr	r0, [r5, #0]
 8015592:	4798      	blx	r3
 8015594:	4620      	mov	r0, r4
 8015596:	f7ff fe2d 	bl	80151f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801559a:	4604      	mov	r4, r0
 801559c:	e7aa      	b.n	80154f4 <rcl_init_options_init+0x18>
 801559e:	240b      	movs	r4, #11
 80155a0:	e7a8      	b.n	80154f4 <rcl_init_options_init+0x18>
 80155a2:	240a      	movs	r4, #10
 80155a4:	e7a6      	b.n	80154f4 <rcl_init_options_init+0x18>
 80155a6:	bf00      	nop

080155a8 <rcl_init_options_fini>:
 80155a8:	b530      	push	{r4, r5, lr}
 80155aa:	b087      	sub	sp, #28
 80155ac:	b1f0      	cbz	r0, 80155ec <rcl_init_options_fini+0x44>
 80155ae:	6803      	ldr	r3, [r0, #0]
 80155b0:	4604      	mov	r4, r0
 80155b2:	b1db      	cbz	r3, 80155ec <rcl_init_options_fini+0x44>
 80155b4:	469c      	mov	ip, r3
 80155b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80155ba:	f10d 0e04 	add.w	lr, sp, #4
 80155be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80155c2:	f8dc 3000 	ldr.w	r3, [ip]
 80155c6:	f8ce 3000 	str.w	r3, [lr]
 80155ca:	a801      	add	r0, sp, #4
 80155cc:	f7fc f82c 	bl	8011628 <rcutils_allocator_is_valid>
 80155d0:	b160      	cbz	r0, 80155ec <rcl_init_options_fini+0x44>
 80155d2:	6820      	ldr	r0, [r4, #0]
 80155d4:	3018      	adds	r0, #24
 80155d6:	f003 f823 	bl	8018620 <rmw_init_options_fini>
 80155da:	4605      	mov	r5, r0
 80155dc:	b950      	cbnz	r0, 80155f4 <rcl_init_options_fini+0x4c>
 80155de:	6820      	ldr	r0, [r4, #0]
 80155e0:	9b02      	ldr	r3, [sp, #8]
 80155e2:	9905      	ldr	r1, [sp, #20]
 80155e4:	4798      	blx	r3
 80155e6:	4628      	mov	r0, r5
 80155e8:	b007      	add	sp, #28
 80155ea:	bd30      	pop	{r4, r5, pc}
 80155ec:	250b      	movs	r5, #11
 80155ee:	4628      	mov	r0, r5
 80155f0:	b007      	add	sp, #28
 80155f2:	bd30      	pop	{r4, r5, pc}
 80155f4:	f7ff fdfe 	bl	80151f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80155f8:	4605      	mov	r5, r0
 80155fa:	e7f8      	b.n	80155ee <rcl_init_options_fini+0x46>

080155fc <rcl_init_options_copy>:
 80155fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015600:	b094      	sub	sp, #80	@ 0x50
 8015602:	2800      	cmp	r0, #0
 8015604:	d058      	beq.n	80156b8 <rcl_init_options_copy+0xbc>
 8015606:	4604      	mov	r4, r0
 8015608:	6800      	ldr	r0, [r0, #0]
 801560a:	2800      	cmp	r0, #0
 801560c:	d054      	beq.n	80156b8 <rcl_init_options_copy+0xbc>
 801560e:	460e      	mov	r6, r1
 8015610:	f7fc f80a 	bl	8011628 <rcutils_allocator_is_valid>
 8015614:	2800      	cmp	r0, #0
 8015616:	d04f      	beq.n	80156b8 <rcl_init_options_copy+0xbc>
 8015618:	2e00      	cmp	r6, #0
 801561a:	d04d      	beq.n	80156b8 <rcl_init_options_copy+0xbc>
 801561c:	6833      	ldr	r3, [r6, #0]
 801561e:	b123      	cbz	r3, 801562a <rcl_init_options_copy+0x2e>
 8015620:	2464      	movs	r4, #100	@ 0x64
 8015622:	4620      	mov	r0, r4
 8015624:	b014      	add	sp, #80	@ 0x50
 8015626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801562a:	6827      	ldr	r7, [r4, #0]
 801562c:	46bc      	mov	ip, r7
 801562e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015632:	ad0f      	add	r5, sp, #60	@ 0x3c
 8015634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015636:	f8dc 3000 	ldr.w	r3, [ip]
 801563a:	f8d7 8000 	ldr.w	r8, [r7]
 801563e:	602b      	str	r3, [r5, #0]
 8015640:	4619      	mov	r1, r3
 8015642:	2050      	movs	r0, #80	@ 0x50
 8015644:	47c0      	blx	r8
 8015646:	4605      	mov	r5, r0
 8015648:	6030      	str	r0, [r6, #0]
 801564a:	b3d0      	cbz	r0, 80156c2 <rcl_init_options_copy+0xc6>
 801564c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8015650:	4686      	mov	lr, r0
 8015652:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015656:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801565a:	f8dc 3000 	ldr.w	r3, [ip]
 801565e:	f8ce 3000 	str.w	r3, [lr]
 8015662:	4668      	mov	r0, sp
 8015664:	f002 fc98 	bl	8017f98 <rmw_get_zero_initialized_init_options>
 8015668:	46ee      	mov	lr, sp
 801566a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801566e:	f105 0c18 	add.w	ip, r5, #24
 8015672:	6824      	ldr	r4, [r4, #0]
 8015674:	6835      	ldr	r5, [r6, #0]
 8015676:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801567a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801567e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015682:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801568a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801568e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015692:	f104 0018 	add.w	r0, r4, #24
 8015696:	f105 0118 	add.w	r1, r5, #24
 801569a:	f002 ff4d 	bl	8018538 <rmw_init_options_copy>
 801569e:	4604      	mov	r4, r0
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d0be      	beq.n	8015622 <rcl_init_options_copy+0x26>
 80156a4:	f7fb ffce 	bl	8011644 <rcutils_get_error_string>
 80156a8:	f7fb ffe2 	bl	8011670 <rcutils_reset_error>
 80156ac:	4630      	mov	r0, r6
 80156ae:	f7ff ff7b 	bl	80155a8 <rcl_init_options_fini>
 80156b2:	b140      	cbz	r0, 80156c6 <rcl_init_options_copy+0xca>
 80156b4:	4604      	mov	r4, r0
 80156b6:	e7b4      	b.n	8015622 <rcl_init_options_copy+0x26>
 80156b8:	240b      	movs	r4, #11
 80156ba:	4620      	mov	r0, r4
 80156bc:	b014      	add	sp, #80	@ 0x50
 80156be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156c2:	240a      	movs	r4, #10
 80156c4:	e7ad      	b.n	8015622 <rcl_init_options_copy+0x26>
 80156c6:	4620      	mov	r0, r4
 80156c8:	b014      	add	sp, #80	@ 0x50
 80156ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80156ce:	f7ff bd91 	b.w	80151f4 <rcl_convert_rmw_ret_to_rcl_ret>
 80156d2:	bf00      	nop

080156d4 <rcl_get_localhost_only>:
 80156d4:	b510      	push	{r4, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	2300      	movs	r3, #0
 80156da:	9301      	str	r3, [sp, #4]
 80156dc:	b1b8      	cbz	r0, 801570e <rcl_get_localhost_only+0x3a>
 80156de:	4604      	mov	r4, r0
 80156e0:	a901      	add	r1, sp, #4
 80156e2:	480c      	ldr	r0, [pc, #48]	@ (8015714 <rcl_get_localhost_only+0x40>)
 80156e4:	f002 f9ac 	bl	8017a40 <rcutils_get_env>
 80156e8:	b110      	cbz	r0, 80156f0 <rcl_get_localhost_only+0x1c>
 80156ea:	2001      	movs	r0, #1
 80156ec:	b002      	add	sp, #8
 80156ee:	bd10      	pop	{r4, pc}
 80156f0:	9b01      	ldr	r3, [sp, #4]
 80156f2:	b113      	cbz	r3, 80156fa <rcl_get_localhost_only+0x26>
 80156f4:	781a      	ldrb	r2, [r3, #0]
 80156f6:	2a31      	cmp	r2, #49	@ 0x31
 80156f8:	d004      	beq.n	8015704 <rcl_get_localhost_only+0x30>
 80156fa:	2302      	movs	r3, #2
 80156fc:	2000      	movs	r0, #0
 80156fe:	7023      	strb	r3, [r4, #0]
 8015700:	b002      	add	sp, #8
 8015702:	bd10      	pop	{r4, pc}
 8015704:	785b      	ldrb	r3, [r3, #1]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d1f7      	bne.n	80156fa <rcl_get_localhost_only+0x26>
 801570a:	2301      	movs	r3, #1
 801570c:	e7f6      	b.n	80156fc <rcl_get_localhost_only+0x28>
 801570e:	200b      	movs	r0, #11
 8015710:	b002      	add	sp, #8
 8015712:	bd10      	pop	{r4, pc}
 8015714:	0801d5f4 	.word	0x0801d5f4

08015718 <rcl_get_zero_initialized_node>:
 8015718:	4a03      	ldr	r2, [pc, #12]	@ (8015728 <rcl_get_zero_initialized_node+0x10>)
 801571a:	4603      	mov	r3, r0
 801571c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015720:	e883 0003 	stmia.w	r3, {r0, r1}
 8015724:	4618      	mov	r0, r3
 8015726:	4770      	bx	lr
 8015728:	0801dc00 	.word	0x0801dc00

0801572c <rcl_node_init>:
 801572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015730:	b0a9      	sub	sp, #164	@ 0xa4
 8015732:	4604      	mov	r4, r0
 8015734:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8015738:	a823      	add	r0, sp, #140	@ 0x8c
 801573a:	460e      	mov	r6, r1
 801573c:	4615      	mov	r5, r2
 801573e:	461f      	mov	r7, r3
 8015740:	f005 ff5c 	bl	801b5fc <rcl_guard_condition_get_default_options>
 8015744:	f1b8 0f00 	cmp.w	r8, #0
 8015748:	f000 80e6 	beq.w	8015918 <rcl_node_init+0x1ec>
 801574c:	4640      	mov	r0, r8
 801574e:	f7fb ff6b 	bl	8011628 <rcutils_allocator_is_valid>
 8015752:	2800      	cmp	r0, #0
 8015754:	f000 80e0 	beq.w	8015918 <rcl_node_init+0x1ec>
 8015758:	2e00      	cmp	r6, #0
 801575a:	f000 80dd 	beq.w	8015918 <rcl_node_init+0x1ec>
 801575e:	2d00      	cmp	r5, #0
 8015760:	f000 80da 	beq.w	8015918 <rcl_node_init+0x1ec>
 8015764:	2c00      	cmp	r4, #0
 8015766:	f000 80d7 	beq.w	8015918 <rcl_node_init+0x1ec>
 801576a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801576e:	f1b9 0f00 	cmp.w	r9, #0
 8015772:	f040 80fd 	bne.w	8015970 <rcl_node_init+0x244>
 8015776:	2f00      	cmp	r7, #0
 8015778:	f000 80ce 	beq.w	8015918 <rcl_node_init+0x1ec>
 801577c:	4638      	mov	r0, r7
 801577e:	f7ff fd57 	bl	8015230 <rcl_context_is_valid>
 8015782:	4682      	mov	sl, r0
 8015784:	2800      	cmp	r0, #0
 8015786:	f000 80cd 	beq.w	8015924 <rcl_node_init+0x1f8>
 801578a:	464a      	mov	r2, r9
 801578c:	a922      	add	r1, sp, #136	@ 0x88
 801578e:	4630      	mov	r0, r6
 8015790:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8015794:	f002 fda2 	bl	80182dc <rmw_validate_node_name>
 8015798:	4681      	mov	r9, r0
 801579a:	2800      	cmp	r0, #0
 801579c:	f040 80be 	bne.w	801591c <rcl_node_init+0x1f0>
 80157a0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80157a2:	2800      	cmp	r0, #0
 80157a4:	f040 80f0 	bne.w	8015988 <rcl_node_init+0x25c>
 80157a8:	4628      	mov	r0, r5
 80157aa:	f7ea fd1b 	bl	80001e4 <strlen>
 80157ae:	2800      	cmp	r0, #0
 80157b0:	f040 80bb 	bne.w	801592a <rcl_node_init+0x1fe>
 80157b4:	4d7c      	ldr	r5, [pc, #496]	@ (80159a8 <rcl_node_init+0x27c>)
 80157b6:	a922      	add	r1, sp, #136	@ 0x88
 80157b8:	2200      	movs	r2, #0
 80157ba:	4628      	mov	r0, r5
 80157bc:	f002 fd70 	bl	80182a0 <rmw_validate_namespace>
 80157c0:	4681      	mov	r9, r0
 80157c2:	2800      	cmp	r0, #0
 80157c4:	f040 80aa 	bne.w	801591c <rcl_node_init+0x1f0>
 80157c8:	4682      	mov	sl, r0
 80157ca:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80157cc:	2800      	cmp	r0, #0
 80157ce:	f040 80e0 	bne.w	8015992 <rcl_node_init+0x266>
 80157d2:	f8d8 3000 	ldr.w	r3, [r8]
 80157d6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80157da:	2078      	movs	r0, #120	@ 0x78
 80157dc:	4798      	blx	r3
 80157de:	4681      	mov	r9, r0
 80157e0:	6060      	str	r0, [r4, #4]
 80157e2:	2800      	cmp	r0, #0
 80157e4:	f000 80ca 	beq.w	801597c <rcl_node_init+0x250>
 80157e8:	2200      	movs	r2, #0
 80157ea:	2300      	movs	r3, #0
 80157ec:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80157f0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80157f4:	a808      	add	r0, sp, #32
 80157f6:	f000 f907 	bl	8015a08 <rcl_node_get_default_options>
 80157fa:	a908      	add	r1, sp, #32
 80157fc:	4648      	mov	r0, r9
 80157fe:	2268      	movs	r2, #104	@ 0x68
 8015800:	f006 fde1 	bl	801c3c6 <memcpy>
 8015804:	6861      	ldr	r1, [r4, #4]
 8015806:	6027      	str	r7, [r4, #0]
 8015808:	4640      	mov	r0, r8
 801580a:	f000 f90b 	bl	8015a24 <rcl_node_options_copy>
 801580e:	2800      	cmp	r0, #0
 8015810:	d158      	bne.n	80158c4 <rcl_node_init+0x198>
 8015812:	4628      	mov	r0, r5
 8015814:	f7ea fce6 	bl	80001e4 <strlen>
 8015818:	4428      	add	r0, r5
 801581a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801581e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8015822:	2b2f      	cmp	r3, #47	@ 0x2f
 8015824:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015828:	9300      	str	r3, [sp, #0]
 801582a:	bf0c      	ite	eq
 801582c:	4b5f      	ldreq	r3, [pc, #380]	@ (80159ac <rcl_node_init+0x280>)
 801582e:	4b60      	ldrne	r3, [pc, #384]	@ (80159b0 <rcl_node_init+0x284>)
 8015830:	9302      	str	r3, [sp, #8]
 8015832:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015836:	9301      	str	r3, [sp, #4]
 8015838:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801583c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015840:	f002 f916 	bl	8017a70 <rcutils_format_string_limit>
 8015844:	6823      	ldr	r3, [r4, #0]
 8015846:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801584a:	6818      	ldr	r0, [r3, #0]
 801584c:	4631      	mov	r1, r6
 801584e:	3028      	adds	r0, #40	@ 0x28
 8015850:	462a      	mov	r2, r5
 8015852:	6866      	ldr	r6, [r4, #4]
 8015854:	f003 f984 	bl	8018b60 <rmw_create_node>
 8015858:	6863      	ldr	r3, [r4, #4]
 801585a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801585c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801585e:	2800      	cmp	r0, #0
 8015860:	d032      	beq.n	80158c8 <rcl_node_init+0x19c>
 8015862:	f003 fa11 	bl	8018c88 <rmw_node_get_graph_guard_condition>
 8015866:	4681      	mov	r9, r0
 8015868:	b360      	cbz	r0, 80158c4 <rcl_node_init+0x198>
 801586a:	f8d8 3000 	ldr.w	r3, [r8]
 801586e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015872:	6866      	ldr	r6, [r4, #4]
 8015874:	2008      	movs	r0, #8
 8015876:	4798      	blx	r3
 8015878:	6863      	ldr	r3, [r4, #4]
 801587a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801587c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8015880:	f1bb 0f00 	cmp.w	fp, #0
 8015884:	d020      	beq.n	80158c8 <rcl_node_init+0x19c>
 8015886:	a806      	add	r0, sp, #24
 8015888:	f005 fe28 	bl	801b4dc <rcl_get_zero_initialized_guard_condition>
 801588c:	a806      	add	r0, sp, #24
 801588e:	c803      	ldmia	r0, {r0, r1}
 8015890:	6863      	ldr	r3, [r4, #4]
 8015892:	46c4      	mov	ip, r8
 8015894:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8015898:	e88b 0003 	stmia.w	fp, {r0, r1}
 801589c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80158a0:	ae23      	add	r6, sp, #140	@ 0x8c
 80158a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80158a4:	f8dc 3000 	ldr.w	r3, [ip]
 80158a8:	6033      	str	r3, [r6, #0]
 80158aa:	ab28      	add	r3, sp, #160	@ 0xa0
 80158ac:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80158b0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80158b4:	4649      	mov	r1, r9
 80158b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80158b8:	463a      	mov	r2, r7
 80158ba:	4670      	mov	r0, lr
 80158bc:	f005 fe18 	bl	801b4f0 <rcl_guard_condition_init_from_rmw>
 80158c0:	4681      	mov	r9, r0
 80158c2:	b328      	cbz	r0, 8015910 <rcl_node_init+0x1e4>
 80158c4:	6863      	ldr	r3, [r4, #4]
 80158c6:	b1f3      	cbz	r3, 8015906 <rcl_node_init+0x1da>
 80158c8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80158ca:	b128      	cbz	r0, 80158d8 <rcl_node_init+0x1ac>
 80158cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80158d0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80158d4:	4798      	blx	r3
 80158d6:	6863      	ldr	r3, [r4, #4]
 80158d8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80158da:	b110      	cbz	r0, 80158e2 <rcl_node_init+0x1b6>
 80158dc:	f003 f958 	bl	8018b90 <rmw_destroy_node>
 80158e0:	6863      	ldr	r3, [r4, #4]
 80158e2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80158e4:	b148      	cbz	r0, 80158fa <rcl_node_init+0x1ce>
 80158e6:	f005 fe63 	bl	801b5b0 <rcl_guard_condition_fini>
 80158ea:	6863      	ldr	r3, [r4, #4]
 80158ec:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80158f0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80158f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80158f6:	4798      	blx	r3
 80158f8:	6863      	ldr	r3, [r4, #4]
 80158fa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80158fe:	4618      	mov	r0, r3
 8015900:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015904:	4798      	blx	r3
 8015906:	2300      	movs	r3, #0
 8015908:	e9c4 3300 	strd	r3, r3, [r4]
 801590c:	f04f 0901 	mov.w	r9, #1
 8015910:	f1ba 0f00 	cmp.w	sl, #0
 8015914:	d125      	bne.n	8015962 <rcl_node_init+0x236>
 8015916:	e001      	b.n	801591c <rcl_node_init+0x1f0>
 8015918:	f04f 090b 	mov.w	r9, #11
 801591c:	4648      	mov	r0, r9
 801591e:	b029      	add	sp, #164	@ 0xa4
 8015920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015924:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8015928:	e7f8      	b.n	801591c <rcl_node_init+0x1f0>
 801592a:	782b      	ldrb	r3, [r5, #0]
 801592c:	2b2f      	cmp	r3, #47	@ 0x2f
 801592e:	f43f af42 	beq.w	80157b6 <rcl_node_init+0x8a>
 8015932:	9503      	str	r5, [sp, #12]
 8015934:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015938:	9300      	str	r3, [sp, #0]
 801593a:	4b1e      	ldr	r3, [pc, #120]	@ (80159b4 <rcl_node_init+0x288>)
 801593c:	9302      	str	r3, [sp, #8]
 801593e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015942:	9301      	str	r3, [sp, #4]
 8015944:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015948:	f002 f892 	bl	8017a70 <rcutils_format_string_limit>
 801594c:	4605      	mov	r5, r0
 801594e:	b340      	cbz	r0, 80159a2 <rcl_node_init+0x276>
 8015950:	2200      	movs	r2, #0
 8015952:	a922      	add	r1, sp, #136	@ 0x88
 8015954:	9222      	str	r2, [sp, #136]	@ 0x88
 8015956:	f002 fca3 	bl	80182a0 <rmw_validate_namespace>
 801595a:	4681      	mov	r9, r0
 801595c:	2800      	cmp	r0, #0
 801595e:	f43f af34 	beq.w	80157ca <rcl_node_init+0x9e>
 8015962:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015966:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801596a:	4628      	mov	r0, r5
 801596c:	4798      	blx	r3
 801596e:	e7d5      	b.n	801591c <rcl_node_init+0x1f0>
 8015970:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8015974:	4648      	mov	r0, r9
 8015976:	b029      	add	sp, #164	@ 0xa4
 8015978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801597c:	f04f 090a 	mov.w	r9, #10
 8015980:	f1ba 0f00 	cmp.w	sl, #0
 8015984:	d1ed      	bne.n	8015962 <rcl_node_init+0x236>
 8015986:	e7c9      	b.n	801591c <rcl_node_init+0x1f0>
 8015988:	f002 fcfa 	bl	8018380 <rmw_node_name_validation_result_string>
 801598c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8015990:	e7c4      	b.n	801591c <rcl_node_init+0x1f0>
 8015992:	f002 fc97 	bl	80182c4 <rmw_namespace_validation_result_string>
 8015996:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801599a:	f1ba 0f00 	cmp.w	sl, #0
 801599e:	d1e0      	bne.n	8015962 <rcl_node_init+0x236>
 80159a0:	e7bc      	b.n	801591c <rcl_node_init+0x1f0>
 80159a2:	f04f 090a 	mov.w	r9, #10
 80159a6:	e7b9      	b.n	801591c <rcl_node_init+0x1f0>
 80159a8:	0801d60c 	.word	0x0801d60c
 80159ac:	0801d430 	.word	0x0801d430
 80159b0:	0801d614 	.word	0x0801d614
 80159b4:	0801d610 	.word	0x0801d610

080159b8 <rcl_node_is_valid>:
 80159b8:	b130      	cbz	r0, 80159c8 <rcl_node_is_valid+0x10>
 80159ba:	6843      	ldr	r3, [r0, #4]
 80159bc:	b123      	cbz	r3, 80159c8 <rcl_node_is_valid+0x10>
 80159be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80159c0:	b113      	cbz	r3, 80159c8 <rcl_node_is_valid+0x10>
 80159c2:	6800      	ldr	r0, [r0, #0]
 80159c4:	f7ff bc34 	b.w	8015230 <rcl_context_is_valid>
 80159c8:	2000      	movs	r0, #0
 80159ca:	4770      	bx	lr

080159cc <rcl_node_get_name>:
 80159cc:	b120      	cbz	r0, 80159d8 <rcl_node_get_name+0xc>
 80159ce:	6840      	ldr	r0, [r0, #4]
 80159d0:	b110      	cbz	r0, 80159d8 <rcl_node_get_name+0xc>
 80159d2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80159d4:	b100      	cbz	r0, 80159d8 <rcl_node_get_name+0xc>
 80159d6:	6880      	ldr	r0, [r0, #8]
 80159d8:	4770      	bx	lr
 80159da:	bf00      	nop

080159dc <rcl_node_get_namespace>:
 80159dc:	b120      	cbz	r0, 80159e8 <rcl_node_get_namespace+0xc>
 80159de:	6840      	ldr	r0, [r0, #4]
 80159e0:	b110      	cbz	r0, 80159e8 <rcl_node_get_namespace+0xc>
 80159e2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80159e4:	b100      	cbz	r0, 80159e8 <rcl_node_get_namespace+0xc>
 80159e6:	68c0      	ldr	r0, [r0, #12]
 80159e8:	4770      	bx	lr
 80159ea:	bf00      	nop

080159ec <rcl_node_get_options>:
 80159ec:	b128      	cbz	r0, 80159fa <rcl_node_get_options+0xe>
 80159ee:	6840      	ldr	r0, [r0, #4]
 80159f0:	b118      	cbz	r0, 80159fa <rcl_node_get_options+0xe>
 80159f2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	bf08      	it	eq
 80159f8:	2000      	moveq	r0, #0
 80159fa:	4770      	bx	lr

080159fc <rcl_node_get_rmw_handle>:
 80159fc:	b110      	cbz	r0, 8015a04 <rcl_node_get_rmw_handle+0x8>
 80159fe:	6840      	ldr	r0, [r0, #4]
 8015a00:	b100      	cbz	r0, 8015a04 <rcl_node_get_rmw_handle+0x8>
 8015a02:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015a04:	4770      	bx	lr
 8015a06:	bf00      	nop

08015a08 <rcl_node_get_default_options>:
 8015a08:	b510      	push	{r4, lr}
 8015a0a:	2268      	movs	r2, #104	@ 0x68
 8015a0c:	4604      	mov	r4, r0
 8015a0e:	2100      	movs	r1, #0
 8015a10:	f006 fc10 	bl	801c234 <memset>
 8015a14:	4620      	mov	r0, r4
 8015a16:	f7fb fdf9 	bl	801160c <rcutils_get_default_allocator>
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	7523      	strb	r3, [r4, #20]
 8015a1e:	4620      	mov	r0, r4
 8015a20:	bd10      	pop	{r4, pc}
 8015a22:	bf00      	nop

08015a24 <rcl_node_options_copy>:
 8015a24:	b1d0      	cbz	r0, 8015a5c <rcl_node_options_copy+0x38>
 8015a26:	b570      	push	{r4, r5, r6, lr}
 8015a28:	460c      	mov	r4, r1
 8015a2a:	b1a9      	cbz	r1, 8015a58 <rcl_node_options_copy+0x34>
 8015a2c:	4288      	cmp	r0, r1
 8015a2e:	4684      	mov	ip, r0
 8015a30:	d012      	beq.n	8015a58 <rcl_node_options_copy+0x34>
 8015a32:	4605      	mov	r5, r0
 8015a34:	8a86      	ldrh	r6, [r0, #20]
 8015a36:	468e      	mov	lr, r1
 8015a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a3a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015a3e:	682b      	ldr	r3, [r5, #0]
 8015a40:	f8ce 3000 	str.w	r3, [lr]
 8015a44:	f10c 0118 	add.w	r1, ip, #24
 8015a48:	2250      	movs	r2, #80	@ 0x50
 8015a4a:	82a6      	strh	r6, [r4, #20]
 8015a4c:	f104 0018 	add.w	r0, r4, #24
 8015a50:	f006 fcb9 	bl	801c3c6 <memcpy>
 8015a54:	2000      	movs	r0, #0
 8015a56:	bd70      	pop	{r4, r5, r6, pc}
 8015a58:	200b      	movs	r0, #11
 8015a5a:	bd70      	pop	{r4, r5, r6, pc}
 8015a5c:	200b      	movs	r0, #11
 8015a5e:	4770      	bx	lr

08015a60 <rcl_node_resolve_name>:
 8015a60:	b082      	sub	sp, #8
 8015a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a66:	b091      	sub	sp, #68	@ 0x44
 8015a68:	ac1a      	add	r4, sp, #104	@ 0x68
 8015a6a:	e884 000c 	stmia.w	r4, {r2, r3}
 8015a6e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015a72:	2800      	cmp	r0, #0
 8015a74:	d03b      	beq.n	8015aee <rcl_node_resolve_name+0x8e>
 8015a76:	460c      	mov	r4, r1
 8015a78:	4605      	mov	r5, r0
 8015a7a:	f7ff ffb7 	bl	80159ec <rcl_node_get_options>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	d037      	beq.n	8015af2 <rcl_node_resolve_name+0x92>
 8015a82:	4628      	mov	r0, r5
 8015a84:	f7ff ffa2 	bl	80159cc <rcl_node_get_name>
 8015a88:	4606      	mov	r6, r0
 8015a8a:	4628      	mov	r0, r5
 8015a8c:	f7ff ffa6 	bl	80159dc <rcl_node_get_namespace>
 8015a90:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015a94:	4681      	mov	r9, r0
 8015a96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015a9a:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015a9c:	46ac      	mov	ip, r5
 8015a9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015aa2:	f8de 3000 	ldr.w	r3, [lr]
 8015aa6:	f8cc 3000 	str.w	r3, [ip]
 8015aaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015aac:	b1fb      	cbz	r3, 8015aee <rcl_node_resolve_name+0x8e>
 8015aae:	468a      	mov	sl, r1
 8015ab0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8015ab4:	f002 f934 	bl	8017d20 <rcutils_get_zero_initialized_string_map>
 8015ab8:	ab10      	add	r3, sp, #64	@ 0x40
 8015aba:	9008      	str	r0, [sp, #32]
 8015abc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015ac0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015ac4:	2100      	movs	r1, #0
 8015ac6:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015aca:	a808      	add	r0, sp, #32
 8015acc:	f002 f9a0 	bl	8017e10 <rcutils_string_map_init>
 8015ad0:	4607      	mov	r7, r0
 8015ad2:	b180      	cbz	r0, 8015af6 <rcl_node_resolve_name+0x96>
 8015ad4:	f7fb fdb6 	bl	8011644 <rcutils_get_error_string>
 8015ad8:	f7fb fdca 	bl	8011670 <rcutils_reset_error>
 8015adc:	2f0a      	cmp	r7, #10
 8015ade:	bf18      	it	ne
 8015ae0:	2701      	movne	r7, #1
 8015ae2:	4638      	mov	r0, r7
 8015ae4:	b011      	add	sp, #68	@ 0x44
 8015ae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015aea:	b002      	add	sp, #8
 8015aec:	4770      	bx	lr
 8015aee:	270b      	movs	r7, #11
 8015af0:	e7f7      	b.n	8015ae2 <rcl_node_resolve_name+0x82>
 8015af2:	2701      	movs	r7, #1
 8015af4:	e7f5      	b.n	8015ae2 <rcl_node_resolve_name+0x82>
 8015af6:	9009      	str	r0, [sp, #36]	@ 0x24
 8015af8:	9007      	str	r0, [sp, #28]
 8015afa:	a808      	add	r0, sp, #32
 8015afc:	f005 fce8 	bl	801b4d0 <rcl_get_default_topic_name_substitutions>
 8015b00:	4607      	mov	r7, r0
 8015b02:	b1a8      	cbz	r0, 8015b30 <rcl_node_resolve_name+0xd0>
 8015b04:	280a      	cmp	r0, #10
 8015b06:	9c07      	ldr	r4, [sp, #28]
 8015b08:	d000      	beq.n	8015b0c <rcl_node_resolve_name+0xac>
 8015b0a:	2701      	movs	r7, #1
 8015b0c:	a808      	add	r0, sp, #32
 8015b0e:	f002 f9bf 	bl	8017e90 <rcutils_string_map_fini>
 8015b12:	2800      	cmp	r0, #0
 8015b14:	d13d      	bne.n	8015b92 <rcl_node_resolve_name+0x132>
 8015b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b18:	4659      	mov	r1, fp
 8015b1a:	47d0      	blx	sl
 8015b1c:	4659      	mov	r1, fp
 8015b1e:	4620      	mov	r0, r4
 8015b20:	47d0      	blx	sl
 8015b22:	f1b8 0f00 	cmp.w	r8, #0
 8015b26:	d0dc      	beq.n	8015ae2 <rcl_node_resolve_name+0x82>
 8015b28:	2f67      	cmp	r7, #103	@ 0x67
 8015b2a:	bf08      	it	eq
 8015b2c:	2768      	moveq	r7, #104	@ 0x68
 8015b2e:	e7d8      	b.n	8015ae2 <rcl_node_resolve_name+0x82>
 8015b30:	ab09      	add	r3, sp, #36	@ 0x24
 8015b32:	9305      	str	r3, [sp, #20]
 8015b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015b36:	46ec      	mov	ip, sp
 8015b38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b3c:	682b      	ldr	r3, [r5, #0]
 8015b3e:	f8cc 3000 	str.w	r3, [ip]
 8015b42:	464a      	mov	r2, r9
 8015b44:	4631      	mov	r1, r6
 8015b46:	4620      	mov	r0, r4
 8015b48:	ab08      	add	r3, sp, #32
 8015b4a:	f005 fb63 	bl	801b214 <rcl_expand_topic_name>
 8015b4e:	4607      	mov	r7, r0
 8015b50:	b9b8      	cbnz	r0, 8015b82 <rcl_node_resolve_name+0x122>
 8015b52:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015b54:	9009      	str	r0, [sp, #36]	@ 0x24
 8015b56:	4602      	mov	r2, r0
 8015b58:	a90a      	add	r1, sp, #40	@ 0x28
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	f002 fadc 	bl	8018118 <rmw_validate_full_topic_name>
 8015b60:	b988      	cbnz	r0, 8015b86 <rcl_node_resolve_name+0x126>
 8015b62:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015b64:	b9d5      	cbnz	r5, 8015b9c <rcl_node_resolve_name+0x13c>
 8015b66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015b68:	a808      	add	r0, sp, #32
 8015b6a:	601c      	str	r4, [r3, #0]
 8015b6c:	f002 f990 	bl	8017e90 <rcutils_string_map_fini>
 8015b70:	4607      	mov	r7, r0
 8015b72:	b1a8      	cbz	r0, 8015ba0 <rcl_node_resolve_name+0x140>
 8015b74:	f7fb fd66 	bl	8011644 <rcutils_get_error_string>
 8015b78:	462c      	mov	r4, r5
 8015b7a:	f7fb fd79 	bl	8011670 <rcutils_reset_error>
 8015b7e:	2701      	movs	r7, #1
 8015b80:	e7c9      	b.n	8015b16 <rcl_node_resolve_name+0xb6>
 8015b82:	9c07      	ldr	r4, [sp, #28]
 8015b84:	e7c2      	b.n	8015b0c <rcl_node_resolve_name+0xac>
 8015b86:	f7fb fd5d 	bl	8011644 <rcutils_get_error_string>
 8015b8a:	2701      	movs	r7, #1
 8015b8c:	f7fb fd70 	bl	8011670 <rcutils_reset_error>
 8015b90:	e7bc      	b.n	8015b0c <rcl_node_resolve_name+0xac>
 8015b92:	f7fb fd57 	bl	8011644 <rcutils_get_error_string>
 8015b96:	f7fb fd6b 	bl	8011670 <rcutils_reset_error>
 8015b9a:	e7bc      	b.n	8015b16 <rcl_node_resolve_name+0xb6>
 8015b9c:	2767      	movs	r7, #103	@ 0x67
 8015b9e:	e7b5      	b.n	8015b0c <rcl_node_resolve_name+0xac>
 8015ba0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015ba2:	4659      	mov	r1, fp
 8015ba4:	47d0      	blx	sl
 8015ba6:	4659      	mov	r1, fp
 8015ba8:	4638      	mov	r0, r7
 8015baa:	47d0      	blx	sl
 8015bac:	e799      	b.n	8015ae2 <rcl_node_resolve_name+0x82>
 8015bae:	bf00      	nop

08015bb0 <rcl_service_get_rmw_handle>:
 8015bb0:	b118      	cbz	r0, 8015bba <rcl_service_get_rmw_handle+0xa>
 8015bb2:	6800      	ldr	r0, [r0, #0]
 8015bb4:	b108      	cbz	r0, 8015bba <rcl_service_get_rmw_handle+0xa>
 8015bb6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015bba:	4770      	bx	lr

08015bbc <rcl_take_request>:
 8015bbc:	b570      	push	{r4, r5, r6, lr}
 8015bbe:	468e      	mov	lr, r1
 8015bc0:	460c      	mov	r4, r1
 8015bc2:	4616      	mov	r6, r2
 8015bc4:	4605      	mov	r5, r0
 8015bc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015bca:	b08c      	sub	sp, #48	@ 0x30
 8015bcc:	f10d 0c18 	add.w	ip, sp, #24
 8015bd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015bd4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015bd8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015bdc:	b30d      	cbz	r5, 8015c22 <rcl_take_request+0x66>
 8015bde:	682b      	ldr	r3, [r5, #0]
 8015be0:	b1fb      	cbz	r3, 8015c22 <rcl_take_request+0x66>
 8015be2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015be6:	b1e0      	cbz	r0, 8015c22 <rcl_take_request+0x66>
 8015be8:	b336      	cbz	r6, 8015c38 <rcl_take_request+0x7c>
 8015bea:	2300      	movs	r3, #0
 8015bec:	f88d 3007 	strb.w	r3, [sp, #7]
 8015bf0:	4632      	mov	r2, r6
 8015bf2:	f10d 0307 	add.w	r3, sp, #7
 8015bf6:	a902      	add	r1, sp, #8
 8015bf8:	f003 f89a 	bl	8018d30 <rmw_take_request>
 8015bfc:	4605      	mov	r5, r0
 8015bfe:	b198      	cbz	r0, 8015c28 <rcl_take_request+0x6c>
 8015c00:	280a      	cmp	r0, #10
 8015c02:	bf18      	it	ne
 8015c04:	2501      	movne	r5, #1
 8015c06:	f10d 0e18 	add.w	lr, sp, #24
 8015c0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015c0e:	46a4      	mov	ip, r4
 8015c10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c14:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015c18:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015c1c:	4628      	mov	r0, r5
 8015c1e:	b00c      	add	sp, #48	@ 0x30
 8015c20:	bd70      	pop	{r4, r5, r6, pc}
 8015c22:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8015c26:	e7ee      	b.n	8015c06 <rcl_take_request+0x4a>
 8015c28:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015c2c:	f240 2359 	movw	r3, #601	@ 0x259
 8015c30:	2a00      	cmp	r2, #0
 8015c32:	bf08      	it	eq
 8015c34:	461d      	moveq	r5, r3
 8015c36:	e7e6      	b.n	8015c06 <rcl_take_request+0x4a>
 8015c38:	250b      	movs	r5, #11
 8015c3a:	e7e4      	b.n	8015c06 <rcl_take_request+0x4a>

08015c3c <rcl_send_response>:
 8015c3c:	b170      	cbz	r0, 8015c5c <rcl_send_response+0x20>
 8015c3e:	6800      	ldr	r0, [r0, #0]
 8015c40:	b160      	cbz	r0, 8015c5c <rcl_send_response+0x20>
 8015c42:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015c46:	b148      	cbz	r0, 8015c5c <rcl_send_response+0x20>
 8015c48:	b159      	cbz	r1, 8015c62 <rcl_send_response+0x26>
 8015c4a:	b510      	push	{r4, lr}
 8015c4c:	b15a      	cbz	r2, 8015c66 <rcl_send_response+0x2a>
 8015c4e:	f003 f8cd 	bl	8018dec <rmw_send_response>
 8015c52:	b110      	cbz	r0, 8015c5a <rcl_send_response+0x1e>
 8015c54:	2802      	cmp	r0, #2
 8015c56:	bf18      	it	ne
 8015c58:	2001      	movne	r0, #1
 8015c5a:	bd10      	pop	{r4, pc}
 8015c5c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015c60:	4770      	bx	lr
 8015c62:	200b      	movs	r0, #11
 8015c64:	4770      	bx	lr
 8015c66:	200b      	movs	r0, #11
 8015c68:	bd10      	pop	{r4, pc}
 8015c6a:	bf00      	nop

08015c6c <rcl_service_is_valid>:
 8015c6c:	b130      	cbz	r0, 8015c7c <rcl_service_is_valid+0x10>
 8015c6e:	6800      	ldr	r0, [r0, #0]
 8015c70:	b120      	cbz	r0, 8015c7c <rcl_service_is_valid+0x10>
 8015c72:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015c76:	3800      	subs	r0, #0
 8015c78:	bf18      	it	ne
 8015c7a:	2001      	movne	r0, #1
 8015c7c:	4770      	bx	lr
 8015c7e:	bf00      	nop

08015c80 <rcl_get_zero_initialized_subscription>:
 8015c80:	4b01      	ldr	r3, [pc, #4]	@ (8015c88 <rcl_get_zero_initialized_subscription+0x8>)
 8015c82:	6818      	ldr	r0, [r3, #0]
 8015c84:	4770      	bx	lr
 8015c86:	bf00      	nop
 8015c88:	0801dc08 	.word	0x0801dc08

08015c8c <rcl_subscription_init>:
 8015c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c90:	b089      	sub	sp, #36	@ 0x24
 8015c92:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015c94:	b1d6      	cbz	r6, 8015ccc <rcl_subscription_init+0x40>
 8015c96:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8015c9a:	4604      	mov	r4, r0
 8015c9c:	4648      	mov	r0, r9
 8015c9e:	460d      	mov	r5, r1
 8015ca0:	4690      	mov	r8, r2
 8015ca2:	461f      	mov	r7, r3
 8015ca4:	f7fb fcc0 	bl	8011628 <rcutils_allocator_is_valid>
 8015ca8:	b180      	cbz	r0, 8015ccc <rcl_subscription_init+0x40>
 8015caa:	b17c      	cbz	r4, 8015ccc <rcl_subscription_init+0x40>
 8015cac:	4628      	mov	r0, r5
 8015cae:	f7ff fe83 	bl	80159b8 <rcl_node_is_valid>
 8015cb2:	2800      	cmp	r0, #0
 8015cb4:	d054      	beq.n	8015d60 <rcl_subscription_init+0xd4>
 8015cb6:	f1b8 0f00 	cmp.w	r8, #0
 8015cba:	d007      	beq.n	8015ccc <rcl_subscription_init+0x40>
 8015cbc:	b137      	cbz	r7, 8015ccc <rcl_subscription_init+0x40>
 8015cbe:	6823      	ldr	r3, [r4, #0]
 8015cc0:	b14b      	cbz	r3, 8015cd6 <rcl_subscription_init+0x4a>
 8015cc2:	2764      	movs	r7, #100	@ 0x64
 8015cc4:	4638      	mov	r0, r7
 8015cc6:	b009      	add	sp, #36	@ 0x24
 8015cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ccc:	270b      	movs	r7, #11
 8015cce:	4638      	mov	r0, r7
 8015cd0:	b009      	add	sp, #36	@ 0x24
 8015cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cd6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8015cda:	aa07      	add	r2, sp, #28
 8015cdc:	9205      	str	r2, [sp, #20]
 8015cde:	9307      	str	r3, [sp, #28]
 8015ce0:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8015ce4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015ce8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015cec:	4639      	mov	r1, r7
 8015cee:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015cf2:	4628      	mov	r0, r5
 8015cf4:	f7ff feb4 	bl	8015a60 <rcl_node_resolve_name>
 8015cf8:	4607      	mov	r7, r0
 8015cfa:	2800      	cmp	r0, #0
 8015cfc:	d15f      	bne.n	8015dbe <rcl_subscription_init+0x132>
 8015cfe:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8015d02:	21c8      	movs	r1, #200	@ 0xc8
 8015d04:	2001      	movs	r0, #1
 8015d06:	4798      	blx	r3
 8015d08:	6020      	str	r0, [r4, #0]
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	d05d      	beq.n	8015dca <rcl_subscription_init+0x13e>
 8015d0e:	4628      	mov	r0, r5
 8015d10:	f7ff fe74 	bl	80159fc <rcl_node_get_rmw_handle>
 8015d14:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8015d18:	9300      	str	r3, [sp, #0]
 8015d1a:	9a07      	ldr	r2, [sp, #28]
 8015d1c:	6827      	ldr	r7, [r4, #0]
 8015d1e:	4641      	mov	r1, r8
 8015d20:	4633      	mov	r3, r6
 8015d22:	f003 f94d 	bl	8018fc0 <rmw_create_subscription>
 8015d26:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8015d2a:	6827      	ldr	r7, [r4, #0]
 8015d2c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8015d30:	b348      	cbz	r0, 8015d86 <rcl_subscription_init+0xfa>
 8015d32:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8015d36:	f003 fa25 	bl	8019184 <rmw_subscription_get_actual_qos>
 8015d3a:	4607      	mov	r7, r0
 8015d3c:	b9a8      	cbnz	r0, 8015d6a <rcl_subscription_init+0xde>
 8015d3e:	6820      	ldr	r0, [r4, #0]
 8015d40:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015d44:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8015d48:	2270      	movs	r2, #112	@ 0x70
 8015d4a:	4631      	mov	r1, r6
 8015d4c:	f006 fb3b 	bl	801c3c6 <memcpy>
 8015d50:	9807      	ldr	r0, [sp, #28]
 8015d52:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015d54:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015d56:	4798      	blx	r3
 8015d58:	4638      	mov	r0, r7
 8015d5a:	b009      	add	sp, #36	@ 0x24
 8015d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d60:	27c8      	movs	r7, #200	@ 0xc8
 8015d62:	4638      	mov	r0, r7
 8015d64:	b009      	add	sp, #36	@ 0x24
 8015d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d6a:	6827      	ldr	r7, [r4, #0]
 8015d6c:	b32f      	cbz	r7, 8015dba <rcl_subscription_init+0x12e>
 8015d6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8015d72:	b14b      	cbz	r3, 8015d88 <rcl_subscription_init+0xfc>
 8015d74:	4628      	mov	r0, r5
 8015d76:	f7ff fe41 	bl	80159fc <rcl_node_get_rmw_handle>
 8015d7a:	6823      	ldr	r3, [r4, #0]
 8015d7c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8015d80:	f003 fa10 	bl	80191a4 <rmw_destroy_subscription>
 8015d84:	6827      	ldr	r7, [r4, #0]
 8015d86:	b197      	cbz	r7, 8015dae <rcl_subscription_init+0x122>
 8015d88:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8015d8c:	4628      	mov	r0, r5
 8015d8e:	f7fb fc4b 	bl	8011628 <rcutils_allocator_is_valid>
 8015d92:	b158      	cbz	r0, 8015dac <rcl_subscription_init+0x120>
 8015d94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015d96:	b148      	cbz	r0, 8015dac <rcl_subscription_init+0x120>
 8015d98:	4629      	mov	r1, r5
 8015d9a:	f002 f911 	bl	8017fc0 <rmw_subscription_content_filter_options_fini>
 8015d9e:	4605      	mov	r5, r0
 8015da0:	b9b8      	cbnz	r0, 8015dd2 <rcl_subscription_init+0x146>
 8015da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015da4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015da6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015da8:	4798      	blx	r3
 8015daa:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8015dac:	6827      	ldr	r7, [r4, #0]
 8015dae:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015db0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015db2:	4638      	mov	r0, r7
 8015db4:	4798      	blx	r3
 8015db6:	2300      	movs	r3, #0
 8015db8:	6023      	str	r3, [r4, #0]
 8015dba:	2701      	movs	r7, #1
 8015dbc:	e7c8      	b.n	8015d50 <rcl_subscription_init+0xc4>
 8015dbe:	2867      	cmp	r0, #103	@ 0x67
 8015dc0:	d0c6      	beq.n	8015d50 <rcl_subscription_init+0xc4>
 8015dc2:	2869      	cmp	r0, #105	@ 0x69
 8015dc4:	d003      	beq.n	8015dce <rcl_subscription_init+0x142>
 8015dc6:	280a      	cmp	r0, #10
 8015dc8:	d1f7      	bne.n	8015dba <rcl_subscription_init+0x12e>
 8015dca:	270a      	movs	r7, #10
 8015dcc:	e7c0      	b.n	8015d50 <rcl_subscription_init+0xc4>
 8015dce:	2767      	movs	r7, #103	@ 0x67
 8015dd0:	e7be      	b.n	8015d50 <rcl_subscription_init+0xc4>
 8015dd2:	f7ff fa0f 	bl	80151f4 <rcl_convert_rmw_ret_to_rcl_ret>
 8015dd6:	6827      	ldr	r7, [r4, #0]
 8015dd8:	e7e9      	b.n	8015dae <rcl_subscription_init+0x122>
 8015dda:	bf00      	nop

08015ddc <rcl_subscription_get_default_options>:
 8015ddc:	b570      	push	{r4, r5, r6, lr}
 8015dde:	4d14      	ldr	r5, [pc, #80]	@ (8015e30 <rcl_subscription_get_default_options+0x54>)
 8015de0:	4914      	ldr	r1, [pc, #80]	@ (8015e34 <rcl_subscription_get_default_options+0x58>)
 8015de2:	b08a      	sub	sp, #40	@ 0x28
 8015de4:	4604      	mov	r4, r0
 8015de6:	2250      	movs	r2, #80	@ 0x50
 8015de8:	4628      	mov	r0, r5
 8015dea:	f006 faec 	bl	801c3c6 <memcpy>
 8015dee:	a804      	add	r0, sp, #16
 8015df0:	f7fb fc0c 	bl	801160c <rcutils_get_default_allocator>
 8015df4:	f10d 0c10 	add.w	ip, sp, #16
 8015df8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015dfc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8015e00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015e04:	466e      	mov	r6, sp
 8015e06:	f8dc 3000 	ldr.w	r3, [ip]
 8015e0a:	f8ce 3000 	str.w	r3, [lr]
 8015e0e:	4630      	mov	r0, r6
 8015e10:	f002 f8f0 	bl	8017ff4 <rmw_get_default_subscription_options>
 8015e14:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015e18:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8015e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015e20:	2270      	movs	r2, #112	@ 0x70
 8015e22:	4629      	mov	r1, r5
 8015e24:	4620      	mov	r0, r4
 8015e26:	f006 face 	bl	801c3c6 <memcpy>
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	b00a      	add	sp, #40	@ 0x28
 8015e2e:	bd70      	pop	{r4, r5, r6, pc}
 8015e30:	2000e598 	.word	0x2000e598
 8015e34:	0801dc10 	.word	0x0801dc10

08015e38 <rcl_take>:
 8015e38:	2800      	cmp	r0, #0
 8015e3a:	d04a      	beq.n	8015ed2 <rcl_take+0x9a>
 8015e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e40:	4604      	mov	r4, r0
 8015e42:	6800      	ldr	r0, [r0, #0]
 8015e44:	b0a4      	sub	sp, #144	@ 0x90
 8015e46:	2800      	cmp	r0, #0
 8015e48:	d03b      	beq.n	8015ec2 <rcl_take+0x8a>
 8015e4a:	461f      	mov	r7, r3
 8015e4c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d036      	beq.n	8015ec2 <rcl_take+0x8a>
 8015e54:	460e      	mov	r6, r1
 8015e56:	2900      	cmp	r1, #0
 8015e58:	d039      	beq.n	8015ece <rcl_take+0x96>
 8015e5a:	4615      	mov	r5, r2
 8015e5c:	2a00      	cmp	r2, #0
 8015e5e:	d03c      	beq.n	8015eda <rcl_take+0xa2>
 8015e60:	a802      	add	r0, sp, #8
 8015e62:	f002 f951 	bl	8018108 <rmw_get_zero_initialized_message_info>
 8015e66:	f10d 0c08 	add.w	ip, sp, #8
 8015e6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e6e:	46ae      	mov	lr, r5
 8015e70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015e74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e78:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015e7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015e84:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8015e88:	f04f 0800 	mov.w	r8, #0
 8015e8c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8015e90:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8015e94:	6822      	ldr	r2, [r4, #0]
 8015e96:	462b      	mov	r3, r5
 8015e98:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8015e9c:	9700      	str	r7, [sp, #0]
 8015e9e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8015ea2:	4631      	mov	r1, r6
 8015ea4:	f003 f9de 	bl	8019264 <rmw_take_with_info>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	b9c0      	cbnz	r0, 8015ede <rcl_take+0xa6>
 8015eac:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8015eb0:	f240 1291 	movw	r2, #401	@ 0x191
 8015eb4:	2900      	cmp	r1, #0
 8015eb6:	bf08      	it	eq
 8015eb8:	4613      	moveq	r3, r2
 8015eba:	4618      	mov	r0, r3
 8015ebc:	b024      	add	sp, #144	@ 0x90
 8015ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ec2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	b024      	add	sp, #144	@ 0x90
 8015eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ece:	230b      	movs	r3, #11
 8015ed0:	e7f3      	b.n	8015eba <rcl_take+0x82>
 8015ed2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	4770      	bx	lr
 8015eda:	ad14      	add	r5, sp, #80	@ 0x50
 8015edc:	e7c0      	b.n	8015e60 <rcl_take+0x28>
 8015ede:	f7ff f989 	bl	80151f4 <rcl_convert_rmw_ret_to_rcl_ret>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	e7e9      	b.n	8015eba <rcl_take+0x82>
 8015ee6:	bf00      	nop

08015ee8 <rcl_subscription_get_rmw_handle>:
 8015ee8:	b118      	cbz	r0, 8015ef2 <rcl_subscription_get_rmw_handle+0xa>
 8015eea:	6800      	ldr	r0, [r0, #0]
 8015eec:	b108      	cbz	r0, 8015ef2 <rcl_subscription_get_rmw_handle+0xa>
 8015eee:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015ef2:	4770      	bx	lr

08015ef4 <rcl_subscription_is_valid>:
 8015ef4:	b130      	cbz	r0, 8015f04 <rcl_subscription_is_valid+0x10>
 8015ef6:	6800      	ldr	r0, [r0, #0]
 8015ef8:	b120      	cbz	r0, 8015f04 <rcl_subscription_is_valid+0x10>
 8015efa:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015efe:	3800      	subs	r0, #0
 8015f00:	bf18      	it	ne
 8015f02:	2001      	movne	r0, #1
 8015f04:	4770      	bx	lr
 8015f06:	bf00      	nop

08015f08 <rcl_get_system_time>:
 8015f08:	4608      	mov	r0, r1
 8015f0a:	f7fb bbcd 	b.w	80116a8 <rcutils_system_time_now>
 8015f0e:	bf00      	nop

08015f10 <rcl_get_steady_time>:
 8015f10:	4608      	mov	r0, r1
 8015f12:	f7fb bbf1 	b.w	80116f8 <rcutils_steady_time_now>
 8015f16:	bf00      	nop

08015f18 <rcl_get_ros_time>:
 8015f18:	7a03      	ldrb	r3, [r0, #8]
 8015f1a:	b510      	push	{r4, lr}
 8015f1c:	460c      	mov	r4, r1
 8015f1e:	b133      	cbz	r3, 8015f2e <rcl_get_ros_time+0x16>
 8015f20:	2105      	movs	r1, #5
 8015f22:	f001 fce9 	bl	80178f8 <__atomic_load_8>
 8015f26:	e9c4 0100 	strd	r0, r1, [r4]
 8015f2a:	2000      	movs	r0, #0
 8015f2c:	bd10      	pop	{r4, pc}
 8015f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f32:	4608      	mov	r0, r1
 8015f34:	f7fb bbb8 	b.w	80116a8 <rcutils_system_time_now>

08015f38 <rcl_clock_init>:
 8015f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f3a:	4605      	mov	r5, r0
 8015f3c:	4610      	mov	r0, r2
 8015f3e:	4614      	mov	r4, r2
 8015f40:	460e      	mov	r6, r1
 8015f42:	f7fb fb71 	bl	8011628 <rcutils_allocator_is_valid>
 8015f46:	b128      	cbz	r0, 8015f54 <rcl_clock_init+0x1c>
 8015f48:	2d03      	cmp	r5, #3
 8015f4a:	d803      	bhi.n	8015f54 <rcl_clock_init+0x1c>
 8015f4c:	e8df f005 	tbb	[pc, r5]
 8015f50:	06532e1d 	.word	0x06532e1d
 8015f54:	f04f 0c0b 	mov.w	ip, #11
 8015f58:	4660      	mov	r0, ip
 8015f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f5c:	2e00      	cmp	r6, #0
 8015f5e:	d0f9      	beq.n	8015f54 <rcl_clock_init+0x1c>
 8015f60:	2c00      	cmp	r4, #0
 8015f62:	d0f7      	beq.n	8015f54 <rcl_clock_init+0x1c>
 8015f64:	2300      	movs	r3, #0
 8015f66:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015f6a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8016020 <rcl_clock_init+0xe8>
 8015f6e:	6133      	str	r3, [r6, #16]
 8015f70:	f106 0514 	add.w	r5, r6, #20
 8015f74:	469c      	mov	ip, r3
 8015f76:	2703      	movs	r7, #3
 8015f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015f7c:	6823      	ldr	r3, [r4, #0]
 8015f7e:	602b      	str	r3, [r5, #0]
 8015f80:	7037      	strb	r7, [r6, #0]
 8015f82:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015f86:	4660      	mov	r0, ip
 8015f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f8a:	2e00      	cmp	r6, #0
 8015f8c:	d0e2      	beq.n	8015f54 <rcl_clock_init+0x1c>
 8015f8e:	2300      	movs	r3, #0
 8015f90:	7033      	strb	r3, [r6, #0]
 8015f92:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015f96:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015f9a:	469c      	mov	ip, r3
 8015f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f9e:	f106 0514 	add.w	r5, r6, #20
 8015fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015fa4:	6823      	ldr	r3, [r4, #0]
 8015fa6:	602b      	str	r3, [r5, #0]
 8015fa8:	4660      	mov	r0, ip
 8015faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fac:	2e00      	cmp	r6, #0
 8015fae:	d0d1      	beq.n	8015f54 <rcl_clock_init+0x1c>
 8015fb0:	2c00      	cmp	r4, #0
 8015fb2:	d0cf      	beq.n	8015f54 <rcl_clock_init+0x1c>
 8015fb4:	2700      	movs	r7, #0
 8015fb6:	7037      	strb	r7, [r6, #0]
 8015fb8:	46a4      	mov	ip, r4
 8015fba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015fbe:	f106 0514 	add.w	r5, r6, #20
 8015fc2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8015fc6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015fca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015fcc:	f8dc 3000 	ldr.w	r3, [ip]
 8015fd0:	602b      	str	r3, [r5, #0]
 8015fd2:	6921      	ldr	r1, [r4, #16]
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	2010      	movs	r0, #16
 8015fd8:	4798      	blx	r3
 8015fda:	6130      	str	r0, [r6, #16]
 8015fdc:	b1d0      	cbz	r0, 8016014 <rcl_clock_init+0xdc>
 8015fde:	2200      	movs	r2, #0
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	e9c0 2300 	strd	r2, r3, [r0]
 8015fe6:	2301      	movs	r3, #1
 8015fe8:	7207      	strb	r7, [r0, #8]
 8015fea:	4a0c      	ldr	r2, [pc, #48]	@ (801601c <rcl_clock_init+0xe4>)
 8015fec:	7033      	strb	r3, [r6, #0]
 8015fee:	46bc      	mov	ip, r7
 8015ff0:	60f2      	str	r2, [r6, #12]
 8015ff2:	4660      	mov	r0, ip
 8015ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ff6:	2e00      	cmp	r6, #0
 8015ff8:	d0ac      	beq.n	8015f54 <rcl_clock_init+0x1c>
 8015ffa:	2c00      	cmp	r4, #0
 8015ffc:	d0aa      	beq.n	8015f54 <rcl_clock_init+0x1c>
 8015ffe:	2300      	movs	r3, #0
 8016000:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016004:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8016024 <rcl_clock_init+0xec>
 8016008:	6133      	str	r3, [r6, #16]
 801600a:	f106 0514 	add.w	r5, r6, #20
 801600e:	469c      	mov	ip, r3
 8016010:	2702      	movs	r7, #2
 8016012:	e7b1      	b.n	8015f78 <rcl_clock_init+0x40>
 8016014:	f04f 0c0a 	mov.w	ip, #10
 8016018:	e79e      	b.n	8015f58 <rcl_clock_init+0x20>
 801601a:	bf00      	nop
 801601c:	08015f19 	.word	0x08015f19
 8016020:	08015f11 	.word	0x08015f11
 8016024:	08015f09 	.word	0x08015f09

08016028 <rcl_clock_get_now>:
 8016028:	b140      	cbz	r0, 801603c <rcl_clock_get_now+0x14>
 801602a:	b139      	cbz	r1, 801603c <rcl_clock_get_now+0x14>
 801602c:	7803      	ldrb	r3, [r0, #0]
 801602e:	b11b      	cbz	r3, 8016038 <rcl_clock_get_now+0x10>
 8016030:	68c3      	ldr	r3, [r0, #12]
 8016032:	b10b      	cbz	r3, 8016038 <rcl_clock_get_now+0x10>
 8016034:	6900      	ldr	r0, [r0, #16]
 8016036:	4718      	bx	r3
 8016038:	2001      	movs	r0, #1
 801603a:	4770      	bx	lr
 801603c:	200b      	movs	r0, #11
 801603e:	4770      	bx	lr

08016040 <rcl_timer_call>:
 8016040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016044:	b087      	sub	sp, #28
 8016046:	2800      	cmp	r0, #0
 8016048:	d06d      	beq.n	8016126 <rcl_timer_call+0xe6>
 801604a:	6803      	ldr	r3, [r0, #0]
 801604c:	4604      	mov	r4, r0
 801604e:	2b00      	cmp	r3, #0
 8016050:	d063      	beq.n	801611a <rcl_timer_call+0xda>
 8016052:	f3bf 8f5b 	dmb	ish
 8016056:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801605a:	f3bf 8f5b 	dmb	ish
 801605e:	2b00      	cmp	r3, #0
 8016060:	d150      	bne.n	8016104 <rcl_timer_call+0xc4>
 8016062:	6803      	ldr	r3, [r0, #0]
 8016064:	a904      	add	r1, sp, #16
 8016066:	6818      	ldr	r0, [r3, #0]
 8016068:	f7ff ffde 	bl	8016028 <rcl_clock_get_now>
 801606c:	4605      	mov	r5, r0
 801606e:	2800      	cmp	r0, #0
 8016070:	d14a      	bne.n	8016108 <rcl_timer_call+0xc8>
 8016072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016076:	2b00      	cmp	r3, #0
 8016078:	db4a      	blt.n	8016110 <rcl_timer_call+0xd0>
 801607a:	6820      	ldr	r0, [r4, #0]
 801607c:	f04f 0a05 	mov.w	sl, #5
 8016080:	f8cd a000 	str.w	sl, [sp]
 8016084:	3020      	adds	r0, #32
 8016086:	f001 fca3 	bl	80179d0 <__atomic_exchange_8>
 801608a:	6823      	ldr	r3, [r4, #0]
 801608c:	f3bf 8f5b 	dmb	ish
 8016090:	4680      	mov	r8, r0
 8016092:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8016096:	f3bf 8f5b 	dmb	ish
 801609a:	6820      	ldr	r0, [r4, #0]
 801609c:	4689      	mov	r9, r1
 801609e:	3028      	adds	r0, #40	@ 0x28
 80160a0:	4651      	mov	r1, sl
 80160a2:	f001 fc29 	bl	80178f8 <__atomic_load_8>
 80160a6:	4606      	mov	r6, r0
 80160a8:	6820      	ldr	r0, [r4, #0]
 80160aa:	460f      	mov	r7, r1
 80160ac:	3018      	adds	r0, #24
 80160ae:	4651      	mov	r1, sl
 80160b0:	f001 fc22 	bl	80178f8 <__atomic_load_8>
 80160b4:	1836      	adds	r6, r6, r0
 80160b6:	4602      	mov	r2, r0
 80160b8:	4682      	mov	sl, r0
 80160ba:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80160be:	eb47 0701 	adc.w	r7, r7, r1
 80160c2:	4286      	cmp	r6, r0
 80160c4:	460b      	mov	r3, r1
 80160c6:	eb77 010c 	sbcs.w	r1, r7, ip
 80160ca:	da04      	bge.n	80160d6 <rcl_timer_call+0x96>
 80160cc:	ea53 0102 	orrs.w	r1, r3, r2
 80160d0:	d12e      	bne.n	8016130 <rcl_timer_call+0xf0>
 80160d2:	4606      	mov	r6, r0
 80160d4:	4667      	mov	r7, ip
 80160d6:	6820      	ldr	r0, [r4, #0]
 80160d8:	2105      	movs	r1, #5
 80160da:	4632      	mov	r2, r6
 80160dc:	463b      	mov	r3, r7
 80160de:	3028      	adds	r0, #40	@ 0x28
 80160e0:	9100      	str	r1, [sp, #0]
 80160e2:	f001 fc3f 	bl	8017964 <__atomic_store_8>
 80160e6:	f1bb 0f00 	cmp.w	fp, #0
 80160ea:	d00d      	beq.n	8016108 <rcl_timer_call+0xc8>
 80160ec:	9a04      	ldr	r2, [sp, #16]
 80160ee:	9b05      	ldr	r3, [sp, #20]
 80160f0:	ebb2 0208 	subs.w	r2, r2, r8
 80160f4:	4620      	mov	r0, r4
 80160f6:	eb63 0309 	sbc.w	r3, r3, r9
 80160fa:	47d8      	blx	fp
 80160fc:	4628      	mov	r0, r5
 80160fe:	b007      	add	sp, #28
 8016100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016104:	f240 3521 	movw	r5, #801	@ 0x321
 8016108:	4628      	mov	r0, r5
 801610a:	b007      	add	sp, #28
 801610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016110:	2501      	movs	r5, #1
 8016112:	4628      	mov	r0, r5
 8016114:	b007      	add	sp, #28
 8016116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801611a:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801611e:	4628      	mov	r0, r5
 8016120:	b007      	add	sp, #28
 8016122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016126:	250b      	movs	r5, #11
 8016128:	4628      	mov	r0, r5
 801612a:	b007      	add	sp, #28
 801612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016130:	1b80      	subs	r0, r0, r6
 8016132:	eb6c 0107 	sbc.w	r1, ip, r7
 8016136:	3801      	subs	r0, #1
 8016138:	f161 0100 	sbc.w	r1, r1, #0
 801613c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016140:	f7ea f8fe 	bl	8000340 <__aeabi_ldivmod>
 8016144:	9b02      	ldr	r3, [sp, #8]
 8016146:	3001      	adds	r0, #1
 8016148:	f141 0100 	adc.w	r1, r1, #0
 801614c:	fb00 f303 	mul.w	r3, r0, r3
 8016150:	fb01 330a 	mla	r3, r1, sl, r3
 8016154:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016158:	1986      	adds	r6, r0, r6
 801615a:	4453      	add	r3, sl
 801615c:	eb43 0707 	adc.w	r7, r3, r7
 8016160:	e7b9      	b.n	80160d6 <rcl_timer_call+0x96>
 8016162:	bf00      	nop

08016164 <rcl_timer_is_ready>:
 8016164:	b570      	push	{r4, r5, r6, lr}
 8016166:	b082      	sub	sp, #8
 8016168:	b378      	cbz	r0, 80161ca <rcl_timer_is_ready+0x66>
 801616a:	6803      	ldr	r3, [r0, #0]
 801616c:	4604      	mov	r4, r0
 801616e:	b383      	cbz	r3, 80161d2 <rcl_timer_is_ready+0x6e>
 8016170:	460d      	mov	r5, r1
 8016172:	b351      	cbz	r1, 80161ca <rcl_timer_is_ready+0x66>
 8016174:	f3bf 8f5b 	dmb	ish
 8016178:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801617c:	f3bf 8f5b 	dmb	ish
 8016180:	b953      	cbnz	r3, 8016198 <rcl_timer_is_ready+0x34>
 8016182:	6803      	ldr	r3, [r0, #0]
 8016184:	4669      	mov	r1, sp
 8016186:	6818      	ldr	r0, [r3, #0]
 8016188:	f7ff ff4e 	bl	8016028 <rcl_clock_get_now>
 801618c:	4606      	mov	r6, r0
 801618e:	b140      	cbz	r0, 80161a2 <rcl_timer_is_ready+0x3e>
 8016190:	f240 3321 	movw	r3, #801	@ 0x321
 8016194:	4298      	cmp	r0, r3
 8016196:	d101      	bne.n	801619c <rcl_timer_is_ready+0x38>
 8016198:	2600      	movs	r6, #0
 801619a:	702e      	strb	r6, [r5, #0]
 801619c:	4630      	mov	r0, r6
 801619e:	b002      	add	sp, #8
 80161a0:	bd70      	pop	{r4, r5, r6, pc}
 80161a2:	6820      	ldr	r0, [r4, #0]
 80161a4:	2105      	movs	r1, #5
 80161a6:	3028      	adds	r0, #40	@ 0x28
 80161a8:	f001 fba6 	bl	80178f8 <__atomic_load_8>
 80161ac:	9b00      	ldr	r3, [sp, #0]
 80161ae:	1ac0      	subs	r0, r0, r3
 80161b0:	9b01      	ldr	r3, [sp, #4]
 80161b2:	eb61 0103 	sbc.w	r1, r1, r3
 80161b6:	2801      	cmp	r0, #1
 80161b8:	f171 0300 	sbcs.w	r3, r1, #0
 80161bc:	bfb4      	ite	lt
 80161be:	2301      	movlt	r3, #1
 80161c0:	2300      	movge	r3, #0
 80161c2:	4630      	mov	r0, r6
 80161c4:	702b      	strb	r3, [r5, #0]
 80161c6:	b002      	add	sp, #8
 80161c8:	bd70      	pop	{r4, r5, r6, pc}
 80161ca:	260b      	movs	r6, #11
 80161cc:	4630      	mov	r0, r6
 80161ce:	b002      	add	sp, #8
 80161d0:	bd70      	pop	{r4, r5, r6, pc}
 80161d2:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80161d6:	e7e1      	b.n	801619c <rcl_timer_is_ready+0x38>

080161d8 <rcl_timer_get_time_until_next_call>:
 80161d8:	b570      	push	{r4, r5, r6, lr}
 80161da:	b082      	sub	sp, #8
 80161dc:	b330      	cbz	r0, 801622c <rcl_timer_get_time_until_next_call+0x54>
 80161de:	6803      	ldr	r3, [r0, #0]
 80161e0:	4604      	mov	r4, r0
 80161e2:	b33b      	cbz	r3, 8016234 <rcl_timer_get_time_until_next_call+0x5c>
 80161e4:	460d      	mov	r5, r1
 80161e6:	b309      	cbz	r1, 801622c <rcl_timer_get_time_until_next_call+0x54>
 80161e8:	f3bf 8f5b 	dmb	ish
 80161ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80161f0:	f3bf 8f5b 	dmb	ish
 80161f4:	b9ab      	cbnz	r3, 8016222 <rcl_timer_get_time_until_next_call+0x4a>
 80161f6:	6803      	ldr	r3, [r0, #0]
 80161f8:	4669      	mov	r1, sp
 80161fa:	6818      	ldr	r0, [r3, #0]
 80161fc:	f7ff ff14 	bl	8016028 <rcl_clock_get_now>
 8016200:	4606      	mov	r6, r0
 8016202:	b958      	cbnz	r0, 801621c <rcl_timer_get_time_until_next_call+0x44>
 8016204:	6820      	ldr	r0, [r4, #0]
 8016206:	2105      	movs	r1, #5
 8016208:	3028      	adds	r0, #40	@ 0x28
 801620a:	f001 fb75 	bl	80178f8 <__atomic_load_8>
 801620e:	9b00      	ldr	r3, [sp, #0]
 8016210:	1ac0      	subs	r0, r0, r3
 8016212:	9b01      	ldr	r3, [sp, #4]
 8016214:	6028      	str	r0, [r5, #0]
 8016216:	eb61 0103 	sbc.w	r1, r1, r3
 801621a:	6069      	str	r1, [r5, #4]
 801621c:	4630      	mov	r0, r6
 801621e:	b002      	add	sp, #8
 8016220:	bd70      	pop	{r4, r5, r6, pc}
 8016222:	f240 3621 	movw	r6, #801	@ 0x321
 8016226:	4630      	mov	r0, r6
 8016228:	b002      	add	sp, #8
 801622a:	bd70      	pop	{r4, r5, r6, pc}
 801622c:	260b      	movs	r6, #11
 801622e:	4630      	mov	r0, r6
 8016230:	b002      	add	sp, #8
 8016232:	bd70      	pop	{r4, r5, r6, pc}
 8016234:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016238:	e7f0      	b.n	801621c <rcl_timer_get_time_until_next_call+0x44>
 801623a:	bf00      	nop

0801623c <rcl_timer_get_guard_condition>:
 801623c:	b130      	cbz	r0, 801624c <rcl_timer_get_guard_condition+0x10>
 801623e:	6800      	ldr	r0, [r0, #0]
 8016240:	b120      	cbz	r0, 801624c <rcl_timer_get_guard_condition+0x10>
 8016242:	68c3      	ldr	r3, [r0, #12]
 8016244:	b10b      	cbz	r3, 801624a <rcl_timer_get_guard_condition+0xe>
 8016246:	3008      	adds	r0, #8
 8016248:	4770      	bx	lr
 801624a:	4618      	mov	r0, r3
 801624c:	4770      	bx	lr
 801624e:	bf00      	nop

08016250 <rcl_get_zero_initialized_wait_set>:
 8016250:	b510      	push	{r4, lr}
 8016252:	4c08      	ldr	r4, [pc, #32]	@ (8016274 <rcl_get_zero_initialized_wait_set+0x24>)
 8016254:	4686      	mov	lr, r0
 8016256:	4684      	mov	ip, r0
 8016258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801625a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801625e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016260:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016266:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801626a:	6823      	ldr	r3, [r4, #0]
 801626c:	f8cc 3000 	str.w	r3, [ip]
 8016270:	4670      	mov	r0, lr
 8016272:	bd10      	pop	{r4, pc}
 8016274:	0801dc60 	.word	0x0801dc60

08016278 <rcl_wait_set_is_valid>:
 8016278:	b118      	cbz	r0, 8016282 <rcl_wait_set_is_valid+0xa>
 801627a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801627c:	3800      	subs	r0, #0
 801627e:	bf18      	it	ne
 8016280:	2001      	movne	r0, #1
 8016282:	4770      	bx	lr

08016284 <rcl_wait_set_fini>:
 8016284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016288:	b082      	sub	sp, #8
 801628a:	2800      	cmp	r0, #0
 801628c:	f000 8095 	beq.w	80163ba <rcl_wait_set_fini+0x136>
 8016290:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016292:	4604      	mov	r4, r0
 8016294:	2e00      	cmp	r6, #0
 8016296:	f000 808c 	beq.w	80163b2 <rcl_wait_set_fini+0x12e>
 801629a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801629c:	f003 f9d0 	bl	8019640 <rmw_destroy_wait_set>
 80162a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80162a2:	1e06      	subs	r6, r0, #0
 80162a4:	bf18      	it	ne
 80162a6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80162aa:	2d00      	cmp	r5, #0
 80162ac:	f000 8081 	beq.w	80163b2 <rcl_wait_set_fini+0x12e>
 80162b0:	6820      	ldr	r0, [r4, #0]
 80162b2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80162b6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80162b8:	2700      	movs	r7, #0
 80162ba:	6067      	str	r7, [r4, #4]
 80162bc:	602f      	str	r7, [r5, #0]
 80162be:	b120      	cbz	r0, 80162ca <rcl_wait_set_fini+0x46>
 80162c0:	9101      	str	r1, [sp, #4]
 80162c2:	47c0      	blx	r8
 80162c4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80162c6:	9901      	ldr	r1, [sp, #4]
 80162c8:	6027      	str	r7, [r4, #0]
 80162ca:	68a8      	ldr	r0, [r5, #8]
 80162cc:	b120      	cbz	r0, 80162d8 <rcl_wait_set_fini+0x54>
 80162ce:	47c0      	blx	r8
 80162d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80162d2:	2300      	movs	r3, #0
 80162d4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80162d8:	68a0      	ldr	r0, [r4, #8]
 80162da:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80162dc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80162de:	f04f 0800 	mov.w	r8, #0
 80162e2:	f8c4 800c 	str.w	r8, [r4, #12]
 80162e6:	f8c5 800c 	str.w	r8, [r5, #12]
 80162ea:	b128      	cbz	r0, 80162f8 <rcl_wait_set_fini+0x74>
 80162ec:	47b8      	blx	r7
 80162ee:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80162f0:	f8c4 8008 	str.w	r8, [r4, #8]
 80162f4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80162f6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80162f8:	6968      	ldr	r0, [r5, #20]
 80162fa:	f04f 0800 	mov.w	r8, #0
 80162fe:	f8c5 8010 	str.w	r8, [r5, #16]
 8016302:	b128      	cbz	r0, 8016310 <rcl_wait_set_fini+0x8c>
 8016304:	47b8      	blx	r7
 8016306:	f8c5 8014 	str.w	r8, [r5, #20]
 801630a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801630c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801630e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016310:	6920      	ldr	r0, [r4, #16]
 8016312:	f04f 0800 	mov.w	r8, #0
 8016316:	f8c4 8014 	str.w	r8, [r4, #20]
 801631a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801631e:	b128      	cbz	r0, 801632c <rcl_wait_set_fini+0xa8>
 8016320:	47b8      	blx	r7
 8016322:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016324:	f8c4 8010 	str.w	r8, [r4, #16]
 8016328:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801632a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801632c:	69a0      	ldr	r0, [r4, #24]
 801632e:	f04f 0800 	mov.w	r8, #0
 8016332:	f8c4 801c 	str.w	r8, [r4, #28]
 8016336:	f8c5 8018 	str.w	r8, [r5, #24]
 801633a:	b128      	cbz	r0, 8016348 <rcl_wait_set_fini+0xc4>
 801633c:	9101      	str	r1, [sp, #4]
 801633e:	47b8      	blx	r7
 8016340:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016342:	9901      	ldr	r1, [sp, #4]
 8016344:	f8c4 8018 	str.w	r8, [r4, #24]
 8016348:	6a28      	ldr	r0, [r5, #32]
 801634a:	b120      	cbz	r0, 8016356 <rcl_wait_set_fini+0xd2>
 801634c:	47b8      	blx	r7
 801634e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016350:	2300      	movs	r3, #0
 8016352:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016356:	6a20      	ldr	r0, [r4, #32]
 8016358:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801635c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801635e:	2700      	movs	r7, #0
 8016360:	6267      	str	r7, [r4, #36]	@ 0x24
 8016362:	626f      	str	r7, [r5, #36]	@ 0x24
 8016364:	b120      	cbz	r0, 8016370 <rcl_wait_set_fini+0xec>
 8016366:	9101      	str	r1, [sp, #4]
 8016368:	47c0      	blx	r8
 801636a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801636c:	9901      	ldr	r1, [sp, #4]
 801636e:	6227      	str	r7, [r4, #32]
 8016370:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016372:	b120      	cbz	r0, 801637e <rcl_wait_set_fini+0xfa>
 8016374:	47c0      	blx	r8
 8016376:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016378:	2300      	movs	r3, #0
 801637a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801637e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016380:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016384:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016386:	2700      	movs	r7, #0
 8016388:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801638a:	632f      	str	r7, [r5, #48]	@ 0x30
 801638c:	b120      	cbz	r0, 8016398 <rcl_wait_set_fini+0x114>
 801638e:	9101      	str	r1, [sp, #4]
 8016390:	47c0      	blx	r8
 8016392:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016394:	9901      	ldr	r1, [sp, #4]
 8016396:	62a7      	str	r7, [r4, #40]	@ 0x28
 8016398:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801639a:	b120      	cbz	r0, 80163a6 <rcl_wait_set_fini+0x122>
 801639c:	47c0      	blx	r8
 801639e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80163a0:	2300      	movs	r3, #0
 80163a2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80163a6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80163a8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80163aa:	4628      	mov	r0, r5
 80163ac:	4798      	blx	r3
 80163ae:	2300      	movs	r3, #0
 80163b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80163b2:	4630      	mov	r0, r6
 80163b4:	b002      	add	sp, #8
 80163b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163ba:	260b      	movs	r6, #11
 80163bc:	4630      	mov	r0, r6
 80163be:	b002      	add	sp, #8
 80163c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080163c4 <rcl_wait_set_add_subscription>:
 80163c4:	b318      	cbz	r0, 801640e <rcl_wait_set_add_subscription+0x4a>
 80163c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80163c8:	b570      	push	{r4, r5, r6, lr}
 80163ca:	4604      	mov	r4, r0
 80163cc:	b30b      	cbz	r3, 8016412 <rcl_wait_set_add_subscription+0x4e>
 80163ce:	b319      	cbz	r1, 8016418 <rcl_wait_set_add_subscription+0x54>
 80163d0:	681d      	ldr	r5, [r3, #0]
 80163d2:	6840      	ldr	r0, [r0, #4]
 80163d4:	4285      	cmp	r5, r0
 80163d6:	d217      	bcs.n	8016408 <rcl_wait_set_add_subscription+0x44>
 80163d8:	6820      	ldr	r0, [r4, #0]
 80163da:	1c6e      	adds	r6, r5, #1
 80163dc:	601e      	str	r6, [r3, #0]
 80163de:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80163e2:	b102      	cbz	r2, 80163e6 <rcl_wait_set_add_subscription+0x22>
 80163e4:	6015      	str	r5, [r2, #0]
 80163e6:	4608      	mov	r0, r1
 80163e8:	f7ff fd7e 	bl	8015ee8 <rcl_subscription_get_rmw_handle>
 80163ec:	b150      	cbz	r0, 8016404 <rcl_wait_set_add_subscription+0x40>
 80163ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163f0:	6842      	ldr	r2, [r0, #4]
 80163f2:	689b      	ldr	r3, [r3, #8]
 80163f4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80163f8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80163fa:	6853      	ldr	r3, [r2, #4]
 80163fc:	3301      	adds	r3, #1
 80163fe:	2000      	movs	r0, #0
 8016400:	6053      	str	r3, [r2, #4]
 8016402:	bd70      	pop	{r4, r5, r6, pc}
 8016404:	2001      	movs	r0, #1
 8016406:	bd70      	pop	{r4, r5, r6, pc}
 8016408:	f240 3086 	movw	r0, #902	@ 0x386
 801640c:	bd70      	pop	{r4, r5, r6, pc}
 801640e:	200b      	movs	r0, #11
 8016410:	4770      	bx	lr
 8016412:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016416:	bd70      	pop	{r4, r5, r6, pc}
 8016418:	200b      	movs	r0, #11
 801641a:	bd70      	pop	{r4, r5, r6, pc}

0801641c <rcl_wait_set_clear>:
 801641c:	2800      	cmp	r0, #0
 801641e:	d073      	beq.n	8016508 <rcl_wait_set_clear+0xec>
 8016420:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016422:	b510      	push	{r4, lr}
 8016424:	4604      	mov	r4, r0
 8016426:	2b00      	cmp	r3, #0
 8016428:	d070      	beq.n	801650c <rcl_wait_set_clear+0xf0>
 801642a:	6800      	ldr	r0, [r0, #0]
 801642c:	b138      	cbz	r0, 801643e <rcl_wait_set_clear+0x22>
 801642e:	6862      	ldr	r2, [r4, #4]
 8016430:	2100      	movs	r1, #0
 8016432:	0092      	lsls	r2, r2, #2
 8016434:	f005 fefe 	bl	801c234 <memset>
 8016438:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801643a:	2200      	movs	r2, #0
 801643c:	601a      	str	r2, [r3, #0]
 801643e:	68a0      	ldr	r0, [r4, #8]
 8016440:	b138      	cbz	r0, 8016452 <rcl_wait_set_clear+0x36>
 8016442:	68e2      	ldr	r2, [r4, #12]
 8016444:	2100      	movs	r1, #0
 8016446:	0092      	lsls	r2, r2, #2
 8016448:	f005 fef4 	bl	801c234 <memset>
 801644c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801644e:	2200      	movs	r2, #0
 8016450:	60da      	str	r2, [r3, #12]
 8016452:	69a0      	ldr	r0, [r4, #24]
 8016454:	b138      	cbz	r0, 8016466 <rcl_wait_set_clear+0x4a>
 8016456:	69e2      	ldr	r2, [r4, #28]
 8016458:	2100      	movs	r1, #0
 801645a:	0092      	lsls	r2, r2, #2
 801645c:	f005 feea 	bl	801c234 <memset>
 8016460:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016462:	2200      	movs	r2, #0
 8016464:	619a      	str	r2, [r3, #24]
 8016466:	6a20      	ldr	r0, [r4, #32]
 8016468:	b138      	cbz	r0, 801647a <rcl_wait_set_clear+0x5e>
 801646a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801646c:	2100      	movs	r1, #0
 801646e:	0092      	lsls	r2, r2, #2
 8016470:	f005 fee0 	bl	801c234 <memset>
 8016474:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016476:	2200      	movs	r2, #0
 8016478:	625a      	str	r2, [r3, #36]	@ 0x24
 801647a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801647c:	b138      	cbz	r0, 801648e <rcl_wait_set_clear+0x72>
 801647e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016480:	2100      	movs	r1, #0
 8016482:	0092      	lsls	r2, r2, #2
 8016484:	f005 fed6 	bl	801c234 <memset>
 8016488:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801648a:	2200      	movs	r2, #0
 801648c:	631a      	str	r2, [r3, #48]	@ 0x30
 801648e:	6920      	ldr	r0, [r4, #16]
 8016490:	b138      	cbz	r0, 80164a2 <rcl_wait_set_clear+0x86>
 8016492:	6962      	ldr	r2, [r4, #20]
 8016494:	2100      	movs	r1, #0
 8016496:	0092      	lsls	r2, r2, #2
 8016498:	f005 fecc 	bl	801c234 <memset>
 801649c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801649e:	2200      	movs	r2, #0
 80164a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80164a2:	6898      	ldr	r0, [r3, #8]
 80164a4:	b138      	cbz	r0, 80164b6 <rcl_wait_set_clear+0x9a>
 80164a6:	685a      	ldr	r2, [r3, #4]
 80164a8:	2100      	movs	r1, #0
 80164aa:	0092      	lsls	r2, r2, #2
 80164ac:	f005 fec2 	bl	801c234 <memset>
 80164b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164b2:	2200      	movs	r2, #0
 80164b4:	605a      	str	r2, [r3, #4]
 80164b6:	6958      	ldr	r0, [r3, #20]
 80164b8:	b138      	cbz	r0, 80164ca <rcl_wait_set_clear+0xae>
 80164ba:	691a      	ldr	r2, [r3, #16]
 80164bc:	2100      	movs	r1, #0
 80164be:	0092      	lsls	r2, r2, #2
 80164c0:	f005 feb8 	bl	801c234 <memset>
 80164c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164c6:	2200      	movs	r2, #0
 80164c8:	611a      	str	r2, [r3, #16]
 80164ca:	6a18      	ldr	r0, [r3, #32]
 80164cc:	b138      	cbz	r0, 80164de <rcl_wait_set_clear+0xc2>
 80164ce:	69da      	ldr	r2, [r3, #28]
 80164d0:	2100      	movs	r1, #0
 80164d2:	0092      	lsls	r2, r2, #2
 80164d4:	f005 feae 	bl	801c234 <memset>
 80164d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164da:	2200      	movs	r2, #0
 80164dc:	61da      	str	r2, [r3, #28]
 80164de:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80164e0:	b138      	cbz	r0, 80164f2 <rcl_wait_set_clear+0xd6>
 80164e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80164e4:	2100      	movs	r1, #0
 80164e6:	0092      	lsls	r2, r2, #2
 80164e8:	f005 fea4 	bl	801c234 <memset>
 80164ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164ee:	2200      	movs	r2, #0
 80164f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80164f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80164f4:	b138      	cbz	r0, 8016506 <rcl_wait_set_clear+0xea>
 80164f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80164f8:	2100      	movs	r1, #0
 80164fa:	0092      	lsls	r2, r2, #2
 80164fc:	f005 fe9a 	bl	801c234 <memset>
 8016500:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016502:	2000      	movs	r0, #0
 8016504:	6358      	str	r0, [r3, #52]	@ 0x34
 8016506:	bd10      	pop	{r4, pc}
 8016508:	200b      	movs	r0, #11
 801650a:	4770      	bx	lr
 801650c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016510:	bd10      	pop	{r4, pc}
 8016512:	bf00      	nop

08016514 <rcl_wait_set_resize>:
 8016514:	2800      	cmp	r0, #0
 8016516:	f000 8185 	beq.w	8016824 <rcl_wait_set_resize+0x310>
 801651a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801651e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8016520:	b083      	sub	sp, #12
 8016522:	4605      	mov	r5, r0
 8016524:	2c00      	cmp	r4, #0
 8016526:	f000 817f 	beq.w	8016828 <rcl_wait_set_resize+0x314>
 801652a:	f04f 0900 	mov.w	r9, #0
 801652e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8016532:	461f      	mov	r7, r3
 8016534:	4688      	mov	r8, r1
 8016536:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801653a:	4616      	mov	r6, r2
 801653c:	f8c0 9004 	str.w	r9, [r0, #4]
 8016540:	f8c4 9000 	str.w	r9, [r4]
 8016544:	2900      	cmp	r1, #0
 8016546:	f000 80bd 	beq.w	80166c4 <rcl_wait_set_resize+0x1b0>
 801654a:	008c      	lsls	r4, r1, #2
 801654c:	6800      	ldr	r0, [r0, #0]
 801654e:	9301      	str	r3, [sp, #4]
 8016550:	4652      	mov	r2, sl
 8016552:	4621      	mov	r1, r4
 8016554:	4798      	blx	r3
 8016556:	9b01      	ldr	r3, [sp, #4]
 8016558:	6028      	str	r0, [r5, #0]
 801655a:	2800      	cmp	r0, #0
 801655c:	f000 80cb 	beq.w	80166f6 <rcl_wait_set_resize+0x1e2>
 8016560:	4622      	mov	r2, r4
 8016562:	4649      	mov	r1, r9
 8016564:	9301      	str	r3, [sp, #4]
 8016566:	f005 fe65 	bl	801c234 <memset>
 801656a:	f8c5 8004 	str.w	r8, [r5, #4]
 801656e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8016572:	9b01      	ldr	r3, [sp, #4]
 8016574:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016578:	f8c8 9004 	str.w	r9, [r8, #4]
 801657c:	4652      	mov	r2, sl
 801657e:	4621      	mov	r1, r4
 8016580:	4798      	blx	r3
 8016582:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016584:	f8c8 0008 	str.w	r0, [r8, #8]
 8016588:	689b      	ldr	r3, [r3, #8]
 801658a:	2b00      	cmp	r3, #0
 801658c:	f000 80ac 	beq.w	80166e8 <rcl_wait_set_resize+0x1d4>
 8016590:	4622      	mov	r2, r4
 8016592:	4649      	mov	r1, r9
 8016594:	4618      	mov	r0, r3
 8016596:	f005 fe4d 	bl	801c234 <memset>
 801659a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801659c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80165a0:	f04f 0800 	mov.w	r8, #0
 80165a4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80165a8:	f8c5 800c 	str.w	r8, [r5, #12]
 80165ac:	f8c4 800c 	str.w	r8, [r4, #12]
 80165b0:	2e00      	cmp	r6, #0
 80165b2:	f040 80a4 	bne.w	80166fe <rcl_wait_set_resize+0x1ea>
 80165b6:	68a8      	ldr	r0, [r5, #8]
 80165b8:	b128      	cbz	r0, 80165c6 <rcl_wait_set_resize+0xb2>
 80165ba:	4649      	mov	r1, r9
 80165bc:	4790      	blx	r2
 80165be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80165c0:	60ae      	str	r6, [r5, #8]
 80165c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80165c6:	f04f 0800 	mov.w	r8, #0
 80165ca:	19f6      	adds	r6, r6, r7
 80165cc:	f8c4 8010 	str.w	r8, [r4, #16]
 80165d0:	f040 80ac 	bne.w	801672c <rcl_wait_set_resize+0x218>
 80165d4:	6960      	ldr	r0, [r4, #20]
 80165d6:	b130      	cbz	r0, 80165e6 <rcl_wait_set_resize+0xd2>
 80165d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80165da:	4649      	mov	r1, r9
 80165dc:	4798      	blx	r3
 80165de:	6166      	str	r6, [r4, #20]
 80165e0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80165e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80165e6:	2600      	movs	r6, #0
 80165e8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80165ec:	616e      	str	r6, [r5, #20]
 80165ee:	6426      	str	r6, [r4, #64]	@ 0x40
 80165f0:	2f00      	cmp	r7, #0
 80165f2:	f040 80ad 	bne.w	8016750 <rcl_wait_set_resize+0x23c>
 80165f6:	6928      	ldr	r0, [r5, #16]
 80165f8:	b138      	cbz	r0, 801660a <rcl_wait_set_resize+0xf6>
 80165fa:	4649      	mov	r1, r9
 80165fc:	47d0      	blx	sl
 80165fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016600:	612f      	str	r7, [r5, #16]
 8016602:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016606:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801660a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801660c:	2600      	movs	r6, #0
 801660e:	61ee      	str	r6, [r5, #28]
 8016610:	61a6      	str	r6, [r4, #24]
 8016612:	2b00      	cmp	r3, #0
 8016614:	f040 80af 	bne.w	8016776 <rcl_wait_set_resize+0x262>
 8016618:	69a8      	ldr	r0, [r5, #24]
 801661a:	b120      	cbz	r0, 8016626 <rcl_wait_set_resize+0x112>
 801661c:	4649      	mov	r1, r9
 801661e:	47d0      	blx	sl
 8016620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016622:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016624:	61ab      	str	r3, [r5, #24]
 8016626:	6a20      	ldr	r0, [r4, #32]
 8016628:	b128      	cbz	r0, 8016636 <rcl_wait_set_resize+0x122>
 801662a:	4649      	mov	r1, r9
 801662c:	47d0      	blx	sl
 801662e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016630:	2300      	movs	r3, #0
 8016632:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016638:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801663a:	2600      	movs	r6, #0
 801663c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016640:	626e      	str	r6, [r5, #36]	@ 0x24
 8016642:	6266      	str	r6, [r4, #36]	@ 0x24
 8016644:	2b00      	cmp	r3, #0
 8016646:	f000 80b6 	beq.w	80167b6 <rcl_wait_set_resize+0x2a2>
 801664a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801664e:	6a28      	ldr	r0, [r5, #32]
 8016650:	463a      	mov	r2, r7
 8016652:	4651      	mov	r1, sl
 8016654:	47c8      	blx	r9
 8016656:	6228      	str	r0, [r5, #32]
 8016658:	2800      	cmp	r0, #0
 801665a:	d04c      	beq.n	80166f6 <rcl_wait_set_resize+0x1e2>
 801665c:	4652      	mov	r2, sl
 801665e:	4631      	mov	r1, r6
 8016660:	f005 fde8 	bl	801c234 <memset>
 8016664:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016668:	626b      	str	r3, [r5, #36]	@ 0x24
 801666a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801666c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801666e:	463a      	mov	r2, r7
 8016670:	4651      	mov	r1, sl
 8016672:	47c8      	blx	r9
 8016674:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016676:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8016678:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801667a:	2c00      	cmp	r4, #0
 801667c:	f000 80f0 	beq.w	8016860 <rcl_wait_set_resize+0x34c>
 8016680:	4620      	mov	r0, r4
 8016682:	4652      	mov	r2, sl
 8016684:	4631      	mov	r1, r6
 8016686:	f005 fdd5 	bl	801c234 <memset>
 801668a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801668c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801668e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8016690:	2600      	movs	r6, #0
 8016692:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016696:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8016698:	6326      	str	r6, [r4, #48]	@ 0x30
 801669a:	2b00      	cmp	r3, #0
 801669c:	f040 809d 	bne.w	80167da <rcl_wait_set_resize+0x2c6>
 80166a0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80166a2:	b120      	cbz	r0, 80166ae <rcl_wait_set_resize+0x19a>
 80166a4:	4639      	mov	r1, r7
 80166a6:	47c0      	blx	r8
 80166a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80166aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80166ac:	62ab      	str	r3, [r5, #40]	@ 0x28
 80166ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80166b0:	b310      	cbz	r0, 80166f8 <rcl_wait_set_resize+0x1e4>
 80166b2:	4639      	mov	r1, r7
 80166b4:	47c0      	blx	r8
 80166b6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80166b8:	2000      	movs	r0, #0
 80166ba:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80166be:	b003      	add	sp, #12
 80166c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166c4:	6800      	ldr	r0, [r0, #0]
 80166c6:	b120      	cbz	r0, 80166d2 <rcl_wait_set_resize+0x1be>
 80166c8:	4651      	mov	r1, sl
 80166ca:	47d8      	blx	fp
 80166cc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80166ce:	f8c5 8000 	str.w	r8, [r5]
 80166d2:	68a0      	ldr	r0, [r4, #8]
 80166d4:	2800      	cmp	r0, #0
 80166d6:	f43f af61 	beq.w	801659c <rcl_wait_set_resize+0x88>
 80166da:	4651      	mov	r1, sl
 80166dc:	47d8      	blx	fp
 80166de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80166e0:	2300      	movs	r3, #0
 80166e2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80166e6:	e759      	b.n	801659c <rcl_wait_set_resize+0x88>
 80166e8:	6828      	ldr	r0, [r5, #0]
 80166ea:	9301      	str	r3, [sp, #4]
 80166ec:	4651      	mov	r1, sl
 80166ee:	47d8      	blx	fp
 80166f0:	9b01      	ldr	r3, [sp, #4]
 80166f2:	e9c5 3300 	strd	r3, r3, [r5]
 80166f6:	200a      	movs	r0, #10
 80166f8:	b003      	add	sp, #12
 80166fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fe:	00b4      	lsls	r4, r6, #2
 8016700:	68a8      	ldr	r0, [r5, #8]
 8016702:	464a      	mov	r2, r9
 8016704:	4621      	mov	r1, r4
 8016706:	4798      	blx	r3
 8016708:	60a8      	str	r0, [r5, #8]
 801670a:	2800      	cmp	r0, #0
 801670c:	d0f3      	beq.n	80166f6 <rcl_wait_set_resize+0x1e2>
 801670e:	4622      	mov	r2, r4
 8016710:	4641      	mov	r1, r8
 8016712:	f005 fd8f 	bl	801c234 <memset>
 8016716:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016718:	60ee      	str	r6, [r5, #12]
 801671a:	f04f 0800 	mov.w	r8, #0
 801671e:	19f6      	adds	r6, r6, r7
 8016720:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016724:	f8c4 8010 	str.w	r8, [r4, #16]
 8016728:	f43f af54 	beq.w	80165d4 <rcl_wait_set_resize+0xc0>
 801672c:	00b6      	lsls	r6, r6, #2
 801672e:	464a      	mov	r2, r9
 8016730:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016732:	6960      	ldr	r0, [r4, #20]
 8016734:	4631      	mov	r1, r6
 8016736:	4798      	blx	r3
 8016738:	4681      	mov	r9, r0
 801673a:	6160      	str	r0, [r4, #20]
 801673c:	2800      	cmp	r0, #0
 801673e:	d076      	beq.n	801682e <rcl_wait_set_resize+0x31a>
 8016740:	4632      	mov	r2, r6
 8016742:	4641      	mov	r1, r8
 8016744:	f005 fd76 	bl	801c234 <memset>
 8016748:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801674a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801674e:	e74a      	b.n	80165e6 <rcl_wait_set_resize+0xd2>
 8016750:	00bc      	lsls	r4, r7, #2
 8016752:	6928      	ldr	r0, [r5, #16]
 8016754:	464a      	mov	r2, r9
 8016756:	4621      	mov	r1, r4
 8016758:	47c0      	blx	r8
 801675a:	6128      	str	r0, [r5, #16]
 801675c:	2800      	cmp	r0, #0
 801675e:	d0ca      	beq.n	80166f6 <rcl_wait_set_resize+0x1e2>
 8016760:	4622      	mov	r2, r4
 8016762:	4631      	mov	r1, r6
 8016764:	f005 fd66 	bl	801c234 <memset>
 8016768:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801676a:	616f      	str	r7, [r5, #20]
 801676c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016770:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016774:	e749      	b.n	801660a <rcl_wait_set_resize+0xf6>
 8016776:	009c      	lsls	r4, r3, #2
 8016778:	69a8      	ldr	r0, [r5, #24]
 801677a:	464a      	mov	r2, r9
 801677c:	4621      	mov	r1, r4
 801677e:	47c0      	blx	r8
 8016780:	61a8      	str	r0, [r5, #24]
 8016782:	2800      	cmp	r0, #0
 8016784:	d0b7      	beq.n	80166f6 <rcl_wait_set_resize+0x1e2>
 8016786:	4622      	mov	r2, r4
 8016788:	4631      	mov	r1, r6
 801678a:	f005 fd53 	bl	801c234 <memset>
 801678e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8016790:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016792:	61eb      	str	r3, [r5, #28]
 8016794:	6a38      	ldr	r0, [r7, #32]
 8016796:	61fe      	str	r6, [r7, #28]
 8016798:	464a      	mov	r2, r9
 801679a:	4621      	mov	r1, r4
 801679c:	47c0      	blx	r8
 801679e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80167a0:	6238      	str	r0, [r7, #32]
 80167a2:	6a1f      	ldr	r7, [r3, #32]
 80167a4:	2f00      	cmp	r7, #0
 80167a6:	d054      	beq.n	8016852 <rcl_wait_set_resize+0x33e>
 80167a8:	4622      	mov	r2, r4
 80167aa:	4631      	mov	r1, r6
 80167ac:	4638      	mov	r0, r7
 80167ae:	f005 fd41 	bl	801c234 <memset>
 80167b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167b4:	e73f      	b.n	8016636 <rcl_wait_set_resize+0x122>
 80167b6:	6a28      	ldr	r0, [r5, #32]
 80167b8:	b120      	cbz	r0, 80167c4 <rcl_wait_set_resize+0x2b0>
 80167ba:	4639      	mov	r1, r7
 80167bc:	47c0      	blx	r8
 80167be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80167c0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167c2:	622b      	str	r3, [r5, #32]
 80167c4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80167c6:	2800      	cmp	r0, #0
 80167c8:	f43f af60 	beq.w	801668c <rcl_wait_set_resize+0x178>
 80167cc:	4639      	mov	r1, r7
 80167ce:	47c0      	blx	r8
 80167d0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167d2:	2300      	movs	r3, #0
 80167d4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80167d8:	e758      	b.n	801668c <rcl_wait_set_resize+0x178>
 80167da:	009c      	lsls	r4, r3, #2
 80167dc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80167de:	463a      	mov	r2, r7
 80167e0:	4621      	mov	r1, r4
 80167e2:	47c8      	blx	r9
 80167e4:	62a8      	str	r0, [r5, #40]	@ 0x28
 80167e6:	2800      	cmp	r0, #0
 80167e8:	d085      	beq.n	80166f6 <rcl_wait_set_resize+0x1e2>
 80167ea:	4622      	mov	r2, r4
 80167ec:	4631      	mov	r1, r6
 80167ee:	f005 fd21 	bl	801c234 <memset>
 80167f2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80167f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80167fa:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80167fe:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8016802:	463a      	mov	r2, r7
 8016804:	4621      	mov	r1, r4
 8016806:	47c8      	blx	r9
 8016808:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801680a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801680e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016810:	b36b      	cbz	r3, 801686e <rcl_wait_set_resize+0x35a>
 8016812:	4622      	mov	r2, r4
 8016814:	4631      	mov	r1, r6
 8016816:	4618      	mov	r0, r3
 8016818:	f005 fd0c 	bl	801c234 <memset>
 801681c:	4630      	mov	r0, r6
 801681e:	b003      	add	sp, #12
 8016820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016824:	200b      	movs	r0, #11
 8016826:	4770      	bx	lr
 8016828:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801682c:	e764      	b.n	80166f8 <rcl_wait_set_resize+0x1e4>
 801682e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016830:	68a8      	ldr	r0, [r5, #8]
 8016832:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016836:	4798      	blx	r3
 8016838:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801683a:	6928      	ldr	r0, [r5, #16]
 801683c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801683e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016840:	f8c5 900c 	str.w	r9, [r5, #12]
 8016844:	f8c5 9008 	str.w	r9, [r5, #8]
 8016848:	4790      	blx	r2
 801684a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801684e:	200a      	movs	r0, #10
 8016850:	e752      	b.n	80166f8 <rcl_wait_set_resize+0x1e4>
 8016852:	69a8      	ldr	r0, [r5, #24]
 8016854:	4649      	mov	r1, r9
 8016856:	47d0      	blx	sl
 8016858:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801685c:	200a      	movs	r0, #10
 801685e:	e74b      	b.n	80166f8 <rcl_wait_set_resize+0x1e4>
 8016860:	6a28      	ldr	r0, [r5, #32]
 8016862:	4639      	mov	r1, r7
 8016864:	47c0      	blx	r8
 8016866:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801686a:	200a      	movs	r0, #10
 801686c:	e744      	b.n	80166f8 <rcl_wait_set_resize+0x1e4>
 801686e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8016870:	9301      	str	r3, [sp, #4]
 8016872:	4639      	mov	r1, r7
 8016874:	47c0      	blx	r8
 8016876:	9b01      	ldr	r3, [sp, #4]
 8016878:	200a      	movs	r0, #10
 801687a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801687e:	e73b      	b.n	80166f8 <rcl_wait_set_resize+0x1e4>

08016880 <rcl_wait_set_init>:
 8016880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016884:	b084      	sub	sp, #16
 8016886:	4604      	mov	r4, r0
 8016888:	a810      	add	r0, sp, #64	@ 0x40
 801688a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801688e:	460f      	mov	r7, r1
 8016890:	4690      	mov	r8, r2
 8016892:	4699      	mov	r9, r3
 8016894:	f7fa fec8 	bl	8011628 <rcutils_allocator_is_valid>
 8016898:	2800      	cmp	r0, #0
 801689a:	d06b      	beq.n	8016974 <rcl_wait_set_init+0xf4>
 801689c:	2c00      	cmp	r4, #0
 801689e:	d069      	beq.n	8016974 <rcl_wait_set_init+0xf4>
 80168a0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80168a2:	b125      	cbz	r5, 80168ae <rcl_wait_set_init+0x2e>
 80168a4:	2564      	movs	r5, #100	@ 0x64
 80168a6:	4628      	mov	r0, r5
 80168a8:	b004      	add	sp, #16
 80168aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168ae:	f1ba 0f00 	cmp.w	sl, #0
 80168b2:	d05f      	beq.n	8016974 <rcl_wait_set_init+0xf4>
 80168b4:	4650      	mov	r0, sl
 80168b6:	f7fe fcbb 	bl	8015230 <rcl_context_is_valid>
 80168ba:	2800      	cmp	r0, #0
 80168bc:	d067      	beq.n	801698e <rcl_wait_set_init+0x10e>
 80168be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80168c0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80168c2:	205c      	movs	r0, #92	@ 0x5c
 80168c4:	4798      	blx	r3
 80168c6:	6320      	str	r0, [r4, #48]	@ 0x30
 80168c8:	2800      	cmp	r0, #0
 80168ca:	d062      	beq.n	8016992 <rcl_wait_set_init+0x112>
 80168cc:	4629      	mov	r1, r5
 80168ce:	225c      	movs	r2, #92	@ 0x5c
 80168d0:	f005 fcb0 	bl	801c234 <memset>
 80168d4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80168d8:	eb03 0e02 	add.w	lr, r3, r2
 80168dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80168de:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80168e0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80168e4:	449e      	add	lr, r3
 80168e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80168ea:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80168ee:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80168f2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80168f6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80168fa:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80168fe:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8016902:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8016906:	f8da a000 	ldr.w	sl, [sl]
 801690a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801690c:	44c6      	add	lr, r8
 801690e:	f8dc 3000 	ldr.w	r3, [ip]
 8016912:	602b      	str	r3, [r5, #0]
 8016914:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8016918:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801691c:	f002 fe86 	bl	801962c <rmw_create_wait_set>
 8016920:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016922:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8016924:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016926:	b350      	cbz	r0, 801697e <rcl_wait_set_init+0xfe>
 8016928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801692a:	9302      	str	r3, [sp, #8]
 801692c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801692e:	9301      	str	r3, [sp, #4]
 8016930:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016932:	9300      	str	r3, [sp, #0]
 8016934:	4642      	mov	r2, r8
 8016936:	464b      	mov	r3, r9
 8016938:	4639      	mov	r1, r7
 801693a:	4620      	mov	r0, r4
 801693c:	f7ff fdea 	bl	8016514 <rcl_wait_set_resize>
 8016940:	4605      	mov	r5, r0
 8016942:	2800      	cmp	r0, #0
 8016944:	d0af      	beq.n	80168a6 <rcl_wait_set_init+0x26>
 8016946:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016948:	bb2b      	cbnz	r3, 8016996 <rcl_wait_set_init+0x116>
 801694a:	2600      	movs	r6, #0
 801694c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016950:	9600      	str	r6, [sp, #0]
 8016952:	4633      	mov	r3, r6
 8016954:	4632      	mov	r2, r6
 8016956:	4631      	mov	r1, r6
 8016958:	4620      	mov	r0, r4
 801695a:	f7ff fddb 	bl	8016514 <rcl_wait_set_resize>
 801695e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016960:	2800      	cmp	r0, #0
 8016962:	d0a0      	beq.n	80168a6 <rcl_wait_set_init+0x26>
 8016964:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8016966:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016968:	4798      	blx	r3
 801696a:	4628      	mov	r0, r5
 801696c:	6326      	str	r6, [r4, #48]	@ 0x30
 801696e:	b004      	add	sp, #16
 8016970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016974:	250b      	movs	r5, #11
 8016976:	4628      	mov	r0, r5
 8016978:	b004      	add	sp, #16
 801697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801697e:	2501      	movs	r5, #1
 8016980:	f002 fe5e 	bl	8019640 <rmw_destroy_wait_set>
 8016984:	2800      	cmp	r0, #0
 8016986:	bf18      	it	ne
 8016988:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801698c:	e7dd      	b.n	801694a <rcl_wait_set_init+0xca>
 801698e:	2565      	movs	r5, #101	@ 0x65
 8016990:	e789      	b.n	80168a6 <rcl_wait_set_init+0x26>
 8016992:	250a      	movs	r5, #10
 8016994:	e787      	b.n	80168a6 <rcl_wait_set_init+0x26>
 8016996:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016998:	e7f2      	b.n	8016980 <rcl_wait_set_init+0x100>
 801699a:	bf00      	nop

0801699c <rcl_wait_set_add_guard_condition>:
 801699c:	b318      	cbz	r0, 80169e6 <rcl_wait_set_add_guard_condition+0x4a>
 801699e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80169a0:	b570      	push	{r4, r5, r6, lr}
 80169a2:	4604      	mov	r4, r0
 80169a4:	b30b      	cbz	r3, 80169ea <rcl_wait_set_add_guard_condition+0x4e>
 80169a6:	b319      	cbz	r1, 80169f0 <rcl_wait_set_add_guard_condition+0x54>
 80169a8:	68dd      	ldr	r5, [r3, #12]
 80169aa:	68c0      	ldr	r0, [r0, #12]
 80169ac:	4285      	cmp	r5, r0
 80169ae:	d217      	bcs.n	80169e0 <rcl_wait_set_add_guard_condition+0x44>
 80169b0:	68a0      	ldr	r0, [r4, #8]
 80169b2:	1c6e      	adds	r6, r5, #1
 80169b4:	60de      	str	r6, [r3, #12]
 80169b6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80169ba:	b102      	cbz	r2, 80169be <rcl_wait_set_add_guard_condition+0x22>
 80169bc:	6015      	str	r5, [r2, #0]
 80169be:	4608      	mov	r0, r1
 80169c0:	f004 fe38 	bl	801b634 <rcl_guard_condition_get_rmw_handle>
 80169c4:	b150      	cbz	r0, 80169dc <rcl_wait_set_add_guard_condition+0x40>
 80169c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80169c8:	6842      	ldr	r2, [r0, #4]
 80169ca:	695b      	ldr	r3, [r3, #20]
 80169cc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80169d0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80169d2:	6913      	ldr	r3, [r2, #16]
 80169d4:	3301      	adds	r3, #1
 80169d6:	2000      	movs	r0, #0
 80169d8:	6113      	str	r3, [r2, #16]
 80169da:	bd70      	pop	{r4, r5, r6, pc}
 80169dc:	2001      	movs	r0, #1
 80169de:	bd70      	pop	{r4, r5, r6, pc}
 80169e0:	f240 3086 	movw	r0, #902	@ 0x386
 80169e4:	bd70      	pop	{r4, r5, r6, pc}
 80169e6:	200b      	movs	r0, #11
 80169e8:	4770      	bx	lr
 80169ea:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80169ee:	bd70      	pop	{r4, r5, r6, pc}
 80169f0:	200b      	movs	r0, #11
 80169f2:	bd70      	pop	{r4, r5, r6, pc}

080169f4 <rcl_wait_set_add_timer>:
 80169f4:	b328      	cbz	r0, 8016a42 <rcl_wait_set_add_timer+0x4e>
 80169f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80169f8:	b570      	push	{r4, r5, r6, lr}
 80169fa:	4604      	mov	r4, r0
 80169fc:	b31b      	cbz	r3, 8016a46 <rcl_wait_set_add_timer+0x52>
 80169fe:	b329      	cbz	r1, 8016a4c <rcl_wait_set_add_timer+0x58>
 8016a00:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8016a02:	6965      	ldr	r5, [r4, #20]
 8016a04:	42a8      	cmp	r0, r5
 8016a06:	d219      	bcs.n	8016a3c <rcl_wait_set_add_timer+0x48>
 8016a08:	6925      	ldr	r5, [r4, #16]
 8016a0a:	1c46      	adds	r6, r0, #1
 8016a0c:	641e      	str	r6, [r3, #64]	@ 0x40
 8016a0e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8016a12:	b102      	cbz	r2, 8016a16 <rcl_wait_set_add_timer+0x22>
 8016a14:	6010      	str	r0, [r2, #0]
 8016a16:	4608      	mov	r0, r1
 8016a18:	f7ff fc10 	bl	801623c <rcl_timer_get_guard_condition>
 8016a1c:	b168      	cbz	r0, 8016a3a <rcl_wait_set_add_timer+0x46>
 8016a1e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016a20:	68e3      	ldr	r3, [r4, #12]
 8016a22:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8016a24:	3b01      	subs	r3, #1
 8016a26:	441d      	add	r5, r3
 8016a28:	f004 fe04 	bl	801b634 <rcl_guard_condition_get_rmw_handle>
 8016a2c:	b180      	cbz	r0, 8016a50 <rcl_wait_set_add_timer+0x5c>
 8016a2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016a30:	6842      	ldr	r2, [r0, #4]
 8016a32:	695b      	ldr	r3, [r3, #20]
 8016a34:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016a38:	2000      	movs	r0, #0
 8016a3a:	bd70      	pop	{r4, r5, r6, pc}
 8016a3c:	f240 3086 	movw	r0, #902	@ 0x386
 8016a40:	bd70      	pop	{r4, r5, r6, pc}
 8016a42:	200b      	movs	r0, #11
 8016a44:	4770      	bx	lr
 8016a46:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016a4a:	bd70      	pop	{r4, r5, r6, pc}
 8016a4c:	200b      	movs	r0, #11
 8016a4e:	bd70      	pop	{r4, r5, r6, pc}
 8016a50:	2001      	movs	r0, #1
 8016a52:	bd70      	pop	{r4, r5, r6, pc}

08016a54 <rcl_wait_set_add_client>:
 8016a54:	b318      	cbz	r0, 8016a9e <rcl_wait_set_add_client+0x4a>
 8016a56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016a58:	b570      	push	{r4, r5, r6, lr}
 8016a5a:	4604      	mov	r4, r0
 8016a5c:	b30b      	cbz	r3, 8016aa2 <rcl_wait_set_add_client+0x4e>
 8016a5e:	b319      	cbz	r1, 8016aa8 <rcl_wait_set_add_client+0x54>
 8016a60:	699d      	ldr	r5, [r3, #24]
 8016a62:	69c0      	ldr	r0, [r0, #28]
 8016a64:	4285      	cmp	r5, r0
 8016a66:	d217      	bcs.n	8016a98 <rcl_wait_set_add_client+0x44>
 8016a68:	69a0      	ldr	r0, [r4, #24]
 8016a6a:	1c6e      	adds	r6, r5, #1
 8016a6c:	619e      	str	r6, [r3, #24]
 8016a6e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016a72:	b102      	cbz	r2, 8016a76 <rcl_wait_set_add_client+0x22>
 8016a74:	6015      	str	r5, [r2, #0]
 8016a76:	4608      	mov	r0, r1
 8016a78:	f7fe fb2e 	bl	80150d8 <rcl_client_get_rmw_handle>
 8016a7c:	b150      	cbz	r0, 8016a94 <rcl_wait_set_add_client+0x40>
 8016a7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016a80:	6842      	ldr	r2, [r0, #4]
 8016a82:	6a1b      	ldr	r3, [r3, #32]
 8016a84:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016a88:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016a8a:	69d3      	ldr	r3, [r2, #28]
 8016a8c:	3301      	adds	r3, #1
 8016a8e:	2000      	movs	r0, #0
 8016a90:	61d3      	str	r3, [r2, #28]
 8016a92:	bd70      	pop	{r4, r5, r6, pc}
 8016a94:	2001      	movs	r0, #1
 8016a96:	bd70      	pop	{r4, r5, r6, pc}
 8016a98:	f240 3086 	movw	r0, #902	@ 0x386
 8016a9c:	bd70      	pop	{r4, r5, r6, pc}
 8016a9e:	200b      	movs	r0, #11
 8016aa0:	4770      	bx	lr
 8016aa2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016aa6:	bd70      	pop	{r4, r5, r6, pc}
 8016aa8:	200b      	movs	r0, #11
 8016aaa:	bd70      	pop	{r4, r5, r6, pc}

08016aac <rcl_wait_set_add_service>:
 8016aac:	b318      	cbz	r0, 8016af6 <rcl_wait_set_add_service+0x4a>
 8016aae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016ab0:	b570      	push	{r4, r5, r6, lr}
 8016ab2:	4604      	mov	r4, r0
 8016ab4:	b30b      	cbz	r3, 8016afa <rcl_wait_set_add_service+0x4e>
 8016ab6:	b319      	cbz	r1, 8016b00 <rcl_wait_set_add_service+0x54>
 8016ab8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8016aba:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8016abc:	4285      	cmp	r5, r0
 8016abe:	d217      	bcs.n	8016af0 <rcl_wait_set_add_service+0x44>
 8016ac0:	6a20      	ldr	r0, [r4, #32]
 8016ac2:	1c6e      	adds	r6, r5, #1
 8016ac4:	625e      	str	r6, [r3, #36]	@ 0x24
 8016ac6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016aca:	b102      	cbz	r2, 8016ace <rcl_wait_set_add_service+0x22>
 8016acc:	6015      	str	r5, [r2, #0]
 8016ace:	4608      	mov	r0, r1
 8016ad0:	f7ff f86e 	bl	8015bb0 <rcl_service_get_rmw_handle>
 8016ad4:	b150      	cbz	r0, 8016aec <rcl_wait_set_add_service+0x40>
 8016ad6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ad8:	6842      	ldr	r2, [r0, #4]
 8016ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016adc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016ae0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016ae2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016ae4:	3301      	adds	r3, #1
 8016ae6:	2000      	movs	r0, #0
 8016ae8:	6293      	str	r3, [r2, #40]	@ 0x28
 8016aea:	bd70      	pop	{r4, r5, r6, pc}
 8016aec:	2001      	movs	r0, #1
 8016aee:	bd70      	pop	{r4, r5, r6, pc}
 8016af0:	f240 3086 	movw	r0, #902	@ 0x386
 8016af4:	bd70      	pop	{r4, r5, r6, pc}
 8016af6:	200b      	movs	r0, #11
 8016af8:	4770      	bx	lr
 8016afa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016afe:	bd70      	pop	{r4, r5, r6, pc}
 8016b00:	200b      	movs	r0, #11
 8016b02:	bd70      	pop	{r4, r5, r6, pc}
 8016b04:	0000      	movs	r0, r0
	...

08016b08 <rcl_wait>:
 8016b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b0c:	ed2d 8b02 	vpush	{d8}
 8016b10:	b08d      	sub	sp, #52	@ 0x34
 8016b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016b16:	2800      	cmp	r0, #0
 8016b18:	f000 8143 	beq.w	8016da2 <rcl_wait+0x29a>
 8016b1c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016b1e:	4605      	mov	r5, r0
 8016b20:	2e00      	cmp	r6, #0
 8016b22:	f000 8112 	beq.w	8016d4a <rcl_wait+0x242>
 8016b26:	6843      	ldr	r3, [r0, #4]
 8016b28:	b983      	cbnz	r3, 8016b4c <rcl_wait+0x44>
 8016b2a:	68eb      	ldr	r3, [r5, #12]
 8016b2c:	b973      	cbnz	r3, 8016b4c <rcl_wait+0x44>
 8016b2e:	696b      	ldr	r3, [r5, #20]
 8016b30:	b963      	cbnz	r3, 8016b4c <rcl_wait+0x44>
 8016b32:	69eb      	ldr	r3, [r5, #28]
 8016b34:	b953      	cbnz	r3, 8016b4c <rcl_wait+0x44>
 8016b36:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016b38:	b943      	cbnz	r3, 8016b4c <rcl_wait+0x44>
 8016b3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8016b3c:	b933      	cbnz	r3, 8016b4c <rcl_wait+0x44>
 8016b3e:	f240 3085 	movw	r0, #901	@ 0x385
 8016b42:	b00d      	add	sp, #52	@ 0x34
 8016b44:	ecbd 8b02 	vpop	{d8}
 8016b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b4c:	9b04      	ldr	r3, [sp, #16]
 8016b4e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016b50:	2b01      	cmp	r3, #1
 8016b52:	9b05      	ldr	r3, [sp, #20]
 8016b54:	f173 0300 	sbcs.w	r3, r3, #0
 8016b58:	f2c0 80f0 	blt.w	8016d3c <rcl_wait+0x234>
 8016b5c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016b60:	4643      	mov	r3, r8
 8016b62:	2a00      	cmp	r2, #0
 8016b64:	f000 8133 	beq.w	8016dce <rcl_wait+0x2c6>
 8016b68:	2400      	movs	r4, #0
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8016de0 <rcl_wait+0x2d8>
 8016b70:	46a2      	mov	sl, r4
 8016b72:	46a3      	mov	fp, r4
 8016b74:	f240 3921 	movw	r9, #801	@ 0x321
 8016b78:	4632      	mov	r2, r6
 8016b7a:	e014      	b.n	8016ba6 <rcl_wait+0x9e>
 8016b7c:	2800      	cmp	r0, #0
 8016b7e:	d1e0      	bne.n	8016b42 <rcl_wait+0x3a>
 8016b80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016b84:	4542      	cmp	r2, r8
 8016b86:	eb73 0107 	sbcs.w	r1, r3, r7
 8016b8a:	da03      	bge.n	8016b94 <rcl_wait+0x8c>
 8016b8c:	4690      	mov	r8, r2
 8016b8e:	461f      	mov	r7, r3
 8016b90:	f04f 0b01 	mov.w	fp, #1
 8016b94:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016b96:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016b98:	3401      	adds	r4, #1
 8016b9a:	f14a 0a00 	adc.w	sl, sl, #0
 8016b9e:	429c      	cmp	r4, r3
 8016ba0:	f17a 0100 	sbcs.w	r1, sl, #0
 8016ba4:	d228      	bcs.n	8016bf8 <rcl_wait+0xf0>
 8016ba6:	6928      	ldr	r0, [r5, #16]
 8016ba8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016bac:	a908      	add	r1, sp, #32
 8016bae:	00a6      	lsls	r6, r4, #2
 8016bb0:	2800      	cmp	r0, #0
 8016bb2:	d0f1      	beq.n	8016b98 <rcl_wait+0x90>
 8016bb4:	68eb      	ldr	r3, [r5, #12]
 8016bb6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016bba:	4423      	add	r3, r4
 8016bbc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016bc0:	f1be 0f00 	cmp.w	lr, #0
 8016bc4:	d006      	beq.n	8016bd4 <rcl_wait+0xcc>
 8016bc6:	6913      	ldr	r3, [r2, #16]
 8016bc8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016bcc:	3301      	adds	r3, #1
 8016bce:	6113      	str	r3, [r2, #16]
 8016bd0:	692b      	ldr	r3, [r5, #16]
 8016bd2:	5998      	ldr	r0, [r3, r6]
 8016bd4:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016bd8:	f7ff fafe 	bl	80161d8 <rcl_timer_get_time_until_next_call>
 8016bdc:	4548      	cmp	r0, r9
 8016bde:	d1cd      	bne.n	8016b7c <rcl_wait+0x74>
 8016be0:	692b      	ldr	r3, [r5, #16]
 8016be2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016be4:	2100      	movs	r1, #0
 8016be6:	5199      	str	r1, [r3, r6]
 8016be8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016bea:	3401      	adds	r4, #1
 8016bec:	f14a 0a00 	adc.w	sl, sl, #0
 8016bf0:	429c      	cmp	r4, r3
 8016bf2:	f17a 0100 	sbcs.w	r1, sl, #0
 8016bf6:	d3d6      	bcc.n	8016ba6 <rcl_wait+0x9e>
 8016bf8:	4616      	mov	r6, r2
 8016bfa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016bfe:	4313      	orrs	r3, r2
 8016c00:	46d9      	mov	r9, fp
 8016c02:	f040 80a9 	bne.w	8016d58 <rcl_wait+0x250>
 8016c06:	2300      	movs	r3, #0
 8016c08:	2200      	movs	r2, #0
 8016c0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016c0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016c12:	ab08      	add	r3, sp, #32
 8016c14:	9302      	str	r3, [sp, #8]
 8016c16:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8016c18:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8016c1c:	e9cd 3200 	strd	r3, r2, [sp]
 8016c20:	f106 0110 	add.w	r1, r6, #16
 8016c24:	f106 031c 	add.w	r3, r6, #28
 8016c28:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8016c2c:	1d30      	adds	r0, r6, #4
 8016c2e:	f002 fb85 	bl	801933c <rmw_wait>
 8016c32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016c34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016c36:	4680      	mov	r8, r0
 8016c38:	b1ca      	cbz	r2, 8016c6e <rcl_wait+0x166>
 8016c3a:	2400      	movs	r4, #0
 8016c3c:	4627      	mov	r7, r4
 8016c3e:	692a      	ldr	r2, [r5, #16]
 8016c40:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8016c44:	f10d 011f 	add.w	r1, sp, #31
 8016c48:	00a6      	lsls	r6, r4, #2
 8016c4a:	b160      	cbz	r0, 8016c66 <rcl_wait+0x15e>
 8016c4c:	f88d 701f 	strb.w	r7, [sp, #31]
 8016c50:	f7ff fa88 	bl	8016164 <rcl_timer_is_ready>
 8016c54:	2800      	cmp	r0, #0
 8016c56:	f47f af74 	bne.w	8016b42 <rcl_wait+0x3a>
 8016c5a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016c5e:	b90b      	cbnz	r3, 8016c64 <rcl_wait+0x15c>
 8016c60:	692a      	ldr	r2, [r5, #16]
 8016c62:	5193      	str	r3, [r2, r6]
 8016c64:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016c66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016c68:	3401      	adds	r4, #1
 8016c6a:	42a2      	cmp	r2, r4
 8016c6c:	d8e7      	bhi.n	8016c3e <rcl_wait+0x136>
 8016c6e:	f038 0002 	bics.w	r0, r8, #2
 8016c72:	f040 8090 	bne.w	8016d96 <rcl_wait+0x28e>
 8016c76:	686e      	ldr	r6, [r5, #4]
 8016c78:	4602      	mov	r2, r0
 8016c7a:	b91e      	cbnz	r6, 8016c84 <rcl_wait+0x17c>
 8016c7c:	e00d      	b.n	8016c9a <rcl_wait+0x192>
 8016c7e:	3201      	adds	r2, #1
 8016c80:	42b2      	cmp	r2, r6
 8016c82:	d00a      	beq.n	8016c9a <rcl_wait+0x192>
 8016c84:	6899      	ldr	r1, [r3, #8]
 8016c86:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016c8a:	2900      	cmp	r1, #0
 8016c8c:	d1f7      	bne.n	8016c7e <rcl_wait+0x176>
 8016c8e:	682c      	ldr	r4, [r5, #0]
 8016c90:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016c94:	3201      	adds	r2, #1
 8016c96:	42b2      	cmp	r2, r6
 8016c98:	d1f4      	bne.n	8016c84 <rcl_wait+0x17c>
 8016c9a:	68ee      	ldr	r6, [r5, #12]
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	b91e      	cbnz	r6, 8016ca8 <rcl_wait+0x1a0>
 8016ca0:	e00d      	b.n	8016cbe <rcl_wait+0x1b6>
 8016ca2:	3201      	adds	r2, #1
 8016ca4:	42b2      	cmp	r2, r6
 8016ca6:	d00a      	beq.n	8016cbe <rcl_wait+0x1b6>
 8016ca8:	6959      	ldr	r1, [r3, #20]
 8016caa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016cae:	2900      	cmp	r1, #0
 8016cb0:	d1f7      	bne.n	8016ca2 <rcl_wait+0x19a>
 8016cb2:	68ac      	ldr	r4, [r5, #8]
 8016cb4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016cb8:	3201      	adds	r2, #1
 8016cba:	42b2      	cmp	r2, r6
 8016cbc:	d1f4      	bne.n	8016ca8 <rcl_wait+0x1a0>
 8016cbe:	69ee      	ldr	r6, [r5, #28]
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	b91e      	cbnz	r6, 8016ccc <rcl_wait+0x1c4>
 8016cc4:	e00d      	b.n	8016ce2 <rcl_wait+0x1da>
 8016cc6:	3201      	adds	r2, #1
 8016cc8:	42b2      	cmp	r2, r6
 8016cca:	d00a      	beq.n	8016ce2 <rcl_wait+0x1da>
 8016ccc:	6a19      	ldr	r1, [r3, #32]
 8016cce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016cd2:	2900      	cmp	r1, #0
 8016cd4:	d1f7      	bne.n	8016cc6 <rcl_wait+0x1be>
 8016cd6:	69ac      	ldr	r4, [r5, #24]
 8016cd8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016cdc:	3201      	adds	r2, #1
 8016cde:	42b2      	cmp	r2, r6
 8016ce0:	d1f4      	bne.n	8016ccc <rcl_wait+0x1c4>
 8016ce2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	b91e      	cbnz	r6, 8016cf0 <rcl_wait+0x1e8>
 8016ce8:	e00d      	b.n	8016d06 <rcl_wait+0x1fe>
 8016cea:	3201      	adds	r2, #1
 8016cec:	4296      	cmp	r6, r2
 8016cee:	d00a      	beq.n	8016d06 <rcl_wait+0x1fe>
 8016cf0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016cf2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016cf6:	2900      	cmp	r1, #0
 8016cf8:	d1f7      	bne.n	8016cea <rcl_wait+0x1e2>
 8016cfa:	6a2c      	ldr	r4, [r5, #32]
 8016cfc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016d00:	3201      	adds	r2, #1
 8016d02:	4296      	cmp	r6, r2
 8016d04:	d1f4      	bne.n	8016cf0 <rcl_wait+0x1e8>
 8016d06:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8016d08:	2200      	movs	r2, #0
 8016d0a:	b91e      	cbnz	r6, 8016d14 <rcl_wait+0x20c>
 8016d0c:	e00d      	b.n	8016d2a <rcl_wait+0x222>
 8016d0e:	3201      	adds	r2, #1
 8016d10:	42b2      	cmp	r2, r6
 8016d12:	d00a      	beq.n	8016d2a <rcl_wait+0x222>
 8016d14:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016d16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016d1a:	2900      	cmp	r1, #0
 8016d1c:	d1f7      	bne.n	8016d0e <rcl_wait+0x206>
 8016d1e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8016d20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016d24:	3201      	adds	r2, #1
 8016d26:	42b2      	cmp	r2, r6
 8016d28:	d1f4      	bne.n	8016d14 <rcl_wait+0x20c>
 8016d2a:	f1b8 0f02 	cmp.w	r8, #2
 8016d2e:	f47f af08 	bne.w	8016b42 <rcl_wait+0x3a>
 8016d32:	464b      	mov	r3, r9
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	bf08      	it	eq
 8016d38:	2002      	moveq	r0, #2
 8016d3a:	e702      	b.n	8016b42 <rcl_wait+0x3a>
 8016d3c:	2a00      	cmp	r2, #0
 8016d3e:	d03a      	beq.n	8016db6 <rcl_wait+0x2ae>
 8016d40:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016d44:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016d48:	e70e      	b.n	8016b68 <rcl_wait+0x60>
 8016d4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016d4e:	b00d      	add	sp, #52	@ 0x34
 8016d50:	ecbd 8b02 	vpop	{d8}
 8016d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d58:	9b04      	ldr	r3, [sp, #16]
 8016d5a:	2b01      	cmp	r3, #1
 8016d5c:	9b05      	ldr	r3, [sp, #20]
 8016d5e:	f173 0300 	sbcs.w	r3, r3, #0
 8016d62:	db24      	blt.n	8016dae <rcl_wait+0x2a6>
 8016d64:	2f00      	cmp	r7, #0
 8016d66:	bfbc      	itt	lt
 8016d68:	f04f 0800 	movlt.w	r8, #0
 8016d6c:	4647      	movlt	r7, r8
 8016d6e:	a31e      	add	r3, pc, #120	@ (adr r3, 8016de8 <rcl_wait+0x2e0>)
 8016d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d74:	4640      	mov	r0, r8
 8016d76:	4639      	mov	r1, r7
 8016d78:	f7e9 fae2 	bl	8000340 <__aeabi_ldivmod>
 8016d7c:	a31a      	add	r3, pc, #104	@ (adr r3, 8016de8 <rcl_wait+0x2e0>)
 8016d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016d86:	4640      	mov	r0, r8
 8016d88:	4639      	mov	r1, r7
 8016d8a:	f7e9 fad9 	bl	8000340 <__aeabi_ldivmod>
 8016d8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016d92:	ab08      	add	r3, sp, #32
 8016d94:	e73e      	b.n	8016c14 <rcl_wait+0x10c>
 8016d96:	2001      	movs	r0, #1
 8016d98:	b00d      	add	sp, #52	@ 0x34
 8016d9a:	ecbd 8b02 	vpop	{d8}
 8016d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016da2:	200b      	movs	r0, #11
 8016da4:	b00d      	add	sp, #52	@ 0x34
 8016da6:	ecbd 8b02 	vpop	{d8}
 8016daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dae:	465b      	mov	r3, fp
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d1d7      	bne.n	8016d64 <rcl_wait+0x25c>
 8016db4:	e72e      	b.n	8016c14 <rcl_wait+0x10c>
 8016db6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016dba:	430b      	orrs	r3, r1
 8016dbc:	bf08      	it	eq
 8016dbe:	4691      	moveq	r9, r2
 8016dc0:	f43f af21 	beq.w	8016c06 <rcl_wait+0xfe>
 8016dc4:	9b04      	ldr	r3, [sp, #16]
 8016dc6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016dca:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016dce:	2b01      	cmp	r3, #1
 8016dd0:	9b05      	ldr	r3, [sp, #20]
 8016dd2:	f173 0300 	sbcs.w	r3, r3, #0
 8016dd6:	f04f 0300 	mov.w	r3, #0
 8016dda:	4699      	mov	r9, r3
 8016ddc:	dac2      	bge.n	8016d64 <rcl_wait+0x25c>
 8016dde:	e719      	b.n	8016c14 <rcl_wait+0x10c>
 8016de0:	ffffffff 	.word	0xffffffff
 8016de4:	7fffffff 	.word	0x7fffffff
 8016de8:	3b9aca00 	.word	0x3b9aca00
 8016dec:	00000000 	.word	0x00000000

08016df0 <rcl_action_take_goal_response>:
 8016df0:	2800      	cmp	r0, #0
 8016df2:	d039      	beq.n	8016e68 <rcl_action_take_goal_response+0x78>
 8016df4:	b570      	push	{r4, r5, r6, lr}
 8016df6:	4604      	mov	r4, r0
 8016df8:	6800      	ldr	r0, [r0, #0]
 8016dfa:	b380      	cbz	r0, 8016e5e <rcl_action_take_goal_response+0x6e>
 8016dfc:	460d      	mov	r5, r1
 8016dfe:	4616      	mov	r6, r2
 8016e00:	f7fe f9ee 	bl	80151e0 <rcl_client_is_valid>
 8016e04:	b330      	cbz	r0, 8016e54 <rcl_action_take_goal_response+0x64>
 8016e06:	6820      	ldr	r0, [r4, #0]
 8016e08:	3004      	adds	r0, #4
 8016e0a:	f7fe f9e9 	bl	80151e0 <rcl_client_is_valid>
 8016e0e:	b308      	cbz	r0, 8016e54 <rcl_action_take_goal_response+0x64>
 8016e10:	6820      	ldr	r0, [r4, #0]
 8016e12:	3008      	adds	r0, #8
 8016e14:	f7fe f9e4 	bl	80151e0 <rcl_client_is_valid>
 8016e18:	b1e0      	cbz	r0, 8016e54 <rcl_action_take_goal_response+0x64>
 8016e1a:	6820      	ldr	r0, [r4, #0]
 8016e1c:	300c      	adds	r0, #12
 8016e1e:	f7ff f869 	bl	8015ef4 <rcl_subscription_is_valid>
 8016e22:	b1b8      	cbz	r0, 8016e54 <rcl_action_take_goal_response+0x64>
 8016e24:	6820      	ldr	r0, [r4, #0]
 8016e26:	3010      	adds	r0, #16
 8016e28:	f7ff f864 	bl	8015ef4 <rcl_subscription_is_valid>
 8016e2c:	b190      	cbz	r0, 8016e54 <rcl_action_take_goal_response+0x64>
 8016e2e:	b1cd      	cbz	r5, 8016e64 <rcl_action_take_goal_response+0x74>
 8016e30:	b1c6      	cbz	r6, 8016e64 <rcl_action_take_goal_response+0x74>
 8016e32:	6820      	ldr	r0, [r4, #0]
 8016e34:	4632      	mov	r2, r6
 8016e36:	4629      	mov	r1, r5
 8016e38:	f7fe f98a 	bl	8015150 <rcl_take_response>
 8016e3c:	b148      	cbz	r0, 8016e52 <rcl_action_take_goal_response+0x62>
 8016e3e:	280a      	cmp	r0, #10
 8016e40:	d007      	beq.n	8016e52 <rcl_action_take_goal_response+0x62>
 8016e42:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016e46:	f640 0337 	movw	r3, #2103	@ 0x837
 8016e4a:	4290      	cmp	r0, r2
 8016e4c:	bf0c      	ite	eq
 8016e4e:	4618      	moveq	r0, r3
 8016e50:	2001      	movne	r0, #1
 8016e52:	bd70      	pop	{r4, r5, r6, pc}
 8016e54:	f7fa fc0c 	bl	8011670 <rcutils_reset_error>
 8016e58:	f640 0036 	movw	r0, #2102	@ 0x836
 8016e5c:	bd70      	pop	{r4, r5, r6, pc}
 8016e5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016e62:	bd70      	pop	{r4, r5, r6, pc}
 8016e64:	200b      	movs	r0, #11
 8016e66:	bd70      	pop	{r4, r5, r6, pc}
 8016e68:	f640 0036 	movw	r0, #2102	@ 0x836
 8016e6c:	4770      	bx	lr
 8016e6e:	bf00      	nop

08016e70 <rcl_action_send_result_request>:
 8016e70:	b390      	cbz	r0, 8016ed8 <rcl_action_send_result_request+0x68>
 8016e72:	b570      	push	{r4, r5, r6, lr}
 8016e74:	4604      	mov	r4, r0
 8016e76:	6800      	ldr	r0, [r0, #0]
 8016e78:	b348      	cbz	r0, 8016ece <rcl_action_send_result_request+0x5e>
 8016e7a:	460d      	mov	r5, r1
 8016e7c:	4616      	mov	r6, r2
 8016e7e:	f7fe f9af 	bl	80151e0 <rcl_client_is_valid>
 8016e82:	b1f8      	cbz	r0, 8016ec4 <rcl_action_send_result_request+0x54>
 8016e84:	6820      	ldr	r0, [r4, #0]
 8016e86:	3004      	adds	r0, #4
 8016e88:	f7fe f9aa 	bl	80151e0 <rcl_client_is_valid>
 8016e8c:	b1d0      	cbz	r0, 8016ec4 <rcl_action_send_result_request+0x54>
 8016e8e:	6820      	ldr	r0, [r4, #0]
 8016e90:	3008      	adds	r0, #8
 8016e92:	f7fe f9a5 	bl	80151e0 <rcl_client_is_valid>
 8016e96:	b1a8      	cbz	r0, 8016ec4 <rcl_action_send_result_request+0x54>
 8016e98:	6820      	ldr	r0, [r4, #0]
 8016e9a:	300c      	adds	r0, #12
 8016e9c:	f7ff f82a 	bl	8015ef4 <rcl_subscription_is_valid>
 8016ea0:	b180      	cbz	r0, 8016ec4 <rcl_action_send_result_request+0x54>
 8016ea2:	6820      	ldr	r0, [r4, #0]
 8016ea4:	3010      	adds	r0, #16
 8016ea6:	f7ff f825 	bl	8015ef4 <rcl_subscription_is_valid>
 8016eaa:	b158      	cbz	r0, 8016ec4 <rcl_action_send_result_request+0x54>
 8016eac:	b195      	cbz	r5, 8016ed4 <rcl_action_send_result_request+0x64>
 8016eae:	b18e      	cbz	r6, 8016ed4 <rcl_action_send_result_request+0x64>
 8016eb0:	6820      	ldr	r0, [r4, #0]
 8016eb2:	4632      	mov	r2, r6
 8016eb4:	4629      	mov	r1, r5
 8016eb6:	3008      	adds	r0, #8
 8016eb8:	f7fe f914 	bl	80150e4 <rcl_send_request>
 8016ebc:	3800      	subs	r0, #0
 8016ebe:	bf18      	it	ne
 8016ec0:	2001      	movne	r0, #1
 8016ec2:	bd70      	pop	{r4, r5, r6, pc}
 8016ec4:	f7fa fbd4 	bl	8011670 <rcutils_reset_error>
 8016ec8:	f640 0036 	movw	r0, #2102	@ 0x836
 8016ecc:	bd70      	pop	{r4, r5, r6, pc}
 8016ece:	f640 0036 	movw	r0, #2102	@ 0x836
 8016ed2:	bd70      	pop	{r4, r5, r6, pc}
 8016ed4:	200b      	movs	r0, #11
 8016ed6:	bd70      	pop	{r4, r5, r6, pc}
 8016ed8:	f640 0036 	movw	r0, #2102	@ 0x836
 8016edc:	4770      	bx	lr
 8016ede:	bf00      	nop

08016ee0 <rcl_action_take_result_response>:
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	d03a      	beq.n	8016f5a <rcl_action_take_result_response+0x7a>
 8016ee4:	b570      	push	{r4, r5, r6, lr}
 8016ee6:	4604      	mov	r4, r0
 8016ee8:	6800      	ldr	r0, [r0, #0]
 8016eea:	b388      	cbz	r0, 8016f50 <rcl_action_take_result_response+0x70>
 8016eec:	460d      	mov	r5, r1
 8016eee:	4616      	mov	r6, r2
 8016ef0:	f7fe f976 	bl	80151e0 <rcl_client_is_valid>
 8016ef4:	b338      	cbz	r0, 8016f46 <rcl_action_take_result_response+0x66>
 8016ef6:	6820      	ldr	r0, [r4, #0]
 8016ef8:	3004      	adds	r0, #4
 8016efa:	f7fe f971 	bl	80151e0 <rcl_client_is_valid>
 8016efe:	b310      	cbz	r0, 8016f46 <rcl_action_take_result_response+0x66>
 8016f00:	6820      	ldr	r0, [r4, #0]
 8016f02:	3008      	adds	r0, #8
 8016f04:	f7fe f96c 	bl	80151e0 <rcl_client_is_valid>
 8016f08:	b1e8      	cbz	r0, 8016f46 <rcl_action_take_result_response+0x66>
 8016f0a:	6820      	ldr	r0, [r4, #0]
 8016f0c:	300c      	adds	r0, #12
 8016f0e:	f7fe fff1 	bl	8015ef4 <rcl_subscription_is_valid>
 8016f12:	b1c0      	cbz	r0, 8016f46 <rcl_action_take_result_response+0x66>
 8016f14:	6820      	ldr	r0, [r4, #0]
 8016f16:	3010      	adds	r0, #16
 8016f18:	f7fe ffec 	bl	8015ef4 <rcl_subscription_is_valid>
 8016f1c:	b198      	cbz	r0, 8016f46 <rcl_action_take_result_response+0x66>
 8016f1e:	b1d5      	cbz	r5, 8016f56 <rcl_action_take_result_response+0x76>
 8016f20:	b1ce      	cbz	r6, 8016f56 <rcl_action_take_result_response+0x76>
 8016f22:	6820      	ldr	r0, [r4, #0]
 8016f24:	4632      	mov	r2, r6
 8016f26:	4629      	mov	r1, r5
 8016f28:	3008      	adds	r0, #8
 8016f2a:	f7fe f911 	bl	8015150 <rcl_take_response>
 8016f2e:	b148      	cbz	r0, 8016f44 <rcl_action_take_result_response+0x64>
 8016f30:	280a      	cmp	r0, #10
 8016f32:	d007      	beq.n	8016f44 <rcl_action_take_result_response+0x64>
 8016f34:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016f38:	f640 0337 	movw	r3, #2103	@ 0x837
 8016f3c:	4290      	cmp	r0, r2
 8016f3e:	bf0c      	ite	eq
 8016f40:	4618      	moveq	r0, r3
 8016f42:	2001      	movne	r0, #1
 8016f44:	bd70      	pop	{r4, r5, r6, pc}
 8016f46:	f7fa fb93 	bl	8011670 <rcutils_reset_error>
 8016f4a:	f640 0036 	movw	r0, #2102	@ 0x836
 8016f4e:	bd70      	pop	{r4, r5, r6, pc}
 8016f50:	f640 0036 	movw	r0, #2102	@ 0x836
 8016f54:	bd70      	pop	{r4, r5, r6, pc}
 8016f56:	200b      	movs	r0, #11
 8016f58:	bd70      	pop	{r4, r5, r6, pc}
 8016f5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8016f5e:	4770      	bx	lr

08016f60 <rcl_action_take_cancel_response>:
 8016f60:	2800      	cmp	r0, #0
 8016f62:	d03a      	beq.n	8016fda <rcl_action_take_cancel_response+0x7a>
 8016f64:	b570      	push	{r4, r5, r6, lr}
 8016f66:	4604      	mov	r4, r0
 8016f68:	6800      	ldr	r0, [r0, #0]
 8016f6a:	b388      	cbz	r0, 8016fd0 <rcl_action_take_cancel_response+0x70>
 8016f6c:	460d      	mov	r5, r1
 8016f6e:	4616      	mov	r6, r2
 8016f70:	f7fe f936 	bl	80151e0 <rcl_client_is_valid>
 8016f74:	b338      	cbz	r0, 8016fc6 <rcl_action_take_cancel_response+0x66>
 8016f76:	6820      	ldr	r0, [r4, #0]
 8016f78:	3004      	adds	r0, #4
 8016f7a:	f7fe f931 	bl	80151e0 <rcl_client_is_valid>
 8016f7e:	b310      	cbz	r0, 8016fc6 <rcl_action_take_cancel_response+0x66>
 8016f80:	6820      	ldr	r0, [r4, #0]
 8016f82:	3008      	adds	r0, #8
 8016f84:	f7fe f92c 	bl	80151e0 <rcl_client_is_valid>
 8016f88:	b1e8      	cbz	r0, 8016fc6 <rcl_action_take_cancel_response+0x66>
 8016f8a:	6820      	ldr	r0, [r4, #0]
 8016f8c:	300c      	adds	r0, #12
 8016f8e:	f7fe ffb1 	bl	8015ef4 <rcl_subscription_is_valid>
 8016f92:	b1c0      	cbz	r0, 8016fc6 <rcl_action_take_cancel_response+0x66>
 8016f94:	6820      	ldr	r0, [r4, #0]
 8016f96:	3010      	adds	r0, #16
 8016f98:	f7fe ffac 	bl	8015ef4 <rcl_subscription_is_valid>
 8016f9c:	b198      	cbz	r0, 8016fc6 <rcl_action_take_cancel_response+0x66>
 8016f9e:	b1d5      	cbz	r5, 8016fd6 <rcl_action_take_cancel_response+0x76>
 8016fa0:	b1ce      	cbz	r6, 8016fd6 <rcl_action_take_cancel_response+0x76>
 8016fa2:	6820      	ldr	r0, [r4, #0]
 8016fa4:	4632      	mov	r2, r6
 8016fa6:	4629      	mov	r1, r5
 8016fa8:	3004      	adds	r0, #4
 8016faa:	f7fe f8d1 	bl	8015150 <rcl_take_response>
 8016fae:	b148      	cbz	r0, 8016fc4 <rcl_action_take_cancel_response+0x64>
 8016fb0:	280a      	cmp	r0, #10
 8016fb2:	d007      	beq.n	8016fc4 <rcl_action_take_cancel_response+0x64>
 8016fb4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016fb8:	f640 0337 	movw	r3, #2103	@ 0x837
 8016fbc:	4290      	cmp	r0, r2
 8016fbe:	bf0c      	ite	eq
 8016fc0:	4618      	moveq	r0, r3
 8016fc2:	2001      	movne	r0, #1
 8016fc4:	bd70      	pop	{r4, r5, r6, pc}
 8016fc6:	f7fa fb53 	bl	8011670 <rcutils_reset_error>
 8016fca:	f640 0036 	movw	r0, #2102	@ 0x836
 8016fce:	bd70      	pop	{r4, r5, r6, pc}
 8016fd0:	f640 0036 	movw	r0, #2102	@ 0x836
 8016fd4:	bd70      	pop	{r4, r5, r6, pc}
 8016fd6:	200b      	movs	r0, #11
 8016fd8:	bd70      	pop	{r4, r5, r6, pc}
 8016fda:	f640 0036 	movw	r0, #2102	@ 0x836
 8016fde:	4770      	bx	lr

08016fe0 <rcl_action_take_feedback>:
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	d038      	beq.n	8017056 <rcl_action_take_feedback+0x76>
 8016fe4:	b530      	push	{r4, r5, lr}
 8016fe6:	4604      	mov	r4, r0
 8016fe8:	6800      	ldr	r0, [r0, #0]
 8016fea:	b091      	sub	sp, #68	@ 0x44
 8016fec:	b378      	cbz	r0, 801704e <rcl_action_take_feedback+0x6e>
 8016fee:	460d      	mov	r5, r1
 8016ff0:	f7fe f8f6 	bl	80151e0 <rcl_client_is_valid>
 8016ff4:	b328      	cbz	r0, 8017042 <rcl_action_take_feedback+0x62>
 8016ff6:	6820      	ldr	r0, [r4, #0]
 8016ff8:	3004      	adds	r0, #4
 8016ffa:	f7fe f8f1 	bl	80151e0 <rcl_client_is_valid>
 8016ffe:	b300      	cbz	r0, 8017042 <rcl_action_take_feedback+0x62>
 8017000:	6820      	ldr	r0, [r4, #0]
 8017002:	3008      	adds	r0, #8
 8017004:	f7fe f8ec 	bl	80151e0 <rcl_client_is_valid>
 8017008:	b1d8      	cbz	r0, 8017042 <rcl_action_take_feedback+0x62>
 801700a:	6820      	ldr	r0, [r4, #0]
 801700c:	300c      	adds	r0, #12
 801700e:	f7fe ff71 	bl	8015ef4 <rcl_subscription_is_valid>
 8017012:	b1b0      	cbz	r0, 8017042 <rcl_action_take_feedback+0x62>
 8017014:	6820      	ldr	r0, [r4, #0]
 8017016:	3010      	adds	r0, #16
 8017018:	f7fe ff6c 	bl	8015ef4 <rcl_subscription_is_valid>
 801701c:	b188      	cbz	r0, 8017042 <rcl_action_take_feedback+0x62>
 801701e:	b1ed      	cbz	r5, 801705c <rcl_action_take_feedback+0x7c>
 8017020:	6820      	ldr	r0, [r4, #0]
 8017022:	2300      	movs	r3, #0
 8017024:	466a      	mov	r2, sp
 8017026:	4629      	mov	r1, r5
 8017028:	300c      	adds	r0, #12
 801702a:	f7fe ff05 	bl	8015e38 <rcl_take>
 801702e:	b160      	cbz	r0, 801704a <rcl_action_take_feedback+0x6a>
 8017030:	f240 1391 	movw	r3, #401	@ 0x191
 8017034:	4298      	cmp	r0, r3
 8017036:	d014      	beq.n	8017062 <rcl_action_take_feedback+0x82>
 8017038:	280a      	cmp	r0, #10
 801703a:	bf18      	it	ne
 801703c:	2001      	movne	r0, #1
 801703e:	b011      	add	sp, #68	@ 0x44
 8017040:	bd30      	pop	{r4, r5, pc}
 8017042:	f7fa fb15 	bl	8011670 <rcutils_reset_error>
 8017046:	f640 0036 	movw	r0, #2102	@ 0x836
 801704a:	b011      	add	sp, #68	@ 0x44
 801704c:	bd30      	pop	{r4, r5, pc}
 801704e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017052:	b011      	add	sp, #68	@ 0x44
 8017054:	bd30      	pop	{r4, r5, pc}
 8017056:	f640 0036 	movw	r0, #2102	@ 0x836
 801705a:	4770      	bx	lr
 801705c:	200b      	movs	r0, #11
 801705e:	b011      	add	sp, #68	@ 0x44
 8017060:	bd30      	pop	{r4, r5, pc}
 8017062:	f640 0037 	movw	r0, #2103	@ 0x837
 8017066:	e7f0      	b.n	801704a <rcl_action_take_feedback+0x6a>

08017068 <rcl_action_wait_set_add_action_client>:
 8017068:	2800      	cmp	r0, #0
 801706a:	d048      	beq.n	80170fe <rcl_action_wait_set_add_action_client+0x96>
 801706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801706e:	460c      	mov	r4, r1
 8017070:	2900      	cmp	r1, #0
 8017072:	d03c      	beq.n	80170ee <rcl_action_wait_set_add_action_client+0x86>
 8017074:	4605      	mov	r5, r0
 8017076:	6808      	ldr	r0, [r1, #0]
 8017078:	2800      	cmp	r0, #0
 801707a:	d038      	beq.n	80170ee <rcl_action_wait_set_add_action_client+0x86>
 801707c:	4617      	mov	r7, r2
 801707e:	461e      	mov	r6, r3
 8017080:	f7fe f8ae 	bl	80151e0 <rcl_client_is_valid>
 8017084:	b3b0      	cbz	r0, 80170f4 <rcl_action_wait_set_add_action_client+0x8c>
 8017086:	6820      	ldr	r0, [r4, #0]
 8017088:	3004      	adds	r0, #4
 801708a:	f7fe f8a9 	bl	80151e0 <rcl_client_is_valid>
 801708e:	b388      	cbz	r0, 80170f4 <rcl_action_wait_set_add_action_client+0x8c>
 8017090:	6820      	ldr	r0, [r4, #0]
 8017092:	3008      	adds	r0, #8
 8017094:	f7fe f8a4 	bl	80151e0 <rcl_client_is_valid>
 8017098:	b360      	cbz	r0, 80170f4 <rcl_action_wait_set_add_action_client+0x8c>
 801709a:	6820      	ldr	r0, [r4, #0]
 801709c:	300c      	adds	r0, #12
 801709e:	f7fe ff29 	bl	8015ef4 <rcl_subscription_is_valid>
 80170a2:	b338      	cbz	r0, 80170f4 <rcl_action_wait_set_add_action_client+0x8c>
 80170a4:	6820      	ldr	r0, [r4, #0]
 80170a6:	3010      	adds	r0, #16
 80170a8:	f7fe ff24 	bl	8015ef4 <rcl_subscription_is_valid>
 80170ac:	b310      	cbz	r0, 80170f4 <rcl_action_wait_set_add_action_client+0x8c>
 80170ae:	6821      	ldr	r1, [r4, #0]
 80170b0:	4628      	mov	r0, r5
 80170b2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80170b6:	f7ff fccd 	bl	8016a54 <rcl_wait_set_add_client>
 80170ba:	b9b8      	cbnz	r0, 80170ec <rcl_action_wait_set_add_action_client+0x84>
 80170bc:	6821      	ldr	r1, [r4, #0]
 80170be:	4628      	mov	r0, r5
 80170c0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80170c4:	3104      	adds	r1, #4
 80170c6:	f7ff fcc5 	bl	8016a54 <rcl_wait_set_add_client>
 80170ca:	b978      	cbnz	r0, 80170ec <rcl_action_wait_set_add_action_client+0x84>
 80170cc:	6821      	ldr	r1, [r4, #0]
 80170ce:	4628      	mov	r0, r5
 80170d0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80170d4:	3108      	adds	r1, #8
 80170d6:	f7ff fcbd 	bl	8016a54 <rcl_wait_set_add_client>
 80170da:	b938      	cbnz	r0, 80170ec <rcl_action_wait_set_add_action_client+0x84>
 80170dc:	6821      	ldr	r1, [r4, #0]
 80170de:	4628      	mov	r0, r5
 80170e0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80170e4:	310c      	adds	r1, #12
 80170e6:	f7ff f96d 	bl	80163c4 <rcl_wait_set_add_subscription>
 80170ea:	b158      	cbz	r0, 8017104 <rcl_action_wait_set_add_action_client+0x9c>
 80170ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80170f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170f4:	f7fa fabc 	bl	8011670 <rcutils_reset_error>
 80170f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80170fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170fe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017102:	4770      	bx	lr
 8017104:	6821      	ldr	r1, [r4, #0]
 8017106:	4628      	mov	r0, r5
 8017108:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801710c:	3110      	adds	r1, #16
 801710e:	f7ff f959 	bl	80163c4 <rcl_wait_set_add_subscription>
 8017112:	2800      	cmp	r0, #0
 8017114:	d1ea      	bne.n	80170ec <rcl_action_wait_set_add_action_client+0x84>
 8017116:	b11f      	cbz	r7, 8017120 <rcl_action_wait_set_add_action_client+0xb8>
 8017118:	6823      	ldr	r3, [r4, #0]
 801711a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801711e:	603b      	str	r3, [r7, #0]
 8017120:	2e00      	cmp	r6, #0
 8017122:	d0e3      	beq.n	80170ec <rcl_action_wait_set_add_action_client+0x84>
 8017124:	6823      	ldr	r3, [r4, #0]
 8017126:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801712a:	6033      	str	r3, [r6, #0]
 801712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801712e:	bf00      	nop

08017130 <rcl_action_client_wait_set_get_entities_ready>:
 8017130:	2800      	cmp	r0, #0
 8017132:	f000 808d 	beq.w	8017250 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8017136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801713a:	460c      	mov	r4, r1
 801713c:	2900      	cmp	r1, #0
 801713e:	d077      	beq.n	8017230 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8017140:	4605      	mov	r5, r0
 8017142:	6808      	ldr	r0, [r1, #0]
 8017144:	2800      	cmp	r0, #0
 8017146:	d073      	beq.n	8017230 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8017148:	4616      	mov	r6, r2
 801714a:	461f      	mov	r7, r3
 801714c:	f7fe f848 	bl	80151e0 <rcl_client_is_valid>
 8017150:	2800      	cmp	r0, #0
 8017152:	d071      	beq.n	8017238 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017154:	6820      	ldr	r0, [r4, #0]
 8017156:	3004      	adds	r0, #4
 8017158:	f7fe f842 	bl	80151e0 <rcl_client_is_valid>
 801715c:	2800      	cmp	r0, #0
 801715e:	d06b      	beq.n	8017238 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017160:	6820      	ldr	r0, [r4, #0]
 8017162:	3008      	adds	r0, #8
 8017164:	f7fe f83c 	bl	80151e0 <rcl_client_is_valid>
 8017168:	2800      	cmp	r0, #0
 801716a:	d065      	beq.n	8017238 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801716c:	6820      	ldr	r0, [r4, #0]
 801716e:	300c      	adds	r0, #12
 8017170:	f7fe fec0 	bl	8015ef4 <rcl_subscription_is_valid>
 8017174:	2800      	cmp	r0, #0
 8017176:	d05f      	beq.n	8017238 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017178:	6820      	ldr	r0, [r4, #0]
 801717a:	3010      	adds	r0, #16
 801717c:	f7fe feba 	bl	8015ef4 <rcl_subscription_is_valid>
 8017180:	2800      	cmp	r0, #0
 8017182:	d059      	beq.n	8017238 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017184:	2e00      	cmp	r6, #0
 8017186:	d060      	beq.n	801724a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017188:	2f00      	cmp	r7, #0
 801718a:	d05e      	beq.n	801724a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801718c:	9b06      	ldr	r3, [sp, #24]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d05b      	beq.n	801724a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017192:	9b07      	ldr	r3, [sp, #28]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d058      	beq.n	801724a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8017198:	9b08      	ldr	r3, [sp, #32]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d055      	beq.n	801724a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801719e:	6823      	ldr	r3, [r4, #0]
 80171a0:	686a      	ldr	r2, [r5, #4]
 80171a2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80171a6:	428a      	cmp	r2, r1
 80171a8:	d94c      	bls.n	8017244 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80171aa:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80171ae:	4282      	cmp	r2, r0
 80171b0:	d948      	bls.n	8017244 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80171b2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80171b6:	69ea      	ldr	r2, [r5, #28]
 80171b8:	42a2      	cmp	r2, r4
 80171ba:	d943      	bls.n	8017244 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80171bc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80171c0:	4562      	cmp	r2, ip
 80171c2:	d93f      	bls.n	8017244 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80171c4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80171c8:	4572      	cmp	r2, lr
 80171ca:	d93b      	bls.n	8017244 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80171cc:	69aa      	ldr	r2, [r5, #24]
 80171ce:	682d      	ldr	r5, [r5, #0]
 80171d0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80171d4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80171d8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80171dc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80171e0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80171e4:	f103 0c0c 	add.w	ip, r3, #12
 80171e8:	eba5 050c 	sub.w	r5, r5, ip
 80171ec:	fab5 f585 	clz	r5, r5
 80171f0:	096d      	lsrs	r5, r5, #5
 80171f2:	7035      	strb	r5, [r6, #0]
 80171f4:	f103 0510 	add.w	r5, r3, #16
 80171f8:	1b64      	subs	r4, r4, r5
 80171fa:	fab4 f484 	clz	r4, r4
 80171fe:	0964      	lsrs	r4, r4, #5
 8017200:	703c      	strb	r4, [r7, #0]
 8017202:	eba3 0008 	sub.w	r0, r3, r8
 8017206:	1d1c      	adds	r4, r3, #4
 8017208:	3308      	adds	r3, #8
 801720a:	1ad3      	subs	r3, r2, r3
 801720c:	fab0 f080 	clz	r0, r0
 8017210:	9a06      	ldr	r2, [sp, #24]
 8017212:	0940      	lsrs	r0, r0, #5
 8017214:	1b09      	subs	r1, r1, r4
 8017216:	7010      	strb	r0, [r2, #0]
 8017218:	fab1 f181 	clz	r1, r1
 801721c:	9a07      	ldr	r2, [sp, #28]
 801721e:	0949      	lsrs	r1, r1, #5
 8017220:	7011      	strb	r1, [r2, #0]
 8017222:	fab3 f383 	clz	r3, r3
 8017226:	9a08      	ldr	r2, [sp, #32]
 8017228:	095b      	lsrs	r3, r3, #5
 801722a:	2000      	movs	r0, #0
 801722c:	7013      	strb	r3, [r2, #0]
 801722e:	e001      	b.n	8017234 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8017230:	f640 0036 	movw	r0, #2102	@ 0x836
 8017234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017238:	f7fa fa1a 	bl	8011670 <rcutils_reset_error>
 801723c:	f640 0036 	movw	r0, #2102	@ 0x836
 8017240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017244:	2001      	movs	r0, #1
 8017246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801724a:	200b      	movs	r0, #11
 801724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017250:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017254:	4770      	bx	lr
 8017256:	bf00      	nop

08017258 <rcl_action_take_goal_request>:
 8017258:	2800      	cmp	r0, #0
 801725a:	d039      	beq.n	80172d0 <rcl_action_take_goal_request+0x78>
 801725c:	b570      	push	{r4, r5, r6, lr}
 801725e:	4604      	mov	r4, r0
 8017260:	6800      	ldr	r0, [r0, #0]
 8017262:	b380      	cbz	r0, 80172c6 <rcl_action_take_goal_request+0x6e>
 8017264:	460d      	mov	r5, r1
 8017266:	4616      	mov	r6, r2
 8017268:	f7fe fd00 	bl	8015c6c <rcl_service_is_valid>
 801726c:	b330      	cbz	r0, 80172bc <rcl_action_take_goal_request+0x64>
 801726e:	6820      	ldr	r0, [r4, #0]
 8017270:	3004      	adds	r0, #4
 8017272:	f7fe fcfb 	bl	8015c6c <rcl_service_is_valid>
 8017276:	b308      	cbz	r0, 80172bc <rcl_action_take_goal_request+0x64>
 8017278:	6820      	ldr	r0, [r4, #0]
 801727a:	3008      	adds	r0, #8
 801727c:	f7fe fcf6 	bl	8015c6c <rcl_service_is_valid>
 8017280:	b1e0      	cbz	r0, 80172bc <rcl_action_take_goal_request+0x64>
 8017282:	6820      	ldr	r0, [r4, #0]
 8017284:	300c      	adds	r0, #12
 8017286:	f7f9 fa6b 	bl	8010760 <rcl_publisher_is_valid>
 801728a:	b1b8      	cbz	r0, 80172bc <rcl_action_take_goal_request+0x64>
 801728c:	6820      	ldr	r0, [r4, #0]
 801728e:	3010      	adds	r0, #16
 8017290:	f7f9 fa66 	bl	8010760 <rcl_publisher_is_valid>
 8017294:	b190      	cbz	r0, 80172bc <rcl_action_take_goal_request+0x64>
 8017296:	b1cd      	cbz	r5, 80172cc <rcl_action_take_goal_request+0x74>
 8017298:	b1c6      	cbz	r6, 80172cc <rcl_action_take_goal_request+0x74>
 801729a:	6820      	ldr	r0, [r4, #0]
 801729c:	4632      	mov	r2, r6
 801729e:	4629      	mov	r1, r5
 80172a0:	f7fe fc8c 	bl	8015bbc <rcl_take_request>
 80172a4:	b148      	cbz	r0, 80172ba <rcl_action_take_goal_request+0x62>
 80172a6:	280a      	cmp	r0, #10
 80172a8:	d007      	beq.n	80172ba <rcl_action_take_goal_request+0x62>
 80172aa:	f240 2259 	movw	r2, #601	@ 0x259
 80172ae:	f640 0399 	movw	r3, #2201	@ 0x899
 80172b2:	4290      	cmp	r0, r2
 80172b4:	bf0c      	ite	eq
 80172b6:	4618      	moveq	r0, r3
 80172b8:	2001      	movne	r0, #1
 80172ba:	bd70      	pop	{r4, r5, r6, pc}
 80172bc:	f7fa f9d8 	bl	8011670 <rcutils_reset_error>
 80172c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80172c4:	bd70      	pop	{r4, r5, r6, pc}
 80172c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80172ca:	bd70      	pop	{r4, r5, r6, pc}
 80172cc:	200b      	movs	r0, #11
 80172ce:	bd70      	pop	{r4, r5, r6, pc}
 80172d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80172d4:	4770      	bx	lr
 80172d6:	bf00      	nop

080172d8 <rcl_action_send_goal_response>:
 80172d8:	b390      	cbz	r0, 8017340 <rcl_action_send_goal_response+0x68>
 80172da:	b570      	push	{r4, r5, r6, lr}
 80172dc:	4604      	mov	r4, r0
 80172de:	6800      	ldr	r0, [r0, #0]
 80172e0:	b348      	cbz	r0, 8017336 <rcl_action_send_goal_response+0x5e>
 80172e2:	460d      	mov	r5, r1
 80172e4:	4616      	mov	r6, r2
 80172e6:	f7fe fcc1 	bl	8015c6c <rcl_service_is_valid>
 80172ea:	b1f8      	cbz	r0, 801732c <rcl_action_send_goal_response+0x54>
 80172ec:	6820      	ldr	r0, [r4, #0]
 80172ee:	3004      	adds	r0, #4
 80172f0:	f7fe fcbc 	bl	8015c6c <rcl_service_is_valid>
 80172f4:	b1d0      	cbz	r0, 801732c <rcl_action_send_goal_response+0x54>
 80172f6:	6820      	ldr	r0, [r4, #0]
 80172f8:	3008      	adds	r0, #8
 80172fa:	f7fe fcb7 	bl	8015c6c <rcl_service_is_valid>
 80172fe:	b1a8      	cbz	r0, 801732c <rcl_action_send_goal_response+0x54>
 8017300:	6820      	ldr	r0, [r4, #0]
 8017302:	300c      	adds	r0, #12
 8017304:	f7f9 fa2c 	bl	8010760 <rcl_publisher_is_valid>
 8017308:	b180      	cbz	r0, 801732c <rcl_action_send_goal_response+0x54>
 801730a:	6820      	ldr	r0, [r4, #0]
 801730c:	3010      	adds	r0, #16
 801730e:	f7f9 fa27 	bl	8010760 <rcl_publisher_is_valid>
 8017312:	b158      	cbz	r0, 801732c <rcl_action_send_goal_response+0x54>
 8017314:	b195      	cbz	r5, 801733c <rcl_action_send_goal_response+0x64>
 8017316:	b18e      	cbz	r6, 801733c <rcl_action_send_goal_response+0x64>
 8017318:	6820      	ldr	r0, [r4, #0]
 801731a:	4632      	mov	r2, r6
 801731c:	4629      	mov	r1, r5
 801731e:	f7fe fc8d 	bl	8015c3c <rcl_send_response>
 8017322:	b110      	cbz	r0, 801732a <rcl_action_send_goal_response+0x52>
 8017324:	2802      	cmp	r0, #2
 8017326:	bf18      	it	ne
 8017328:	2001      	movne	r0, #1
 801732a:	bd70      	pop	{r4, r5, r6, pc}
 801732c:	f7fa f9a0 	bl	8011670 <rcutils_reset_error>
 8017330:	f640 0098 	movw	r0, #2200	@ 0x898
 8017334:	bd70      	pop	{r4, r5, r6, pc}
 8017336:	f640 0098 	movw	r0, #2200	@ 0x898
 801733a:	bd70      	pop	{r4, r5, r6, pc}
 801733c:	200b      	movs	r0, #11
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	f640 0098 	movw	r0, #2200	@ 0x898
 8017344:	4770      	bx	lr
 8017346:	bf00      	nop

08017348 <rcl_action_take_result_request>:
 8017348:	2800      	cmp	r0, #0
 801734a:	d03a      	beq.n	80173c2 <rcl_action_take_result_request+0x7a>
 801734c:	b570      	push	{r4, r5, r6, lr}
 801734e:	4604      	mov	r4, r0
 8017350:	6800      	ldr	r0, [r0, #0]
 8017352:	b388      	cbz	r0, 80173b8 <rcl_action_take_result_request+0x70>
 8017354:	460d      	mov	r5, r1
 8017356:	4616      	mov	r6, r2
 8017358:	f7fe fc88 	bl	8015c6c <rcl_service_is_valid>
 801735c:	b338      	cbz	r0, 80173ae <rcl_action_take_result_request+0x66>
 801735e:	6820      	ldr	r0, [r4, #0]
 8017360:	3004      	adds	r0, #4
 8017362:	f7fe fc83 	bl	8015c6c <rcl_service_is_valid>
 8017366:	b310      	cbz	r0, 80173ae <rcl_action_take_result_request+0x66>
 8017368:	6820      	ldr	r0, [r4, #0]
 801736a:	3008      	adds	r0, #8
 801736c:	f7fe fc7e 	bl	8015c6c <rcl_service_is_valid>
 8017370:	b1e8      	cbz	r0, 80173ae <rcl_action_take_result_request+0x66>
 8017372:	6820      	ldr	r0, [r4, #0]
 8017374:	300c      	adds	r0, #12
 8017376:	f7f9 f9f3 	bl	8010760 <rcl_publisher_is_valid>
 801737a:	b1c0      	cbz	r0, 80173ae <rcl_action_take_result_request+0x66>
 801737c:	6820      	ldr	r0, [r4, #0]
 801737e:	3010      	adds	r0, #16
 8017380:	f7f9 f9ee 	bl	8010760 <rcl_publisher_is_valid>
 8017384:	b198      	cbz	r0, 80173ae <rcl_action_take_result_request+0x66>
 8017386:	b1d5      	cbz	r5, 80173be <rcl_action_take_result_request+0x76>
 8017388:	b1ce      	cbz	r6, 80173be <rcl_action_take_result_request+0x76>
 801738a:	6820      	ldr	r0, [r4, #0]
 801738c:	4632      	mov	r2, r6
 801738e:	4629      	mov	r1, r5
 8017390:	3008      	adds	r0, #8
 8017392:	f7fe fc13 	bl	8015bbc <rcl_take_request>
 8017396:	b148      	cbz	r0, 80173ac <rcl_action_take_result_request+0x64>
 8017398:	280a      	cmp	r0, #10
 801739a:	d007      	beq.n	80173ac <rcl_action_take_result_request+0x64>
 801739c:	f240 2259 	movw	r2, #601	@ 0x259
 80173a0:	f640 0399 	movw	r3, #2201	@ 0x899
 80173a4:	4290      	cmp	r0, r2
 80173a6:	bf0c      	ite	eq
 80173a8:	4618      	moveq	r0, r3
 80173aa:	2001      	movne	r0, #1
 80173ac:	bd70      	pop	{r4, r5, r6, pc}
 80173ae:	f7fa f95f 	bl	8011670 <rcutils_reset_error>
 80173b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80173b6:	bd70      	pop	{r4, r5, r6, pc}
 80173b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80173bc:	bd70      	pop	{r4, r5, r6, pc}
 80173be:	200b      	movs	r0, #11
 80173c0:	bd70      	pop	{r4, r5, r6, pc}
 80173c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80173c6:	4770      	bx	lr

080173c8 <rcl_action_take_cancel_request>:
 80173c8:	2800      	cmp	r0, #0
 80173ca:	d03a      	beq.n	8017442 <rcl_action_take_cancel_request+0x7a>
 80173cc:	b570      	push	{r4, r5, r6, lr}
 80173ce:	4604      	mov	r4, r0
 80173d0:	6800      	ldr	r0, [r0, #0]
 80173d2:	b388      	cbz	r0, 8017438 <rcl_action_take_cancel_request+0x70>
 80173d4:	460d      	mov	r5, r1
 80173d6:	4616      	mov	r6, r2
 80173d8:	f7fe fc48 	bl	8015c6c <rcl_service_is_valid>
 80173dc:	b338      	cbz	r0, 801742e <rcl_action_take_cancel_request+0x66>
 80173de:	6820      	ldr	r0, [r4, #0]
 80173e0:	3004      	adds	r0, #4
 80173e2:	f7fe fc43 	bl	8015c6c <rcl_service_is_valid>
 80173e6:	b310      	cbz	r0, 801742e <rcl_action_take_cancel_request+0x66>
 80173e8:	6820      	ldr	r0, [r4, #0]
 80173ea:	3008      	adds	r0, #8
 80173ec:	f7fe fc3e 	bl	8015c6c <rcl_service_is_valid>
 80173f0:	b1e8      	cbz	r0, 801742e <rcl_action_take_cancel_request+0x66>
 80173f2:	6820      	ldr	r0, [r4, #0]
 80173f4:	300c      	adds	r0, #12
 80173f6:	f7f9 f9b3 	bl	8010760 <rcl_publisher_is_valid>
 80173fa:	b1c0      	cbz	r0, 801742e <rcl_action_take_cancel_request+0x66>
 80173fc:	6820      	ldr	r0, [r4, #0]
 80173fe:	3010      	adds	r0, #16
 8017400:	f7f9 f9ae 	bl	8010760 <rcl_publisher_is_valid>
 8017404:	b198      	cbz	r0, 801742e <rcl_action_take_cancel_request+0x66>
 8017406:	b1d5      	cbz	r5, 801743e <rcl_action_take_cancel_request+0x76>
 8017408:	b1ce      	cbz	r6, 801743e <rcl_action_take_cancel_request+0x76>
 801740a:	6820      	ldr	r0, [r4, #0]
 801740c:	4632      	mov	r2, r6
 801740e:	4629      	mov	r1, r5
 8017410:	3004      	adds	r0, #4
 8017412:	f7fe fbd3 	bl	8015bbc <rcl_take_request>
 8017416:	b148      	cbz	r0, 801742c <rcl_action_take_cancel_request+0x64>
 8017418:	280a      	cmp	r0, #10
 801741a:	d007      	beq.n	801742c <rcl_action_take_cancel_request+0x64>
 801741c:	f240 2259 	movw	r2, #601	@ 0x259
 8017420:	f640 0399 	movw	r3, #2201	@ 0x899
 8017424:	4290      	cmp	r0, r2
 8017426:	bf0c      	ite	eq
 8017428:	4618      	moveq	r0, r3
 801742a:	2001      	movne	r0, #1
 801742c:	bd70      	pop	{r4, r5, r6, pc}
 801742e:	f7fa f91f 	bl	8011670 <rcutils_reset_error>
 8017432:	f640 0098 	movw	r0, #2200	@ 0x898
 8017436:	bd70      	pop	{r4, r5, r6, pc}
 8017438:	f640 0098 	movw	r0, #2200	@ 0x898
 801743c:	bd70      	pop	{r4, r5, r6, pc}
 801743e:	200b      	movs	r0, #11
 8017440:	bd70      	pop	{r4, r5, r6, pc}
 8017442:	f640 0098 	movw	r0, #2200	@ 0x898
 8017446:	4770      	bx	lr

08017448 <rcl_action_send_cancel_response>:
 8017448:	b398      	cbz	r0, 80174b2 <rcl_action_send_cancel_response+0x6a>
 801744a:	b570      	push	{r4, r5, r6, lr}
 801744c:	4604      	mov	r4, r0
 801744e:	6800      	ldr	r0, [r0, #0]
 8017450:	b350      	cbz	r0, 80174a8 <rcl_action_send_cancel_response+0x60>
 8017452:	460d      	mov	r5, r1
 8017454:	4616      	mov	r6, r2
 8017456:	f7fe fc09 	bl	8015c6c <rcl_service_is_valid>
 801745a:	b300      	cbz	r0, 801749e <rcl_action_send_cancel_response+0x56>
 801745c:	6820      	ldr	r0, [r4, #0]
 801745e:	3004      	adds	r0, #4
 8017460:	f7fe fc04 	bl	8015c6c <rcl_service_is_valid>
 8017464:	b1d8      	cbz	r0, 801749e <rcl_action_send_cancel_response+0x56>
 8017466:	6820      	ldr	r0, [r4, #0]
 8017468:	3008      	adds	r0, #8
 801746a:	f7fe fbff 	bl	8015c6c <rcl_service_is_valid>
 801746e:	b1b0      	cbz	r0, 801749e <rcl_action_send_cancel_response+0x56>
 8017470:	6820      	ldr	r0, [r4, #0]
 8017472:	300c      	adds	r0, #12
 8017474:	f7f9 f974 	bl	8010760 <rcl_publisher_is_valid>
 8017478:	b188      	cbz	r0, 801749e <rcl_action_send_cancel_response+0x56>
 801747a:	6820      	ldr	r0, [r4, #0]
 801747c:	3010      	adds	r0, #16
 801747e:	f7f9 f96f 	bl	8010760 <rcl_publisher_is_valid>
 8017482:	b160      	cbz	r0, 801749e <rcl_action_send_cancel_response+0x56>
 8017484:	b19d      	cbz	r5, 80174ae <rcl_action_send_cancel_response+0x66>
 8017486:	b196      	cbz	r6, 80174ae <rcl_action_send_cancel_response+0x66>
 8017488:	6820      	ldr	r0, [r4, #0]
 801748a:	4632      	mov	r2, r6
 801748c:	4629      	mov	r1, r5
 801748e:	3004      	adds	r0, #4
 8017490:	f7fe fbd4 	bl	8015c3c <rcl_send_response>
 8017494:	b110      	cbz	r0, 801749c <rcl_action_send_cancel_response+0x54>
 8017496:	2802      	cmp	r0, #2
 8017498:	bf18      	it	ne
 801749a:	2001      	movne	r0, #1
 801749c:	bd70      	pop	{r4, r5, r6, pc}
 801749e:	f7fa f8e7 	bl	8011670 <rcutils_reset_error>
 80174a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80174a6:	bd70      	pop	{r4, r5, r6, pc}
 80174a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80174ac:	bd70      	pop	{r4, r5, r6, pc}
 80174ae:	200b      	movs	r0, #11
 80174b0:	bd70      	pop	{r4, r5, r6, pc}
 80174b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80174b6:	4770      	bx	lr

080174b8 <rcl_action_wait_set_add_action_server>:
 80174b8:	2800      	cmp	r0, #0
 80174ba:	d04d      	beq.n	8017558 <rcl_action_wait_set_add_action_server+0xa0>
 80174bc:	b570      	push	{r4, r5, r6, lr}
 80174be:	460c      	mov	r4, r1
 80174c0:	b159      	cbz	r1, 80174da <rcl_action_wait_set_add_action_server+0x22>
 80174c2:	4605      	mov	r5, r0
 80174c4:	6808      	ldr	r0, [r1, #0]
 80174c6:	b140      	cbz	r0, 80174da <rcl_action_wait_set_add_action_server+0x22>
 80174c8:	4616      	mov	r6, r2
 80174ca:	f7fe fbcf 	bl	8015c6c <rcl_service_is_valid>
 80174ce:	b120      	cbz	r0, 80174da <rcl_action_wait_set_add_action_server+0x22>
 80174d0:	6820      	ldr	r0, [r4, #0]
 80174d2:	3004      	adds	r0, #4
 80174d4:	f7fe fbca 	bl	8015c6c <rcl_service_is_valid>
 80174d8:	b910      	cbnz	r0, 80174e0 <rcl_action_wait_set_add_action_server+0x28>
 80174da:	f640 0098 	movw	r0, #2200	@ 0x898
 80174de:	bd70      	pop	{r4, r5, r6, pc}
 80174e0:	6820      	ldr	r0, [r4, #0]
 80174e2:	3008      	adds	r0, #8
 80174e4:	f7fe fbc2 	bl	8015c6c <rcl_service_is_valid>
 80174e8:	2800      	cmp	r0, #0
 80174ea:	d0f6      	beq.n	80174da <rcl_action_wait_set_add_action_server+0x22>
 80174ec:	6820      	ldr	r0, [r4, #0]
 80174ee:	300c      	adds	r0, #12
 80174f0:	f7f9 f94e 	bl	8010790 <rcl_publisher_is_valid_except_context>
 80174f4:	2800      	cmp	r0, #0
 80174f6:	d0f0      	beq.n	80174da <rcl_action_wait_set_add_action_server+0x22>
 80174f8:	6820      	ldr	r0, [r4, #0]
 80174fa:	3010      	adds	r0, #16
 80174fc:	f7f9 f948 	bl	8010790 <rcl_publisher_is_valid_except_context>
 8017500:	2800      	cmp	r0, #0
 8017502:	d0ea      	beq.n	80174da <rcl_action_wait_set_add_action_server+0x22>
 8017504:	6821      	ldr	r1, [r4, #0]
 8017506:	4628      	mov	r0, r5
 8017508:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801750c:	f7ff face 	bl	8016aac <rcl_wait_set_add_service>
 8017510:	2800      	cmp	r0, #0
 8017512:	d1e4      	bne.n	80174de <rcl_action_wait_set_add_action_server+0x26>
 8017514:	6821      	ldr	r1, [r4, #0]
 8017516:	4628      	mov	r0, r5
 8017518:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801751c:	3104      	adds	r1, #4
 801751e:	f7ff fac5 	bl	8016aac <rcl_wait_set_add_service>
 8017522:	2800      	cmp	r0, #0
 8017524:	d1db      	bne.n	80174de <rcl_action_wait_set_add_action_server+0x26>
 8017526:	6821      	ldr	r1, [r4, #0]
 8017528:	4628      	mov	r0, r5
 801752a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801752e:	3108      	adds	r1, #8
 8017530:	f7ff fabc 	bl	8016aac <rcl_wait_set_add_service>
 8017534:	2800      	cmp	r0, #0
 8017536:	d1d2      	bne.n	80174de <rcl_action_wait_set_add_action_server+0x26>
 8017538:	6821      	ldr	r1, [r4, #0]
 801753a:	4628      	mov	r0, r5
 801753c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8017540:	3114      	adds	r1, #20
 8017542:	f7ff fa57 	bl	80169f4 <rcl_wait_set_add_timer>
 8017546:	2800      	cmp	r0, #0
 8017548:	d1c9      	bne.n	80174de <rcl_action_wait_set_add_action_server+0x26>
 801754a:	2e00      	cmp	r6, #0
 801754c:	d0c7      	beq.n	80174de <rcl_action_wait_set_add_action_server+0x26>
 801754e:	6823      	ldr	r3, [r4, #0]
 8017550:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8017554:	6033      	str	r3, [r6, #0]
 8017556:	bd70      	pop	{r4, r5, r6, pc}
 8017558:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801755c:	4770      	bx	lr
 801755e:	bf00      	nop

08017560 <rcl_action_server_wait_set_get_entities_ready>:
 8017560:	2800      	cmp	r0, #0
 8017562:	d05a      	beq.n	801761a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8017564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017566:	460c      	mov	r4, r1
 8017568:	b161      	cbz	r1, 8017584 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801756a:	4605      	mov	r5, r0
 801756c:	6808      	ldr	r0, [r1, #0]
 801756e:	b148      	cbz	r0, 8017584 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017570:	4616      	mov	r6, r2
 8017572:	461f      	mov	r7, r3
 8017574:	f7fe fb7a 	bl	8015c6c <rcl_service_is_valid>
 8017578:	b120      	cbz	r0, 8017584 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801757a:	6820      	ldr	r0, [r4, #0]
 801757c:	3004      	adds	r0, #4
 801757e:	f7fe fb75 	bl	8015c6c <rcl_service_is_valid>
 8017582:	b910      	cbnz	r0, 801758a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8017584:	f640 0098 	movw	r0, #2200	@ 0x898
 8017588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801758a:	6820      	ldr	r0, [r4, #0]
 801758c:	3008      	adds	r0, #8
 801758e:	f7fe fb6d 	bl	8015c6c <rcl_service_is_valid>
 8017592:	2800      	cmp	r0, #0
 8017594:	d0f6      	beq.n	8017584 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8017596:	6820      	ldr	r0, [r4, #0]
 8017598:	300c      	adds	r0, #12
 801759a:	f7f9 f8f9 	bl	8010790 <rcl_publisher_is_valid_except_context>
 801759e:	2800      	cmp	r0, #0
 80175a0:	d0f0      	beq.n	8017584 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80175a2:	6820      	ldr	r0, [r4, #0]
 80175a4:	3010      	adds	r0, #16
 80175a6:	f7f9 f8f3 	bl	8010790 <rcl_publisher_is_valid_except_context>
 80175aa:	2800      	cmp	r0, #0
 80175ac:	d0ea      	beq.n	8017584 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80175ae:	b3be      	cbz	r6, 8017620 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80175b0:	b3b7      	cbz	r7, 8017620 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80175b2:	9b06      	ldr	r3, [sp, #24]
 80175b4:	b3a3      	cbz	r3, 8017620 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80175b6:	9b07      	ldr	r3, [sp, #28]
 80175b8:	b393      	cbz	r3, 8017620 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80175ba:	6821      	ldr	r1, [r4, #0]
 80175bc:	692a      	ldr	r2, [r5, #16]
 80175be:	6a2c      	ldr	r4, [r5, #32]
 80175c0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80175c4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80175c8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80175cc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80175d0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80175d4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80175d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80175dc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80175e0:	1a64      	subs	r4, r4, r1
 80175e2:	fab4 f484 	clz	r4, r4
 80175e6:	0964      	lsrs	r4, r4, #5
 80175e8:	7034      	strb	r4, [r6, #0]
 80175ea:	1d0c      	adds	r4, r1, #4
 80175ec:	1b1b      	subs	r3, r3, r4
 80175ee:	fab3 f383 	clz	r3, r3
 80175f2:	095b      	lsrs	r3, r3, #5
 80175f4:	f101 0408 	add.w	r4, r1, #8
 80175f8:	703b      	strb	r3, [r7, #0]
 80175fa:	f101 0314 	add.w	r3, r1, #20
 80175fe:	1b01      	subs	r1, r0, r4
 8017600:	1ad3      	subs	r3, r2, r3
 8017602:	fab1 f181 	clz	r1, r1
 8017606:	9a06      	ldr	r2, [sp, #24]
 8017608:	0949      	lsrs	r1, r1, #5
 801760a:	7011      	strb	r1, [r2, #0]
 801760c:	fab3 f383 	clz	r3, r3
 8017610:	9a07      	ldr	r2, [sp, #28]
 8017612:	095b      	lsrs	r3, r3, #5
 8017614:	2000      	movs	r0, #0
 8017616:	7013      	strb	r3, [r2, #0]
 8017618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801761a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801761e:	4770      	bx	lr
 8017620:	200b      	movs	r0, #11
 8017622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017624 <_execute_event_handler>:
 8017624:	2002      	movs	r0, #2
 8017626:	4770      	bx	lr

08017628 <_cancel_goal_event_handler>:
 8017628:	2003      	movs	r0, #3
 801762a:	4770      	bx	lr

0801762c <_succeed_event_handler>:
 801762c:	2004      	movs	r0, #4
 801762e:	4770      	bx	lr

08017630 <_abort_event_handler>:
 8017630:	2006      	movs	r0, #6
 8017632:	4770      	bx	lr

08017634 <_canceled_event_handler>:
 8017634:	2005      	movs	r0, #5
 8017636:	4770      	bx	lr

08017638 <rcl_action_transition_goal_state>:
 8017638:	b2c2      	uxtb	r2, r0
 801763a:	2a06      	cmp	r2, #6
 801763c:	d80c      	bhi.n	8017658 <rcl_action_transition_goal_state+0x20>
 801763e:	2904      	cmp	r1, #4
 8017640:	d80a      	bhi.n	8017658 <rcl_action_transition_goal_state+0x20>
 8017642:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8017646:	b410      	push	{r4}
 8017648:	1853      	adds	r3, r2, r1
 801764a:	4c06      	ldr	r4, [pc, #24]	@ (8017664 <rcl_action_transition_goal_state+0x2c>)
 801764c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017650:	b123      	cbz	r3, 801765c <rcl_action_transition_goal_state+0x24>
 8017652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017656:	4718      	bx	r3
 8017658:	2000      	movs	r0, #0
 801765a:	4770      	bx	lr
 801765c:	2000      	movs	r0, #0
 801765e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017662:	4770      	bx	lr
 8017664:	0801dc94 	.word	0x0801dc94

08017668 <rcl_action_get_zero_initialized_cancel_response>:
 8017668:	b510      	push	{r4, lr}
 801766a:	4c07      	ldr	r4, [pc, #28]	@ (8017688 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801766c:	4686      	mov	lr, r0
 801766e:	4684      	mov	ip, r0
 8017670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017672:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017678:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801767c:	6823      	ldr	r3, [r4, #0]
 801767e:	f8cc 3000 	str.w	r3, [ip]
 8017682:	4670      	mov	r0, lr
 8017684:	bd10      	pop	{r4, pc}
 8017686:	bf00      	nop
 8017688:	0801dd20 	.word	0x0801dd20

0801768c <rclc_action_send_result_request>:
 801768c:	b1d0      	cbz	r0, 80176c4 <rclc_action_send_result_request+0x38>
 801768e:	b500      	push	{lr}
 8017690:	4684      	mov	ip, r0
 8017692:	b087      	sub	sp, #28
 8017694:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017698:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801769c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80176a0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80176a4:	f10d 0e08 	add.w	lr, sp, #8
 80176a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80176ac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80176b0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80176b4:	a902      	add	r1, sp, #8
 80176b6:	3010      	adds	r0, #16
 80176b8:	f7ff fbda 	bl	8016e70 <rcl_action_send_result_request>
 80176bc:	b920      	cbnz	r0, 80176c8 <rclc_action_send_result_request+0x3c>
 80176be:	b007      	add	sp, #28
 80176c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80176c4:	200b      	movs	r0, #11
 80176c6:	4770      	bx	lr
 80176c8:	9001      	str	r0, [sp, #4]
 80176ca:	f7f9 ffd1 	bl	8011670 <rcutils_reset_error>
 80176ce:	9801      	ldr	r0, [sp, #4]
 80176d0:	b007      	add	sp, #28
 80176d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80176d6:	bf00      	nop

080176d8 <rclc_action_take_goal_handle>:
 80176d8:	b160      	cbz	r0, 80176f4 <rclc_action_take_goal_handle+0x1c>
 80176da:	6883      	ldr	r3, [r0, #8]
 80176dc:	b143      	cbz	r3, 80176f0 <rclc_action_take_goal_handle+0x18>
 80176de:	6819      	ldr	r1, [r3, #0]
 80176e0:	6081      	str	r1, [r0, #8]
 80176e2:	2200      	movs	r2, #0
 80176e4:	721a      	strb	r2, [r3, #8]
 80176e6:	68c1      	ldr	r1, [r0, #12]
 80176e8:	6019      	str	r1, [r3, #0]
 80176ea:	621a      	str	r2, [r3, #32]
 80176ec:	849a      	strh	r2, [r3, #36]	@ 0x24
 80176ee:	60c3      	str	r3, [r0, #12]
 80176f0:	4618      	mov	r0, r3
 80176f2:	4770      	bx	lr
 80176f4:	4603      	mov	r3, r0
 80176f6:	e7fb      	b.n	80176f0 <rclc_action_take_goal_handle+0x18>

080176f8 <rclc_action_remove_used_goal_handle>:
 80176f8:	b180      	cbz	r0, 801771c <rclc_action_remove_used_goal_handle+0x24>
 80176fa:	b179      	cbz	r1, 801771c <rclc_action_remove_used_goal_handle+0x24>
 80176fc:	68c3      	ldr	r3, [r0, #12]
 80176fe:	4299      	cmp	r1, r3
 8017700:	d00d      	beq.n	801771e <rclc_action_remove_used_goal_handle+0x26>
 8017702:	b12b      	cbz	r3, 8017710 <rclc_action_remove_used_goal_handle+0x18>
 8017704:	681a      	ldr	r2, [r3, #0]
 8017706:	4291      	cmp	r1, r2
 8017708:	d003      	beq.n	8017712 <rclc_action_remove_used_goal_handle+0x1a>
 801770a:	4613      	mov	r3, r2
 801770c:	2b00      	cmp	r3, #0
 801770e:	d1f9      	bne.n	8017704 <rclc_action_remove_used_goal_handle+0xc>
 8017710:	4770      	bx	lr
 8017712:	680a      	ldr	r2, [r1, #0]
 8017714:	601a      	str	r2, [r3, #0]
 8017716:	6883      	ldr	r3, [r0, #8]
 8017718:	600b      	str	r3, [r1, #0]
 801771a:	6081      	str	r1, [r0, #8]
 801771c:	4770      	bx	lr
 801771e:	680b      	ldr	r3, [r1, #0]
 8017720:	60c3      	str	r3, [r0, #12]
 8017722:	e7f8      	b.n	8017716 <rclc_action_remove_used_goal_handle+0x1e>

08017724 <rclc_action_find_goal_handle_by_uuid>:
 8017724:	b538      	push	{r3, r4, r5, lr}
 8017726:	b180      	cbz	r0, 801774a <rclc_action_find_goal_handle_by_uuid+0x26>
 8017728:	460d      	mov	r5, r1
 801772a:	b181      	cbz	r1, 801774e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801772c:	68c4      	ldr	r4, [r0, #12]
 801772e:	b914      	cbnz	r4, 8017736 <rclc_action_find_goal_handle_by_uuid+0x12>
 8017730:	e009      	b.n	8017746 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017732:	6824      	ldr	r4, [r4, #0]
 8017734:	b13c      	cbz	r4, 8017746 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017736:	f104 0009 	add.w	r0, r4, #9
 801773a:	2210      	movs	r2, #16
 801773c:	4629      	mov	r1, r5
 801773e:	f004 fd4f 	bl	801c1e0 <memcmp>
 8017742:	2800      	cmp	r0, #0
 8017744:	d1f5      	bne.n	8017732 <rclc_action_find_goal_handle_by_uuid+0xe>
 8017746:	4620      	mov	r0, r4
 8017748:	bd38      	pop	{r3, r4, r5, pc}
 801774a:	4604      	mov	r4, r0
 801774c:	e7fb      	b.n	8017746 <rclc_action_find_goal_handle_by_uuid+0x22>
 801774e:	460c      	mov	r4, r1
 8017750:	e7f9      	b.n	8017746 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017752:	bf00      	nop

08017754 <rclc_action_find_first_handle_by_status>:
 8017754:	b140      	cbz	r0, 8017768 <rclc_action_find_first_handle_by_status+0x14>
 8017756:	68c0      	ldr	r0, [r0, #12]
 8017758:	b910      	cbnz	r0, 8017760 <rclc_action_find_first_handle_by_status+0xc>
 801775a:	e005      	b.n	8017768 <rclc_action_find_first_handle_by_status+0x14>
 801775c:	6800      	ldr	r0, [r0, #0]
 801775e:	b118      	cbz	r0, 8017768 <rclc_action_find_first_handle_by_status+0x14>
 8017760:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017764:	428b      	cmp	r3, r1
 8017766:	d1f9      	bne.n	801775c <rclc_action_find_first_handle_by_status+0x8>
 8017768:	4770      	bx	lr
 801776a:	bf00      	nop

0801776c <rclc_action_find_first_terminated_handle>:
 801776c:	b140      	cbz	r0, 8017780 <rclc_action_find_first_terminated_handle+0x14>
 801776e:	68c0      	ldr	r0, [r0, #12]
 8017770:	b910      	cbnz	r0, 8017778 <rclc_action_find_first_terminated_handle+0xc>
 8017772:	e005      	b.n	8017780 <rclc_action_find_first_terminated_handle+0x14>
 8017774:	6800      	ldr	r0, [r0, #0]
 8017776:	b118      	cbz	r0, 8017780 <rclc_action_find_first_terminated_handle+0x14>
 8017778:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801777c:	2b03      	cmp	r3, #3
 801777e:	ddf9      	ble.n	8017774 <rclc_action_find_first_terminated_handle+0x8>
 8017780:	4770      	bx	lr
 8017782:	bf00      	nop

08017784 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8017784:	b170      	cbz	r0, 80177a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017786:	68c0      	ldr	r0, [r0, #12]
 8017788:	b160      	cbz	r0, 80177a4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801778a:	b410      	push	{r4}
 801778c:	e001      	b.n	8017792 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801778e:	6800      	ldr	r0, [r0, #0]
 8017790:	b128      	cbz	r0, 801779e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8017792:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8017796:	4299      	cmp	r1, r3
 8017798:	bf08      	it	eq
 801779a:	4294      	cmpeq	r4, r2
 801779c:	d1f7      	bne.n	801778e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801779e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177a2:	4770      	bx	lr
 80177a4:	4770      	bx	lr
 80177a6:	bf00      	nop

080177a8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80177a8:	b170      	cbz	r0, 80177c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80177aa:	68c0      	ldr	r0, [r0, #12]
 80177ac:	b160      	cbz	r0, 80177c8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80177ae:	b410      	push	{r4}
 80177b0:	e001      	b.n	80177b6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80177b2:	6800      	ldr	r0, [r0, #0]
 80177b4:	b128      	cbz	r0, 80177c2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80177b6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80177ba:	4299      	cmp	r1, r3
 80177bc:	bf08      	it	eq
 80177be:	4294      	cmpeq	r4, r2
 80177c0:	d1f7      	bne.n	80177b2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80177c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177c6:	4770      	bx	lr
 80177c8:	4770      	bx	lr
 80177ca:	bf00      	nop

080177cc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80177cc:	b170      	cbz	r0, 80177ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80177ce:	68c0      	ldr	r0, [r0, #12]
 80177d0:	b160      	cbz	r0, 80177ec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80177d2:	b410      	push	{r4}
 80177d4:	e001      	b.n	80177da <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80177d6:	6800      	ldr	r0, [r0, #0]
 80177d8:	b128      	cbz	r0, 80177e6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80177da:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80177de:	4299      	cmp	r1, r3
 80177e0:	bf08      	it	eq
 80177e2:	4294      	cmpeq	r4, r2
 80177e4:	d1f7      	bne.n	80177d6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80177e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177ea:	4770      	bx	lr
 80177ec:	4770      	bx	lr
 80177ee:	bf00      	nop

080177f0 <rclc_action_find_first_handle_with_goal_response>:
 80177f0:	b140      	cbz	r0, 8017804 <rclc_action_find_first_handle_with_goal_response+0x14>
 80177f2:	68c0      	ldr	r0, [r0, #12]
 80177f4:	b910      	cbnz	r0, 80177fc <rclc_action_find_first_handle_with_goal_response+0xc>
 80177f6:	e005      	b.n	8017804 <rclc_action_find_first_handle_with_goal_response+0x14>
 80177f8:	6800      	ldr	r0, [r0, #0]
 80177fa:	b118      	cbz	r0, 8017804 <rclc_action_find_first_handle_with_goal_response+0x14>
 80177fc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d0f9      	beq.n	80177f8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop

08017808 <rclc_action_find_first_handle_with_result_response>:
 8017808:	b140      	cbz	r0, 801781c <rclc_action_find_first_handle_with_result_response+0x14>
 801780a:	68c0      	ldr	r0, [r0, #12]
 801780c:	b910      	cbnz	r0, 8017814 <rclc_action_find_first_handle_with_result_response+0xc>
 801780e:	e005      	b.n	801781c <rclc_action_find_first_handle_with_result_response+0x14>
 8017810:	6800      	ldr	r0, [r0, #0]
 8017812:	b118      	cbz	r0, 801781c <rclc_action_find_first_handle_with_result_response+0x14>
 8017814:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8017818:	2b00      	cmp	r3, #0
 801781a:	d0f9      	beq.n	8017810 <rclc_action_find_first_handle_with_result_response+0x8>
 801781c:	4770      	bx	lr
 801781e:	bf00      	nop

08017820 <rclc_action_server_response_goal_request>:
 8017820:	b198      	cbz	r0, 801784a <rclc_action_server_response_goal_request+0x2a>
 8017822:	b510      	push	{r4, lr}
 8017824:	6844      	ldr	r4, [r0, #4]
 8017826:	b086      	sub	sp, #24
 8017828:	2200      	movs	r2, #0
 801782a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801782e:	460b      	mov	r3, r1
 8017830:	9205      	str	r2, [sp, #20]
 8017832:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8017836:	aa03      	add	r2, sp, #12
 8017838:	f104 0010 	add.w	r0, r4, #16
 801783c:	f88d 300c 	strb.w	r3, [sp, #12]
 8017840:	f7ff fd4a 	bl	80172d8 <rcl_action_send_goal_response>
 8017844:	b918      	cbnz	r0, 801784e <rclc_action_server_response_goal_request+0x2e>
 8017846:	b006      	add	sp, #24
 8017848:	bd10      	pop	{r4, pc}
 801784a:	200b      	movs	r0, #11
 801784c:	4770      	bx	lr
 801784e:	9001      	str	r0, [sp, #4]
 8017850:	f7f9 ff0e 	bl	8011670 <rcutils_reset_error>
 8017854:	9801      	ldr	r0, [sp, #4]
 8017856:	b006      	add	sp, #24
 8017858:	bd10      	pop	{r4, pc}
 801785a:	bf00      	nop
 801785c:	0000      	movs	r0, r0
	...

08017860 <rclc_action_server_goal_cancel_accept>:
 8017860:	b310      	cbz	r0, 80178a8 <rclc_action_server_goal_cancel_accept+0x48>
 8017862:	b510      	push	{r4, lr}
 8017864:	b090      	sub	sp, #64	@ 0x40
 8017866:	4604      	mov	r4, r0
 8017868:	a806      	add	r0, sp, #24
 801786a:	f7ff fefd 	bl	8017668 <rcl_action_get_zero_initialized_cancel_response>
 801786e:	2300      	movs	r3, #0
 8017870:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8017874:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8017878:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801787c:	f88d 3018 	strb.w	r3, [sp, #24]
 8017880:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8017884:	f8cd d01c 	str.w	sp, [sp, #28]
 8017888:	46ec      	mov	ip, sp
 801788a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801788e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80178b0 <rclc_action_server_goal_cancel_accept+0x50>
 8017892:	6860      	ldr	r0, [r4, #4]
 8017894:	aa06      	add	r2, sp, #24
 8017896:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801789a:	3010      	adds	r0, #16
 801789c:	ed8d 7b08 	vstr	d7, [sp, #32]
 80178a0:	f7ff fdd2 	bl	8017448 <rcl_action_send_cancel_response>
 80178a4:	b010      	add	sp, #64	@ 0x40
 80178a6:	bd10      	pop	{r4, pc}
 80178a8:	200b      	movs	r0, #11
 80178aa:	4770      	bx	lr
 80178ac:	f3af 8000 	nop.w
 80178b0:	00000001 	.word	0x00000001
 80178b4:	00000001 	.word	0x00000001

080178b8 <rclc_action_server_goal_cancel_reject>:
 80178b8:	b082      	sub	sp, #8
 80178ba:	b530      	push	{r4, r5, lr}
 80178bc:	b08b      	sub	sp, #44	@ 0x2c
 80178be:	ac0e      	add	r4, sp, #56	@ 0x38
 80178c0:	e884 000c 	stmia.w	r4, {r2, r3}
 80178c4:	b188      	cbz	r0, 80178ea <rclc_action_server_goal_cancel_reject+0x32>
 80178c6:	4604      	mov	r4, r0
 80178c8:	a801      	add	r0, sp, #4
 80178ca:	460d      	mov	r5, r1
 80178cc:	f7ff fecc 	bl	8017668 <rcl_action_get_zero_initialized_cancel_response>
 80178d0:	aa01      	add	r2, sp, #4
 80178d2:	a90e      	add	r1, sp, #56	@ 0x38
 80178d4:	f104 0010 	add.w	r0, r4, #16
 80178d8:	f88d 5004 	strb.w	r5, [sp, #4]
 80178dc:	f7ff fdb4 	bl	8017448 <rcl_action_send_cancel_response>
 80178e0:	b00b      	add	sp, #44	@ 0x2c
 80178e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178e6:	b002      	add	sp, #8
 80178e8:	4770      	bx	lr
 80178ea:	200b      	movs	r0, #11
 80178ec:	b00b      	add	sp, #44	@ 0x2c
 80178ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178f2:	b002      	add	sp, #8
 80178f4:	4770      	bx	lr
 80178f6:	bf00      	nop

080178f8 <__atomic_load_8>:
 80178f8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80178fc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017900:	4a15      	ldr	r2, [pc, #84]	@ (8017958 <__atomic_load_8+0x60>)
 8017902:	4b16      	ldr	r3, [pc, #88]	@ (801795c <__atomic_load_8+0x64>)
 8017904:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017908:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801790c:	fb02 f101 	mul.w	r1, r2, r1
 8017910:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017914:	fba3 2301 	umull	r2, r3, r3, r1
 8017918:	091b      	lsrs	r3, r3, #4
 801791a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801791e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8017922:	b4d0      	push	{r4, r6, r7}
 8017924:	4c0e      	ldr	r4, [pc, #56]	@ (8017960 <__atomic_load_8+0x68>)
 8017926:	1ac9      	subs	r1, r1, r3
 8017928:	1862      	adds	r2, r4, r1
 801792a:	f04f 0c01 	mov.w	ip, #1
 801792e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8017932:	e8c2 cf46 	strexb	r6, ip, [r2]
 8017936:	2e00      	cmp	r6, #0
 8017938:	d1f9      	bne.n	801792e <__atomic_load_8+0x36>
 801793a:	f3bf 8f5b 	dmb	ish
 801793e:	b2db      	uxtb	r3, r3
 8017940:	2b00      	cmp	r3, #0
 8017942:	d1f4      	bne.n	801792e <__atomic_load_8+0x36>
 8017944:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017948:	f3bf 8f5b 	dmb	ish
 801794c:	5463      	strb	r3, [r4, r1]
 801794e:	4630      	mov	r0, r6
 8017950:	4639      	mov	r1, r7
 8017952:	bcd0      	pop	{r4, r6, r7}
 8017954:	4770      	bx	lr
 8017956:	bf00      	nop
 8017958:	27d4eb2d 	.word	0x27d4eb2d
 801795c:	b21642c9 	.word	0xb21642c9
 8017960:	2000e608 	.word	0x2000e608

08017964 <__atomic_store_8>:
 8017964:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017968:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801796c:	b570      	push	{r4, r5, r6, lr}
 801796e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017972:	4c14      	ldr	r4, [pc, #80]	@ (80179c4 <__atomic_store_8+0x60>)
 8017974:	4d14      	ldr	r5, [pc, #80]	@ (80179c8 <__atomic_store_8+0x64>)
 8017976:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801797a:	fb04 f101 	mul.w	r1, r4, r1
 801797e:	4c13      	ldr	r4, [pc, #76]	@ (80179cc <__atomic_store_8+0x68>)
 8017980:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017984:	fba4 4e01 	umull	r4, lr, r4, r1
 8017988:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801798c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8017990:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8017994:	eba1 0e0e 	sub.w	lr, r1, lr
 8017998:	eb05 0c0e 	add.w	ip, r5, lr
 801799c:	f04f 0401 	mov.w	r4, #1
 80179a0:	e8dc 1f4f 	ldrexb	r1, [ip]
 80179a4:	e8cc 4f46 	strexb	r6, r4, [ip]
 80179a8:	2e00      	cmp	r6, #0
 80179aa:	d1f9      	bne.n	80179a0 <__atomic_store_8+0x3c>
 80179ac:	f3bf 8f5b 	dmb	ish
 80179b0:	b2c9      	uxtb	r1, r1
 80179b2:	2900      	cmp	r1, #0
 80179b4:	d1f4      	bne.n	80179a0 <__atomic_store_8+0x3c>
 80179b6:	e9c0 2300 	strd	r2, r3, [r0]
 80179ba:	f3bf 8f5b 	dmb	ish
 80179be:	f805 100e 	strb.w	r1, [r5, lr]
 80179c2:	bd70      	pop	{r4, r5, r6, pc}
 80179c4:	27d4eb2d 	.word	0x27d4eb2d
 80179c8:	2000e608 	.word	0x2000e608
 80179cc:	b21642c9 	.word	0xb21642c9

080179d0 <__atomic_exchange_8>:
 80179d0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80179d4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80179d8:	4916      	ldr	r1, [pc, #88]	@ (8017a34 <__atomic_exchange_8+0x64>)
 80179da:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80179de:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80179e2:	fb01 fc0c 	mul.w	ip, r1, ip
 80179e6:	4914      	ldr	r1, [pc, #80]	@ (8017a38 <__atomic_exchange_8+0x68>)
 80179e8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80179ec:	b570      	push	{r4, r5, r6, lr}
 80179ee:	4605      	mov	r5, r0
 80179f0:	fba1 010c 	umull	r0, r1, r1, ip
 80179f4:	0909      	lsrs	r1, r1, #4
 80179f6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80179fa:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80179fe:	4e0f      	ldr	r6, [pc, #60]	@ (8017a3c <__atomic_exchange_8+0x6c>)
 8017a00:	ebac 0c01 	sub.w	ip, ip, r1
 8017a04:	eb06 010c 	add.w	r1, r6, ip
 8017a08:	f04f 0e01 	mov.w	lr, #1
 8017a0c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8017a10:	e8c1 ef40 	strexb	r0, lr, [r1]
 8017a14:	2800      	cmp	r0, #0
 8017a16:	d1f9      	bne.n	8017a0c <__atomic_exchange_8+0x3c>
 8017a18:	f3bf 8f5b 	dmb	ish
 8017a1c:	b2e4      	uxtb	r4, r4
 8017a1e:	2c00      	cmp	r4, #0
 8017a20:	d1f4      	bne.n	8017a0c <__atomic_exchange_8+0x3c>
 8017a22:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017a26:	e9c5 2300 	strd	r2, r3, [r5]
 8017a2a:	f3bf 8f5b 	dmb	ish
 8017a2e:	f806 400c 	strb.w	r4, [r6, ip]
 8017a32:	bd70      	pop	{r4, r5, r6, pc}
 8017a34:	27d4eb2d 	.word	0x27d4eb2d
 8017a38:	b21642c9 	.word	0xb21642c9
 8017a3c:	2000e608 	.word	0x2000e608

08017a40 <rcutils_get_env>:
 8017a40:	b168      	cbz	r0, 8017a5e <rcutils_get_env+0x1e>
 8017a42:	b510      	push	{r4, lr}
 8017a44:	460c      	mov	r4, r1
 8017a46:	b129      	cbz	r1, 8017a54 <rcutils_get_env+0x14>
 8017a48:	f004 f820 	bl	801ba8c <getenv>
 8017a4c:	b120      	cbz	r0, 8017a58 <rcutils_get_env+0x18>
 8017a4e:	6020      	str	r0, [r4, #0]
 8017a50:	2000      	movs	r0, #0
 8017a52:	bd10      	pop	{r4, pc}
 8017a54:	4803      	ldr	r0, [pc, #12]	@ (8017a64 <rcutils_get_env+0x24>)
 8017a56:	bd10      	pop	{r4, pc}
 8017a58:	4b03      	ldr	r3, [pc, #12]	@ (8017a68 <rcutils_get_env+0x28>)
 8017a5a:	6023      	str	r3, [r4, #0]
 8017a5c:	bd10      	pop	{r4, pc}
 8017a5e:	4803      	ldr	r0, [pc, #12]	@ (8017a6c <rcutils_get_env+0x2c>)
 8017a60:	4770      	bx	lr
 8017a62:	bf00      	nop
 8017a64:	0801d638 	.word	0x0801d638
 8017a68:	0801d75c 	.word	0x0801d75c
 8017a6c:	0801d61c 	.word	0x0801d61c

08017a70 <rcutils_format_string_limit>:
 8017a70:	b40f      	push	{r0, r1, r2, r3}
 8017a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a74:	b083      	sub	sp, #12
 8017a76:	ac08      	add	r4, sp, #32
 8017a78:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017a7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017a7e:	b34e      	cbz	r6, 8017ad4 <rcutils_format_string_limit+0x64>
 8017a80:	a808      	add	r0, sp, #32
 8017a82:	f7f9 fdd1 	bl	8011628 <rcutils_allocator_is_valid>
 8017a86:	b328      	cbz	r0, 8017ad4 <rcutils_format_string_limit+0x64>
 8017a88:	2100      	movs	r1, #0
 8017a8a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017a8c:	4632      	mov	r2, r6
 8017a8e:	4608      	mov	r0, r1
 8017a90:	e9cd 3300 	strd	r3, r3, [sp]
 8017a94:	f000 f8f4 	bl	8017c80 <rcutils_vsnprintf>
 8017a98:	1c43      	adds	r3, r0, #1
 8017a9a:	4605      	mov	r5, r0
 8017a9c:	d01a      	beq.n	8017ad4 <rcutils_format_string_limit+0x64>
 8017a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017aa0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017aa2:	1c47      	adds	r7, r0, #1
 8017aa4:	429f      	cmp	r7, r3
 8017aa6:	bf84      	itt	hi
 8017aa8:	461f      	movhi	r7, r3
 8017aaa:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8017aae:	4638      	mov	r0, r7
 8017ab0:	9b08      	ldr	r3, [sp, #32]
 8017ab2:	4798      	blx	r3
 8017ab4:	4604      	mov	r4, r0
 8017ab6:	b168      	cbz	r0, 8017ad4 <rcutils_format_string_limit+0x64>
 8017ab8:	9b01      	ldr	r3, [sp, #4]
 8017aba:	4632      	mov	r2, r6
 8017abc:	4639      	mov	r1, r7
 8017abe:	f000 f8df 	bl	8017c80 <rcutils_vsnprintf>
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	db02      	blt.n	8017acc <rcutils_format_string_limit+0x5c>
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	5563      	strb	r3, [r4, r5]
 8017aca:	e004      	b.n	8017ad6 <rcutils_format_string_limit+0x66>
 8017acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017ace:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	4798      	blx	r3
 8017ad4:	2400      	movs	r4, #0
 8017ad6:	4620      	mov	r0, r4
 8017ad8:	b003      	add	sp, #12
 8017ada:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017ade:	b004      	add	sp, #16
 8017ae0:	4770      	bx	lr
 8017ae2:	bf00      	nop

08017ae4 <rcutils_repl_str>:
 8017ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ae8:	ed2d 8b02 	vpush	{d8}
 8017aec:	b087      	sub	sp, #28
 8017aee:	4680      	mov	r8, r0
 8017af0:	4608      	mov	r0, r1
 8017af2:	f8cd 8004 	str.w	r8, [sp, #4]
 8017af6:	ee08 2a10 	vmov	s16, r2
 8017afa:	468a      	mov	sl, r1
 8017afc:	4699      	mov	r9, r3
 8017afe:	f7e8 fb71 	bl	80001e4 <strlen>
 8017b02:	2600      	movs	r6, #0
 8017b04:	4647      	mov	r7, r8
 8017b06:	9002      	str	r0, [sp, #8]
 8017b08:	46b3      	mov	fp, r6
 8017b0a:	2510      	movs	r5, #16
 8017b0c:	46b0      	mov	r8, r6
 8017b0e:	e01d      	b.n	8017b4c <rcutils_repl_str+0x68>
 8017b10:	f10b 0b01 	add.w	fp, fp, #1
 8017b14:	455e      	cmp	r6, fp
 8017b16:	d211      	bcs.n	8017b3c <rcutils_repl_str+0x58>
 8017b18:	442e      	add	r6, r5
 8017b1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017b1e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017b22:	00b1      	lsls	r1, r6, #2
 8017b24:	4798      	blx	r3
 8017b26:	2800      	cmp	r0, #0
 8017b28:	f000 8088 	beq.w	8017c3c <rcutils_repl_str+0x158>
 8017b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b30:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8017b34:	4680      	mov	r8, r0
 8017b36:	bf28      	it	cs
 8017b38:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8017b3c:	9a01      	ldr	r2, [sp, #4]
 8017b3e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8017b42:	1aa2      	subs	r2, r4, r2
 8017b44:	f843 2c04 	str.w	r2, [r3, #-4]
 8017b48:	9b02      	ldr	r3, [sp, #8]
 8017b4a:	18e7      	adds	r7, r4, r3
 8017b4c:	4651      	mov	r1, sl
 8017b4e:	4638      	mov	r0, r7
 8017b50:	f004 fb97 	bl	801c282 <strstr>
 8017b54:	4604      	mov	r4, r0
 8017b56:	4640      	mov	r0, r8
 8017b58:	2c00      	cmp	r4, #0
 8017b5a:	d1d9      	bne.n	8017b10 <rcutils_repl_str+0x2c>
 8017b5c:	46b8      	mov	r8, r7
 8017b5e:	4607      	mov	r7, r0
 8017b60:	4640      	mov	r0, r8
 8017b62:	f7e8 fb3f 	bl	80001e4 <strlen>
 8017b66:	9b01      	ldr	r3, [sp, #4]
 8017b68:	eba8 0303 	sub.w	r3, r8, r3
 8017b6c:	181c      	adds	r4, r3, r0
 8017b6e:	9404      	str	r4, [sp, #16]
 8017b70:	f1bb 0f00 	cmp.w	fp, #0
 8017b74:	d04a      	beq.n	8017c0c <rcutils_repl_str+0x128>
 8017b76:	ee18 0a10 	vmov	r0, s16
 8017b7a:	f7e8 fb33 	bl	80001e4 <strlen>
 8017b7e:	9b02      	ldr	r3, [sp, #8]
 8017b80:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017b84:	1ac3      	subs	r3, r0, r3
 8017b86:	fb0b 4303 	mla	r3, fp, r3, r4
 8017b8a:	461a      	mov	r2, r3
 8017b8c:	9305      	str	r3, [sp, #20]
 8017b8e:	4606      	mov	r6, r0
 8017b90:	f8d9 3000 	ldr.w	r3, [r9]
 8017b94:	1c50      	adds	r0, r2, #1
 8017b96:	4798      	blx	r3
 8017b98:	9003      	str	r0, [sp, #12]
 8017b9a:	2800      	cmp	r0, #0
 8017b9c:	d04f      	beq.n	8017c3e <rcutils_repl_str+0x15a>
 8017b9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017ba2:	683a      	ldr	r2, [r7, #0]
 8017ba4:	4641      	mov	r1, r8
 8017ba6:	f004 fc0e 	bl	801c3c6 <memcpy>
 8017baa:	683d      	ldr	r5, [r7, #0]
 8017bac:	9b03      	ldr	r3, [sp, #12]
 8017bae:	9701      	str	r7, [sp, #4]
 8017bb0:	46ba      	mov	sl, r7
 8017bb2:	441d      	add	r5, r3
 8017bb4:	9f02      	ldr	r7, [sp, #8]
 8017bb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8017bba:	2401      	movs	r4, #1
 8017bbc:	46d1      	mov	r9, sl
 8017bbe:	ee18 aa10 	vmov	sl, s16
 8017bc2:	e00a      	b.n	8017bda <rcutils_repl_str+0xf6>
 8017bc4:	f8d9 5000 	ldr.w	r5, [r9]
 8017bc8:	1aaa      	subs	r2, r5, r2
 8017bca:	1885      	adds	r5, r0, r2
 8017bcc:	f004 fbfb 	bl	801c3c6 <memcpy>
 8017bd0:	45a3      	cmp	fp, r4
 8017bd2:	f104 0201 	add.w	r2, r4, #1
 8017bd6:	d935      	bls.n	8017c44 <rcutils_repl_str+0x160>
 8017bd8:	4614      	mov	r4, r2
 8017bda:	4632      	mov	r2, r6
 8017bdc:	4651      	mov	r1, sl
 8017bde:	4628      	mov	r0, r5
 8017be0:	f004 fbf1 	bl	801c3c6 <memcpy>
 8017be4:	f859 2b04 	ldr.w	r2, [r9], #4
 8017be8:	45a3      	cmp	fp, r4
 8017bea:	443a      	add	r2, r7
 8017bec:	eb05 0006 	add.w	r0, r5, r6
 8017bf0:	eb08 0102 	add.w	r1, r8, r2
 8017bf4:	d1e6      	bne.n	8017bc4 <rcutils_repl_str+0xe0>
 8017bf6:	9b04      	ldr	r3, [sp, #16]
 8017bf8:	1a9a      	subs	r2, r3, r2
 8017bfa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017bfe:	f004 fbe2 	bl	801c3c6 <memcpy>
 8017c02:	9a03      	ldr	r2, [sp, #12]
 8017c04:	9905      	ldr	r1, [sp, #20]
 8017c06:	2300      	movs	r3, #0
 8017c08:	5453      	strb	r3, [r2, r1]
 8017c0a:	e00b      	b.n	8017c24 <rcutils_repl_str+0x140>
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	f8d9 3000 	ldr.w	r3, [r9]
 8017c12:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017c16:	3001      	adds	r0, #1
 8017c18:	4798      	blx	r3
 8017c1a:	9003      	str	r0, [sp, #12]
 8017c1c:	b110      	cbz	r0, 8017c24 <rcutils_repl_str+0x140>
 8017c1e:	9901      	ldr	r1, [sp, #4]
 8017c20:	f004 fbc9 	bl	801c3b6 <strcpy>
 8017c24:	4638      	mov	r0, r7
 8017c26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017c2a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017c2e:	4798      	blx	r3
 8017c30:	9803      	ldr	r0, [sp, #12]
 8017c32:	b007      	add	sp, #28
 8017c34:	ecbd 8b02 	vpop	{d8}
 8017c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c3c:	4647      	mov	r7, r8
 8017c3e:	2300      	movs	r3, #0
 8017c40:	9303      	str	r3, [sp, #12]
 8017c42:	e7ef      	b.n	8017c24 <rcutils_repl_str+0x140>
 8017c44:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017c48:	e7db      	b.n	8017c02 <rcutils_repl_str+0x11e>
 8017c4a:	bf00      	nop

08017c4c <rcutils_snprintf>:
 8017c4c:	b40c      	push	{r2, r3}
 8017c4e:	b530      	push	{r4, r5, lr}
 8017c50:	b083      	sub	sp, #12
 8017c52:	ab06      	add	r3, sp, #24
 8017c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c58:	9301      	str	r3, [sp, #4]
 8017c5a:	b152      	cbz	r2, 8017c72 <rcutils_snprintf+0x26>
 8017c5c:	b138      	cbz	r0, 8017c6e <rcutils_snprintf+0x22>
 8017c5e:	b141      	cbz	r1, 8017c72 <rcutils_snprintf+0x26>
 8017c60:	f004 fab0 	bl	801c1c4 <vsniprintf>
 8017c64:	b003      	add	sp, #12
 8017c66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017c6a:	b002      	add	sp, #8
 8017c6c:	4770      	bx	lr
 8017c6e:	2900      	cmp	r1, #0
 8017c70:	d0f6      	beq.n	8017c60 <rcutils_snprintf+0x14>
 8017c72:	f004 fb73 	bl	801c35c <__errno>
 8017c76:	2316      	movs	r3, #22
 8017c78:	6003      	str	r3, [r0, #0]
 8017c7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c7e:	e7f1      	b.n	8017c64 <rcutils_snprintf+0x18>

08017c80 <rcutils_vsnprintf>:
 8017c80:	b570      	push	{r4, r5, r6, lr}
 8017c82:	b13a      	cbz	r2, 8017c94 <rcutils_vsnprintf+0x14>
 8017c84:	b120      	cbz	r0, 8017c90 <rcutils_vsnprintf+0x10>
 8017c86:	b129      	cbz	r1, 8017c94 <rcutils_vsnprintf+0x14>
 8017c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c8c:	f004 ba9a 	b.w	801c1c4 <vsniprintf>
 8017c90:	2900      	cmp	r1, #0
 8017c92:	d0f9      	beq.n	8017c88 <rcutils_vsnprintf+0x8>
 8017c94:	f004 fb62 	bl	801c35c <__errno>
 8017c98:	2316      	movs	r3, #22
 8017c9a:	6003      	str	r3, [r0, #0]
 8017c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ca0:	bd70      	pop	{r4, r5, r6, pc}
 8017ca2:	bf00      	nop

08017ca4 <rcutils_strdup>:
 8017ca4:	b084      	sub	sp, #16
 8017ca6:	b570      	push	{r4, r5, r6, lr}
 8017ca8:	b082      	sub	sp, #8
 8017caa:	ac07      	add	r4, sp, #28
 8017cac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017cb0:	4605      	mov	r5, r0
 8017cb2:	b1b0      	cbz	r0, 8017ce2 <rcutils_strdup+0x3e>
 8017cb4:	f7e8 fa96 	bl	80001e4 <strlen>
 8017cb8:	1c42      	adds	r2, r0, #1
 8017cba:	9b07      	ldr	r3, [sp, #28]
 8017cbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017cbe:	9201      	str	r2, [sp, #4]
 8017cc0:	4606      	mov	r6, r0
 8017cc2:	4610      	mov	r0, r2
 8017cc4:	4798      	blx	r3
 8017cc6:	4604      	mov	r4, r0
 8017cc8:	b128      	cbz	r0, 8017cd6 <rcutils_strdup+0x32>
 8017cca:	9a01      	ldr	r2, [sp, #4]
 8017ccc:	4629      	mov	r1, r5
 8017cce:	f004 fb7a 	bl	801c3c6 <memcpy>
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	55a3      	strb	r3, [r4, r6]
 8017cd6:	4620      	mov	r0, r4
 8017cd8:	b002      	add	sp, #8
 8017cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cde:	b004      	add	sp, #16
 8017ce0:	4770      	bx	lr
 8017ce2:	4604      	mov	r4, r0
 8017ce4:	e7f7      	b.n	8017cd6 <rcutils_strdup+0x32>
 8017ce6:	bf00      	nop

08017ce8 <rcutils_strndup>:
 8017ce8:	b082      	sub	sp, #8
 8017cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cec:	ac06      	add	r4, sp, #24
 8017cee:	e884 000c 	stmia.w	r4, {r2, r3}
 8017cf2:	4605      	mov	r5, r0
 8017cf4:	b188      	cbz	r0, 8017d1a <rcutils_strndup+0x32>
 8017cf6:	1c4f      	adds	r7, r1, #1
 8017cf8:	460e      	mov	r6, r1
 8017cfa:	4638      	mov	r0, r7
 8017cfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017cfe:	4790      	blx	r2
 8017d00:	4604      	mov	r4, r0
 8017d02:	b128      	cbz	r0, 8017d10 <rcutils_strndup+0x28>
 8017d04:	463a      	mov	r2, r7
 8017d06:	4629      	mov	r1, r5
 8017d08:	f004 fb5d 	bl	801c3c6 <memcpy>
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	55a3      	strb	r3, [r4, r6]
 8017d10:	4620      	mov	r0, r4
 8017d12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017d16:	b002      	add	sp, #8
 8017d18:	4770      	bx	lr
 8017d1a:	4604      	mov	r4, r0
 8017d1c:	e7f8      	b.n	8017d10 <rcutils_strndup+0x28>
 8017d1e:	bf00      	nop

08017d20 <rcutils_get_zero_initialized_string_map>:
 8017d20:	4b01      	ldr	r3, [pc, #4]	@ (8017d28 <rcutils_get_zero_initialized_string_map+0x8>)
 8017d22:	2000      	movs	r0, #0
 8017d24:	6018      	str	r0, [r3, #0]
 8017d26:	4770      	bx	lr
 8017d28:	2000e620 	.word	0x2000e620

08017d2c <rcutils_string_map_reserve>:
 8017d2c:	2800      	cmp	r0, #0
 8017d2e:	d05f      	beq.n	8017df0 <rcutils_string_map_reserve+0xc4>
 8017d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d34:	460c      	mov	r4, r1
 8017d36:	6801      	ldr	r1, [r0, #0]
 8017d38:	b082      	sub	sp, #8
 8017d3a:	4605      	mov	r5, r0
 8017d3c:	b129      	cbz	r1, 8017d4a <rcutils_string_map_reserve+0x1e>
 8017d3e:	68cb      	ldr	r3, [r1, #12]
 8017d40:	42a3      	cmp	r3, r4
 8017d42:	d906      	bls.n	8017d52 <rcutils_string_map_reserve+0x26>
 8017d44:	461c      	mov	r4, r3
 8017d46:	2900      	cmp	r1, #0
 8017d48:	d1f9      	bne.n	8017d3e <rcutils_string_map_reserve+0x12>
 8017d4a:	201f      	movs	r0, #31
 8017d4c:	b002      	add	sp, #8
 8017d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d52:	688b      	ldr	r3, [r1, #8]
 8017d54:	42a3      	cmp	r3, r4
 8017d56:	d047      	beq.n	8017de8 <rcutils_string_map_reserve+0xbc>
 8017d58:	6a0e      	ldr	r6, [r1, #32]
 8017d5a:	2c00      	cmp	r4, #0
 8017d5c:	d034      	beq.n	8017dc8 <rcutils_string_map_reserve+0x9c>
 8017d5e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8017d62:	d243      	bcs.n	8017dec <rcutils_string_map_reserve+0xc0>
 8017d64:	00a7      	lsls	r7, r4, #2
 8017d66:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017d6a:	6808      	ldr	r0, [r1, #0]
 8017d6c:	4632      	mov	r2, r6
 8017d6e:	4639      	mov	r1, r7
 8017d70:	47c0      	blx	r8
 8017d72:	2800      	cmp	r0, #0
 8017d74:	d03a      	beq.n	8017dec <rcutils_string_map_reserve+0xc0>
 8017d76:	682b      	ldr	r3, [r5, #0]
 8017d78:	4632      	mov	r2, r6
 8017d7a:	6018      	str	r0, [r3, #0]
 8017d7c:	4639      	mov	r1, r7
 8017d7e:	6858      	ldr	r0, [r3, #4]
 8017d80:	47c0      	blx	r8
 8017d82:	2800      	cmp	r0, #0
 8017d84:	d032      	beq.n	8017dec <rcutils_string_map_reserve+0xc0>
 8017d86:	682d      	ldr	r5, [r5, #0]
 8017d88:	68ab      	ldr	r3, [r5, #8]
 8017d8a:	6068      	str	r0, [r5, #4]
 8017d8c:	42a3      	cmp	r3, r4
 8017d8e:	d226      	bcs.n	8017dde <rcutils_string_map_reserve+0xb2>
 8017d90:	682a      	ldr	r2, [r5, #0]
 8017d92:	eb00 0c07 	add.w	ip, r0, r7
 8017d96:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8017d9a:	45e6      	cmp	lr, ip
 8017d9c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8017da0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8017da4:	d203      	bcs.n	8017dae <rcutils_string_map_reserve+0x82>
 8017da6:	eb02 0c07 	add.w	ip, r2, r7
 8017daa:	4566      	cmp	r6, ip
 8017dac:	d322      	bcc.n	8017df4 <rcutils_string_map_reserve+0xc8>
 8017dae:	1ae3      	subs	r3, r4, r3
 8017db0:	009a      	lsls	r2, r3, #2
 8017db2:	4670      	mov	r0, lr
 8017db4:	2100      	movs	r1, #0
 8017db6:	9201      	str	r2, [sp, #4]
 8017db8:	f004 fa3c 	bl	801c234 <memset>
 8017dbc:	9a01      	ldr	r2, [sp, #4]
 8017dbe:	2100      	movs	r1, #0
 8017dc0:	4630      	mov	r0, r6
 8017dc2:	f004 fa37 	bl	801c234 <memset>
 8017dc6:	e00a      	b.n	8017dde <rcutils_string_map_reserve+0xb2>
 8017dc8:	694f      	ldr	r7, [r1, #20]
 8017dca:	6808      	ldr	r0, [r1, #0]
 8017dcc:	4631      	mov	r1, r6
 8017dce:	47b8      	blx	r7
 8017dd0:	682b      	ldr	r3, [r5, #0]
 8017dd2:	4631      	mov	r1, r6
 8017dd4:	6858      	ldr	r0, [r3, #4]
 8017dd6:	601c      	str	r4, [r3, #0]
 8017dd8:	47b8      	blx	r7
 8017dda:	682d      	ldr	r5, [r5, #0]
 8017ddc:	606c      	str	r4, [r5, #4]
 8017dde:	2000      	movs	r0, #0
 8017de0:	60ac      	str	r4, [r5, #8]
 8017de2:	b002      	add	sp, #8
 8017de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017de8:	2000      	movs	r0, #0
 8017dea:	e7af      	b.n	8017d4c <rcutils_string_map_reserve+0x20>
 8017dec:	200a      	movs	r0, #10
 8017dee:	e7ad      	b.n	8017d4c <rcutils_string_map_reserve+0x20>
 8017df0:	200b      	movs	r0, #11
 8017df2:	4770      	bx	lr
 8017df4:	1f0b      	subs	r3, r1, #4
 8017df6:	4418      	add	r0, r3
 8017df8:	4413      	add	r3, r2
 8017dfa:	3a04      	subs	r2, #4
 8017dfc:	4417      	add	r7, r2
 8017dfe:	2200      	movs	r2, #0
 8017e00:	f843 2f04 	str.w	r2, [r3, #4]!
 8017e04:	42bb      	cmp	r3, r7
 8017e06:	f840 2f04 	str.w	r2, [r0, #4]!
 8017e0a:	d1f9      	bne.n	8017e00 <rcutils_string_map_reserve+0xd4>
 8017e0c:	e7e7      	b.n	8017dde <rcutils_string_map_reserve+0xb2>
 8017e0e:	bf00      	nop

08017e10 <rcutils_string_map_init>:
 8017e10:	b082      	sub	sp, #8
 8017e12:	b570      	push	{r4, r5, r6, lr}
 8017e14:	ac04      	add	r4, sp, #16
 8017e16:	e884 000c 	stmia.w	r4, {r2, r3}
 8017e1a:	b380      	cbz	r0, 8017e7e <rcutils_string_map_init+0x6e>
 8017e1c:	6806      	ldr	r6, [r0, #0]
 8017e1e:	4604      	mov	r4, r0
 8017e20:	b12e      	cbz	r6, 8017e2e <rcutils_string_map_init+0x1e>
 8017e22:	251e      	movs	r5, #30
 8017e24:	4628      	mov	r0, r5
 8017e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e2a:	b002      	add	sp, #8
 8017e2c:	4770      	bx	lr
 8017e2e:	a804      	add	r0, sp, #16
 8017e30:	460d      	mov	r5, r1
 8017e32:	f7f9 fbf9 	bl	8011628 <rcutils_allocator_is_valid>
 8017e36:	b310      	cbz	r0, 8017e7e <rcutils_string_map_init+0x6e>
 8017e38:	9b04      	ldr	r3, [sp, #16]
 8017e3a:	9908      	ldr	r1, [sp, #32]
 8017e3c:	2024      	movs	r0, #36	@ 0x24
 8017e3e:	4798      	blx	r3
 8017e40:	6020      	str	r0, [r4, #0]
 8017e42:	b310      	cbz	r0, 8017e8a <rcutils_string_map_init+0x7a>
 8017e44:	f10d 0e10 	add.w	lr, sp, #16
 8017e48:	e9c0 6600 	strd	r6, r6, [r0]
 8017e4c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017e50:	f100 0c10 	add.w	ip, r0, #16
 8017e54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017e58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e5c:	f8de 3000 	ldr.w	r3, [lr]
 8017e60:	f8cc 3000 	str.w	r3, [ip]
 8017e64:	4629      	mov	r1, r5
 8017e66:	4620      	mov	r0, r4
 8017e68:	f7ff ff60 	bl	8017d2c <rcutils_string_map_reserve>
 8017e6c:	4605      	mov	r5, r0
 8017e6e:	2800      	cmp	r0, #0
 8017e70:	d0d8      	beq.n	8017e24 <rcutils_string_map_init+0x14>
 8017e72:	9b05      	ldr	r3, [sp, #20]
 8017e74:	9908      	ldr	r1, [sp, #32]
 8017e76:	6820      	ldr	r0, [r4, #0]
 8017e78:	4798      	blx	r3
 8017e7a:	6026      	str	r6, [r4, #0]
 8017e7c:	e7d2      	b.n	8017e24 <rcutils_string_map_init+0x14>
 8017e7e:	250b      	movs	r5, #11
 8017e80:	4628      	mov	r0, r5
 8017e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e86:	b002      	add	sp, #8
 8017e88:	4770      	bx	lr
 8017e8a:	250a      	movs	r5, #10
 8017e8c:	e7ca      	b.n	8017e24 <rcutils_string_map_init+0x14>
 8017e8e:	bf00      	nop

08017e90 <rcutils_string_map_fini>:
 8017e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e94:	b082      	sub	sp, #8
 8017e96:	2800      	cmp	r0, #0
 8017e98:	d03a      	beq.n	8017f10 <rcutils_string_map_fini+0x80>
 8017e9a:	6804      	ldr	r4, [r0, #0]
 8017e9c:	4606      	mov	r6, r0
 8017e9e:	2c00      	cmp	r4, #0
 8017ea0:	d032      	beq.n	8017f08 <rcutils_string_map_fini+0x78>
 8017ea2:	68a3      	ldr	r3, [r4, #8]
 8017ea4:	b32b      	cbz	r3, 8017ef2 <rcutils_string_map_fini+0x62>
 8017ea6:	2500      	movs	r5, #0
 8017ea8:	6822      	ldr	r2, [r4, #0]
 8017eaa:	462f      	mov	r7, r5
 8017eac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017eb0:	b1e0      	cbz	r0, 8017eec <rcutils_string_map_fini+0x5c>
 8017eb2:	6a21      	ldr	r1, [r4, #32]
 8017eb4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8017eb8:	9101      	str	r1, [sp, #4]
 8017eba:	47c0      	blx	r8
 8017ebc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017ec0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8017ec4:	9901      	ldr	r1, [sp, #4]
 8017ec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017eca:	47c0      	blx	r8
 8017ecc:	68e3      	ldr	r3, [r4, #12]
 8017ece:	6862      	ldr	r2, [r4, #4]
 8017ed0:	3b01      	subs	r3, #1
 8017ed2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8017ed6:	60e3      	str	r3, [r4, #12]
 8017ed8:	6834      	ldr	r4, [r6, #0]
 8017eda:	68a3      	ldr	r3, [r4, #8]
 8017edc:	3501      	adds	r5, #1
 8017ede:	429d      	cmp	r5, r3
 8017ee0:	d207      	bcs.n	8017ef2 <rcutils_string_map_fini+0x62>
 8017ee2:	6822      	ldr	r2, [r4, #0]
 8017ee4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017ee8:	2800      	cmp	r0, #0
 8017eea:	d1e2      	bne.n	8017eb2 <rcutils_string_map_fini+0x22>
 8017eec:	3501      	adds	r5, #1
 8017eee:	429d      	cmp	r5, r3
 8017ef0:	d3dc      	bcc.n	8017eac <rcutils_string_map_fini+0x1c>
 8017ef2:	2100      	movs	r1, #0
 8017ef4:	4630      	mov	r0, r6
 8017ef6:	f7ff ff19 	bl	8017d2c <rcutils_string_map_reserve>
 8017efa:	4604      	mov	r4, r0
 8017efc:	b920      	cbnz	r0, 8017f08 <rcutils_string_map_fini+0x78>
 8017efe:	6830      	ldr	r0, [r6, #0]
 8017f00:	6943      	ldr	r3, [r0, #20]
 8017f02:	6a01      	ldr	r1, [r0, #32]
 8017f04:	4798      	blx	r3
 8017f06:	6034      	str	r4, [r6, #0]
 8017f08:	4620      	mov	r0, r4
 8017f0a:	b002      	add	sp, #8
 8017f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f10:	240b      	movs	r4, #11
 8017f12:	4620      	mov	r0, r4
 8017f14:	b002      	add	sp, #8
 8017f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f1a:	bf00      	nop

08017f1c <rcutils_string_map_getn>:
 8017f1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f20:	b300      	cbz	r0, 8017f64 <rcutils_string_map_getn+0x48>
 8017f22:	6807      	ldr	r7, [r0, #0]
 8017f24:	b1ff      	cbz	r7, 8017f66 <rcutils_string_map_getn+0x4a>
 8017f26:	4688      	mov	r8, r1
 8017f28:	b1e1      	cbz	r1, 8017f64 <rcutils_string_map_getn+0x48>
 8017f2a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8017f2e:	683e      	ldr	r6, [r7, #0]
 8017f30:	f1ba 0f00 	cmp.w	sl, #0
 8017f34:	d016      	beq.n	8017f64 <rcutils_string_map_getn+0x48>
 8017f36:	4691      	mov	r9, r2
 8017f38:	3e04      	subs	r6, #4
 8017f3a:	2400      	movs	r4, #0
 8017f3c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8017f40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017f44:	4628      	mov	r0, r5
 8017f46:	3401      	adds	r4, #1
 8017f48:	b155      	cbz	r5, 8017f60 <rcutils_string_map_getn+0x44>
 8017f4a:	f7e8 f94b 	bl	80001e4 <strlen>
 8017f4e:	4548      	cmp	r0, r9
 8017f50:	4602      	mov	r2, r0
 8017f52:	4629      	mov	r1, r5
 8017f54:	bf38      	it	cc
 8017f56:	464a      	movcc	r2, r9
 8017f58:	4640      	mov	r0, r8
 8017f5a:	f004 f980 	bl	801c25e <strncmp>
 8017f5e:	b128      	cbz	r0, 8017f6c <rcutils_string_map_getn+0x50>
 8017f60:	45a2      	cmp	sl, r4
 8017f62:	d1eb      	bne.n	8017f3c <rcutils_string_map_getn+0x20>
 8017f64:	2700      	movs	r7, #0
 8017f66:	4638      	mov	r0, r7
 8017f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	f853 700b 	ldr.w	r7, [r3, fp]
 8017f72:	4638      	mov	r0, r7
 8017f74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f78 <rmw_get_zero_initialized_context>:
 8017f78:	b510      	push	{r4, lr}
 8017f7a:	4604      	mov	r4, r0
 8017f7c:	3010      	adds	r0, #16
 8017f7e:	f000 f80b 	bl	8017f98 <rmw_get_zero_initialized_init_options>
 8017f82:	2300      	movs	r3, #0
 8017f84:	2000      	movs	r0, #0
 8017f86:	2100      	movs	r1, #0
 8017f88:	e9c4 0100 	strd	r0, r1, [r4]
 8017f8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8017f90:	60a3      	str	r3, [r4, #8]
 8017f92:	4620      	mov	r0, r4
 8017f94:	bd10      	pop	{r4, pc}
 8017f96:	bf00      	nop

08017f98 <rmw_get_zero_initialized_init_options>:
 8017f98:	b510      	push	{r4, lr}
 8017f9a:	2238      	movs	r2, #56	@ 0x38
 8017f9c:	4604      	mov	r4, r0
 8017f9e:	2100      	movs	r1, #0
 8017fa0:	f004 f948 	bl	801c234 <memset>
 8017fa4:	f104 0010 	add.w	r0, r4, #16
 8017fa8:	f000 f806 	bl	8017fb8 <rmw_get_default_security_options>
 8017fac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017fb0:	60e3      	str	r3, [r4, #12]
 8017fb2:	4620      	mov	r0, r4
 8017fb4:	bd10      	pop	{r4, pc}
 8017fb6:	bf00      	nop

08017fb8 <rmw_get_default_security_options>:
 8017fb8:	2200      	movs	r2, #0
 8017fba:	7002      	strb	r2, [r0, #0]
 8017fbc:	6042      	str	r2, [r0, #4]
 8017fbe:	4770      	bx	lr

08017fc0 <rmw_subscription_content_filter_options_fini>:
 8017fc0:	b1b0      	cbz	r0, 8017ff0 <rmw_subscription_content_filter_options_fini+0x30>
 8017fc2:	b538      	push	{r3, r4, r5, lr}
 8017fc4:	4604      	mov	r4, r0
 8017fc6:	4608      	mov	r0, r1
 8017fc8:	460d      	mov	r5, r1
 8017fca:	f7f9 fb2d 	bl	8011628 <rcutils_allocator_is_valid>
 8017fce:	b168      	cbz	r0, 8017fec <rmw_subscription_content_filter_options_fini+0x2c>
 8017fd0:	6820      	ldr	r0, [r4, #0]
 8017fd2:	b120      	cbz	r0, 8017fde <rmw_subscription_content_filter_options_fini+0x1e>
 8017fd4:	686b      	ldr	r3, [r5, #4]
 8017fd6:	6929      	ldr	r1, [r5, #16]
 8017fd8:	4798      	blx	r3
 8017fda:	2300      	movs	r3, #0
 8017fdc:	6023      	str	r3, [r4, #0]
 8017fde:	1d20      	adds	r0, r4, #4
 8017fe0:	f003 fc00 	bl	801b7e4 <rcutils_string_array_fini>
 8017fe4:	3800      	subs	r0, #0
 8017fe6:	bf18      	it	ne
 8017fe8:	2001      	movne	r0, #1
 8017fea:	bd38      	pop	{r3, r4, r5, pc}
 8017fec:	200b      	movs	r0, #11
 8017fee:	bd38      	pop	{r3, r4, r5, pc}
 8017ff0:	200b      	movs	r0, #11
 8017ff2:	4770      	bx	lr

08017ff4 <rmw_get_default_subscription_options>:
 8017ff4:	2200      	movs	r2, #0
 8017ff6:	e9c0 2200 	strd	r2, r2, [r0]
 8017ffa:	6082      	str	r2, [r0, #8]
 8017ffc:	4770      	bx	lr
 8017ffe:	bf00      	nop

08018000 <rmw_time_equal>:
 8018000:	b4f0      	push	{r4, r5, r6, r7}
 8018002:	b084      	sub	sp, #16
 8018004:	ac04      	add	r4, sp, #16
 8018006:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801800a:	4603      	mov	r3, r0
 801800c:	4924      	ldr	r1, [pc, #144]	@ (80180a0 <rmw_time_equal+0xa0>)
 801800e:	9e03      	ldr	r6, [sp, #12]
 8018010:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8018014:	2202      	movs	r2, #2
 8018016:	4299      	cmp	r1, r3
 8018018:	41aa      	sbcs	r2, r5
 801801a:	d330      	bcc.n	801807e <rmw_time_equal+0x7e>
 801801c:	4c21      	ldr	r4, [pc, #132]	@ (80180a4 <rmw_time_equal+0xa4>)
 801801e:	fba3 3204 	umull	r3, r2, r3, r4
 8018022:	fb04 2205 	mla	r2, r4, r5, r2
 8018026:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801802a:	43dd      	mvns	r5, r3
 801802c:	1a8c      	subs	r4, r1, r2
 801802e:	4285      	cmp	r5, r0
 8018030:	41b4      	sbcs	r4, r6
 8018032:	d332      	bcc.n	801809a <rmw_time_equal+0x9a>
 8018034:	eb10 0c03 	adds.w	ip, r0, r3
 8018038:	eb42 0106 	adc.w	r1, r2, r6
 801803c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8018040:	4817      	ldr	r0, [pc, #92]	@ (80180a0 <rmw_time_equal+0xa0>)
 8018042:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018044:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018046:	2202      	movs	r2, #2
 8018048:	4298      	cmp	r0, r3
 801804a:	41b2      	sbcs	r2, r6
 801804c:	d31c      	bcc.n	8018088 <rmw_time_equal+0x88>
 801804e:	4c15      	ldr	r4, [pc, #84]	@ (80180a4 <rmw_time_equal+0xa4>)
 8018050:	fba3 3204 	umull	r3, r2, r3, r4
 8018054:	fb04 2206 	mla	r2, r4, r6, r2
 8018058:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801805c:	43de      	mvns	r6, r3
 801805e:	1a84      	subs	r4, r0, r2
 8018060:	42ae      	cmp	r6, r5
 8018062:	41bc      	sbcs	r4, r7
 8018064:	d315      	bcc.n	8018092 <rmw_time_equal+0x92>
 8018066:	195b      	adds	r3, r3, r5
 8018068:	eb42 0207 	adc.w	r2, r2, r7
 801806c:	428a      	cmp	r2, r1
 801806e:	bf08      	it	eq
 8018070:	4563      	cmpeq	r3, ip
 8018072:	bf0c      	ite	eq
 8018074:	2001      	moveq	r0, #1
 8018076:	2000      	movne	r0, #0
 8018078:	b004      	add	sp, #16
 801807a:	bcf0      	pop	{r4, r5, r6, r7}
 801807c:	4770      	bx	lr
 801807e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018082:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018086:	e7d9      	b.n	801803c <rmw_time_equal+0x3c>
 8018088:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801808c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018090:	e7ec      	b.n	801806c <rmw_time_equal+0x6c>
 8018092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018096:	4602      	mov	r2, r0
 8018098:	e7e8      	b.n	801806c <rmw_time_equal+0x6c>
 801809a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801809e:	e7cd      	b.n	801803c <rmw_time_equal+0x3c>
 80180a0:	25c17d04 	.word	0x25c17d04
 80180a4:	3b9aca00 	.word	0x3b9aca00

080180a8 <rmw_time_total_nsec>:
 80180a8:	b470      	push	{r4, r5, r6}
 80180aa:	b085      	sub	sp, #20
 80180ac:	ac04      	add	r4, sp, #16
 80180ae:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80180b2:	4603      	mov	r3, r0
 80180b4:	4912      	ldr	r1, [pc, #72]	@ (8018100 <rmw_time_total_nsec+0x58>)
 80180b6:	9e03      	ldr	r6, [sp, #12]
 80180b8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80180bc:	2202      	movs	r2, #2
 80180be:	4299      	cmp	r1, r3
 80180c0:	41aa      	sbcs	r2, r5
 80180c2:	d311      	bcc.n	80180e8 <rmw_time_total_nsec+0x40>
 80180c4:	4c0f      	ldr	r4, [pc, #60]	@ (8018104 <rmw_time_total_nsec+0x5c>)
 80180c6:	fba3 3204 	umull	r3, r2, r3, r4
 80180ca:	fb04 2205 	mla	r2, r4, r5, r2
 80180ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80180d2:	43dd      	mvns	r5, r3
 80180d4:	1a8c      	subs	r4, r1, r2
 80180d6:	4285      	cmp	r5, r0
 80180d8:	41b4      	sbcs	r4, r6
 80180da:	d30c      	bcc.n	80180f6 <rmw_time_total_nsec+0x4e>
 80180dc:	1818      	adds	r0, r3, r0
 80180de:	eb42 0106 	adc.w	r1, r2, r6
 80180e2:	b005      	add	sp, #20
 80180e4:	bc70      	pop	{r4, r5, r6}
 80180e6:	4770      	bx	lr
 80180e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80180ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80180f0:	b005      	add	sp, #20
 80180f2:	bc70      	pop	{r4, r5, r6}
 80180f4:	4770      	bx	lr
 80180f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80180fa:	b005      	add	sp, #20
 80180fc:	bc70      	pop	{r4, r5, r6}
 80180fe:	4770      	bx	lr
 8018100:	25c17d04 	.word	0x25c17d04
 8018104:	3b9aca00 	.word	0x3b9aca00

08018108 <rmw_get_zero_initialized_message_info>:
 8018108:	b510      	push	{r4, lr}
 801810a:	2240      	movs	r2, #64	@ 0x40
 801810c:	4604      	mov	r4, r0
 801810e:	2100      	movs	r1, #0
 8018110:	f004 f890 	bl	801c234 <memset>
 8018114:	4620      	mov	r0, r4
 8018116:	bd10      	pop	{r4, pc}

08018118 <rmw_validate_full_topic_name>:
 8018118:	2800      	cmp	r0, #0
 801811a:	d057      	beq.n	80181cc <rmw_validate_full_topic_name+0xb4>
 801811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018120:	460d      	mov	r5, r1
 8018122:	2900      	cmp	r1, #0
 8018124:	d054      	beq.n	80181d0 <rmw_validate_full_topic_name+0xb8>
 8018126:	4616      	mov	r6, r2
 8018128:	4604      	mov	r4, r0
 801812a:	f7e8 f85b 	bl	80001e4 <strlen>
 801812e:	b148      	cbz	r0, 8018144 <rmw_validate_full_topic_name+0x2c>
 8018130:	7823      	ldrb	r3, [r4, #0]
 8018132:	2b2f      	cmp	r3, #47	@ 0x2f
 8018134:	d00d      	beq.n	8018152 <rmw_validate_full_topic_name+0x3a>
 8018136:	2302      	movs	r3, #2
 8018138:	602b      	str	r3, [r5, #0]
 801813a:	b13e      	cbz	r6, 801814c <rmw_validate_full_topic_name+0x34>
 801813c:	2000      	movs	r0, #0
 801813e:	6030      	str	r0, [r6, #0]
 8018140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018144:	2301      	movs	r3, #1
 8018146:	602b      	str	r3, [r5, #0]
 8018148:	2e00      	cmp	r6, #0
 801814a:	d1f7      	bne.n	801813c <rmw_validate_full_topic_name+0x24>
 801814c:	2000      	movs	r0, #0
 801814e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018152:	1e43      	subs	r3, r0, #1
 8018154:	5ce2      	ldrb	r2, [r4, r3]
 8018156:	2a2f      	cmp	r2, #47	@ 0x2f
 8018158:	d03c      	beq.n	80181d4 <rmw_validate_full_topic_name+0xbc>
 801815a:	1e63      	subs	r3, r4, #1
 801815c:	eb03 0800 	add.w	r8, r3, r0
 8018160:	f1c4 0e01 	rsb	lr, r4, #1
 8018164:	eb0e 0703 	add.w	r7, lr, r3
 8018168:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801816c:	f021 0220 	bic.w	r2, r1, #32
 8018170:	3a41      	subs	r2, #65	@ 0x41
 8018172:	2a19      	cmp	r2, #25
 8018174:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8018178:	d90b      	bls.n	8018192 <rmw_validate_full_topic_name+0x7a>
 801817a:	295f      	cmp	r1, #95	@ 0x5f
 801817c:	d009      	beq.n	8018192 <rmw_validate_full_topic_name+0x7a>
 801817e:	f1bc 0f0a 	cmp.w	ip, #10
 8018182:	d906      	bls.n	8018192 <rmw_validate_full_topic_name+0x7a>
 8018184:	2304      	movs	r3, #4
 8018186:	602b      	str	r3, [r5, #0]
 8018188:	2e00      	cmp	r6, #0
 801818a:	d0df      	beq.n	801814c <rmw_validate_full_topic_name+0x34>
 801818c:	6037      	str	r7, [r6, #0]
 801818e:	2000      	movs	r0, #0
 8018190:	e7d6      	b.n	8018140 <rmw_validate_full_topic_name+0x28>
 8018192:	4543      	cmp	r3, r8
 8018194:	d1e6      	bne.n	8018164 <rmw_validate_full_topic_name+0x4c>
 8018196:	4f1a      	ldr	r7, [pc, #104]	@ (8018200 <rmw_validate_full_topic_name+0xe8>)
 8018198:	2301      	movs	r3, #1
 801819a:	e004      	b.n	80181a6 <rmw_validate_full_topic_name+0x8e>
 801819c:	4298      	cmp	r0, r3
 801819e:	f104 0401 	add.w	r4, r4, #1
 80181a2:	d91c      	bls.n	80181de <rmw_validate_full_topic_name+0xc6>
 80181a4:	4613      	mov	r3, r2
 80181a6:	4298      	cmp	r0, r3
 80181a8:	f103 0201 	add.w	r2, r3, #1
 80181ac:	d0f6      	beq.n	801819c <rmw_validate_full_topic_name+0x84>
 80181ae:	7821      	ldrb	r1, [r4, #0]
 80181b0:	292f      	cmp	r1, #47	@ 0x2f
 80181b2:	d1f3      	bne.n	801819c <rmw_validate_full_topic_name+0x84>
 80181b4:	7861      	ldrb	r1, [r4, #1]
 80181b6:	292f      	cmp	r1, #47	@ 0x2f
 80181b8:	d01c      	beq.n	80181f4 <rmw_validate_full_topic_name+0xdc>
 80181ba:	5dc9      	ldrb	r1, [r1, r7]
 80181bc:	0749      	lsls	r1, r1, #29
 80181be:	d5ed      	bpl.n	801819c <rmw_validate_full_topic_name+0x84>
 80181c0:	2206      	movs	r2, #6
 80181c2:	602a      	str	r2, [r5, #0]
 80181c4:	2e00      	cmp	r6, #0
 80181c6:	d0c1      	beq.n	801814c <rmw_validate_full_topic_name+0x34>
 80181c8:	6033      	str	r3, [r6, #0]
 80181ca:	e7bf      	b.n	801814c <rmw_validate_full_topic_name+0x34>
 80181cc:	200b      	movs	r0, #11
 80181ce:	4770      	bx	lr
 80181d0:	200b      	movs	r0, #11
 80181d2:	e7b5      	b.n	8018140 <rmw_validate_full_topic_name+0x28>
 80181d4:	2203      	movs	r2, #3
 80181d6:	602a      	str	r2, [r5, #0]
 80181d8:	2e00      	cmp	r6, #0
 80181da:	d1f5      	bne.n	80181c8 <rmw_validate_full_topic_name+0xb0>
 80181dc:	e7b6      	b.n	801814c <rmw_validate_full_topic_name+0x34>
 80181de:	28f7      	cmp	r0, #247	@ 0xf7
 80181e0:	d802      	bhi.n	80181e8 <rmw_validate_full_topic_name+0xd0>
 80181e2:	2000      	movs	r0, #0
 80181e4:	6028      	str	r0, [r5, #0]
 80181e6:	e7ab      	b.n	8018140 <rmw_validate_full_topic_name+0x28>
 80181e8:	2307      	movs	r3, #7
 80181ea:	602b      	str	r3, [r5, #0]
 80181ec:	2e00      	cmp	r6, #0
 80181ee:	d0ad      	beq.n	801814c <rmw_validate_full_topic_name+0x34>
 80181f0:	23f6      	movs	r3, #246	@ 0xf6
 80181f2:	e7e9      	b.n	80181c8 <rmw_validate_full_topic_name+0xb0>
 80181f4:	2205      	movs	r2, #5
 80181f6:	602a      	str	r2, [r5, #0]
 80181f8:	2e00      	cmp	r6, #0
 80181fa:	d1e5      	bne.n	80181c8 <rmw_validate_full_topic_name+0xb0>
 80181fc:	e7a6      	b.n	801814c <rmw_validate_full_topic_name+0x34>
 80181fe:	bf00      	nop
 8018200:	0801e063 	.word	0x0801e063

08018204 <rmw_validate_namespace_with_size>:
 8018204:	b340      	cbz	r0, 8018258 <rmw_validate_namespace_with_size+0x54>
 8018206:	b570      	push	{r4, r5, r6, lr}
 8018208:	4614      	mov	r4, r2
 801820a:	b0c2      	sub	sp, #264	@ 0x108
 801820c:	b332      	cbz	r2, 801825c <rmw_validate_namespace_with_size+0x58>
 801820e:	2901      	cmp	r1, #1
 8018210:	460d      	mov	r5, r1
 8018212:	461e      	mov	r6, r3
 8018214:	d102      	bne.n	801821c <rmw_validate_namespace_with_size+0x18>
 8018216:	7803      	ldrb	r3, [r0, #0]
 8018218:	2b2f      	cmp	r3, #47	@ 0x2f
 801821a:	d012      	beq.n	8018242 <rmw_validate_namespace_with_size+0x3e>
 801821c:	aa01      	add	r2, sp, #4
 801821e:	4669      	mov	r1, sp
 8018220:	f7ff ff7a 	bl	8018118 <rmw_validate_full_topic_name>
 8018224:	b978      	cbnz	r0, 8018246 <rmw_validate_namespace_with_size+0x42>
 8018226:	9b00      	ldr	r3, [sp, #0]
 8018228:	b14b      	cbz	r3, 801823e <rmw_validate_namespace_with_size+0x3a>
 801822a:	2b07      	cmp	r3, #7
 801822c:	d007      	beq.n	801823e <rmw_validate_namespace_with_size+0x3a>
 801822e:	1e5a      	subs	r2, r3, #1
 8018230:	2a05      	cmp	r2, #5
 8018232:	d82b      	bhi.n	801828c <rmw_validate_namespace_with_size+0x88>
 8018234:	e8df f002 	tbb	[pc, r2]
 8018238:	1e212427 	.word	0x1e212427
 801823c:	141b      	.short	0x141b
 801823e:	2df5      	cmp	r5, #245	@ 0xf5
 8018240:	d803      	bhi.n	801824a <rmw_validate_namespace_with_size+0x46>
 8018242:	2000      	movs	r0, #0
 8018244:	6020      	str	r0, [r4, #0]
 8018246:	b042      	add	sp, #264	@ 0x108
 8018248:	bd70      	pop	{r4, r5, r6, pc}
 801824a:	2307      	movs	r3, #7
 801824c:	6023      	str	r3, [r4, #0]
 801824e:	2e00      	cmp	r6, #0
 8018250:	d0f9      	beq.n	8018246 <rmw_validate_namespace_with_size+0x42>
 8018252:	23f4      	movs	r3, #244	@ 0xf4
 8018254:	6033      	str	r3, [r6, #0]
 8018256:	e7f6      	b.n	8018246 <rmw_validate_namespace_with_size+0x42>
 8018258:	200b      	movs	r0, #11
 801825a:	4770      	bx	lr
 801825c:	200b      	movs	r0, #11
 801825e:	e7f2      	b.n	8018246 <rmw_validate_namespace_with_size+0x42>
 8018260:	2306      	movs	r3, #6
 8018262:	6023      	str	r3, [r4, #0]
 8018264:	2e00      	cmp	r6, #0
 8018266:	d0ee      	beq.n	8018246 <rmw_validate_namespace_with_size+0x42>
 8018268:	9b01      	ldr	r3, [sp, #4]
 801826a:	6033      	str	r3, [r6, #0]
 801826c:	e7eb      	b.n	8018246 <rmw_validate_namespace_with_size+0x42>
 801826e:	2305      	movs	r3, #5
 8018270:	6023      	str	r3, [r4, #0]
 8018272:	e7f7      	b.n	8018264 <rmw_validate_namespace_with_size+0x60>
 8018274:	2304      	movs	r3, #4
 8018276:	6023      	str	r3, [r4, #0]
 8018278:	e7f4      	b.n	8018264 <rmw_validate_namespace_with_size+0x60>
 801827a:	2303      	movs	r3, #3
 801827c:	6023      	str	r3, [r4, #0]
 801827e:	e7f1      	b.n	8018264 <rmw_validate_namespace_with_size+0x60>
 8018280:	2302      	movs	r3, #2
 8018282:	6023      	str	r3, [r4, #0]
 8018284:	e7ee      	b.n	8018264 <rmw_validate_namespace_with_size+0x60>
 8018286:	2301      	movs	r3, #1
 8018288:	6023      	str	r3, [r4, #0]
 801828a:	e7eb      	b.n	8018264 <rmw_validate_namespace_with_size+0x60>
 801828c:	4a03      	ldr	r2, [pc, #12]	@ (801829c <rmw_validate_namespace_with_size+0x98>)
 801828e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018292:	a802      	add	r0, sp, #8
 8018294:	f7ff fcda 	bl	8017c4c <rcutils_snprintf>
 8018298:	2001      	movs	r0, #1
 801829a:	e7d4      	b.n	8018246 <rmw_validate_namespace_with_size+0x42>
 801829c:	0801d654 	.word	0x0801d654

080182a0 <rmw_validate_namespace>:
 80182a0:	b168      	cbz	r0, 80182be <rmw_validate_namespace+0x1e>
 80182a2:	b570      	push	{r4, r5, r6, lr}
 80182a4:	460d      	mov	r5, r1
 80182a6:	4616      	mov	r6, r2
 80182a8:	4604      	mov	r4, r0
 80182aa:	f7e7 ff9b 	bl	80001e4 <strlen>
 80182ae:	4633      	mov	r3, r6
 80182b0:	4601      	mov	r1, r0
 80182b2:	462a      	mov	r2, r5
 80182b4:	4620      	mov	r0, r4
 80182b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80182ba:	f7ff bfa3 	b.w	8018204 <rmw_validate_namespace_with_size>
 80182be:	200b      	movs	r0, #11
 80182c0:	4770      	bx	lr
 80182c2:	bf00      	nop

080182c4 <rmw_namespace_validation_result_string>:
 80182c4:	2807      	cmp	r0, #7
 80182c6:	bf9a      	itte	ls
 80182c8:	4b02      	ldrls	r3, [pc, #8]	@ (80182d4 <rmw_namespace_validation_result_string+0x10>)
 80182ca:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80182ce:	4802      	ldrhi	r0, [pc, #8]	@ (80182d8 <rmw_namespace_validation_result_string+0x14>)
 80182d0:	4770      	bx	lr
 80182d2:	bf00      	nop
 80182d4:	0801dd44 	.word	0x0801dd44
 80182d8:	0801d6a4 	.word	0x0801d6a4

080182dc <rmw_validate_node_name>:
 80182dc:	2800      	cmp	r0, #0
 80182de:	d03b      	beq.n	8018358 <rmw_validate_node_name+0x7c>
 80182e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182e4:	460d      	mov	r5, r1
 80182e6:	2900      	cmp	r1, #0
 80182e8:	d038      	beq.n	801835c <rmw_validate_node_name+0x80>
 80182ea:	4616      	mov	r6, r2
 80182ec:	4604      	mov	r4, r0
 80182ee:	f7e7 ff79 	bl	80001e4 <strlen>
 80182f2:	b1e0      	cbz	r0, 801832e <rmw_validate_node_name+0x52>
 80182f4:	1e63      	subs	r3, r4, #1
 80182f6:	eb03 0800 	add.w	r8, r3, r0
 80182fa:	f1c4 0101 	rsb	r1, r4, #1
 80182fe:	18cf      	adds	r7, r1, r3
 8018300:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8018304:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8018308:	f02e 0c20 	bic.w	ip, lr, #32
 801830c:	2a09      	cmp	r2, #9
 801830e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8018312:	d914      	bls.n	801833e <rmw_validate_node_name+0x62>
 8018314:	f1bc 0f19 	cmp.w	ip, #25
 8018318:	d911      	bls.n	801833e <rmw_validate_node_name+0x62>
 801831a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801831e:	d00e      	beq.n	801833e <rmw_validate_node_name+0x62>
 8018320:	2302      	movs	r3, #2
 8018322:	602b      	str	r3, [r5, #0]
 8018324:	b106      	cbz	r6, 8018328 <rmw_validate_node_name+0x4c>
 8018326:	6037      	str	r7, [r6, #0]
 8018328:	2000      	movs	r0, #0
 801832a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801832e:	2301      	movs	r3, #1
 8018330:	602b      	str	r3, [r5, #0]
 8018332:	2e00      	cmp	r6, #0
 8018334:	d0f8      	beq.n	8018328 <rmw_validate_node_name+0x4c>
 8018336:	2000      	movs	r0, #0
 8018338:	6030      	str	r0, [r6, #0]
 801833a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801833e:	4543      	cmp	r3, r8
 8018340:	d1dd      	bne.n	80182fe <rmw_validate_node_name+0x22>
 8018342:	7822      	ldrb	r2, [r4, #0]
 8018344:	4b0d      	ldr	r3, [pc, #52]	@ (801837c <rmw_validate_node_name+0xa0>)
 8018346:	5cd3      	ldrb	r3, [r2, r3]
 8018348:	f013 0304 	ands.w	r3, r3, #4
 801834c:	d110      	bne.n	8018370 <rmw_validate_node_name+0x94>
 801834e:	28ff      	cmp	r0, #255	@ 0xff
 8018350:	d806      	bhi.n	8018360 <rmw_validate_node_name+0x84>
 8018352:	602b      	str	r3, [r5, #0]
 8018354:	4618      	mov	r0, r3
 8018356:	e7e8      	b.n	801832a <rmw_validate_node_name+0x4e>
 8018358:	200b      	movs	r0, #11
 801835a:	4770      	bx	lr
 801835c:	200b      	movs	r0, #11
 801835e:	e7e4      	b.n	801832a <rmw_validate_node_name+0x4e>
 8018360:	2204      	movs	r2, #4
 8018362:	602a      	str	r2, [r5, #0]
 8018364:	2e00      	cmp	r6, #0
 8018366:	d0df      	beq.n	8018328 <rmw_validate_node_name+0x4c>
 8018368:	22fe      	movs	r2, #254	@ 0xfe
 801836a:	6032      	str	r2, [r6, #0]
 801836c:	4618      	mov	r0, r3
 801836e:	e7dc      	b.n	801832a <rmw_validate_node_name+0x4e>
 8018370:	2303      	movs	r3, #3
 8018372:	602b      	str	r3, [r5, #0]
 8018374:	2e00      	cmp	r6, #0
 8018376:	d1de      	bne.n	8018336 <rmw_validate_node_name+0x5a>
 8018378:	e7d6      	b.n	8018328 <rmw_validate_node_name+0x4c>
 801837a:	bf00      	nop
 801837c:	0801e063 	.word	0x0801e063

08018380 <rmw_node_name_validation_result_string>:
 8018380:	2804      	cmp	r0, #4
 8018382:	bf9a      	itte	ls
 8018384:	4b02      	ldrls	r3, [pc, #8]	@ (8018390 <rmw_node_name_validation_result_string+0x10>)
 8018386:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801838a:	4802      	ldrhi	r0, [pc, #8]	@ (8018394 <rmw_node_name_validation_result_string+0x14>)
 801838c:	4770      	bx	lr
 801838e:	bf00      	nop
 8018390:	0801dd64 	.word	0x0801dd64
 8018394:	0801d84c 	.word	0x0801d84c

08018398 <get_memory>:
 8018398:	4603      	mov	r3, r0
 801839a:	6840      	ldr	r0, [r0, #4]
 801839c:	b158      	cbz	r0, 80183b6 <get_memory+0x1e>
 801839e:	6842      	ldr	r2, [r0, #4]
 80183a0:	605a      	str	r2, [r3, #4]
 80183a2:	b10a      	cbz	r2, 80183a8 <get_memory+0x10>
 80183a4:	2100      	movs	r1, #0
 80183a6:	6011      	str	r1, [r2, #0]
 80183a8:	681a      	ldr	r2, [r3, #0]
 80183aa:	6042      	str	r2, [r0, #4]
 80183ac:	b102      	cbz	r2, 80183b0 <get_memory+0x18>
 80183ae:	6010      	str	r0, [r2, #0]
 80183b0:	2200      	movs	r2, #0
 80183b2:	6002      	str	r2, [r0, #0]
 80183b4:	6018      	str	r0, [r3, #0]
 80183b6:	4770      	bx	lr

080183b8 <put_memory>:
 80183b8:	680b      	ldr	r3, [r1, #0]
 80183ba:	b10b      	cbz	r3, 80183c0 <put_memory+0x8>
 80183bc:	684a      	ldr	r2, [r1, #4]
 80183be:	605a      	str	r2, [r3, #4]
 80183c0:	684a      	ldr	r2, [r1, #4]
 80183c2:	b102      	cbz	r2, 80183c6 <put_memory+0xe>
 80183c4:	6013      	str	r3, [r2, #0]
 80183c6:	6803      	ldr	r3, [r0, #0]
 80183c8:	428b      	cmp	r3, r1
 80183ca:	6843      	ldr	r3, [r0, #4]
 80183cc:	bf08      	it	eq
 80183ce:	6002      	streq	r2, [r0, #0]
 80183d0:	604b      	str	r3, [r1, #4]
 80183d2:	b103      	cbz	r3, 80183d6 <put_memory+0x1e>
 80183d4:	6019      	str	r1, [r3, #0]
 80183d6:	2300      	movs	r3, #0
 80183d8:	600b      	str	r3, [r1, #0]
 80183da:	6041      	str	r1, [r0, #4]
 80183dc:	4770      	bx	lr
 80183de:	bf00      	nop

080183e0 <rmw_destroy_client>:
 80183e0:	b570      	push	{r4, r5, r6, lr}
 80183e2:	b128      	cbz	r0, 80183f0 <rmw_destroy_client+0x10>
 80183e4:	4604      	mov	r4, r0
 80183e6:	6800      	ldr	r0, [r0, #0]
 80183e8:	460d      	mov	r5, r1
 80183ea:	f7f9 fec3 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 80183ee:	b910      	cbnz	r0, 80183f6 <rmw_destroy_client+0x16>
 80183f0:	2401      	movs	r4, #1
 80183f2:	4620      	mov	r0, r4
 80183f4:	bd70      	pop	{r4, r5, r6, pc}
 80183f6:	6863      	ldr	r3, [r4, #4]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d0f9      	beq.n	80183f0 <rmw_destroy_client+0x10>
 80183fc:	2d00      	cmp	r5, #0
 80183fe:	d0f7      	beq.n	80183f0 <rmw_destroy_client+0x10>
 8018400:	6828      	ldr	r0, [r5, #0]
 8018402:	f7f9 feb7 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 8018406:	2800      	cmp	r0, #0
 8018408:	d0f2      	beq.n	80183f0 <rmw_destroy_client+0x10>
 801840a:	686e      	ldr	r6, [r5, #4]
 801840c:	2e00      	cmp	r6, #0
 801840e:	d0ef      	beq.n	80183f0 <rmw_destroy_client+0x10>
 8018410:	6864      	ldr	r4, [r4, #4]
 8018412:	6932      	ldr	r2, [r6, #16]
 8018414:	6920      	ldr	r0, [r4, #16]
 8018416:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801841a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801841e:	6819      	ldr	r1, [r3, #0]
 8018420:	f002 f91c 	bl	801a65c <uxr_buffer_cancel_data>
 8018424:	4602      	mov	r2, r0
 8018426:	6920      	ldr	r0, [r4, #16]
 8018428:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801842c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018430:	f7f9 fe20 	bl	8012074 <run_xrce_session>
 8018434:	6920      	ldr	r0, [r4, #16]
 8018436:	6932      	ldr	r2, [r6, #16]
 8018438:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801843c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018440:	6819      	ldr	r1, [r3, #0]
 8018442:	f7f9 ffc5 	bl	80123d0 <uxr_buffer_delete_entity>
 8018446:	4602      	mov	r2, r0
 8018448:	6920      	ldr	r0, [r4, #16]
 801844a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801844e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018452:	f7f9 fe0f 	bl	8012074 <run_xrce_session>
 8018456:	2800      	cmp	r0, #0
 8018458:	4628      	mov	r0, r5
 801845a:	bf14      	ite	ne
 801845c:	2400      	movne	r4, #0
 801845e:	2402      	moveq	r4, #2
 8018460:	f7f9 fcf0 	bl	8011e44 <rmw_uxrce_fini_client_memory>
 8018464:	e7c5      	b.n	80183f2 <rmw_destroy_client+0x12>
 8018466:	bf00      	nop

08018468 <rmw_get_implementation_identifier>:
 8018468:	4b01      	ldr	r3, [pc, #4]	@ (8018470 <rmw_get_implementation_identifier+0x8>)
 801846a:	6818      	ldr	r0, [r3, #0]
 801846c:	4770      	bx	lr
 801846e:	bf00      	nop
 8018470:	0801dd78 	.word	0x0801dd78

08018474 <rmw_init_options_init>:
 8018474:	b084      	sub	sp, #16
 8018476:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018478:	b083      	sub	sp, #12
 801847a:	ad09      	add	r5, sp, #36	@ 0x24
 801847c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8018480:	b130      	cbz	r0, 8018490 <rmw_init_options_init+0x1c>
 8018482:	4604      	mov	r4, r0
 8018484:	4628      	mov	r0, r5
 8018486:	f7f9 f8cf 	bl	8011628 <rcutils_allocator_is_valid>
 801848a:	b108      	cbz	r0, 8018490 <rmw_init_options_init+0x1c>
 801848c:	68a6      	ldr	r6, [r4, #8]
 801848e:	b12e      	cbz	r6, 801849c <rmw_init_options_init+0x28>
 8018490:	200b      	movs	r0, #11
 8018492:	b003      	add	sp, #12
 8018494:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018498:	b004      	add	sp, #16
 801849a:	4770      	bx	lr
 801849c:	2200      	movs	r2, #0
 801849e:	2300      	movs	r3, #0
 80184a0:	e9c4 2300 	strd	r2, r3, [r4]
 80184a4:	4b20      	ldr	r3, [pc, #128]	@ (8018528 <rmw_init_options_init+0xb4>)
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	60a3      	str	r3, [r4, #8]
 80184aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184ac:	f104 0c20 	add.w	ip, r4, #32
 80184b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80184b4:	466f      	mov	r7, sp
 80184b6:	682b      	ldr	r3, [r5, #0]
 80184b8:	f8cc 3000 	str.w	r3, [ip]
 80184bc:	4638      	mov	r0, r7
 80184be:	61e6      	str	r6, [r4, #28]
 80184c0:	60e6      	str	r6, [r4, #12]
 80184c2:	f7ff fd79 	bl	8017fb8 <rmw_get_default_security_options>
 80184c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80184ca:	f104 0310 	add.w	r3, r4, #16
 80184ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80184d2:	2203      	movs	r2, #3
 80184d4:	4815      	ldr	r0, [pc, #84]	@ (801852c <rmw_init_options_init+0xb8>)
 80184d6:	4916      	ldr	r1, [pc, #88]	@ (8018530 <rmw_init_options_init+0xbc>)
 80184d8:	7626      	strb	r6, [r4, #24]
 80184da:	f7f9 fbf3 	bl	8011cc4 <rmw_uxrce_init_init_options_impl_memory>
 80184de:	4813      	ldr	r0, [pc, #76]	@ (801852c <rmw_init_options_init+0xb8>)
 80184e0:	f7ff ff5a 	bl	8018398 <get_memory>
 80184e4:	b1f0      	cbz	r0, 8018524 <rmw_init_options_init+0xb0>
 80184e6:	4a13      	ldr	r2, [pc, #76]	@ (8018534 <rmw_init_options_init+0xc0>)
 80184e8:	6883      	ldr	r3, [r0, #8]
 80184ea:	6851      	ldr	r1, [r2, #4]
 80184ec:	7810      	ldrb	r0, [r2, #0]
 80184ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80184f0:	7418      	strb	r0, [r3, #16]
 80184f2:	6159      	str	r1, [r3, #20]
 80184f4:	68d1      	ldr	r1, [r2, #12]
 80184f6:	61d9      	str	r1, [r3, #28]
 80184f8:	6911      	ldr	r1, [r2, #16]
 80184fa:	6219      	str	r1, [r3, #32]
 80184fc:	6951      	ldr	r1, [r2, #20]
 80184fe:	6892      	ldr	r2, [r2, #8]
 8018500:	619a      	str	r2, [r3, #24]
 8018502:	6259      	str	r1, [r3, #36]	@ 0x24
 8018504:	f7fb fbc0 	bl	8013c88 <uxr_nanos>
 8018508:	f003 fbc6 	bl	801bc98 <srand>
 801850c:	f003 fbf2 	bl	801bcf4 <rand>
 8018510:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018512:	6298      	str	r0, [r3, #40]	@ 0x28
 8018514:	2800      	cmp	r0, #0
 8018516:	d0f9      	beq.n	801850c <rmw_init_options_init+0x98>
 8018518:	2000      	movs	r0, #0
 801851a:	b003      	add	sp, #12
 801851c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018520:	b004      	add	sp, #16
 8018522:	4770      	bx	lr
 8018524:	2001      	movs	r0, #1
 8018526:	e7b4      	b.n	8018492 <rmw_init_options_init+0x1e>
 8018528:	0801dd78 	.word	0x0801dd78
 801852c:	2000e504 	.word	0x2000e504
 8018530:	20009da0 	.word	0x20009da0
 8018534:	20009c2c 	.word	0x20009c2c

08018538 <rmw_init_options_copy>:
 8018538:	b570      	push	{r4, r5, r6, lr}
 801853a:	b088      	sub	sp, #32
 801853c:	b160      	cbz	r0, 8018558 <rmw_init_options_copy+0x20>
 801853e:	460d      	mov	r5, r1
 8018540:	b151      	cbz	r1, 8018558 <rmw_init_options_copy+0x20>
 8018542:	4604      	mov	r4, r0
 8018544:	6880      	ldr	r0, [r0, #8]
 8018546:	b128      	cbz	r0, 8018554 <rmw_init_options_copy+0x1c>
 8018548:	4b33      	ldr	r3, [pc, #204]	@ (8018618 <rmw_init_options_copy+0xe0>)
 801854a:	6819      	ldr	r1, [r3, #0]
 801854c:	f7e7 fe40 	bl	80001d0 <strcmp>
 8018550:	2800      	cmp	r0, #0
 8018552:	d154      	bne.n	80185fe <rmw_init_options_copy+0xc6>
 8018554:	68ab      	ldr	r3, [r5, #8]
 8018556:	b11b      	cbz	r3, 8018560 <rmw_init_options_copy+0x28>
 8018558:	240b      	movs	r4, #11
 801855a:	4620      	mov	r0, r4
 801855c:	b008      	add	sp, #32
 801855e:	bd70      	pop	{r4, r5, r6, pc}
 8018560:	4623      	mov	r3, r4
 8018562:	462a      	mov	r2, r5
 8018564:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8018568:	f8d3 c000 	ldr.w	ip, [r3]
 801856c:	6858      	ldr	r0, [r3, #4]
 801856e:	6899      	ldr	r1, [r3, #8]
 8018570:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8018574:	f8c2 e00c 	str.w	lr, [r2, #12]
 8018578:	3310      	adds	r3, #16
 801857a:	42b3      	cmp	r3, r6
 801857c:	f8c2 c000 	str.w	ip, [r2]
 8018580:	6050      	str	r0, [r2, #4]
 8018582:	6091      	str	r1, [r2, #8]
 8018584:	f102 0210 	add.w	r2, r2, #16
 8018588:	d1ee      	bne.n	8018568 <rmw_init_options_copy+0x30>
 801858a:	6819      	ldr	r1, [r3, #0]
 801858c:	685b      	ldr	r3, [r3, #4]
 801858e:	6053      	str	r3, [r2, #4]
 8018590:	6011      	str	r1, [r2, #0]
 8018592:	f104 0e20 	add.w	lr, r4, #32
 8018596:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801859a:	f10d 0c0c 	add.w	ip, sp, #12
 801859e:	4666      	mov	r6, ip
 80185a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80185a4:	f8de 3000 	ldr.w	r3, [lr]
 80185a8:	f8cc 3000 	str.w	r3, [ip]
 80185ac:	4630      	mov	r0, r6
 80185ae:	f7f9 f83b 	bl	8011628 <rcutils_allocator_is_valid>
 80185b2:	2800      	cmp	r0, #0
 80185b4:	d0d0      	beq.n	8018558 <rmw_init_options_copy+0x20>
 80185b6:	ab08      	add	r3, sp, #32
 80185b8:	e913 0003 	ldmdb	r3, {r0, r1}
 80185bc:	e88d 0003 	stmia.w	sp, {r0, r1}
 80185c0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80185c4:	69e0      	ldr	r0, [r4, #28]
 80185c6:	f7ff fb6d 	bl	8017ca4 <rcutils_strdup>
 80185ca:	61e8      	str	r0, [r5, #28]
 80185cc:	69e3      	ldr	r3, [r4, #28]
 80185ce:	b103      	cbz	r3, 80185d2 <rmw_init_options_copy+0x9a>
 80185d0:	b1f8      	cbz	r0, 8018612 <rmw_init_options_copy+0xda>
 80185d2:	4812      	ldr	r0, [pc, #72]	@ (801861c <rmw_init_options_copy+0xe4>)
 80185d4:	f7ff fee0 	bl	8018398 <get_memory>
 80185d8:	b1a8      	cbz	r0, 8018606 <rmw_init_options_copy+0xce>
 80185da:	6883      	ldr	r3, [r0, #8]
 80185dc:	636b      	str	r3, [r5, #52]	@ 0x34
 80185de:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80185e0:	f102 0c10 	add.w	ip, r2, #16
 80185e4:	f103 0510 	add.w	r5, r3, #16
 80185e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80185ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80185ee:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80185f2:	2400      	movs	r4, #0
 80185f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80185f8:	4620      	mov	r0, r4
 80185fa:	b008      	add	sp, #32
 80185fc:	bd70      	pop	{r4, r5, r6, pc}
 80185fe:	240c      	movs	r4, #12
 8018600:	4620      	mov	r0, r4
 8018602:	b008      	add	sp, #32
 8018604:	bd70      	pop	{r4, r5, r6, pc}
 8018606:	9b04      	ldr	r3, [sp, #16]
 8018608:	9907      	ldr	r1, [sp, #28]
 801860a:	69e8      	ldr	r0, [r5, #28]
 801860c:	4798      	blx	r3
 801860e:	2401      	movs	r4, #1
 8018610:	e7a3      	b.n	801855a <rmw_init_options_copy+0x22>
 8018612:	240a      	movs	r4, #10
 8018614:	e7a1      	b.n	801855a <rmw_init_options_copy+0x22>
 8018616:	bf00      	nop
 8018618:	0801dd78 	.word	0x0801dd78
 801861c:	2000e504 	.word	0x2000e504

08018620 <rmw_init_options_fini>:
 8018620:	2800      	cmp	r0, #0
 8018622:	d041      	beq.n	80186a8 <rmw_init_options_fini+0x88>
 8018624:	b510      	push	{r4, lr}
 8018626:	4604      	mov	r4, r0
 8018628:	b08e      	sub	sp, #56	@ 0x38
 801862a:	3020      	adds	r0, #32
 801862c:	f7f8 fffc 	bl	8011628 <rcutils_allocator_is_valid>
 8018630:	b380      	cbz	r0, 8018694 <rmw_init_options_fini+0x74>
 8018632:	68a0      	ldr	r0, [r4, #8]
 8018634:	b120      	cbz	r0, 8018640 <rmw_init_options_fini+0x20>
 8018636:	4b1e      	ldr	r3, [pc, #120]	@ (80186b0 <rmw_init_options_fini+0x90>)
 8018638:	6819      	ldr	r1, [r3, #0]
 801863a:	f7e7 fdc9 	bl	80001d0 <strcmp>
 801863e:	bb88      	cbnz	r0, 80186a4 <rmw_init_options_fini+0x84>
 8018640:	4b1c      	ldr	r3, [pc, #112]	@ (80186b4 <rmw_init_options_fini+0x94>)
 8018642:	6819      	ldr	r1, [r3, #0]
 8018644:	b351      	cbz	r1, 801869c <rmw_init_options_fini+0x7c>
 8018646:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8018648:	e001      	b.n	801864e <rmw_init_options_fini+0x2e>
 801864a:	6849      	ldr	r1, [r1, #4]
 801864c:	b331      	cbz	r1, 801869c <rmw_init_options_fini+0x7c>
 801864e:	688b      	ldr	r3, [r1, #8]
 8018650:	429a      	cmp	r2, r3
 8018652:	d1fa      	bne.n	801864a <rmw_init_options_fini+0x2a>
 8018654:	4817      	ldr	r0, [pc, #92]	@ (80186b4 <rmw_init_options_fini+0x94>)
 8018656:	f7ff feaf 	bl	80183b8 <put_memory>
 801865a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801865c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801865e:	69e0      	ldr	r0, [r4, #28]
 8018660:	4798      	blx	r3
 8018662:	4668      	mov	r0, sp
 8018664:	f7ff fc98 	bl	8017f98 <rmw_get_zero_initialized_init_options>
 8018668:	46ee      	mov	lr, sp
 801866a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801866e:	46a4      	mov	ip, r4
 8018670:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018674:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018678:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801867c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018680:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018684:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018688:	e88c 0003 	stmia.w	ip, {r0, r1}
 801868c:	2300      	movs	r3, #0
 801868e:	4618      	mov	r0, r3
 8018690:	b00e      	add	sp, #56	@ 0x38
 8018692:	bd10      	pop	{r4, pc}
 8018694:	230b      	movs	r3, #11
 8018696:	4618      	mov	r0, r3
 8018698:	b00e      	add	sp, #56	@ 0x38
 801869a:	bd10      	pop	{r4, pc}
 801869c:	2301      	movs	r3, #1
 801869e:	4618      	mov	r0, r3
 80186a0:	b00e      	add	sp, #56	@ 0x38
 80186a2:	bd10      	pop	{r4, pc}
 80186a4:	230c      	movs	r3, #12
 80186a6:	e7f2      	b.n	801868e <rmw_init_options_fini+0x6e>
 80186a8:	230b      	movs	r3, #11
 80186aa:	4618      	mov	r0, r3
 80186ac:	4770      	bx	lr
 80186ae:	bf00      	nop
 80186b0:	0801dd78 	.word	0x0801dd78
 80186b4:	2000e504 	.word	0x2000e504

080186b8 <rmw_init>:
 80186b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80186bc:	b083      	sub	sp, #12
 80186be:	2800      	cmp	r0, #0
 80186c0:	f000 80d3 	beq.w	801886a <rmw_init+0x1b2>
 80186c4:	460e      	mov	r6, r1
 80186c6:	2900      	cmp	r1, #0
 80186c8:	f000 80cf 	beq.w	801886a <rmw_init+0x1b2>
 80186cc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80186ce:	4605      	mov	r5, r0
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	f000 80ca 	beq.w	801886a <rmw_init+0x1b2>
 80186d6:	4b78      	ldr	r3, [pc, #480]	@ (80188b8 <rmw_init+0x200>)
 80186d8:	6880      	ldr	r0, [r0, #8]
 80186da:	681f      	ldr	r7, [r3, #0]
 80186dc:	b128      	cbz	r0, 80186ea <rmw_init+0x32>
 80186de:	4639      	mov	r1, r7
 80186e0:	f7e7 fd76 	bl	80001d0 <strcmp>
 80186e4:	2800      	cmp	r0, #0
 80186e6:	f040 80ca 	bne.w	801887e <rmw_init+0x1c6>
 80186ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80186ee:	4c73      	ldr	r4, [pc, #460]	@ (80188bc <rmw_init+0x204>)
 80186f0:	4973      	ldr	r1, [pc, #460]	@ (80188c0 <rmw_init+0x208>)
 80186f2:	4874      	ldr	r0, [pc, #464]	@ (80188c4 <rmw_init+0x20c>)
 80186f4:	60b7      	str	r7, [r6, #8]
 80186f6:	e9c6 2300 	strd	r2, r3, [r6]
 80186fa:	68eb      	ldr	r3, [r5, #12]
 80186fc:	64b3      	str	r3, [r6, #72]	@ 0x48
 80186fe:	2201      	movs	r2, #1
 8018700:	f7f9 fa80 	bl	8011c04 <rmw_uxrce_init_session_memory>
 8018704:	4620      	mov	r0, r4
 8018706:	4970      	ldr	r1, [pc, #448]	@ (80188c8 <rmw_init+0x210>)
 8018708:	2204      	movs	r2, #4
 801870a:	f7f9 fabb 	bl	8011c84 <rmw_uxrce_init_static_input_buffer_memory>
 801870e:	f04f 0800 	mov.w	r8, #0
 8018712:	486c      	ldr	r0, [pc, #432]	@ (80188c4 <rmw_init+0x20c>)
 8018714:	f884 800d 	strb.w	r8, [r4, #13]
 8018718:	f7ff fe3e 	bl	8018398 <get_memory>
 801871c:	2800      	cmp	r0, #0
 801871e:	f000 80a9 	beq.w	8018874 <rmw_init+0x1bc>
 8018722:	6884      	ldr	r4, [r0, #8]
 8018724:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8018726:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018728:	f890 c010 	ldrb.w	ip, [r0, #16]
 801872c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018730:	9101      	str	r1, [sp, #4]
 8018732:	6a00      	ldr	r0, [r0, #32]
 8018734:	9000      	str	r0, [sp, #0]
 8018736:	f104 0910 	add.w	r9, r4, #16
 801873a:	4661      	mov	r1, ip
 801873c:	4648      	mov	r0, r9
 801873e:	f001 f9c5 	bl	8019acc <uxr_set_custom_transport_callbacks>
 8018742:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8018746:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801874a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801874e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8018752:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8018756:	495d      	ldr	r1, [pc, #372]	@ (80188cc <rmw_init+0x214>)
 8018758:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801875c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8018760:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8018764:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8018768:	4859      	ldr	r0, [pc, #356]	@ (80188d0 <rmw_init+0x218>)
 801876a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801876e:	2201      	movs	r2, #1
 8018770:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8018772:	f7f9 fa27 	bl	8011bc4 <rmw_uxrce_init_node_memory>
 8018776:	4957      	ldr	r1, [pc, #348]	@ (80188d4 <rmw_init+0x21c>)
 8018778:	4857      	ldr	r0, [pc, #348]	@ (80188d8 <rmw_init+0x220>)
 801877a:	2205      	movs	r2, #5
 801877c:	f7f9 fa02 	bl	8011b84 <rmw_uxrce_init_subscription_memory>
 8018780:	4956      	ldr	r1, [pc, #344]	@ (80188dc <rmw_init+0x224>)
 8018782:	4857      	ldr	r0, [pc, #348]	@ (80188e0 <rmw_init+0x228>)
 8018784:	220a      	movs	r2, #10
 8018786:	f7f9 f9dd 	bl	8011b44 <rmw_uxrce_init_publisher_memory>
 801878a:	4956      	ldr	r1, [pc, #344]	@ (80188e4 <rmw_init+0x22c>)
 801878c:	4856      	ldr	r0, [pc, #344]	@ (80188e8 <rmw_init+0x230>)
 801878e:	2201      	movs	r2, #1
 8018790:	f7f9 f998 	bl	8011ac4 <rmw_uxrce_init_service_memory>
 8018794:	4955      	ldr	r1, [pc, #340]	@ (80188ec <rmw_init+0x234>)
 8018796:	4856      	ldr	r0, [pc, #344]	@ (80188f0 <rmw_init+0x238>)
 8018798:	2201      	movs	r2, #1
 801879a:	f7f9 f9b3 	bl	8011b04 <rmw_uxrce_init_client_memory>
 801879e:	4955      	ldr	r1, [pc, #340]	@ (80188f4 <rmw_init+0x23c>)
 80187a0:	4855      	ldr	r0, [pc, #340]	@ (80188f8 <rmw_init+0x240>)
 80187a2:	220f      	movs	r2, #15
 80187a4:	f7f9 fa4e 	bl	8011c44 <rmw_uxrce_init_topic_memory>
 80187a8:	4954      	ldr	r1, [pc, #336]	@ (80188fc <rmw_init+0x244>)
 80187aa:	4855      	ldr	r0, [pc, #340]	@ (8018900 <rmw_init+0x248>)
 80187ac:	2203      	movs	r2, #3
 80187ae:	f7f9 fa89 	bl	8011cc4 <rmw_uxrce_init_init_options_impl_memory>
 80187b2:	4954      	ldr	r1, [pc, #336]	@ (8018904 <rmw_init+0x24c>)
 80187b4:	4854      	ldr	r0, [pc, #336]	@ (8018908 <rmw_init+0x250>)
 80187b6:	2204      	movs	r2, #4
 80187b8:	f7f9 faa4 	bl	8011d04 <rmw_uxrce_init_wait_set_memory>
 80187bc:	4953      	ldr	r1, [pc, #332]	@ (801890c <rmw_init+0x254>)
 80187be:	4854      	ldr	r0, [pc, #336]	@ (8018910 <rmw_init+0x258>)
 80187c0:	2204      	movs	r2, #4
 80187c2:	f7f9 fabf 	bl	8011d44 <rmw_uxrce_init_guard_condition_memory>
 80187c6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80187c8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 80187ca:	4642      	mov	r2, r8
 80187cc:	f000 fd9e 	bl	801930c <rmw_uxrce_transport_init>
 80187d0:	4607      	mov	r7, r0
 80187d2:	2800      	cmp	r0, #0
 80187d4:	d158      	bne.n	8018888 <rmw_init+0x1d0>
 80187d6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80187d8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 80187dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80187de:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80187e2:	4628      	mov	r0, r5
 80187e4:	f7fa f8b4 	bl	8012950 <uxr_init_session>
 80187e8:	494a      	ldr	r1, [pc, #296]	@ (8018914 <rmw_init+0x25c>)
 80187ea:	4622      	mov	r2, r4
 80187ec:	4628      	mov	r0, r5
 80187ee:	f7fa f8d3 	bl	8012998 <uxr_set_topic_callback>
 80187f2:	4949      	ldr	r1, [pc, #292]	@ (8018918 <rmw_init+0x260>)
 80187f4:	463a      	mov	r2, r7
 80187f6:	4628      	mov	r0, r5
 80187f8:	f7fa f8ca 	bl	8012990 <uxr_set_status_callback>
 80187fc:	4947      	ldr	r1, [pc, #284]	@ (801891c <rmw_init+0x264>)
 80187fe:	463a      	mov	r2, r7
 8018800:	4628      	mov	r0, r5
 8018802:	f7fa f8cd 	bl	80129a0 <uxr_set_request_callback>
 8018806:	4946      	ldr	r1, [pc, #280]	@ (8018920 <rmw_init+0x268>)
 8018808:	463a      	mov	r2, r7
 801880a:	4628      	mov	r0, r5
 801880c:	f7fa f8cc 	bl	80129a8 <uxr_set_reply_callback>
 8018810:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018814:	2304      	movs	r3, #4
 8018816:	0092      	lsls	r2, r2, #2
 8018818:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801881c:	4628      	mov	r0, r5
 801881e:	f7fa f901 	bl	8012a24 <uxr_create_input_reliable_stream>
 8018822:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018826:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801882a:	0092      	lsls	r2, r2, #2
 801882c:	2304      	movs	r3, #4
 801882e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8018832:	4628      	mov	r0, r5
 8018834:	f7fa f8ce 	bl	80129d4 <uxr_create_output_reliable_stream>
 8018838:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801883c:	4628      	mov	r0, r5
 801883e:	f7fa f8eb 	bl	8012a18 <uxr_create_input_best_effort_stream>
 8018842:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8018846:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801884a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801884e:	3114      	adds	r1, #20
 8018850:	4628      	mov	r0, r5
 8018852:	f7fa f8ad 	bl	80129b0 <uxr_create_output_best_effort_stream>
 8018856:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801885a:	4628      	mov	r0, r5
 801885c:	f7fa fe38 	bl	80134d0 <uxr_create_session>
 8018860:	b1f8      	cbz	r0, 80188a2 <rmw_init+0x1ea>
 8018862:	4638      	mov	r0, r7
 8018864:	b003      	add	sp, #12
 8018866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801886a:	270b      	movs	r7, #11
 801886c:	4638      	mov	r0, r7
 801886e:	b003      	add	sp, #12
 8018870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018874:	2701      	movs	r7, #1
 8018876:	4638      	mov	r0, r7
 8018878:	b003      	add	sp, #12
 801887a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801887e:	270c      	movs	r7, #12
 8018880:	4638      	mov	r0, r7
 8018882:	b003      	add	sp, #12
 8018884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018888:	4648      	mov	r0, r9
 801888a:	f001 f961 	bl	8019b50 <uxr_close_custom_transport>
 801888e:	480d      	ldr	r0, [pc, #52]	@ (80188c4 <rmw_init+0x20c>)
 8018890:	4621      	mov	r1, r4
 8018892:	f7ff fd91 	bl	80183b8 <put_memory>
 8018896:	4638      	mov	r0, r7
 8018898:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801889c:	b003      	add	sp, #12
 801889e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188a2:	4648      	mov	r0, r9
 80188a4:	f001 f954 	bl	8019b50 <uxr_close_custom_transport>
 80188a8:	4806      	ldr	r0, [pc, #24]	@ (80188c4 <rmw_init+0x20c>)
 80188aa:	4621      	mov	r1, r4
 80188ac:	f7ff fd84 	bl	80183b8 <put_memory>
 80188b0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80188b2:	2701      	movs	r7, #1
 80188b4:	e7d5      	b.n	8018862 <rmw_init+0x1aa>
 80188b6:	bf00      	nop
 80188b8:	0801dd78 	.word	0x0801dd78
 80188bc:	2000e554 	.word	0x2000e554
 80188c0:	2000a800 	.word	0x2000a800
 80188c4:	2000e544 	.word	0x2000e544
 80188c8:	2000bda8 	.word	0x2000bda8
 80188cc:	20009e24 	.word	0x20009e24
 80188d0:	2000e514 	.word	0x2000e514
 80188d4:	2000dea8 	.word	0x2000dea8
 80188d8:	2000e564 	.word	0x2000e564
 80188dc:	20009ec8 	.word	0x20009ec8
 80188e0:	2000e524 	.word	0x2000e524
 80188e4:	2000a738 	.word	0x2000a738
 80188e8:	2000e534 	.word	0x2000e534
 80188ec:	20009c58 	.word	0x20009c58
 80188f0:	20009c48 	.word	0x20009c48
 80188f4:	2000e2e0 	.word	0x2000e2e0
 80188f8:	2000e574 	.word	0x2000e574
 80188fc:	20009da0 	.word	0x20009da0
 8018900:	2000e504 	.word	0x2000e504
 8018904:	2000e484 	.word	0x2000e484
 8018908:	2000e584 	.word	0x2000e584
 801890c:	20009d20 	.word	0x20009d20
 8018910:	2000e4f4 	.word	0x2000e4f4
 8018914:	0801b83d 	.word	0x0801b83d
 8018918:	0801b835 	.word	0x0801b835
 801891c:	0801b8d5 	.word	0x0801b8d5
 8018920:	0801b971 	.word	0x0801b971

08018924 <rmw_context_fini>:
 8018924:	4b17      	ldr	r3, [pc, #92]	@ (8018984 <rmw_context_fini+0x60>)
 8018926:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8018928:	b570      	push	{r4, r5, r6, lr}
 801892a:	681c      	ldr	r4, [r3, #0]
 801892c:	4605      	mov	r5, r0
 801892e:	b334      	cbz	r4, 801897e <rmw_context_fini+0x5a>
 8018930:	2600      	movs	r6, #0
 8018932:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8018936:	6902      	ldr	r2, [r0, #16]
 8018938:	428a      	cmp	r2, r1
 801893a:	d018      	beq.n	801896e <rmw_context_fini+0x4a>
 801893c:	2c00      	cmp	r4, #0
 801893e:	d1f8      	bne.n	8018932 <rmw_context_fini+0xe>
 8018940:	b189      	cbz	r1, 8018966 <rmw_context_fini+0x42>
 8018942:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8018946:	789b      	ldrb	r3, [r3, #2]
 8018948:	2b01      	cmp	r3, #1
 801894a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801894e:	bf14      	ite	ne
 8018950:	210a      	movne	r1, #10
 8018952:	2100      	moveq	r1, #0
 8018954:	f7fa fd94 	bl	8013480 <uxr_delete_session_retries>
 8018958:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801895a:	f7f9 fa13 	bl	8011d84 <rmw_uxrce_fini_session_memory>
 801895e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8018960:	3010      	adds	r0, #16
 8018962:	f001 f8f5 	bl	8019b50 <uxr_close_custom_transport>
 8018966:	2300      	movs	r3, #0
 8018968:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801896a:	4630      	mov	r0, r6
 801896c:	bd70      	pop	{r4, r5, r6, pc}
 801896e:	3018      	adds	r0, #24
 8018970:	f000 f90e 	bl	8018b90 <rmw_destroy_node>
 8018974:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8018976:	4606      	mov	r6, r0
 8018978:	2c00      	cmp	r4, #0
 801897a:	d1da      	bne.n	8018932 <rmw_context_fini+0xe>
 801897c:	e7e0      	b.n	8018940 <rmw_context_fini+0x1c>
 801897e:	4626      	mov	r6, r4
 8018980:	e7de      	b.n	8018940 <rmw_context_fini+0x1c>
 8018982:	bf00      	nop
 8018984:	2000e514 	.word	0x2000e514

08018988 <create_topic>:
 8018988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801898c:	4605      	mov	r5, r0
 801898e:	b084      	sub	sp, #16
 8018990:	4822      	ldr	r0, [pc, #136]	@ (8018a1c <create_topic+0x94>)
 8018992:	460f      	mov	r7, r1
 8018994:	4616      	mov	r6, r2
 8018996:	f7ff fcff 	bl	8018398 <get_memory>
 801899a:	4604      	mov	r4, r0
 801899c:	2800      	cmp	r0, #0
 801899e:	d039      	beq.n	8018a14 <create_topic+0x8c>
 80189a0:	692b      	ldr	r3, [r5, #16]
 80189a2:	6884      	ldr	r4, [r0, #8]
 80189a4:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8018a24 <create_topic+0x9c>
 80189a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189ac:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80189b0:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80189b4:	1c42      	adds	r2, r0, #1
 80189b6:	2102      	movs	r1, #2
 80189b8:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80189bc:	f7f9 ff0a 	bl	80127d4 <uxr_object_id>
 80189c0:	223c      	movs	r2, #60	@ 0x3c
 80189c2:	6120      	str	r0, [r4, #16]
 80189c4:	4641      	mov	r1, r8
 80189c6:	4638      	mov	r0, r7
 80189c8:	f7f9 fbba 	bl	8012140 <generate_topic_name>
 80189cc:	b1f0      	cbz	r0, 8018a0c <create_topic+0x84>
 80189ce:	4f14      	ldr	r7, [pc, #80]	@ (8018a20 <create_topic+0x98>)
 80189d0:	4630      	mov	r0, r6
 80189d2:	2264      	movs	r2, #100	@ 0x64
 80189d4:	4639      	mov	r1, r7
 80189d6:	f7f9 fb83 	bl	80120e0 <generate_type_name>
 80189da:	b1b8      	cbz	r0, 8018a0c <create_topic+0x84>
 80189dc:	6928      	ldr	r0, [r5, #16]
 80189de:	2306      	movs	r3, #6
 80189e0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80189e4:	f8cd 8000 	str.w	r8, [sp]
 80189e8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80189ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80189f0:	6811      	ldr	r1, [r2, #0]
 80189f2:	696b      	ldr	r3, [r5, #20]
 80189f4:	6922      	ldr	r2, [r4, #16]
 80189f6:	f7f9 fd69 	bl	80124cc <uxr_buffer_create_topic_bin>
 80189fa:	4602      	mov	r2, r0
 80189fc:	6928      	ldr	r0, [r5, #16]
 80189fe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018a02:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018a06:	f7f9 fb35 	bl	8012074 <run_xrce_session>
 8018a0a:	b918      	cbnz	r0, 8018a14 <create_topic+0x8c>
 8018a0c:	4620      	mov	r0, r4
 8018a0e:	f7f9 fa2f 	bl	8011e70 <rmw_uxrce_fini_topic_memory>
 8018a12:	2400      	movs	r4, #0
 8018a14:	4620      	mov	r0, r4
 8018a16:	b004      	add	sp, #16
 8018a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a1c:	2000e574 	.word	0x2000e574
 8018a20:	2000e660 	.word	0x2000e660
 8018a24:	2000e624 	.word	0x2000e624

08018a28 <destroy_topic>:
 8018a28:	b538      	push	{r3, r4, r5, lr}
 8018a2a:	6985      	ldr	r5, [r0, #24]
 8018a2c:	b1d5      	cbz	r5, 8018a64 <destroy_topic+0x3c>
 8018a2e:	4604      	mov	r4, r0
 8018a30:	6928      	ldr	r0, [r5, #16]
 8018a32:	6922      	ldr	r2, [r4, #16]
 8018a34:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018a38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018a3c:	6819      	ldr	r1, [r3, #0]
 8018a3e:	f7f9 fcc7 	bl	80123d0 <uxr_buffer_delete_entity>
 8018a42:	4602      	mov	r2, r0
 8018a44:	6928      	ldr	r0, [r5, #16]
 8018a46:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018a4a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018a4e:	f7f9 fb11 	bl	8012074 <run_xrce_session>
 8018a52:	2800      	cmp	r0, #0
 8018a54:	4620      	mov	r0, r4
 8018a56:	bf14      	ite	ne
 8018a58:	2400      	movne	r4, #0
 8018a5a:	2402      	moveq	r4, #2
 8018a5c:	f7f9 fa08 	bl	8011e70 <rmw_uxrce_fini_topic_memory>
 8018a60:	4620      	mov	r0, r4
 8018a62:	bd38      	pop	{r3, r4, r5, pc}
 8018a64:	2401      	movs	r4, #1
 8018a66:	4620      	mov	r0, r4
 8018a68:	bd38      	pop	{r3, r4, r5, pc}
 8018a6a:	bf00      	nop

08018a6c <create_node>:
 8018a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a70:	b083      	sub	sp, #12
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d05f      	beq.n	8018b36 <create_node+0xca>
 8018a76:	4606      	mov	r6, r0
 8018a78:	4835      	ldr	r0, [pc, #212]	@ (8018b50 <create_node+0xe4>)
 8018a7a:	460f      	mov	r7, r1
 8018a7c:	4690      	mov	r8, r2
 8018a7e:	461d      	mov	r5, r3
 8018a80:	f7ff fc8a 	bl	8018398 <get_memory>
 8018a84:	2800      	cmp	r0, #0
 8018a86:	d056      	beq.n	8018b36 <create_node+0xca>
 8018a88:	6884      	ldr	r4, [r0, #8]
 8018a8a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8018a8c:	6123      	str	r3, [r4, #16]
 8018a8e:	f7ff fceb 	bl	8018468 <rmw_get_implementation_identifier>
 8018a92:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8018a96:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8018a9a:	f8c4 9020 	str.w	r9, [r4, #32]
 8018a9e:	4630      	mov	r0, r6
 8018aa0:	f7e7 fba0 	bl	80001e4 <strlen>
 8018aa4:	1c42      	adds	r2, r0, #1
 8018aa6:	2a3c      	cmp	r2, #60	@ 0x3c
 8018aa8:	f104 0518 	add.w	r5, r4, #24
 8018aac:	d840      	bhi.n	8018b30 <create_node+0xc4>
 8018aae:	4648      	mov	r0, r9
 8018ab0:	4631      	mov	r1, r6
 8018ab2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8018ab6:	f003 fc86 	bl	801c3c6 <memcpy>
 8018aba:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8018abe:	4638      	mov	r0, r7
 8018ac0:	f7e7 fb90 	bl	80001e4 <strlen>
 8018ac4:	1c42      	adds	r2, r0, #1
 8018ac6:	2a3c      	cmp	r2, #60	@ 0x3c
 8018ac8:	d832      	bhi.n	8018b30 <create_node+0xc4>
 8018aca:	4639      	mov	r1, r7
 8018acc:	4648      	mov	r0, r9
 8018ace:	f003 fc7a 	bl	801c3c6 <memcpy>
 8018ad2:	6923      	ldr	r3, [r4, #16]
 8018ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ad8:	2101      	movs	r1, #1
 8018ada:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8018ade:	1842      	adds	r2, r0, r1
 8018ae0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8018ae4:	f7f9 fe76 	bl	80127d4 <uxr_object_id>
 8018ae8:	6160      	str	r0, [r4, #20]
 8018aea:	783b      	ldrb	r3, [r7, #0]
 8018aec:	2b2f      	cmp	r3, #47	@ 0x2f
 8018aee:	d127      	bne.n	8018b40 <create_node+0xd4>
 8018af0:	787b      	ldrb	r3, [r7, #1]
 8018af2:	bb2b      	cbnz	r3, 8018b40 <create_node+0xd4>
 8018af4:	4a17      	ldr	r2, [pc, #92]	@ (8018b54 <create_node+0xe8>)
 8018af6:	4818      	ldr	r0, [pc, #96]	@ (8018b58 <create_node+0xec>)
 8018af8:	4633      	mov	r3, r6
 8018afa:	213c      	movs	r1, #60	@ 0x3c
 8018afc:	f003 faba 	bl	801c074 <sniprintf>
 8018b00:	6920      	ldr	r0, [r4, #16]
 8018b02:	4915      	ldr	r1, [pc, #84]	@ (8018b58 <create_node+0xec>)
 8018b04:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018b08:	9100      	str	r1, [sp, #0]
 8018b0a:	2106      	movs	r1, #6
 8018b0c:	9101      	str	r1, [sp, #4]
 8018b0e:	6811      	ldr	r1, [r2, #0]
 8018b10:	6962      	ldr	r2, [r4, #20]
 8018b12:	fa1f f388 	uxth.w	r3, r8
 8018b16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b1a:	f7f9 fca5 	bl	8012468 <uxr_buffer_create_participant_bin>
 8018b1e:	4602      	mov	r2, r0
 8018b20:	6920      	ldr	r0, [r4, #16]
 8018b22:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018b26:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018b2a:	f7f9 faa3 	bl	8012074 <run_xrce_session>
 8018b2e:	b918      	cbnz	r0, 8018b38 <create_node+0xcc>
 8018b30:	4628      	mov	r0, r5
 8018b32:	f7f9 f92d 	bl	8011d90 <rmw_uxrce_fini_node_memory>
 8018b36:	2500      	movs	r5, #0
 8018b38:	4628      	mov	r0, r5
 8018b3a:	b003      	add	sp, #12
 8018b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b40:	4a06      	ldr	r2, [pc, #24]	@ (8018b5c <create_node+0xf0>)
 8018b42:	9600      	str	r6, [sp, #0]
 8018b44:	463b      	mov	r3, r7
 8018b46:	213c      	movs	r1, #60	@ 0x3c
 8018b48:	4803      	ldr	r0, [pc, #12]	@ (8018b58 <create_node+0xec>)
 8018b4a:	f003 fa93 	bl	801c074 <sniprintf>
 8018b4e:	e7d7      	b.n	8018b00 <create_node+0x94>
 8018b50:	2000e514 	.word	0x2000e514
 8018b54:	0801d424 	.word	0x0801d424
 8018b58:	2000e6c4 	.word	0x2000e6c4
 8018b5c:	0801d614 	.word	0x0801d614

08018b60 <rmw_create_node>:
 8018b60:	b199      	cbz	r1, 8018b8a <rmw_create_node+0x2a>
 8018b62:	780b      	ldrb	r3, [r1, #0]
 8018b64:	468c      	mov	ip, r1
 8018b66:	b183      	cbz	r3, 8018b8a <rmw_create_node+0x2a>
 8018b68:	b410      	push	{r4}
 8018b6a:	4614      	mov	r4, r2
 8018b6c:	b14a      	cbz	r2, 8018b82 <rmw_create_node+0x22>
 8018b6e:	7813      	ldrb	r3, [r2, #0]
 8018b70:	b13b      	cbz	r3, 8018b82 <rmw_create_node+0x22>
 8018b72:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8018b74:	4603      	mov	r3, r0
 8018b76:	4621      	mov	r1, r4
 8018b78:	4660      	mov	r0, ip
 8018b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b7e:	f7ff bf75 	b.w	8018a6c <create_node>
 8018b82:	2000      	movs	r0, #0
 8018b84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018b88:	4770      	bx	lr
 8018b8a:	2000      	movs	r0, #0
 8018b8c:	4770      	bx	lr
 8018b8e:	bf00      	nop

08018b90 <rmw_destroy_node>:
 8018b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b92:	b328      	cbz	r0, 8018be0 <rmw_destroy_node+0x50>
 8018b94:	4607      	mov	r7, r0
 8018b96:	6800      	ldr	r0, [r0, #0]
 8018b98:	b120      	cbz	r0, 8018ba4 <rmw_destroy_node+0x14>
 8018b9a:	4b36      	ldr	r3, [pc, #216]	@ (8018c74 <rmw_destroy_node+0xe4>)
 8018b9c:	6819      	ldr	r1, [r3, #0]
 8018b9e:	f7e7 fb17 	bl	80001d0 <strcmp>
 8018ba2:	b9e8      	cbnz	r0, 8018be0 <rmw_destroy_node+0x50>
 8018ba4:	687d      	ldr	r5, [r7, #4]
 8018ba6:	b1dd      	cbz	r5, 8018be0 <rmw_destroy_node+0x50>
 8018ba8:	4b33      	ldr	r3, [pc, #204]	@ (8018c78 <rmw_destroy_node+0xe8>)
 8018baa:	681c      	ldr	r4, [r3, #0]
 8018bac:	2c00      	cmp	r4, #0
 8018bae:	d05f      	beq.n	8018c70 <rmw_destroy_node+0xe0>
 8018bb0:	2600      	movs	r6, #0
 8018bb2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018bb6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8018bba:	429d      	cmp	r5, r3
 8018bbc:	d013      	beq.n	8018be6 <rmw_destroy_node+0x56>
 8018bbe:	2c00      	cmp	r4, #0
 8018bc0:	d1f7      	bne.n	8018bb2 <rmw_destroy_node+0x22>
 8018bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8018c7c <rmw_destroy_node+0xec>)
 8018bc4:	681c      	ldr	r4, [r3, #0]
 8018bc6:	b1c4      	cbz	r4, 8018bfa <rmw_destroy_node+0x6a>
 8018bc8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018bcc:	6a0b      	ldr	r3, [r1, #32]
 8018bce:	429d      	cmp	r5, r3
 8018bd0:	d1f9      	bne.n	8018bc6 <rmw_destroy_node+0x36>
 8018bd2:	317c      	adds	r1, #124	@ 0x7c
 8018bd4:	4638      	mov	r0, r7
 8018bd6:	f000 fae5 	bl	80191a4 <rmw_destroy_subscription>
 8018bda:	2801      	cmp	r0, #1
 8018bdc:	4606      	mov	r6, r0
 8018bde:	d1f2      	bne.n	8018bc6 <rmw_destroy_node+0x36>
 8018be0:	2601      	movs	r6, #1
 8018be2:	4630      	mov	r0, r6
 8018be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018be6:	3184      	adds	r1, #132	@ 0x84
 8018be8:	4638      	mov	r0, r7
 8018bea:	f7f8 ff19 	bl	8011a20 <rmw_destroy_publisher>
 8018bee:	2801      	cmp	r0, #1
 8018bf0:	4606      	mov	r6, r0
 8018bf2:	d0f5      	beq.n	8018be0 <rmw_destroy_node+0x50>
 8018bf4:	2c00      	cmp	r4, #0
 8018bf6:	d1dc      	bne.n	8018bb2 <rmw_destroy_node+0x22>
 8018bf8:	e7e3      	b.n	8018bc2 <rmw_destroy_node+0x32>
 8018bfa:	4b21      	ldr	r3, [pc, #132]	@ (8018c80 <rmw_destroy_node+0xf0>)
 8018bfc:	681c      	ldr	r4, [r3, #0]
 8018bfe:	b16c      	cbz	r4, 8018c1c <rmw_destroy_node+0x8c>
 8018c00:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018c04:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018c06:	429d      	cmp	r5, r3
 8018c08:	d1f9      	bne.n	8018bfe <rmw_destroy_node+0x6e>
 8018c0a:	317c      	adds	r1, #124	@ 0x7c
 8018c0c:	4638      	mov	r0, r7
 8018c0e:	f000 f993 	bl	8018f38 <rmw_destroy_service>
 8018c12:	2801      	cmp	r0, #1
 8018c14:	4606      	mov	r6, r0
 8018c16:	d0e3      	beq.n	8018be0 <rmw_destroy_node+0x50>
 8018c18:	2c00      	cmp	r4, #0
 8018c1a:	d1f1      	bne.n	8018c00 <rmw_destroy_node+0x70>
 8018c1c:	4b19      	ldr	r3, [pc, #100]	@ (8018c84 <rmw_destroy_node+0xf4>)
 8018c1e:	681c      	ldr	r4, [r3, #0]
 8018c20:	b16c      	cbz	r4, 8018c3e <rmw_destroy_node+0xae>
 8018c22:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018c26:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018c28:	429d      	cmp	r5, r3
 8018c2a:	d1f9      	bne.n	8018c20 <rmw_destroy_node+0x90>
 8018c2c:	317c      	adds	r1, #124	@ 0x7c
 8018c2e:	4638      	mov	r0, r7
 8018c30:	f7ff fbd6 	bl	80183e0 <rmw_destroy_client>
 8018c34:	2801      	cmp	r0, #1
 8018c36:	4606      	mov	r6, r0
 8018c38:	d0d2      	beq.n	8018be0 <rmw_destroy_node+0x50>
 8018c3a:	2c00      	cmp	r4, #0
 8018c3c:	d1f1      	bne.n	8018c22 <rmw_destroy_node+0x92>
 8018c3e:	6928      	ldr	r0, [r5, #16]
 8018c40:	696a      	ldr	r2, [r5, #20]
 8018c42:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018c46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c4a:	6819      	ldr	r1, [r3, #0]
 8018c4c:	f7f9 fbc0 	bl	80123d0 <uxr_buffer_delete_entity>
 8018c50:	4602      	mov	r2, r0
 8018c52:	6928      	ldr	r0, [r5, #16]
 8018c54:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018c58:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018c5c:	f7f9 fa0a 	bl	8012074 <run_xrce_session>
 8018c60:	2800      	cmp	r0, #0
 8018c62:	bf08      	it	eq
 8018c64:	2602      	moveq	r6, #2
 8018c66:	4638      	mov	r0, r7
 8018c68:	f7f9 f892 	bl	8011d90 <rmw_uxrce_fini_node_memory>
 8018c6c:	4630      	mov	r0, r6
 8018c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c70:	4626      	mov	r6, r4
 8018c72:	e7a6      	b.n	8018bc2 <rmw_destroy_node+0x32>
 8018c74:	0801dd78 	.word	0x0801dd78
 8018c78:	2000e524 	.word	0x2000e524
 8018c7c:	2000e564 	.word	0x2000e564
 8018c80:	2000e534 	.word	0x2000e534
 8018c84:	20009c48 	.word	0x20009c48

08018c88 <rmw_node_get_graph_guard_condition>:
 8018c88:	6843      	ldr	r3, [r0, #4]
 8018c8a:	6918      	ldr	r0, [r3, #16]
 8018c8c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8018c90:	4770      	bx	lr
 8018c92:	bf00      	nop

08018c94 <rmw_send_request>:
 8018c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c98:	4604      	mov	r4, r0
 8018c9a:	6800      	ldr	r0, [r0, #0]
 8018c9c:	b08b      	sub	sp, #44	@ 0x2c
 8018c9e:	460e      	mov	r6, r1
 8018ca0:	4615      	mov	r5, r2
 8018ca2:	b128      	cbz	r0, 8018cb0 <rmw_send_request+0x1c>
 8018ca4:	4b21      	ldr	r3, [pc, #132]	@ (8018d2c <rmw_send_request+0x98>)
 8018ca6:	6819      	ldr	r1, [r3, #0]
 8018ca8:	f7e7 fa92 	bl	80001d0 <strcmp>
 8018cac:	2800      	cmp	r0, #0
 8018cae:	d139      	bne.n	8018d24 <rmw_send_request+0x90>
 8018cb0:	6864      	ldr	r4, [r4, #4]
 8018cb2:	6963      	ldr	r3, [r4, #20]
 8018cb4:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8018cb8:	689b      	ldr	r3, [r3, #8]
 8018cba:	4798      	blx	r3
 8018cbc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8018cc0:	4630      	mov	r0, r6
 8018cc2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018cc6:	4798      	blx	r3
 8018cc8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018ccc:	9000      	str	r0, [sp, #0]
 8018cce:	6922      	ldr	r2, [r4, #16]
 8018cd0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8018cd2:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8018cd6:	ab02      	add	r3, sp, #8
 8018cd8:	f7fb f876 	bl	8013dc8 <uxr_prepare_output_stream>
 8018cdc:	2700      	movs	r7, #0
 8018cde:	6028      	str	r0, [r5, #0]
 8018ce0:	606f      	str	r7, [r5, #4]
 8018ce2:	b198      	cbz	r0, 8018d0c <rmw_send_request+0x78>
 8018ce4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018ce8:	a902      	add	r1, sp, #8
 8018cea:	4630      	mov	r0, r6
 8018cec:	4798      	blx	r3
 8018cee:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8018cf2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018cf6:	2b01      	cmp	r3, #1
 8018cf8:	d00c      	beq.n	8018d14 <rmw_send_request+0x80>
 8018cfa:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018cfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018d00:	f7fa fa76 	bl	80131f0 <uxr_run_session_until_confirm_delivery>
 8018d04:	4638      	mov	r0, r7
 8018d06:	b00b      	add	sp, #44	@ 0x2c
 8018d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d0c:	2001      	movs	r0, #1
 8018d0e:	b00b      	add	sp, #44	@ 0x2c
 8018d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018d18:	f7f9 feaa 	bl	8012a70 <uxr_flash_output_streams>
 8018d1c:	4638      	mov	r0, r7
 8018d1e:	b00b      	add	sp, #44	@ 0x2c
 8018d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d24:	200c      	movs	r0, #12
 8018d26:	b00b      	add	sp, #44	@ 0x2c
 8018d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d2c:	0801dd78 	.word	0x0801dd78

08018d30 <rmw_take_request>:
 8018d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d34:	4605      	mov	r5, r0
 8018d36:	6800      	ldr	r0, [r0, #0]
 8018d38:	b089      	sub	sp, #36	@ 0x24
 8018d3a:	460c      	mov	r4, r1
 8018d3c:	4690      	mov	r8, r2
 8018d3e:	461e      	mov	r6, r3
 8018d40:	b128      	cbz	r0, 8018d4e <rmw_take_request+0x1e>
 8018d42:	4b28      	ldr	r3, [pc, #160]	@ (8018de4 <rmw_take_request+0xb4>)
 8018d44:	6819      	ldr	r1, [r3, #0]
 8018d46:	f7e7 fa43 	bl	80001d0 <strcmp>
 8018d4a:	2800      	cmp	r0, #0
 8018d4c:	d146      	bne.n	8018ddc <rmw_take_request+0xac>
 8018d4e:	b10e      	cbz	r6, 8018d54 <rmw_take_request+0x24>
 8018d50:	2300      	movs	r3, #0
 8018d52:	7033      	strb	r3, [r6, #0]
 8018d54:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018d58:	f7f9 f90e 	bl	8011f78 <rmw_uxrce_clean_expired_static_input_buffer>
 8018d5c:	4648      	mov	r0, r9
 8018d5e:	f7f9 f8e3 	bl	8011f28 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018d62:	4607      	mov	r7, r0
 8018d64:	b3b0      	cbz	r0, 8018dd4 <rmw_take_request+0xa4>
 8018d66:	6885      	ldr	r5, [r0, #8]
 8018d68:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8018d6c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8018d70:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018d74:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8018d78:	7423      	strb	r3, [r4, #16]
 8018d7a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8018d7e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8018d82:	74e2      	strb	r2, [r4, #19]
 8018d84:	f8a4 3011 	strh.w	r3, [r4, #17]
 8018d88:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8018d8c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8018d90:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8018d94:	61e1      	str	r1, [r4, #28]
 8018d96:	6162      	str	r2, [r4, #20]
 8018d98:	61a3      	str	r3, [r4, #24]
 8018d9a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018d9e:	689b      	ldr	r3, [r3, #8]
 8018da0:	4798      	blx	r3
 8018da2:	6844      	ldr	r4, [r0, #4]
 8018da4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8018da8:	f105 0110 	add.w	r1, r5, #16
 8018dac:	4668      	mov	r0, sp
 8018dae:	f7f7 fb79 	bl	80104a4 <ucdr_init_buffer>
 8018db2:	68e3      	ldr	r3, [r4, #12]
 8018db4:	4641      	mov	r1, r8
 8018db6:	4668      	mov	r0, sp
 8018db8:	4798      	blx	r3
 8018dba:	4639      	mov	r1, r7
 8018dbc:	4604      	mov	r4, r0
 8018dbe:	480a      	ldr	r0, [pc, #40]	@ (8018de8 <rmw_take_request+0xb8>)
 8018dc0:	f7ff fafa 	bl	80183b8 <put_memory>
 8018dc4:	b106      	cbz	r6, 8018dc8 <rmw_take_request+0x98>
 8018dc6:	7034      	strb	r4, [r6, #0]
 8018dc8:	f084 0001 	eor.w	r0, r4, #1
 8018dcc:	b2c0      	uxtb	r0, r0
 8018dce:	b009      	add	sp, #36	@ 0x24
 8018dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dd4:	2001      	movs	r0, #1
 8018dd6:	b009      	add	sp, #36	@ 0x24
 8018dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ddc:	200c      	movs	r0, #12
 8018dde:	b009      	add	sp, #36	@ 0x24
 8018de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018de4:	0801dd78 	.word	0x0801dd78
 8018de8:	2000e554 	.word	0x2000e554

08018dec <rmw_send_response>:
 8018dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018dee:	4605      	mov	r5, r0
 8018df0:	6800      	ldr	r0, [r0, #0]
 8018df2:	b091      	sub	sp, #68	@ 0x44
 8018df4:	460c      	mov	r4, r1
 8018df6:	4616      	mov	r6, r2
 8018df8:	b128      	cbz	r0, 8018e06 <rmw_send_response+0x1a>
 8018dfa:	4b29      	ldr	r3, [pc, #164]	@ (8018ea0 <rmw_send_response+0xb4>)
 8018dfc:	6819      	ldr	r1, [r3, #0]
 8018dfe:	f7e7 f9e7 	bl	80001d0 <strcmp>
 8018e02:	2800      	cmp	r0, #0
 8018e04:	d141      	bne.n	8018e8a <rmw_send_response+0x9e>
 8018e06:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8018e0a:	9306      	str	r3, [sp, #24]
 8018e0c:	4623      	mov	r3, r4
 8018e0e:	9207      	str	r2, [sp, #28]
 8018e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e14:	686d      	ldr	r5, [r5, #4]
 8018e16:	789b      	ldrb	r3, [r3, #2]
 8018e18:	68a1      	ldr	r1, [r4, #8]
 8018e1a:	f88d 2017 	strb.w	r2, [sp, #23]
 8018e1e:	f88d 3016 	strb.w	r3, [sp, #22]
 8018e22:	68e2      	ldr	r2, [r4, #12]
 8018e24:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018e28:	6860      	ldr	r0, [r4, #4]
 8018e2a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018e2e:	ab02      	add	r3, sp, #8
 8018e30:	c307      	stmia	r3!, {r0, r1, r2}
 8018e32:	696b      	ldr	r3, [r5, #20]
 8018e34:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8018e36:	68db      	ldr	r3, [r3, #12]
 8018e38:	4798      	blx	r3
 8018e3a:	6844      	ldr	r4, [r0, #4]
 8018e3c:	4630      	mov	r0, r6
 8018e3e:	6923      	ldr	r3, [r4, #16]
 8018e40:	4798      	blx	r3
 8018e42:	f100 0318 	add.w	r3, r0, #24
 8018e46:	6938      	ldr	r0, [r7, #16]
 8018e48:	9300      	str	r3, [sp, #0]
 8018e4a:	692a      	ldr	r2, [r5, #16]
 8018e4c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8018e4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e52:	ab08      	add	r3, sp, #32
 8018e54:	f7fa ffb8 	bl	8013dc8 <uxr_prepare_output_stream>
 8018e58:	b910      	cbnz	r0, 8018e60 <rmw_send_response+0x74>
 8018e5a:	2001      	movs	r0, #1
 8018e5c:	b011      	add	sp, #68	@ 0x44
 8018e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e60:	a902      	add	r1, sp, #8
 8018e62:	a808      	add	r0, sp, #32
 8018e64:	f7fc f8e8 	bl	8015038 <uxr_serialize_SampleIdentity>
 8018e68:	68a3      	ldr	r3, [r4, #8]
 8018e6a:	a908      	add	r1, sp, #32
 8018e6c:	4630      	mov	r0, r6
 8018e6e:	4798      	blx	r3
 8018e70:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8018e74:	6938      	ldr	r0, [r7, #16]
 8018e76:	2b01      	cmp	r3, #1
 8018e78:	d00a      	beq.n	8018e90 <rmw_send_response+0xa4>
 8018e7a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8018e7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e80:	f7fa f9b6 	bl	80131f0 <uxr_run_session_until_confirm_delivery>
 8018e84:	2000      	movs	r0, #0
 8018e86:	b011      	add	sp, #68	@ 0x44
 8018e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e8a:	200c      	movs	r0, #12
 8018e8c:	b011      	add	sp, #68	@ 0x44
 8018e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e94:	f7f9 fdec 	bl	8012a70 <uxr_flash_output_streams>
 8018e98:	2000      	movs	r0, #0
 8018e9a:	b011      	add	sp, #68	@ 0x44
 8018e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e9e:	bf00      	nop
 8018ea0:	0801dd78 	.word	0x0801dd78

08018ea4 <rmw_take_response>:
 8018ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ea8:	4604      	mov	r4, r0
 8018eaa:	6800      	ldr	r0, [r0, #0]
 8018eac:	b088      	sub	sp, #32
 8018eae:	4688      	mov	r8, r1
 8018eb0:	4617      	mov	r7, r2
 8018eb2:	461d      	mov	r5, r3
 8018eb4:	b120      	cbz	r0, 8018ec0 <rmw_take_response+0x1c>
 8018eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8018f30 <rmw_take_response+0x8c>)
 8018eb8:	6819      	ldr	r1, [r3, #0]
 8018eba:	f7e7 f989 	bl	80001d0 <strcmp>
 8018ebe:	bb78      	cbnz	r0, 8018f20 <rmw_take_response+0x7c>
 8018ec0:	b10d      	cbz	r5, 8018ec6 <rmw_take_response+0x22>
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	702b      	strb	r3, [r5, #0]
 8018ec6:	6864      	ldr	r4, [r4, #4]
 8018ec8:	f7f9 f856 	bl	8011f78 <rmw_uxrce_clean_expired_static_input_buffer>
 8018ecc:	4620      	mov	r0, r4
 8018ece:	f7f9 f82b 	bl	8011f28 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018ed2:	4606      	mov	r6, r0
 8018ed4:	b340      	cbz	r0, 8018f28 <rmw_take_response+0x84>
 8018ed6:	6963      	ldr	r3, [r4, #20]
 8018ed8:	6884      	ldr	r4, [r0, #8]
 8018eda:	68db      	ldr	r3, [r3, #12]
 8018edc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8018ee0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018ee4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8018ee8:	4798      	blx	r3
 8018eea:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018eee:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8018ef2:	f104 0110 	add.w	r1, r4, #16
 8018ef6:	4668      	mov	r0, sp
 8018ef8:	f7f7 fad4 	bl	80104a4 <ucdr_init_buffer>
 8018efc:	4639      	mov	r1, r7
 8018efe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018f02:	4668      	mov	r0, sp
 8018f04:	4798      	blx	r3
 8018f06:	4631      	mov	r1, r6
 8018f08:	4604      	mov	r4, r0
 8018f0a:	480a      	ldr	r0, [pc, #40]	@ (8018f34 <rmw_take_response+0x90>)
 8018f0c:	f7ff fa54 	bl	80183b8 <put_memory>
 8018f10:	b105      	cbz	r5, 8018f14 <rmw_take_response+0x70>
 8018f12:	702c      	strb	r4, [r5, #0]
 8018f14:	f084 0001 	eor.w	r0, r4, #1
 8018f18:	b2c0      	uxtb	r0, r0
 8018f1a:	b008      	add	sp, #32
 8018f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f20:	200c      	movs	r0, #12
 8018f22:	b008      	add	sp, #32
 8018f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f28:	2001      	movs	r0, #1
 8018f2a:	b008      	add	sp, #32
 8018f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f30:	0801dd78 	.word	0x0801dd78
 8018f34:	2000e554 	.word	0x2000e554

08018f38 <rmw_destroy_service>:
 8018f38:	b570      	push	{r4, r5, r6, lr}
 8018f3a:	b128      	cbz	r0, 8018f48 <rmw_destroy_service+0x10>
 8018f3c:	4604      	mov	r4, r0
 8018f3e:	6800      	ldr	r0, [r0, #0]
 8018f40:	460d      	mov	r5, r1
 8018f42:	f7f9 f917 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 8018f46:	b910      	cbnz	r0, 8018f4e <rmw_destroy_service+0x16>
 8018f48:	2401      	movs	r4, #1
 8018f4a:	4620      	mov	r0, r4
 8018f4c:	bd70      	pop	{r4, r5, r6, pc}
 8018f4e:	6863      	ldr	r3, [r4, #4]
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d0f9      	beq.n	8018f48 <rmw_destroy_service+0x10>
 8018f54:	2d00      	cmp	r5, #0
 8018f56:	d0f7      	beq.n	8018f48 <rmw_destroy_service+0x10>
 8018f58:	6828      	ldr	r0, [r5, #0]
 8018f5a:	f7f9 f90b 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 8018f5e:	2800      	cmp	r0, #0
 8018f60:	d0f2      	beq.n	8018f48 <rmw_destroy_service+0x10>
 8018f62:	686e      	ldr	r6, [r5, #4]
 8018f64:	2e00      	cmp	r6, #0
 8018f66:	d0ef      	beq.n	8018f48 <rmw_destroy_service+0x10>
 8018f68:	6864      	ldr	r4, [r4, #4]
 8018f6a:	6932      	ldr	r2, [r6, #16]
 8018f6c:	6920      	ldr	r0, [r4, #16]
 8018f6e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018f72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f76:	6819      	ldr	r1, [r3, #0]
 8018f78:	f001 fb70 	bl	801a65c <uxr_buffer_cancel_data>
 8018f7c:	4602      	mov	r2, r0
 8018f7e:	6920      	ldr	r0, [r4, #16]
 8018f80:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018f84:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018f88:	f7f9 f874 	bl	8012074 <run_xrce_session>
 8018f8c:	6920      	ldr	r0, [r4, #16]
 8018f8e:	6932      	ldr	r2, [r6, #16]
 8018f90:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018f94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f98:	6819      	ldr	r1, [r3, #0]
 8018f9a:	f7f9 fa19 	bl	80123d0 <uxr_buffer_delete_entity>
 8018f9e:	4602      	mov	r2, r0
 8018fa0:	6920      	ldr	r0, [r4, #16]
 8018fa2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018fa6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018faa:	f7f9 f863 	bl	8012074 <run_xrce_session>
 8018fae:	2800      	cmp	r0, #0
 8018fb0:	4628      	mov	r0, r5
 8018fb2:	bf14      	ite	ne
 8018fb4:	2400      	movne	r4, #0
 8018fb6:	2402      	moveq	r4, #2
 8018fb8:	f7f8 ff2e 	bl	8011e18 <rmw_uxrce_fini_service_memory>
 8018fbc:	e7c5      	b.n	8018f4a <rmw_destroy_service+0x12>
 8018fbe:	bf00      	nop

08018fc0 <rmw_create_subscription>:
 8018fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fc4:	b08d      	sub	sp, #52	@ 0x34
 8018fc6:	2800      	cmp	r0, #0
 8018fc8:	f000 80d1 	beq.w	801916e <rmw_create_subscription+0x1ae>
 8018fcc:	460e      	mov	r6, r1
 8018fce:	2900      	cmp	r1, #0
 8018fd0:	f000 80cd 	beq.w	801916e <rmw_create_subscription+0x1ae>
 8018fd4:	4604      	mov	r4, r0
 8018fd6:	6800      	ldr	r0, [r0, #0]
 8018fd8:	4615      	mov	r5, r2
 8018fda:	4698      	mov	r8, r3
 8018fdc:	f7f9 f8ca 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 8018fe0:	2800      	cmp	r0, #0
 8018fe2:	f000 80c4 	beq.w	801916e <rmw_create_subscription+0x1ae>
 8018fe6:	2d00      	cmp	r5, #0
 8018fe8:	f000 80c1 	beq.w	801916e <rmw_create_subscription+0x1ae>
 8018fec:	782b      	ldrb	r3, [r5, #0]
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	f000 80bd 	beq.w	801916e <rmw_create_subscription+0x1ae>
 8018ff4:	f1b8 0f00 	cmp.w	r8, #0
 8018ff8:	f000 80b9 	beq.w	801916e <rmw_create_subscription+0x1ae>
 8018ffc:	485e      	ldr	r0, [pc, #376]	@ (8019178 <rmw_create_subscription+0x1b8>)
 8018ffe:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8019002:	f7ff f9c9 	bl	8018398 <get_memory>
 8019006:	4604      	mov	r4, r0
 8019008:	2800      	cmp	r0, #0
 801900a:	f000 80b1 	beq.w	8019170 <rmw_create_subscription+0x1b0>
 801900e:	6887      	ldr	r7, [r0, #8]
 8019010:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8019014:	f7ff fa28 	bl	8018468 <rmw_get_implementation_identifier>
 8019018:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 801901c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801901e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8019022:	4628      	mov	r0, r5
 8019024:	f7e7 f8de 	bl	80001e4 <strlen>
 8019028:	3001      	adds	r0, #1
 801902a:	283c      	cmp	r0, #60	@ 0x3c
 801902c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8019030:	f200 8096 	bhi.w	8019160 <rmw_create_subscription+0x1a0>
 8019034:	4a51      	ldr	r2, [pc, #324]	@ (801917c <rmw_create_subscription+0x1bc>)
 8019036:	462b      	mov	r3, r5
 8019038:	213c      	movs	r1, #60	@ 0x3c
 801903a:	4650      	mov	r0, sl
 801903c:	f003 f81a 	bl	801c074 <sniprintf>
 8019040:	4641      	mov	r1, r8
 8019042:	f8c7 9020 	str.w	r9, [r7, #32]
 8019046:	2250      	movs	r2, #80	@ 0x50
 8019048:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801904c:	f003 f9bb 	bl	801c3c6 <memcpy>
 8019050:	494b      	ldr	r1, [pc, #300]	@ (8019180 <rmw_create_subscription+0x1c0>)
 8019052:	4630      	mov	r0, r6
 8019054:	f7f9 f89c 	bl	8012190 <get_message_typesupport_handle>
 8019058:	2800      	cmp	r0, #0
 801905a:	f000 8081 	beq.w	8019160 <rmw_create_subscription+0x1a0>
 801905e:	6842      	ldr	r2, [r0, #4]
 8019060:	61ba      	str	r2, [r7, #24]
 8019062:	2a00      	cmp	r2, #0
 8019064:	d07c      	beq.n	8019160 <rmw_create_subscription+0x1a0>
 8019066:	4629      	mov	r1, r5
 8019068:	4643      	mov	r3, r8
 801906a:	4648      	mov	r0, r9
 801906c:	f7ff fc8c 	bl	8018988 <create_topic>
 8019070:	61f8      	str	r0, [r7, #28]
 8019072:	2800      	cmp	r0, #0
 8019074:	d078      	beq.n	8019168 <rmw_create_subscription+0x1a8>
 8019076:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801907a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801907e:	2104      	movs	r1, #4
 8019080:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8019084:	1c42      	adds	r2, r0, #1
 8019086:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801908a:	f7f9 fba3 	bl	80127d4 <uxr_object_id>
 801908e:	6138      	str	r0, [r7, #16]
 8019090:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019094:	2506      	movs	r5, #6
 8019096:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801909a:	9500      	str	r5, [sp, #0]
 801909c:	6819      	ldr	r1, [r3, #0]
 801909e:	693a      	ldr	r2, [r7, #16]
 80190a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80190a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80190a8:	f7f9 fa76 	bl	8012598 <uxr_buffer_create_subscriber_bin>
 80190ac:	4602      	mov	r2, r0
 80190ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80190b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80190b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80190ba:	f7f8 ffdb 	bl	8012074 <run_xrce_session>
 80190be:	2800      	cmp	r0, #0
 80190c0:	d04e      	beq.n	8019160 <rmw_create_subscription+0x1a0>
 80190c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80190c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80190ca:	4629      	mov	r1, r5
 80190cc:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 80190d0:	1c42      	adds	r2, r0, #1
 80190d2:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 80190d6:	f7f9 fb7d 	bl	80127d4 <uxr_object_id>
 80190da:	ae08      	add	r6, sp, #32
 80190dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80190e0:	69fb      	ldr	r3, [r7, #28]
 80190e2:	6178      	str	r0, [r7, #20]
 80190e4:	4641      	mov	r1, r8
 80190e6:	4630      	mov	r0, r6
 80190e8:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 80190ec:	9305      	str	r3, [sp, #20]
 80190ee:	f7f8 ffdd 	bl	80120ac <convert_qos_profile>
 80190f2:	9503      	str	r5, [sp, #12]
 80190f4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80190f8:	9b05      	ldr	r3, [sp, #20]
 80190fa:	9001      	str	r0, [sp, #4]
 80190fc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019100:	691b      	ldr	r3, [r3, #16]
 8019102:	9300      	str	r3, [sp, #0]
 8019104:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8019108:	f8db 1000 	ldr.w	r1, [fp]
 801910c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8019110:	f7f9 fae8 	bl	80126e4 <uxr_buffer_create_datareader_bin>
 8019114:	4602      	mov	r2, r0
 8019116:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801911a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801911e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019122:	f7f8 ffa7 	bl	8012074 <run_xrce_session>
 8019126:	b1d8      	cbz	r0, 8019160 <rmw_create_subscription+0x1a0>
 8019128:	f898 3008 	ldrb.w	r3, [r8, #8]
 801912c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019130:	2b02      	cmp	r3, #2
 8019132:	bf0c      	ite	eq
 8019134:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8019138:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 801913c:	9307      	str	r3, [sp, #28]
 801913e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019142:	2200      	movs	r2, #0
 8019144:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8019148:	ab0a      	add	r3, sp, #40	@ 0x28
 801914a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801914e:	9300      	str	r3, [sp, #0]
 8019150:	697a      	ldr	r2, [r7, #20]
 8019152:	9b07      	ldr	r3, [sp, #28]
 8019154:	6809      	ldr	r1, [r1, #0]
 8019156:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801915a:	f001 fa45 	bl	801a5e8 <uxr_buffer_request_data>
 801915e:	e007      	b.n	8019170 <rmw_create_subscription+0x1b0>
 8019160:	69f8      	ldr	r0, [r7, #28]
 8019162:	b108      	cbz	r0, 8019168 <rmw_create_subscription+0x1a8>
 8019164:	f7f8 fe84 	bl	8011e70 <rmw_uxrce_fini_topic_memory>
 8019168:	4620      	mov	r0, r4
 801916a:	f7f8 fe3f 	bl	8011dec <rmw_uxrce_fini_subscription_memory>
 801916e:	2400      	movs	r4, #0
 8019170:	4620      	mov	r0, r4
 8019172:	b00d      	add	sp, #52	@ 0x34
 8019174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019178:	2000e564 	.word	0x2000e564
 801917c:	0801d424 	.word	0x0801d424
 8019180:	0801d3a0 	.word	0x0801d3a0

08019184 <rmw_subscription_get_actual_qos>:
 8019184:	b150      	cbz	r0, 801919c <rmw_subscription_get_actual_qos+0x18>
 8019186:	b508      	push	{r3, lr}
 8019188:	460b      	mov	r3, r1
 801918a:	b149      	cbz	r1, 80191a0 <rmw_subscription_get_actual_qos+0x1c>
 801918c:	6841      	ldr	r1, [r0, #4]
 801918e:	2250      	movs	r2, #80	@ 0x50
 8019190:	3128      	adds	r1, #40	@ 0x28
 8019192:	4618      	mov	r0, r3
 8019194:	f003 f917 	bl	801c3c6 <memcpy>
 8019198:	2000      	movs	r0, #0
 801919a:	bd08      	pop	{r3, pc}
 801919c:	200b      	movs	r0, #11
 801919e:	4770      	bx	lr
 80191a0:	200b      	movs	r0, #11
 80191a2:	bd08      	pop	{r3, pc}

080191a4 <rmw_destroy_subscription>:
 80191a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191a6:	b128      	cbz	r0, 80191b4 <rmw_destroy_subscription+0x10>
 80191a8:	4604      	mov	r4, r0
 80191aa:	6800      	ldr	r0, [r0, #0]
 80191ac:	460d      	mov	r5, r1
 80191ae:	f7f8 ffe1 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 80191b2:	b910      	cbnz	r0, 80191ba <rmw_destroy_subscription+0x16>
 80191b4:	2401      	movs	r4, #1
 80191b6:	4620      	mov	r0, r4
 80191b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191ba:	6863      	ldr	r3, [r4, #4]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d0f9      	beq.n	80191b4 <rmw_destroy_subscription+0x10>
 80191c0:	2d00      	cmp	r5, #0
 80191c2:	d0f7      	beq.n	80191b4 <rmw_destroy_subscription+0x10>
 80191c4:	6828      	ldr	r0, [r5, #0]
 80191c6:	f7f8 ffd5 	bl	8012174 <is_uxrce_rmw_identifier_valid>
 80191ca:	2800      	cmp	r0, #0
 80191cc:	d0f2      	beq.n	80191b4 <rmw_destroy_subscription+0x10>
 80191ce:	686c      	ldr	r4, [r5, #4]
 80191d0:	2c00      	cmp	r4, #0
 80191d2:	d0ef      	beq.n	80191b4 <rmw_destroy_subscription+0x10>
 80191d4:	6a26      	ldr	r6, [r4, #32]
 80191d6:	6962      	ldr	r2, [r4, #20]
 80191d8:	6930      	ldr	r0, [r6, #16]
 80191da:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80191de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80191e2:	6819      	ldr	r1, [r3, #0]
 80191e4:	f001 fa3a 	bl	801a65c <uxr_buffer_cancel_data>
 80191e8:	4602      	mov	r2, r0
 80191ea:	6930      	ldr	r0, [r6, #16]
 80191ec:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80191f0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80191f4:	f7f8 ff3e 	bl	8012074 <run_xrce_session>
 80191f8:	69e0      	ldr	r0, [r4, #28]
 80191fa:	f7ff fc15 	bl	8018a28 <destroy_topic>
 80191fe:	6a23      	ldr	r3, [r4, #32]
 8019200:	6962      	ldr	r2, [r4, #20]
 8019202:	6918      	ldr	r0, [r3, #16]
 8019204:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019208:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801920c:	6819      	ldr	r1, [r3, #0]
 801920e:	f7f9 f8df 	bl	80123d0 <uxr_buffer_delete_entity>
 8019212:	6a23      	ldr	r3, [r4, #32]
 8019214:	6922      	ldr	r2, [r4, #16]
 8019216:	691b      	ldr	r3, [r3, #16]
 8019218:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 801921c:	4604      	mov	r4, r0
 801921e:	6809      	ldr	r1, [r1, #0]
 8019220:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019224:	f7f9 f8d4 	bl	80123d0 <uxr_buffer_delete_entity>
 8019228:	6937      	ldr	r7, [r6, #16]
 801922a:	4622      	mov	r2, r4
 801922c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019230:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8019234:	4604      	mov	r4, r0
 8019236:	4638      	mov	r0, r7
 8019238:	f7f8 ff1c 	bl	8012074 <run_xrce_session>
 801923c:	6936      	ldr	r6, [r6, #16]
 801923e:	4622      	mov	r2, r4
 8019240:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8019244:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8019248:	4604      	mov	r4, r0
 801924a:	4630      	mov	r0, r6
 801924c:	f7f8 ff12 	bl	8012074 <run_xrce_session>
 8019250:	b12c      	cbz	r4, 801925e <rmw_destroy_subscription+0xba>
 8019252:	b120      	cbz	r0, 801925e <rmw_destroy_subscription+0xba>
 8019254:	2400      	movs	r4, #0
 8019256:	4628      	mov	r0, r5
 8019258:	f7f8 fdc8 	bl	8011dec <rmw_uxrce_fini_subscription_memory>
 801925c:	e7ab      	b.n	80191b6 <rmw_destroy_subscription+0x12>
 801925e:	2402      	movs	r4, #2
 8019260:	e7f9      	b.n	8019256 <rmw_destroy_subscription+0xb2>
 8019262:	bf00      	nop

08019264 <rmw_take_with_info>:
 8019264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019266:	4604      	mov	r4, r0
 8019268:	6800      	ldr	r0, [r0, #0]
 801926a:	b089      	sub	sp, #36	@ 0x24
 801926c:	460f      	mov	r7, r1
 801926e:	4615      	mov	r5, r2
 8019270:	b128      	cbz	r0, 801927e <rmw_take_with_info+0x1a>
 8019272:	4b24      	ldr	r3, [pc, #144]	@ (8019304 <rmw_take_with_info+0xa0>)
 8019274:	6819      	ldr	r1, [r3, #0]
 8019276:	f7e6 ffab 	bl	80001d0 <strcmp>
 801927a:	2800      	cmp	r0, #0
 801927c:	d13e      	bne.n	80192fc <rmw_take_with_info+0x98>
 801927e:	b305      	cbz	r5, 80192c2 <rmw_take_with_info+0x5e>
 8019280:	6864      	ldr	r4, [r4, #4]
 8019282:	2300      	movs	r3, #0
 8019284:	702b      	strb	r3, [r5, #0]
 8019286:	f7f8 fe77 	bl	8011f78 <rmw_uxrce_clean_expired_static_input_buffer>
 801928a:	4620      	mov	r0, r4
 801928c:	f7f8 fe4c 	bl	8011f28 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019290:	4606      	mov	r6, r0
 8019292:	b1f0      	cbz	r0, 80192d2 <rmw_take_with_info+0x6e>
 8019294:	6881      	ldr	r1, [r0, #8]
 8019296:	4668      	mov	r0, sp
 8019298:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801929c:	3110      	adds	r1, #16
 801929e:	f7f7 f901 	bl	80104a4 <ucdr_init_buffer>
 80192a2:	69a3      	ldr	r3, [r4, #24]
 80192a4:	4639      	mov	r1, r7
 80192a6:	68db      	ldr	r3, [r3, #12]
 80192a8:	4668      	mov	r0, sp
 80192aa:	4798      	blx	r3
 80192ac:	4631      	mov	r1, r6
 80192ae:	4604      	mov	r4, r0
 80192b0:	4815      	ldr	r0, [pc, #84]	@ (8019308 <rmw_take_with_info+0xa4>)
 80192b2:	f7ff f881 	bl	80183b8 <put_memory>
 80192b6:	702c      	strb	r4, [r5, #0]
 80192b8:	f084 0001 	eor.w	r0, r4, #1
 80192bc:	b2c0      	uxtb	r0, r0
 80192be:	b009      	add	sp, #36	@ 0x24
 80192c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192c2:	6864      	ldr	r4, [r4, #4]
 80192c4:	f7f8 fe58 	bl	8011f78 <rmw_uxrce_clean_expired_static_input_buffer>
 80192c8:	4620      	mov	r0, r4
 80192ca:	f7f8 fe2d 	bl	8011f28 <rmw_uxrce_find_static_input_buffer_by_owner>
 80192ce:	4605      	mov	r5, r0
 80192d0:	b910      	cbnz	r0, 80192d8 <rmw_take_with_info+0x74>
 80192d2:	2001      	movs	r0, #1
 80192d4:	b009      	add	sp, #36	@ 0x24
 80192d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192d8:	68a9      	ldr	r1, [r5, #8]
 80192da:	4668      	mov	r0, sp
 80192dc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80192e0:	3110      	adds	r1, #16
 80192e2:	f7f7 f8df 	bl	80104a4 <ucdr_init_buffer>
 80192e6:	69a3      	ldr	r3, [r4, #24]
 80192e8:	4639      	mov	r1, r7
 80192ea:	68db      	ldr	r3, [r3, #12]
 80192ec:	4668      	mov	r0, sp
 80192ee:	4798      	blx	r3
 80192f0:	4629      	mov	r1, r5
 80192f2:	4604      	mov	r4, r0
 80192f4:	4804      	ldr	r0, [pc, #16]	@ (8019308 <rmw_take_with_info+0xa4>)
 80192f6:	f7ff f85f 	bl	80183b8 <put_memory>
 80192fa:	e7dd      	b.n	80192b8 <rmw_take_with_info+0x54>
 80192fc:	200c      	movs	r0, #12
 80192fe:	b009      	add	sp, #36	@ 0x24
 8019300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019302:	bf00      	nop
 8019304:	0801dd78 	.word	0x0801dd78
 8019308:	2000e554 	.word	0x2000e554

0801930c <rmw_uxrce_transport_init>:
 801930c:	b508      	push	{r3, lr}
 801930e:	b108      	cbz	r0, 8019314 <rmw_uxrce_transport_init+0x8>
 8019310:	f100 0210 	add.w	r2, r0, #16
 8019314:	b139      	cbz	r1, 8019326 <rmw_uxrce_transport_init+0x1a>
 8019316:	6949      	ldr	r1, [r1, #20]
 8019318:	4610      	mov	r0, r2
 801931a:	f000 fbe5 	bl	8019ae8 <uxr_init_custom_transport>
 801931e:	f080 0001 	eor.w	r0, r0, #1
 8019322:	b2c0      	uxtb	r0, r0
 8019324:	bd08      	pop	{r3, pc}
 8019326:	4b04      	ldr	r3, [pc, #16]	@ (8019338 <rmw_uxrce_transport_init+0x2c>)
 8019328:	4610      	mov	r0, r2
 801932a:	6859      	ldr	r1, [r3, #4]
 801932c:	f000 fbdc 	bl	8019ae8 <uxr_init_custom_transport>
 8019330:	f080 0001 	eor.w	r0, r0, #1
 8019334:	b2c0      	uxtb	r0, r0
 8019336:	bd08      	pop	{r3, pc}
 8019338:	20009c2c 	.word	0x20009c2c

0801933c <rmw_wait>:
 801933c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019340:	b089      	sub	sp, #36	@ 0x24
 8019342:	4605      	mov	r5, r0
 8019344:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019346:	460e      	mov	r6, r1
 8019348:	4698      	mov	r8, r3
 801934a:	4691      	mov	r9, r2
 801934c:	2a00      	cmp	r2, #0
 801934e:	f000 810a 	beq.w	8019566 <rmw_wait+0x22a>
 8019352:	b16c      	cbz	r4, 8019370 <rmw_wait+0x34>
 8019354:	4bae      	ldr	r3, [pc, #696]	@ (8019610 <rmw_wait+0x2d4>)
 8019356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019358:	af04      	add	r7, sp, #16
 801935a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801935e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019362:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019366:	f7fe fe4b 	bl	8018000 <rmw_time_equal>
 801936a:	2800      	cmp	r0, #0
 801936c:	f000 8127 	beq.w	80195be <rmw_wait+0x282>
 8019370:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019374:	f7f8 fe00 	bl	8011f78 <rmw_uxrce_clean_expired_static_input_buffer>
 8019378:	4ba6      	ldr	r3, [pc, #664]	@ (8019614 <rmw_wait+0x2d8>)
 801937a:	681c      	ldr	r4, [r3, #0]
 801937c:	b14c      	cbz	r4, 8019392 <rmw_wait+0x56>
 801937e:	4623      	mov	r3, r4
 8019380:	2100      	movs	r1, #0
 8019382:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019386:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801938a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801938e:	2b00      	cmp	r3, #0
 8019390:	d1f7      	bne.n	8019382 <rmw_wait+0x46>
 8019392:	f1b9 0f00 	cmp.w	r9, #0
 8019396:	d011      	beq.n	80193bc <rmw_wait+0x80>
 8019398:	f8d9 1000 	ldr.w	r1, [r9]
 801939c:	b171      	cbz	r1, 80193bc <rmw_wait+0x80>
 801939e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80193a2:	2300      	movs	r3, #0
 80193a4:	2001      	movs	r0, #1
 80193a6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80193aa:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80193ac:	6912      	ldr	r2, [r2, #16]
 80193ae:	3301      	adds	r3, #1
 80193b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80193b4:	4299      	cmp	r1, r3
 80193b6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80193ba:	d1f4      	bne.n	80193a6 <rmw_wait+0x6a>
 80193bc:	f1b8 0f00 	cmp.w	r8, #0
 80193c0:	d011      	beq.n	80193e6 <rmw_wait+0xaa>
 80193c2:	f8d8 1000 	ldr.w	r1, [r8]
 80193c6:	b171      	cbz	r1, 80193e6 <rmw_wait+0xaa>
 80193c8:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80193cc:	2300      	movs	r3, #0
 80193ce:	2001      	movs	r0, #1
 80193d0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80193d4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80193d6:	6912      	ldr	r2, [r2, #16]
 80193d8:	3301      	adds	r3, #1
 80193da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80193de:	4299      	cmp	r1, r3
 80193e0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80193e4:	d1f4      	bne.n	80193d0 <rmw_wait+0x94>
 80193e6:	b185      	cbz	r5, 801940a <rmw_wait+0xce>
 80193e8:	6829      	ldr	r1, [r5, #0]
 80193ea:	b171      	cbz	r1, 801940a <rmw_wait+0xce>
 80193ec:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80193f0:	2300      	movs	r3, #0
 80193f2:	2001      	movs	r0, #1
 80193f4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80193f8:	6a12      	ldr	r2, [r2, #32]
 80193fa:	6912      	ldr	r2, [r2, #16]
 80193fc:	3301      	adds	r3, #1
 80193fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019402:	4299      	cmp	r1, r3
 8019404:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019408:	d1f4      	bne.n	80193f4 <rmw_wait+0xb8>
 801940a:	b34c      	cbz	r4, 8019460 <rmw_wait+0x124>
 801940c:	4622      	mov	r2, r4
 801940e:	2300      	movs	r3, #0
 8019410:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019414:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019418:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801941c:	440b      	add	r3, r1
 801941e:	b2db      	uxtb	r3, r3
 8019420:	2a00      	cmp	r2, #0
 8019422:	d1f5      	bne.n	8019410 <rmw_wait+0xd4>
 8019424:	2b00      	cmp	r3, #0
 8019426:	f000 8084 	beq.w	8019532 <rmw_wait+0x1f6>
 801942a:	1c7a      	adds	r2, r7, #1
 801942c:	d00d      	beq.n	801944a <rmw_wait+0x10e>
 801942e:	ee07 7a90 	vmov	s15, r7
 8019432:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019436:	ee07 3a90 	vmov	s15, r3
 801943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801943e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019442:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019446:	ee17 7a90 	vmov	r7, s15
 801944a:	68a0      	ldr	r0, [r4, #8]
 801944c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019450:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019454:	2b00      	cmp	r3, #0
 8019456:	f040 8090 	bne.w	801957a <rmw_wait+0x23e>
 801945a:	6864      	ldr	r4, [r4, #4]
 801945c:	2c00      	cmp	r4, #0
 801945e:	d1f4      	bne.n	801944a <rmw_wait+0x10e>
 8019460:	f1b9 0f00 	cmp.w	r9, #0
 8019464:	f000 80bc 	beq.w	80195e0 <rmw_wait+0x2a4>
 8019468:	f8d9 7000 	ldr.w	r7, [r9]
 801946c:	2f00      	cmp	r7, #0
 801946e:	f000 808e 	beq.w	801958e <rmw_wait+0x252>
 8019472:	2400      	movs	r4, #0
 8019474:	4627      	mov	r7, r4
 8019476:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801947a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801947e:	f7f8 fd53 	bl	8011f28 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019482:	2800      	cmp	r0, #0
 8019484:	d05f      	beq.n	8019546 <rmw_wait+0x20a>
 8019486:	f8d9 3000 	ldr.w	r3, [r9]
 801948a:	3401      	adds	r4, #1
 801948c:	42a3      	cmp	r3, r4
 801948e:	f04f 0701 	mov.w	r7, #1
 8019492:	d8f0      	bhi.n	8019476 <rmw_wait+0x13a>
 8019494:	f1b8 0f00 	cmp.w	r8, #0
 8019498:	d012      	beq.n	80194c0 <rmw_wait+0x184>
 801949a:	f8d8 3000 	ldr.w	r3, [r8]
 801949e:	b17b      	cbz	r3, 80194c0 <rmw_wait+0x184>
 80194a0:	2400      	movs	r4, #0
 80194a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80194a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80194aa:	f7f8 fd3d 	bl	8011f28 <rmw_uxrce_find_static_input_buffer_by_owner>
 80194ae:	2800      	cmp	r0, #0
 80194b0:	d051      	beq.n	8019556 <rmw_wait+0x21a>
 80194b2:	f8d8 3000 	ldr.w	r3, [r8]
 80194b6:	3401      	adds	r4, #1
 80194b8:	42a3      	cmp	r3, r4
 80194ba:	f04f 0701 	mov.w	r7, #1
 80194be:	d8f0      	bhi.n	80194a2 <rmw_wait+0x166>
 80194c0:	b1dd      	cbz	r5, 80194fa <rmw_wait+0x1be>
 80194c2:	682b      	ldr	r3, [r5, #0]
 80194c4:	b1cb      	cbz	r3, 80194fa <rmw_wait+0x1be>
 80194c6:	2400      	movs	r4, #0
 80194c8:	686b      	ldr	r3, [r5, #4]
 80194ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80194ce:	f7f8 fd2b 	bl	8011f28 <rmw_uxrce_find_static_input_buffer_by_owner>
 80194d2:	b158      	cbz	r0, 80194ec <rmw_wait+0x1b0>
 80194d4:	682b      	ldr	r3, [r5, #0]
 80194d6:	3401      	adds	r4, #1
 80194d8:	42a3      	cmp	r3, r4
 80194da:	d969      	bls.n	80195b0 <rmw_wait+0x274>
 80194dc:	686b      	ldr	r3, [r5, #4]
 80194de:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80194e2:	2701      	movs	r7, #1
 80194e4:	f7f8 fd20 	bl	8011f28 <rmw_uxrce_find_static_input_buffer_by_owner>
 80194e8:	2800      	cmp	r0, #0
 80194ea:	d1f3      	bne.n	80194d4 <rmw_wait+0x198>
 80194ec:	e9d5 3200 	ldrd	r3, r2, [r5]
 80194f0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80194f4:	3401      	adds	r4, #1
 80194f6:	42a3      	cmp	r3, r4
 80194f8:	d8e6      	bhi.n	80194c8 <rmw_wait+0x18c>
 80194fa:	b1a6      	cbz	r6, 8019526 <rmw_wait+0x1ea>
 80194fc:	6834      	ldr	r4, [r6, #0]
 80194fe:	b194      	cbz	r4, 8019526 <rmw_wait+0x1ea>
 8019500:	2300      	movs	r3, #0
 8019502:	461d      	mov	r5, r3
 8019504:	e004      	b.n	8019510 <rmw_wait+0x1d4>
 8019506:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801950a:	3301      	adds	r3, #1
 801950c:	42a3      	cmp	r3, r4
 801950e:	d00a      	beq.n	8019526 <rmw_wait+0x1ea>
 8019510:	6870      	ldr	r0, [r6, #4]
 8019512:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019516:	7c0a      	ldrb	r2, [r1, #16]
 8019518:	2a00      	cmp	r2, #0
 801951a:	d0f4      	beq.n	8019506 <rmw_wait+0x1ca>
 801951c:	3301      	adds	r3, #1
 801951e:	42a3      	cmp	r3, r4
 8019520:	740d      	strb	r5, [r1, #16]
 8019522:	4617      	mov	r7, r2
 8019524:	d1f4      	bne.n	8019510 <rmw_wait+0x1d4>
 8019526:	2f00      	cmp	r7, #0
 8019528:	d03e      	beq.n	80195a8 <rmw_wait+0x26c>
 801952a:	2000      	movs	r0, #0
 801952c:	b009      	add	sp, #36	@ 0x24
 801952e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019532:	68a0      	ldr	r0, [r4, #8]
 8019534:	2100      	movs	r1, #0
 8019536:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801953a:	f7f9 fe1f 	bl	801317c <uxr_run_session_timeout>
 801953e:	6864      	ldr	r4, [r4, #4]
 8019540:	2c00      	cmp	r4, #0
 8019542:	d1f6      	bne.n	8019532 <rmw_wait+0x1f6>
 8019544:	e78c      	b.n	8019460 <rmw_wait+0x124>
 8019546:	e9d9 3200 	ldrd	r3, r2, [r9]
 801954a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801954e:	3401      	adds	r4, #1
 8019550:	42a3      	cmp	r3, r4
 8019552:	d890      	bhi.n	8019476 <rmw_wait+0x13a>
 8019554:	e79e      	b.n	8019494 <rmw_wait+0x158>
 8019556:	e9d8 3200 	ldrd	r3, r2, [r8]
 801955a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801955e:	3401      	adds	r4, #1
 8019560:	429c      	cmp	r4, r3
 8019562:	d39e      	bcc.n	80194a2 <rmw_wait+0x166>
 8019564:	e7ac      	b.n	80194c0 <rmw_wait+0x184>
 8019566:	2b00      	cmp	r3, #0
 8019568:	f47f aef3 	bne.w	8019352 <rmw_wait+0x16>
 801956c:	2800      	cmp	r0, #0
 801956e:	f47f aef0 	bne.w	8019352 <rmw_wait+0x16>
 8019572:	2900      	cmp	r1, #0
 8019574:	f47f aeed 	bne.w	8019352 <rmw_wait+0x16>
 8019578:	e7d7      	b.n	801952a <rmw_wait+0x1ee>
 801957a:	4639      	mov	r1, r7
 801957c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019580:	f7f9 fe16 	bl	80131b0 <uxr_run_session_until_data>
 8019584:	6864      	ldr	r4, [r4, #4]
 8019586:	2c00      	cmp	r4, #0
 8019588:	f47f af5f 	bne.w	801944a <rmw_wait+0x10e>
 801958c:	e768      	b.n	8019460 <rmw_wait+0x124>
 801958e:	f1b8 0f00 	cmp.w	r8, #0
 8019592:	d032      	beq.n	80195fa <rmw_wait+0x2be>
 8019594:	f8d8 3000 	ldr.w	r3, [r8]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d181      	bne.n	80194a0 <rmw_wait+0x164>
 801959c:	461f      	mov	r7, r3
 801959e:	2d00      	cmp	r5, #0
 80195a0:	d18f      	bne.n	80194c2 <rmw_wait+0x186>
 80195a2:	462f      	mov	r7, r5
 80195a4:	2e00      	cmp	r6, #0
 80195a6:	d1a9      	bne.n	80194fc <rmw_wait+0x1c0>
 80195a8:	2002      	movs	r0, #2
 80195aa:	b009      	add	sp, #36	@ 0x24
 80195ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195b0:	2e00      	cmp	r6, #0
 80195b2:	d0ba      	beq.n	801952a <rmw_wait+0x1ee>
 80195b4:	6834      	ldr	r4, [r6, #0]
 80195b6:	2701      	movs	r7, #1
 80195b8:	2c00      	cmp	r4, #0
 80195ba:	d1a1      	bne.n	8019500 <rmw_wait+0x1c4>
 80195bc:	e7b5      	b.n	801952a <rmw_wait+0x1ee>
 80195be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80195c2:	f7fe fd71 	bl	80180a8 <rmw_time_total_nsec>
 80195c6:	2300      	movs	r3, #0
 80195c8:	4a13      	ldr	r2, [pc, #76]	@ (8019618 <rmw_wait+0x2dc>)
 80195ca:	f7e6 ff09 	bl	80003e0 <__aeabi_uldivmod>
 80195ce:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80195d2:	f171 0300 	sbcs.w	r3, r1, #0
 80195d6:	4607      	mov	r7, r0
 80195d8:	bfa8      	it	ge
 80195da:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80195de:	e6c9      	b.n	8019374 <rmw_wait+0x38>
 80195e0:	f1b8 0f00 	cmp.w	r8, #0
 80195e4:	d009      	beq.n	80195fa <rmw_wait+0x2be>
 80195e6:	f8d8 3000 	ldr.w	r3, [r8]
 80195ea:	464f      	mov	r7, r9
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	f47f af57 	bne.w	80194a0 <rmw_wait+0x164>
 80195f2:	2d00      	cmp	r5, #0
 80195f4:	f47f af65 	bne.w	80194c2 <rmw_wait+0x186>
 80195f8:	e7d3      	b.n	80195a2 <rmw_wait+0x266>
 80195fa:	b17d      	cbz	r5, 801961c <rmw_wait+0x2e0>
 80195fc:	682b      	ldr	r3, [r5, #0]
 80195fe:	4647      	mov	r7, r8
 8019600:	2b00      	cmp	r3, #0
 8019602:	f47f af60 	bne.w	80194c6 <rmw_wait+0x18a>
 8019606:	2e00      	cmp	r6, #0
 8019608:	f47f af78 	bne.w	80194fc <rmw_wait+0x1c0>
 801960c:	e7cc      	b.n	80195a8 <rmw_wait+0x26c>
 801960e:	bf00      	nop
 8019610:	0801d258 	.word	0x0801d258
 8019614:	2000e544 	.word	0x2000e544
 8019618:	000f4240 	.word	0x000f4240
 801961c:	2e00      	cmp	r6, #0
 801961e:	d0c3      	beq.n	80195a8 <rmw_wait+0x26c>
 8019620:	6834      	ldr	r4, [r6, #0]
 8019622:	462f      	mov	r7, r5
 8019624:	2c00      	cmp	r4, #0
 8019626:	f47f af6b 	bne.w	8019500 <rmw_wait+0x1c4>
 801962a:	e7bd      	b.n	80195a8 <rmw_wait+0x26c>

0801962c <rmw_create_wait_set>:
 801962c:	b508      	push	{r3, lr}
 801962e:	4803      	ldr	r0, [pc, #12]	@ (801963c <rmw_create_wait_set+0x10>)
 8019630:	f7fe feb2 	bl	8018398 <get_memory>
 8019634:	b108      	cbz	r0, 801963a <rmw_create_wait_set+0xe>
 8019636:	6880      	ldr	r0, [r0, #8]
 8019638:	3010      	adds	r0, #16
 801963a:	bd08      	pop	{r3, pc}
 801963c:	2000e584 	.word	0x2000e584

08019640 <rmw_destroy_wait_set>:
 8019640:	b508      	push	{r3, lr}
 8019642:	4b08      	ldr	r3, [pc, #32]	@ (8019664 <rmw_destroy_wait_set+0x24>)
 8019644:	6819      	ldr	r1, [r3, #0]
 8019646:	b911      	cbnz	r1, 801964e <rmw_destroy_wait_set+0xe>
 8019648:	e00a      	b.n	8019660 <rmw_destroy_wait_set+0x20>
 801964a:	6849      	ldr	r1, [r1, #4]
 801964c:	b141      	cbz	r1, 8019660 <rmw_destroy_wait_set+0x20>
 801964e:	688b      	ldr	r3, [r1, #8]
 8019650:	3310      	adds	r3, #16
 8019652:	4298      	cmp	r0, r3
 8019654:	d1f9      	bne.n	801964a <rmw_destroy_wait_set+0xa>
 8019656:	4803      	ldr	r0, [pc, #12]	@ (8019664 <rmw_destroy_wait_set+0x24>)
 8019658:	f7fe feae 	bl	80183b8 <put_memory>
 801965c:	2000      	movs	r0, #0
 801965e:	bd08      	pop	{r3, pc}
 8019660:	2001      	movs	r0, #1
 8019662:	bd08      	pop	{r3, pc}
 8019664:	2000e584 	.word	0x2000e584

08019668 <rmw_uros_epoch_nanos>:
 8019668:	4b05      	ldr	r3, [pc, #20]	@ (8019680 <rmw_uros_epoch_nanos+0x18>)
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	b123      	cbz	r3, 8019678 <rmw_uros_epoch_nanos+0x10>
 801966e:	6898      	ldr	r0, [r3, #8]
 8019670:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019674:	f7f9 b9f2 	b.w	8012a5c <uxr_epoch_nanos>
 8019678:	2000      	movs	r0, #0
 801967a:	2100      	movs	r1, #0
 801967c:	4770      	bx	lr
 801967e:	bf00      	nop
 8019680:	2000e544 	.word	0x2000e544

08019684 <std_msgs__msg__Float32__init>:
 8019684:	3800      	subs	r0, #0
 8019686:	bf18      	it	ne
 8019688:	2001      	movne	r0, #1
 801968a:	4770      	bx	lr

0801968c <std_msgs__msg__Float32__fini>:
 801968c:	4770      	bx	lr
 801968e:	bf00      	nop

08019690 <std_msgs__msg__Int32__init>:
 8019690:	3800      	subs	r0, #0
 8019692:	bf18      	it	ne
 8019694:	2001      	movne	r0, #1
 8019696:	4770      	bx	lr

08019698 <std_msgs__msg__Int32__fini>:
 8019698:	4770      	bx	lr
 801969a:	bf00      	nop

0801969c <ucdr_serialize_endian_array_char>:
 801969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196a0:	4619      	mov	r1, r3
 80196a2:	461f      	mov	r7, r3
 80196a4:	4605      	mov	r5, r0
 80196a6:	4690      	mov	r8, r2
 80196a8:	f7f6 fea8 	bl	80103fc <ucdr_check_buffer_available_for>
 80196ac:	b9e0      	cbnz	r0, 80196e8 <ucdr_serialize_endian_array_char+0x4c>
 80196ae:	463e      	mov	r6, r7
 80196b0:	e009      	b.n	80196c6 <ucdr_serialize_endian_array_char+0x2a>
 80196b2:	68a8      	ldr	r0, [r5, #8]
 80196b4:	f002 fe87 	bl	801c3c6 <memcpy>
 80196b8:	68ab      	ldr	r3, [r5, #8]
 80196ba:	6928      	ldr	r0, [r5, #16]
 80196bc:	4423      	add	r3, r4
 80196be:	4420      	add	r0, r4
 80196c0:	1b36      	subs	r6, r6, r4
 80196c2:	60ab      	str	r3, [r5, #8]
 80196c4:	6128      	str	r0, [r5, #16]
 80196c6:	4631      	mov	r1, r6
 80196c8:	2201      	movs	r2, #1
 80196ca:	4628      	mov	r0, r5
 80196cc:	f7f6 ff1e 	bl	801050c <ucdr_check_final_buffer_behavior_array>
 80196d0:	1bb9      	subs	r1, r7, r6
 80196d2:	4441      	add	r1, r8
 80196d4:	4604      	mov	r4, r0
 80196d6:	4602      	mov	r2, r0
 80196d8:	2800      	cmp	r0, #0
 80196da:	d1ea      	bne.n	80196b2 <ucdr_serialize_endian_array_char+0x16>
 80196dc:	2301      	movs	r3, #1
 80196de:	7da8      	ldrb	r0, [r5, #22]
 80196e0:	756b      	strb	r3, [r5, #21]
 80196e2:	4058      	eors	r0, r3
 80196e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196e8:	463a      	mov	r2, r7
 80196ea:	68a8      	ldr	r0, [r5, #8]
 80196ec:	4641      	mov	r1, r8
 80196ee:	f002 fe6a 	bl	801c3c6 <memcpy>
 80196f2:	68aa      	ldr	r2, [r5, #8]
 80196f4:	692b      	ldr	r3, [r5, #16]
 80196f6:	443a      	add	r2, r7
 80196f8:	443b      	add	r3, r7
 80196fa:	60aa      	str	r2, [r5, #8]
 80196fc:	612b      	str	r3, [r5, #16]
 80196fe:	e7ed      	b.n	80196dc <ucdr_serialize_endian_array_char+0x40>

08019700 <ucdr_deserialize_endian_array_char>:
 8019700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019704:	4619      	mov	r1, r3
 8019706:	461f      	mov	r7, r3
 8019708:	4605      	mov	r5, r0
 801970a:	4690      	mov	r8, r2
 801970c:	f7f6 fe76 	bl	80103fc <ucdr_check_buffer_available_for>
 8019710:	b9e0      	cbnz	r0, 801974c <ucdr_deserialize_endian_array_char+0x4c>
 8019712:	463e      	mov	r6, r7
 8019714:	e009      	b.n	801972a <ucdr_deserialize_endian_array_char+0x2a>
 8019716:	68a9      	ldr	r1, [r5, #8]
 8019718:	f002 fe55 	bl	801c3c6 <memcpy>
 801971c:	68ab      	ldr	r3, [r5, #8]
 801971e:	6928      	ldr	r0, [r5, #16]
 8019720:	4423      	add	r3, r4
 8019722:	4420      	add	r0, r4
 8019724:	1b36      	subs	r6, r6, r4
 8019726:	60ab      	str	r3, [r5, #8]
 8019728:	6128      	str	r0, [r5, #16]
 801972a:	2201      	movs	r2, #1
 801972c:	4631      	mov	r1, r6
 801972e:	4628      	mov	r0, r5
 8019730:	f7f6 feec 	bl	801050c <ucdr_check_final_buffer_behavior_array>
 8019734:	4604      	mov	r4, r0
 8019736:	1bb8      	subs	r0, r7, r6
 8019738:	4440      	add	r0, r8
 801973a:	4622      	mov	r2, r4
 801973c:	2c00      	cmp	r4, #0
 801973e:	d1ea      	bne.n	8019716 <ucdr_deserialize_endian_array_char+0x16>
 8019740:	2301      	movs	r3, #1
 8019742:	7da8      	ldrb	r0, [r5, #22]
 8019744:	756b      	strb	r3, [r5, #21]
 8019746:	4058      	eors	r0, r3
 8019748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801974c:	463a      	mov	r2, r7
 801974e:	68a9      	ldr	r1, [r5, #8]
 8019750:	4640      	mov	r0, r8
 8019752:	f002 fe38 	bl	801c3c6 <memcpy>
 8019756:	68aa      	ldr	r2, [r5, #8]
 8019758:	692b      	ldr	r3, [r5, #16]
 801975a:	443a      	add	r2, r7
 801975c:	443b      	add	r3, r7
 801975e:	60aa      	str	r2, [r5, #8]
 8019760:	612b      	str	r3, [r5, #16]
 8019762:	e7ed      	b.n	8019740 <ucdr_deserialize_endian_array_char+0x40>

08019764 <ucdr_serialize_array_uint8_t>:
 8019764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019768:	4688      	mov	r8, r1
 801976a:	4611      	mov	r1, r2
 801976c:	4617      	mov	r7, r2
 801976e:	4605      	mov	r5, r0
 8019770:	f7f6 fe44 	bl	80103fc <ucdr_check_buffer_available_for>
 8019774:	b9e0      	cbnz	r0, 80197b0 <ucdr_serialize_array_uint8_t+0x4c>
 8019776:	463e      	mov	r6, r7
 8019778:	e009      	b.n	801978e <ucdr_serialize_array_uint8_t+0x2a>
 801977a:	68a8      	ldr	r0, [r5, #8]
 801977c:	f002 fe23 	bl	801c3c6 <memcpy>
 8019780:	68aa      	ldr	r2, [r5, #8]
 8019782:	692b      	ldr	r3, [r5, #16]
 8019784:	4422      	add	r2, r4
 8019786:	4423      	add	r3, r4
 8019788:	1b36      	subs	r6, r6, r4
 801978a:	60aa      	str	r2, [r5, #8]
 801978c:	612b      	str	r3, [r5, #16]
 801978e:	4631      	mov	r1, r6
 8019790:	2201      	movs	r2, #1
 8019792:	4628      	mov	r0, r5
 8019794:	f7f6 feba 	bl	801050c <ucdr_check_final_buffer_behavior_array>
 8019798:	1bb9      	subs	r1, r7, r6
 801979a:	4441      	add	r1, r8
 801979c:	4604      	mov	r4, r0
 801979e:	4602      	mov	r2, r0
 80197a0:	2800      	cmp	r0, #0
 80197a2:	d1ea      	bne.n	801977a <ucdr_serialize_array_uint8_t+0x16>
 80197a4:	2301      	movs	r3, #1
 80197a6:	7da8      	ldrb	r0, [r5, #22]
 80197a8:	756b      	strb	r3, [r5, #21]
 80197aa:	4058      	eors	r0, r3
 80197ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197b0:	463a      	mov	r2, r7
 80197b2:	68a8      	ldr	r0, [r5, #8]
 80197b4:	4641      	mov	r1, r8
 80197b6:	f002 fe06 	bl	801c3c6 <memcpy>
 80197ba:	68aa      	ldr	r2, [r5, #8]
 80197bc:	692b      	ldr	r3, [r5, #16]
 80197be:	443a      	add	r2, r7
 80197c0:	443b      	add	r3, r7
 80197c2:	60aa      	str	r2, [r5, #8]
 80197c4:	612b      	str	r3, [r5, #16]
 80197c6:	e7ed      	b.n	80197a4 <ucdr_serialize_array_uint8_t+0x40>

080197c8 <ucdr_serialize_endian_array_uint8_t>:
 80197c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197cc:	4619      	mov	r1, r3
 80197ce:	461f      	mov	r7, r3
 80197d0:	4605      	mov	r5, r0
 80197d2:	4690      	mov	r8, r2
 80197d4:	f7f6 fe12 	bl	80103fc <ucdr_check_buffer_available_for>
 80197d8:	b9e0      	cbnz	r0, 8019814 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80197da:	463e      	mov	r6, r7
 80197dc:	e009      	b.n	80197f2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 80197de:	68a8      	ldr	r0, [r5, #8]
 80197e0:	f002 fdf1 	bl	801c3c6 <memcpy>
 80197e4:	68ab      	ldr	r3, [r5, #8]
 80197e6:	6928      	ldr	r0, [r5, #16]
 80197e8:	4423      	add	r3, r4
 80197ea:	4420      	add	r0, r4
 80197ec:	1b36      	subs	r6, r6, r4
 80197ee:	60ab      	str	r3, [r5, #8]
 80197f0:	6128      	str	r0, [r5, #16]
 80197f2:	4631      	mov	r1, r6
 80197f4:	2201      	movs	r2, #1
 80197f6:	4628      	mov	r0, r5
 80197f8:	f7f6 fe88 	bl	801050c <ucdr_check_final_buffer_behavior_array>
 80197fc:	1bb9      	subs	r1, r7, r6
 80197fe:	4441      	add	r1, r8
 8019800:	4604      	mov	r4, r0
 8019802:	4602      	mov	r2, r0
 8019804:	2800      	cmp	r0, #0
 8019806:	d1ea      	bne.n	80197de <ucdr_serialize_endian_array_uint8_t+0x16>
 8019808:	2301      	movs	r3, #1
 801980a:	7da8      	ldrb	r0, [r5, #22]
 801980c:	756b      	strb	r3, [r5, #21]
 801980e:	4058      	eors	r0, r3
 8019810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019814:	463a      	mov	r2, r7
 8019816:	68a8      	ldr	r0, [r5, #8]
 8019818:	4641      	mov	r1, r8
 801981a:	f002 fdd4 	bl	801c3c6 <memcpy>
 801981e:	68aa      	ldr	r2, [r5, #8]
 8019820:	692b      	ldr	r3, [r5, #16]
 8019822:	443a      	add	r2, r7
 8019824:	443b      	add	r3, r7
 8019826:	60aa      	str	r2, [r5, #8]
 8019828:	612b      	str	r3, [r5, #16]
 801982a:	e7ed      	b.n	8019808 <ucdr_serialize_endian_array_uint8_t+0x40>

0801982c <ucdr_deserialize_array_uint8_t>:
 801982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019830:	4688      	mov	r8, r1
 8019832:	4611      	mov	r1, r2
 8019834:	4617      	mov	r7, r2
 8019836:	4605      	mov	r5, r0
 8019838:	f7f6 fde0 	bl	80103fc <ucdr_check_buffer_available_for>
 801983c:	b9e0      	cbnz	r0, 8019878 <ucdr_deserialize_array_uint8_t+0x4c>
 801983e:	463e      	mov	r6, r7
 8019840:	e009      	b.n	8019856 <ucdr_deserialize_array_uint8_t+0x2a>
 8019842:	68a9      	ldr	r1, [r5, #8]
 8019844:	f002 fdbf 	bl	801c3c6 <memcpy>
 8019848:	68aa      	ldr	r2, [r5, #8]
 801984a:	692b      	ldr	r3, [r5, #16]
 801984c:	4422      	add	r2, r4
 801984e:	4423      	add	r3, r4
 8019850:	1b36      	subs	r6, r6, r4
 8019852:	60aa      	str	r2, [r5, #8]
 8019854:	612b      	str	r3, [r5, #16]
 8019856:	2201      	movs	r2, #1
 8019858:	4631      	mov	r1, r6
 801985a:	4628      	mov	r0, r5
 801985c:	f7f6 fe56 	bl	801050c <ucdr_check_final_buffer_behavior_array>
 8019860:	4604      	mov	r4, r0
 8019862:	1bb8      	subs	r0, r7, r6
 8019864:	4440      	add	r0, r8
 8019866:	4622      	mov	r2, r4
 8019868:	2c00      	cmp	r4, #0
 801986a:	d1ea      	bne.n	8019842 <ucdr_deserialize_array_uint8_t+0x16>
 801986c:	2301      	movs	r3, #1
 801986e:	7da8      	ldrb	r0, [r5, #22]
 8019870:	756b      	strb	r3, [r5, #21]
 8019872:	4058      	eors	r0, r3
 8019874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019878:	463a      	mov	r2, r7
 801987a:	68a9      	ldr	r1, [r5, #8]
 801987c:	4640      	mov	r0, r8
 801987e:	f002 fda2 	bl	801c3c6 <memcpy>
 8019882:	68aa      	ldr	r2, [r5, #8]
 8019884:	692b      	ldr	r3, [r5, #16]
 8019886:	443a      	add	r2, r7
 8019888:	443b      	add	r3, r7
 801988a:	60aa      	str	r2, [r5, #8]
 801988c:	612b      	str	r3, [r5, #16]
 801988e:	e7ed      	b.n	801986c <ucdr_deserialize_array_uint8_t+0x40>

08019890 <ucdr_deserialize_endian_array_uint8_t>:
 8019890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019894:	4619      	mov	r1, r3
 8019896:	461f      	mov	r7, r3
 8019898:	4605      	mov	r5, r0
 801989a:	4690      	mov	r8, r2
 801989c:	f7f6 fdae 	bl	80103fc <ucdr_check_buffer_available_for>
 80198a0:	b9e0      	cbnz	r0, 80198dc <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80198a2:	463e      	mov	r6, r7
 80198a4:	e009      	b.n	80198ba <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80198a6:	68a9      	ldr	r1, [r5, #8]
 80198a8:	f002 fd8d 	bl	801c3c6 <memcpy>
 80198ac:	68ab      	ldr	r3, [r5, #8]
 80198ae:	6928      	ldr	r0, [r5, #16]
 80198b0:	4423      	add	r3, r4
 80198b2:	4420      	add	r0, r4
 80198b4:	1b36      	subs	r6, r6, r4
 80198b6:	60ab      	str	r3, [r5, #8]
 80198b8:	6128      	str	r0, [r5, #16]
 80198ba:	2201      	movs	r2, #1
 80198bc:	4631      	mov	r1, r6
 80198be:	4628      	mov	r0, r5
 80198c0:	f7f6 fe24 	bl	801050c <ucdr_check_final_buffer_behavior_array>
 80198c4:	4604      	mov	r4, r0
 80198c6:	1bb8      	subs	r0, r7, r6
 80198c8:	4440      	add	r0, r8
 80198ca:	4622      	mov	r2, r4
 80198cc:	2c00      	cmp	r4, #0
 80198ce:	d1ea      	bne.n	80198a6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 80198d0:	2301      	movs	r3, #1
 80198d2:	7da8      	ldrb	r0, [r5, #22]
 80198d4:	756b      	strb	r3, [r5, #21]
 80198d6:	4058      	eors	r0, r3
 80198d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198dc:	463a      	mov	r2, r7
 80198de:	68a9      	ldr	r1, [r5, #8]
 80198e0:	4640      	mov	r0, r8
 80198e2:	f002 fd70 	bl	801c3c6 <memcpy>
 80198e6:	68aa      	ldr	r2, [r5, #8]
 80198e8:	692b      	ldr	r3, [r5, #16]
 80198ea:	443a      	add	r2, r7
 80198ec:	443b      	add	r3, r7
 80198ee:	60aa      	str	r2, [r5, #8]
 80198f0:	612b      	str	r3, [r5, #16]
 80198f2:	e7ed      	b.n	80198d0 <ucdr_deserialize_endian_array_uint8_t+0x40>

080198f4 <ucdr_serialize_sequence_char>:
 80198f4:	b570      	push	{r4, r5, r6, lr}
 80198f6:	4615      	mov	r5, r2
 80198f8:	460e      	mov	r6, r1
 80198fa:	7d01      	ldrb	r1, [r0, #20]
 80198fc:	4604      	mov	r4, r0
 80198fe:	f7f5 fe15 	bl	800f52c <ucdr_serialize_endian_uint32_t>
 8019902:	b90d      	cbnz	r5, 8019908 <ucdr_serialize_sequence_char+0x14>
 8019904:	2001      	movs	r0, #1
 8019906:	bd70      	pop	{r4, r5, r6, pc}
 8019908:	7d21      	ldrb	r1, [r4, #20]
 801990a:	462b      	mov	r3, r5
 801990c:	4632      	mov	r2, r6
 801990e:	4620      	mov	r0, r4
 8019910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019914:	f7ff bec2 	b.w	801969c <ucdr_serialize_endian_array_char>

08019918 <ucdr_deserialize_sequence_char>:
 8019918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801991c:	461d      	mov	r5, r3
 801991e:	4616      	mov	r6, r2
 8019920:	460f      	mov	r7, r1
 8019922:	461a      	mov	r2, r3
 8019924:	7d01      	ldrb	r1, [r0, #20]
 8019926:	4604      	mov	r4, r0
 8019928:	f7f5 ff28 	bl	800f77c <ucdr_deserialize_endian_uint32_t>
 801992c:	682b      	ldr	r3, [r5, #0]
 801992e:	429e      	cmp	r6, r3
 8019930:	bf3c      	itt	cc
 8019932:	2201      	movcc	r2, #1
 8019934:	75a2      	strbcc	r2, [r4, #22]
 8019936:	b913      	cbnz	r3, 801993e <ucdr_deserialize_sequence_char+0x26>
 8019938:	2001      	movs	r0, #1
 801993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801993e:	7d21      	ldrb	r1, [r4, #20]
 8019940:	463a      	mov	r2, r7
 8019942:	4620      	mov	r0, r4
 8019944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019948:	f7ff beda 	b.w	8019700 <ucdr_deserialize_endian_array_char>

0801994c <ucdr_serialize_sequence_uint8_t>:
 801994c:	b570      	push	{r4, r5, r6, lr}
 801994e:	4615      	mov	r5, r2
 8019950:	460e      	mov	r6, r1
 8019952:	7d01      	ldrb	r1, [r0, #20]
 8019954:	4604      	mov	r4, r0
 8019956:	f7f5 fde9 	bl	800f52c <ucdr_serialize_endian_uint32_t>
 801995a:	b90d      	cbnz	r5, 8019960 <ucdr_serialize_sequence_uint8_t+0x14>
 801995c:	2001      	movs	r0, #1
 801995e:	bd70      	pop	{r4, r5, r6, pc}
 8019960:	7d21      	ldrb	r1, [r4, #20]
 8019962:	462b      	mov	r3, r5
 8019964:	4632      	mov	r2, r6
 8019966:	4620      	mov	r0, r4
 8019968:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801996c:	f7ff bf2c 	b.w	80197c8 <ucdr_serialize_endian_array_uint8_t>

08019970 <ucdr_deserialize_sequence_uint8_t>:
 8019970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019974:	461d      	mov	r5, r3
 8019976:	4616      	mov	r6, r2
 8019978:	460f      	mov	r7, r1
 801997a:	461a      	mov	r2, r3
 801997c:	7d01      	ldrb	r1, [r0, #20]
 801997e:	4604      	mov	r4, r0
 8019980:	f7f5 fefc 	bl	800f77c <ucdr_deserialize_endian_uint32_t>
 8019984:	682b      	ldr	r3, [r5, #0]
 8019986:	429e      	cmp	r6, r3
 8019988:	bf3c      	itt	cc
 801998a:	2201      	movcc	r2, #1
 801998c:	75a2      	strbcc	r2, [r4, #22]
 801998e:	b913      	cbnz	r3, 8019996 <ucdr_deserialize_sequence_uint8_t+0x26>
 8019990:	2001      	movs	r0, #1
 8019992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019996:	7d21      	ldrb	r1, [r4, #20]
 8019998:	463a      	mov	r2, r7
 801999a:	4620      	mov	r0, r4
 801999c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199a0:	f7ff bf76 	b.w	8019890 <ucdr_deserialize_endian_array_uint8_t>

080199a4 <ucdr_serialize_string>:
 80199a4:	b510      	push	{r4, lr}
 80199a6:	b082      	sub	sp, #8
 80199a8:	4604      	mov	r4, r0
 80199aa:	4608      	mov	r0, r1
 80199ac:	9101      	str	r1, [sp, #4]
 80199ae:	f7e6 fc19 	bl	80001e4 <strlen>
 80199b2:	9901      	ldr	r1, [sp, #4]
 80199b4:	1c42      	adds	r2, r0, #1
 80199b6:	4620      	mov	r0, r4
 80199b8:	b002      	add	sp, #8
 80199ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199be:	f7ff bf99 	b.w	80198f4 <ucdr_serialize_sequence_char>
 80199c2:	bf00      	nop

080199c4 <ucdr_deserialize_string>:
 80199c4:	b500      	push	{lr}
 80199c6:	b083      	sub	sp, #12
 80199c8:	ab01      	add	r3, sp, #4
 80199ca:	f7ff ffa5 	bl	8019918 <ucdr_deserialize_sequence_char>
 80199ce:	b003      	add	sp, #12
 80199d0:	f85d fb04 	ldr.w	pc, [sp], #4

080199d4 <get_custom_error>:
 80199d4:	4b01      	ldr	r3, [pc, #4]	@ (80199dc <get_custom_error+0x8>)
 80199d6:	7818      	ldrb	r0, [r3, #0]
 80199d8:	4770      	bx	lr
 80199da:	bf00      	nop
 80199dc:	2000e700 	.word	0x2000e700

080199e0 <recv_custom_msg>:
 80199e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e4:	4693      	mov	fp, r2
 80199e6:	b089      	sub	sp, #36	@ 0x24
 80199e8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80199ec:	9305      	str	r3, [sp, #20]
 80199ee:	468a      	mov	sl, r1
 80199f0:	2100      	movs	r1, #0
 80199f2:	4604      	mov	r4, r0
 80199f4:	f88d 101e 	strb.w	r1, [sp, #30]
 80199f8:	b322      	cbz	r2, 8019a44 <recv_custom_msg+0x64>
 80199fa:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80199fe:	f10d 081f 	add.w	r8, sp, #31
 8019a02:	af05      	add	r7, sp, #20
 8019a04:	f10d 061e 	add.w	r6, sp, #30
 8019a08:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8019a0c:	e002      	b.n	8019a14 <recv_custom_msg+0x34>
 8019a0e:	9b05      	ldr	r3, [sp, #20]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	dd0f      	ble.n	8019a34 <recv_custom_msg+0x54>
 8019a14:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8019a18:	4623      	mov	r3, r4
 8019a1a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8019a1e:	e9cd 5600 	strd	r5, r6, [sp]
 8019a22:	4622      	mov	r2, r4
 8019a24:	4648      	mov	r0, r9
 8019a26:	f001 f92d 	bl	801ac84 <uxr_read_framed_msg>
 8019a2a:	2800      	cmp	r0, #0
 8019a2c:	d0ef      	beq.n	8019a0e <recv_custom_msg+0x2e>
 8019a2e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019a32:	b1b3      	cbz	r3, 8019a62 <recv_custom_msg+0x82>
 8019a34:	4b0f      	ldr	r3, [pc, #60]	@ (8019a74 <recv_custom_msg+0x94>)
 8019a36:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8019a3a:	701a      	strb	r2, [r3, #0]
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	b009      	add	sp, #36	@ 0x24
 8019a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a44:	f10d 021f 	add.w	r2, sp, #31
 8019a48:	9200      	str	r2, [sp, #0]
 8019a4a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8019a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a52:	4601      	mov	r1, r0
 8019a54:	47a8      	blx	r5
 8019a56:	2800      	cmp	r0, #0
 8019a58:	d0ec      	beq.n	8019a34 <recv_custom_msg+0x54>
 8019a5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d1e8      	bne.n	8019a34 <recv_custom_msg+0x54>
 8019a62:	f8cb 0000 	str.w	r0, [fp]
 8019a66:	2001      	movs	r0, #1
 8019a68:	f8ca 4000 	str.w	r4, [sl]
 8019a6c:	b009      	add	sp, #36	@ 0x24
 8019a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a72:	bf00      	nop
 8019a74:	2000e700 	.word	0x2000e700

08019a78 <send_custom_msg>:
 8019a78:	b530      	push	{r4, r5, lr}
 8019a7a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8019a7e:	b087      	sub	sp, #28
 8019a80:	4615      	mov	r5, r2
 8019a82:	b974      	cbnz	r4, 8019aa2 <send_custom_msg+0x2a>
 8019a84:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8019a88:	f10d 0317 	add.w	r3, sp, #23
 8019a8c:	47a0      	blx	r4
 8019a8e:	b108      	cbz	r0, 8019a94 <send_custom_msg+0x1c>
 8019a90:	42a8      	cmp	r0, r5
 8019a92:	d015      	beq.n	8019ac0 <send_custom_msg+0x48>
 8019a94:	4b0c      	ldr	r3, [pc, #48]	@ (8019ac8 <send_custom_msg+0x50>)
 8019a96:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8019a9a:	701a      	strb	r2, [r3, #0]
 8019a9c:	2000      	movs	r0, #0
 8019a9e:	b007      	add	sp, #28
 8019aa0:	bd30      	pop	{r4, r5, pc}
 8019aa2:	460b      	mov	r3, r1
 8019aa4:	2200      	movs	r2, #0
 8019aa6:	f10d 0117 	add.w	r1, sp, #23
 8019aaa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8019aae:	4602      	mov	r2, r0
 8019ab0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8019ab4:	9500      	str	r5, [sp, #0]
 8019ab6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8019aba:	f000 feeb 	bl	801a894 <uxr_write_framed_msg>
 8019abe:	e7e6      	b.n	8019a8e <send_custom_msg+0x16>
 8019ac0:	2001      	movs	r0, #1
 8019ac2:	b007      	add	sp, #28
 8019ac4:	bd30      	pop	{r4, r5, pc}
 8019ac6:	bf00      	nop
 8019ac8:	2000e700 	.word	0x2000e700

08019acc <uxr_set_custom_transport_callbacks>:
 8019acc:	b410      	push	{r4}
 8019ace:	9c01      	ldr	r4, [sp, #4]
 8019ad0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8019ad4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8019ad8:	9b02      	ldr	r3, [sp, #8]
 8019ada:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8019ade:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ae2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8019ae6:	4770      	bx	lr

08019ae8 <uxr_init_custom_transport>:
 8019ae8:	b538      	push	{r3, r4, r5, lr}
 8019aea:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8019aee:	b303      	cbz	r3, 8019b32 <uxr_init_custom_transport+0x4a>
 8019af0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8019af4:	4604      	mov	r4, r0
 8019af6:	b1e2      	cbz	r2, 8019b32 <uxr_init_custom_transport+0x4a>
 8019af8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8019afc:	b1ca      	cbz	r2, 8019b32 <uxr_init_custom_transport+0x4a>
 8019afe:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8019b02:	b1b2      	cbz	r2, 8019b32 <uxr_init_custom_transport+0x4a>
 8019b04:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8019b08:	4798      	blx	r3
 8019b0a:	4605      	mov	r5, r0
 8019b0c:	b188      	cbz	r0, 8019b32 <uxr_init_custom_transport+0x4a>
 8019b0e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8019b12:	b98b      	cbnz	r3, 8019b38 <uxr_init_custom_transport+0x50>
 8019b14:	490b      	ldr	r1, [pc, #44]	@ (8019b44 <uxr_init_custom_transport+0x5c>)
 8019b16:	4b0c      	ldr	r3, [pc, #48]	@ (8019b48 <uxr_init_custom_transport+0x60>)
 8019b18:	4a0c      	ldr	r2, [pc, #48]	@ (8019b4c <uxr_init_custom_transport+0x64>)
 8019b1a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8019b1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019b22:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8019b26:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8019b2a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8019b2e:	4628      	mov	r0, r5
 8019b30:	bd38      	pop	{r3, r4, r5, pc}
 8019b32:	2500      	movs	r5, #0
 8019b34:	4628      	mov	r0, r5
 8019b36:	bd38      	pop	{r3, r4, r5, pc}
 8019b38:	2100      	movs	r1, #0
 8019b3a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8019b3e:	f000 fea3 	bl	801a888 <uxr_init_framing_io>
 8019b42:	e7e7      	b.n	8019b14 <uxr_init_custom_transport+0x2c>
 8019b44:	08019a79 	.word	0x08019a79
 8019b48:	080199e1 	.word	0x080199e1
 8019b4c:	080199d5 	.word	0x080199d5

08019b50 <uxr_close_custom_transport>:
 8019b50:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8019b54:	4718      	bx	r3
 8019b56:	bf00      	nop

08019b58 <uxr_init_input_best_effort_stream>:
 8019b58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019b5c:	8003      	strh	r3, [r0, #0]
 8019b5e:	4770      	bx	lr

08019b60 <uxr_reset_input_best_effort_stream>:
 8019b60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019b64:	8003      	strh	r3, [r0, #0]
 8019b66:	4770      	bx	lr

08019b68 <uxr_receive_best_effort_message>:
 8019b68:	b538      	push	{r3, r4, r5, lr}
 8019b6a:	4604      	mov	r4, r0
 8019b6c:	8800      	ldrh	r0, [r0, #0]
 8019b6e:	460d      	mov	r5, r1
 8019b70:	f000 fe72 	bl	801a858 <uxr_seq_num_cmp>
 8019b74:	4603      	mov	r3, r0
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019b7c:	bfb8      	it	lt
 8019b7e:	8025      	strhlt	r5, [r4, #0]
 8019b80:	bd38      	pop	{r3, r4, r5, pc}
 8019b82:	bf00      	nop

08019b84 <on_full_input_buffer>:
 8019b84:	b570      	push	{r4, r5, r6, lr}
 8019b86:	4605      	mov	r5, r0
 8019b88:	460c      	mov	r4, r1
 8019b8a:	682b      	ldr	r3, [r5, #0]
 8019b8c:	6809      	ldr	r1, [r1, #0]
 8019b8e:	8920      	ldrh	r0, [r4, #8]
 8019b90:	6862      	ldr	r2, [r4, #4]
 8019b92:	fbb2 f2f0 	udiv	r2, r2, r0
 8019b96:	eba3 0c01 	sub.w	ip, r3, r1
 8019b9a:	fbbc fcf2 	udiv	ip, ip, r2
 8019b9e:	f10c 0c01 	add.w	ip, ip, #1
 8019ba2:	fa1f f38c 	uxth.w	r3, ip
 8019ba6:	fbb3 f6f0 	udiv	r6, r3, r0
 8019baa:	fb00 3316 	mls	r3, r0, r6, r3
 8019bae:	b29b      	uxth	r3, r3
 8019bb0:	fb02 f303 	mul.w	r3, r2, r3
 8019bb4:	1d18      	adds	r0, r3, #4
 8019bb6:	4408      	add	r0, r1
 8019bb8:	7d26      	ldrb	r6, [r4, #20]
 8019bba:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019bbe:	b116      	cbz	r6, 8019bc6 <on_full_input_buffer+0x42>
 8019bc0:	2600      	movs	r6, #0
 8019bc2:	f840 6c04 	str.w	r6, [r0, #-4]
 8019bc6:	2a03      	cmp	r2, #3
 8019bc8:	d801      	bhi.n	8019bce <on_full_input_buffer+0x4a>
 8019bca:	2001      	movs	r0, #1
 8019bcc:	bd70      	pop	{r4, r5, r6, pc}
 8019bce:	3308      	adds	r3, #8
 8019bd0:	4419      	add	r1, r3
 8019bd2:	4628      	mov	r0, r5
 8019bd4:	692b      	ldr	r3, [r5, #16]
 8019bd6:	3a04      	subs	r2, #4
 8019bd8:	f7f6 fc5c 	bl	8010494 <ucdr_init_buffer_origin>
 8019bdc:	4628      	mov	r0, r5
 8019bde:	4903      	ldr	r1, [pc, #12]	@ (8019bec <on_full_input_buffer+0x68>)
 8019be0:	4622      	mov	r2, r4
 8019be2:	f7f6 fc33 	bl	801044c <ucdr_set_on_full_buffer_callback>
 8019be6:	2000      	movs	r0, #0
 8019be8:	bd70      	pop	{r4, r5, r6, pc}
 8019bea:	bf00      	nop
 8019bec:	08019b85 	.word	0x08019b85

08019bf0 <uxr_init_input_reliable_stream>:
 8019bf0:	b500      	push	{lr}
 8019bf2:	e9c0 1200 	strd	r1, r2, [r0]
 8019bf6:	f04f 0e00 	mov.w	lr, #0
 8019bfa:	9a01      	ldr	r2, [sp, #4]
 8019bfc:	8103      	strh	r3, [r0, #8]
 8019bfe:	6102      	str	r2, [r0, #16]
 8019c00:	f880 e014 	strb.w	lr, [r0, #20]
 8019c04:	b1d3      	cbz	r3, 8019c3c <uxr_init_input_reliable_stream+0x4c>
 8019c06:	f8c1 e000 	str.w	lr, [r1]
 8019c0a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019c0e:	f1bc 0f01 	cmp.w	ip, #1
 8019c12:	d913      	bls.n	8019c3c <uxr_init_input_reliable_stream+0x4c>
 8019c14:	2301      	movs	r3, #1
 8019c16:	fbb3 f1fc 	udiv	r1, r3, ip
 8019c1a:	fb0c 3111 	mls	r1, ip, r1, r3
 8019c1e:	b289      	uxth	r1, r1
 8019c20:	6842      	ldr	r2, [r0, #4]
 8019c22:	fbb2 f2fc 	udiv	r2, r2, ip
 8019c26:	fb01 f202 	mul.w	r2, r1, r2
 8019c2a:	6801      	ldr	r1, [r0, #0]
 8019c2c:	f841 e002 	str.w	lr, [r1, r2]
 8019c30:	3301      	adds	r3, #1
 8019c32:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019c36:	b29b      	uxth	r3, r3
 8019c38:	459c      	cmp	ip, r3
 8019c3a:	d8ec      	bhi.n	8019c16 <uxr_init_input_reliable_stream+0x26>
 8019c3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019c40:	60c3      	str	r3, [r0, #12]
 8019c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c46:	bf00      	nop

08019c48 <uxr_reset_input_reliable_stream>:
 8019c48:	8901      	ldrh	r1, [r0, #8]
 8019c4a:	b1e9      	cbz	r1, 8019c88 <uxr_reset_input_reliable_stream+0x40>
 8019c4c:	f04f 0c00 	mov.w	ip, #0
 8019c50:	b500      	push	{lr}
 8019c52:	4663      	mov	r3, ip
 8019c54:	46e6      	mov	lr, ip
 8019c56:	fbb3 f2f1 	udiv	r2, r3, r1
 8019c5a:	fb01 3312 	mls	r3, r1, r2, r3
 8019c5e:	b29b      	uxth	r3, r3
 8019c60:	6842      	ldr	r2, [r0, #4]
 8019c62:	fbb2 f2f1 	udiv	r2, r2, r1
 8019c66:	fb02 f303 	mul.w	r3, r2, r3
 8019c6a:	6802      	ldr	r2, [r0, #0]
 8019c6c:	f842 e003 	str.w	lr, [r2, r3]
 8019c70:	f10c 0c01 	add.w	ip, ip, #1
 8019c74:	8901      	ldrh	r1, [r0, #8]
 8019c76:	fa1f f38c 	uxth.w	r3, ip
 8019c7a:	4299      	cmp	r1, r3
 8019c7c:	d8eb      	bhi.n	8019c56 <uxr_reset_input_reliable_stream+0xe>
 8019c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019c82:	60c3      	str	r3, [r0, #12]
 8019c84:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019c8c:	60c3      	str	r3, [r0, #12]
 8019c8e:	4770      	bx	lr

08019c90 <uxr_receive_reliable_message>:
 8019c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c94:	4604      	mov	r4, r0
 8019c96:	460d      	mov	r5, r1
 8019c98:	8901      	ldrh	r1, [r0, #8]
 8019c9a:	8980      	ldrh	r0, [r0, #12]
 8019c9c:	4690      	mov	r8, r2
 8019c9e:	461f      	mov	r7, r3
 8019ca0:	f000 fdd2 	bl	801a848 <uxr_seq_num_add>
 8019ca4:	4629      	mov	r1, r5
 8019ca6:	4606      	mov	r6, r0
 8019ca8:	89a0      	ldrh	r0, [r4, #12]
 8019caa:	f000 fdd5 	bl	801a858 <uxr_seq_num_cmp>
 8019cae:	2800      	cmp	r0, #0
 8019cb0:	db0a      	blt.n	8019cc8 <uxr_receive_reliable_message+0x38>
 8019cb2:	2600      	movs	r6, #0
 8019cb4:	89e0      	ldrh	r0, [r4, #14]
 8019cb6:	4629      	mov	r1, r5
 8019cb8:	f000 fdce 	bl	801a858 <uxr_seq_num_cmp>
 8019cbc:	2800      	cmp	r0, #0
 8019cbe:	da00      	bge.n	8019cc2 <uxr_receive_reliable_message+0x32>
 8019cc0:	81e5      	strh	r5, [r4, #14]
 8019cc2:	4630      	mov	r0, r6
 8019cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019cc8:	4630      	mov	r0, r6
 8019cca:	4629      	mov	r1, r5
 8019ccc:	f000 fdc4 	bl	801a858 <uxr_seq_num_cmp>
 8019cd0:	2800      	cmp	r0, #0
 8019cd2:	dbee      	blt.n	8019cb2 <uxr_receive_reliable_message+0x22>
 8019cd4:	6923      	ldr	r3, [r4, #16]
 8019cd6:	4640      	mov	r0, r8
 8019cd8:	4798      	blx	r3
 8019cda:	2101      	movs	r1, #1
 8019cdc:	4681      	mov	r9, r0
 8019cde:	89a0      	ldrh	r0, [r4, #12]
 8019ce0:	f000 fdb2 	bl	801a848 <uxr_seq_num_add>
 8019ce4:	f1b9 0f00 	cmp.w	r9, #0
 8019ce8:	d101      	bne.n	8019cee <uxr_receive_reliable_message+0x5e>
 8019cea:	4285      	cmp	r5, r0
 8019cec:	d047      	beq.n	8019d7e <uxr_receive_reliable_message+0xee>
 8019cee:	8922      	ldrh	r2, [r4, #8]
 8019cf0:	fbb5 f0f2 	udiv	r0, r5, r2
 8019cf4:	fb02 5010 	mls	r0, r2, r0, r5
 8019cf8:	b280      	uxth	r0, r0
 8019cfa:	6863      	ldr	r3, [r4, #4]
 8019cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8019d00:	fb00 f303 	mul.w	r3, r0, r3
 8019d04:	6820      	ldr	r0, [r4, #0]
 8019d06:	3304      	adds	r3, #4
 8019d08:	4418      	add	r0, r3
 8019d0a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d1cf      	bne.n	8019cb2 <uxr_receive_reliable_message+0x22>
 8019d12:	4641      	mov	r1, r8
 8019d14:	463a      	mov	r2, r7
 8019d16:	f002 fb56 	bl	801c3c6 <memcpy>
 8019d1a:	8921      	ldrh	r1, [r4, #8]
 8019d1c:	fbb5 f2f1 	udiv	r2, r5, r1
 8019d20:	fb01 5212 	mls	r2, r1, r2, r5
 8019d24:	b292      	uxth	r2, r2
 8019d26:	6863      	ldr	r3, [r4, #4]
 8019d28:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d2c:	fb02 f303 	mul.w	r3, r2, r3
 8019d30:	6822      	ldr	r2, [r4, #0]
 8019d32:	50d7      	str	r7, [r2, r3]
 8019d34:	9a08      	ldr	r2, [sp, #32]
 8019d36:	2301      	movs	r3, #1
 8019d38:	7013      	strb	r3, [r2, #0]
 8019d3a:	f1b9 0f00 	cmp.w	r9, #0
 8019d3e:	d0b8      	beq.n	8019cb2 <uxr_receive_reliable_message+0x22>
 8019d40:	89a6      	ldrh	r6, [r4, #12]
 8019d42:	4630      	mov	r0, r6
 8019d44:	2101      	movs	r1, #1
 8019d46:	f000 fd7f 	bl	801a848 <uxr_seq_num_add>
 8019d4a:	8922      	ldrh	r2, [r4, #8]
 8019d4c:	6863      	ldr	r3, [r4, #4]
 8019d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019d52:	4606      	mov	r6, r0
 8019d54:	fbb0 f0f2 	udiv	r0, r0, r2
 8019d58:	fb02 6010 	mls	r0, r2, r0, r6
 8019d5c:	b280      	uxth	r0, r0
 8019d5e:	fb00 f303 	mul.w	r3, r0, r3
 8019d62:	6820      	ldr	r0, [r4, #0]
 8019d64:	3304      	adds	r3, #4
 8019d66:	4418      	add	r0, r3
 8019d68:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d0a0      	beq.n	8019cb2 <uxr_receive_reliable_message+0x22>
 8019d70:	6923      	ldr	r3, [r4, #16]
 8019d72:	4798      	blx	r3
 8019d74:	2802      	cmp	r0, #2
 8019d76:	d008      	beq.n	8019d8a <uxr_receive_reliable_message+0xfa>
 8019d78:	2801      	cmp	r0, #1
 8019d7a:	d0e2      	beq.n	8019d42 <uxr_receive_reliable_message+0xb2>
 8019d7c:	e799      	b.n	8019cb2 <uxr_receive_reliable_message+0x22>
 8019d7e:	9b08      	ldr	r3, [sp, #32]
 8019d80:	81a5      	strh	r5, [r4, #12]
 8019d82:	2601      	movs	r6, #1
 8019d84:	f883 9000 	strb.w	r9, [r3]
 8019d88:	e794      	b.n	8019cb4 <uxr_receive_reliable_message+0x24>
 8019d8a:	2601      	movs	r6, #1
 8019d8c:	e792      	b.n	8019cb4 <uxr_receive_reliable_message+0x24>
 8019d8e:	bf00      	nop

08019d90 <uxr_next_input_reliable_buffer_available>:
 8019d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d94:	4604      	mov	r4, r0
 8019d96:	460f      	mov	r7, r1
 8019d98:	8980      	ldrh	r0, [r0, #12]
 8019d9a:	2101      	movs	r1, #1
 8019d9c:	4690      	mov	r8, r2
 8019d9e:	f000 fd53 	bl	801a848 <uxr_seq_num_add>
 8019da2:	8922      	ldrh	r2, [r4, #8]
 8019da4:	fbb0 f6f2 	udiv	r6, r0, r2
 8019da8:	fb02 0616 	mls	r6, r2, r6, r0
 8019dac:	b2b6      	uxth	r6, r6
 8019dae:	6863      	ldr	r3, [r4, #4]
 8019db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8019db4:	fb06 f303 	mul.w	r3, r6, r3
 8019db8:	6826      	ldr	r6, [r4, #0]
 8019dba:	3304      	adds	r3, #4
 8019dbc:	441e      	add	r6, r3
 8019dbe:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8019dc2:	f1b9 0f00 	cmp.w	r9, #0
 8019dc6:	d023      	beq.n	8019e10 <uxr_next_input_reliable_buffer_available+0x80>
 8019dc8:	6923      	ldr	r3, [r4, #16]
 8019dca:	4605      	mov	r5, r0
 8019dcc:	4630      	mov	r0, r6
 8019dce:	4798      	blx	r3
 8019dd0:	4682      	mov	sl, r0
 8019dd2:	b300      	cbz	r0, 8019e16 <uxr_next_input_reliable_buffer_available+0x86>
 8019dd4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019dd8:	2101      	movs	r1, #1
 8019dda:	4650      	mov	r0, sl
 8019ddc:	f000 fd34 	bl	801a848 <uxr_seq_num_add>
 8019de0:	8921      	ldrh	r1, [r4, #8]
 8019de2:	fbb0 f2f1 	udiv	r2, r0, r1
 8019de6:	4682      	mov	sl, r0
 8019de8:	fb01 0212 	mls	r2, r1, r2, r0
 8019dec:	e9d4 0300 	ldrd	r0, r3, [r4]
 8019df0:	b292      	uxth	r2, r2
 8019df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8019df6:	fb02 f303 	mul.w	r3, r2, r3
 8019dfa:	3304      	adds	r3, #4
 8019dfc:	4418      	add	r0, r3
 8019dfe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019e02:	b12b      	cbz	r3, 8019e10 <uxr_next_input_reliable_buffer_available+0x80>
 8019e04:	6923      	ldr	r3, [r4, #16]
 8019e06:	4798      	blx	r3
 8019e08:	2802      	cmp	r0, #2
 8019e0a:	d01b      	beq.n	8019e44 <uxr_next_input_reliable_buffer_available+0xb4>
 8019e0c:	2801      	cmp	r0, #1
 8019e0e:	d0e3      	beq.n	8019dd8 <uxr_next_input_reliable_buffer_available+0x48>
 8019e10:	2000      	movs	r0, #0
 8019e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e16:	464a      	mov	r2, r9
 8019e18:	4631      	mov	r1, r6
 8019e1a:	4638      	mov	r0, r7
 8019e1c:	f7f6 fb42 	bl	80104a4 <ucdr_init_buffer>
 8019e20:	8921      	ldrh	r1, [r4, #8]
 8019e22:	fbb5 f2f1 	udiv	r2, r5, r1
 8019e26:	fb01 5212 	mls	r2, r1, r2, r5
 8019e2a:	b292      	uxth	r2, r2
 8019e2c:	6863      	ldr	r3, [r4, #4]
 8019e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e32:	fb02 f303 	mul.w	r3, r2, r3
 8019e36:	6822      	ldr	r2, [r4, #0]
 8019e38:	f842 a003 	str.w	sl, [r2, r3]
 8019e3c:	2001      	movs	r0, #1
 8019e3e:	81a5      	strh	r5, [r4, #12]
 8019e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e44:	8920      	ldrh	r0, [r4, #8]
 8019e46:	fbb5 f3f0 	udiv	r3, r5, r0
 8019e4a:	fb00 5513 	mls	r5, r0, r3, r5
 8019e4e:	b2ad      	uxth	r5, r5
 8019e50:	6863      	ldr	r3, [r4, #4]
 8019e52:	fbb3 f3f0 	udiv	r3, r3, r0
 8019e56:	fb03 f505 	mul.w	r5, r3, r5
 8019e5a:	6823      	ldr	r3, [r4, #0]
 8019e5c:	2000      	movs	r0, #0
 8019e5e:	5158      	str	r0, [r3, r5]
 8019e60:	eb06 0108 	add.w	r1, r6, r8
 8019e64:	eba9 0208 	sub.w	r2, r9, r8
 8019e68:	4638      	mov	r0, r7
 8019e6a:	f7f6 fb1b 	bl	80104a4 <ucdr_init_buffer>
 8019e6e:	4638      	mov	r0, r7
 8019e70:	4903      	ldr	r1, [pc, #12]	@ (8019e80 <uxr_next_input_reliable_buffer_available+0xf0>)
 8019e72:	4622      	mov	r2, r4
 8019e74:	f7f6 faea 	bl	801044c <ucdr_set_on_full_buffer_callback>
 8019e78:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019e7c:	2001      	movs	r0, #1
 8019e7e:	e7c8      	b.n	8019e12 <uxr_next_input_reliable_buffer_available+0x82>
 8019e80:	08019b85 	.word	0x08019b85

08019e84 <uxr_process_heartbeat>:
 8019e84:	b538      	push	{r3, r4, r5, lr}
 8019e86:	4611      	mov	r1, r2
 8019e88:	4604      	mov	r4, r0
 8019e8a:	89c0      	ldrh	r0, [r0, #14]
 8019e8c:	4615      	mov	r5, r2
 8019e8e:	f000 fce3 	bl	801a858 <uxr_seq_num_cmp>
 8019e92:	2800      	cmp	r0, #0
 8019e94:	bfb8      	it	lt
 8019e96:	81e5      	strhlt	r5, [r4, #14]
 8019e98:	bd38      	pop	{r3, r4, r5, pc}
 8019e9a:	bf00      	nop

08019e9c <uxr_compute_acknack>:
 8019e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ea0:	8903      	ldrh	r3, [r0, #8]
 8019ea2:	8985      	ldrh	r5, [r0, #12]
 8019ea4:	4604      	mov	r4, r0
 8019ea6:	460e      	mov	r6, r1
 8019ea8:	b1d3      	cbz	r3, 8019ee0 <uxr_compute_acknack+0x44>
 8019eaa:	4628      	mov	r0, r5
 8019eac:	2701      	movs	r7, #1
 8019eae:	e003      	b.n	8019eb8 <uxr_compute_acknack+0x1c>
 8019eb0:	4567      	cmp	r7, ip
 8019eb2:	d215      	bcs.n	8019ee0 <uxr_compute_acknack+0x44>
 8019eb4:	89a0      	ldrh	r0, [r4, #12]
 8019eb6:	3701      	adds	r7, #1
 8019eb8:	b2b9      	uxth	r1, r7
 8019eba:	f000 fcc5 	bl	801a848 <uxr_seq_num_add>
 8019ebe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019ec2:	fbb0 f3fc 	udiv	r3, r0, ip
 8019ec6:	fb0c 0313 	mls	r3, ip, r3, r0
 8019eca:	b29a      	uxth	r2, r3
 8019ecc:	e9d4 1300 	ldrd	r1, r3, [r4]
 8019ed0:	fbb3 f3fc 	udiv	r3, r3, ip
 8019ed4:	fb02 f303 	mul.w	r3, r2, r3
 8019ed8:	58cb      	ldr	r3, [r1, r3]
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d1e8      	bne.n	8019eb0 <uxr_compute_acknack+0x14>
 8019ede:	4605      	mov	r5, r0
 8019ee0:	8035      	strh	r5, [r6, #0]
 8019ee2:	2101      	movs	r1, #1
 8019ee4:	4628      	mov	r0, r5
 8019ee6:	89e7      	ldrh	r7, [r4, #14]
 8019ee8:	f000 fcb2 	bl	801a850 <uxr_seq_num_sub>
 8019eec:	4601      	mov	r1, r0
 8019eee:	4638      	mov	r0, r7
 8019ef0:	f000 fcae 	bl	801a850 <uxr_seq_num_sub>
 8019ef4:	4605      	mov	r5, r0
 8019ef6:	b318      	cbz	r0, 8019f40 <uxr_compute_acknack+0xa4>
 8019ef8:	f04f 0900 	mov.w	r9, #0
 8019efc:	464f      	mov	r7, r9
 8019efe:	f04f 0801 	mov.w	r8, #1
 8019f02:	fa1f f189 	uxth.w	r1, r9
 8019f06:	8830      	ldrh	r0, [r6, #0]
 8019f08:	f000 fc9e 	bl	801a848 <uxr_seq_num_add>
 8019f0c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019f10:	fbb0 f3fc 	udiv	r3, r0, ip
 8019f14:	e9d4 1200 	ldrd	r1, r2, [r4]
 8019f18:	fb03 001c 	mls	r0, r3, ip, r0
 8019f1c:	b283      	uxth	r3, r0
 8019f1e:	fbb2 f2fc 	udiv	r2, r2, ip
 8019f22:	fb02 f303 	mul.w	r3, r2, r3
 8019f26:	fa08 f209 	lsl.w	r2, r8, r9
 8019f2a:	58cb      	ldr	r3, [r1, r3]
 8019f2c:	f109 0901 	add.w	r9, r9, #1
 8019f30:	b90b      	cbnz	r3, 8019f36 <uxr_compute_acknack+0x9a>
 8019f32:	4317      	orrs	r7, r2
 8019f34:	b2bf      	uxth	r7, r7
 8019f36:	454d      	cmp	r5, r9
 8019f38:	d1e3      	bne.n	8019f02 <uxr_compute_acknack+0x66>
 8019f3a:	4638      	mov	r0, r7
 8019f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f40:	4607      	mov	r7, r0
 8019f42:	4638      	mov	r0, r7
 8019f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08019f48 <uxr_init_output_best_effort_stream>:
 8019f48:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8019f4c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019f50:	6001      	str	r1, [r0, #0]
 8019f52:	7303      	strb	r3, [r0, #12]
 8019f54:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019f58:	4770      	bx	lr
 8019f5a:	bf00      	nop

08019f5c <uxr_reset_output_best_effort_stream>:
 8019f5c:	7b02      	ldrb	r2, [r0, #12]
 8019f5e:	6042      	str	r2, [r0, #4]
 8019f60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019f64:	81c3      	strh	r3, [r0, #14]
 8019f66:	4770      	bx	lr

08019f68 <uxr_prepare_best_effort_buffer_to_write>:
 8019f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f6a:	4604      	mov	r4, r0
 8019f6c:	b083      	sub	sp, #12
 8019f6e:	6840      	ldr	r0, [r0, #4]
 8019f70:	460d      	mov	r5, r1
 8019f72:	4616      	mov	r6, r2
 8019f74:	f7f9 fe68 	bl	8013c48 <uxr_submessage_padding>
 8019f78:	6863      	ldr	r3, [r4, #4]
 8019f7a:	4418      	add	r0, r3
 8019f7c:	68a3      	ldr	r3, [r4, #8]
 8019f7e:	1942      	adds	r2, r0, r5
 8019f80:	4293      	cmp	r3, r2
 8019f82:	bf2c      	ite	cs
 8019f84:	2701      	movcs	r7, #1
 8019f86:	2700      	movcc	r7, #0
 8019f88:	d202      	bcs.n	8019f90 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019f8a:	4638      	mov	r0, r7
 8019f8c:	b003      	add	sp, #12
 8019f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f90:	9000      	str	r0, [sp, #0]
 8019f92:	6821      	ldr	r1, [r4, #0]
 8019f94:	4630      	mov	r0, r6
 8019f96:	2300      	movs	r3, #0
 8019f98:	f7f6 fa72 	bl	8010480 <ucdr_init_buffer_origin_offset>
 8019f9c:	6861      	ldr	r1, [r4, #4]
 8019f9e:	4638      	mov	r0, r7
 8019fa0:	4429      	add	r1, r5
 8019fa2:	6061      	str	r1, [r4, #4]
 8019fa4:	b003      	add	sp, #12
 8019fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019fa8 <uxr_prepare_best_effort_buffer_to_send>:
 8019fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fac:	4604      	mov	r4, r0
 8019fae:	461d      	mov	r5, r3
 8019fb0:	6840      	ldr	r0, [r0, #4]
 8019fb2:	7b23      	ldrb	r3, [r4, #12]
 8019fb4:	4298      	cmp	r0, r3
 8019fb6:	bf8c      	ite	hi
 8019fb8:	2601      	movhi	r6, #1
 8019fba:	2600      	movls	r6, #0
 8019fbc:	d802      	bhi.n	8019fc4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019fbe:	4630      	mov	r0, r6
 8019fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fc4:	4688      	mov	r8, r1
 8019fc6:	89e0      	ldrh	r0, [r4, #14]
 8019fc8:	2101      	movs	r1, #1
 8019fca:	4617      	mov	r7, r2
 8019fcc:	f000 fc3c 	bl	801a848 <uxr_seq_num_add>
 8019fd0:	6823      	ldr	r3, [r4, #0]
 8019fd2:	81e0      	strh	r0, [r4, #14]
 8019fd4:	8028      	strh	r0, [r5, #0]
 8019fd6:	f8c8 3000 	str.w	r3, [r8]
 8019fda:	6863      	ldr	r3, [r4, #4]
 8019fdc:	603b      	str	r3, [r7, #0]
 8019fde:	7b23      	ldrb	r3, [r4, #12]
 8019fe0:	6063      	str	r3, [r4, #4]
 8019fe2:	4630      	mov	r0, r6
 8019fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fe8 <on_full_output_buffer>:
 8019fe8:	b538      	push	{r3, r4, r5, lr}
 8019fea:	6802      	ldr	r2, [r0, #0]
 8019fec:	460c      	mov	r4, r1
 8019fee:	6809      	ldr	r1, [r1, #0]
 8019ff0:	8923      	ldrh	r3, [r4, #8]
 8019ff2:	eba2 0c01 	sub.w	ip, r2, r1
 8019ff6:	6862      	ldr	r2, [r4, #4]
 8019ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8019ffc:	fbbc fcf2 	udiv	ip, ip, r2
 801a000:	f10c 0c01 	add.w	ip, ip, #1
 801a004:	fa1f fc8c 	uxth.w	ip, ip
 801a008:	fbbc fef3 	udiv	lr, ip, r3
 801a00c:	fb03 c31e 	mls	r3, r3, lr, ip
 801a010:	b29b      	uxth	r3, r3
 801a012:	fb02 f303 	mul.w	r3, r2, r3
 801a016:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a01a:	58ca      	ldr	r2, [r1, r3]
 801a01c:	4463      	add	r3, ip
 801a01e:	eba2 020c 	sub.w	r2, r2, ip
 801a022:	3308      	adds	r3, #8
 801a024:	4605      	mov	r5, r0
 801a026:	4419      	add	r1, r3
 801a028:	3a04      	subs	r2, #4
 801a02a:	6903      	ldr	r3, [r0, #16]
 801a02c:	f7f6 fa32 	bl	8010494 <ucdr_init_buffer_origin>
 801a030:	4628      	mov	r0, r5
 801a032:	4903      	ldr	r1, [pc, #12]	@ (801a040 <on_full_output_buffer+0x58>)
 801a034:	4622      	mov	r2, r4
 801a036:	f7f6 fa09 	bl	801044c <ucdr_set_on_full_buffer_callback>
 801a03a:	2000      	movs	r0, #0
 801a03c:	bd38      	pop	{r3, r4, r5, pc}
 801a03e:	bf00      	nop
 801a040:	08019fe9 	.word	0x08019fe9

0801a044 <uxr_init_output_reliable_stream>:
 801a044:	b410      	push	{r4}
 801a046:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a04a:	8103      	strh	r3, [r0, #8]
 801a04c:	e9c0 1200 	strd	r1, r2, [r0]
 801a050:	f880 c00c 	strb.w	ip, [r0, #12]
 801a054:	b1d3      	cbz	r3, 801a08c <uxr_init_output_reliable_stream+0x48>
 801a056:	f8c1 c000 	str.w	ip, [r1]
 801a05a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a05e:	f1bc 0f01 	cmp.w	ip, #1
 801a062:	d913      	bls.n	801a08c <uxr_init_output_reliable_stream+0x48>
 801a064:	2301      	movs	r3, #1
 801a066:	fbb3 f1fc 	udiv	r1, r3, ip
 801a06a:	fb0c 3111 	mls	r1, ip, r1, r3
 801a06e:	b289      	uxth	r1, r1
 801a070:	6842      	ldr	r2, [r0, #4]
 801a072:	6804      	ldr	r4, [r0, #0]
 801a074:	fbb2 f2fc 	udiv	r2, r2, ip
 801a078:	fb01 f202 	mul.w	r2, r1, r2
 801a07c:	7b01      	ldrb	r1, [r0, #12]
 801a07e:	50a1      	str	r1, [r4, r2]
 801a080:	3301      	adds	r3, #1
 801a082:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a086:	b29b      	uxth	r3, r3
 801a088:	459c      	cmp	ip, r3
 801a08a:	d8ec      	bhi.n	801a066 <uxr_init_output_reliable_stream+0x22>
 801a08c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a090:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a094:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a098:	4905      	ldr	r1, [pc, #20]	@ (801a0b0 <uxr_init_output_reliable_stream+0x6c>)
 801a09a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a09e:	f8c0 100e 	str.w	r1, [r0, #14]
 801a0a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	8242      	strh	r2, [r0, #18]
 801a0aa:	8403      	strh	r3, [r0, #32]
 801a0ac:	4770      	bx	lr
 801a0ae:	bf00      	nop
 801a0b0:	ffff0000 	.word	0xffff0000

0801a0b4 <uxr_reset_output_reliable_stream>:
 801a0b4:	8901      	ldrh	r1, [r0, #8]
 801a0b6:	b1b1      	cbz	r1, 801a0e6 <uxr_reset_output_reliable_stream+0x32>
 801a0b8:	f04f 0c00 	mov.w	ip, #0
 801a0bc:	4663      	mov	r3, ip
 801a0be:	fbb3 f2f1 	udiv	r2, r3, r1
 801a0c2:	fb01 3312 	mls	r3, r1, r2, r3
 801a0c6:	b29b      	uxth	r3, r3
 801a0c8:	6842      	ldr	r2, [r0, #4]
 801a0ca:	fbb2 f2f1 	udiv	r2, r2, r1
 801a0ce:	6801      	ldr	r1, [r0, #0]
 801a0d0:	fb02 f303 	mul.w	r3, r2, r3
 801a0d4:	7b02      	ldrb	r2, [r0, #12]
 801a0d6:	50ca      	str	r2, [r1, r3]
 801a0d8:	f10c 0c01 	add.w	ip, ip, #1
 801a0dc:	8901      	ldrh	r1, [r0, #8]
 801a0de:	fa1f f38c 	uxth.w	r3, ip
 801a0e2:	4299      	cmp	r1, r3
 801a0e4:	d8eb      	bhi.n	801a0be <uxr_reset_output_reliable_stream+0xa>
 801a0e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a0ea:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a0ee:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a0f2:	4904      	ldr	r1, [pc, #16]	@ (801a104 <uxr_reset_output_reliable_stream+0x50>)
 801a0f4:	f8c0 100e 	str.w	r1, [r0, #14]
 801a0f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	8242      	strh	r2, [r0, #18]
 801a100:	8403      	strh	r3, [r0, #32]
 801a102:	4770      	bx	lr
 801a104:	ffff0000 	.word	0xffff0000

0801a108 <uxr_prepare_reliable_buffer_to_write>:
 801a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a10c:	4604      	mov	r4, r0
 801a10e:	b091      	sub	sp, #68	@ 0x44
 801a110:	8900      	ldrh	r0, [r0, #8]
 801a112:	89e6      	ldrh	r6, [r4, #14]
 801a114:	6823      	ldr	r3, [r4, #0]
 801a116:	9204      	str	r2, [sp, #16]
 801a118:	fbb6 f2f0 	udiv	r2, r6, r0
 801a11c:	fb00 6212 	mls	r2, r0, r2, r6
 801a120:	b292      	uxth	r2, r2
 801a122:	6865      	ldr	r5, [r4, #4]
 801a124:	fbb5 f5f0 	udiv	r5, r5, r0
 801a128:	fb05 3202 	mla	r2, r5, r2, r3
 801a12c:	3204      	adds	r2, #4
 801a12e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801a132:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a136:	9203      	str	r2, [sp, #12]
 801a138:	468b      	mov	fp, r1
 801a13a:	1f2f      	subs	r7, r5, #4
 801a13c:	2800      	cmp	r0, #0
 801a13e:	f000 814c 	beq.w	801a3da <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a142:	f04f 0c00 	mov.w	ip, #0
 801a146:	46e2      	mov	sl, ip
 801a148:	4661      	mov	r1, ip
 801a14a:	fbb1 f2f0 	udiv	r2, r1, r0
 801a14e:	fb00 1212 	mls	r2, r0, r2, r1
 801a152:	b292      	uxth	r2, r2
 801a154:	fb05 f202 	mul.w	r2, r5, r2
 801a158:	f10c 0c01 	add.w	ip, ip, #1
 801a15c:	589a      	ldr	r2, [r3, r2]
 801a15e:	454a      	cmp	r2, r9
 801a160:	bf08      	it	eq
 801a162:	f10a 0a01 	addeq.w	sl, sl, #1
 801a166:	fa1f f18c 	uxth.w	r1, ip
 801a16a:	bf08      	it	eq
 801a16c:	fa1f fa8a 	uxtheq.w	sl, sl
 801a170:	4281      	cmp	r1, r0
 801a172:	d3ea      	bcc.n	801a14a <uxr_prepare_reliable_buffer_to_write+0x42>
 801a174:	4640      	mov	r0, r8
 801a176:	2104      	movs	r1, #4
 801a178:	f8cd a014 	str.w	sl, [sp, #20]
 801a17c:	f7f6 f996 	bl	80104ac <ucdr_alignment>
 801a180:	4480      	add	r8, r0
 801a182:	eb08 020b 	add.w	r2, r8, fp
 801a186:	42ba      	cmp	r2, r7
 801a188:	f240 80cd 	bls.w	801a326 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801a18c:	7b22      	ldrb	r2, [r4, #12]
 801a18e:	445a      	add	r2, fp
 801a190:	42ba      	cmp	r2, r7
 801a192:	f240 80b5 	bls.w	801a300 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801a196:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801a19a:	33fc      	adds	r3, #252	@ 0xfc
 801a19c:	b2ba      	uxth	r2, r7
 801a19e:	4413      	add	r3, r2
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	fb0a f903 	mul.w	r9, sl, r3
 801a1a6:	45d9      	cmp	r9, fp
 801a1a8:	9305      	str	r3, [sp, #20]
 801a1aa:	9306      	str	r3, [sp, #24]
 801a1ac:	f0c0 80b7 	bcc.w	801a31e <uxr_prepare_reliable_buffer_to_write+0x216>
 801a1b0:	f108 0304 	add.w	r3, r8, #4
 801a1b4:	42bb      	cmp	r3, r7
 801a1b6:	f080 80db 	bcs.w	801a370 <uxr_prepare_reliable_buffer_to_write+0x268>
 801a1ba:	f1a2 0904 	sub.w	r9, r2, #4
 801a1be:	eba9 0908 	sub.w	r9, r9, r8
 801a1c2:	9b05      	ldr	r3, [sp, #20]
 801a1c4:	fa1f f989 	uxth.w	r9, r9
 801a1c8:	ebab 0b09 	sub.w	fp, fp, r9
 801a1cc:	fbbb f2f3 	udiv	r2, fp, r3
 801a1d0:	fb03 b312 	mls	r3, r3, r2, fp
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	f000 80c8 	beq.w	801a36a <uxr_prepare_reliable_buffer_to_write+0x262>
 801a1da:	3201      	adds	r2, #1
 801a1dc:	b292      	uxth	r2, r2
 801a1de:	9306      	str	r3, [sp, #24]
 801a1e0:	4552      	cmp	r2, sl
 801a1e2:	f200 809c 	bhi.w	801a31e <uxr_prepare_reliable_buffer_to_write+0x216>
 801a1e6:	f10d 0b20 	add.w	fp, sp, #32
 801a1ea:	2a00      	cmp	r2, #0
 801a1ec:	d042      	beq.n	801a274 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801a1ee:	f8cd 801c 	str.w	r8, [sp, #28]
 801a1f2:	f04f 0a00 	mov.w	sl, #0
 801a1f6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a1fa:	9505      	str	r5, [sp, #20]
 801a1fc:	f10d 0b20 	add.w	fp, sp, #32
 801a200:	4615      	mov	r5, r2
 801a202:	e000      	b.n	801a206 <uxr_prepare_reliable_buffer_to_write+0xfe>
 801a204:	46c1      	mov	r9, r8
 801a206:	8920      	ldrh	r0, [r4, #8]
 801a208:	fbb6 f2f0 	udiv	r2, r6, r0
 801a20c:	fb00 6112 	mls	r1, r0, r2, r6
 801a210:	b28a      	uxth	r2, r1
 801a212:	6863      	ldr	r3, [r4, #4]
 801a214:	fbb3 f1f0 	udiv	r1, r3, r0
 801a218:	6823      	ldr	r3, [r4, #0]
 801a21a:	fb02 f101 	mul.w	r1, r2, r1
 801a21e:	3104      	adds	r1, #4
 801a220:	4419      	add	r1, r3
 801a222:	4658      	mov	r0, fp
 801a224:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a228:	9200      	str	r2, [sp, #0]
 801a22a:	2300      	movs	r3, #0
 801a22c:	463a      	mov	r2, r7
 801a22e:	f7f6 f927 	bl	8010480 <ucdr_init_buffer_origin_offset>
 801a232:	464a      	mov	r2, r9
 801a234:	2300      	movs	r3, #0
 801a236:	210d      	movs	r1, #13
 801a238:	4658      	mov	r0, fp
 801a23a:	f7f9 fcc5 	bl	8013bc8 <uxr_buffer_submessage_header>
 801a23e:	8921      	ldrh	r1, [r4, #8]
 801a240:	fbb6 f2f1 	udiv	r2, r6, r1
 801a244:	fb01 6212 	mls	r2, r1, r2, r6
 801a248:	b292      	uxth	r2, r2
 801a24a:	6863      	ldr	r3, [r4, #4]
 801a24c:	fbb3 f3f1 	udiv	r3, r3, r1
 801a250:	fb02 f303 	mul.w	r3, r2, r3
 801a254:	6822      	ldr	r2, [r4, #0]
 801a256:	4630      	mov	r0, r6
 801a258:	50d7      	str	r7, [r2, r3]
 801a25a:	2101      	movs	r1, #1
 801a25c:	f000 faf4 	bl	801a848 <uxr_seq_num_add>
 801a260:	f10a 0a01 	add.w	sl, sl, #1
 801a264:	fa1f f38a 	uxth.w	r3, sl
 801a268:	429d      	cmp	r5, r3
 801a26a:	4606      	mov	r6, r0
 801a26c:	d8ca      	bhi.n	801a204 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801a26e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a272:	9d05      	ldr	r5, [sp, #20]
 801a274:	8920      	ldrh	r0, [r4, #8]
 801a276:	fbb6 f3f0 	udiv	r3, r6, r0
 801a27a:	fb00 6313 	mls	r3, r0, r3, r6
 801a27e:	b299      	uxth	r1, r3
 801a280:	6863      	ldr	r3, [r4, #4]
 801a282:	fbb3 f3f0 	udiv	r3, r3, r0
 801a286:	fb01 f303 	mul.w	r3, r1, r3
 801a28a:	6821      	ldr	r1, [r4, #0]
 801a28c:	3304      	adds	r3, #4
 801a28e:	4419      	add	r1, r3
 801a290:	463a      	mov	r2, r7
 801a292:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a296:	9000      	str	r0, [sp, #0]
 801a298:	2300      	movs	r3, #0
 801a29a:	4658      	mov	r0, fp
 801a29c:	f7f6 f8f0 	bl	8010480 <ucdr_init_buffer_origin_offset>
 801a2a0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801a2a4:	4658      	mov	r0, fp
 801a2a6:	fa1f f289 	uxth.w	r2, r9
 801a2aa:	2302      	movs	r3, #2
 801a2ac:	210d      	movs	r1, #13
 801a2ae:	f7f9 fc8b 	bl	8013bc8 <uxr_buffer_submessage_header>
 801a2b2:	9b03      	ldr	r3, [sp, #12]
 801a2b4:	8927      	ldrh	r7, [r4, #8]
 801a2b6:	7b20      	ldrb	r0, [r4, #12]
 801a2b8:	f108 0104 	add.w	r1, r8, #4
 801a2bc:	440b      	add	r3, r1
 801a2be:	4619      	mov	r1, r3
 801a2c0:	fbb6 f3f7 	udiv	r3, r6, r7
 801a2c4:	fb07 6313 	mls	r3, r7, r3, r6
 801a2c8:	f1a5 0208 	sub.w	r2, r5, #8
 801a2cc:	b29d      	uxth	r5, r3
 801a2ce:	3004      	adds	r0, #4
 801a2d0:	6863      	ldr	r3, [r4, #4]
 801a2d2:	fbb3 f3f7 	udiv	r3, r3, r7
 801a2d6:	fb05 f303 	mul.w	r3, r5, r3
 801a2da:	6825      	ldr	r5, [r4, #0]
 801a2dc:	4448      	add	r0, r9
 801a2de:	50e8      	str	r0, [r5, r3]
 801a2e0:	9d04      	ldr	r5, [sp, #16]
 801a2e2:	eba2 0208 	sub.w	r2, r2, r8
 801a2e6:	4628      	mov	r0, r5
 801a2e8:	f7f6 f8dc 	bl	80104a4 <ucdr_init_buffer>
 801a2ec:	4628      	mov	r0, r5
 801a2ee:	493c      	ldr	r1, [pc, #240]	@ (801a3e0 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a2f0:	4622      	mov	r2, r4
 801a2f2:	f7f6 f8ab 	bl	801044c <ucdr_set_on_full_buffer_callback>
 801a2f6:	2001      	movs	r0, #1
 801a2f8:	81e6      	strh	r6, [r4, #14]
 801a2fa:	b011      	add	sp, #68	@ 0x44
 801a2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a300:	2101      	movs	r1, #1
 801a302:	89e0      	ldrh	r0, [r4, #14]
 801a304:	f000 faa0 	bl	801a848 <uxr_seq_num_add>
 801a308:	8921      	ldrh	r1, [r4, #8]
 801a30a:	4605      	mov	r5, r0
 801a30c:	8a60      	ldrh	r0, [r4, #18]
 801a30e:	f000 fa9b 	bl	801a848 <uxr_seq_num_add>
 801a312:	4601      	mov	r1, r0
 801a314:	4628      	mov	r0, r5
 801a316:	f000 fa9f 	bl	801a858 <uxr_seq_num_cmp>
 801a31a:	2800      	cmp	r0, #0
 801a31c:	dd42      	ble.n	801a3a4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801a31e:	2000      	movs	r0, #0
 801a320:	b011      	add	sp, #68	@ 0x44
 801a322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a326:	8921      	ldrh	r1, [r4, #8]
 801a328:	8a60      	ldrh	r0, [r4, #18]
 801a32a:	9205      	str	r2, [sp, #20]
 801a32c:	f000 fa8c 	bl	801a848 <uxr_seq_num_add>
 801a330:	4601      	mov	r1, r0
 801a332:	4630      	mov	r0, r6
 801a334:	f000 fa90 	bl	801a858 <uxr_seq_num_cmp>
 801a338:	2800      	cmp	r0, #0
 801a33a:	9a05      	ldr	r2, [sp, #20]
 801a33c:	dcef      	bgt.n	801a31e <uxr_prepare_reliable_buffer_to_write+0x216>
 801a33e:	8927      	ldrh	r7, [r4, #8]
 801a340:	fbb6 f3f7 	udiv	r3, r6, r7
 801a344:	fb07 6313 	mls	r3, r7, r3, r6
 801a348:	b29d      	uxth	r5, r3
 801a34a:	6863      	ldr	r3, [r4, #4]
 801a34c:	6824      	ldr	r4, [r4, #0]
 801a34e:	fbb3 f3f7 	udiv	r3, r3, r7
 801a352:	fb05 f303 	mul.w	r3, r5, r3
 801a356:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a35a:	50e2      	str	r2, [r4, r3]
 801a35c:	2300      	movs	r3, #0
 801a35e:	f8cd 8000 	str.w	r8, [sp]
 801a362:	f7f6 f88d 	bl	8010480 <ucdr_init_buffer_origin_offset>
 801a366:	2001      	movs	r0, #1
 801a368:	e7da      	b.n	801a320 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a36a:	b293      	uxth	r3, r2
 801a36c:	461a      	mov	r2, r3
 801a36e:	e737      	b.n	801a1e0 <uxr_prepare_reliable_buffer_to_write+0xd8>
 801a370:	4630      	mov	r0, r6
 801a372:	2101      	movs	r1, #1
 801a374:	9207      	str	r2, [sp, #28]
 801a376:	f000 fa67 	bl	801a848 <uxr_seq_num_add>
 801a37a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a37e:	fbb0 f1fc 	udiv	r1, r0, ip
 801a382:	fb0c 0111 	mls	r1, ip, r1, r0
 801a386:	4606      	mov	r6, r0
 801a388:	b288      	uxth	r0, r1
 801a38a:	6863      	ldr	r3, [r4, #4]
 801a38c:	fbb3 f1fc 	udiv	r1, r3, ip
 801a390:	6823      	ldr	r3, [r4, #0]
 801a392:	9a07      	ldr	r2, [sp, #28]
 801a394:	fb00 f101 	mul.w	r1, r0, r1
 801a398:	3104      	adds	r1, #4
 801a39a:	440b      	add	r3, r1
 801a39c:	9303      	str	r3, [sp, #12]
 801a39e:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a3a2:	e70a      	b.n	801a1ba <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a3a4:	8921      	ldrh	r1, [r4, #8]
 801a3a6:	fbb5 f3f1 	udiv	r3, r5, r1
 801a3aa:	fb01 5313 	mls	r3, r1, r3, r5
 801a3ae:	b29a      	uxth	r2, r3
 801a3b0:	6863      	ldr	r3, [r4, #4]
 801a3b2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a3b6:	6821      	ldr	r1, [r4, #0]
 801a3b8:	9804      	ldr	r0, [sp, #16]
 801a3ba:	fb02 f303 	mul.w	r3, r2, r3
 801a3be:	3304      	adds	r3, #4
 801a3c0:	7b22      	ldrb	r2, [r4, #12]
 801a3c2:	4419      	add	r1, r3
 801a3c4:	445a      	add	r2, fp
 801a3c6:	f841 2c04 	str.w	r2, [r1, #-4]
 801a3ca:	7b23      	ldrb	r3, [r4, #12]
 801a3cc:	9300      	str	r3, [sp, #0]
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	f7f6 f856 	bl	8010480 <ucdr_init_buffer_origin_offset>
 801a3d4:	81e5      	strh	r5, [r4, #14]
 801a3d6:	2001      	movs	r0, #1
 801a3d8:	e7a2      	b.n	801a320 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a3da:	4682      	mov	sl, r0
 801a3dc:	e6ca      	b.n	801a174 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801a3de:	bf00      	nop
 801a3e0:	08019fe9 	.word	0x08019fe9

0801a3e4 <uxr_prepare_next_reliable_buffer_to_send>:
 801a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3e6:	4604      	mov	r4, r0
 801a3e8:	460f      	mov	r7, r1
 801a3ea:	8a00      	ldrh	r0, [r0, #16]
 801a3ec:	2101      	movs	r1, #1
 801a3ee:	4616      	mov	r6, r2
 801a3f0:	461d      	mov	r5, r3
 801a3f2:	f000 fa29 	bl	801a848 <uxr_seq_num_add>
 801a3f6:	8028      	strh	r0, [r5, #0]
 801a3f8:	8922      	ldrh	r2, [r4, #8]
 801a3fa:	fbb0 f3f2 	udiv	r3, r0, r2
 801a3fe:	fb02 0c13 	mls	ip, r2, r3, r0
 801a402:	fa1f fc8c 	uxth.w	ip, ip
 801a406:	6863      	ldr	r3, [r4, #4]
 801a408:	fbb3 f3f2 	udiv	r3, r3, r2
 801a40c:	fb0c fc03 	mul.w	ip, ip, r3
 801a410:	6823      	ldr	r3, [r4, #0]
 801a412:	89e1      	ldrh	r1, [r4, #14]
 801a414:	f10c 0c04 	add.w	ip, ip, #4
 801a418:	4463      	add	r3, ip
 801a41a:	603b      	str	r3, [r7, #0]
 801a41c:	6823      	ldr	r3, [r4, #0]
 801a41e:	449c      	add	ip, r3
 801a420:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a424:	6033      	str	r3, [r6, #0]
 801a426:	f000 fa17 	bl	801a858 <uxr_seq_num_cmp>
 801a42a:	2800      	cmp	r0, #0
 801a42c:	dd01      	ble.n	801a432 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a42e:	2000      	movs	r0, #0
 801a430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a432:	7b23      	ldrb	r3, [r4, #12]
 801a434:	6832      	ldr	r2, [r6, #0]
 801a436:	429a      	cmp	r2, r3
 801a438:	d9f9      	bls.n	801a42e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a43a:	8a61      	ldrh	r1, [r4, #18]
 801a43c:	8a20      	ldrh	r0, [r4, #16]
 801a43e:	f000 fa07 	bl	801a850 <uxr_seq_num_sub>
 801a442:	8923      	ldrh	r3, [r4, #8]
 801a444:	4283      	cmp	r3, r0
 801a446:	d0f2      	beq.n	801a42e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a448:	8828      	ldrh	r0, [r5, #0]
 801a44a:	89e3      	ldrh	r3, [r4, #14]
 801a44c:	8220      	strh	r0, [r4, #16]
 801a44e:	4298      	cmp	r0, r3
 801a450:	d001      	beq.n	801a456 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a452:	2001      	movs	r0, #1
 801a454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a456:	2101      	movs	r1, #1
 801a458:	f000 f9f6 	bl	801a848 <uxr_seq_num_add>
 801a45c:	81e0      	strh	r0, [r4, #14]
 801a45e:	2001      	movs	r0, #1
 801a460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a462:	bf00      	nop

0801a464 <uxr_update_output_stream_heartbeat_timestamp>:
 801a464:	b570      	push	{r4, r5, r6, lr}
 801a466:	8a01      	ldrh	r1, [r0, #16]
 801a468:	4604      	mov	r4, r0
 801a46a:	8a40      	ldrh	r0, [r0, #18]
 801a46c:	4615      	mov	r5, r2
 801a46e:	461e      	mov	r6, r3
 801a470:	f000 f9f2 	bl	801a858 <uxr_seq_num_cmp>
 801a474:	2800      	cmp	r0, #0
 801a476:	db07      	blt.n	801a488 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a47c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a480:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a484:	2000      	movs	r0, #0
 801a486:	bd70      	pop	{r4, r5, r6, pc}
 801a488:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a48c:	b940      	cbnz	r0, 801a4a0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a48e:	2301      	movs	r3, #1
 801a490:	f884 3020 	strb.w	r3, [r4, #32]
 801a494:	3564      	adds	r5, #100	@ 0x64
 801a496:	f146 0600 	adc.w	r6, r6, #0
 801a49a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a49e:	bd70      	pop	{r4, r5, r6, pc}
 801a4a0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a4a4:	4295      	cmp	r5, r2
 801a4a6:	eb76 0303 	sbcs.w	r3, r6, r3
 801a4aa:	bfa5      	ittet	ge
 801a4ac:	3001      	addge	r0, #1
 801a4ae:	f884 0020 	strbge.w	r0, [r4, #32]
 801a4b2:	2000      	movlt	r0, #0
 801a4b4:	2001      	movge	r0, #1
 801a4b6:	e7ed      	b.n	801a494 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801a4b8 <uxr_begin_output_nack_buffer_it>:
 801a4b8:	8a40      	ldrh	r0, [r0, #18]
 801a4ba:	4770      	bx	lr

0801a4bc <uxr_next_reliable_nack_buffer_to_send>:
 801a4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4c0:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801a4c4:	b082      	sub	sp, #8
 801a4c6:	f1b8 0f00 	cmp.w	r8, #0
 801a4ca:	d011      	beq.n	801a4f0 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	8818      	ldrh	r0, [r3, #0]
 801a4d0:	460e      	mov	r6, r1
 801a4d2:	4617      	mov	r7, r2
 801a4d4:	461d      	mov	r5, r3
 801a4d6:	2101      	movs	r1, #1
 801a4d8:	f000 f9b6 	bl	801a848 <uxr_seq_num_add>
 801a4dc:	8028      	strh	r0, [r5, #0]
 801a4de:	8a21      	ldrh	r1, [r4, #16]
 801a4e0:	f000 f9ba 	bl	801a858 <uxr_seq_num_cmp>
 801a4e4:	2800      	cmp	r0, #0
 801a4e6:	dd07      	ble.n	801a4f8 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801a4e8:	f04f 0800 	mov.w	r8, #0
 801a4ec:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801a4f0:	4640      	mov	r0, r8
 801a4f2:	b002      	add	sp, #8
 801a4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4f8:	8921      	ldrh	r1, [r4, #8]
 801a4fa:	8828      	ldrh	r0, [r5, #0]
 801a4fc:	6823      	ldr	r3, [r4, #0]
 801a4fe:	fbb0 f2f1 	udiv	r2, r0, r1
 801a502:	fb01 0c12 	mls	ip, r1, r2, r0
 801a506:	fa1f f28c 	uxth.w	r2, ip
 801a50a:	9301      	str	r3, [sp, #4]
 801a50c:	6863      	ldr	r3, [r4, #4]
 801a50e:	fbb3 fcf1 	udiv	ip, r3, r1
 801a512:	9b01      	ldr	r3, [sp, #4]
 801a514:	fb02 fc0c 	mul.w	ip, r2, ip
 801a518:	f10c 0c04 	add.w	ip, ip, #4
 801a51c:	4463      	add	r3, ip
 801a51e:	6033      	str	r3, [r6, #0]
 801a520:	6823      	ldr	r3, [r4, #0]
 801a522:	4463      	add	r3, ip
 801a524:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a528:	603b      	str	r3, [r7, #0]
 801a52a:	7b22      	ldrb	r2, [r4, #12]
 801a52c:	429a      	cmp	r2, r3
 801a52e:	d0d2      	beq.n	801a4d6 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801a530:	4640      	mov	r0, r8
 801a532:	b002      	add	sp, #8
 801a534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a538 <uxr_process_acknack>:
 801a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a53a:	4604      	mov	r4, r0
 801a53c:	460e      	mov	r6, r1
 801a53e:	4610      	mov	r0, r2
 801a540:	2101      	movs	r1, #1
 801a542:	f000 f985 	bl	801a850 <uxr_seq_num_sub>
 801a546:	8a61      	ldrh	r1, [r4, #18]
 801a548:	f000 f982 	bl	801a850 <uxr_seq_num_sub>
 801a54c:	b1c0      	cbz	r0, 801a580 <uxr_process_acknack+0x48>
 801a54e:	4605      	mov	r5, r0
 801a550:	2700      	movs	r7, #0
 801a552:	2101      	movs	r1, #1
 801a554:	8a60      	ldrh	r0, [r4, #18]
 801a556:	f000 f977 	bl	801a848 <uxr_seq_num_add>
 801a55a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a55e:	fbb0 f1fc 	udiv	r1, r0, ip
 801a562:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a566:	fb0c 0111 	mls	r1, ip, r1, r0
 801a56a:	b289      	uxth	r1, r1
 801a56c:	3701      	adds	r7, #1
 801a56e:	fbb3 f3fc 	udiv	r3, r3, ip
 801a572:	fb01 f303 	mul.w	r3, r1, r3
 801a576:	42bd      	cmp	r5, r7
 801a578:	7b21      	ldrb	r1, [r4, #12]
 801a57a:	8260      	strh	r0, [r4, #18]
 801a57c:	50d1      	str	r1, [r2, r3]
 801a57e:	d1e8      	bne.n	801a552 <uxr_process_acknack+0x1a>
 801a580:	3e00      	subs	r6, #0
 801a582:	f04f 0300 	mov.w	r3, #0
 801a586:	bf18      	it	ne
 801a588:	2601      	movne	r6, #1
 801a58a:	f884 3020 	strb.w	r3, [r4, #32]
 801a58e:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a594 <uxr_is_output_up_to_date>:
 801a594:	8a01      	ldrh	r1, [r0, #16]
 801a596:	8a40      	ldrh	r0, [r0, #18]
 801a598:	b508      	push	{r3, lr}
 801a59a:	f000 f95d 	bl	801a858 <uxr_seq_num_cmp>
 801a59e:	fab0 f080 	clz	r0, r0
 801a5a2:	0940      	lsrs	r0, r0, #5
 801a5a4:	bd08      	pop	{r3, pc}
 801a5a6:	bf00      	nop

0801a5a8 <get_available_free_slots>:
 801a5a8:	8902      	ldrh	r2, [r0, #8]
 801a5aa:	b1da      	cbz	r2, 801a5e4 <get_available_free_slots+0x3c>
 801a5ac:	b530      	push	{r4, r5, lr}
 801a5ae:	2100      	movs	r1, #0
 801a5b0:	6843      	ldr	r3, [r0, #4]
 801a5b2:	6805      	ldr	r5, [r0, #0]
 801a5b4:	7b04      	ldrb	r4, [r0, #12]
 801a5b6:	fbb3 fef2 	udiv	lr, r3, r2
 801a5ba:	4608      	mov	r0, r1
 801a5bc:	460b      	mov	r3, r1
 801a5be:	fbb3 fcf2 	udiv	ip, r3, r2
 801a5c2:	fb02 331c 	mls	r3, r2, ip, r3
 801a5c6:	b29b      	uxth	r3, r3
 801a5c8:	fb0e f303 	mul.w	r3, lr, r3
 801a5cc:	3101      	adds	r1, #1
 801a5ce:	f855 c003 	ldr.w	ip, [r5, r3]
 801a5d2:	4564      	cmp	r4, ip
 801a5d4:	bf08      	it	eq
 801a5d6:	3001      	addeq	r0, #1
 801a5d8:	b28b      	uxth	r3, r1
 801a5da:	bf08      	it	eq
 801a5dc:	b280      	uxtheq	r0, r0
 801a5de:	4293      	cmp	r3, r2
 801a5e0:	d3ed      	bcc.n	801a5be <get_available_free_slots+0x16>
 801a5e2:	bd30      	pop	{r4, r5, pc}
 801a5e4:	4610      	mov	r0, r2
 801a5e6:	4770      	bx	lr

0801a5e8 <uxr_buffer_request_data>:
 801a5e8:	b530      	push	{r4, r5, lr}
 801a5ea:	b095      	sub	sp, #84	@ 0x54
 801a5ec:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801a5f0:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801a5f2:	9303      	str	r3, [sp, #12]
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	2d00      	cmp	r5, #0
 801a5f8:	bf14      	ite	ne
 801a5fa:	2101      	movne	r1, #1
 801a5fc:	4611      	moveq	r1, r2
 801a5fe:	4604      	mov	r4, r0
 801a600:	f88d 301c 	strb.w	r3, [sp, #28]
 801a604:	f88d 201d 	strb.w	r2, [sp, #29]
 801a608:	f88d 201e 	strb.w	r2, [sp, #30]
 801a60c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a610:	d021      	beq.n	801a656 <uxr_buffer_request_data+0x6e>
 801a612:	682a      	ldr	r2, [r5, #0]
 801a614:	686b      	ldr	r3, [r5, #4]
 801a616:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801a61a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801a61e:	2210      	movs	r2, #16
 801a620:	2308      	movs	r3, #8
 801a622:	2100      	movs	r1, #0
 801a624:	e9cd 3100 	strd	r3, r1, [sp]
 801a628:	4620      	mov	r0, r4
 801a62a:	9905      	ldr	r1, [sp, #20]
 801a62c:	ab0c      	add	r3, sp, #48	@ 0x30
 801a62e:	f7f9 f82d 	bl	801368c <uxr_prepare_stream_to_write_submessage>
 801a632:	b918      	cbnz	r0, 801a63c <uxr_buffer_request_data+0x54>
 801a634:	4604      	mov	r4, r0
 801a636:	4620      	mov	r0, r4
 801a638:	b015      	add	sp, #84	@ 0x54
 801a63a:	bd30      	pop	{r4, r5, pc}
 801a63c:	9904      	ldr	r1, [sp, #16]
 801a63e:	aa06      	add	r2, sp, #24
 801a640:	4620      	mov	r0, r4
 801a642:	f7f9 f959 	bl	80138f8 <uxr_init_base_object_request>
 801a646:	a906      	add	r1, sp, #24
 801a648:	4604      	mov	r4, r0
 801a64a:	a80c      	add	r0, sp, #48	@ 0x30
 801a64c:	f7fa fc54 	bl	8014ef8 <uxr_serialize_READ_DATA_Payload>
 801a650:	4620      	mov	r0, r4
 801a652:	b015      	add	sp, #84	@ 0x54
 801a654:	bd30      	pop	{r4, r5, pc}
 801a656:	2208      	movs	r2, #8
 801a658:	e7e2      	b.n	801a620 <uxr_buffer_request_data+0x38>
 801a65a:	bf00      	nop

0801a65c <uxr_buffer_cancel_data>:
 801a65c:	b510      	push	{r4, lr}
 801a65e:	b094      	sub	sp, #80	@ 0x50
 801a660:	2300      	movs	r3, #0
 801a662:	9202      	str	r2, [sp, #8]
 801a664:	9205      	str	r2, [sp, #20]
 801a666:	9301      	str	r3, [sp, #4]
 801a668:	2201      	movs	r2, #1
 801a66a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a66e:	f88d 301e 	strb.w	r3, [sp, #30]
 801a672:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801a676:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801a67a:	2308      	movs	r3, #8
 801a67c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801a680:	9300      	str	r3, [sp, #0]
 801a682:	2210      	movs	r2, #16
 801a684:	ab0c      	add	r3, sp, #48	@ 0x30
 801a686:	4604      	mov	r4, r0
 801a688:	9103      	str	r1, [sp, #12]
 801a68a:	f7f8 ffff 	bl	801368c <uxr_prepare_stream_to_write_submessage>
 801a68e:	b918      	cbnz	r0, 801a698 <uxr_buffer_cancel_data+0x3c>
 801a690:	4604      	mov	r4, r0
 801a692:	4620      	mov	r0, r4
 801a694:	b014      	add	sp, #80	@ 0x50
 801a696:	bd10      	pop	{r4, pc}
 801a698:	9905      	ldr	r1, [sp, #20]
 801a69a:	aa06      	add	r2, sp, #24
 801a69c:	4620      	mov	r0, r4
 801a69e:	f7f9 f92b 	bl	80138f8 <uxr_init_base_object_request>
 801a6a2:	a906      	add	r1, sp, #24
 801a6a4:	4604      	mov	r4, r0
 801a6a6:	a80c      	add	r0, sp, #48	@ 0x30
 801a6a8:	f7fa fc26 	bl	8014ef8 <uxr_serialize_READ_DATA_Payload>
 801a6ac:	4620      	mov	r0, r4
 801a6ae:	b014      	add	sp, #80	@ 0x50
 801a6b0:	bd10      	pop	{r4, pc}
 801a6b2:	bf00      	nop

0801a6b4 <read_submessage_format>:
 801a6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6b8:	b095      	sub	sp, #84	@ 0x54
 801a6ba:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801a6be:	b113      	cbz	r3, 801a6c6 <read_submessage_format+0x12>
 801a6c0:	b015      	add	sp, #84	@ 0x54
 801a6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6c6:	460c      	mov	r4, r1
 801a6c8:	4615      	mov	r5, r2
 801a6ca:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801a6ce:	4607      	mov	r7, r0
 801a6d0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801a6d2:	9004      	str	r0, [sp, #16]
 801a6d4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801a6d6:	9005      	str	r0, [sp, #20]
 801a6d8:	1a52      	subs	r2, r2, r1
 801a6da:	a80c      	add	r0, sp, #48	@ 0x30
 801a6dc:	4699      	mov	r9, r3
 801a6de:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801a6e2:	f7f5 fedf 	bl	80104a4 <ucdr_init_buffer>
 801a6e6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a6ea:	a80c      	add	r0, sp, #48	@ 0x30
 801a6ec:	f7f5 feae 	bl	801044c <ucdr_set_on_full_buffer_callback>
 801a6f0:	69e2      	ldr	r2, [r4, #28]
 801a6f2:	b19a      	cbz	r2, 801a71c <read_submessage_format+0x68>
 801a6f4:	f1b8 0f07 	cmp.w	r8, #7
 801a6f8:	f882 9014 	strb.w	r9, [r2, #20]
 801a6fc:	d040      	beq.n	801a780 <read_submessage_format+0xcc>
 801a6fe:	f1b8 0f08 	cmp.w	r8, #8
 801a702:	d02e      	beq.n	801a762 <read_submessage_format+0xae>
 801a704:	f1b8 0f06 	cmp.w	r8, #6
 801a708:	d011      	beq.n	801a72e <read_submessage_format+0x7a>
 801a70a:	2301      	movs	r3, #1
 801a70c:	7513      	strb	r3, [r2, #20]
 801a70e:	4629      	mov	r1, r5
 801a710:	4620      	mov	r0, r4
 801a712:	f7f5 ff17 	bl	8010544 <ucdr_advance_buffer>
 801a716:	b015      	add	sp, #84	@ 0x54
 801a718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a71c:	f1b8 0f07 	cmp.w	r8, #7
 801a720:	d02e      	beq.n	801a780 <read_submessage_format+0xcc>
 801a722:	f1b8 0f08 	cmp.w	r8, #8
 801a726:	d01c      	beq.n	801a762 <read_submessage_format+0xae>
 801a728:	f1b8 0f06 	cmp.w	r8, #6
 801a72c:	d1ef      	bne.n	801a70e <read_submessage_format+0x5a>
 801a72e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801a732:	f1b8 0f00 	cmp.w	r8, #0
 801a736:	d011      	beq.n	801a75c <read_submessage_format+0xa8>
 801a738:	ab0c      	add	r3, sp, #48	@ 0x30
 801a73a:	e9cd 3500 	strd	r3, r5, [sp]
 801a73e:	2306      	movs	r3, #6
 801a740:	f88d 3016 	strb.w	r3, [sp, #22]
 801a744:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a748:	9302      	str	r3, [sp, #8]
 801a74a:	4632      	mov	r2, r6
 801a74c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801a750:	4638      	mov	r0, r7
 801a752:	47c0      	blx	r8
 801a754:	2301      	movs	r3, #1
 801a756:	69e2      	ldr	r2, [r4, #28]
 801a758:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801a75c:	2a00      	cmp	r2, #0
 801a75e:	d1d4      	bne.n	801a70a <read_submessage_format+0x56>
 801a760:	e7d5      	b.n	801a70e <read_submessage_format+0x5a>
 801a762:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a766:	2b00      	cmp	r3, #0
 801a768:	d0f8      	beq.n	801a75c <read_submessage_format+0xa8>
 801a76a:	a906      	add	r1, sp, #24
 801a76c:	a80c      	add	r0, sp, #48	@ 0x30
 801a76e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801a772:	f7fa fc87 	bl	8015084 <uxr_deserialize_SampleIdentity>
 801a776:	b9a0      	cbnz	r0, 801a7a2 <read_submessage_format+0xee>
 801a778:	69e2      	ldr	r2, [r4, #28]
 801a77a:	2a00      	cmp	r2, #0
 801a77c:	d1c5      	bne.n	801a70a <read_submessage_format+0x56>
 801a77e:	e7c6      	b.n	801a70e <read_submessage_format+0x5a>
 801a780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a784:	b13b      	cbz	r3, 801a796 <read_submessage_format+0xe2>
 801a786:	a906      	add	r1, sp, #24
 801a788:	a80c      	add	r0, sp, #48	@ 0x30
 801a78a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801a78e:	f7fa f94d 	bl	8014a2c <uxr_deserialize_BaseObjectRequest>
 801a792:	bb60      	cbnz	r0, 801a7ee <read_submessage_format+0x13a>
 801a794:	69e2      	ldr	r2, [r4, #28]
 801a796:	68a3      	ldr	r3, [r4, #8]
 801a798:	442b      	add	r3, r5
 801a79a:	60a3      	str	r3, [r4, #8]
 801a79c:	2a00      	cmp	r2, #0
 801a79e:	d1b4      	bne.n	801a70a <read_submessage_format+0x56>
 801a7a0:	e7b5      	b.n	801a70e <read_submessage_format+0x5a>
 801a7a2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801a7a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a7a8:	1a52      	subs	r2, r2, r1
 801a7aa:	eba8 0803 	sub.w	r8, r8, r3
 801a7ae:	a80c      	add	r0, sp, #48	@ 0x30
 801a7b0:	f7f5 fe78 	bl	80104a4 <ucdr_init_buffer>
 801a7b4:	44a8      	add	r8, r5
 801a7b6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a7ba:	a80c      	add	r0, sp, #48	@ 0x30
 801a7bc:	f7f5 fe46 	bl	801044c <ucdr_set_on_full_buffer_callback>
 801a7c0:	fa1f f888 	uxth.w	r8, r8
 801a7c4:	ab0c      	add	r3, sp, #48	@ 0x30
 801a7c6:	9300      	str	r3, [sp, #0]
 801a7c8:	f8cd 8004 	str.w	r8, [sp, #4]
 801a7cc:	2108      	movs	r1, #8
 801a7ce:	f88d 1016 	strb.w	r1, [sp, #22]
 801a7d2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801a7d6:	9102      	str	r1, [sp, #8]
 801a7d8:	ab06      	add	r3, sp, #24
 801a7da:	4632      	mov	r2, r6
 801a7dc:	9905      	ldr	r1, [sp, #20]
 801a7de:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801a7e2:	4638      	mov	r0, r7
 801a7e4:	47b0      	blx	r6
 801a7e6:	2301      	movs	r3, #1
 801a7e8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801a7ec:	e7c4      	b.n	801a778 <read_submessage_format+0xc4>
 801a7ee:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801a7f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a7f4:	1a52      	subs	r2, r2, r1
 801a7f6:	a80c      	add	r0, sp, #48	@ 0x30
 801a7f8:	eba8 0803 	sub.w	r8, r8, r3
 801a7fc:	f7f5 fe52 	bl	80104a4 <ucdr_init_buffer>
 801a800:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a804:	a80c      	add	r0, sp, #48	@ 0x30
 801a806:	f7f5 fe21 	bl	801044c <ucdr_set_on_full_buffer_callback>
 801a80a:	ab0c      	add	r3, sp, #48	@ 0x30
 801a80c:	9300      	str	r3, [sp, #0]
 801a80e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801a812:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801a816:	44a8      	add	r8, r5
 801a818:	fa1f f888 	uxth.w	r8, r8
 801a81c:	f8cd 8004 	str.w	r8, [sp, #4]
 801a820:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801a824:	2107      	movs	r1, #7
 801a826:	f88d 1016 	strb.w	r1, [sp, #22]
 801a82a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801a82e:	9102      	str	r1, [sp, #8]
 801a830:	4632      	mov	r2, r6
 801a832:	b29b      	uxth	r3, r3
 801a834:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801a838:	9905      	ldr	r1, [sp, #20]
 801a83a:	4638      	mov	r0, r7
 801a83c:	47b0      	blx	r6
 801a83e:	2301      	movs	r3, #1
 801a840:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801a844:	e7a6      	b.n	801a794 <read_submessage_format+0xe0>
 801a846:	bf00      	nop

0801a848 <uxr_seq_num_add>:
 801a848:	4408      	add	r0, r1
 801a84a:	b280      	uxth	r0, r0
 801a84c:	4770      	bx	lr
 801a84e:	bf00      	nop

0801a850 <uxr_seq_num_sub>:
 801a850:	1a40      	subs	r0, r0, r1
 801a852:	b280      	uxth	r0, r0
 801a854:	4770      	bx	lr
 801a856:	bf00      	nop

0801a858 <uxr_seq_num_cmp>:
 801a858:	4288      	cmp	r0, r1
 801a85a:	d011      	beq.n	801a880 <uxr_seq_num_cmp+0x28>
 801a85c:	d309      	bcc.n	801a872 <uxr_seq_num_cmp+0x1a>
 801a85e:	4288      	cmp	r0, r1
 801a860:	d910      	bls.n	801a884 <uxr_seq_num_cmp+0x2c>
 801a862:	1a40      	subs	r0, r0, r1
 801a864:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801a868:	bfd4      	ite	le
 801a86a:	2001      	movle	r0, #1
 801a86c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a870:	4770      	bx	lr
 801a872:	1a0b      	subs	r3, r1, r0
 801a874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a878:	daf1      	bge.n	801a85e <uxr_seq_num_cmp+0x6>
 801a87a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a87e:	4770      	bx	lr
 801a880:	2000      	movs	r0, #0
 801a882:	4770      	bx	lr
 801a884:	2001      	movs	r0, #1
 801a886:	4770      	bx	lr

0801a888 <uxr_init_framing_io>:
 801a888:	2300      	movs	r3, #0
 801a88a:	7041      	strb	r1, [r0, #1]
 801a88c:	7003      	strb	r3, [r0, #0]
 801a88e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801a890:	4770      	bx	lr
 801a892:	bf00      	nop

0801a894 <uxr_write_framed_msg>:
 801a894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a898:	4617      	mov	r7, r2
 801a89a:	7842      	ldrb	r2, [r0, #1]
 801a89c:	b083      	sub	sp, #12
 801a89e:	460e      	mov	r6, r1
 801a8a0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801a8a4:	469a      	mov	sl, r3
 801a8a6:	2901      	cmp	r1, #1
 801a8a8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801a8ac:	4604      	mov	r4, r0
 801a8ae:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801a8b2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801a8b6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801a8ba:	f240 8137 	bls.w	801ab2c <uxr_write_framed_msg+0x298>
 801a8be:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801a8c2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801a8c6:	2901      	cmp	r1, #1
 801a8c8:	f04f 0202 	mov.w	r2, #2
 801a8cc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a8d0:	f240 808f 	bls.w	801a9f2 <uxr_write_framed_msg+0x15e>
 801a8d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a8d6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801a8da:	b2dd      	uxtb	r5, r3
 801a8dc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801a8e0:	2203      	movs	r2, #3
 801a8e2:	2901      	cmp	r1, #1
 801a8e4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a8e8:	f240 809a 	bls.w	801aa20 <uxr_write_framed_msg+0x18c>
 801a8ec:	18a1      	adds	r1, r4, r2
 801a8ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a8f0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801a8f4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a8f8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801a8fc:	3201      	adds	r2, #1
 801a8fe:	2801      	cmp	r0, #1
 801a900:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a904:	f240 80a0 	bls.w	801aa48 <uxr_write_framed_msg+0x1b4>
 801a908:	18a0      	adds	r0, r4, r2
 801a90a:	3201      	adds	r2, #1
 801a90c:	b2d2      	uxtb	r2, r2
 801a90e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801a912:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a916:	2b00      	cmp	r3, #0
 801a918:	f000 80a9 	beq.w	801aa6e <uxr_write_framed_msg+0x1da>
 801a91c:	f04f 0900 	mov.w	r9, #0
 801a920:	46c8      	mov	r8, r9
 801a922:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801a926:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801a92a:	2901      	cmp	r1, #1
 801a92c:	f240 80c3 	bls.w	801aab6 <uxr_write_framed_msg+0x222>
 801a930:	2a29      	cmp	r2, #41	@ 0x29
 801a932:	f200 809f 	bhi.w	801aa74 <uxr_write_framed_msg+0x1e0>
 801a936:	18a1      	adds	r1, r4, r2
 801a938:	3201      	adds	r2, #1
 801a93a:	b2d2      	uxtb	r2, r2
 801a93c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801a940:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a944:	ea89 0303 	eor.w	r3, r9, r3
 801a948:	498c      	ldr	r1, [pc, #560]	@ (801ab7c <uxr_write_framed_msg+0x2e8>)
 801a94a:	b2db      	uxtb	r3, r3
 801a94c:	f108 0801 	add.w	r8, r8, #1
 801a950:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801a954:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801a958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a95a:	4543      	cmp	r3, r8
 801a95c:	d8e1      	bhi.n	801a922 <uxr_write_framed_msg+0x8e>
 801a95e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a962:	fa5f f889 	uxtb.w	r8, r9
 801a966:	9301      	str	r3, [sp, #4]
 801a968:	f04f 0900 	mov.w	r9, #0
 801a96c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801a970:	fa5f f18a 	uxtb.w	r1, sl
 801a974:	2901      	cmp	r1, #1
 801a976:	d921      	bls.n	801a9bc <uxr_write_framed_msg+0x128>
 801a978:	2a29      	cmp	r2, #41	@ 0x29
 801a97a:	f240 80af 	bls.w	801aadc <uxr_write_framed_msg+0x248>
 801a97e:	2500      	movs	r5, #0
 801a980:	e000      	b.n	801a984 <uxr_write_framed_msg+0xf0>
 801a982:	b160      	cbz	r0, 801a99e <uxr_write_framed_msg+0x10a>
 801a984:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801a988:	1b52      	subs	r2, r2, r5
 801a98a:	465b      	mov	r3, fp
 801a98c:	4421      	add	r1, r4
 801a98e:	4638      	mov	r0, r7
 801a990:	47b0      	blx	r6
 801a992:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801a996:	4405      	add	r5, r0
 801a998:	4295      	cmp	r5, r2
 801a99a:	d3f2      	bcc.n	801a982 <uxr_write_framed_msg+0xee>
 801a99c:	d003      	beq.n	801a9a6 <uxr_write_framed_msg+0x112>
 801a99e:	2000      	movs	r0, #0
 801a9a0:	b003      	add	sp, #12
 801a9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9a6:	fa5f f18a 	uxtb.w	r1, sl
 801a9aa:	f04f 0300 	mov.w	r3, #0
 801a9ae:	2901      	cmp	r1, #1
 801a9b0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801a9b4:	f04f 0200 	mov.w	r2, #0
 801a9b8:	f200 8090 	bhi.w	801aadc <uxr_write_framed_msg+0x248>
 801a9bc:	1c51      	adds	r1, r2, #1
 801a9be:	b2c9      	uxtb	r1, r1
 801a9c0:	2929      	cmp	r1, #41	@ 0x29
 801a9c2:	d8dc      	bhi.n	801a97e <uxr_write_framed_msg+0xea>
 801a9c4:	18a5      	adds	r5, r4, r2
 801a9c6:	4421      	add	r1, r4
 801a9c8:	3202      	adds	r2, #2
 801a9ca:	f088 0820 	eor.w	r8, r8, #32
 801a9ce:	4648      	mov	r0, r9
 801a9d0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801a9d4:	b2d2      	uxtb	r2, r2
 801a9d6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801a9da:	f04f 0901 	mov.w	r9, #1
 801a9de:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801a9e2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801a9e6:	2800      	cmp	r0, #0
 801a9e8:	f040 8085 	bne.w	801aaf6 <uxr_write_framed_msg+0x262>
 801a9ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a9f0:	e7bc      	b.n	801a96c <uxr_write_framed_msg+0xd8>
 801a9f2:	4611      	mov	r1, r2
 801a9f4:	f04f 0c03 	mov.w	ip, #3
 801a9f8:	2204      	movs	r2, #4
 801a9fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a9fc:	4421      	add	r1, r4
 801a9fe:	b2dd      	uxtb	r5, r3
 801aa00:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801aa04:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 801aa08:	44a4      	add	ip, r4
 801aa0a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801aa0e:	f080 0020 	eor.w	r0, r0, #32
 801aa12:	2901      	cmp	r1, #1
 801aa14:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801aa18:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aa1c:	f63f af66 	bhi.w	801a8ec <uxr_write_framed_msg+0x58>
 801aa20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa22:	18a0      	adds	r0, r4, r2
 801aa24:	f085 0520 	eor.w	r5, r5, #32
 801aa28:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801aa2c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801aa30:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801aa34:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801aa38:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801aa3c:	3202      	adds	r2, #2
 801aa3e:	2801      	cmp	r0, #1
 801aa40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aa44:	f63f af60 	bhi.w	801a908 <uxr_write_framed_msg+0x74>
 801aa48:	1c50      	adds	r0, r2, #1
 801aa4a:	18a5      	adds	r5, r4, r2
 801aa4c:	fa54 f080 	uxtab	r0, r4, r0
 801aa50:	3202      	adds	r2, #2
 801aa52:	f081 0120 	eor.w	r1, r1, #32
 801aa56:	b2d2      	uxtb	r2, r2
 801aa58:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801aa5c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801aa60:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801aa64:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	f47f af57 	bne.w	801a91c <uxr_write_framed_msg+0x88>
 801aa6e:	9301      	str	r3, [sp, #4]
 801aa70:	4698      	mov	r8, r3
 801aa72:	e779      	b.n	801a968 <uxr_write_framed_msg+0xd4>
 801aa74:	2500      	movs	r5, #0
 801aa76:	e001      	b.n	801aa7c <uxr_write_framed_msg+0x1e8>
 801aa78:	2800      	cmp	r0, #0
 801aa7a:	d090      	beq.n	801a99e <uxr_write_framed_msg+0x10a>
 801aa7c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801aa80:	1b52      	subs	r2, r2, r5
 801aa82:	465b      	mov	r3, fp
 801aa84:	4421      	add	r1, r4
 801aa86:	4638      	mov	r0, r7
 801aa88:	47b0      	blx	r6
 801aa8a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801aa8e:	4405      	add	r5, r0
 801aa90:	4295      	cmp	r5, r2
 801aa92:	d3f1      	bcc.n	801aa78 <uxr_write_framed_msg+0x1e4>
 801aa94:	d183      	bne.n	801a99e <uxr_write_framed_msg+0x10a>
 801aa96:	f04f 0300 	mov.w	r3, #0
 801aa9a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801aa9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aaa0:	4543      	cmp	r3, r8
 801aaa2:	d964      	bls.n	801ab6e <uxr_write_framed_msg+0x2da>
 801aaa4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801aaa8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801aaac:	2901      	cmp	r1, #1
 801aaae:	f04f 0200 	mov.w	r2, #0
 801aab2:	f63f af3d 	bhi.w	801a930 <uxr_write_framed_msg+0x9c>
 801aab6:	1c51      	adds	r1, r2, #1
 801aab8:	b2c9      	uxtb	r1, r1
 801aaba:	2929      	cmp	r1, #41	@ 0x29
 801aabc:	d8da      	bhi.n	801aa74 <uxr_write_framed_msg+0x1e0>
 801aabe:	18a0      	adds	r0, r4, r2
 801aac0:	4421      	add	r1, r4
 801aac2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801aac6:	3202      	adds	r2, #2
 801aac8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801aacc:	b2d2      	uxtb	r2, r2
 801aace:	f083 0020 	eor.w	r0, r3, #32
 801aad2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801aad6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aada:	e733      	b.n	801a944 <uxr_write_framed_msg+0xb0>
 801aadc:	18a1      	adds	r1, r4, r2
 801aade:	3201      	adds	r2, #1
 801aae0:	4648      	mov	r0, r9
 801aae2:	b2d2      	uxtb	r2, r2
 801aae4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801aae8:	f04f 0901 	mov.w	r9, #1
 801aaec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aaf0:	2800      	cmp	r0, #0
 801aaf2:	f43f af7b 	beq.w	801a9ec <uxr_write_framed_msg+0x158>
 801aaf6:	2500      	movs	r5, #0
 801aaf8:	e002      	b.n	801ab00 <uxr_write_framed_msg+0x26c>
 801aafa:	2800      	cmp	r0, #0
 801aafc:	f43f af4f 	beq.w	801a99e <uxr_write_framed_msg+0x10a>
 801ab00:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801ab04:	1b52      	subs	r2, r2, r5
 801ab06:	465b      	mov	r3, fp
 801ab08:	4421      	add	r1, r4
 801ab0a:	4638      	mov	r0, r7
 801ab0c:	47b0      	blx	r6
 801ab0e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801ab12:	4405      	add	r5, r0
 801ab14:	4295      	cmp	r5, r2
 801ab16:	d3f0      	bcc.n	801aafa <uxr_write_framed_msg+0x266>
 801ab18:	f47f af41 	bne.w	801a99e <uxr_write_framed_msg+0x10a>
 801ab1c:	2300      	movs	r3, #0
 801ab1e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801ab22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ab24:	b298      	uxth	r0, r3
 801ab26:	b003      	add	sp, #12
 801ab28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab2c:	217d      	movs	r1, #125	@ 0x7d
 801ab2e:	f082 0220 	eor.w	r2, r2, #32
 801ab32:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801ab36:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801ab3a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801ab3e:	2901      	cmp	r1, #1
 801ab40:	f04f 0203 	mov.w	r2, #3
 801ab44:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ab48:	d804      	bhi.n	801ab54 <uxr_write_framed_msg+0x2c0>
 801ab4a:	4611      	mov	r1, r2
 801ab4c:	f04f 0c04 	mov.w	ip, #4
 801ab50:	2205      	movs	r2, #5
 801ab52:	e752      	b.n	801a9fa <uxr_write_framed_msg+0x166>
 801ab54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ab56:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801ab5a:	b2dd      	uxtb	r5, r3
 801ab5c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801ab60:	2204      	movs	r2, #4
 801ab62:	2901      	cmp	r1, #1
 801ab64:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ab68:	f63f aec0 	bhi.w	801a8ec <uxr_write_framed_msg+0x58>
 801ab6c:	e758      	b.n	801aa20 <uxr_write_framed_msg+0x18c>
 801ab6e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801ab72:	fa5f f889 	uxtb.w	r8, r9
 801ab76:	9301      	str	r3, [sp, #4]
 801ab78:	2200      	movs	r2, #0
 801ab7a:	e6f5      	b.n	801a968 <uxr_write_framed_msg+0xd4>
 801ab7c:	0801dd7c 	.word	0x0801dd7c

0801ab80 <uxr_framing_read_transport>:
 801ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab84:	4604      	mov	r4, r0
 801ab86:	b083      	sub	sp, #12
 801ab88:	461f      	mov	r7, r3
 801ab8a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801ab8e:	4689      	mov	r9, r1
 801ab90:	4692      	mov	sl, r2
 801ab92:	f7f9 f85f 	bl	8013c54 <uxr_millis>
 801ab96:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801ab9a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801ab9e:	42b3      	cmp	r3, r6
 801aba0:	4680      	mov	r8, r0
 801aba2:	d061      	beq.n	801ac68 <uxr_framing_read_transport+0xe8>
 801aba4:	d81c      	bhi.n	801abe0 <uxr_framing_read_transport+0x60>
 801aba6:	1e75      	subs	r5, r6, #1
 801aba8:	1aed      	subs	r5, r5, r3
 801abaa:	b2ed      	uxtb	r5, r5
 801abac:	2600      	movs	r6, #0
 801abae:	455d      	cmp	r5, fp
 801abb0:	d81f      	bhi.n	801abf2 <uxr_framing_read_transport+0x72>
 801abb2:	19ab      	adds	r3, r5, r6
 801abb4:	455b      	cmp	r3, fp
 801abb6:	bf84      	itt	hi
 801abb8:	ebab 0605 	subhi.w	r6, fp, r5
 801abbc:	b2f6      	uxtbhi	r6, r6
 801abbe:	b9ed      	cbnz	r5, 801abfc <uxr_framing_read_transport+0x7c>
 801abc0:	f04f 0b00 	mov.w	fp, #0
 801abc4:	f7f9 f846 	bl	8013c54 <uxr_millis>
 801abc8:	683b      	ldr	r3, [r7, #0]
 801abca:	eba0 0808 	sub.w	r8, r0, r8
 801abce:	eba3 0308 	sub.w	r3, r3, r8
 801abd2:	4658      	mov	r0, fp
 801abd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abd8:	603b      	str	r3, [r7, #0]
 801abda:	b003      	add	sp, #12
 801abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abe0:	2e00      	cmp	r6, #0
 801abe2:	d049      	beq.n	801ac78 <uxr_framing_read_transport+0xf8>
 801abe4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 801abe8:	b2ed      	uxtb	r5, r5
 801abea:	3e01      	subs	r6, #1
 801abec:	455d      	cmp	r5, fp
 801abee:	b2f6      	uxtb	r6, r6
 801abf0:	d9df      	bls.n	801abb2 <uxr_framing_read_transport+0x32>
 801abf2:	fa5f f58b 	uxtb.w	r5, fp
 801abf6:	2600      	movs	r6, #0
 801abf8:	2d00      	cmp	r5, #0
 801abfa:	d0e1      	beq.n	801abc0 <uxr_framing_read_transport+0x40>
 801abfc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ac00:	3102      	adds	r1, #2
 801ac02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ac04:	9300      	str	r3, [sp, #0]
 801ac06:	683b      	ldr	r3, [r7, #0]
 801ac08:	4421      	add	r1, r4
 801ac0a:	462a      	mov	r2, r5
 801ac0c:	4650      	mov	r0, sl
 801ac0e:	47c8      	blx	r9
 801ac10:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801ac14:	4a1a      	ldr	r2, [pc, #104]	@ (801ac80 <uxr_framing_read_transport+0x100>)
 801ac16:	4403      	add	r3, r0
 801ac18:	0859      	lsrs	r1, r3, #1
 801ac1a:	fba2 2101 	umull	r2, r1, r2, r1
 801ac1e:	0889      	lsrs	r1, r1, #2
 801ac20:	222a      	movs	r2, #42	@ 0x2a
 801ac22:	fb02 3111 	mls	r1, r2, r1, r3
 801ac26:	4683      	mov	fp, r0
 801ac28:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801ac2c:	2800      	cmp	r0, #0
 801ac2e:	d0c7      	beq.n	801abc0 <uxr_framing_read_transport+0x40>
 801ac30:	42a8      	cmp	r0, r5
 801ac32:	d1c7      	bne.n	801abc4 <uxr_framing_read_transport+0x44>
 801ac34:	2e00      	cmp	r6, #0
 801ac36:	d0c5      	beq.n	801abc4 <uxr_framing_read_transport+0x44>
 801ac38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ac3a:	9300      	str	r3, [sp, #0]
 801ac3c:	3102      	adds	r1, #2
 801ac3e:	4632      	mov	r2, r6
 801ac40:	4421      	add	r1, r4
 801ac42:	2300      	movs	r3, #0
 801ac44:	4650      	mov	r0, sl
 801ac46:	47c8      	blx	r9
 801ac48:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ac4c:	4a0c      	ldr	r2, [pc, #48]	@ (801ac80 <uxr_framing_read_transport+0x100>)
 801ac4e:	180b      	adds	r3, r1, r0
 801ac50:	0859      	lsrs	r1, r3, #1
 801ac52:	fba2 1201 	umull	r1, r2, r2, r1
 801ac56:	0892      	lsrs	r2, r2, #2
 801ac58:	212a      	movs	r1, #42	@ 0x2a
 801ac5a:	fb01 3312 	mls	r3, r1, r2, r3
 801ac5e:	eb00 0b05 	add.w	fp, r0, r5
 801ac62:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801ac66:	e7ad      	b.n	801abc4 <uxr_framing_read_transport+0x44>
 801ac68:	2600      	movs	r6, #0
 801ac6a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801ac6e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801ac70:	d9bf      	bls.n	801abf2 <uxr_framing_read_transport+0x72>
 801ac72:	2102      	movs	r1, #2
 801ac74:	2529      	movs	r5, #41	@ 0x29
 801ac76:	e7c4      	b.n	801ac02 <uxr_framing_read_transport+0x82>
 801ac78:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801ac7c:	b2ed      	uxtb	r5, r5
 801ac7e:	e796      	b.n	801abae <uxr_framing_read_transport+0x2e>
 801ac80:	30c30c31 	.word	0x30c30c31

0801ac84 <uxr_read_framed_msg>:
 801ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac88:	461e      	mov	r6, r3
 801ac8a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801ac8e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801ac92:	429d      	cmp	r5, r3
 801ac94:	b083      	sub	sp, #12
 801ac96:	4604      	mov	r4, r0
 801ac98:	4688      	mov	r8, r1
 801ac9a:	4691      	mov	r9, r2
 801ac9c:	f000 8188 	beq.w	801afb0 <uxr_read_framed_msg+0x32c>
 801aca0:	7823      	ldrb	r3, [r4, #0]
 801aca2:	4dc1      	ldr	r5, [pc, #772]	@ (801afa8 <uxr_read_framed_msg+0x324>)
 801aca4:	4fc1      	ldr	r7, [pc, #772]	@ (801afac <uxr_read_framed_msg+0x328>)
 801aca6:	2b07      	cmp	r3, #7
 801aca8:	d8fd      	bhi.n	801aca6 <uxr_read_framed_msg+0x22>
 801acaa:	e8df f013 	tbh	[pc, r3, lsl #1]
 801acae:	0115      	.short	0x0115
 801acb0:	00d600f6 	.word	0x00d600f6
 801acb4:	009000b9 	.word	0x009000b9
 801acb8:	0030004d 	.word	0x0030004d
 801acbc:	0008      	.short	0x0008
 801acbe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801acc2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801acc6:	4299      	cmp	r1, r3
 801acc8:	f000 814a 	beq.w	801af60 <uxr_read_framed_msg+0x2dc>
 801accc:	18e2      	adds	r2, r4, r3
 801acce:	7892      	ldrb	r2, [r2, #2]
 801acd0:	2a7d      	cmp	r2, #125	@ 0x7d
 801acd2:	f000 8199 	beq.w	801b008 <uxr_read_framed_msg+0x384>
 801acd6:	3301      	adds	r3, #1
 801acd8:	0858      	lsrs	r0, r3, #1
 801acda:	fba5 1000 	umull	r1, r0, r5, r0
 801acde:	0880      	lsrs	r0, r0, #2
 801ace0:	212a      	movs	r1, #42	@ 0x2a
 801ace2:	fb01 3310 	mls	r3, r1, r0, r3
 801ace6:	2a7e      	cmp	r2, #126	@ 0x7e
 801ace8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801acec:	f000 8252 	beq.w	801b194 <uxr_read_framed_msg+0x510>
 801acf0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801acf2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801acf4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801acf8:	b29b      	uxth	r3, r3
 801acfa:	2200      	movs	r2, #0
 801acfc:	4299      	cmp	r1, r3
 801acfe:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801ad00:	7022      	strb	r2, [r4, #0]
 801ad02:	f000 8179 	beq.w	801aff8 <uxr_read_framed_msg+0x374>
 801ad06:	2000      	movs	r0, #0
 801ad08:	b003      	add	sp, #12
 801ad0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad0e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ad12:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801ad16:	4299      	cmp	r1, r3
 801ad18:	f000 8131 	beq.w	801af7e <uxr_read_framed_msg+0x2fa>
 801ad1c:	18e2      	adds	r2, r4, r3
 801ad1e:	7890      	ldrb	r0, [r2, #2]
 801ad20:	287d      	cmp	r0, #125	@ 0x7d
 801ad22:	f000 8190 	beq.w	801b046 <uxr_read_framed_msg+0x3c2>
 801ad26:	3301      	adds	r3, #1
 801ad28:	085a      	lsrs	r2, r3, #1
 801ad2a:	fba5 1202 	umull	r1, r2, r5, r2
 801ad2e:	0892      	lsrs	r2, r2, #2
 801ad30:	212a      	movs	r1, #42	@ 0x2a
 801ad32:	fb01 3312 	mls	r3, r1, r2, r3
 801ad36:	287e      	cmp	r0, #126	@ 0x7e
 801ad38:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ad3c:	f000 821a 	beq.w	801b174 <uxr_read_framed_msg+0x4f0>
 801ad40:	2307      	movs	r3, #7
 801ad42:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801ad44:	7023      	strb	r3, [r4, #0]
 801ad46:	e7ae      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801ad48:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801ad4a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801ad4e:	459e      	cmp	lr, r3
 801ad50:	d938      	bls.n	801adc4 <uxr_read_framed_msg+0x140>
 801ad52:	ee07 8a90 	vmov	s15, r8
 801ad56:	212a      	movs	r1, #42	@ 0x2a
 801ad58:	e020      	b.n	801ad9c <uxr_read_framed_msg+0x118>
 801ad5a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801ad5e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801ad62:	f000 80d4 	beq.w	801af0e <uxr_read_framed_msg+0x28a>
 801ad66:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801ad6a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801ad6e:	f000 8219 	beq.w	801b1a4 <uxr_read_framed_msg+0x520>
 801ad72:	f806 c003 	strb.w	ip, [r6, r3]
 801ad76:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801ad7a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801ad7c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801ad80:	ea8a 000c 	eor.w	r0, sl, ip
 801ad84:	b2c0      	uxtb	r0, r0
 801ad86:	3301      	adds	r3, #1
 801ad88:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801ad8c:	b29b      	uxth	r3, r3
 801ad8e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801ad92:	4573      	cmp	r3, lr
 801ad94:	8663      	strh	r3, [r4, #50]	@ 0x32
 801ad96:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801ad98:	f080 8120 	bcs.w	801afdc <uxr_read_framed_msg+0x358>
 801ad9c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801ada0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801ada4:	f100 0c01 	add.w	ip, r0, #1
 801ada8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801adac:	fba5 8202 	umull	r8, r2, r5, r2
 801adb0:	0892      	lsrs	r2, r2, #2
 801adb2:	4582      	cmp	sl, r0
 801adb4:	eb04 0b00 	add.w	fp, r4, r0
 801adb8:	fb01 c212 	mls	r2, r1, r2, ip
 801adbc:	d1cd      	bne.n	801ad5a <uxr_read_framed_msg+0xd6>
 801adbe:	ee17 8a90 	vmov	r8, s15
 801adc2:	459e      	cmp	lr, r3
 801adc4:	f040 8111 	bne.w	801afea <uxr_read_framed_msg+0x366>
 801adc8:	2306      	movs	r3, #6
 801adca:	7023      	strb	r3, [r4, #0]
 801adcc:	e76b      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801adce:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801add2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801add6:	4298      	cmp	r0, r3
 801add8:	f000 80c2 	beq.w	801af60 <uxr_read_framed_msg+0x2dc>
 801addc:	18e2      	adds	r2, r4, r3
 801adde:	7891      	ldrb	r1, [r2, #2]
 801ade0:	297d      	cmp	r1, #125	@ 0x7d
 801ade2:	f000 814c 	beq.w	801b07e <uxr_read_framed_msg+0x3fa>
 801ade6:	3301      	adds	r3, #1
 801ade8:	085a      	lsrs	r2, r3, #1
 801adea:	fba5 0202 	umull	r0, r2, r5, r2
 801adee:	0892      	lsrs	r2, r2, #2
 801adf0:	202a      	movs	r0, #42	@ 0x2a
 801adf2:	fb00 3312 	mls	r3, r0, r2, r3
 801adf6:	297e      	cmp	r1, #126	@ 0x7e
 801adf8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801adfc:	f000 81ca 	beq.w	801b194 <uxr_read_framed_msg+0x510>
 801ae00:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801ae02:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801ae06:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ae08:	b29b      	uxth	r3, r3
 801ae0a:	2000      	movs	r0, #0
 801ae0c:	428b      	cmp	r3, r1
 801ae0e:	8623      	strh	r3, [r4, #48]	@ 0x30
 801ae10:	8660      	strh	r0, [r4, #50]	@ 0x32
 801ae12:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801ae14:	f240 80df 	bls.w	801afd6 <uxr_read_framed_msg+0x352>
 801ae18:	7020      	strb	r0, [r4, #0]
 801ae1a:	b003      	add	sp, #12
 801ae1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae20:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ae24:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801ae28:	4299      	cmp	r1, r3
 801ae2a:	f000 80a8 	beq.w	801af7e <uxr_read_framed_msg+0x2fa>
 801ae2e:	18e2      	adds	r2, r4, r3
 801ae30:	7890      	ldrb	r0, [r2, #2]
 801ae32:	287d      	cmp	r0, #125	@ 0x7d
 801ae34:	f000 8164 	beq.w	801b100 <uxr_read_framed_msg+0x47c>
 801ae38:	3301      	adds	r3, #1
 801ae3a:	085a      	lsrs	r2, r3, #1
 801ae3c:	fba5 1202 	umull	r1, r2, r5, r2
 801ae40:	0892      	lsrs	r2, r2, #2
 801ae42:	212a      	movs	r1, #42	@ 0x2a
 801ae44:	fb01 3312 	mls	r3, r1, r2, r3
 801ae48:	287e      	cmp	r0, #126	@ 0x7e
 801ae4a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ae4e:	f000 8191 	beq.w	801b174 <uxr_read_framed_msg+0x4f0>
 801ae52:	2304      	movs	r3, #4
 801ae54:	8620      	strh	r0, [r4, #48]	@ 0x30
 801ae56:	7023      	strb	r3, [r4, #0]
 801ae58:	e725      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801ae5a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801ae5e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801ae62:	4290      	cmp	r0, r2
 801ae64:	f000 80b3 	beq.w	801afce <uxr_read_framed_msg+0x34a>
 801ae68:	18a3      	adds	r3, r4, r2
 801ae6a:	7899      	ldrb	r1, [r3, #2]
 801ae6c:	297d      	cmp	r1, #125	@ 0x7d
 801ae6e:	f000 8164 	beq.w	801b13a <uxr_read_framed_msg+0x4b6>
 801ae72:	3201      	adds	r2, #1
 801ae74:	0850      	lsrs	r0, r2, #1
 801ae76:	fba5 3000 	umull	r3, r0, r5, r0
 801ae7a:	0880      	lsrs	r0, r0, #2
 801ae7c:	232a      	movs	r3, #42	@ 0x2a
 801ae7e:	fb03 2210 	mls	r2, r3, r0, r2
 801ae82:	297e      	cmp	r1, #126	@ 0x7e
 801ae84:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801ae88:	f000 8188 	beq.w	801b19c <uxr_read_framed_msg+0x518>
 801ae8c:	7863      	ldrb	r3, [r4, #1]
 801ae8e:	428b      	cmp	r3, r1
 801ae90:	bf0c      	ite	eq
 801ae92:	2303      	moveq	r3, #3
 801ae94:	2300      	movne	r3, #0
 801ae96:	7023      	strb	r3, [r4, #0]
 801ae98:	e705      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801ae9a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ae9e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801aea2:	2200      	movs	r2, #0
 801aea4:	4299      	cmp	r1, r3
 801aea6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801aeaa:	d06c      	beq.n	801af86 <uxr_read_framed_msg+0x302>
 801aeac:	18e2      	adds	r2, r4, r3
 801aeae:	7890      	ldrb	r0, [r2, #2]
 801aeb0:	287d      	cmp	r0, #125	@ 0x7d
 801aeb2:	f000 8101 	beq.w	801b0b8 <uxr_read_framed_msg+0x434>
 801aeb6:	3301      	adds	r3, #1
 801aeb8:	085a      	lsrs	r2, r3, #1
 801aeba:	fba5 1202 	umull	r1, r2, r5, r2
 801aebe:	0892      	lsrs	r2, r2, #2
 801aec0:	212a      	movs	r1, #42	@ 0x2a
 801aec2:	fb01 3312 	mls	r3, r1, r2, r3
 801aec6:	287e      	cmp	r0, #126	@ 0x7e
 801aec8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801aecc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801aed0:	d059      	beq.n	801af86 <uxr_read_framed_msg+0x302>
 801aed2:	2302      	movs	r3, #2
 801aed4:	7023      	strb	r3, [r4, #0]
 801aed6:	e6e6      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801aed8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801aedc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801aee0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801aee4:	1c51      	adds	r1, r2, #1
 801aee6:	084b      	lsrs	r3, r1, #1
 801aee8:	fba5 c303 	umull	ip, r3, r5, r3
 801aeec:	089b      	lsrs	r3, r3, #2
 801aeee:	fb0e 1313 	mls	r3, lr, r3, r1
 801aef2:	4592      	cmp	sl, r2
 801aef4:	eb04 0002 	add.w	r0, r4, r2
 801aef8:	b2da      	uxtb	r2, r3
 801aefa:	f43f af04 	beq.w	801ad06 <uxr_read_framed_msg+0x82>
 801aefe:	7883      	ldrb	r3, [r0, #2]
 801af00:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801af04:	2b7e      	cmp	r3, #126	@ 0x7e
 801af06:	d1ed      	bne.n	801aee4 <uxr_read_framed_msg+0x260>
 801af08:	2301      	movs	r3, #1
 801af0a:	7023      	strb	r3, [r4, #0]
 801af0c:	e6cb      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801af0e:	f100 0c01 	add.w	ip, r0, #1
 801af12:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801af16:	fba5 8202 	umull	r8, r2, r5, r2
 801af1a:	0892      	lsrs	r2, r2, #2
 801af1c:	fb01 c212 	mls	r2, r1, r2, ip
 801af20:	eb04 0c02 	add.w	ip, r4, r2
 801af24:	b2d2      	uxtb	r2, r2
 801af26:	4592      	cmp	sl, r2
 801af28:	f100 0002 	add.w	r0, r0, #2
 801af2c:	f43f af47 	beq.w	801adbe <uxr_read_framed_msg+0x13a>
 801af30:	0842      	lsrs	r2, r0, #1
 801af32:	f89c a002 	ldrb.w	sl, [ip, #2]
 801af36:	fba5 8202 	umull	r8, r2, r5, r2
 801af3a:	0892      	lsrs	r2, r2, #2
 801af3c:	fb01 0012 	mls	r0, r1, r2, r0
 801af40:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801af44:	f08a 0c20 	eor.w	ip, sl, #32
 801af48:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801af4c:	f47f af11 	bne.w	801ad72 <uxr_read_framed_msg+0xee>
 801af50:	459e      	cmp	lr, r3
 801af52:	ee17 8a90 	vmov	r8, s15
 801af56:	f43f af37 	beq.w	801adc8 <uxr_read_framed_msg+0x144>
 801af5a:	2301      	movs	r3, #1
 801af5c:	7023      	strb	r3, [r4, #0]
 801af5e:	e6a2      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801af60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801af62:	9300      	str	r3, [sp, #0]
 801af64:	2301      	movs	r3, #1
 801af66:	9301      	str	r3, [sp, #4]
 801af68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801af6a:	464a      	mov	r2, r9
 801af6c:	4641      	mov	r1, r8
 801af6e:	4620      	mov	r0, r4
 801af70:	f7ff fe06 	bl	801ab80 <uxr_framing_read_transport>
 801af74:	2800      	cmp	r0, #0
 801af76:	f43f aec6 	beq.w	801ad06 <uxr_read_framed_msg+0x82>
 801af7a:	7823      	ldrb	r3, [r4, #0]
 801af7c:	e693      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801af7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801af80:	9300      	str	r3, [sp, #0]
 801af82:	2302      	movs	r3, #2
 801af84:	e7ef      	b.n	801af66 <uxr_read_framed_msg+0x2e2>
 801af86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801af88:	9300      	str	r3, [sp, #0]
 801af8a:	2304      	movs	r3, #4
 801af8c:	9301      	str	r3, [sp, #4]
 801af8e:	464a      	mov	r2, r9
 801af90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801af92:	4641      	mov	r1, r8
 801af94:	4620      	mov	r0, r4
 801af96:	f7ff fdf3 	bl	801ab80 <uxr_framing_read_transport>
 801af9a:	2800      	cmp	r0, #0
 801af9c:	d1ed      	bne.n	801af7a <uxr_read_framed_msg+0x2f6>
 801af9e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801afa2:	2b7e      	cmp	r3, #126	@ 0x7e
 801afa4:	d0e9      	beq.n	801af7a <uxr_read_framed_msg+0x2f6>
 801afa6:	e6ae      	b.n	801ad06 <uxr_read_framed_msg+0x82>
 801afa8:	30c30c31 	.word	0x30c30c31
 801afac:	0801dd7c 	.word	0x0801dd7c
 801afb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801afb2:	9300      	str	r3, [sp, #0]
 801afb4:	2305      	movs	r3, #5
 801afb6:	9301      	str	r3, [sp, #4]
 801afb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801afba:	f7ff fde1 	bl	801ab80 <uxr_framing_read_transport>
 801afbe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801afc2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801afc6:	429a      	cmp	r2, r3
 801afc8:	f43f ae9d 	beq.w	801ad06 <uxr_read_framed_msg+0x82>
 801afcc:	e668      	b.n	801aca0 <uxr_read_framed_msg+0x1c>
 801afce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801afd0:	9300      	str	r3, [sp, #0]
 801afd2:	2303      	movs	r3, #3
 801afd4:	e7c7      	b.n	801af66 <uxr_read_framed_msg+0x2e2>
 801afd6:	2305      	movs	r3, #5
 801afd8:	7023      	strb	r3, [r4, #0]
 801afda:	e664      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801afdc:	ee17 8a90 	vmov	r8, s15
 801afe0:	f43f aef2 	beq.w	801adc8 <uxr_read_framed_msg+0x144>
 801afe4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801afe8:	d08e      	beq.n	801af08 <uxr_read_framed_msg+0x284>
 801afea:	ebae 0303 	sub.w	r3, lr, r3
 801afee:	3302      	adds	r3, #2
 801aff0:	9301      	str	r3, [sp, #4]
 801aff2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aff4:	9300      	str	r3, [sp, #0]
 801aff6:	e7b7      	b.n	801af68 <uxr_read_framed_msg+0x2e4>
 801aff8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801affa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801affe:	7013      	strb	r3, [r2, #0]
 801b000:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801b002:	b003      	add	sp, #12
 801b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b008:	f103 0c01 	add.w	ip, r3, #1
 801b00c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b010:	fba5 0202 	umull	r0, r2, r5, r2
 801b014:	0892      	lsrs	r2, r2, #2
 801b016:	202a      	movs	r0, #42	@ 0x2a
 801b018:	fb00 c212 	mls	r2, r0, r2, ip
 801b01c:	fa5f fc82 	uxtb.w	ip, r2
 801b020:	4561      	cmp	r1, ip
 801b022:	d09d      	beq.n	801af60 <uxr_read_framed_msg+0x2dc>
 801b024:	3302      	adds	r3, #2
 801b026:	4422      	add	r2, r4
 801b028:	0859      	lsrs	r1, r3, #1
 801b02a:	7892      	ldrb	r2, [r2, #2]
 801b02c:	fba5 c101 	umull	ip, r1, r5, r1
 801b030:	0889      	lsrs	r1, r1, #2
 801b032:	fb00 3311 	mls	r3, r0, r1, r3
 801b036:	2a7e      	cmp	r2, #126	@ 0x7e
 801b038:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b03c:	f000 80aa 	beq.w	801b194 <uxr_read_framed_msg+0x510>
 801b040:	f082 0220 	eor.w	r2, r2, #32
 801b044:	e654      	b.n	801acf0 <uxr_read_framed_msg+0x6c>
 801b046:	1c58      	adds	r0, r3, #1
 801b048:	0842      	lsrs	r2, r0, #1
 801b04a:	fba5 c202 	umull	ip, r2, r5, r2
 801b04e:	0892      	lsrs	r2, r2, #2
 801b050:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b054:	fb0c 0212 	mls	r2, ip, r2, r0
 801b058:	b2d0      	uxtb	r0, r2
 801b05a:	4281      	cmp	r1, r0
 801b05c:	d08f      	beq.n	801af7e <uxr_read_framed_msg+0x2fa>
 801b05e:	4422      	add	r2, r4
 801b060:	3302      	adds	r3, #2
 801b062:	7890      	ldrb	r0, [r2, #2]
 801b064:	085a      	lsrs	r2, r3, #1
 801b066:	fba5 1202 	umull	r1, r2, r5, r2
 801b06a:	0892      	lsrs	r2, r2, #2
 801b06c:	fb0c 3312 	mls	r3, ip, r2, r3
 801b070:	287e      	cmp	r0, #126	@ 0x7e
 801b072:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b076:	d07d      	beq.n	801b174 <uxr_read_framed_msg+0x4f0>
 801b078:	f080 0020 	eor.w	r0, r0, #32
 801b07c:	e660      	b.n	801ad40 <uxr_read_framed_msg+0xbc>
 801b07e:	1c59      	adds	r1, r3, #1
 801b080:	084a      	lsrs	r2, r1, #1
 801b082:	fba5 c202 	umull	ip, r2, r5, r2
 801b086:	0892      	lsrs	r2, r2, #2
 801b088:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b08c:	fb0c 1212 	mls	r2, ip, r2, r1
 801b090:	b2d1      	uxtb	r1, r2
 801b092:	4288      	cmp	r0, r1
 801b094:	f43f af64 	beq.w	801af60 <uxr_read_framed_msg+0x2dc>
 801b098:	4422      	add	r2, r4
 801b09a:	3302      	adds	r3, #2
 801b09c:	7891      	ldrb	r1, [r2, #2]
 801b09e:	085a      	lsrs	r2, r3, #1
 801b0a0:	fba5 0202 	umull	r0, r2, r5, r2
 801b0a4:	0892      	lsrs	r2, r2, #2
 801b0a6:	fb0c 3312 	mls	r3, ip, r2, r3
 801b0aa:	297e      	cmp	r1, #126	@ 0x7e
 801b0ac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b0b0:	d070      	beq.n	801b194 <uxr_read_framed_msg+0x510>
 801b0b2:	f081 0120 	eor.w	r1, r1, #32
 801b0b6:	e6a3      	b.n	801ae00 <uxr_read_framed_msg+0x17c>
 801b0b8:	f103 0c01 	add.w	ip, r3, #1
 801b0bc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b0c0:	fba5 0202 	umull	r0, r2, r5, r2
 801b0c4:	0892      	lsrs	r2, r2, #2
 801b0c6:	202a      	movs	r0, #42	@ 0x2a
 801b0c8:	fb00 c212 	mls	r2, r0, r2, ip
 801b0cc:	fa5f fc82 	uxtb.w	ip, r2
 801b0d0:	4561      	cmp	r1, ip
 801b0d2:	f43f af58 	beq.w	801af86 <uxr_read_framed_msg+0x302>
 801b0d6:	4422      	add	r2, r4
 801b0d8:	3302      	adds	r3, #2
 801b0da:	7891      	ldrb	r1, [r2, #2]
 801b0dc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801b0e0:	085a      	lsrs	r2, r3, #1
 801b0e2:	fba5 c202 	umull	ip, r2, r5, r2
 801b0e6:	0892      	lsrs	r2, r2, #2
 801b0e8:	fb00 3312 	mls	r3, r0, r2, r3
 801b0ec:	297e      	cmp	r1, #126	@ 0x7e
 801b0ee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b0f2:	f43f af48 	beq.w	801af86 <uxr_read_framed_msg+0x302>
 801b0f6:	f081 0120 	eor.w	r1, r1, #32
 801b0fa:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801b0fe:	e6e8      	b.n	801aed2 <uxr_read_framed_msg+0x24e>
 801b100:	1c58      	adds	r0, r3, #1
 801b102:	0842      	lsrs	r2, r0, #1
 801b104:	fba5 c202 	umull	ip, r2, r5, r2
 801b108:	0892      	lsrs	r2, r2, #2
 801b10a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b10e:	fb0c 0212 	mls	r2, ip, r2, r0
 801b112:	b2d0      	uxtb	r0, r2
 801b114:	4281      	cmp	r1, r0
 801b116:	f43f af32 	beq.w	801af7e <uxr_read_framed_msg+0x2fa>
 801b11a:	4422      	add	r2, r4
 801b11c:	3302      	adds	r3, #2
 801b11e:	7890      	ldrb	r0, [r2, #2]
 801b120:	085a      	lsrs	r2, r3, #1
 801b122:	fba5 1202 	umull	r1, r2, r5, r2
 801b126:	0892      	lsrs	r2, r2, #2
 801b128:	fb0c 3312 	mls	r3, ip, r2, r3
 801b12c:	287e      	cmp	r0, #126	@ 0x7e
 801b12e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b132:	d01f      	beq.n	801b174 <uxr_read_framed_msg+0x4f0>
 801b134:	f080 0020 	eor.w	r0, r0, #32
 801b138:	e68b      	b.n	801ae52 <uxr_read_framed_msg+0x1ce>
 801b13a:	1c51      	adds	r1, r2, #1
 801b13c:	084b      	lsrs	r3, r1, #1
 801b13e:	fba5 c303 	umull	ip, r3, r5, r3
 801b142:	089b      	lsrs	r3, r3, #2
 801b144:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b148:	fb0c 1313 	mls	r3, ip, r3, r1
 801b14c:	b2d9      	uxtb	r1, r3
 801b14e:	4288      	cmp	r0, r1
 801b150:	f43f af3d 	beq.w	801afce <uxr_read_framed_msg+0x34a>
 801b154:	3202      	adds	r2, #2
 801b156:	4423      	add	r3, r4
 801b158:	0850      	lsrs	r0, r2, #1
 801b15a:	789b      	ldrb	r3, [r3, #2]
 801b15c:	fba5 1000 	umull	r1, r0, r5, r0
 801b160:	0880      	lsrs	r0, r0, #2
 801b162:	fb0c 2210 	mls	r2, ip, r0, r2
 801b166:	2b7e      	cmp	r3, #126	@ 0x7e
 801b168:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b16c:	d016      	beq.n	801b19c <uxr_read_framed_msg+0x518>
 801b16e:	f083 0120 	eor.w	r1, r3, #32
 801b172:	e68b      	b.n	801ae8c <uxr_read_framed_msg+0x208>
 801b174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b176:	9300      	str	r3, [sp, #0]
 801b178:	2302      	movs	r3, #2
 801b17a:	9301      	str	r3, [sp, #4]
 801b17c:	464a      	mov	r2, r9
 801b17e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b180:	4641      	mov	r1, r8
 801b182:	4620      	mov	r0, r4
 801b184:	f7ff fcfc 	bl	801ab80 <uxr_framing_read_transport>
 801b188:	2800      	cmp	r0, #0
 801b18a:	f47f aef6 	bne.w	801af7a <uxr_read_framed_msg+0x2f6>
 801b18e:	2301      	movs	r3, #1
 801b190:	7023      	strb	r3, [r4, #0]
 801b192:	e588      	b.n	801aca6 <uxr_read_framed_msg+0x22>
 801b194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b196:	9300      	str	r3, [sp, #0]
 801b198:	2301      	movs	r3, #1
 801b19a:	e7ee      	b.n	801b17a <uxr_read_framed_msg+0x4f6>
 801b19c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b19e:	9300      	str	r3, [sp, #0]
 801b1a0:	2303      	movs	r3, #3
 801b1a2:	e7ea      	b.n	801b17a <uxr_read_framed_msg+0x4f6>
 801b1a4:	ee17 8a90 	vmov	r8, s15
 801b1a8:	e6ae      	b.n	801af08 <uxr_read_framed_msg+0x284>
 801b1aa:	bf00      	nop

0801b1ac <rcl_get_default_domain_id>:
 801b1ac:	b530      	push	{r4, r5, lr}
 801b1ae:	b083      	sub	sp, #12
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	9300      	str	r3, [sp, #0]
 801b1b4:	b1d0      	cbz	r0, 801b1ec <rcl_get_default_domain_id+0x40>
 801b1b6:	4604      	mov	r4, r0
 801b1b8:	4669      	mov	r1, sp
 801b1ba:	4815      	ldr	r0, [pc, #84]	@ (801b210 <rcl_get_default_domain_id+0x64>)
 801b1bc:	f7fc fc40 	bl	8017a40 <rcutils_get_env>
 801b1c0:	4602      	mov	r2, r0
 801b1c2:	b110      	cbz	r0, 801b1ca <rcl_get_default_domain_id+0x1e>
 801b1c4:	2001      	movs	r0, #1
 801b1c6:	b003      	add	sp, #12
 801b1c8:	bd30      	pop	{r4, r5, pc}
 801b1ca:	9b00      	ldr	r3, [sp, #0]
 801b1cc:	b18b      	cbz	r3, 801b1f2 <rcl_get_default_domain_id+0x46>
 801b1ce:	7818      	ldrb	r0, [r3, #0]
 801b1d0:	2800      	cmp	r0, #0
 801b1d2:	d0f8      	beq.n	801b1c6 <rcl_get_default_domain_id+0x1a>
 801b1d4:	a901      	add	r1, sp, #4
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	9201      	str	r2, [sp, #4]
 801b1da:	f000 fe6d 	bl	801beb8 <strtoul>
 801b1de:	4605      	mov	r5, r0
 801b1e0:	b150      	cbz	r0, 801b1f8 <rcl_get_default_domain_id+0x4c>
 801b1e2:	1c43      	adds	r3, r0, #1
 801b1e4:	d00d      	beq.n	801b202 <rcl_get_default_domain_id+0x56>
 801b1e6:	6025      	str	r5, [r4, #0]
 801b1e8:	2000      	movs	r0, #0
 801b1ea:	e7ec      	b.n	801b1c6 <rcl_get_default_domain_id+0x1a>
 801b1ec:	200b      	movs	r0, #11
 801b1ee:	b003      	add	sp, #12
 801b1f0:	bd30      	pop	{r4, r5, pc}
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	b003      	add	sp, #12
 801b1f6:	bd30      	pop	{r4, r5, pc}
 801b1f8:	9b01      	ldr	r3, [sp, #4]
 801b1fa:	781b      	ldrb	r3, [r3, #0]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d0f2      	beq.n	801b1e6 <rcl_get_default_domain_id+0x3a>
 801b200:	e7e0      	b.n	801b1c4 <rcl_get_default_domain_id+0x18>
 801b202:	f001 f8ab 	bl	801c35c <__errno>
 801b206:	6803      	ldr	r3, [r0, #0]
 801b208:	2b22      	cmp	r3, #34	@ 0x22
 801b20a:	d1ec      	bne.n	801b1e6 <rcl_get_default_domain_id+0x3a>
 801b20c:	e7da      	b.n	801b1c4 <rcl_get_default_domain_id+0x18>
 801b20e:	bf00      	nop
 801b210:	0801d950 	.word	0x0801d950

0801b214 <rcl_expand_topic_name>:
 801b214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b218:	b08b      	sub	sp, #44	@ 0x2c
 801b21a:	9306      	str	r3, [sp, #24]
 801b21c:	2800      	cmp	r0, #0
 801b21e:	f000 80ad 	beq.w	801b37c <rcl_expand_topic_name+0x168>
 801b222:	460e      	mov	r6, r1
 801b224:	2900      	cmp	r1, #0
 801b226:	f000 80a9 	beq.w	801b37c <rcl_expand_topic_name+0x168>
 801b22a:	4617      	mov	r7, r2
 801b22c:	2a00      	cmp	r2, #0
 801b22e:	f000 80a5 	beq.w	801b37c <rcl_expand_topic_name+0x168>
 801b232:	2b00      	cmp	r3, #0
 801b234:	f000 80a2 	beq.w	801b37c <rcl_expand_topic_name+0x168>
 801b238:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	f000 809e 	beq.w	801b37c <rcl_expand_topic_name+0x168>
 801b240:	2200      	movs	r2, #0
 801b242:	a909      	add	r1, sp, #36	@ 0x24
 801b244:	4680      	mov	r8, r0
 801b246:	f000 f9fb 	bl	801b640 <rcl_validate_topic_name>
 801b24a:	4604      	mov	r4, r0
 801b24c:	2800      	cmp	r0, #0
 801b24e:	f040 8096 	bne.w	801b37e <rcl_expand_topic_name+0x16a>
 801b252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b254:	2b00      	cmp	r3, #0
 801b256:	f040 809a 	bne.w	801b38e <rcl_expand_topic_name+0x17a>
 801b25a:	4602      	mov	r2, r0
 801b25c:	a909      	add	r1, sp, #36	@ 0x24
 801b25e:	4630      	mov	r0, r6
 801b260:	f7fd f83c 	bl	80182dc <rmw_validate_node_name>
 801b264:	2800      	cmp	r0, #0
 801b266:	f040 808e 	bne.w	801b386 <rcl_expand_topic_name+0x172>
 801b26a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b26c:	2a00      	cmp	r2, #0
 801b26e:	f040 8093 	bne.w	801b398 <rcl_expand_topic_name+0x184>
 801b272:	a909      	add	r1, sp, #36	@ 0x24
 801b274:	4638      	mov	r0, r7
 801b276:	f7fd f813 	bl	80182a0 <rmw_validate_namespace>
 801b27a:	2800      	cmp	r0, #0
 801b27c:	f040 8083 	bne.w	801b386 <rcl_expand_topic_name+0x172>
 801b280:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b282:	2c00      	cmp	r4, #0
 801b284:	f040 80ed 	bne.w	801b462 <rcl_expand_topic_name+0x24e>
 801b288:	217b      	movs	r1, #123	@ 0x7b
 801b28a:	4640      	mov	r0, r8
 801b28c:	f000 ffda 	bl	801c244 <strchr>
 801b290:	f898 3000 	ldrb.w	r3, [r8]
 801b294:	2b2f      	cmp	r3, #47	@ 0x2f
 801b296:	4605      	mov	r5, r0
 801b298:	f000 809e 	beq.w	801b3d8 <rcl_expand_topic_name+0x1c4>
 801b29c:	2b7e      	cmp	r3, #126	@ 0x7e
 801b29e:	f040 80a2 	bne.w	801b3e6 <rcl_expand_topic_name+0x1d2>
 801b2a2:	4638      	mov	r0, r7
 801b2a4:	f7e4 ff9e 	bl	80001e4 <strlen>
 801b2a8:	4a82      	ldr	r2, [pc, #520]	@ (801b4b4 <rcl_expand_topic_name+0x2a0>)
 801b2aa:	4b83      	ldr	r3, [pc, #524]	@ (801b4b8 <rcl_expand_topic_name+0x2a4>)
 801b2ac:	2801      	cmp	r0, #1
 801b2ae:	bf18      	it	ne
 801b2b0:	4613      	movne	r3, r2
 801b2b2:	9302      	str	r3, [sp, #8]
 801b2b4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b2b6:	9300      	str	r3, [sp, #0]
 801b2b8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801b2bc:	f108 0301 	add.w	r3, r8, #1
 801b2c0:	9305      	str	r3, [sp, #20]
 801b2c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b2c6:	9301      	str	r3, [sp, #4]
 801b2c8:	ab14      	add	r3, sp, #80	@ 0x50
 801b2ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b2cc:	f7fc fbd0 	bl	8017a70 <rcutils_format_string_limit>
 801b2d0:	4682      	mov	sl, r0
 801b2d2:	2800      	cmp	r0, #0
 801b2d4:	f000 80c7 	beq.w	801b466 <rcl_expand_topic_name+0x252>
 801b2d8:	2d00      	cmp	r5, #0
 801b2da:	f000 80a2 	beq.w	801b422 <rcl_expand_topic_name+0x20e>
 801b2de:	217b      	movs	r1, #123	@ 0x7b
 801b2e0:	f000 ffb0 	bl	801c244 <strchr>
 801b2e4:	46d1      	mov	r9, sl
 801b2e6:	4605      	mov	r5, r0
 801b2e8:	9407      	str	r4, [sp, #28]
 801b2ea:	46d3      	mov	fp, sl
 801b2ec:	464c      	mov	r4, r9
 801b2ee:	2d00      	cmp	r5, #0
 801b2f0:	f000 80be 	beq.w	801b470 <rcl_expand_topic_name+0x25c>
 801b2f4:	217d      	movs	r1, #125	@ 0x7d
 801b2f6:	4620      	mov	r0, r4
 801b2f8:	f000 ffa4 	bl	801c244 <strchr>
 801b2fc:	eba0 0905 	sub.w	r9, r0, r5
 801b300:	f109 0a01 	add.w	sl, r9, #1
 801b304:	486d      	ldr	r0, [pc, #436]	@ (801b4bc <rcl_expand_topic_name+0x2a8>)
 801b306:	4652      	mov	r2, sl
 801b308:	4629      	mov	r1, r5
 801b30a:	f000 ffa8 	bl	801c25e <strncmp>
 801b30e:	2800      	cmp	r0, #0
 801b310:	d067      	beq.n	801b3e2 <rcl_expand_topic_name+0x1ce>
 801b312:	486b      	ldr	r0, [pc, #428]	@ (801b4c0 <rcl_expand_topic_name+0x2ac>)
 801b314:	4652      	mov	r2, sl
 801b316:	4629      	mov	r1, r5
 801b318:	f000 ffa1 	bl	801c25e <strncmp>
 801b31c:	b130      	cbz	r0, 801b32c <rcl_expand_topic_name+0x118>
 801b31e:	4869      	ldr	r0, [pc, #420]	@ (801b4c4 <rcl_expand_topic_name+0x2b0>)
 801b320:	4652      	mov	r2, sl
 801b322:	4629      	mov	r1, r5
 801b324:	f000 ff9b 	bl	801c25e <strncmp>
 801b328:	2800      	cmp	r0, #0
 801b32a:	d137      	bne.n	801b39c <rcl_expand_topic_name+0x188>
 801b32c:	46b9      	mov	r9, r7
 801b32e:	ab16      	add	r3, sp, #88	@ 0x58
 801b330:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b334:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b338:	ab14      	add	r3, sp, #80	@ 0x50
 801b33a:	4628      	mov	r0, r5
 801b33c:	cb0c      	ldmia	r3, {r2, r3}
 801b33e:	4651      	mov	r1, sl
 801b340:	f7fc fcd2 	bl	8017ce8 <rcutils_strndup>
 801b344:	4605      	mov	r5, r0
 801b346:	2800      	cmp	r0, #0
 801b348:	f000 809c 	beq.w	801b484 <rcl_expand_topic_name+0x270>
 801b34c:	464a      	mov	r2, r9
 801b34e:	4620      	mov	r0, r4
 801b350:	ab14      	add	r3, sp, #80	@ 0x50
 801b352:	4629      	mov	r1, r5
 801b354:	f7fc fbc6 	bl	8017ae4 <rcutils_repl_str>
 801b358:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b35a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b35c:	4604      	mov	r4, r0
 801b35e:	4628      	mov	r0, r5
 801b360:	4798      	blx	r3
 801b362:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b364:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b366:	4658      	mov	r0, fp
 801b368:	4798      	blx	r3
 801b36a:	2c00      	cmp	r4, #0
 801b36c:	d07b      	beq.n	801b466 <rcl_expand_topic_name+0x252>
 801b36e:	217b      	movs	r1, #123	@ 0x7b
 801b370:	4620      	mov	r0, r4
 801b372:	f000 ff67 	bl	801c244 <strchr>
 801b376:	46a3      	mov	fp, r4
 801b378:	4605      	mov	r5, r0
 801b37a:	e7b8      	b.n	801b2ee <rcl_expand_topic_name+0xda>
 801b37c:	240b      	movs	r4, #11
 801b37e:	4620      	mov	r0, r4
 801b380:	b00b      	add	sp, #44	@ 0x2c
 801b382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b386:	f7f9 ff35 	bl	80151f4 <rcl_convert_rmw_ret_to_rcl_ret>
 801b38a:	4604      	mov	r4, r0
 801b38c:	e7f7      	b.n	801b37e <rcl_expand_topic_name+0x16a>
 801b38e:	2467      	movs	r4, #103	@ 0x67
 801b390:	4620      	mov	r0, r4
 801b392:	b00b      	add	sp, #44	@ 0x2c
 801b394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b398:	24c9      	movs	r4, #201	@ 0xc9
 801b39a:	e7f0      	b.n	801b37e <rcl_expand_topic_name+0x16a>
 801b39c:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801b3a0:	9806      	ldr	r0, [sp, #24]
 801b3a2:	1c69      	adds	r1, r5, #1
 801b3a4:	f7fc fdba 	bl	8017f1c <rcutils_string_map_getn>
 801b3a8:	4681      	mov	r9, r0
 801b3aa:	2800      	cmp	r0, #0
 801b3ac:	d1bf      	bne.n	801b32e <rcl_expand_topic_name+0x11a>
 801b3ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b3b0:	aa16      	add	r2, sp, #88	@ 0x58
 801b3b2:	6018      	str	r0, [r3, #0]
 801b3b4:	ca07      	ldmia	r2, {r0, r1, r2}
 801b3b6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b3ba:	ab14      	add	r3, sp, #80	@ 0x50
 801b3bc:	cb0c      	ldmia	r3, {r2, r3}
 801b3be:	4651      	mov	r1, sl
 801b3c0:	4628      	mov	r0, r5
 801b3c2:	f7fc fc91 	bl	8017ce8 <rcutils_strndup>
 801b3c6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b3c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b3ca:	4798      	blx	r3
 801b3cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b3ce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b3d0:	4658      	mov	r0, fp
 801b3d2:	2469      	movs	r4, #105	@ 0x69
 801b3d4:	4798      	blx	r3
 801b3d6:	e7d2      	b.n	801b37e <rcl_expand_topic_name+0x16a>
 801b3d8:	2800      	cmp	r0, #0
 801b3da:	d05b      	beq.n	801b494 <rcl_expand_topic_name+0x280>
 801b3dc:	46c1      	mov	r9, r8
 801b3de:	46a2      	mov	sl, r4
 801b3e0:	e782      	b.n	801b2e8 <rcl_expand_topic_name+0xd4>
 801b3e2:	46b1      	mov	r9, r6
 801b3e4:	e7a3      	b.n	801b32e <rcl_expand_topic_name+0x11a>
 801b3e6:	2800      	cmp	r0, #0
 801b3e8:	d1f8      	bne.n	801b3dc <rcl_expand_topic_name+0x1c8>
 801b3ea:	4638      	mov	r0, r7
 801b3ec:	f7e4 fefa 	bl	80001e4 <strlen>
 801b3f0:	4a35      	ldr	r2, [pc, #212]	@ (801b4c8 <rcl_expand_topic_name+0x2b4>)
 801b3f2:	4b36      	ldr	r3, [pc, #216]	@ (801b4cc <rcl_expand_topic_name+0x2b8>)
 801b3f4:	f8cd 8010 	str.w	r8, [sp, #16]
 801b3f8:	2801      	cmp	r0, #1
 801b3fa:	bf18      	it	ne
 801b3fc:	4613      	movne	r3, r2
 801b3fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b402:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801b406:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b408:	9703      	str	r7, [sp, #12]
 801b40a:	9200      	str	r2, [sp, #0]
 801b40c:	ab14      	add	r3, sp, #80	@ 0x50
 801b40e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b410:	f7fc fb2e 	bl	8017a70 <rcutils_format_string_limit>
 801b414:	4682      	mov	sl, r0
 801b416:	4653      	mov	r3, sl
 801b418:	b32b      	cbz	r3, 801b466 <rcl_expand_topic_name+0x252>
 801b41a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b41c:	f8c3 a000 	str.w	sl, [r3]
 801b420:	e7ad      	b.n	801b37e <rcl_expand_topic_name+0x16a>
 801b422:	f89a 3000 	ldrb.w	r3, [sl]
 801b426:	2b2f      	cmp	r3, #47	@ 0x2f
 801b428:	d0f7      	beq.n	801b41a <rcl_expand_topic_name+0x206>
 801b42a:	4638      	mov	r0, r7
 801b42c:	f7e4 feda 	bl	80001e4 <strlen>
 801b430:	4a25      	ldr	r2, [pc, #148]	@ (801b4c8 <rcl_expand_topic_name+0x2b4>)
 801b432:	4b26      	ldr	r3, [pc, #152]	@ (801b4cc <rcl_expand_topic_name+0x2b8>)
 801b434:	f8cd a010 	str.w	sl, [sp, #16]
 801b438:	2801      	cmp	r0, #1
 801b43a:	bf18      	it	ne
 801b43c:	4613      	movne	r3, r2
 801b43e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b442:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801b446:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b448:	9703      	str	r7, [sp, #12]
 801b44a:	9200      	str	r2, [sp, #0]
 801b44c:	ab14      	add	r3, sp, #80	@ 0x50
 801b44e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b450:	f7fc fb0e 	bl	8017a70 <rcutils_format_string_limit>
 801b454:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b456:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b458:	4605      	mov	r5, r0
 801b45a:	4650      	mov	r0, sl
 801b45c:	4798      	blx	r3
 801b45e:	46aa      	mov	sl, r5
 801b460:	e7d9      	b.n	801b416 <rcl_expand_topic_name+0x202>
 801b462:	24ca      	movs	r4, #202	@ 0xca
 801b464:	e78b      	b.n	801b37e <rcl_expand_topic_name+0x16a>
 801b466:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801b468:	2300      	movs	r3, #0
 801b46a:	6013      	str	r3, [r2, #0]
 801b46c:	240a      	movs	r4, #10
 801b46e:	e786      	b.n	801b37e <rcl_expand_topic_name+0x16a>
 801b470:	465b      	mov	r3, fp
 801b472:	9c07      	ldr	r4, [sp, #28]
 801b474:	46da      	mov	sl, fp
 801b476:	2b00      	cmp	r3, #0
 801b478:	d1d3      	bne.n	801b422 <rcl_expand_topic_name+0x20e>
 801b47a:	f898 3000 	ldrb.w	r3, [r8]
 801b47e:	2b2f      	cmp	r3, #47	@ 0x2f
 801b480:	d0cb      	beq.n	801b41a <rcl_expand_topic_name+0x206>
 801b482:	e7b2      	b.n	801b3ea <rcl_expand_topic_name+0x1d6>
 801b484:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801b488:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b48a:	6015      	str	r5, [r2, #0]
 801b48c:	4658      	mov	r0, fp
 801b48e:	4798      	blx	r3
 801b490:	240a      	movs	r4, #10
 801b492:	e774      	b.n	801b37e <rcl_expand_topic_name+0x16a>
 801b494:	ab17      	add	r3, sp, #92	@ 0x5c
 801b496:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b49a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b49e:	ab14      	add	r3, sp, #80	@ 0x50
 801b4a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b4a2:	4640      	mov	r0, r8
 801b4a4:	f7fc fbfe 	bl	8017ca4 <rcutils_strdup>
 801b4a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b4aa:	2800      	cmp	r0, #0
 801b4ac:	6018      	str	r0, [r3, #0]
 801b4ae:	bf08      	it	eq
 801b4b0:	240a      	moveq	r4, #10
 801b4b2:	e764      	b.n	801b37e <rcl_expand_topic_name+0x16a>
 801b4b4:	0801d960 	.word	0x0801d960
 801b4b8:	0801d420 	.word	0x0801d420
 801b4bc:	0801d968 	.word	0x0801d968
 801b4c0:	0801d970 	.word	0x0801d970
 801b4c4:	0801d978 	.word	0x0801d978
 801b4c8:	0801d614 	.word	0x0801d614
 801b4cc:	0801d430 	.word	0x0801d430

0801b4d0 <rcl_get_default_topic_name_substitutions>:
 801b4d0:	2800      	cmp	r0, #0
 801b4d2:	bf0c      	ite	eq
 801b4d4:	200b      	moveq	r0, #11
 801b4d6:	2000      	movne	r0, #0
 801b4d8:	4770      	bx	lr
 801b4da:	bf00      	nop

0801b4dc <rcl_get_zero_initialized_guard_condition>:
 801b4dc:	4a03      	ldr	r2, [pc, #12]	@ (801b4ec <rcl_get_zero_initialized_guard_condition+0x10>)
 801b4de:	4603      	mov	r3, r0
 801b4e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b4e4:	e883 0003 	stmia.w	r3, {r0, r1}
 801b4e8:	4618      	mov	r0, r3
 801b4ea:	4770      	bx	lr
 801b4ec:	0801df7c 	.word	0x0801df7c

0801b4f0 <rcl_guard_condition_init_from_rmw>:
 801b4f0:	b082      	sub	sp, #8
 801b4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4f6:	b086      	sub	sp, #24
 801b4f8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b4fc:	4604      	mov	r4, r0
 801b4fe:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b502:	460e      	mov	r6, r1
 801b504:	4617      	mov	r7, r2
 801b506:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b50a:	f10d 0e04 	add.w	lr, sp, #4
 801b50e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b512:	f8dc 3000 	ldr.w	r3, [ip]
 801b516:	f8ce 3000 	str.w	r3, [lr]
 801b51a:	a801      	add	r0, sp, #4
 801b51c:	f7f6 f884 	bl	8011628 <rcutils_allocator_is_valid>
 801b520:	b350      	cbz	r0, 801b578 <rcl_guard_condition_init_from_rmw+0x88>
 801b522:	b34c      	cbz	r4, 801b578 <rcl_guard_condition_init_from_rmw+0x88>
 801b524:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b528:	f1b8 0f00 	cmp.w	r8, #0
 801b52c:	d11e      	bne.n	801b56c <rcl_guard_condition_init_from_rmw+0x7c>
 801b52e:	b31f      	cbz	r7, 801b578 <rcl_guard_condition_init_from_rmw+0x88>
 801b530:	4638      	mov	r0, r7
 801b532:	f7f9 fe7d 	bl	8015230 <rcl_context_is_valid>
 801b536:	b328      	cbz	r0, 801b584 <rcl_guard_condition_init_from_rmw+0x94>
 801b538:	9b01      	ldr	r3, [sp, #4]
 801b53a:	9905      	ldr	r1, [sp, #20]
 801b53c:	201c      	movs	r0, #28
 801b53e:	4798      	blx	r3
 801b540:	4605      	mov	r5, r0
 801b542:	6060      	str	r0, [r4, #4]
 801b544:	b358      	cbz	r0, 801b59e <rcl_guard_condition_init_from_rmw+0xae>
 801b546:	b1fe      	cbz	r6, 801b588 <rcl_guard_condition_init_from_rmw+0x98>
 801b548:	6006      	str	r6, [r0, #0]
 801b54a:	f880 8004 	strb.w	r8, [r0, #4]
 801b54e:	ac01      	add	r4, sp, #4
 801b550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b552:	f105 0c08 	add.w	ip, r5, #8
 801b556:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b55a:	6823      	ldr	r3, [r4, #0]
 801b55c:	f8cc 3000 	str.w	r3, [ip]
 801b560:	2000      	movs	r0, #0
 801b562:	b006      	add	sp, #24
 801b564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b568:	b002      	add	sp, #8
 801b56a:	4770      	bx	lr
 801b56c:	2064      	movs	r0, #100	@ 0x64
 801b56e:	b006      	add	sp, #24
 801b570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b574:	b002      	add	sp, #8
 801b576:	4770      	bx	lr
 801b578:	200b      	movs	r0, #11
 801b57a:	b006      	add	sp, #24
 801b57c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b580:	b002      	add	sp, #8
 801b582:	4770      	bx	lr
 801b584:	2065      	movs	r0, #101	@ 0x65
 801b586:	e7f2      	b.n	801b56e <rcl_guard_condition_init_from_rmw+0x7e>
 801b588:	6838      	ldr	r0, [r7, #0]
 801b58a:	3028      	adds	r0, #40	@ 0x28
 801b58c:	f000 fa3a 	bl	801ba04 <rmw_create_guard_condition>
 801b590:	6028      	str	r0, [r5, #0]
 801b592:	6865      	ldr	r5, [r4, #4]
 801b594:	682e      	ldr	r6, [r5, #0]
 801b596:	b126      	cbz	r6, 801b5a2 <rcl_guard_condition_init_from_rmw+0xb2>
 801b598:	2301      	movs	r3, #1
 801b59a:	712b      	strb	r3, [r5, #4]
 801b59c:	e7d7      	b.n	801b54e <rcl_guard_condition_init_from_rmw+0x5e>
 801b59e:	200a      	movs	r0, #10
 801b5a0:	e7e5      	b.n	801b56e <rcl_guard_condition_init_from_rmw+0x7e>
 801b5a2:	4628      	mov	r0, r5
 801b5a4:	9b02      	ldr	r3, [sp, #8]
 801b5a6:	9905      	ldr	r1, [sp, #20]
 801b5a8:	4798      	blx	r3
 801b5aa:	6066      	str	r6, [r4, #4]
 801b5ac:	2001      	movs	r0, #1
 801b5ae:	e7de      	b.n	801b56e <rcl_guard_condition_init_from_rmw+0x7e>

0801b5b0 <rcl_guard_condition_fini>:
 801b5b0:	b570      	push	{r4, r5, r6, lr}
 801b5b2:	b082      	sub	sp, #8
 801b5b4:	b1f0      	cbz	r0, 801b5f4 <rcl_guard_condition_fini+0x44>
 801b5b6:	6843      	ldr	r3, [r0, #4]
 801b5b8:	4604      	mov	r4, r0
 801b5ba:	b163      	cbz	r3, 801b5d6 <rcl_guard_condition_fini+0x26>
 801b5bc:	6818      	ldr	r0, [r3, #0]
 801b5be:	68de      	ldr	r6, [r3, #12]
 801b5c0:	6999      	ldr	r1, [r3, #24]
 801b5c2:	b160      	cbz	r0, 801b5de <rcl_guard_condition_fini+0x2e>
 801b5c4:	791d      	ldrb	r5, [r3, #4]
 801b5c6:	b965      	cbnz	r5, 801b5e2 <rcl_guard_condition_fini+0x32>
 801b5c8:	4618      	mov	r0, r3
 801b5ca:	47b0      	blx	r6
 801b5cc:	2300      	movs	r3, #0
 801b5ce:	4628      	mov	r0, r5
 801b5d0:	6063      	str	r3, [r4, #4]
 801b5d2:	b002      	add	sp, #8
 801b5d4:	bd70      	pop	{r4, r5, r6, pc}
 801b5d6:	461d      	mov	r5, r3
 801b5d8:	4628      	mov	r0, r5
 801b5da:	b002      	add	sp, #8
 801b5dc:	bd70      	pop	{r4, r5, r6, pc}
 801b5de:	4605      	mov	r5, r0
 801b5e0:	e7f2      	b.n	801b5c8 <rcl_guard_condition_fini+0x18>
 801b5e2:	9101      	str	r1, [sp, #4]
 801b5e4:	f000 fa22 	bl	801ba2c <rmw_destroy_guard_condition>
 801b5e8:	1e05      	subs	r5, r0, #0
 801b5ea:	6863      	ldr	r3, [r4, #4]
 801b5ec:	9901      	ldr	r1, [sp, #4]
 801b5ee:	bf18      	it	ne
 801b5f0:	2501      	movne	r5, #1
 801b5f2:	e7e9      	b.n	801b5c8 <rcl_guard_condition_fini+0x18>
 801b5f4:	250b      	movs	r5, #11
 801b5f6:	4628      	mov	r0, r5
 801b5f8:	b002      	add	sp, #8
 801b5fa:	bd70      	pop	{r4, r5, r6, pc}

0801b5fc <rcl_guard_condition_get_default_options>:
 801b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5fe:	b087      	sub	sp, #28
 801b600:	4606      	mov	r6, r0
 801b602:	4668      	mov	r0, sp
 801b604:	f7f6 f802 	bl	801160c <rcutils_get_default_allocator>
 801b608:	4b09      	ldr	r3, [pc, #36]	@ (801b630 <rcl_guard_condition_get_default_options+0x34>)
 801b60a:	46ee      	mov	lr, sp
 801b60c:	469c      	mov	ip, r3
 801b60e:	461d      	mov	r5, r3
 801b610:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b614:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b61a:	4634      	mov	r4, r6
 801b61c:	f8de 7000 	ldr.w	r7, [lr]
 801b620:	f8cc 7000 	str.w	r7, [ip]
 801b624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b626:	4630      	mov	r0, r6
 801b628:	6027      	str	r7, [r4, #0]
 801b62a:	b007      	add	sp, #28
 801b62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b62e:	bf00      	nop
 801b630:	2000e704 	.word	0x2000e704

0801b634 <rcl_guard_condition_get_rmw_handle>:
 801b634:	b110      	cbz	r0, 801b63c <rcl_guard_condition_get_rmw_handle+0x8>
 801b636:	6840      	ldr	r0, [r0, #4]
 801b638:	b100      	cbz	r0, 801b63c <rcl_guard_condition_get_rmw_handle+0x8>
 801b63a:	6800      	ldr	r0, [r0, #0]
 801b63c:	4770      	bx	lr
 801b63e:	bf00      	nop

0801b640 <rcl_validate_topic_name>:
 801b640:	2800      	cmp	r0, #0
 801b642:	d07a      	beq.n	801b73a <rcl_validate_topic_name+0xfa>
 801b644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b648:	460e      	mov	r6, r1
 801b64a:	2900      	cmp	r1, #0
 801b64c:	d07c      	beq.n	801b748 <rcl_validate_topic_name+0x108>
 801b64e:	4617      	mov	r7, r2
 801b650:	4605      	mov	r5, r0
 801b652:	f7e4 fdc7 	bl	80001e4 <strlen>
 801b656:	b1b0      	cbz	r0, 801b686 <rcl_validate_topic_name+0x46>
 801b658:	f895 9000 	ldrb.w	r9, [r5]
 801b65c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801b7e0 <rcl_validate_topic_name+0x1a0>
 801b660:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801b664:	f013 0304 	ands.w	r3, r3, #4
 801b668:	d169      	bne.n	801b73e <rcl_validate_topic_name+0xfe>
 801b66a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801b66e:	f815 2008 	ldrb.w	r2, [r5, r8]
 801b672:	2a2f      	cmp	r2, #47	@ 0x2f
 801b674:	d10e      	bne.n	801b694 <rcl_validate_topic_name+0x54>
 801b676:	2202      	movs	r2, #2
 801b678:	6032      	str	r2, [r6, #0]
 801b67a:	b36f      	cbz	r7, 801b6d8 <rcl_validate_topic_name+0x98>
 801b67c:	f8c7 8000 	str.w	r8, [r7]
 801b680:	4618      	mov	r0, r3
 801b682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b686:	2301      	movs	r3, #1
 801b688:	6033      	str	r3, [r6, #0]
 801b68a:	b32f      	cbz	r7, 801b6d8 <rcl_validate_topic_name+0x98>
 801b68c:	2000      	movs	r0, #0
 801b68e:	6038      	str	r0, [r7, #0]
 801b690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b694:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801b698:	461c      	mov	r4, r3
 801b69a:	4619      	mov	r1, r3
 801b69c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b6a0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801b6a4:	f1be 0f09 	cmp.w	lr, #9
 801b6a8:	d919      	bls.n	801b6de <rcl_validate_topic_name+0x9e>
 801b6aa:	f022 0e20 	bic.w	lr, r2, #32
 801b6ae:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801b6b2:	f1be 0f19 	cmp.w	lr, #25
 801b6b6:	d912      	bls.n	801b6de <rcl_validate_topic_name+0x9e>
 801b6b8:	2a5f      	cmp	r2, #95	@ 0x5f
 801b6ba:	d019      	beq.n	801b6f0 <rcl_validate_topic_name+0xb0>
 801b6bc:	2a2f      	cmp	r2, #47	@ 0x2f
 801b6be:	d051      	beq.n	801b764 <rcl_validate_topic_name+0x124>
 801b6c0:	2a7e      	cmp	r2, #126	@ 0x7e
 801b6c2:	d048      	beq.n	801b756 <rcl_validate_topic_name+0x116>
 801b6c4:	2a7b      	cmp	r2, #123	@ 0x7b
 801b6c6:	d054      	beq.n	801b772 <rcl_validate_topic_name+0x132>
 801b6c8:	2a7d      	cmp	r2, #125	@ 0x7d
 801b6ca:	d161      	bne.n	801b790 <rcl_validate_topic_name+0x150>
 801b6cc:	2c00      	cmp	r4, #0
 801b6ce:	d155      	bne.n	801b77c <rcl_validate_topic_name+0x13c>
 801b6d0:	2305      	movs	r3, #5
 801b6d2:	6033      	str	r3, [r6, #0]
 801b6d4:	b107      	cbz	r7, 801b6d8 <rcl_validate_topic_name+0x98>
 801b6d6:	6039      	str	r1, [r7, #0]
 801b6d8:	2000      	movs	r0, #0
 801b6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b6de:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b6e2:	0752      	lsls	r2, r2, #29
 801b6e4:	d504      	bpl.n	801b6f0 <rcl_validate_topic_name+0xb0>
 801b6e6:	b11c      	cbz	r4, 801b6f0 <rcl_validate_topic_name+0xb0>
 801b6e8:	b111      	cbz	r1, 801b6f0 <rcl_validate_topic_name+0xb0>
 801b6ea:	1e4a      	subs	r2, r1, #1
 801b6ec:	429a      	cmp	r2, r3
 801b6ee:	d02d      	beq.n	801b74c <rcl_validate_topic_name+0x10c>
 801b6f0:	3101      	adds	r1, #1
 801b6f2:	4288      	cmp	r0, r1
 801b6f4:	d1d2      	bne.n	801b69c <rcl_validate_topic_name+0x5c>
 801b6f6:	2c00      	cmp	r4, #0
 801b6f8:	d145      	bne.n	801b786 <rcl_validate_topic_name+0x146>
 801b6fa:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801b6fe:	d04f      	beq.n	801b7a0 <rcl_validate_topic_name+0x160>
 801b700:	4620      	mov	r0, r4
 801b702:	2301      	movs	r3, #1
 801b704:	e006      	b.n	801b714 <rcl_validate_topic_name+0xd4>
 801b706:	428b      	cmp	r3, r1
 801b708:	f105 0501 	add.w	r5, r5, #1
 801b70c:	f103 0201 	add.w	r2, r3, #1
 801b710:	d236      	bcs.n	801b780 <rcl_validate_topic_name+0x140>
 801b712:	4613      	mov	r3, r2
 801b714:	4580      	cmp	r8, r0
 801b716:	f100 0001 	add.w	r0, r0, #1
 801b71a:	d0f4      	beq.n	801b706 <rcl_validate_topic_name+0xc6>
 801b71c:	782a      	ldrb	r2, [r5, #0]
 801b71e:	2a2f      	cmp	r2, #47	@ 0x2f
 801b720:	d1f1      	bne.n	801b706 <rcl_validate_topic_name+0xc6>
 801b722:	786a      	ldrb	r2, [r5, #1]
 801b724:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b728:	0754      	lsls	r4, r2, #29
 801b72a:	d5ec      	bpl.n	801b706 <rcl_validate_topic_name+0xc6>
 801b72c:	2204      	movs	r2, #4
 801b72e:	6032      	str	r2, [r6, #0]
 801b730:	2f00      	cmp	r7, #0
 801b732:	d0d1      	beq.n	801b6d8 <rcl_validate_topic_name+0x98>
 801b734:	603b      	str	r3, [r7, #0]
 801b736:	2000      	movs	r0, #0
 801b738:	e7aa      	b.n	801b690 <rcl_validate_topic_name+0x50>
 801b73a:	200b      	movs	r0, #11
 801b73c:	4770      	bx	lr
 801b73e:	2304      	movs	r3, #4
 801b740:	6033      	str	r3, [r6, #0]
 801b742:	2f00      	cmp	r7, #0
 801b744:	d1a2      	bne.n	801b68c <rcl_validate_topic_name+0x4c>
 801b746:	e7c7      	b.n	801b6d8 <rcl_validate_topic_name+0x98>
 801b748:	200b      	movs	r0, #11
 801b74a:	e7a1      	b.n	801b690 <rcl_validate_topic_name+0x50>
 801b74c:	2309      	movs	r3, #9
 801b74e:	6033      	str	r3, [r6, #0]
 801b750:	2f00      	cmp	r7, #0
 801b752:	d1c0      	bne.n	801b6d6 <rcl_validate_topic_name+0x96>
 801b754:	e7c0      	b.n	801b6d8 <rcl_validate_topic_name+0x98>
 801b756:	2900      	cmp	r1, #0
 801b758:	d0ca      	beq.n	801b6f0 <rcl_validate_topic_name+0xb0>
 801b75a:	2306      	movs	r3, #6
 801b75c:	6033      	str	r3, [r6, #0]
 801b75e:	2f00      	cmp	r7, #0
 801b760:	d1b9      	bne.n	801b6d6 <rcl_validate_topic_name+0x96>
 801b762:	e7b9      	b.n	801b6d8 <rcl_validate_topic_name+0x98>
 801b764:	2c00      	cmp	r4, #0
 801b766:	d0c3      	beq.n	801b6f0 <rcl_validate_topic_name+0xb0>
 801b768:	2308      	movs	r3, #8
 801b76a:	6033      	str	r3, [r6, #0]
 801b76c:	2f00      	cmp	r7, #0
 801b76e:	d1b2      	bne.n	801b6d6 <rcl_validate_topic_name+0x96>
 801b770:	e7b2      	b.n	801b6d8 <rcl_validate_topic_name+0x98>
 801b772:	2c00      	cmp	r4, #0
 801b774:	d1f8      	bne.n	801b768 <rcl_validate_topic_name+0x128>
 801b776:	460b      	mov	r3, r1
 801b778:	2401      	movs	r4, #1
 801b77a:	e7b9      	b.n	801b6f0 <rcl_validate_topic_name+0xb0>
 801b77c:	2400      	movs	r4, #0
 801b77e:	e7b7      	b.n	801b6f0 <rcl_validate_topic_name+0xb0>
 801b780:	2000      	movs	r0, #0
 801b782:	6030      	str	r0, [r6, #0]
 801b784:	e784      	b.n	801b690 <rcl_validate_topic_name+0x50>
 801b786:	2205      	movs	r2, #5
 801b788:	6032      	str	r2, [r6, #0]
 801b78a:	2f00      	cmp	r7, #0
 801b78c:	d1d2      	bne.n	801b734 <rcl_validate_topic_name+0xf4>
 801b78e:	e7a3      	b.n	801b6d8 <rcl_validate_topic_name+0x98>
 801b790:	2c00      	cmp	r4, #0
 801b792:	bf14      	ite	ne
 801b794:	2308      	movne	r3, #8
 801b796:	2303      	moveq	r3, #3
 801b798:	6033      	str	r3, [r6, #0]
 801b79a:	2f00      	cmp	r7, #0
 801b79c:	d19b      	bne.n	801b6d6 <rcl_validate_topic_name+0x96>
 801b79e:	e79b      	b.n	801b6d8 <rcl_validate_topic_name+0x98>
 801b7a0:	2301      	movs	r3, #1
 801b7a2:	e00a      	b.n	801b7ba <rcl_validate_topic_name+0x17a>
 801b7a4:	2c01      	cmp	r4, #1
 801b7a6:	d013      	beq.n	801b7d0 <rcl_validate_topic_name+0x190>
 801b7a8:	4299      	cmp	r1, r3
 801b7aa:	f104 0401 	add.w	r4, r4, #1
 801b7ae:	f105 0501 	add.w	r5, r5, #1
 801b7b2:	f103 0201 	add.w	r2, r3, #1
 801b7b6:	d9e3      	bls.n	801b780 <rcl_validate_topic_name+0x140>
 801b7b8:	4613      	mov	r3, r2
 801b7ba:	45a0      	cmp	r8, r4
 801b7bc:	d0f4      	beq.n	801b7a8 <rcl_validate_topic_name+0x168>
 801b7be:	782a      	ldrb	r2, [r5, #0]
 801b7c0:	2a2f      	cmp	r2, #47	@ 0x2f
 801b7c2:	d1ef      	bne.n	801b7a4 <rcl_validate_topic_name+0x164>
 801b7c4:	786a      	ldrb	r2, [r5, #1]
 801b7c6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b7ca:	0752      	lsls	r2, r2, #29
 801b7cc:	d5ec      	bpl.n	801b7a8 <rcl_validate_topic_name+0x168>
 801b7ce:	e7ad      	b.n	801b72c <rcl_validate_topic_name+0xec>
 801b7d0:	2307      	movs	r3, #7
 801b7d2:	6033      	str	r3, [r6, #0]
 801b7d4:	2f00      	cmp	r7, #0
 801b7d6:	f43f af7f 	beq.w	801b6d8 <rcl_validate_topic_name+0x98>
 801b7da:	603c      	str	r4, [r7, #0]
 801b7dc:	2000      	movs	r0, #0
 801b7de:	e757      	b.n	801b690 <rcl_validate_topic_name+0x50>
 801b7e0:	0801e063 	.word	0x0801e063

0801b7e4 <rcutils_string_array_fini>:
 801b7e4:	b320      	cbz	r0, 801b830 <rcutils_string_array_fini+0x4c>
 801b7e6:	b570      	push	{r4, r5, r6, lr}
 801b7e8:	4604      	mov	r4, r0
 801b7ea:	6840      	ldr	r0, [r0, #4]
 801b7ec:	b1d8      	cbz	r0, 801b826 <rcutils_string_array_fini+0x42>
 801b7ee:	f104 0008 	add.w	r0, r4, #8
 801b7f2:	f7f5 ff19 	bl	8011628 <rcutils_allocator_is_valid>
 801b7f6:	b1b8      	cbz	r0, 801b828 <rcutils_string_array_fini+0x44>
 801b7f8:	6823      	ldr	r3, [r4, #0]
 801b7fa:	b1bb      	cbz	r3, 801b82c <rcutils_string_array_fini+0x48>
 801b7fc:	2500      	movs	r5, #0
 801b7fe:	6860      	ldr	r0, [r4, #4]
 801b800:	462e      	mov	r6, r5
 801b802:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b806:	68e3      	ldr	r3, [r4, #12]
 801b808:	69a1      	ldr	r1, [r4, #24]
 801b80a:	4798      	blx	r3
 801b80c:	e9d4 3000 	ldrd	r3, r0, [r4]
 801b810:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801b814:	3501      	adds	r5, #1
 801b816:	429d      	cmp	r5, r3
 801b818:	d3f3      	bcc.n	801b802 <rcutils_string_array_fini+0x1e>
 801b81a:	68e3      	ldr	r3, [r4, #12]
 801b81c:	69a1      	ldr	r1, [r4, #24]
 801b81e:	4798      	blx	r3
 801b820:	2000      	movs	r0, #0
 801b822:	e9c4 0000 	strd	r0, r0, [r4]
 801b826:	bd70      	pop	{r4, r5, r6, pc}
 801b828:	200b      	movs	r0, #11
 801b82a:	bd70      	pop	{r4, r5, r6, pc}
 801b82c:	6860      	ldr	r0, [r4, #4]
 801b82e:	e7f4      	b.n	801b81a <rcutils_string_array_fini+0x36>
 801b830:	200b      	movs	r0, #11
 801b832:	4770      	bx	lr

0801b834 <on_status>:
 801b834:	b082      	sub	sp, #8
 801b836:	b002      	add	sp, #8
 801b838:	4770      	bx	lr
 801b83a:	bf00      	nop

0801b83c <on_topic>:
 801b83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b840:	4a22      	ldr	r2, [pc, #136]	@ (801b8cc <on_topic+0x90>)
 801b842:	b094      	sub	sp, #80	@ 0x50
 801b844:	6812      	ldr	r2, [r2, #0]
 801b846:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801b848:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b84c:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801b850:	b3c2      	cbz	r2, 801b8c4 <on_topic+0x88>
 801b852:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801b856:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801b85a:	e001      	b.n	801b860 <on_topic+0x24>
 801b85c:	6852      	ldr	r2, [r2, #4]
 801b85e:	b38a      	cbz	r2, 801b8c4 <on_topic+0x88>
 801b860:	6894      	ldr	r4, [r2, #8]
 801b862:	8aa3      	ldrh	r3, [r4, #20]
 801b864:	428b      	cmp	r3, r1
 801b866:	d1f9      	bne.n	801b85c <on_topic+0x20>
 801b868:	7da3      	ldrb	r3, [r4, #22]
 801b86a:	4283      	cmp	r3, r0
 801b86c:	d1f6      	bne.n	801b85c <on_topic+0x20>
 801b86e:	2248      	movs	r2, #72	@ 0x48
 801b870:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b874:	4668      	mov	r0, sp
 801b876:	f000 fda6 	bl	801c3c6 <memcpy>
 801b87a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801b87e:	cb0c      	ldmia	r3, {r2, r3}
 801b880:	4620      	mov	r0, r4
 801b882:	f7f6 fb01 	bl	8011e88 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b886:	4607      	mov	r7, r0
 801b888:	b1e0      	cbz	r0, 801b8c4 <on_topic+0x88>
 801b88a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801b88e:	4632      	mov	r2, r6
 801b890:	4628      	mov	r0, r5
 801b892:	f108 0110 	add.w	r1, r8, #16
 801b896:	f7fd ffc9 	bl	801982c <ucdr_deserialize_array_uint8_t>
 801b89a:	b930      	cbnz	r0, 801b8aa <on_topic+0x6e>
 801b89c:	480c      	ldr	r0, [pc, #48]	@ (801b8d0 <on_topic+0x94>)
 801b89e:	4639      	mov	r1, r7
 801b8a0:	b014      	add	sp, #80	@ 0x50
 801b8a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8a6:	f7fc bd87 	b.w	80183b8 <put_memory>
 801b8aa:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801b8ae:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801b8b2:	f7fd fed9 	bl	8019668 <rmw_uros_epoch_nanos>
 801b8b6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801b8ba:	2305      	movs	r3, #5
 801b8bc:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b8c0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801b8c4:	b014      	add	sp, #80	@ 0x50
 801b8c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8ca:	bf00      	nop
 801b8cc:	2000e564 	.word	0x2000e564
 801b8d0:	2000e554 	.word	0x2000e554

0801b8d4 <on_request>:
 801b8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8d8:	4823      	ldr	r0, [pc, #140]	@ (801b968 <on_request+0x94>)
 801b8da:	b094      	sub	sp, #80	@ 0x50
 801b8dc:	6800      	ldr	r0, [r0, #0]
 801b8de:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b8e0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b8e4:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b8e6:	2800      	cmp	r0, #0
 801b8e8:	d03b      	beq.n	801b962 <on_request+0x8e>
 801b8ea:	461d      	mov	r5, r3
 801b8ec:	e001      	b.n	801b8f2 <on_request+0x1e>
 801b8ee:	6840      	ldr	r0, [r0, #4]
 801b8f0:	b3b8      	cbz	r0, 801b962 <on_request+0x8e>
 801b8f2:	6884      	ldr	r4, [r0, #8]
 801b8f4:	8b21      	ldrh	r1, [r4, #24]
 801b8f6:	4291      	cmp	r1, r2
 801b8f8:	d1f9      	bne.n	801b8ee <on_request+0x1a>
 801b8fa:	2248      	movs	r2, #72	@ 0x48
 801b8fc:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b900:	4668      	mov	r0, sp
 801b902:	f000 fd60 	bl	801c3c6 <memcpy>
 801b906:	f104 0320 	add.w	r3, r4, #32
 801b90a:	cb0c      	ldmia	r3, {r2, r3}
 801b90c:	4620      	mov	r0, r4
 801b90e:	f7f6 fabb 	bl	8011e88 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b912:	4680      	mov	r8, r0
 801b914:	b328      	cbz	r0, 801b962 <on_request+0x8e>
 801b916:	4638      	mov	r0, r7
 801b918:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b91c:	4632      	mov	r2, r6
 801b91e:	f107 0110 	add.w	r1, r7, #16
 801b922:	f7fd ff83 	bl	801982c <ucdr_deserialize_array_uint8_t>
 801b926:	b930      	cbnz	r0, 801b936 <on_request+0x62>
 801b928:	4810      	ldr	r0, [pc, #64]	@ (801b96c <on_request+0x98>)
 801b92a:	4641      	mov	r1, r8
 801b92c:	b014      	add	sp, #80	@ 0x50
 801b92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b932:	f7fc bd41 	b.w	80183b8 <put_memory>
 801b936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b938:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801b93c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b940:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b944:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b948:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b94c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b950:	f7fd fe8a 	bl	8019668 <rmw_uros_epoch_nanos>
 801b954:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b958:	2303      	movs	r3, #3
 801b95a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b95e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b962:	b014      	add	sp, #80	@ 0x50
 801b964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b968:	2000e534 	.word	0x2000e534
 801b96c:	2000e554 	.word	0x2000e554

0801b970 <on_reply>:
 801b970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b974:	4821      	ldr	r0, [pc, #132]	@ (801b9fc <on_reply+0x8c>)
 801b976:	b094      	sub	sp, #80	@ 0x50
 801b978:	6800      	ldr	r0, [r0, #0]
 801b97a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b97c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b980:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b982:	b3b8      	cbz	r0, 801b9f4 <on_reply+0x84>
 801b984:	461d      	mov	r5, r3
 801b986:	e001      	b.n	801b98c <on_reply+0x1c>
 801b988:	6840      	ldr	r0, [r0, #4]
 801b98a:	b398      	cbz	r0, 801b9f4 <on_reply+0x84>
 801b98c:	6884      	ldr	r4, [r0, #8]
 801b98e:	8b21      	ldrh	r1, [r4, #24]
 801b990:	4291      	cmp	r1, r2
 801b992:	d1f9      	bne.n	801b988 <on_reply+0x18>
 801b994:	2248      	movs	r2, #72	@ 0x48
 801b996:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b99a:	4668      	mov	r0, sp
 801b99c:	f000 fd13 	bl	801c3c6 <memcpy>
 801b9a0:	f104 0320 	add.w	r3, r4, #32
 801b9a4:	cb0c      	ldmia	r3, {r2, r3}
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f7f6 fa6e 	bl	8011e88 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b9ac:	4680      	mov	r8, r0
 801b9ae:	b308      	cbz	r0, 801b9f4 <on_reply+0x84>
 801b9b0:	4638      	mov	r0, r7
 801b9b2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b9b6:	4632      	mov	r2, r6
 801b9b8:	f107 0110 	add.w	r1, r7, #16
 801b9bc:	f7fd ff36 	bl	801982c <ucdr_deserialize_array_uint8_t>
 801b9c0:	b930      	cbnz	r0, 801b9d0 <on_reply+0x60>
 801b9c2:	480f      	ldr	r0, [pc, #60]	@ (801ba00 <on_reply+0x90>)
 801b9c4:	4641      	mov	r1, r8
 801b9c6:	b014      	add	sp, #80	@ 0x50
 801b9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b9cc:	f7fc bcf4 	b.w	80183b8 <put_memory>
 801b9d0:	2200      	movs	r2, #0
 801b9d2:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801b9d6:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b9da:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b9de:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801b9e2:	f7fd fe41 	bl	8019668 <rmw_uros_epoch_nanos>
 801b9e6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b9ea:	2304      	movs	r3, #4
 801b9ec:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b9f0:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b9f4:	b014      	add	sp, #80	@ 0x50
 801b9f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9fa:	bf00      	nop
 801b9fc:	20009c48 	.word	0x20009c48
 801ba00:	2000e554 	.word	0x2000e554

0801ba04 <rmw_create_guard_condition>:
 801ba04:	b538      	push	{r3, r4, r5, lr}
 801ba06:	4605      	mov	r5, r0
 801ba08:	4807      	ldr	r0, [pc, #28]	@ (801ba28 <rmw_create_guard_condition+0x24>)
 801ba0a:	f7fc fcc5 	bl	8018398 <get_memory>
 801ba0e:	b148      	cbz	r0, 801ba24 <rmw_create_guard_condition+0x20>
 801ba10:	6884      	ldr	r4, [r0, #8]
 801ba12:	2300      	movs	r3, #0
 801ba14:	7423      	strb	r3, [r4, #16]
 801ba16:	61e5      	str	r5, [r4, #28]
 801ba18:	f7fc fd26 	bl	8018468 <rmw_get_implementation_identifier>
 801ba1c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801ba20:	f104 0014 	add.w	r0, r4, #20
 801ba24:	bd38      	pop	{r3, r4, r5, pc}
 801ba26:	bf00      	nop
 801ba28:	2000e4f4 	.word	0x2000e4f4

0801ba2c <rmw_destroy_guard_condition>:
 801ba2c:	b508      	push	{r3, lr}
 801ba2e:	4b08      	ldr	r3, [pc, #32]	@ (801ba50 <rmw_destroy_guard_condition+0x24>)
 801ba30:	6819      	ldr	r1, [r3, #0]
 801ba32:	b911      	cbnz	r1, 801ba3a <rmw_destroy_guard_condition+0xe>
 801ba34:	e00a      	b.n	801ba4c <rmw_destroy_guard_condition+0x20>
 801ba36:	6849      	ldr	r1, [r1, #4]
 801ba38:	b141      	cbz	r1, 801ba4c <rmw_destroy_guard_condition+0x20>
 801ba3a:	688b      	ldr	r3, [r1, #8]
 801ba3c:	3314      	adds	r3, #20
 801ba3e:	4298      	cmp	r0, r3
 801ba40:	d1f9      	bne.n	801ba36 <rmw_destroy_guard_condition+0xa>
 801ba42:	4803      	ldr	r0, [pc, #12]	@ (801ba50 <rmw_destroy_guard_condition+0x24>)
 801ba44:	f7fc fcb8 	bl	80183b8 <put_memory>
 801ba48:	2000      	movs	r0, #0
 801ba4a:	bd08      	pop	{r3, pc}
 801ba4c:	2001      	movs	r0, #1
 801ba4e:	bd08      	pop	{r3, pc}
 801ba50:	2000e4f4 	.word	0x2000e4f4

0801ba54 <calloc>:
 801ba54:	4b02      	ldr	r3, [pc, #8]	@ (801ba60 <calloc+0xc>)
 801ba56:	460a      	mov	r2, r1
 801ba58:	4601      	mov	r1, r0
 801ba5a:	6818      	ldr	r0, [r3, #0]
 801ba5c:	f000 b802 	b.w	801ba64 <_calloc_r>
 801ba60:	2000030c 	.word	0x2000030c

0801ba64 <_calloc_r>:
 801ba64:	b570      	push	{r4, r5, r6, lr}
 801ba66:	fba1 5402 	umull	r5, r4, r1, r2
 801ba6a:	b934      	cbnz	r4, 801ba7a <_calloc_r+0x16>
 801ba6c:	4629      	mov	r1, r5
 801ba6e:	f000 f887 	bl	801bb80 <_malloc_r>
 801ba72:	4606      	mov	r6, r0
 801ba74:	b928      	cbnz	r0, 801ba82 <_calloc_r+0x1e>
 801ba76:	4630      	mov	r0, r6
 801ba78:	bd70      	pop	{r4, r5, r6, pc}
 801ba7a:	220c      	movs	r2, #12
 801ba7c:	6002      	str	r2, [r0, #0]
 801ba7e:	2600      	movs	r6, #0
 801ba80:	e7f9      	b.n	801ba76 <_calloc_r+0x12>
 801ba82:	462a      	mov	r2, r5
 801ba84:	4621      	mov	r1, r4
 801ba86:	f000 fbd5 	bl	801c234 <memset>
 801ba8a:	e7f4      	b.n	801ba76 <_calloc_r+0x12>

0801ba8c <getenv>:
 801ba8c:	b507      	push	{r0, r1, r2, lr}
 801ba8e:	4b04      	ldr	r3, [pc, #16]	@ (801baa0 <getenv+0x14>)
 801ba90:	4601      	mov	r1, r0
 801ba92:	aa01      	add	r2, sp, #4
 801ba94:	6818      	ldr	r0, [r3, #0]
 801ba96:	f000 f805 	bl	801baa4 <_findenv_r>
 801ba9a:	b003      	add	sp, #12
 801ba9c:	f85d fb04 	ldr.w	pc, [sp], #4
 801baa0:	2000030c 	.word	0x2000030c

0801baa4 <_findenv_r>:
 801baa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baa8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801bb18 <_findenv_r+0x74>
 801baac:	4606      	mov	r6, r0
 801baae:	4689      	mov	r9, r1
 801bab0:	4617      	mov	r7, r2
 801bab2:	f000 fcb5 	bl	801c420 <__env_lock>
 801bab6:	f8da 4000 	ldr.w	r4, [sl]
 801baba:	b134      	cbz	r4, 801baca <_findenv_r+0x26>
 801babc:	464b      	mov	r3, r9
 801babe:	4698      	mov	r8, r3
 801bac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bac4:	b13a      	cbz	r2, 801bad6 <_findenv_r+0x32>
 801bac6:	2a3d      	cmp	r2, #61	@ 0x3d
 801bac8:	d1f9      	bne.n	801babe <_findenv_r+0x1a>
 801baca:	4630      	mov	r0, r6
 801bacc:	f000 fcae 	bl	801c42c <__env_unlock>
 801bad0:	2000      	movs	r0, #0
 801bad2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad6:	eba8 0809 	sub.w	r8, r8, r9
 801bada:	46a3      	mov	fp, r4
 801badc:	f854 0b04 	ldr.w	r0, [r4], #4
 801bae0:	2800      	cmp	r0, #0
 801bae2:	d0f2      	beq.n	801baca <_findenv_r+0x26>
 801bae4:	4642      	mov	r2, r8
 801bae6:	4649      	mov	r1, r9
 801bae8:	f000 fbb9 	bl	801c25e <strncmp>
 801baec:	2800      	cmp	r0, #0
 801baee:	d1f4      	bne.n	801bada <_findenv_r+0x36>
 801baf0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801baf4:	eb03 0508 	add.w	r5, r3, r8
 801baf8:	f813 3008 	ldrb.w	r3, [r3, r8]
 801bafc:	2b3d      	cmp	r3, #61	@ 0x3d
 801bafe:	d1ec      	bne.n	801bada <_findenv_r+0x36>
 801bb00:	f8da 3000 	ldr.w	r3, [sl]
 801bb04:	ebab 0303 	sub.w	r3, fp, r3
 801bb08:	109b      	asrs	r3, r3, #2
 801bb0a:	4630      	mov	r0, r6
 801bb0c:	603b      	str	r3, [r7, #0]
 801bb0e:	f000 fc8d 	bl	801c42c <__env_unlock>
 801bb12:	1c68      	adds	r0, r5, #1
 801bb14:	e7dd      	b.n	801bad2 <_findenv_r+0x2e>
 801bb16:	bf00      	nop
 801bb18:	20000000 	.word	0x20000000

0801bb1c <malloc>:
 801bb1c:	4b02      	ldr	r3, [pc, #8]	@ (801bb28 <malloc+0xc>)
 801bb1e:	4601      	mov	r1, r0
 801bb20:	6818      	ldr	r0, [r3, #0]
 801bb22:	f000 b82d 	b.w	801bb80 <_malloc_r>
 801bb26:	bf00      	nop
 801bb28:	2000030c 	.word	0x2000030c

0801bb2c <free>:
 801bb2c:	4b02      	ldr	r3, [pc, #8]	@ (801bb38 <free+0xc>)
 801bb2e:	4601      	mov	r1, r0
 801bb30:	6818      	ldr	r0, [r3, #0]
 801bb32:	f000 bc81 	b.w	801c438 <_free_r>
 801bb36:	bf00      	nop
 801bb38:	2000030c 	.word	0x2000030c

0801bb3c <sbrk_aligned>:
 801bb3c:	b570      	push	{r4, r5, r6, lr}
 801bb3e:	4e0f      	ldr	r6, [pc, #60]	@ (801bb7c <sbrk_aligned+0x40>)
 801bb40:	460c      	mov	r4, r1
 801bb42:	6831      	ldr	r1, [r6, #0]
 801bb44:	4605      	mov	r5, r0
 801bb46:	b911      	cbnz	r1, 801bb4e <sbrk_aligned+0x12>
 801bb48:	f000 fbe6 	bl	801c318 <_sbrk_r>
 801bb4c:	6030      	str	r0, [r6, #0]
 801bb4e:	4621      	mov	r1, r4
 801bb50:	4628      	mov	r0, r5
 801bb52:	f000 fbe1 	bl	801c318 <_sbrk_r>
 801bb56:	1c43      	adds	r3, r0, #1
 801bb58:	d103      	bne.n	801bb62 <sbrk_aligned+0x26>
 801bb5a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801bb5e:	4620      	mov	r0, r4
 801bb60:	bd70      	pop	{r4, r5, r6, pc}
 801bb62:	1cc4      	adds	r4, r0, #3
 801bb64:	f024 0403 	bic.w	r4, r4, #3
 801bb68:	42a0      	cmp	r0, r4
 801bb6a:	d0f8      	beq.n	801bb5e <sbrk_aligned+0x22>
 801bb6c:	1a21      	subs	r1, r4, r0
 801bb6e:	4628      	mov	r0, r5
 801bb70:	f000 fbd2 	bl	801c318 <_sbrk_r>
 801bb74:	3001      	adds	r0, #1
 801bb76:	d1f2      	bne.n	801bb5e <sbrk_aligned+0x22>
 801bb78:	e7ef      	b.n	801bb5a <sbrk_aligned+0x1e>
 801bb7a:	bf00      	nop
 801bb7c:	2000e718 	.word	0x2000e718

0801bb80 <_malloc_r>:
 801bb80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb84:	1ccd      	adds	r5, r1, #3
 801bb86:	f025 0503 	bic.w	r5, r5, #3
 801bb8a:	3508      	adds	r5, #8
 801bb8c:	2d0c      	cmp	r5, #12
 801bb8e:	bf38      	it	cc
 801bb90:	250c      	movcc	r5, #12
 801bb92:	2d00      	cmp	r5, #0
 801bb94:	4606      	mov	r6, r0
 801bb96:	db01      	blt.n	801bb9c <_malloc_r+0x1c>
 801bb98:	42a9      	cmp	r1, r5
 801bb9a:	d904      	bls.n	801bba6 <_malloc_r+0x26>
 801bb9c:	230c      	movs	r3, #12
 801bb9e:	6033      	str	r3, [r6, #0]
 801bba0:	2000      	movs	r0, #0
 801bba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bba6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bc7c <_malloc_r+0xfc>
 801bbaa:	f000 f869 	bl	801bc80 <__malloc_lock>
 801bbae:	f8d8 3000 	ldr.w	r3, [r8]
 801bbb2:	461c      	mov	r4, r3
 801bbb4:	bb44      	cbnz	r4, 801bc08 <_malloc_r+0x88>
 801bbb6:	4629      	mov	r1, r5
 801bbb8:	4630      	mov	r0, r6
 801bbba:	f7ff ffbf 	bl	801bb3c <sbrk_aligned>
 801bbbe:	1c43      	adds	r3, r0, #1
 801bbc0:	4604      	mov	r4, r0
 801bbc2:	d158      	bne.n	801bc76 <_malloc_r+0xf6>
 801bbc4:	f8d8 4000 	ldr.w	r4, [r8]
 801bbc8:	4627      	mov	r7, r4
 801bbca:	2f00      	cmp	r7, #0
 801bbcc:	d143      	bne.n	801bc56 <_malloc_r+0xd6>
 801bbce:	2c00      	cmp	r4, #0
 801bbd0:	d04b      	beq.n	801bc6a <_malloc_r+0xea>
 801bbd2:	6823      	ldr	r3, [r4, #0]
 801bbd4:	4639      	mov	r1, r7
 801bbd6:	4630      	mov	r0, r6
 801bbd8:	eb04 0903 	add.w	r9, r4, r3
 801bbdc:	f000 fb9c 	bl	801c318 <_sbrk_r>
 801bbe0:	4581      	cmp	r9, r0
 801bbe2:	d142      	bne.n	801bc6a <_malloc_r+0xea>
 801bbe4:	6821      	ldr	r1, [r4, #0]
 801bbe6:	1a6d      	subs	r5, r5, r1
 801bbe8:	4629      	mov	r1, r5
 801bbea:	4630      	mov	r0, r6
 801bbec:	f7ff ffa6 	bl	801bb3c <sbrk_aligned>
 801bbf0:	3001      	adds	r0, #1
 801bbf2:	d03a      	beq.n	801bc6a <_malloc_r+0xea>
 801bbf4:	6823      	ldr	r3, [r4, #0]
 801bbf6:	442b      	add	r3, r5
 801bbf8:	6023      	str	r3, [r4, #0]
 801bbfa:	f8d8 3000 	ldr.w	r3, [r8]
 801bbfe:	685a      	ldr	r2, [r3, #4]
 801bc00:	bb62      	cbnz	r2, 801bc5c <_malloc_r+0xdc>
 801bc02:	f8c8 7000 	str.w	r7, [r8]
 801bc06:	e00f      	b.n	801bc28 <_malloc_r+0xa8>
 801bc08:	6822      	ldr	r2, [r4, #0]
 801bc0a:	1b52      	subs	r2, r2, r5
 801bc0c:	d420      	bmi.n	801bc50 <_malloc_r+0xd0>
 801bc0e:	2a0b      	cmp	r2, #11
 801bc10:	d917      	bls.n	801bc42 <_malloc_r+0xc2>
 801bc12:	1961      	adds	r1, r4, r5
 801bc14:	42a3      	cmp	r3, r4
 801bc16:	6025      	str	r5, [r4, #0]
 801bc18:	bf18      	it	ne
 801bc1a:	6059      	strne	r1, [r3, #4]
 801bc1c:	6863      	ldr	r3, [r4, #4]
 801bc1e:	bf08      	it	eq
 801bc20:	f8c8 1000 	streq.w	r1, [r8]
 801bc24:	5162      	str	r2, [r4, r5]
 801bc26:	604b      	str	r3, [r1, #4]
 801bc28:	4630      	mov	r0, r6
 801bc2a:	f000 f82f 	bl	801bc8c <__malloc_unlock>
 801bc2e:	f104 000b 	add.w	r0, r4, #11
 801bc32:	1d23      	adds	r3, r4, #4
 801bc34:	f020 0007 	bic.w	r0, r0, #7
 801bc38:	1ac2      	subs	r2, r0, r3
 801bc3a:	bf1c      	itt	ne
 801bc3c:	1a1b      	subne	r3, r3, r0
 801bc3e:	50a3      	strne	r3, [r4, r2]
 801bc40:	e7af      	b.n	801bba2 <_malloc_r+0x22>
 801bc42:	6862      	ldr	r2, [r4, #4]
 801bc44:	42a3      	cmp	r3, r4
 801bc46:	bf0c      	ite	eq
 801bc48:	f8c8 2000 	streq.w	r2, [r8]
 801bc4c:	605a      	strne	r2, [r3, #4]
 801bc4e:	e7eb      	b.n	801bc28 <_malloc_r+0xa8>
 801bc50:	4623      	mov	r3, r4
 801bc52:	6864      	ldr	r4, [r4, #4]
 801bc54:	e7ae      	b.n	801bbb4 <_malloc_r+0x34>
 801bc56:	463c      	mov	r4, r7
 801bc58:	687f      	ldr	r7, [r7, #4]
 801bc5a:	e7b6      	b.n	801bbca <_malloc_r+0x4a>
 801bc5c:	461a      	mov	r2, r3
 801bc5e:	685b      	ldr	r3, [r3, #4]
 801bc60:	42a3      	cmp	r3, r4
 801bc62:	d1fb      	bne.n	801bc5c <_malloc_r+0xdc>
 801bc64:	2300      	movs	r3, #0
 801bc66:	6053      	str	r3, [r2, #4]
 801bc68:	e7de      	b.n	801bc28 <_malloc_r+0xa8>
 801bc6a:	230c      	movs	r3, #12
 801bc6c:	6033      	str	r3, [r6, #0]
 801bc6e:	4630      	mov	r0, r6
 801bc70:	f000 f80c 	bl	801bc8c <__malloc_unlock>
 801bc74:	e794      	b.n	801bba0 <_malloc_r+0x20>
 801bc76:	6005      	str	r5, [r0, #0]
 801bc78:	e7d6      	b.n	801bc28 <_malloc_r+0xa8>
 801bc7a:	bf00      	nop
 801bc7c:	2000e71c 	.word	0x2000e71c

0801bc80 <__malloc_lock>:
 801bc80:	4801      	ldr	r0, [pc, #4]	@ (801bc88 <__malloc_lock+0x8>)
 801bc82:	f000 bb96 	b.w	801c3b2 <__retarget_lock_acquire_recursive>
 801bc86:	bf00      	nop
 801bc88:	2000e861 	.word	0x2000e861

0801bc8c <__malloc_unlock>:
 801bc8c:	4801      	ldr	r0, [pc, #4]	@ (801bc94 <__malloc_unlock+0x8>)
 801bc8e:	f000 bb91 	b.w	801c3b4 <__retarget_lock_release_recursive>
 801bc92:	bf00      	nop
 801bc94:	2000e861 	.word	0x2000e861

0801bc98 <srand>:
 801bc98:	b538      	push	{r3, r4, r5, lr}
 801bc9a:	4b10      	ldr	r3, [pc, #64]	@ (801bcdc <srand+0x44>)
 801bc9c:	681d      	ldr	r5, [r3, #0]
 801bc9e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801bca0:	4604      	mov	r4, r0
 801bca2:	b9b3      	cbnz	r3, 801bcd2 <srand+0x3a>
 801bca4:	2018      	movs	r0, #24
 801bca6:	f7ff ff39 	bl	801bb1c <malloc>
 801bcaa:	4602      	mov	r2, r0
 801bcac:	6328      	str	r0, [r5, #48]	@ 0x30
 801bcae:	b920      	cbnz	r0, 801bcba <srand+0x22>
 801bcb0:	4b0b      	ldr	r3, [pc, #44]	@ (801bce0 <srand+0x48>)
 801bcb2:	480c      	ldr	r0, [pc, #48]	@ (801bce4 <srand+0x4c>)
 801bcb4:	2146      	movs	r1, #70	@ 0x46
 801bcb6:	f000 fb95 	bl	801c3e4 <__assert_func>
 801bcba:	490b      	ldr	r1, [pc, #44]	@ (801bce8 <srand+0x50>)
 801bcbc:	4b0b      	ldr	r3, [pc, #44]	@ (801bcec <srand+0x54>)
 801bcbe:	e9c0 1300 	strd	r1, r3, [r0]
 801bcc2:	4b0b      	ldr	r3, [pc, #44]	@ (801bcf0 <srand+0x58>)
 801bcc4:	6083      	str	r3, [r0, #8]
 801bcc6:	230b      	movs	r3, #11
 801bcc8:	8183      	strh	r3, [r0, #12]
 801bcca:	2100      	movs	r1, #0
 801bccc:	2001      	movs	r0, #1
 801bcce:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bcd2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801bcd4:	2200      	movs	r2, #0
 801bcd6:	611c      	str	r4, [r3, #16]
 801bcd8:	615a      	str	r2, [r3, #20]
 801bcda:	bd38      	pop	{r3, r4, r5, pc}
 801bcdc:	2000030c 	.word	0x2000030c
 801bce0:	0801df84 	.word	0x0801df84
 801bce4:	0801df9b 	.word	0x0801df9b
 801bce8:	abcd330e 	.word	0xabcd330e
 801bcec:	e66d1234 	.word	0xe66d1234
 801bcf0:	0005deec 	.word	0x0005deec

0801bcf4 <rand>:
 801bcf4:	4b16      	ldr	r3, [pc, #88]	@ (801bd50 <rand+0x5c>)
 801bcf6:	b510      	push	{r4, lr}
 801bcf8:	681c      	ldr	r4, [r3, #0]
 801bcfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bcfc:	b9b3      	cbnz	r3, 801bd2c <rand+0x38>
 801bcfe:	2018      	movs	r0, #24
 801bd00:	f7ff ff0c 	bl	801bb1c <malloc>
 801bd04:	4602      	mov	r2, r0
 801bd06:	6320      	str	r0, [r4, #48]	@ 0x30
 801bd08:	b920      	cbnz	r0, 801bd14 <rand+0x20>
 801bd0a:	4b12      	ldr	r3, [pc, #72]	@ (801bd54 <rand+0x60>)
 801bd0c:	4812      	ldr	r0, [pc, #72]	@ (801bd58 <rand+0x64>)
 801bd0e:	2152      	movs	r1, #82	@ 0x52
 801bd10:	f000 fb68 	bl	801c3e4 <__assert_func>
 801bd14:	4911      	ldr	r1, [pc, #68]	@ (801bd5c <rand+0x68>)
 801bd16:	4b12      	ldr	r3, [pc, #72]	@ (801bd60 <rand+0x6c>)
 801bd18:	e9c0 1300 	strd	r1, r3, [r0]
 801bd1c:	4b11      	ldr	r3, [pc, #68]	@ (801bd64 <rand+0x70>)
 801bd1e:	6083      	str	r3, [r0, #8]
 801bd20:	230b      	movs	r3, #11
 801bd22:	8183      	strh	r3, [r0, #12]
 801bd24:	2100      	movs	r1, #0
 801bd26:	2001      	movs	r0, #1
 801bd28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bd2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801bd2e:	480e      	ldr	r0, [pc, #56]	@ (801bd68 <rand+0x74>)
 801bd30:	690b      	ldr	r3, [r1, #16]
 801bd32:	694c      	ldr	r4, [r1, #20]
 801bd34:	4a0d      	ldr	r2, [pc, #52]	@ (801bd6c <rand+0x78>)
 801bd36:	4358      	muls	r0, r3
 801bd38:	fb02 0004 	mla	r0, r2, r4, r0
 801bd3c:	fba3 3202 	umull	r3, r2, r3, r2
 801bd40:	3301      	adds	r3, #1
 801bd42:	eb40 0002 	adc.w	r0, r0, r2
 801bd46:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801bd4a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801bd4e:	bd10      	pop	{r4, pc}
 801bd50:	2000030c 	.word	0x2000030c
 801bd54:	0801df84 	.word	0x0801df84
 801bd58:	0801df9b 	.word	0x0801df9b
 801bd5c:	abcd330e 	.word	0xabcd330e
 801bd60:	e66d1234 	.word	0xe66d1234
 801bd64:	0005deec 	.word	0x0005deec
 801bd68:	5851f42d 	.word	0x5851f42d
 801bd6c:	4c957f2d 	.word	0x4c957f2d

0801bd70 <realloc>:
 801bd70:	4b02      	ldr	r3, [pc, #8]	@ (801bd7c <realloc+0xc>)
 801bd72:	460a      	mov	r2, r1
 801bd74:	4601      	mov	r1, r0
 801bd76:	6818      	ldr	r0, [r3, #0]
 801bd78:	f000 b802 	b.w	801bd80 <_realloc_r>
 801bd7c:	2000030c 	.word	0x2000030c

0801bd80 <_realloc_r>:
 801bd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd84:	4607      	mov	r7, r0
 801bd86:	4614      	mov	r4, r2
 801bd88:	460d      	mov	r5, r1
 801bd8a:	b921      	cbnz	r1, 801bd96 <_realloc_r+0x16>
 801bd8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd90:	4611      	mov	r1, r2
 801bd92:	f7ff bef5 	b.w	801bb80 <_malloc_r>
 801bd96:	b92a      	cbnz	r2, 801bda4 <_realloc_r+0x24>
 801bd98:	f000 fb4e 	bl	801c438 <_free_r>
 801bd9c:	4625      	mov	r5, r4
 801bd9e:	4628      	mov	r0, r5
 801bda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bda4:	f000 fb92 	bl	801c4cc <_malloc_usable_size_r>
 801bda8:	4284      	cmp	r4, r0
 801bdaa:	4606      	mov	r6, r0
 801bdac:	d802      	bhi.n	801bdb4 <_realloc_r+0x34>
 801bdae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bdb2:	d8f4      	bhi.n	801bd9e <_realloc_r+0x1e>
 801bdb4:	4621      	mov	r1, r4
 801bdb6:	4638      	mov	r0, r7
 801bdb8:	f7ff fee2 	bl	801bb80 <_malloc_r>
 801bdbc:	4680      	mov	r8, r0
 801bdbe:	b908      	cbnz	r0, 801bdc4 <_realloc_r+0x44>
 801bdc0:	4645      	mov	r5, r8
 801bdc2:	e7ec      	b.n	801bd9e <_realloc_r+0x1e>
 801bdc4:	42b4      	cmp	r4, r6
 801bdc6:	4622      	mov	r2, r4
 801bdc8:	4629      	mov	r1, r5
 801bdca:	bf28      	it	cs
 801bdcc:	4632      	movcs	r2, r6
 801bdce:	f000 fafa 	bl	801c3c6 <memcpy>
 801bdd2:	4629      	mov	r1, r5
 801bdd4:	4638      	mov	r0, r7
 801bdd6:	f000 fb2f 	bl	801c438 <_free_r>
 801bdda:	e7f1      	b.n	801bdc0 <_realloc_r+0x40>

0801bddc <_strtoul_l.isra.0>:
 801bddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bde0:	4e34      	ldr	r6, [pc, #208]	@ (801beb4 <_strtoul_l.isra.0+0xd8>)
 801bde2:	4686      	mov	lr, r0
 801bde4:	460d      	mov	r5, r1
 801bde6:	4628      	mov	r0, r5
 801bde8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bdec:	5d37      	ldrb	r7, [r6, r4]
 801bdee:	f017 0708 	ands.w	r7, r7, #8
 801bdf2:	d1f8      	bne.n	801bde6 <_strtoul_l.isra.0+0xa>
 801bdf4:	2c2d      	cmp	r4, #45	@ 0x2d
 801bdf6:	d110      	bne.n	801be1a <_strtoul_l.isra.0+0x3e>
 801bdf8:	782c      	ldrb	r4, [r5, #0]
 801bdfa:	2701      	movs	r7, #1
 801bdfc:	1c85      	adds	r5, r0, #2
 801bdfe:	f033 0010 	bics.w	r0, r3, #16
 801be02:	d115      	bne.n	801be30 <_strtoul_l.isra.0+0x54>
 801be04:	2c30      	cmp	r4, #48	@ 0x30
 801be06:	d10d      	bne.n	801be24 <_strtoul_l.isra.0+0x48>
 801be08:	7828      	ldrb	r0, [r5, #0]
 801be0a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801be0e:	2858      	cmp	r0, #88	@ 0x58
 801be10:	d108      	bne.n	801be24 <_strtoul_l.isra.0+0x48>
 801be12:	786c      	ldrb	r4, [r5, #1]
 801be14:	3502      	adds	r5, #2
 801be16:	2310      	movs	r3, #16
 801be18:	e00a      	b.n	801be30 <_strtoul_l.isra.0+0x54>
 801be1a:	2c2b      	cmp	r4, #43	@ 0x2b
 801be1c:	bf04      	itt	eq
 801be1e:	782c      	ldrbeq	r4, [r5, #0]
 801be20:	1c85      	addeq	r5, r0, #2
 801be22:	e7ec      	b.n	801bdfe <_strtoul_l.isra.0+0x22>
 801be24:	2b00      	cmp	r3, #0
 801be26:	d1f6      	bne.n	801be16 <_strtoul_l.isra.0+0x3a>
 801be28:	2c30      	cmp	r4, #48	@ 0x30
 801be2a:	bf14      	ite	ne
 801be2c:	230a      	movne	r3, #10
 801be2e:	2308      	moveq	r3, #8
 801be30:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801be34:	2600      	movs	r6, #0
 801be36:	fbb8 f8f3 	udiv	r8, r8, r3
 801be3a:	fb03 f908 	mul.w	r9, r3, r8
 801be3e:	ea6f 0909 	mvn.w	r9, r9
 801be42:	4630      	mov	r0, r6
 801be44:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801be48:	f1bc 0f09 	cmp.w	ip, #9
 801be4c:	d810      	bhi.n	801be70 <_strtoul_l.isra.0+0x94>
 801be4e:	4664      	mov	r4, ip
 801be50:	42a3      	cmp	r3, r4
 801be52:	dd1e      	ble.n	801be92 <_strtoul_l.isra.0+0xb6>
 801be54:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801be58:	d007      	beq.n	801be6a <_strtoul_l.isra.0+0x8e>
 801be5a:	4580      	cmp	r8, r0
 801be5c:	d316      	bcc.n	801be8c <_strtoul_l.isra.0+0xb0>
 801be5e:	d101      	bne.n	801be64 <_strtoul_l.isra.0+0x88>
 801be60:	45a1      	cmp	r9, r4
 801be62:	db13      	blt.n	801be8c <_strtoul_l.isra.0+0xb0>
 801be64:	fb00 4003 	mla	r0, r0, r3, r4
 801be68:	2601      	movs	r6, #1
 801be6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801be6e:	e7e9      	b.n	801be44 <_strtoul_l.isra.0+0x68>
 801be70:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801be74:	f1bc 0f19 	cmp.w	ip, #25
 801be78:	d801      	bhi.n	801be7e <_strtoul_l.isra.0+0xa2>
 801be7a:	3c37      	subs	r4, #55	@ 0x37
 801be7c:	e7e8      	b.n	801be50 <_strtoul_l.isra.0+0x74>
 801be7e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801be82:	f1bc 0f19 	cmp.w	ip, #25
 801be86:	d804      	bhi.n	801be92 <_strtoul_l.isra.0+0xb6>
 801be88:	3c57      	subs	r4, #87	@ 0x57
 801be8a:	e7e1      	b.n	801be50 <_strtoul_l.isra.0+0x74>
 801be8c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801be90:	e7eb      	b.n	801be6a <_strtoul_l.isra.0+0x8e>
 801be92:	1c73      	adds	r3, r6, #1
 801be94:	d106      	bne.n	801bea4 <_strtoul_l.isra.0+0xc8>
 801be96:	2322      	movs	r3, #34	@ 0x22
 801be98:	f8ce 3000 	str.w	r3, [lr]
 801be9c:	4630      	mov	r0, r6
 801be9e:	b932      	cbnz	r2, 801beae <_strtoul_l.isra.0+0xd2>
 801bea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bea4:	b107      	cbz	r7, 801bea8 <_strtoul_l.isra.0+0xcc>
 801bea6:	4240      	negs	r0, r0
 801bea8:	2a00      	cmp	r2, #0
 801beaa:	d0f9      	beq.n	801bea0 <_strtoul_l.isra.0+0xc4>
 801beac:	b106      	cbz	r6, 801beb0 <_strtoul_l.isra.0+0xd4>
 801beae:	1e69      	subs	r1, r5, #1
 801beb0:	6011      	str	r1, [r2, #0]
 801beb2:	e7f5      	b.n	801bea0 <_strtoul_l.isra.0+0xc4>
 801beb4:	0801e063 	.word	0x0801e063

0801beb8 <strtoul>:
 801beb8:	4613      	mov	r3, r2
 801beba:	460a      	mov	r2, r1
 801bebc:	4601      	mov	r1, r0
 801bebe:	4802      	ldr	r0, [pc, #8]	@ (801bec8 <strtoul+0x10>)
 801bec0:	6800      	ldr	r0, [r0, #0]
 801bec2:	f7ff bf8b 	b.w	801bddc <_strtoul_l.isra.0>
 801bec6:	bf00      	nop
 801bec8:	2000030c 	.word	0x2000030c

0801becc <std>:
 801becc:	2300      	movs	r3, #0
 801bece:	b510      	push	{r4, lr}
 801bed0:	4604      	mov	r4, r0
 801bed2:	e9c0 3300 	strd	r3, r3, [r0]
 801bed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801beda:	6083      	str	r3, [r0, #8]
 801bedc:	8181      	strh	r1, [r0, #12]
 801bede:	6643      	str	r3, [r0, #100]	@ 0x64
 801bee0:	81c2      	strh	r2, [r0, #14]
 801bee2:	6183      	str	r3, [r0, #24]
 801bee4:	4619      	mov	r1, r3
 801bee6:	2208      	movs	r2, #8
 801bee8:	305c      	adds	r0, #92	@ 0x5c
 801beea:	f000 f9a3 	bl	801c234 <memset>
 801beee:	4b0d      	ldr	r3, [pc, #52]	@ (801bf24 <std+0x58>)
 801bef0:	6263      	str	r3, [r4, #36]	@ 0x24
 801bef2:	4b0d      	ldr	r3, [pc, #52]	@ (801bf28 <std+0x5c>)
 801bef4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801bef6:	4b0d      	ldr	r3, [pc, #52]	@ (801bf2c <std+0x60>)
 801bef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801befa:	4b0d      	ldr	r3, [pc, #52]	@ (801bf30 <std+0x64>)
 801befc:	6323      	str	r3, [r4, #48]	@ 0x30
 801befe:	4b0d      	ldr	r3, [pc, #52]	@ (801bf34 <std+0x68>)
 801bf00:	6224      	str	r4, [r4, #32]
 801bf02:	429c      	cmp	r4, r3
 801bf04:	d006      	beq.n	801bf14 <std+0x48>
 801bf06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801bf0a:	4294      	cmp	r4, r2
 801bf0c:	d002      	beq.n	801bf14 <std+0x48>
 801bf0e:	33d0      	adds	r3, #208	@ 0xd0
 801bf10:	429c      	cmp	r4, r3
 801bf12:	d105      	bne.n	801bf20 <std+0x54>
 801bf14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801bf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf1c:	f000 ba48 	b.w	801c3b0 <__retarget_lock_init_recursive>
 801bf20:	bd10      	pop	{r4, pc}
 801bf22:	bf00      	nop
 801bf24:	0801c0e1 	.word	0x0801c0e1
 801bf28:	0801c103 	.word	0x0801c103
 801bf2c:	0801c13b 	.word	0x0801c13b
 801bf30:	0801c15f 	.word	0x0801c15f
 801bf34:	2000e720 	.word	0x2000e720

0801bf38 <stdio_exit_handler>:
 801bf38:	4a02      	ldr	r2, [pc, #8]	@ (801bf44 <stdio_exit_handler+0xc>)
 801bf3a:	4903      	ldr	r1, [pc, #12]	@ (801bf48 <stdio_exit_handler+0x10>)
 801bf3c:	4803      	ldr	r0, [pc, #12]	@ (801bf4c <stdio_exit_handler+0x14>)
 801bf3e:	f000 b869 	b.w	801c014 <_fwalk_sglue>
 801bf42:	bf00      	nop
 801bf44:	20000300 	.word	0x20000300
 801bf48:	0801ce31 	.word	0x0801ce31
 801bf4c:	20000310 	.word	0x20000310

0801bf50 <cleanup_stdio>:
 801bf50:	6841      	ldr	r1, [r0, #4]
 801bf52:	4b0c      	ldr	r3, [pc, #48]	@ (801bf84 <cleanup_stdio+0x34>)
 801bf54:	4299      	cmp	r1, r3
 801bf56:	b510      	push	{r4, lr}
 801bf58:	4604      	mov	r4, r0
 801bf5a:	d001      	beq.n	801bf60 <cleanup_stdio+0x10>
 801bf5c:	f000 ff68 	bl	801ce30 <_fflush_r>
 801bf60:	68a1      	ldr	r1, [r4, #8]
 801bf62:	4b09      	ldr	r3, [pc, #36]	@ (801bf88 <cleanup_stdio+0x38>)
 801bf64:	4299      	cmp	r1, r3
 801bf66:	d002      	beq.n	801bf6e <cleanup_stdio+0x1e>
 801bf68:	4620      	mov	r0, r4
 801bf6a:	f000 ff61 	bl	801ce30 <_fflush_r>
 801bf6e:	68e1      	ldr	r1, [r4, #12]
 801bf70:	4b06      	ldr	r3, [pc, #24]	@ (801bf8c <cleanup_stdio+0x3c>)
 801bf72:	4299      	cmp	r1, r3
 801bf74:	d004      	beq.n	801bf80 <cleanup_stdio+0x30>
 801bf76:	4620      	mov	r0, r4
 801bf78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf7c:	f000 bf58 	b.w	801ce30 <_fflush_r>
 801bf80:	bd10      	pop	{r4, pc}
 801bf82:	bf00      	nop
 801bf84:	2000e720 	.word	0x2000e720
 801bf88:	2000e788 	.word	0x2000e788
 801bf8c:	2000e7f0 	.word	0x2000e7f0

0801bf90 <global_stdio_init.part.0>:
 801bf90:	b510      	push	{r4, lr}
 801bf92:	4b0b      	ldr	r3, [pc, #44]	@ (801bfc0 <global_stdio_init.part.0+0x30>)
 801bf94:	4c0b      	ldr	r4, [pc, #44]	@ (801bfc4 <global_stdio_init.part.0+0x34>)
 801bf96:	4a0c      	ldr	r2, [pc, #48]	@ (801bfc8 <global_stdio_init.part.0+0x38>)
 801bf98:	601a      	str	r2, [r3, #0]
 801bf9a:	4620      	mov	r0, r4
 801bf9c:	2200      	movs	r2, #0
 801bf9e:	2104      	movs	r1, #4
 801bfa0:	f7ff ff94 	bl	801becc <std>
 801bfa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801bfa8:	2201      	movs	r2, #1
 801bfaa:	2109      	movs	r1, #9
 801bfac:	f7ff ff8e 	bl	801becc <std>
 801bfb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801bfb4:	2202      	movs	r2, #2
 801bfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bfba:	2112      	movs	r1, #18
 801bfbc:	f7ff bf86 	b.w	801becc <std>
 801bfc0:	2000e858 	.word	0x2000e858
 801bfc4:	2000e720 	.word	0x2000e720
 801bfc8:	0801bf39 	.word	0x0801bf39

0801bfcc <__sfp_lock_acquire>:
 801bfcc:	4801      	ldr	r0, [pc, #4]	@ (801bfd4 <__sfp_lock_acquire+0x8>)
 801bfce:	f000 b9f0 	b.w	801c3b2 <__retarget_lock_acquire_recursive>
 801bfd2:	bf00      	nop
 801bfd4:	2000e862 	.word	0x2000e862

0801bfd8 <__sfp_lock_release>:
 801bfd8:	4801      	ldr	r0, [pc, #4]	@ (801bfe0 <__sfp_lock_release+0x8>)
 801bfda:	f000 b9eb 	b.w	801c3b4 <__retarget_lock_release_recursive>
 801bfde:	bf00      	nop
 801bfe0:	2000e862 	.word	0x2000e862

0801bfe4 <__sinit>:
 801bfe4:	b510      	push	{r4, lr}
 801bfe6:	4604      	mov	r4, r0
 801bfe8:	f7ff fff0 	bl	801bfcc <__sfp_lock_acquire>
 801bfec:	6a23      	ldr	r3, [r4, #32]
 801bfee:	b11b      	cbz	r3, 801bff8 <__sinit+0x14>
 801bff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bff4:	f7ff bff0 	b.w	801bfd8 <__sfp_lock_release>
 801bff8:	4b04      	ldr	r3, [pc, #16]	@ (801c00c <__sinit+0x28>)
 801bffa:	6223      	str	r3, [r4, #32]
 801bffc:	4b04      	ldr	r3, [pc, #16]	@ (801c010 <__sinit+0x2c>)
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	2b00      	cmp	r3, #0
 801c002:	d1f5      	bne.n	801bff0 <__sinit+0xc>
 801c004:	f7ff ffc4 	bl	801bf90 <global_stdio_init.part.0>
 801c008:	e7f2      	b.n	801bff0 <__sinit+0xc>
 801c00a:	bf00      	nop
 801c00c:	0801bf51 	.word	0x0801bf51
 801c010:	2000e858 	.word	0x2000e858

0801c014 <_fwalk_sglue>:
 801c014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c018:	4607      	mov	r7, r0
 801c01a:	4688      	mov	r8, r1
 801c01c:	4614      	mov	r4, r2
 801c01e:	2600      	movs	r6, #0
 801c020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c024:	f1b9 0901 	subs.w	r9, r9, #1
 801c028:	d505      	bpl.n	801c036 <_fwalk_sglue+0x22>
 801c02a:	6824      	ldr	r4, [r4, #0]
 801c02c:	2c00      	cmp	r4, #0
 801c02e:	d1f7      	bne.n	801c020 <_fwalk_sglue+0xc>
 801c030:	4630      	mov	r0, r6
 801c032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c036:	89ab      	ldrh	r3, [r5, #12]
 801c038:	2b01      	cmp	r3, #1
 801c03a:	d907      	bls.n	801c04c <_fwalk_sglue+0x38>
 801c03c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c040:	3301      	adds	r3, #1
 801c042:	d003      	beq.n	801c04c <_fwalk_sglue+0x38>
 801c044:	4629      	mov	r1, r5
 801c046:	4638      	mov	r0, r7
 801c048:	47c0      	blx	r8
 801c04a:	4306      	orrs	r6, r0
 801c04c:	3568      	adds	r5, #104	@ 0x68
 801c04e:	e7e9      	b.n	801c024 <_fwalk_sglue+0x10>

0801c050 <iprintf>:
 801c050:	b40f      	push	{r0, r1, r2, r3}
 801c052:	b507      	push	{r0, r1, r2, lr}
 801c054:	4906      	ldr	r1, [pc, #24]	@ (801c070 <iprintf+0x20>)
 801c056:	ab04      	add	r3, sp, #16
 801c058:	6808      	ldr	r0, [r1, #0]
 801c05a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c05e:	6881      	ldr	r1, [r0, #8]
 801c060:	9301      	str	r3, [sp, #4]
 801c062:	f000 fbbd 	bl	801c7e0 <_vfiprintf_r>
 801c066:	b003      	add	sp, #12
 801c068:	f85d eb04 	ldr.w	lr, [sp], #4
 801c06c:	b004      	add	sp, #16
 801c06e:	4770      	bx	lr
 801c070:	2000030c 	.word	0x2000030c

0801c074 <sniprintf>:
 801c074:	b40c      	push	{r2, r3}
 801c076:	b530      	push	{r4, r5, lr}
 801c078:	4b18      	ldr	r3, [pc, #96]	@ (801c0dc <sniprintf+0x68>)
 801c07a:	1e0c      	subs	r4, r1, #0
 801c07c:	681d      	ldr	r5, [r3, #0]
 801c07e:	b09d      	sub	sp, #116	@ 0x74
 801c080:	da08      	bge.n	801c094 <sniprintf+0x20>
 801c082:	238b      	movs	r3, #139	@ 0x8b
 801c084:	602b      	str	r3, [r5, #0]
 801c086:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c08a:	b01d      	add	sp, #116	@ 0x74
 801c08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c090:	b002      	add	sp, #8
 801c092:	4770      	bx	lr
 801c094:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c098:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c09c:	f04f 0300 	mov.w	r3, #0
 801c0a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c0a2:	bf14      	ite	ne
 801c0a4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c0a8:	4623      	moveq	r3, r4
 801c0aa:	9304      	str	r3, [sp, #16]
 801c0ac:	9307      	str	r3, [sp, #28]
 801c0ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c0b2:	9002      	str	r0, [sp, #8]
 801c0b4:	9006      	str	r0, [sp, #24]
 801c0b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c0ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c0bc:	ab21      	add	r3, sp, #132	@ 0x84
 801c0be:	a902      	add	r1, sp, #8
 801c0c0:	4628      	mov	r0, r5
 801c0c2:	9301      	str	r3, [sp, #4]
 801c0c4:	f000 fa66 	bl	801c594 <_svfiprintf_r>
 801c0c8:	1c43      	adds	r3, r0, #1
 801c0ca:	bfbc      	itt	lt
 801c0cc:	238b      	movlt	r3, #139	@ 0x8b
 801c0ce:	602b      	strlt	r3, [r5, #0]
 801c0d0:	2c00      	cmp	r4, #0
 801c0d2:	d0da      	beq.n	801c08a <sniprintf+0x16>
 801c0d4:	9b02      	ldr	r3, [sp, #8]
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	701a      	strb	r2, [r3, #0]
 801c0da:	e7d6      	b.n	801c08a <sniprintf+0x16>
 801c0dc:	2000030c 	.word	0x2000030c

0801c0e0 <__sread>:
 801c0e0:	b510      	push	{r4, lr}
 801c0e2:	460c      	mov	r4, r1
 801c0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0e8:	f000 f904 	bl	801c2f4 <_read_r>
 801c0ec:	2800      	cmp	r0, #0
 801c0ee:	bfab      	itete	ge
 801c0f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c0f2:	89a3      	ldrhlt	r3, [r4, #12]
 801c0f4:	181b      	addge	r3, r3, r0
 801c0f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c0fa:	bfac      	ite	ge
 801c0fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c0fe:	81a3      	strhlt	r3, [r4, #12]
 801c100:	bd10      	pop	{r4, pc}

0801c102 <__swrite>:
 801c102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c106:	461f      	mov	r7, r3
 801c108:	898b      	ldrh	r3, [r1, #12]
 801c10a:	05db      	lsls	r3, r3, #23
 801c10c:	4605      	mov	r5, r0
 801c10e:	460c      	mov	r4, r1
 801c110:	4616      	mov	r6, r2
 801c112:	d505      	bpl.n	801c120 <__swrite+0x1e>
 801c114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c118:	2302      	movs	r3, #2
 801c11a:	2200      	movs	r2, #0
 801c11c:	f000 f8d8 	bl	801c2d0 <_lseek_r>
 801c120:	89a3      	ldrh	r3, [r4, #12]
 801c122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c12a:	81a3      	strh	r3, [r4, #12]
 801c12c:	4632      	mov	r2, r6
 801c12e:	463b      	mov	r3, r7
 801c130:	4628      	mov	r0, r5
 801c132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c136:	f000 b8ff 	b.w	801c338 <_write_r>

0801c13a <__sseek>:
 801c13a:	b510      	push	{r4, lr}
 801c13c:	460c      	mov	r4, r1
 801c13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c142:	f000 f8c5 	bl	801c2d0 <_lseek_r>
 801c146:	1c43      	adds	r3, r0, #1
 801c148:	89a3      	ldrh	r3, [r4, #12]
 801c14a:	bf15      	itete	ne
 801c14c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c14e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c152:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c156:	81a3      	strheq	r3, [r4, #12]
 801c158:	bf18      	it	ne
 801c15a:	81a3      	strhne	r3, [r4, #12]
 801c15c:	bd10      	pop	{r4, pc}

0801c15e <__sclose>:
 801c15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c162:	f000 b8a5 	b.w	801c2b0 <_close_r>

0801c166 <_vsniprintf_r>:
 801c166:	b530      	push	{r4, r5, lr}
 801c168:	4614      	mov	r4, r2
 801c16a:	2c00      	cmp	r4, #0
 801c16c:	b09b      	sub	sp, #108	@ 0x6c
 801c16e:	4605      	mov	r5, r0
 801c170:	461a      	mov	r2, r3
 801c172:	da05      	bge.n	801c180 <_vsniprintf_r+0x1a>
 801c174:	238b      	movs	r3, #139	@ 0x8b
 801c176:	6003      	str	r3, [r0, #0]
 801c178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c17c:	b01b      	add	sp, #108	@ 0x6c
 801c17e:	bd30      	pop	{r4, r5, pc}
 801c180:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c184:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c188:	f04f 0300 	mov.w	r3, #0
 801c18c:	9319      	str	r3, [sp, #100]	@ 0x64
 801c18e:	bf14      	ite	ne
 801c190:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c194:	4623      	moveq	r3, r4
 801c196:	9302      	str	r3, [sp, #8]
 801c198:	9305      	str	r3, [sp, #20]
 801c19a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c19e:	9100      	str	r1, [sp, #0]
 801c1a0:	9104      	str	r1, [sp, #16]
 801c1a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c1a6:	4669      	mov	r1, sp
 801c1a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c1aa:	f000 f9f3 	bl	801c594 <_svfiprintf_r>
 801c1ae:	1c43      	adds	r3, r0, #1
 801c1b0:	bfbc      	itt	lt
 801c1b2:	238b      	movlt	r3, #139	@ 0x8b
 801c1b4:	602b      	strlt	r3, [r5, #0]
 801c1b6:	2c00      	cmp	r4, #0
 801c1b8:	d0e0      	beq.n	801c17c <_vsniprintf_r+0x16>
 801c1ba:	9b00      	ldr	r3, [sp, #0]
 801c1bc:	2200      	movs	r2, #0
 801c1be:	701a      	strb	r2, [r3, #0]
 801c1c0:	e7dc      	b.n	801c17c <_vsniprintf_r+0x16>
	...

0801c1c4 <vsniprintf>:
 801c1c4:	b507      	push	{r0, r1, r2, lr}
 801c1c6:	9300      	str	r3, [sp, #0]
 801c1c8:	4613      	mov	r3, r2
 801c1ca:	460a      	mov	r2, r1
 801c1cc:	4601      	mov	r1, r0
 801c1ce:	4803      	ldr	r0, [pc, #12]	@ (801c1dc <vsniprintf+0x18>)
 801c1d0:	6800      	ldr	r0, [r0, #0]
 801c1d2:	f7ff ffc8 	bl	801c166 <_vsniprintf_r>
 801c1d6:	b003      	add	sp, #12
 801c1d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c1dc:	2000030c 	.word	0x2000030c

0801c1e0 <memcmp>:
 801c1e0:	b510      	push	{r4, lr}
 801c1e2:	3901      	subs	r1, #1
 801c1e4:	4402      	add	r2, r0
 801c1e6:	4290      	cmp	r0, r2
 801c1e8:	d101      	bne.n	801c1ee <memcmp+0xe>
 801c1ea:	2000      	movs	r0, #0
 801c1ec:	e005      	b.n	801c1fa <memcmp+0x1a>
 801c1ee:	7803      	ldrb	r3, [r0, #0]
 801c1f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c1f4:	42a3      	cmp	r3, r4
 801c1f6:	d001      	beq.n	801c1fc <memcmp+0x1c>
 801c1f8:	1b18      	subs	r0, r3, r4
 801c1fa:	bd10      	pop	{r4, pc}
 801c1fc:	3001      	adds	r0, #1
 801c1fe:	e7f2      	b.n	801c1e6 <memcmp+0x6>

0801c200 <memmove>:
 801c200:	4288      	cmp	r0, r1
 801c202:	b510      	push	{r4, lr}
 801c204:	eb01 0402 	add.w	r4, r1, r2
 801c208:	d902      	bls.n	801c210 <memmove+0x10>
 801c20a:	4284      	cmp	r4, r0
 801c20c:	4623      	mov	r3, r4
 801c20e:	d807      	bhi.n	801c220 <memmove+0x20>
 801c210:	1e43      	subs	r3, r0, #1
 801c212:	42a1      	cmp	r1, r4
 801c214:	d008      	beq.n	801c228 <memmove+0x28>
 801c216:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c21e:	e7f8      	b.n	801c212 <memmove+0x12>
 801c220:	4402      	add	r2, r0
 801c222:	4601      	mov	r1, r0
 801c224:	428a      	cmp	r2, r1
 801c226:	d100      	bne.n	801c22a <memmove+0x2a>
 801c228:	bd10      	pop	{r4, pc}
 801c22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c232:	e7f7      	b.n	801c224 <memmove+0x24>

0801c234 <memset>:
 801c234:	4402      	add	r2, r0
 801c236:	4603      	mov	r3, r0
 801c238:	4293      	cmp	r3, r2
 801c23a:	d100      	bne.n	801c23e <memset+0xa>
 801c23c:	4770      	bx	lr
 801c23e:	f803 1b01 	strb.w	r1, [r3], #1
 801c242:	e7f9      	b.n	801c238 <memset+0x4>

0801c244 <strchr>:
 801c244:	b2c9      	uxtb	r1, r1
 801c246:	4603      	mov	r3, r0
 801c248:	4618      	mov	r0, r3
 801c24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c24e:	b112      	cbz	r2, 801c256 <strchr+0x12>
 801c250:	428a      	cmp	r2, r1
 801c252:	d1f9      	bne.n	801c248 <strchr+0x4>
 801c254:	4770      	bx	lr
 801c256:	2900      	cmp	r1, #0
 801c258:	bf18      	it	ne
 801c25a:	2000      	movne	r0, #0
 801c25c:	4770      	bx	lr

0801c25e <strncmp>:
 801c25e:	b510      	push	{r4, lr}
 801c260:	b16a      	cbz	r2, 801c27e <strncmp+0x20>
 801c262:	3901      	subs	r1, #1
 801c264:	1884      	adds	r4, r0, r2
 801c266:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c26a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c26e:	429a      	cmp	r2, r3
 801c270:	d103      	bne.n	801c27a <strncmp+0x1c>
 801c272:	42a0      	cmp	r0, r4
 801c274:	d001      	beq.n	801c27a <strncmp+0x1c>
 801c276:	2a00      	cmp	r2, #0
 801c278:	d1f5      	bne.n	801c266 <strncmp+0x8>
 801c27a:	1ad0      	subs	r0, r2, r3
 801c27c:	bd10      	pop	{r4, pc}
 801c27e:	4610      	mov	r0, r2
 801c280:	e7fc      	b.n	801c27c <strncmp+0x1e>

0801c282 <strstr>:
 801c282:	780a      	ldrb	r2, [r1, #0]
 801c284:	b570      	push	{r4, r5, r6, lr}
 801c286:	b96a      	cbnz	r2, 801c2a4 <strstr+0x22>
 801c288:	bd70      	pop	{r4, r5, r6, pc}
 801c28a:	429a      	cmp	r2, r3
 801c28c:	d109      	bne.n	801c2a2 <strstr+0x20>
 801c28e:	460c      	mov	r4, r1
 801c290:	4605      	mov	r5, r0
 801c292:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c296:	2b00      	cmp	r3, #0
 801c298:	d0f6      	beq.n	801c288 <strstr+0x6>
 801c29a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c29e:	429e      	cmp	r6, r3
 801c2a0:	d0f7      	beq.n	801c292 <strstr+0x10>
 801c2a2:	3001      	adds	r0, #1
 801c2a4:	7803      	ldrb	r3, [r0, #0]
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d1ef      	bne.n	801c28a <strstr+0x8>
 801c2aa:	4618      	mov	r0, r3
 801c2ac:	e7ec      	b.n	801c288 <strstr+0x6>
	...

0801c2b0 <_close_r>:
 801c2b0:	b538      	push	{r3, r4, r5, lr}
 801c2b2:	4d06      	ldr	r5, [pc, #24]	@ (801c2cc <_close_r+0x1c>)
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	4604      	mov	r4, r0
 801c2b8:	4608      	mov	r0, r1
 801c2ba:	602b      	str	r3, [r5, #0]
 801c2bc:	f7e5 ffc6 	bl	800224c <_close>
 801c2c0:	1c43      	adds	r3, r0, #1
 801c2c2:	d102      	bne.n	801c2ca <_close_r+0x1a>
 801c2c4:	682b      	ldr	r3, [r5, #0]
 801c2c6:	b103      	cbz	r3, 801c2ca <_close_r+0x1a>
 801c2c8:	6023      	str	r3, [r4, #0]
 801c2ca:	bd38      	pop	{r3, r4, r5, pc}
 801c2cc:	2000e85c 	.word	0x2000e85c

0801c2d0 <_lseek_r>:
 801c2d0:	b538      	push	{r3, r4, r5, lr}
 801c2d2:	4d07      	ldr	r5, [pc, #28]	@ (801c2f0 <_lseek_r+0x20>)
 801c2d4:	4604      	mov	r4, r0
 801c2d6:	4608      	mov	r0, r1
 801c2d8:	4611      	mov	r1, r2
 801c2da:	2200      	movs	r2, #0
 801c2dc:	602a      	str	r2, [r5, #0]
 801c2de:	461a      	mov	r2, r3
 801c2e0:	f7e5 ffdb 	bl	800229a <_lseek>
 801c2e4:	1c43      	adds	r3, r0, #1
 801c2e6:	d102      	bne.n	801c2ee <_lseek_r+0x1e>
 801c2e8:	682b      	ldr	r3, [r5, #0]
 801c2ea:	b103      	cbz	r3, 801c2ee <_lseek_r+0x1e>
 801c2ec:	6023      	str	r3, [r4, #0]
 801c2ee:	bd38      	pop	{r3, r4, r5, pc}
 801c2f0:	2000e85c 	.word	0x2000e85c

0801c2f4 <_read_r>:
 801c2f4:	b538      	push	{r3, r4, r5, lr}
 801c2f6:	4d07      	ldr	r5, [pc, #28]	@ (801c314 <_read_r+0x20>)
 801c2f8:	4604      	mov	r4, r0
 801c2fa:	4608      	mov	r0, r1
 801c2fc:	4611      	mov	r1, r2
 801c2fe:	2200      	movs	r2, #0
 801c300:	602a      	str	r2, [r5, #0]
 801c302:	461a      	mov	r2, r3
 801c304:	f7e5 ff69 	bl	80021da <_read>
 801c308:	1c43      	adds	r3, r0, #1
 801c30a:	d102      	bne.n	801c312 <_read_r+0x1e>
 801c30c:	682b      	ldr	r3, [r5, #0]
 801c30e:	b103      	cbz	r3, 801c312 <_read_r+0x1e>
 801c310:	6023      	str	r3, [r4, #0]
 801c312:	bd38      	pop	{r3, r4, r5, pc}
 801c314:	2000e85c 	.word	0x2000e85c

0801c318 <_sbrk_r>:
 801c318:	b538      	push	{r3, r4, r5, lr}
 801c31a:	4d06      	ldr	r5, [pc, #24]	@ (801c334 <_sbrk_r+0x1c>)
 801c31c:	2300      	movs	r3, #0
 801c31e:	4604      	mov	r4, r0
 801c320:	4608      	mov	r0, r1
 801c322:	602b      	str	r3, [r5, #0]
 801c324:	f7e5 ffc6 	bl	80022b4 <_sbrk>
 801c328:	1c43      	adds	r3, r0, #1
 801c32a:	d102      	bne.n	801c332 <_sbrk_r+0x1a>
 801c32c:	682b      	ldr	r3, [r5, #0]
 801c32e:	b103      	cbz	r3, 801c332 <_sbrk_r+0x1a>
 801c330:	6023      	str	r3, [r4, #0]
 801c332:	bd38      	pop	{r3, r4, r5, pc}
 801c334:	2000e85c 	.word	0x2000e85c

0801c338 <_write_r>:
 801c338:	b538      	push	{r3, r4, r5, lr}
 801c33a:	4d07      	ldr	r5, [pc, #28]	@ (801c358 <_write_r+0x20>)
 801c33c:	4604      	mov	r4, r0
 801c33e:	4608      	mov	r0, r1
 801c340:	4611      	mov	r1, r2
 801c342:	2200      	movs	r2, #0
 801c344:	602a      	str	r2, [r5, #0]
 801c346:	461a      	mov	r2, r3
 801c348:	f7e5 ff64 	bl	8002214 <_write>
 801c34c:	1c43      	adds	r3, r0, #1
 801c34e:	d102      	bne.n	801c356 <_write_r+0x1e>
 801c350:	682b      	ldr	r3, [r5, #0]
 801c352:	b103      	cbz	r3, 801c356 <_write_r+0x1e>
 801c354:	6023      	str	r3, [r4, #0]
 801c356:	bd38      	pop	{r3, r4, r5, pc}
 801c358:	2000e85c 	.word	0x2000e85c

0801c35c <__errno>:
 801c35c:	4b01      	ldr	r3, [pc, #4]	@ (801c364 <__errno+0x8>)
 801c35e:	6818      	ldr	r0, [r3, #0]
 801c360:	4770      	bx	lr
 801c362:	bf00      	nop
 801c364:	2000030c 	.word	0x2000030c

0801c368 <__libc_init_array>:
 801c368:	b570      	push	{r4, r5, r6, lr}
 801c36a:	4d0d      	ldr	r5, [pc, #52]	@ (801c3a0 <__libc_init_array+0x38>)
 801c36c:	4c0d      	ldr	r4, [pc, #52]	@ (801c3a4 <__libc_init_array+0x3c>)
 801c36e:	1b64      	subs	r4, r4, r5
 801c370:	10a4      	asrs	r4, r4, #2
 801c372:	2600      	movs	r6, #0
 801c374:	42a6      	cmp	r6, r4
 801c376:	d109      	bne.n	801c38c <__libc_init_array+0x24>
 801c378:	4d0b      	ldr	r5, [pc, #44]	@ (801c3a8 <__libc_init_array+0x40>)
 801c37a:	4c0c      	ldr	r4, [pc, #48]	@ (801c3ac <__libc_init_array+0x44>)
 801c37c:	f000 fef6 	bl	801d16c <_init>
 801c380:	1b64      	subs	r4, r4, r5
 801c382:	10a4      	asrs	r4, r4, #2
 801c384:	2600      	movs	r6, #0
 801c386:	42a6      	cmp	r6, r4
 801c388:	d105      	bne.n	801c396 <__libc_init_array+0x2e>
 801c38a:	bd70      	pop	{r4, r5, r6, pc}
 801c38c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c390:	4798      	blx	r3
 801c392:	3601      	adds	r6, #1
 801c394:	e7ee      	b.n	801c374 <__libc_init_array+0xc>
 801c396:	f855 3b04 	ldr.w	r3, [r5], #4
 801c39a:	4798      	blx	r3
 801c39c:	3601      	adds	r6, #1
 801c39e:	e7f2      	b.n	801c386 <__libc_init_array+0x1e>
 801c3a0:	0801e16c 	.word	0x0801e16c
 801c3a4:	0801e16c 	.word	0x0801e16c
 801c3a8:	0801e16c 	.word	0x0801e16c
 801c3ac:	0801e17c 	.word	0x0801e17c

0801c3b0 <__retarget_lock_init_recursive>:
 801c3b0:	4770      	bx	lr

0801c3b2 <__retarget_lock_acquire_recursive>:
 801c3b2:	4770      	bx	lr

0801c3b4 <__retarget_lock_release_recursive>:
 801c3b4:	4770      	bx	lr

0801c3b6 <strcpy>:
 801c3b6:	4603      	mov	r3, r0
 801c3b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c3bc:	f803 2b01 	strb.w	r2, [r3], #1
 801c3c0:	2a00      	cmp	r2, #0
 801c3c2:	d1f9      	bne.n	801c3b8 <strcpy+0x2>
 801c3c4:	4770      	bx	lr

0801c3c6 <memcpy>:
 801c3c6:	440a      	add	r2, r1
 801c3c8:	4291      	cmp	r1, r2
 801c3ca:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801c3ce:	d100      	bne.n	801c3d2 <memcpy+0xc>
 801c3d0:	4770      	bx	lr
 801c3d2:	b510      	push	{r4, lr}
 801c3d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c3d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c3dc:	4291      	cmp	r1, r2
 801c3de:	d1f9      	bne.n	801c3d4 <memcpy+0xe>
 801c3e0:	bd10      	pop	{r4, pc}
	...

0801c3e4 <__assert_func>:
 801c3e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c3e6:	4614      	mov	r4, r2
 801c3e8:	461a      	mov	r2, r3
 801c3ea:	4b09      	ldr	r3, [pc, #36]	@ (801c410 <__assert_func+0x2c>)
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	4605      	mov	r5, r0
 801c3f0:	68d8      	ldr	r0, [r3, #12]
 801c3f2:	b14c      	cbz	r4, 801c408 <__assert_func+0x24>
 801c3f4:	4b07      	ldr	r3, [pc, #28]	@ (801c414 <__assert_func+0x30>)
 801c3f6:	9100      	str	r1, [sp, #0]
 801c3f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c3fc:	4906      	ldr	r1, [pc, #24]	@ (801c418 <__assert_func+0x34>)
 801c3fe:	462b      	mov	r3, r5
 801c400:	f000 fd3e 	bl	801ce80 <fiprintf>
 801c404:	f000 fde2 	bl	801cfcc <abort>
 801c408:	4b04      	ldr	r3, [pc, #16]	@ (801c41c <__assert_func+0x38>)
 801c40a:	461c      	mov	r4, r3
 801c40c:	e7f3      	b.n	801c3f6 <__assert_func+0x12>
 801c40e:	bf00      	nop
 801c410:	2000030c 	.word	0x2000030c
 801c414:	0801dff3 	.word	0x0801dff3
 801c418:	0801e000 	.word	0x0801e000
 801c41c:	0801e02e 	.word	0x0801e02e

0801c420 <__env_lock>:
 801c420:	4801      	ldr	r0, [pc, #4]	@ (801c428 <__env_lock+0x8>)
 801c422:	f7ff bfc6 	b.w	801c3b2 <__retarget_lock_acquire_recursive>
 801c426:	bf00      	nop
 801c428:	2000e860 	.word	0x2000e860

0801c42c <__env_unlock>:
 801c42c:	4801      	ldr	r0, [pc, #4]	@ (801c434 <__env_unlock+0x8>)
 801c42e:	f7ff bfc1 	b.w	801c3b4 <__retarget_lock_release_recursive>
 801c432:	bf00      	nop
 801c434:	2000e860 	.word	0x2000e860

0801c438 <_free_r>:
 801c438:	b538      	push	{r3, r4, r5, lr}
 801c43a:	4605      	mov	r5, r0
 801c43c:	2900      	cmp	r1, #0
 801c43e:	d041      	beq.n	801c4c4 <_free_r+0x8c>
 801c440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c444:	1f0c      	subs	r4, r1, #4
 801c446:	2b00      	cmp	r3, #0
 801c448:	bfb8      	it	lt
 801c44a:	18e4      	addlt	r4, r4, r3
 801c44c:	f7ff fc18 	bl	801bc80 <__malloc_lock>
 801c450:	4a1d      	ldr	r2, [pc, #116]	@ (801c4c8 <_free_r+0x90>)
 801c452:	6813      	ldr	r3, [r2, #0]
 801c454:	b933      	cbnz	r3, 801c464 <_free_r+0x2c>
 801c456:	6063      	str	r3, [r4, #4]
 801c458:	6014      	str	r4, [r2, #0]
 801c45a:	4628      	mov	r0, r5
 801c45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c460:	f7ff bc14 	b.w	801bc8c <__malloc_unlock>
 801c464:	42a3      	cmp	r3, r4
 801c466:	d908      	bls.n	801c47a <_free_r+0x42>
 801c468:	6820      	ldr	r0, [r4, #0]
 801c46a:	1821      	adds	r1, r4, r0
 801c46c:	428b      	cmp	r3, r1
 801c46e:	bf01      	itttt	eq
 801c470:	6819      	ldreq	r1, [r3, #0]
 801c472:	685b      	ldreq	r3, [r3, #4]
 801c474:	1809      	addeq	r1, r1, r0
 801c476:	6021      	streq	r1, [r4, #0]
 801c478:	e7ed      	b.n	801c456 <_free_r+0x1e>
 801c47a:	461a      	mov	r2, r3
 801c47c:	685b      	ldr	r3, [r3, #4]
 801c47e:	b10b      	cbz	r3, 801c484 <_free_r+0x4c>
 801c480:	42a3      	cmp	r3, r4
 801c482:	d9fa      	bls.n	801c47a <_free_r+0x42>
 801c484:	6811      	ldr	r1, [r2, #0]
 801c486:	1850      	adds	r0, r2, r1
 801c488:	42a0      	cmp	r0, r4
 801c48a:	d10b      	bne.n	801c4a4 <_free_r+0x6c>
 801c48c:	6820      	ldr	r0, [r4, #0]
 801c48e:	4401      	add	r1, r0
 801c490:	1850      	adds	r0, r2, r1
 801c492:	4283      	cmp	r3, r0
 801c494:	6011      	str	r1, [r2, #0]
 801c496:	d1e0      	bne.n	801c45a <_free_r+0x22>
 801c498:	6818      	ldr	r0, [r3, #0]
 801c49a:	685b      	ldr	r3, [r3, #4]
 801c49c:	6053      	str	r3, [r2, #4]
 801c49e:	4408      	add	r0, r1
 801c4a0:	6010      	str	r0, [r2, #0]
 801c4a2:	e7da      	b.n	801c45a <_free_r+0x22>
 801c4a4:	d902      	bls.n	801c4ac <_free_r+0x74>
 801c4a6:	230c      	movs	r3, #12
 801c4a8:	602b      	str	r3, [r5, #0]
 801c4aa:	e7d6      	b.n	801c45a <_free_r+0x22>
 801c4ac:	6820      	ldr	r0, [r4, #0]
 801c4ae:	1821      	adds	r1, r4, r0
 801c4b0:	428b      	cmp	r3, r1
 801c4b2:	bf04      	itt	eq
 801c4b4:	6819      	ldreq	r1, [r3, #0]
 801c4b6:	685b      	ldreq	r3, [r3, #4]
 801c4b8:	6063      	str	r3, [r4, #4]
 801c4ba:	bf04      	itt	eq
 801c4bc:	1809      	addeq	r1, r1, r0
 801c4be:	6021      	streq	r1, [r4, #0]
 801c4c0:	6054      	str	r4, [r2, #4]
 801c4c2:	e7ca      	b.n	801c45a <_free_r+0x22>
 801c4c4:	bd38      	pop	{r3, r4, r5, pc}
 801c4c6:	bf00      	nop
 801c4c8:	2000e71c 	.word	0x2000e71c

0801c4cc <_malloc_usable_size_r>:
 801c4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c4d0:	1f18      	subs	r0, r3, #4
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	bfbc      	itt	lt
 801c4d6:	580b      	ldrlt	r3, [r1, r0]
 801c4d8:	18c0      	addlt	r0, r0, r3
 801c4da:	4770      	bx	lr

0801c4dc <__ssputs_r>:
 801c4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c4e0:	688e      	ldr	r6, [r1, #8]
 801c4e2:	461f      	mov	r7, r3
 801c4e4:	42be      	cmp	r6, r7
 801c4e6:	680b      	ldr	r3, [r1, #0]
 801c4e8:	4682      	mov	sl, r0
 801c4ea:	460c      	mov	r4, r1
 801c4ec:	4690      	mov	r8, r2
 801c4ee:	d82d      	bhi.n	801c54c <__ssputs_r+0x70>
 801c4f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c4f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c4f8:	d026      	beq.n	801c548 <__ssputs_r+0x6c>
 801c4fa:	6965      	ldr	r5, [r4, #20]
 801c4fc:	6909      	ldr	r1, [r1, #16]
 801c4fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c502:	eba3 0901 	sub.w	r9, r3, r1
 801c506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c50a:	1c7b      	adds	r3, r7, #1
 801c50c:	444b      	add	r3, r9
 801c50e:	106d      	asrs	r5, r5, #1
 801c510:	429d      	cmp	r5, r3
 801c512:	bf38      	it	cc
 801c514:	461d      	movcc	r5, r3
 801c516:	0553      	lsls	r3, r2, #21
 801c518:	d527      	bpl.n	801c56a <__ssputs_r+0x8e>
 801c51a:	4629      	mov	r1, r5
 801c51c:	f7ff fb30 	bl	801bb80 <_malloc_r>
 801c520:	4606      	mov	r6, r0
 801c522:	b360      	cbz	r0, 801c57e <__ssputs_r+0xa2>
 801c524:	6921      	ldr	r1, [r4, #16]
 801c526:	464a      	mov	r2, r9
 801c528:	f7ff ff4d 	bl	801c3c6 <memcpy>
 801c52c:	89a3      	ldrh	r3, [r4, #12]
 801c52e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c536:	81a3      	strh	r3, [r4, #12]
 801c538:	6126      	str	r6, [r4, #16]
 801c53a:	6165      	str	r5, [r4, #20]
 801c53c:	444e      	add	r6, r9
 801c53e:	eba5 0509 	sub.w	r5, r5, r9
 801c542:	6026      	str	r6, [r4, #0]
 801c544:	60a5      	str	r5, [r4, #8]
 801c546:	463e      	mov	r6, r7
 801c548:	42be      	cmp	r6, r7
 801c54a:	d900      	bls.n	801c54e <__ssputs_r+0x72>
 801c54c:	463e      	mov	r6, r7
 801c54e:	6820      	ldr	r0, [r4, #0]
 801c550:	4632      	mov	r2, r6
 801c552:	4641      	mov	r1, r8
 801c554:	f7ff fe54 	bl	801c200 <memmove>
 801c558:	68a3      	ldr	r3, [r4, #8]
 801c55a:	1b9b      	subs	r3, r3, r6
 801c55c:	60a3      	str	r3, [r4, #8]
 801c55e:	6823      	ldr	r3, [r4, #0]
 801c560:	4433      	add	r3, r6
 801c562:	6023      	str	r3, [r4, #0]
 801c564:	2000      	movs	r0, #0
 801c566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c56a:	462a      	mov	r2, r5
 801c56c:	f7ff fc08 	bl	801bd80 <_realloc_r>
 801c570:	4606      	mov	r6, r0
 801c572:	2800      	cmp	r0, #0
 801c574:	d1e0      	bne.n	801c538 <__ssputs_r+0x5c>
 801c576:	6921      	ldr	r1, [r4, #16]
 801c578:	4650      	mov	r0, sl
 801c57a:	f7ff ff5d 	bl	801c438 <_free_r>
 801c57e:	230c      	movs	r3, #12
 801c580:	f8ca 3000 	str.w	r3, [sl]
 801c584:	89a3      	ldrh	r3, [r4, #12]
 801c586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c58a:	81a3      	strh	r3, [r4, #12]
 801c58c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c590:	e7e9      	b.n	801c566 <__ssputs_r+0x8a>
	...

0801c594 <_svfiprintf_r>:
 801c594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c598:	4698      	mov	r8, r3
 801c59a:	898b      	ldrh	r3, [r1, #12]
 801c59c:	061b      	lsls	r3, r3, #24
 801c59e:	b09d      	sub	sp, #116	@ 0x74
 801c5a0:	4607      	mov	r7, r0
 801c5a2:	460d      	mov	r5, r1
 801c5a4:	4614      	mov	r4, r2
 801c5a6:	d510      	bpl.n	801c5ca <_svfiprintf_r+0x36>
 801c5a8:	690b      	ldr	r3, [r1, #16]
 801c5aa:	b973      	cbnz	r3, 801c5ca <_svfiprintf_r+0x36>
 801c5ac:	2140      	movs	r1, #64	@ 0x40
 801c5ae:	f7ff fae7 	bl	801bb80 <_malloc_r>
 801c5b2:	6028      	str	r0, [r5, #0]
 801c5b4:	6128      	str	r0, [r5, #16]
 801c5b6:	b930      	cbnz	r0, 801c5c6 <_svfiprintf_r+0x32>
 801c5b8:	230c      	movs	r3, #12
 801c5ba:	603b      	str	r3, [r7, #0]
 801c5bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c5c0:	b01d      	add	sp, #116	@ 0x74
 801c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5c6:	2340      	movs	r3, #64	@ 0x40
 801c5c8:	616b      	str	r3, [r5, #20]
 801c5ca:	2300      	movs	r3, #0
 801c5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5ce:	2320      	movs	r3, #32
 801c5d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 801c5d8:	2330      	movs	r3, #48	@ 0x30
 801c5da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c778 <_svfiprintf_r+0x1e4>
 801c5de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c5e2:	f04f 0901 	mov.w	r9, #1
 801c5e6:	4623      	mov	r3, r4
 801c5e8:	469a      	mov	sl, r3
 801c5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c5ee:	b10a      	cbz	r2, 801c5f4 <_svfiprintf_r+0x60>
 801c5f0:	2a25      	cmp	r2, #37	@ 0x25
 801c5f2:	d1f9      	bne.n	801c5e8 <_svfiprintf_r+0x54>
 801c5f4:	ebba 0b04 	subs.w	fp, sl, r4
 801c5f8:	d00b      	beq.n	801c612 <_svfiprintf_r+0x7e>
 801c5fa:	465b      	mov	r3, fp
 801c5fc:	4622      	mov	r2, r4
 801c5fe:	4629      	mov	r1, r5
 801c600:	4638      	mov	r0, r7
 801c602:	f7ff ff6b 	bl	801c4dc <__ssputs_r>
 801c606:	3001      	adds	r0, #1
 801c608:	f000 80a7 	beq.w	801c75a <_svfiprintf_r+0x1c6>
 801c60c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c60e:	445a      	add	r2, fp
 801c610:	9209      	str	r2, [sp, #36]	@ 0x24
 801c612:	f89a 3000 	ldrb.w	r3, [sl]
 801c616:	2b00      	cmp	r3, #0
 801c618:	f000 809f 	beq.w	801c75a <_svfiprintf_r+0x1c6>
 801c61c:	2300      	movs	r3, #0
 801c61e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c626:	f10a 0a01 	add.w	sl, sl, #1
 801c62a:	9304      	str	r3, [sp, #16]
 801c62c:	9307      	str	r3, [sp, #28]
 801c62e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c632:	931a      	str	r3, [sp, #104]	@ 0x68
 801c634:	4654      	mov	r4, sl
 801c636:	2205      	movs	r2, #5
 801c638:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c63c:	484e      	ldr	r0, [pc, #312]	@ (801c778 <_svfiprintf_r+0x1e4>)
 801c63e:	f7e3 fddf 	bl	8000200 <memchr>
 801c642:	9a04      	ldr	r2, [sp, #16]
 801c644:	b9d8      	cbnz	r0, 801c67e <_svfiprintf_r+0xea>
 801c646:	06d0      	lsls	r0, r2, #27
 801c648:	bf44      	itt	mi
 801c64a:	2320      	movmi	r3, #32
 801c64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c650:	0711      	lsls	r1, r2, #28
 801c652:	bf44      	itt	mi
 801c654:	232b      	movmi	r3, #43	@ 0x2b
 801c656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c65a:	f89a 3000 	ldrb.w	r3, [sl]
 801c65e:	2b2a      	cmp	r3, #42	@ 0x2a
 801c660:	d015      	beq.n	801c68e <_svfiprintf_r+0xfa>
 801c662:	9a07      	ldr	r2, [sp, #28]
 801c664:	4654      	mov	r4, sl
 801c666:	2000      	movs	r0, #0
 801c668:	f04f 0c0a 	mov.w	ip, #10
 801c66c:	4621      	mov	r1, r4
 801c66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c672:	3b30      	subs	r3, #48	@ 0x30
 801c674:	2b09      	cmp	r3, #9
 801c676:	d94b      	bls.n	801c710 <_svfiprintf_r+0x17c>
 801c678:	b1b0      	cbz	r0, 801c6a8 <_svfiprintf_r+0x114>
 801c67a:	9207      	str	r2, [sp, #28]
 801c67c:	e014      	b.n	801c6a8 <_svfiprintf_r+0x114>
 801c67e:	eba0 0308 	sub.w	r3, r0, r8
 801c682:	fa09 f303 	lsl.w	r3, r9, r3
 801c686:	4313      	orrs	r3, r2
 801c688:	9304      	str	r3, [sp, #16]
 801c68a:	46a2      	mov	sl, r4
 801c68c:	e7d2      	b.n	801c634 <_svfiprintf_r+0xa0>
 801c68e:	9b03      	ldr	r3, [sp, #12]
 801c690:	1d19      	adds	r1, r3, #4
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	9103      	str	r1, [sp, #12]
 801c696:	2b00      	cmp	r3, #0
 801c698:	bfbb      	ittet	lt
 801c69a:	425b      	neglt	r3, r3
 801c69c:	f042 0202 	orrlt.w	r2, r2, #2
 801c6a0:	9307      	strge	r3, [sp, #28]
 801c6a2:	9307      	strlt	r3, [sp, #28]
 801c6a4:	bfb8      	it	lt
 801c6a6:	9204      	strlt	r2, [sp, #16]
 801c6a8:	7823      	ldrb	r3, [r4, #0]
 801c6aa:	2b2e      	cmp	r3, #46	@ 0x2e
 801c6ac:	d10a      	bne.n	801c6c4 <_svfiprintf_r+0x130>
 801c6ae:	7863      	ldrb	r3, [r4, #1]
 801c6b0:	2b2a      	cmp	r3, #42	@ 0x2a
 801c6b2:	d132      	bne.n	801c71a <_svfiprintf_r+0x186>
 801c6b4:	9b03      	ldr	r3, [sp, #12]
 801c6b6:	1d1a      	adds	r2, r3, #4
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	9203      	str	r2, [sp, #12]
 801c6bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c6c0:	3402      	adds	r4, #2
 801c6c2:	9305      	str	r3, [sp, #20]
 801c6c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c788 <_svfiprintf_r+0x1f4>
 801c6c8:	7821      	ldrb	r1, [r4, #0]
 801c6ca:	2203      	movs	r2, #3
 801c6cc:	4650      	mov	r0, sl
 801c6ce:	f7e3 fd97 	bl	8000200 <memchr>
 801c6d2:	b138      	cbz	r0, 801c6e4 <_svfiprintf_r+0x150>
 801c6d4:	9b04      	ldr	r3, [sp, #16]
 801c6d6:	eba0 000a 	sub.w	r0, r0, sl
 801c6da:	2240      	movs	r2, #64	@ 0x40
 801c6dc:	4082      	lsls	r2, r0
 801c6de:	4313      	orrs	r3, r2
 801c6e0:	3401      	adds	r4, #1
 801c6e2:	9304      	str	r3, [sp, #16]
 801c6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c6e8:	4824      	ldr	r0, [pc, #144]	@ (801c77c <_svfiprintf_r+0x1e8>)
 801c6ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c6ee:	2206      	movs	r2, #6
 801c6f0:	f7e3 fd86 	bl	8000200 <memchr>
 801c6f4:	2800      	cmp	r0, #0
 801c6f6:	d036      	beq.n	801c766 <_svfiprintf_r+0x1d2>
 801c6f8:	4b21      	ldr	r3, [pc, #132]	@ (801c780 <_svfiprintf_r+0x1ec>)
 801c6fa:	bb1b      	cbnz	r3, 801c744 <_svfiprintf_r+0x1b0>
 801c6fc:	9b03      	ldr	r3, [sp, #12]
 801c6fe:	3307      	adds	r3, #7
 801c700:	f023 0307 	bic.w	r3, r3, #7
 801c704:	3308      	adds	r3, #8
 801c706:	9303      	str	r3, [sp, #12]
 801c708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c70a:	4433      	add	r3, r6
 801c70c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c70e:	e76a      	b.n	801c5e6 <_svfiprintf_r+0x52>
 801c710:	fb0c 3202 	mla	r2, ip, r2, r3
 801c714:	460c      	mov	r4, r1
 801c716:	2001      	movs	r0, #1
 801c718:	e7a8      	b.n	801c66c <_svfiprintf_r+0xd8>
 801c71a:	2300      	movs	r3, #0
 801c71c:	3401      	adds	r4, #1
 801c71e:	9305      	str	r3, [sp, #20]
 801c720:	4619      	mov	r1, r3
 801c722:	f04f 0c0a 	mov.w	ip, #10
 801c726:	4620      	mov	r0, r4
 801c728:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c72c:	3a30      	subs	r2, #48	@ 0x30
 801c72e:	2a09      	cmp	r2, #9
 801c730:	d903      	bls.n	801c73a <_svfiprintf_r+0x1a6>
 801c732:	2b00      	cmp	r3, #0
 801c734:	d0c6      	beq.n	801c6c4 <_svfiprintf_r+0x130>
 801c736:	9105      	str	r1, [sp, #20]
 801c738:	e7c4      	b.n	801c6c4 <_svfiprintf_r+0x130>
 801c73a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c73e:	4604      	mov	r4, r0
 801c740:	2301      	movs	r3, #1
 801c742:	e7f0      	b.n	801c726 <_svfiprintf_r+0x192>
 801c744:	ab03      	add	r3, sp, #12
 801c746:	9300      	str	r3, [sp, #0]
 801c748:	462a      	mov	r2, r5
 801c74a:	4b0e      	ldr	r3, [pc, #56]	@ (801c784 <_svfiprintf_r+0x1f0>)
 801c74c:	a904      	add	r1, sp, #16
 801c74e:	4638      	mov	r0, r7
 801c750:	f3af 8000 	nop.w
 801c754:	1c42      	adds	r2, r0, #1
 801c756:	4606      	mov	r6, r0
 801c758:	d1d6      	bne.n	801c708 <_svfiprintf_r+0x174>
 801c75a:	89ab      	ldrh	r3, [r5, #12]
 801c75c:	065b      	lsls	r3, r3, #25
 801c75e:	f53f af2d 	bmi.w	801c5bc <_svfiprintf_r+0x28>
 801c762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c764:	e72c      	b.n	801c5c0 <_svfiprintf_r+0x2c>
 801c766:	ab03      	add	r3, sp, #12
 801c768:	9300      	str	r3, [sp, #0]
 801c76a:	462a      	mov	r2, r5
 801c76c:	4b05      	ldr	r3, [pc, #20]	@ (801c784 <_svfiprintf_r+0x1f0>)
 801c76e:	a904      	add	r1, sp, #16
 801c770:	4638      	mov	r0, r7
 801c772:	f000 f9bb 	bl	801caec <_printf_i>
 801c776:	e7ed      	b.n	801c754 <_svfiprintf_r+0x1c0>
 801c778:	0801e02f 	.word	0x0801e02f
 801c77c:	0801e039 	.word	0x0801e039
 801c780:	00000000 	.word	0x00000000
 801c784:	0801c4dd 	.word	0x0801c4dd
 801c788:	0801e035 	.word	0x0801e035

0801c78c <__sfputc_r>:
 801c78c:	6893      	ldr	r3, [r2, #8]
 801c78e:	3b01      	subs	r3, #1
 801c790:	2b00      	cmp	r3, #0
 801c792:	b410      	push	{r4}
 801c794:	6093      	str	r3, [r2, #8]
 801c796:	da08      	bge.n	801c7aa <__sfputc_r+0x1e>
 801c798:	6994      	ldr	r4, [r2, #24]
 801c79a:	42a3      	cmp	r3, r4
 801c79c:	db01      	blt.n	801c7a2 <__sfputc_r+0x16>
 801c79e:	290a      	cmp	r1, #10
 801c7a0:	d103      	bne.n	801c7aa <__sfputc_r+0x1e>
 801c7a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c7a6:	f000 bb7d 	b.w	801cea4 <__swbuf_r>
 801c7aa:	6813      	ldr	r3, [r2, #0]
 801c7ac:	1c58      	adds	r0, r3, #1
 801c7ae:	6010      	str	r0, [r2, #0]
 801c7b0:	7019      	strb	r1, [r3, #0]
 801c7b2:	4608      	mov	r0, r1
 801c7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c7b8:	4770      	bx	lr

0801c7ba <__sfputs_r>:
 801c7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7bc:	4606      	mov	r6, r0
 801c7be:	460f      	mov	r7, r1
 801c7c0:	4614      	mov	r4, r2
 801c7c2:	18d5      	adds	r5, r2, r3
 801c7c4:	42ac      	cmp	r4, r5
 801c7c6:	d101      	bne.n	801c7cc <__sfputs_r+0x12>
 801c7c8:	2000      	movs	r0, #0
 801c7ca:	e007      	b.n	801c7dc <__sfputs_r+0x22>
 801c7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c7d0:	463a      	mov	r2, r7
 801c7d2:	4630      	mov	r0, r6
 801c7d4:	f7ff ffda 	bl	801c78c <__sfputc_r>
 801c7d8:	1c43      	adds	r3, r0, #1
 801c7da:	d1f3      	bne.n	801c7c4 <__sfputs_r+0xa>
 801c7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c7e0 <_vfiprintf_r>:
 801c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7e4:	460d      	mov	r5, r1
 801c7e6:	b09d      	sub	sp, #116	@ 0x74
 801c7e8:	4614      	mov	r4, r2
 801c7ea:	4698      	mov	r8, r3
 801c7ec:	4606      	mov	r6, r0
 801c7ee:	b118      	cbz	r0, 801c7f8 <_vfiprintf_r+0x18>
 801c7f0:	6a03      	ldr	r3, [r0, #32]
 801c7f2:	b90b      	cbnz	r3, 801c7f8 <_vfiprintf_r+0x18>
 801c7f4:	f7ff fbf6 	bl	801bfe4 <__sinit>
 801c7f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c7fa:	07d9      	lsls	r1, r3, #31
 801c7fc:	d405      	bmi.n	801c80a <_vfiprintf_r+0x2a>
 801c7fe:	89ab      	ldrh	r3, [r5, #12]
 801c800:	059a      	lsls	r2, r3, #22
 801c802:	d402      	bmi.n	801c80a <_vfiprintf_r+0x2a>
 801c804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c806:	f7ff fdd4 	bl	801c3b2 <__retarget_lock_acquire_recursive>
 801c80a:	89ab      	ldrh	r3, [r5, #12]
 801c80c:	071b      	lsls	r3, r3, #28
 801c80e:	d501      	bpl.n	801c814 <_vfiprintf_r+0x34>
 801c810:	692b      	ldr	r3, [r5, #16]
 801c812:	b99b      	cbnz	r3, 801c83c <_vfiprintf_r+0x5c>
 801c814:	4629      	mov	r1, r5
 801c816:	4630      	mov	r0, r6
 801c818:	f000 fb82 	bl	801cf20 <__swsetup_r>
 801c81c:	b170      	cbz	r0, 801c83c <_vfiprintf_r+0x5c>
 801c81e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c820:	07dc      	lsls	r4, r3, #31
 801c822:	d504      	bpl.n	801c82e <_vfiprintf_r+0x4e>
 801c824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c828:	b01d      	add	sp, #116	@ 0x74
 801c82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c82e:	89ab      	ldrh	r3, [r5, #12]
 801c830:	0598      	lsls	r0, r3, #22
 801c832:	d4f7      	bmi.n	801c824 <_vfiprintf_r+0x44>
 801c834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c836:	f7ff fdbd 	bl	801c3b4 <__retarget_lock_release_recursive>
 801c83a:	e7f3      	b.n	801c824 <_vfiprintf_r+0x44>
 801c83c:	2300      	movs	r3, #0
 801c83e:	9309      	str	r3, [sp, #36]	@ 0x24
 801c840:	2320      	movs	r3, #32
 801c842:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c846:	f8cd 800c 	str.w	r8, [sp, #12]
 801c84a:	2330      	movs	r3, #48	@ 0x30
 801c84c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c9fc <_vfiprintf_r+0x21c>
 801c850:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c854:	f04f 0901 	mov.w	r9, #1
 801c858:	4623      	mov	r3, r4
 801c85a:	469a      	mov	sl, r3
 801c85c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c860:	b10a      	cbz	r2, 801c866 <_vfiprintf_r+0x86>
 801c862:	2a25      	cmp	r2, #37	@ 0x25
 801c864:	d1f9      	bne.n	801c85a <_vfiprintf_r+0x7a>
 801c866:	ebba 0b04 	subs.w	fp, sl, r4
 801c86a:	d00b      	beq.n	801c884 <_vfiprintf_r+0xa4>
 801c86c:	465b      	mov	r3, fp
 801c86e:	4622      	mov	r2, r4
 801c870:	4629      	mov	r1, r5
 801c872:	4630      	mov	r0, r6
 801c874:	f7ff ffa1 	bl	801c7ba <__sfputs_r>
 801c878:	3001      	adds	r0, #1
 801c87a:	f000 80a7 	beq.w	801c9cc <_vfiprintf_r+0x1ec>
 801c87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c880:	445a      	add	r2, fp
 801c882:	9209      	str	r2, [sp, #36]	@ 0x24
 801c884:	f89a 3000 	ldrb.w	r3, [sl]
 801c888:	2b00      	cmp	r3, #0
 801c88a:	f000 809f 	beq.w	801c9cc <_vfiprintf_r+0x1ec>
 801c88e:	2300      	movs	r3, #0
 801c890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c898:	f10a 0a01 	add.w	sl, sl, #1
 801c89c:	9304      	str	r3, [sp, #16]
 801c89e:	9307      	str	r3, [sp, #28]
 801c8a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c8a4:	931a      	str	r3, [sp, #104]	@ 0x68
 801c8a6:	4654      	mov	r4, sl
 801c8a8:	2205      	movs	r2, #5
 801c8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c8ae:	4853      	ldr	r0, [pc, #332]	@ (801c9fc <_vfiprintf_r+0x21c>)
 801c8b0:	f7e3 fca6 	bl	8000200 <memchr>
 801c8b4:	9a04      	ldr	r2, [sp, #16]
 801c8b6:	b9d8      	cbnz	r0, 801c8f0 <_vfiprintf_r+0x110>
 801c8b8:	06d1      	lsls	r1, r2, #27
 801c8ba:	bf44      	itt	mi
 801c8bc:	2320      	movmi	r3, #32
 801c8be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c8c2:	0713      	lsls	r3, r2, #28
 801c8c4:	bf44      	itt	mi
 801c8c6:	232b      	movmi	r3, #43	@ 0x2b
 801c8c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c8cc:	f89a 3000 	ldrb.w	r3, [sl]
 801c8d0:	2b2a      	cmp	r3, #42	@ 0x2a
 801c8d2:	d015      	beq.n	801c900 <_vfiprintf_r+0x120>
 801c8d4:	9a07      	ldr	r2, [sp, #28]
 801c8d6:	4654      	mov	r4, sl
 801c8d8:	2000      	movs	r0, #0
 801c8da:	f04f 0c0a 	mov.w	ip, #10
 801c8de:	4621      	mov	r1, r4
 801c8e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c8e4:	3b30      	subs	r3, #48	@ 0x30
 801c8e6:	2b09      	cmp	r3, #9
 801c8e8:	d94b      	bls.n	801c982 <_vfiprintf_r+0x1a2>
 801c8ea:	b1b0      	cbz	r0, 801c91a <_vfiprintf_r+0x13a>
 801c8ec:	9207      	str	r2, [sp, #28]
 801c8ee:	e014      	b.n	801c91a <_vfiprintf_r+0x13a>
 801c8f0:	eba0 0308 	sub.w	r3, r0, r8
 801c8f4:	fa09 f303 	lsl.w	r3, r9, r3
 801c8f8:	4313      	orrs	r3, r2
 801c8fa:	9304      	str	r3, [sp, #16]
 801c8fc:	46a2      	mov	sl, r4
 801c8fe:	e7d2      	b.n	801c8a6 <_vfiprintf_r+0xc6>
 801c900:	9b03      	ldr	r3, [sp, #12]
 801c902:	1d19      	adds	r1, r3, #4
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	9103      	str	r1, [sp, #12]
 801c908:	2b00      	cmp	r3, #0
 801c90a:	bfbb      	ittet	lt
 801c90c:	425b      	neglt	r3, r3
 801c90e:	f042 0202 	orrlt.w	r2, r2, #2
 801c912:	9307      	strge	r3, [sp, #28]
 801c914:	9307      	strlt	r3, [sp, #28]
 801c916:	bfb8      	it	lt
 801c918:	9204      	strlt	r2, [sp, #16]
 801c91a:	7823      	ldrb	r3, [r4, #0]
 801c91c:	2b2e      	cmp	r3, #46	@ 0x2e
 801c91e:	d10a      	bne.n	801c936 <_vfiprintf_r+0x156>
 801c920:	7863      	ldrb	r3, [r4, #1]
 801c922:	2b2a      	cmp	r3, #42	@ 0x2a
 801c924:	d132      	bne.n	801c98c <_vfiprintf_r+0x1ac>
 801c926:	9b03      	ldr	r3, [sp, #12]
 801c928:	1d1a      	adds	r2, r3, #4
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	9203      	str	r2, [sp, #12]
 801c92e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c932:	3402      	adds	r4, #2
 801c934:	9305      	str	r3, [sp, #20]
 801c936:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ca0c <_vfiprintf_r+0x22c>
 801c93a:	7821      	ldrb	r1, [r4, #0]
 801c93c:	2203      	movs	r2, #3
 801c93e:	4650      	mov	r0, sl
 801c940:	f7e3 fc5e 	bl	8000200 <memchr>
 801c944:	b138      	cbz	r0, 801c956 <_vfiprintf_r+0x176>
 801c946:	9b04      	ldr	r3, [sp, #16]
 801c948:	eba0 000a 	sub.w	r0, r0, sl
 801c94c:	2240      	movs	r2, #64	@ 0x40
 801c94e:	4082      	lsls	r2, r0
 801c950:	4313      	orrs	r3, r2
 801c952:	3401      	adds	r4, #1
 801c954:	9304      	str	r3, [sp, #16]
 801c956:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c95a:	4829      	ldr	r0, [pc, #164]	@ (801ca00 <_vfiprintf_r+0x220>)
 801c95c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c960:	2206      	movs	r2, #6
 801c962:	f7e3 fc4d 	bl	8000200 <memchr>
 801c966:	2800      	cmp	r0, #0
 801c968:	d03f      	beq.n	801c9ea <_vfiprintf_r+0x20a>
 801c96a:	4b26      	ldr	r3, [pc, #152]	@ (801ca04 <_vfiprintf_r+0x224>)
 801c96c:	bb1b      	cbnz	r3, 801c9b6 <_vfiprintf_r+0x1d6>
 801c96e:	9b03      	ldr	r3, [sp, #12]
 801c970:	3307      	adds	r3, #7
 801c972:	f023 0307 	bic.w	r3, r3, #7
 801c976:	3308      	adds	r3, #8
 801c978:	9303      	str	r3, [sp, #12]
 801c97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c97c:	443b      	add	r3, r7
 801c97e:	9309      	str	r3, [sp, #36]	@ 0x24
 801c980:	e76a      	b.n	801c858 <_vfiprintf_r+0x78>
 801c982:	fb0c 3202 	mla	r2, ip, r2, r3
 801c986:	460c      	mov	r4, r1
 801c988:	2001      	movs	r0, #1
 801c98a:	e7a8      	b.n	801c8de <_vfiprintf_r+0xfe>
 801c98c:	2300      	movs	r3, #0
 801c98e:	3401      	adds	r4, #1
 801c990:	9305      	str	r3, [sp, #20]
 801c992:	4619      	mov	r1, r3
 801c994:	f04f 0c0a 	mov.w	ip, #10
 801c998:	4620      	mov	r0, r4
 801c99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c99e:	3a30      	subs	r2, #48	@ 0x30
 801c9a0:	2a09      	cmp	r2, #9
 801c9a2:	d903      	bls.n	801c9ac <_vfiprintf_r+0x1cc>
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d0c6      	beq.n	801c936 <_vfiprintf_r+0x156>
 801c9a8:	9105      	str	r1, [sp, #20]
 801c9aa:	e7c4      	b.n	801c936 <_vfiprintf_r+0x156>
 801c9ac:	fb0c 2101 	mla	r1, ip, r1, r2
 801c9b0:	4604      	mov	r4, r0
 801c9b2:	2301      	movs	r3, #1
 801c9b4:	e7f0      	b.n	801c998 <_vfiprintf_r+0x1b8>
 801c9b6:	ab03      	add	r3, sp, #12
 801c9b8:	9300      	str	r3, [sp, #0]
 801c9ba:	462a      	mov	r2, r5
 801c9bc:	4b12      	ldr	r3, [pc, #72]	@ (801ca08 <_vfiprintf_r+0x228>)
 801c9be:	a904      	add	r1, sp, #16
 801c9c0:	4630      	mov	r0, r6
 801c9c2:	f3af 8000 	nop.w
 801c9c6:	4607      	mov	r7, r0
 801c9c8:	1c78      	adds	r0, r7, #1
 801c9ca:	d1d6      	bne.n	801c97a <_vfiprintf_r+0x19a>
 801c9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c9ce:	07d9      	lsls	r1, r3, #31
 801c9d0:	d405      	bmi.n	801c9de <_vfiprintf_r+0x1fe>
 801c9d2:	89ab      	ldrh	r3, [r5, #12]
 801c9d4:	059a      	lsls	r2, r3, #22
 801c9d6:	d402      	bmi.n	801c9de <_vfiprintf_r+0x1fe>
 801c9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c9da:	f7ff fceb 	bl	801c3b4 <__retarget_lock_release_recursive>
 801c9de:	89ab      	ldrh	r3, [r5, #12]
 801c9e0:	065b      	lsls	r3, r3, #25
 801c9e2:	f53f af1f 	bmi.w	801c824 <_vfiprintf_r+0x44>
 801c9e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c9e8:	e71e      	b.n	801c828 <_vfiprintf_r+0x48>
 801c9ea:	ab03      	add	r3, sp, #12
 801c9ec:	9300      	str	r3, [sp, #0]
 801c9ee:	462a      	mov	r2, r5
 801c9f0:	4b05      	ldr	r3, [pc, #20]	@ (801ca08 <_vfiprintf_r+0x228>)
 801c9f2:	a904      	add	r1, sp, #16
 801c9f4:	4630      	mov	r0, r6
 801c9f6:	f000 f879 	bl	801caec <_printf_i>
 801c9fa:	e7e4      	b.n	801c9c6 <_vfiprintf_r+0x1e6>
 801c9fc:	0801e02f 	.word	0x0801e02f
 801ca00:	0801e039 	.word	0x0801e039
 801ca04:	00000000 	.word	0x00000000
 801ca08:	0801c7bb 	.word	0x0801c7bb
 801ca0c:	0801e035 	.word	0x0801e035

0801ca10 <_printf_common>:
 801ca10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca14:	4616      	mov	r6, r2
 801ca16:	4698      	mov	r8, r3
 801ca18:	688a      	ldr	r2, [r1, #8]
 801ca1a:	690b      	ldr	r3, [r1, #16]
 801ca1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ca20:	4293      	cmp	r3, r2
 801ca22:	bfb8      	it	lt
 801ca24:	4613      	movlt	r3, r2
 801ca26:	6033      	str	r3, [r6, #0]
 801ca28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ca2c:	4607      	mov	r7, r0
 801ca2e:	460c      	mov	r4, r1
 801ca30:	b10a      	cbz	r2, 801ca36 <_printf_common+0x26>
 801ca32:	3301      	adds	r3, #1
 801ca34:	6033      	str	r3, [r6, #0]
 801ca36:	6823      	ldr	r3, [r4, #0]
 801ca38:	0699      	lsls	r1, r3, #26
 801ca3a:	bf42      	ittt	mi
 801ca3c:	6833      	ldrmi	r3, [r6, #0]
 801ca3e:	3302      	addmi	r3, #2
 801ca40:	6033      	strmi	r3, [r6, #0]
 801ca42:	6825      	ldr	r5, [r4, #0]
 801ca44:	f015 0506 	ands.w	r5, r5, #6
 801ca48:	d106      	bne.n	801ca58 <_printf_common+0x48>
 801ca4a:	f104 0a19 	add.w	sl, r4, #25
 801ca4e:	68e3      	ldr	r3, [r4, #12]
 801ca50:	6832      	ldr	r2, [r6, #0]
 801ca52:	1a9b      	subs	r3, r3, r2
 801ca54:	42ab      	cmp	r3, r5
 801ca56:	dc26      	bgt.n	801caa6 <_printf_common+0x96>
 801ca58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ca5c:	6822      	ldr	r2, [r4, #0]
 801ca5e:	3b00      	subs	r3, #0
 801ca60:	bf18      	it	ne
 801ca62:	2301      	movne	r3, #1
 801ca64:	0692      	lsls	r2, r2, #26
 801ca66:	d42b      	bmi.n	801cac0 <_printf_common+0xb0>
 801ca68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ca6c:	4641      	mov	r1, r8
 801ca6e:	4638      	mov	r0, r7
 801ca70:	47c8      	blx	r9
 801ca72:	3001      	adds	r0, #1
 801ca74:	d01e      	beq.n	801cab4 <_printf_common+0xa4>
 801ca76:	6823      	ldr	r3, [r4, #0]
 801ca78:	6922      	ldr	r2, [r4, #16]
 801ca7a:	f003 0306 	and.w	r3, r3, #6
 801ca7e:	2b04      	cmp	r3, #4
 801ca80:	bf02      	ittt	eq
 801ca82:	68e5      	ldreq	r5, [r4, #12]
 801ca84:	6833      	ldreq	r3, [r6, #0]
 801ca86:	1aed      	subeq	r5, r5, r3
 801ca88:	68a3      	ldr	r3, [r4, #8]
 801ca8a:	bf0c      	ite	eq
 801ca8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ca90:	2500      	movne	r5, #0
 801ca92:	4293      	cmp	r3, r2
 801ca94:	bfc4      	itt	gt
 801ca96:	1a9b      	subgt	r3, r3, r2
 801ca98:	18ed      	addgt	r5, r5, r3
 801ca9a:	2600      	movs	r6, #0
 801ca9c:	341a      	adds	r4, #26
 801ca9e:	42b5      	cmp	r5, r6
 801caa0:	d11a      	bne.n	801cad8 <_printf_common+0xc8>
 801caa2:	2000      	movs	r0, #0
 801caa4:	e008      	b.n	801cab8 <_printf_common+0xa8>
 801caa6:	2301      	movs	r3, #1
 801caa8:	4652      	mov	r2, sl
 801caaa:	4641      	mov	r1, r8
 801caac:	4638      	mov	r0, r7
 801caae:	47c8      	blx	r9
 801cab0:	3001      	adds	r0, #1
 801cab2:	d103      	bne.n	801cabc <_printf_common+0xac>
 801cab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cabc:	3501      	adds	r5, #1
 801cabe:	e7c6      	b.n	801ca4e <_printf_common+0x3e>
 801cac0:	18e1      	adds	r1, r4, r3
 801cac2:	1c5a      	adds	r2, r3, #1
 801cac4:	2030      	movs	r0, #48	@ 0x30
 801cac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801caca:	4422      	add	r2, r4
 801cacc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cad0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cad4:	3302      	adds	r3, #2
 801cad6:	e7c7      	b.n	801ca68 <_printf_common+0x58>
 801cad8:	2301      	movs	r3, #1
 801cada:	4622      	mov	r2, r4
 801cadc:	4641      	mov	r1, r8
 801cade:	4638      	mov	r0, r7
 801cae0:	47c8      	blx	r9
 801cae2:	3001      	adds	r0, #1
 801cae4:	d0e6      	beq.n	801cab4 <_printf_common+0xa4>
 801cae6:	3601      	adds	r6, #1
 801cae8:	e7d9      	b.n	801ca9e <_printf_common+0x8e>
	...

0801caec <_printf_i>:
 801caec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801caf0:	7e0f      	ldrb	r7, [r1, #24]
 801caf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801caf4:	2f78      	cmp	r7, #120	@ 0x78
 801caf6:	4691      	mov	r9, r2
 801caf8:	4680      	mov	r8, r0
 801cafa:	460c      	mov	r4, r1
 801cafc:	469a      	mov	sl, r3
 801cafe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cb02:	d807      	bhi.n	801cb14 <_printf_i+0x28>
 801cb04:	2f62      	cmp	r7, #98	@ 0x62
 801cb06:	d80a      	bhi.n	801cb1e <_printf_i+0x32>
 801cb08:	2f00      	cmp	r7, #0
 801cb0a:	f000 80d1 	beq.w	801ccb0 <_printf_i+0x1c4>
 801cb0e:	2f58      	cmp	r7, #88	@ 0x58
 801cb10:	f000 80b8 	beq.w	801cc84 <_printf_i+0x198>
 801cb14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cb18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cb1c:	e03a      	b.n	801cb94 <_printf_i+0xa8>
 801cb1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cb22:	2b15      	cmp	r3, #21
 801cb24:	d8f6      	bhi.n	801cb14 <_printf_i+0x28>
 801cb26:	a101      	add	r1, pc, #4	@ (adr r1, 801cb2c <_printf_i+0x40>)
 801cb28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cb2c:	0801cb85 	.word	0x0801cb85
 801cb30:	0801cb99 	.word	0x0801cb99
 801cb34:	0801cb15 	.word	0x0801cb15
 801cb38:	0801cb15 	.word	0x0801cb15
 801cb3c:	0801cb15 	.word	0x0801cb15
 801cb40:	0801cb15 	.word	0x0801cb15
 801cb44:	0801cb99 	.word	0x0801cb99
 801cb48:	0801cb15 	.word	0x0801cb15
 801cb4c:	0801cb15 	.word	0x0801cb15
 801cb50:	0801cb15 	.word	0x0801cb15
 801cb54:	0801cb15 	.word	0x0801cb15
 801cb58:	0801cc97 	.word	0x0801cc97
 801cb5c:	0801cbc3 	.word	0x0801cbc3
 801cb60:	0801cc51 	.word	0x0801cc51
 801cb64:	0801cb15 	.word	0x0801cb15
 801cb68:	0801cb15 	.word	0x0801cb15
 801cb6c:	0801ccb9 	.word	0x0801ccb9
 801cb70:	0801cb15 	.word	0x0801cb15
 801cb74:	0801cbc3 	.word	0x0801cbc3
 801cb78:	0801cb15 	.word	0x0801cb15
 801cb7c:	0801cb15 	.word	0x0801cb15
 801cb80:	0801cc59 	.word	0x0801cc59
 801cb84:	6833      	ldr	r3, [r6, #0]
 801cb86:	1d1a      	adds	r2, r3, #4
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	6032      	str	r2, [r6, #0]
 801cb8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cb90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801cb94:	2301      	movs	r3, #1
 801cb96:	e09c      	b.n	801ccd2 <_printf_i+0x1e6>
 801cb98:	6833      	ldr	r3, [r6, #0]
 801cb9a:	6820      	ldr	r0, [r4, #0]
 801cb9c:	1d19      	adds	r1, r3, #4
 801cb9e:	6031      	str	r1, [r6, #0]
 801cba0:	0606      	lsls	r6, r0, #24
 801cba2:	d501      	bpl.n	801cba8 <_printf_i+0xbc>
 801cba4:	681d      	ldr	r5, [r3, #0]
 801cba6:	e003      	b.n	801cbb0 <_printf_i+0xc4>
 801cba8:	0645      	lsls	r5, r0, #25
 801cbaa:	d5fb      	bpl.n	801cba4 <_printf_i+0xb8>
 801cbac:	f9b3 5000 	ldrsh.w	r5, [r3]
 801cbb0:	2d00      	cmp	r5, #0
 801cbb2:	da03      	bge.n	801cbbc <_printf_i+0xd0>
 801cbb4:	232d      	movs	r3, #45	@ 0x2d
 801cbb6:	426d      	negs	r5, r5
 801cbb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cbbc:	4858      	ldr	r0, [pc, #352]	@ (801cd20 <_printf_i+0x234>)
 801cbbe:	230a      	movs	r3, #10
 801cbc0:	e011      	b.n	801cbe6 <_printf_i+0xfa>
 801cbc2:	6821      	ldr	r1, [r4, #0]
 801cbc4:	6833      	ldr	r3, [r6, #0]
 801cbc6:	0608      	lsls	r0, r1, #24
 801cbc8:	f853 5b04 	ldr.w	r5, [r3], #4
 801cbcc:	d402      	bmi.n	801cbd4 <_printf_i+0xe8>
 801cbce:	0649      	lsls	r1, r1, #25
 801cbd0:	bf48      	it	mi
 801cbd2:	b2ad      	uxthmi	r5, r5
 801cbd4:	2f6f      	cmp	r7, #111	@ 0x6f
 801cbd6:	4852      	ldr	r0, [pc, #328]	@ (801cd20 <_printf_i+0x234>)
 801cbd8:	6033      	str	r3, [r6, #0]
 801cbda:	bf14      	ite	ne
 801cbdc:	230a      	movne	r3, #10
 801cbde:	2308      	moveq	r3, #8
 801cbe0:	2100      	movs	r1, #0
 801cbe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801cbe6:	6866      	ldr	r6, [r4, #4]
 801cbe8:	60a6      	str	r6, [r4, #8]
 801cbea:	2e00      	cmp	r6, #0
 801cbec:	db05      	blt.n	801cbfa <_printf_i+0x10e>
 801cbee:	6821      	ldr	r1, [r4, #0]
 801cbf0:	432e      	orrs	r6, r5
 801cbf2:	f021 0104 	bic.w	r1, r1, #4
 801cbf6:	6021      	str	r1, [r4, #0]
 801cbf8:	d04b      	beq.n	801cc92 <_printf_i+0x1a6>
 801cbfa:	4616      	mov	r6, r2
 801cbfc:	fbb5 f1f3 	udiv	r1, r5, r3
 801cc00:	fb03 5711 	mls	r7, r3, r1, r5
 801cc04:	5dc7      	ldrb	r7, [r0, r7]
 801cc06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cc0a:	462f      	mov	r7, r5
 801cc0c:	42bb      	cmp	r3, r7
 801cc0e:	460d      	mov	r5, r1
 801cc10:	d9f4      	bls.n	801cbfc <_printf_i+0x110>
 801cc12:	2b08      	cmp	r3, #8
 801cc14:	d10b      	bne.n	801cc2e <_printf_i+0x142>
 801cc16:	6823      	ldr	r3, [r4, #0]
 801cc18:	07df      	lsls	r7, r3, #31
 801cc1a:	d508      	bpl.n	801cc2e <_printf_i+0x142>
 801cc1c:	6923      	ldr	r3, [r4, #16]
 801cc1e:	6861      	ldr	r1, [r4, #4]
 801cc20:	4299      	cmp	r1, r3
 801cc22:	bfde      	ittt	le
 801cc24:	2330      	movle	r3, #48	@ 0x30
 801cc26:	f806 3c01 	strble.w	r3, [r6, #-1]
 801cc2a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801cc2e:	1b92      	subs	r2, r2, r6
 801cc30:	6122      	str	r2, [r4, #16]
 801cc32:	f8cd a000 	str.w	sl, [sp]
 801cc36:	464b      	mov	r3, r9
 801cc38:	aa03      	add	r2, sp, #12
 801cc3a:	4621      	mov	r1, r4
 801cc3c:	4640      	mov	r0, r8
 801cc3e:	f7ff fee7 	bl	801ca10 <_printf_common>
 801cc42:	3001      	adds	r0, #1
 801cc44:	d14a      	bne.n	801ccdc <_printf_i+0x1f0>
 801cc46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cc4a:	b004      	add	sp, #16
 801cc4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc50:	6823      	ldr	r3, [r4, #0]
 801cc52:	f043 0320 	orr.w	r3, r3, #32
 801cc56:	6023      	str	r3, [r4, #0]
 801cc58:	4832      	ldr	r0, [pc, #200]	@ (801cd24 <_printf_i+0x238>)
 801cc5a:	2778      	movs	r7, #120	@ 0x78
 801cc5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801cc60:	6823      	ldr	r3, [r4, #0]
 801cc62:	6831      	ldr	r1, [r6, #0]
 801cc64:	061f      	lsls	r7, r3, #24
 801cc66:	f851 5b04 	ldr.w	r5, [r1], #4
 801cc6a:	d402      	bmi.n	801cc72 <_printf_i+0x186>
 801cc6c:	065f      	lsls	r7, r3, #25
 801cc6e:	bf48      	it	mi
 801cc70:	b2ad      	uxthmi	r5, r5
 801cc72:	6031      	str	r1, [r6, #0]
 801cc74:	07d9      	lsls	r1, r3, #31
 801cc76:	bf44      	itt	mi
 801cc78:	f043 0320 	orrmi.w	r3, r3, #32
 801cc7c:	6023      	strmi	r3, [r4, #0]
 801cc7e:	b11d      	cbz	r5, 801cc88 <_printf_i+0x19c>
 801cc80:	2310      	movs	r3, #16
 801cc82:	e7ad      	b.n	801cbe0 <_printf_i+0xf4>
 801cc84:	4826      	ldr	r0, [pc, #152]	@ (801cd20 <_printf_i+0x234>)
 801cc86:	e7e9      	b.n	801cc5c <_printf_i+0x170>
 801cc88:	6823      	ldr	r3, [r4, #0]
 801cc8a:	f023 0320 	bic.w	r3, r3, #32
 801cc8e:	6023      	str	r3, [r4, #0]
 801cc90:	e7f6      	b.n	801cc80 <_printf_i+0x194>
 801cc92:	4616      	mov	r6, r2
 801cc94:	e7bd      	b.n	801cc12 <_printf_i+0x126>
 801cc96:	6833      	ldr	r3, [r6, #0]
 801cc98:	6825      	ldr	r5, [r4, #0]
 801cc9a:	6961      	ldr	r1, [r4, #20]
 801cc9c:	1d18      	adds	r0, r3, #4
 801cc9e:	6030      	str	r0, [r6, #0]
 801cca0:	062e      	lsls	r6, r5, #24
 801cca2:	681b      	ldr	r3, [r3, #0]
 801cca4:	d501      	bpl.n	801ccaa <_printf_i+0x1be>
 801cca6:	6019      	str	r1, [r3, #0]
 801cca8:	e002      	b.n	801ccb0 <_printf_i+0x1c4>
 801ccaa:	0668      	lsls	r0, r5, #25
 801ccac:	d5fb      	bpl.n	801cca6 <_printf_i+0x1ba>
 801ccae:	8019      	strh	r1, [r3, #0]
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	6123      	str	r3, [r4, #16]
 801ccb4:	4616      	mov	r6, r2
 801ccb6:	e7bc      	b.n	801cc32 <_printf_i+0x146>
 801ccb8:	6833      	ldr	r3, [r6, #0]
 801ccba:	1d1a      	adds	r2, r3, #4
 801ccbc:	6032      	str	r2, [r6, #0]
 801ccbe:	681e      	ldr	r6, [r3, #0]
 801ccc0:	6862      	ldr	r2, [r4, #4]
 801ccc2:	2100      	movs	r1, #0
 801ccc4:	4630      	mov	r0, r6
 801ccc6:	f7e3 fa9b 	bl	8000200 <memchr>
 801ccca:	b108      	cbz	r0, 801ccd0 <_printf_i+0x1e4>
 801cccc:	1b80      	subs	r0, r0, r6
 801ccce:	6060      	str	r0, [r4, #4]
 801ccd0:	6863      	ldr	r3, [r4, #4]
 801ccd2:	6123      	str	r3, [r4, #16]
 801ccd4:	2300      	movs	r3, #0
 801ccd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ccda:	e7aa      	b.n	801cc32 <_printf_i+0x146>
 801ccdc:	6923      	ldr	r3, [r4, #16]
 801ccde:	4632      	mov	r2, r6
 801cce0:	4649      	mov	r1, r9
 801cce2:	4640      	mov	r0, r8
 801cce4:	47d0      	blx	sl
 801cce6:	3001      	adds	r0, #1
 801cce8:	d0ad      	beq.n	801cc46 <_printf_i+0x15a>
 801ccea:	6823      	ldr	r3, [r4, #0]
 801ccec:	079b      	lsls	r3, r3, #30
 801ccee:	d413      	bmi.n	801cd18 <_printf_i+0x22c>
 801ccf0:	68e0      	ldr	r0, [r4, #12]
 801ccf2:	9b03      	ldr	r3, [sp, #12]
 801ccf4:	4298      	cmp	r0, r3
 801ccf6:	bfb8      	it	lt
 801ccf8:	4618      	movlt	r0, r3
 801ccfa:	e7a6      	b.n	801cc4a <_printf_i+0x15e>
 801ccfc:	2301      	movs	r3, #1
 801ccfe:	4632      	mov	r2, r6
 801cd00:	4649      	mov	r1, r9
 801cd02:	4640      	mov	r0, r8
 801cd04:	47d0      	blx	sl
 801cd06:	3001      	adds	r0, #1
 801cd08:	d09d      	beq.n	801cc46 <_printf_i+0x15a>
 801cd0a:	3501      	adds	r5, #1
 801cd0c:	68e3      	ldr	r3, [r4, #12]
 801cd0e:	9903      	ldr	r1, [sp, #12]
 801cd10:	1a5b      	subs	r3, r3, r1
 801cd12:	42ab      	cmp	r3, r5
 801cd14:	dcf2      	bgt.n	801ccfc <_printf_i+0x210>
 801cd16:	e7eb      	b.n	801ccf0 <_printf_i+0x204>
 801cd18:	2500      	movs	r5, #0
 801cd1a:	f104 0619 	add.w	r6, r4, #25
 801cd1e:	e7f5      	b.n	801cd0c <_printf_i+0x220>
 801cd20:	0801e040 	.word	0x0801e040
 801cd24:	0801e051 	.word	0x0801e051

0801cd28 <__sflush_r>:
 801cd28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cd2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd30:	0716      	lsls	r6, r2, #28
 801cd32:	4605      	mov	r5, r0
 801cd34:	460c      	mov	r4, r1
 801cd36:	d454      	bmi.n	801cde2 <__sflush_r+0xba>
 801cd38:	684b      	ldr	r3, [r1, #4]
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	dc02      	bgt.n	801cd44 <__sflush_r+0x1c>
 801cd3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	dd48      	ble.n	801cdd6 <__sflush_r+0xae>
 801cd44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cd46:	2e00      	cmp	r6, #0
 801cd48:	d045      	beq.n	801cdd6 <__sflush_r+0xae>
 801cd4a:	2300      	movs	r3, #0
 801cd4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cd50:	682f      	ldr	r7, [r5, #0]
 801cd52:	6a21      	ldr	r1, [r4, #32]
 801cd54:	602b      	str	r3, [r5, #0]
 801cd56:	d030      	beq.n	801cdba <__sflush_r+0x92>
 801cd58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cd5a:	89a3      	ldrh	r3, [r4, #12]
 801cd5c:	0759      	lsls	r1, r3, #29
 801cd5e:	d505      	bpl.n	801cd6c <__sflush_r+0x44>
 801cd60:	6863      	ldr	r3, [r4, #4]
 801cd62:	1ad2      	subs	r2, r2, r3
 801cd64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cd66:	b10b      	cbz	r3, 801cd6c <__sflush_r+0x44>
 801cd68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cd6a:	1ad2      	subs	r2, r2, r3
 801cd6c:	2300      	movs	r3, #0
 801cd6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cd70:	6a21      	ldr	r1, [r4, #32]
 801cd72:	4628      	mov	r0, r5
 801cd74:	47b0      	blx	r6
 801cd76:	1c43      	adds	r3, r0, #1
 801cd78:	89a3      	ldrh	r3, [r4, #12]
 801cd7a:	d106      	bne.n	801cd8a <__sflush_r+0x62>
 801cd7c:	6829      	ldr	r1, [r5, #0]
 801cd7e:	291d      	cmp	r1, #29
 801cd80:	d82b      	bhi.n	801cdda <__sflush_r+0xb2>
 801cd82:	4a2a      	ldr	r2, [pc, #168]	@ (801ce2c <__sflush_r+0x104>)
 801cd84:	40ca      	lsrs	r2, r1
 801cd86:	07d6      	lsls	r6, r2, #31
 801cd88:	d527      	bpl.n	801cdda <__sflush_r+0xb2>
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	6062      	str	r2, [r4, #4]
 801cd8e:	04d9      	lsls	r1, r3, #19
 801cd90:	6922      	ldr	r2, [r4, #16]
 801cd92:	6022      	str	r2, [r4, #0]
 801cd94:	d504      	bpl.n	801cda0 <__sflush_r+0x78>
 801cd96:	1c42      	adds	r2, r0, #1
 801cd98:	d101      	bne.n	801cd9e <__sflush_r+0x76>
 801cd9a:	682b      	ldr	r3, [r5, #0]
 801cd9c:	b903      	cbnz	r3, 801cda0 <__sflush_r+0x78>
 801cd9e:	6560      	str	r0, [r4, #84]	@ 0x54
 801cda0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cda2:	602f      	str	r7, [r5, #0]
 801cda4:	b1b9      	cbz	r1, 801cdd6 <__sflush_r+0xae>
 801cda6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cdaa:	4299      	cmp	r1, r3
 801cdac:	d002      	beq.n	801cdb4 <__sflush_r+0x8c>
 801cdae:	4628      	mov	r0, r5
 801cdb0:	f7ff fb42 	bl	801c438 <_free_r>
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	6363      	str	r3, [r4, #52]	@ 0x34
 801cdb8:	e00d      	b.n	801cdd6 <__sflush_r+0xae>
 801cdba:	2301      	movs	r3, #1
 801cdbc:	4628      	mov	r0, r5
 801cdbe:	47b0      	blx	r6
 801cdc0:	4602      	mov	r2, r0
 801cdc2:	1c50      	adds	r0, r2, #1
 801cdc4:	d1c9      	bne.n	801cd5a <__sflush_r+0x32>
 801cdc6:	682b      	ldr	r3, [r5, #0]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d0c6      	beq.n	801cd5a <__sflush_r+0x32>
 801cdcc:	2b1d      	cmp	r3, #29
 801cdce:	d001      	beq.n	801cdd4 <__sflush_r+0xac>
 801cdd0:	2b16      	cmp	r3, #22
 801cdd2:	d11e      	bne.n	801ce12 <__sflush_r+0xea>
 801cdd4:	602f      	str	r7, [r5, #0]
 801cdd6:	2000      	movs	r0, #0
 801cdd8:	e022      	b.n	801ce20 <__sflush_r+0xf8>
 801cdda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cdde:	b21b      	sxth	r3, r3
 801cde0:	e01b      	b.n	801ce1a <__sflush_r+0xf2>
 801cde2:	690f      	ldr	r7, [r1, #16]
 801cde4:	2f00      	cmp	r7, #0
 801cde6:	d0f6      	beq.n	801cdd6 <__sflush_r+0xae>
 801cde8:	0793      	lsls	r3, r2, #30
 801cdea:	680e      	ldr	r6, [r1, #0]
 801cdec:	bf08      	it	eq
 801cdee:	694b      	ldreq	r3, [r1, #20]
 801cdf0:	600f      	str	r7, [r1, #0]
 801cdf2:	bf18      	it	ne
 801cdf4:	2300      	movne	r3, #0
 801cdf6:	eba6 0807 	sub.w	r8, r6, r7
 801cdfa:	608b      	str	r3, [r1, #8]
 801cdfc:	f1b8 0f00 	cmp.w	r8, #0
 801ce00:	dde9      	ble.n	801cdd6 <__sflush_r+0xae>
 801ce02:	6a21      	ldr	r1, [r4, #32]
 801ce04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ce06:	4643      	mov	r3, r8
 801ce08:	463a      	mov	r2, r7
 801ce0a:	4628      	mov	r0, r5
 801ce0c:	47b0      	blx	r6
 801ce0e:	2800      	cmp	r0, #0
 801ce10:	dc08      	bgt.n	801ce24 <__sflush_r+0xfc>
 801ce12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce1a:	81a3      	strh	r3, [r4, #12]
 801ce1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce24:	4407      	add	r7, r0
 801ce26:	eba8 0800 	sub.w	r8, r8, r0
 801ce2a:	e7e7      	b.n	801cdfc <__sflush_r+0xd4>
 801ce2c:	20400001 	.word	0x20400001

0801ce30 <_fflush_r>:
 801ce30:	b538      	push	{r3, r4, r5, lr}
 801ce32:	690b      	ldr	r3, [r1, #16]
 801ce34:	4605      	mov	r5, r0
 801ce36:	460c      	mov	r4, r1
 801ce38:	b913      	cbnz	r3, 801ce40 <_fflush_r+0x10>
 801ce3a:	2500      	movs	r5, #0
 801ce3c:	4628      	mov	r0, r5
 801ce3e:	bd38      	pop	{r3, r4, r5, pc}
 801ce40:	b118      	cbz	r0, 801ce4a <_fflush_r+0x1a>
 801ce42:	6a03      	ldr	r3, [r0, #32]
 801ce44:	b90b      	cbnz	r3, 801ce4a <_fflush_r+0x1a>
 801ce46:	f7ff f8cd 	bl	801bfe4 <__sinit>
 801ce4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce4e:	2b00      	cmp	r3, #0
 801ce50:	d0f3      	beq.n	801ce3a <_fflush_r+0xa>
 801ce52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ce54:	07d0      	lsls	r0, r2, #31
 801ce56:	d404      	bmi.n	801ce62 <_fflush_r+0x32>
 801ce58:	0599      	lsls	r1, r3, #22
 801ce5a:	d402      	bmi.n	801ce62 <_fflush_r+0x32>
 801ce5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce5e:	f7ff faa8 	bl	801c3b2 <__retarget_lock_acquire_recursive>
 801ce62:	4628      	mov	r0, r5
 801ce64:	4621      	mov	r1, r4
 801ce66:	f7ff ff5f 	bl	801cd28 <__sflush_r>
 801ce6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ce6c:	07da      	lsls	r2, r3, #31
 801ce6e:	4605      	mov	r5, r0
 801ce70:	d4e4      	bmi.n	801ce3c <_fflush_r+0xc>
 801ce72:	89a3      	ldrh	r3, [r4, #12]
 801ce74:	059b      	lsls	r3, r3, #22
 801ce76:	d4e1      	bmi.n	801ce3c <_fflush_r+0xc>
 801ce78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ce7a:	f7ff fa9b 	bl	801c3b4 <__retarget_lock_release_recursive>
 801ce7e:	e7dd      	b.n	801ce3c <_fflush_r+0xc>

0801ce80 <fiprintf>:
 801ce80:	b40e      	push	{r1, r2, r3}
 801ce82:	b503      	push	{r0, r1, lr}
 801ce84:	4601      	mov	r1, r0
 801ce86:	ab03      	add	r3, sp, #12
 801ce88:	4805      	ldr	r0, [pc, #20]	@ (801cea0 <fiprintf+0x20>)
 801ce8a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce8e:	6800      	ldr	r0, [r0, #0]
 801ce90:	9301      	str	r3, [sp, #4]
 801ce92:	f7ff fca5 	bl	801c7e0 <_vfiprintf_r>
 801ce96:	b002      	add	sp, #8
 801ce98:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce9c:	b003      	add	sp, #12
 801ce9e:	4770      	bx	lr
 801cea0:	2000030c 	.word	0x2000030c

0801cea4 <__swbuf_r>:
 801cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cea6:	460e      	mov	r6, r1
 801cea8:	4614      	mov	r4, r2
 801ceaa:	4605      	mov	r5, r0
 801ceac:	b118      	cbz	r0, 801ceb6 <__swbuf_r+0x12>
 801ceae:	6a03      	ldr	r3, [r0, #32]
 801ceb0:	b90b      	cbnz	r3, 801ceb6 <__swbuf_r+0x12>
 801ceb2:	f7ff f897 	bl	801bfe4 <__sinit>
 801ceb6:	69a3      	ldr	r3, [r4, #24]
 801ceb8:	60a3      	str	r3, [r4, #8]
 801ceba:	89a3      	ldrh	r3, [r4, #12]
 801cebc:	071a      	lsls	r2, r3, #28
 801cebe:	d501      	bpl.n	801cec4 <__swbuf_r+0x20>
 801cec0:	6923      	ldr	r3, [r4, #16]
 801cec2:	b943      	cbnz	r3, 801ced6 <__swbuf_r+0x32>
 801cec4:	4621      	mov	r1, r4
 801cec6:	4628      	mov	r0, r5
 801cec8:	f000 f82a 	bl	801cf20 <__swsetup_r>
 801cecc:	b118      	cbz	r0, 801ced6 <__swbuf_r+0x32>
 801cece:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801ced2:	4638      	mov	r0, r7
 801ced4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ced6:	6823      	ldr	r3, [r4, #0]
 801ced8:	6922      	ldr	r2, [r4, #16]
 801ceda:	1a98      	subs	r0, r3, r2
 801cedc:	6963      	ldr	r3, [r4, #20]
 801cede:	b2f6      	uxtb	r6, r6
 801cee0:	4283      	cmp	r3, r0
 801cee2:	4637      	mov	r7, r6
 801cee4:	dc05      	bgt.n	801cef2 <__swbuf_r+0x4e>
 801cee6:	4621      	mov	r1, r4
 801cee8:	4628      	mov	r0, r5
 801ceea:	f7ff ffa1 	bl	801ce30 <_fflush_r>
 801ceee:	2800      	cmp	r0, #0
 801cef0:	d1ed      	bne.n	801cece <__swbuf_r+0x2a>
 801cef2:	68a3      	ldr	r3, [r4, #8]
 801cef4:	3b01      	subs	r3, #1
 801cef6:	60a3      	str	r3, [r4, #8]
 801cef8:	6823      	ldr	r3, [r4, #0]
 801cefa:	1c5a      	adds	r2, r3, #1
 801cefc:	6022      	str	r2, [r4, #0]
 801cefe:	701e      	strb	r6, [r3, #0]
 801cf00:	6962      	ldr	r2, [r4, #20]
 801cf02:	1c43      	adds	r3, r0, #1
 801cf04:	429a      	cmp	r2, r3
 801cf06:	d004      	beq.n	801cf12 <__swbuf_r+0x6e>
 801cf08:	89a3      	ldrh	r3, [r4, #12]
 801cf0a:	07db      	lsls	r3, r3, #31
 801cf0c:	d5e1      	bpl.n	801ced2 <__swbuf_r+0x2e>
 801cf0e:	2e0a      	cmp	r6, #10
 801cf10:	d1df      	bne.n	801ced2 <__swbuf_r+0x2e>
 801cf12:	4621      	mov	r1, r4
 801cf14:	4628      	mov	r0, r5
 801cf16:	f7ff ff8b 	bl	801ce30 <_fflush_r>
 801cf1a:	2800      	cmp	r0, #0
 801cf1c:	d0d9      	beq.n	801ced2 <__swbuf_r+0x2e>
 801cf1e:	e7d6      	b.n	801cece <__swbuf_r+0x2a>

0801cf20 <__swsetup_r>:
 801cf20:	b538      	push	{r3, r4, r5, lr}
 801cf22:	4b29      	ldr	r3, [pc, #164]	@ (801cfc8 <__swsetup_r+0xa8>)
 801cf24:	4605      	mov	r5, r0
 801cf26:	6818      	ldr	r0, [r3, #0]
 801cf28:	460c      	mov	r4, r1
 801cf2a:	b118      	cbz	r0, 801cf34 <__swsetup_r+0x14>
 801cf2c:	6a03      	ldr	r3, [r0, #32]
 801cf2e:	b90b      	cbnz	r3, 801cf34 <__swsetup_r+0x14>
 801cf30:	f7ff f858 	bl	801bfe4 <__sinit>
 801cf34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf38:	0719      	lsls	r1, r3, #28
 801cf3a:	d422      	bmi.n	801cf82 <__swsetup_r+0x62>
 801cf3c:	06da      	lsls	r2, r3, #27
 801cf3e:	d407      	bmi.n	801cf50 <__swsetup_r+0x30>
 801cf40:	2209      	movs	r2, #9
 801cf42:	602a      	str	r2, [r5, #0]
 801cf44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cf48:	81a3      	strh	r3, [r4, #12]
 801cf4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf4e:	e033      	b.n	801cfb8 <__swsetup_r+0x98>
 801cf50:	0758      	lsls	r0, r3, #29
 801cf52:	d512      	bpl.n	801cf7a <__swsetup_r+0x5a>
 801cf54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cf56:	b141      	cbz	r1, 801cf6a <__swsetup_r+0x4a>
 801cf58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cf5c:	4299      	cmp	r1, r3
 801cf5e:	d002      	beq.n	801cf66 <__swsetup_r+0x46>
 801cf60:	4628      	mov	r0, r5
 801cf62:	f7ff fa69 	bl	801c438 <_free_r>
 801cf66:	2300      	movs	r3, #0
 801cf68:	6363      	str	r3, [r4, #52]	@ 0x34
 801cf6a:	89a3      	ldrh	r3, [r4, #12]
 801cf6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801cf70:	81a3      	strh	r3, [r4, #12]
 801cf72:	2300      	movs	r3, #0
 801cf74:	6063      	str	r3, [r4, #4]
 801cf76:	6923      	ldr	r3, [r4, #16]
 801cf78:	6023      	str	r3, [r4, #0]
 801cf7a:	89a3      	ldrh	r3, [r4, #12]
 801cf7c:	f043 0308 	orr.w	r3, r3, #8
 801cf80:	81a3      	strh	r3, [r4, #12]
 801cf82:	6923      	ldr	r3, [r4, #16]
 801cf84:	b94b      	cbnz	r3, 801cf9a <__swsetup_r+0x7a>
 801cf86:	89a3      	ldrh	r3, [r4, #12]
 801cf88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801cf8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cf90:	d003      	beq.n	801cf9a <__swsetup_r+0x7a>
 801cf92:	4621      	mov	r1, r4
 801cf94:	4628      	mov	r0, r5
 801cf96:	f000 f846 	bl	801d026 <__smakebuf_r>
 801cf9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf9e:	f013 0201 	ands.w	r2, r3, #1
 801cfa2:	d00a      	beq.n	801cfba <__swsetup_r+0x9a>
 801cfa4:	2200      	movs	r2, #0
 801cfa6:	60a2      	str	r2, [r4, #8]
 801cfa8:	6962      	ldr	r2, [r4, #20]
 801cfaa:	4252      	negs	r2, r2
 801cfac:	61a2      	str	r2, [r4, #24]
 801cfae:	6922      	ldr	r2, [r4, #16]
 801cfb0:	b942      	cbnz	r2, 801cfc4 <__swsetup_r+0xa4>
 801cfb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801cfb6:	d1c5      	bne.n	801cf44 <__swsetup_r+0x24>
 801cfb8:	bd38      	pop	{r3, r4, r5, pc}
 801cfba:	0799      	lsls	r1, r3, #30
 801cfbc:	bf58      	it	pl
 801cfbe:	6962      	ldrpl	r2, [r4, #20]
 801cfc0:	60a2      	str	r2, [r4, #8]
 801cfc2:	e7f4      	b.n	801cfae <__swsetup_r+0x8e>
 801cfc4:	2000      	movs	r0, #0
 801cfc6:	e7f7      	b.n	801cfb8 <__swsetup_r+0x98>
 801cfc8:	2000030c 	.word	0x2000030c

0801cfcc <abort>:
 801cfcc:	b508      	push	{r3, lr}
 801cfce:	2006      	movs	r0, #6
 801cfd0:	f000 f88e 	bl	801d0f0 <raise>
 801cfd4:	2001      	movs	r0, #1
 801cfd6:	f7e5 f8f5 	bl	80021c4 <_exit>

0801cfda <__swhatbuf_r>:
 801cfda:	b570      	push	{r4, r5, r6, lr}
 801cfdc:	460c      	mov	r4, r1
 801cfde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cfe2:	2900      	cmp	r1, #0
 801cfe4:	b096      	sub	sp, #88	@ 0x58
 801cfe6:	4615      	mov	r5, r2
 801cfe8:	461e      	mov	r6, r3
 801cfea:	da0d      	bge.n	801d008 <__swhatbuf_r+0x2e>
 801cfec:	89a3      	ldrh	r3, [r4, #12]
 801cfee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801cff2:	f04f 0100 	mov.w	r1, #0
 801cff6:	bf14      	ite	ne
 801cff8:	2340      	movne	r3, #64	@ 0x40
 801cffa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801cffe:	2000      	movs	r0, #0
 801d000:	6031      	str	r1, [r6, #0]
 801d002:	602b      	str	r3, [r5, #0]
 801d004:	b016      	add	sp, #88	@ 0x58
 801d006:	bd70      	pop	{r4, r5, r6, pc}
 801d008:	466a      	mov	r2, sp
 801d00a:	f000 f879 	bl	801d100 <_fstat_r>
 801d00e:	2800      	cmp	r0, #0
 801d010:	dbec      	blt.n	801cfec <__swhatbuf_r+0x12>
 801d012:	9901      	ldr	r1, [sp, #4]
 801d014:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d018:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d01c:	4259      	negs	r1, r3
 801d01e:	4159      	adcs	r1, r3
 801d020:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d024:	e7eb      	b.n	801cffe <__swhatbuf_r+0x24>

0801d026 <__smakebuf_r>:
 801d026:	898b      	ldrh	r3, [r1, #12]
 801d028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d02a:	079d      	lsls	r5, r3, #30
 801d02c:	4606      	mov	r6, r0
 801d02e:	460c      	mov	r4, r1
 801d030:	d507      	bpl.n	801d042 <__smakebuf_r+0x1c>
 801d032:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d036:	6023      	str	r3, [r4, #0]
 801d038:	6123      	str	r3, [r4, #16]
 801d03a:	2301      	movs	r3, #1
 801d03c:	6163      	str	r3, [r4, #20]
 801d03e:	b003      	add	sp, #12
 801d040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d042:	ab01      	add	r3, sp, #4
 801d044:	466a      	mov	r2, sp
 801d046:	f7ff ffc8 	bl	801cfda <__swhatbuf_r>
 801d04a:	9f00      	ldr	r7, [sp, #0]
 801d04c:	4605      	mov	r5, r0
 801d04e:	4639      	mov	r1, r7
 801d050:	4630      	mov	r0, r6
 801d052:	f7fe fd95 	bl	801bb80 <_malloc_r>
 801d056:	b948      	cbnz	r0, 801d06c <__smakebuf_r+0x46>
 801d058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d05c:	059a      	lsls	r2, r3, #22
 801d05e:	d4ee      	bmi.n	801d03e <__smakebuf_r+0x18>
 801d060:	f023 0303 	bic.w	r3, r3, #3
 801d064:	f043 0302 	orr.w	r3, r3, #2
 801d068:	81a3      	strh	r3, [r4, #12]
 801d06a:	e7e2      	b.n	801d032 <__smakebuf_r+0xc>
 801d06c:	89a3      	ldrh	r3, [r4, #12]
 801d06e:	6020      	str	r0, [r4, #0]
 801d070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d074:	81a3      	strh	r3, [r4, #12]
 801d076:	9b01      	ldr	r3, [sp, #4]
 801d078:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d07c:	b15b      	cbz	r3, 801d096 <__smakebuf_r+0x70>
 801d07e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d082:	4630      	mov	r0, r6
 801d084:	f000 f84e 	bl	801d124 <_isatty_r>
 801d088:	b128      	cbz	r0, 801d096 <__smakebuf_r+0x70>
 801d08a:	89a3      	ldrh	r3, [r4, #12]
 801d08c:	f023 0303 	bic.w	r3, r3, #3
 801d090:	f043 0301 	orr.w	r3, r3, #1
 801d094:	81a3      	strh	r3, [r4, #12]
 801d096:	89a3      	ldrh	r3, [r4, #12]
 801d098:	431d      	orrs	r5, r3
 801d09a:	81a5      	strh	r5, [r4, #12]
 801d09c:	e7cf      	b.n	801d03e <__smakebuf_r+0x18>

0801d09e <_raise_r>:
 801d09e:	291f      	cmp	r1, #31
 801d0a0:	b538      	push	{r3, r4, r5, lr}
 801d0a2:	4605      	mov	r5, r0
 801d0a4:	460c      	mov	r4, r1
 801d0a6:	d904      	bls.n	801d0b2 <_raise_r+0x14>
 801d0a8:	2316      	movs	r3, #22
 801d0aa:	6003      	str	r3, [r0, #0]
 801d0ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d0b0:	bd38      	pop	{r3, r4, r5, pc}
 801d0b2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d0b4:	b112      	cbz	r2, 801d0bc <_raise_r+0x1e>
 801d0b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d0ba:	b94b      	cbnz	r3, 801d0d0 <_raise_r+0x32>
 801d0bc:	4628      	mov	r0, r5
 801d0be:	f000 f853 	bl	801d168 <_getpid_r>
 801d0c2:	4622      	mov	r2, r4
 801d0c4:	4601      	mov	r1, r0
 801d0c6:	4628      	mov	r0, r5
 801d0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d0cc:	f000 b83a 	b.w	801d144 <_kill_r>
 801d0d0:	2b01      	cmp	r3, #1
 801d0d2:	d00a      	beq.n	801d0ea <_raise_r+0x4c>
 801d0d4:	1c59      	adds	r1, r3, #1
 801d0d6:	d103      	bne.n	801d0e0 <_raise_r+0x42>
 801d0d8:	2316      	movs	r3, #22
 801d0da:	6003      	str	r3, [r0, #0]
 801d0dc:	2001      	movs	r0, #1
 801d0de:	e7e7      	b.n	801d0b0 <_raise_r+0x12>
 801d0e0:	2100      	movs	r1, #0
 801d0e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d0e6:	4620      	mov	r0, r4
 801d0e8:	4798      	blx	r3
 801d0ea:	2000      	movs	r0, #0
 801d0ec:	e7e0      	b.n	801d0b0 <_raise_r+0x12>
	...

0801d0f0 <raise>:
 801d0f0:	4b02      	ldr	r3, [pc, #8]	@ (801d0fc <raise+0xc>)
 801d0f2:	4601      	mov	r1, r0
 801d0f4:	6818      	ldr	r0, [r3, #0]
 801d0f6:	f7ff bfd2 	b.w	801d09e <_raise_r>
 801d0fa:	bf00      	nop
 801d0fc:	2000030c 	.word	0x2000030c

0801d100 <_fstat_r>:
 801d100:	b538      	push	{r3, r4, r5, lr}
 801d102:	4d07      	ldr	r5, [pc, #28]	@ (801d120 <_fstat_r+0x20>)
 801d104:	2300      	movs	r3, #0
 801d106:	4604      	mov	r4, r0
 801d108:	4608      	mov	r0, r1
 801d10a:	4611      	mov	r1, r2
 801d10c:	602b      	str	r3, [r5, #0]
 801d10e:	f7e5 f8a9 	bl	8002264 <_fstat>
 801d112:	1c43      	adds	r3, r0, #1
 801d114:	d102      	bne.n	801d11c <_fstat_r+0x1c>
 801d116:	682b      	ldr	r3, [r5, #0]
 801d118:	b103      	cbz	r3, 801d11c <_fstat_r+0x1c>
 801d11a:	6023      	str	r3, [r4, #0]
 801d11c:	bd38      	pop	{r3, r4, r5, pc}
 801d11e:	bf00      	nop
 801d120:	2000e85c 	.word	0x2000e85c

0801d124 <_isatty_r>:
 801d124:	b538      	push	{r3, r4, r5, lr}
 801d126:	4d06      	ldr	r5, [pc, #24]	@ (801d140 <_isatty_r+0x1c>)
 801d128:	2300      	movs	r3, #0
 801d12a:	4604      	mov	r4, r0
 801d12c:	4608      	mov	r0, r1
 801d12e:	602b      	str	r3, [r5, #0]
 801d130:	f7e5 f8a8 	bl	8002284 <_isatty>
 801d134:	1c43      	adds	r3, r0, #1
 801d136:	d102      	bne.n	801d13e <_isatty_r+0x1a>
 801d138:	682b      	ldr	r3, [r5, #0]
 801d13a:	b103      	cbz	r3, 801d13e <_isatty_r+0x1a>
 801d13c:	6023      	str	r3, [r4, #0]
 801d13e:	bd38      	pop	{r3, r4, r5, pc}
 801d140:	2000e85c 	.word	0x2000e85c

0801d144 <_kill_r>:
 801d144:	b538      	push	{r3, r4, r5, lr}
 801d146:	4d07      	ldr	r5, [pc, #28]	@ (801d164 <_kill_r+0x20>)
 801d148:	2300      	movs	r3, #0
 801d14a:	4604      	mov	r4, r0
 801d14c:	4608      	mov	r0, r1
 801d14e:	4611      	mov	r1, r2
 801d150:	602b      	str	r3, [r5, #0]
 801d152:	f7e5 f827 	bl	80021a4 <_kill>
 801d156:	1c43      	adds	r3, r0, #1
 801d158:	d102      	bne.n	801d160 <_kill_r+0x1c>
 801d15a:	682b      	ldr	r3, [r5, #0]
 801d15c:	b103      	cbz	r3, 801d160 <_kill_r+0x1c>
 801d15e:	6023      	str	r3, [r4, #0]
 801d160:	bd38      	pop	{r3, r4, r5, pc}
 801d162:	bf00      	nop
 801d164:	2000e85c 	.word	0x2000e85c

0801d168 <_getpid_r>:
 801d168:	f7e5 b814 	b.w	8002194 <_getpid>

0801d16c <_init>:
 801d16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d16e:	bf00      	nop
 801d170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d172:	bc08      	pop	{r3}
 801d174:	469e      	mov	lr, r3
 801d176:	4770      	bx	lr

0801d178 <_fini>:
 801d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d17a:	bf00      	nop
 801d17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d17e:	bc08      	pop	{r3}
 801d180:	469e      	mov	lr, r3
 801d182:	4770      	bx	lr
