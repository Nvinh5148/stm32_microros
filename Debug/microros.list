
microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d134  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0801d2c8  0801d2c8  0001e2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e2a4  0801e2a4  0002035c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e2a4  0801e2a4  0001f2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e2ac  0801e2ac  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801e2ac  0801e2ac  0001f2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e2bc  0801e2bc  0001f2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000035c  20000000  0801e2c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002035c  2**0
                  CONTENTS
 10 .bss          0000e504  20000360  20000360  00020360  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000e864  2000e864  00020360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025df3  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a82  00000000  00000000  0004617f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d58  00000000  00000000  0004bc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001684  00000000  00000000  0004d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bc77  00000000  00000000  0004efe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000248d9  00000000  00000000  0005ac5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7463  00000000  00000000  0007f534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  00166997  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088cc  00000000  00000000  00166a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0016f2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d2ac 	.word	0x0801d2ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	0801d2ac 	.word	0x0801d2ac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_d2f>:
 80002a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80002a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80002a8:	bf24      	itt	cs
 80002aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80002ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80002b2:	d90d      	bls.n	80002d0 <__aeabi_d2f+0x30>
 80002b4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80002bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80002c0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80002c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80002c8:	bf08      	it	eq
 80002ca:	f020 0001 	biceq.w	r0, r0, #1
 80002ce:	4770      	bx	lr
 80002d0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80002d4:	d121      	bne.n	800031a <__aeabi_d2f+0x7a>
 80002d6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80002da:	bfbc      	itt	lt
 80002dc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80002e0:	4770      	bxlt	lr
 80002e2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80002ea:	f1c2 0218 	rsb	r2, r2, #24
 80002ee:	f1c2 0c20 	rsb	ip, r2, #32
 80002f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80002f6:	fa20 f002 	lsr.w	r0, r0, r2
 80002fa:	bf18      	it	ne
 80002fc:	f040 0001 	orrne.w	r0, r0, #1
 8000300:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000304:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000308:	fa03 fc0c 	lsl.w	ip, r3, ip
 800030c:	ea40 000c 	orr.w	r0, r0, ip
 8000310:	fa23 f302 	lsr.w	r3, r3, r2
 8000314:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000318:	e7cc      	b.n	80002b4 <__aeabi_d2f+0x14>
 800031a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800031e:	d107      	bne.n	8000330 <__aeabi_d2f+0x90>
 8000320:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000324:	bf1e      	ittt	ne
 8000326:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800032a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800032e:	4770      	bxne	lr
 8000330:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000334:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000338:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_ldivmod>:
 8000340:	b97b      	cbnz	r3, 8000362 <__aeabi_ldivmod+0x22>
 8000342:	b972      	cbnz	r2, 8000362 <__aeabi_ldivmod+0x22>
 8000344:	2900      	cmp	r1, #0
 8000346:	bfbe      	ittt	lt
 8000348:	2000      	movlt	r0, #0
 800034a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800034e:	e006      	blt.n	800035e <__aeabi_ldivmod+0x1e>
 8000350:	bf08      	it	eq
 8000352:	2800      	cmpeq	r0, #0
 8000354:	bf1c      	itt	ne
 8000356:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800035a:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800035e:	f000 b9d3 	b.w	8000708 <__aeabi_idiv0>
 8000362:	f1ad 0c08 	sub.w	ip, sp, #8
 8000366:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800036a:	2900      	cmp	r1, #0
 800036c:	db09      	blt.n	8000382 <__aeabi_ldivmod+0x42>
 800036e:	2b00      	cmp	r3, #0
 8000370:	db1a      	blt.n	80003a8 <__aeabi_ldivmod+0x68>
 8000372:	f000 f84d 	bl	8000410 <__udivmoddi4>
 8000376:	f8dd e004 	ldr.w	lr, [sp, #4]
 800037a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037e:	b004      	add	sp, #16
 8000380:	4770      	bx	lr
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	2b00      	cmp	r3, #0
 800038a:	db1b      	blt.n	80003c4 <__aeabi_ldivmod+0x84>
 800038c:	f000 f840 	bl	8000410 <__udivmoddi4>
 8000390:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000398:	b004      	add	sp, #16
 800039a:	4240      	negs	r0, r0
 800039c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003a0:	4252      	negs	r2, r2
 80003a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a6:	4770      	bx	lr
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	f000 f82f 	bl	8000410 <__udivmoddi4>
 80003b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ba:	b004      	add	sp, #16
 80003bc:	4240      	negs	r0, r0
 80003be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003c2:	4770      	bx	lr
 80003c4:	4252      	negs	r2, r2
 80003c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ca:	f000 f821 	bl	8000410 <__udivmoddi4>
 80003ce:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d6:	b004      	add	sp, #16
 80003d8:	4252      	negs	r2, r2
 80003da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000718:	f00c fc12 	bl	800cf40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800071c:	4b5a      	ldr	r3, [pc, #360]	@ (8000888 <pvPortMallocMicroROS+0x17c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000724:	f000 f986 	bl	8000a34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000728:	4b58      	ldr	r3, [pc, #352]	@ (800088c <pvPortMallocMicroROS+0x180>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4013      	ands	r3, r2
 8000730:	2b00      	cmp	r3, #0
 8000732:	f040 8090 	bne.w	8000856 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d01e      	beq.n	800077a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800073c:	2208      	movs	r2, #8
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	2b00      	cmp	r3, #0
 800074c:	d015      	beq.n	800077a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	f023 0307 	bic.w	r3, r3, #7
 8000754:	3308      	adds	r3, #8
 8000756:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00b      	beq.n	800077a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000766:	f383 8811 	msr	BASEPRI, r3
 800076a:	f3bf 8f6f 	isb	sy
 800076e:	f3bf 8f4f 	dsb	sy
 8000772:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	e7fd      	b.n	8000776 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d06a      	beq.n	8000856 <pvPortMallocMicroROS+0x14a>
 8000780:	4b43      	ldr	r3, [pc, #268]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	429a      	cmp	r2, r3
 8000788:	d865      	bhi.n	8000856 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800078a:	4b42      	ldr	r3, [pc, #264]	@ (8000894 <pvPortMallocMicroROS+0x188>)
 800078c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800078e:	4b41      	ldr	r3, [pc, #260]	@ (8000894 <pvPortMallocMicroROS+0x188>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000794:	e004      	b.n	80007a0 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000798:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800079a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d903      	bls.n	80007b2 <pvPortMallocMicroROS+0xa6>
 80007aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f1      	bne.n	8000796 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80007b2:	4b35      	ldr	r3, [pc, #212]	@ (8000888 <pvPortMallocMicroROS+0x17c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d04c      	beq.n	8000856 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2208      	movs	r2, #8
 80007c2:	4413      	add	r3, r2
 80007c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80007c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80007ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d0:	685a      	ldr	r2, [r3, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	1ad2      	subs	r2, r2, r3
 80007d6:	2308      	movs	r3, #8
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	429a      	cmp	r2, r3
 80007dc:	d920      	bls.n	8000820 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80007de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4413      	add	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00b      	beq.n	8000808 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80007f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007f4:	f383 8811 	msr	BASEPRI, r3
 80007f8:	f3bf 8f6f 	isb	sy
 80007fc:	f3bf 8f4f 	dsb	sy
 8000800:	613b      	str	r3, [r7, #16]
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800080a:	685a      	ldr	r2, [r3, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	1ad2      	subs	r2, r2, r3
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800081a:	69b8      	ldr	r0, [r7, #24]
 800081c:	f000 f96c 	bl	8000af8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	4a19      	ldr	r2, [pc, #100]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 800082c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <pvPortMallocMicroROS+0x18c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d203      	bcs.n	8000842 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <pvPortMallocMicroROS+0x184>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a16      	ldr	r2, [pc, #88]	@ (8000898 <pvPortMallocMicroROS+0x18c>)
 8000840:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <pvPortMallocMicroROS+0x180>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	431a      	orrs	r2, r3
 800084c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000856:	f00c fb81 	bl	800cf5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	f003 0307 	and.w	r3, r3, #7
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00b      	beq.n	800087c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000868:	f383 8811 	msr	BASEPRI, r3
 800086c:	f3bf 8f6f 	isb	sy
 8000870:	f3bf 8f4f 	dsb	sy
 8000874:	60fb      	str	r3, [r7, #12]
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800087c:	69fb      	ldr	r3, [r7, #28]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3728      	adds	r7, #40	@ 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20003f84 	.word	0x20003f84
 800088c:	20003f90 	.word	0x20003f90
 8000890:	20003f88 	.word	0x20003f88
 8000894:	20003f7c 	.word	0x20003f7c
 8000898:	20003f8c 	.word	0x20003f8c

0800089c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d04a      	beq.n	8000944 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008ae:	2308      	movs	r3, #8
 80008b0:	425b      	negs	r3, r3
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	4413      	add	r3, r2
 80008b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <vPortFreeMicroROS+0xb0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d10b      	bne.n	80008e2 <vPortFreeMicroROS+0x46>
	__asm volatile
 80008ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ce:	f383 8811 	msr	BASEPRI, r3
 80008d2:	f3bf 8f6f 	isb	sy
 80008d6:	f3bf 8f4f 	dsb	sy
 80008da:	60fb      	str	r3, [r7, #12]
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00b      	beq.n	8000902 <vPortFreeMicroROS+0x66>
	__asm volatile
 80008ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008ee:	f383 8811 	msr	BASEPRI, r3
 80008f2:	f3bf 8f6f 	isb	sy
 80008f6:	f3bf 8f4f 	dsb	sy
 80008fa:	60bb      	str	r3, [r7, #8]
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	e7fd      	b.n	80008fe <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <vPortFreeMicroROS+0xb0>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4013      	ands	r3, r2
 800090c:	2b00      	cmp	r3, #0
 800090e:	d019      	beq.n	8000944 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d115      	bne.n	8000944 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <vPortFreeMicroROS+0xb0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	43db      	mvns	r3, r3
 8000922:	401a      	ands	r2, r3
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000928:	f00c fb0a 	bl	800cf40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <vPortFreeMicroROS+0xb4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4413      	add	r3, r2
 8000936:	4a06      	ldr	r2, [pc, #24]	@ (8000950 <vPortFreeMicroROS+0xb4>)
 8000938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800093a:	6938      	ldr	r0, [r7, #16]
 800093c:	f000 f8dc 	bl	8000af8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000940:	f00c fb0c 	bl	800cf5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20003f90 	.word	0x20003f90
 8000950:	20003f88 	.word	0x20003f88

08000954 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000954:	b480      	push	{r7}
 8000956:	b087      	sub	sp, #28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000960:	2308      	movs	r3, #8
 8000962:	425b      	negs	r3, r3
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	4413      	add	r3, r2
 8000968:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <getBlockSize+0x38>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	43db      	mvns	r3, r3
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

	return count;
 800097c:	68fb      	ldr	r3, [r7, #12]
}
 800097e:	4618      	mov	r0, r3
 8000980:	371c      	adds	r7, #28
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20003f90 	.word	0x20003f90

08000990 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800099a:	f00c fad1 	bl	800cf40 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	f7ff feb4 	bl	800070c <pvPortMallocMicroROS>
 80009a4:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d017      	beq.n	80009dc <pvPortReallocMicroROS+0x4c>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d014      	beq.n	80009dc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffce 	bl	8000954 <getBlockSize>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2208      	movs	r2, #8
 80009bc:	1a9b      	subs	r3, r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d201      	bcs.n	80009cc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	68b8      	ldr	r0, [r7, #8]
 80009d2:	f01b fd98 	bl	801c506 <memcpy>

		vPortFreeMicroROS(pv);
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff60 	bl	800089c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80009dc:	f00c fabe 	bl	800cf5c <xTaskResumeAll>

	return newmem;
 80009e0:	68bb      	ldr	r3, [r7, #8]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80009f4:	f00c faa4 	bl	800cf40 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff fe82 	bl	800070c <pvPortMallocMicroROS>
 8000a08:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000a0e:	e004      	b.n	8000a1a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	1c5a      	adds	r2, r3, #1
 8000a14:	613a      	str	r2, [r7, #16]
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	1e5a      	subs	r2, r3, #1
 8000a1e:	617a      	str	r2, [r7, #20]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1f5      	bne.n	8000a10 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000a24:	f00c fa9a 	bl	800cf5c <xTaskResumeAll>
  	return mem;
 8000a28:	68fb      	ldr	r3, [r7, #12]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a3a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000a3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a40:	4b27      	ldr	r3, [pc, #156]	@ (8000ae0 <prvHeapInit+0xac>)
 8000a42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00c      	beq.n	8000a68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3307      	adds	r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f023 0307 	bic.w	r3, r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <prvHeapInit+0xac>)
 8000a64:	4413      	add	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <prvHeapInit+0xb0>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <prvHeapInit+0xb0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a80:	2208      	movs	r2, #8
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	1a9b      	subs	r3, r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f023 0307 	bic.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4a15      	ldr	r2, [pc, #84]	@ (8000ae8 <prvHeapInit+0xb4>)
 8000a94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <prvHeapInit+0xb4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <prvHeapInit+0xb4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	1ad2      	subs	r2, r2, r3
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <prvHeapInit+0xb4>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <prvHeapInit+0xb8>)
 8000ac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	@ (8000af0 <prvHeapInit+0xbc>)
 8000aca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <prvHeapInit+0xc0>)
 8000ace:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	2000037c 	.word	0x2000037c
 8000ae4:	20003f7c 	.word	0x20003f7c
 8000ae8:	20003f84 	.word	0x20003f84
 8000aec:	20003f8c 	.word	0x20003f8c
 8000af0:	20003f88 	.word	0x20003f88
 8000af4:	20003f90 	.word	0x20003f90

08000af8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000b00:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <prvInsertBlockIntoFreeList+0xac>)
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e002      	b.n	8000b0c <prvInsertBlockIntoFreeList+0x14>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d8f7      	bhi.n	8000b06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	4413      	add	r3, r2
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d108      	bne.n	8000b3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	441a      	add	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	441a      	add	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d118      	bne.n	8000b80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d00d      	beq.n	8000b76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	441a      	add	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	e008      	b.n	8000b88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <prvInsertBlockIntoFreeList+0xb0>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e003      	b.n	8000b88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d002      	beq.n	8000b96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20003f7c 	.word	0x20003f7c
 8000ba8:	20003f84 	.word	0x20003f84

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f001 fd3c 	bl	800262c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f822 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 fa4c 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bbc:	f000 fa22 	bl	8001004 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bc0:	f000 f9f6 	bl	8000fb0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000bc4:	f000 f8dc 	bl	8000d80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bc8:	f000 f92e 	bl	8000e28 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000bcc:	f000 f880 	bl	8000cd0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000bd0:	f000 f99a 	bl	8000f08 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bd4:	f00a fe4e 	bl	800b874 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bd8:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <main+0x44>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <main+0x48>)
 8000bde:	f00a fe93 	bl	800b908 <osThreadNew>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <main+0x4c>)
 8000be6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000be8:	f00a fe68 	bl	800b8bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <main+0x40>
 8000bf0:	0801d3a8 	.word	0x0801d3a8
 8000bf4:	0800128d 	.word	0x0800128d
 8000bf8:	200041bc 	.word	0x200041bc

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	@ 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	2230      	movs	r2, #48	@ 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f01b fbb2 	bl	801c374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b28      	ldr	r3, [pc, #160]	@ (8000cc8 <SystemClock_Config+0xcc>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c28:	4a27      	ldr	r2, [pc, #156]	@ (8000cc8 <SystemClock_Config+0xcc>)
 8000c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c30:	4b25      	ldr	r3, [pc, #148]	@ (8000cc8 <SystemClock_Config+0xcc>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <SystemClock_Config+0xd0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <SystemClock_Config+0xd0>)
 8000c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <SystemClock_Config+0xd0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c70:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c74:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	4618      	mov	r0, r3
 8000c84:	f004 fd5c 	bl	8005740 <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c8e:	f000 fc93 	bl	80015b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	230f      	movs	r3, #15
 8000c94:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2302      	movs	r3, #2
 8000c98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c9e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ca2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2105      	movs	r1, #5
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 ffbd 	bl	8005c30 <HAL_RCC_ClockConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cbc:	f000 fc7c 	bl	80015b8 <Error_Handler>
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	3750      	adds	r7, #80	@ 0x50
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	@ 0x30
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	2224      	movs	r2, #36	@ 0x24
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f01b fb48 	bl	801c374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000cee:	4a23      	ldr	r2, [pc, #140]	@ (8000d7c <MX_TIM1_Init+0xac>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d20:	2301      	movs	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d30:	2301      	movs	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d3c:	f107 030c 	add.w	r3, r7, #12
 8000d40:	4619      	mov	r1, r3
 8000d42:	480d      	ldr	r0, [pc, #52]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d44:	f005 faac 	bl	80062a0 <HAL_TIM_Encoder_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d4e:	f000 fc33 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4806      	ldr	r0, [pc, #24]	@ (8000d78 <MX_TIM1_Init+0xa8>)
 8000d60:	f005 ff10 	bl	8006b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d6a:	f000 fc25 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	3730      	adds	r7, #48	@ 0x30
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20003f94 	.word	0x20003f94
 8000d7c:	40010000 	.word	0x40010000

08000d80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	@ 0x30
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2224      	movs	r2, #36	@ 0x24
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f01b faf0 	bl	801c374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000d9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000db2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000df0:	f005 fa56 	bl	80062a0 <HAL_TIM_Encoder_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000dfa:	f000 fbdd 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <MX_TIM2_Init+0xa4>)
 8000e0c:	f005 feba 	bl	8006b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e16:	f000 fbcf 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3730      	adds	r7, #48	@ 0x30
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20003fdc 	.word	0x20003fdc

08000e28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2e:	f107 0320 	add.w	r3, r7, #32
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f04 <MX_TIM3_Init+0xdc>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e52:	2209      	movs	r2, #9
 8000e54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4199;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e5e:	f241 0267 	movw	r2, #4199	@ 0x1067
 8000e62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e70:	4823      	ldr	r0, [pc, #140]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e72:	f005 f8fd 	bl	8006070 <HAL_TIM_PWM_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e7c:	f000 fb9c 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481c      	ldr	r0, [pc, #112]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000e90:	f005 fe78 	bl	8006b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e9a:	f000 fb8d 	bl	80015b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9e:	2360      	movs	r3, #96	@ 0x60
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000eb6:	f005 fb27 	bl	8006508 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ec0:	f000 fb7a 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000ecc:	f005 fb1c 	bl	8006508 <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ed6:	f000 fb6f 	bl	80015b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2208      	movs	r2, #8
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000ee2:	f005 fb11 	bl	8006508 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000eec:	f000 fb64 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ef0:	4803      	ldr	r0, [pc, #12]	@ (8000f00 <MX_TIM3_Init+0xd8>)
 8000ef2:	f001 f889 	bl	8002008 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20004024 	.word	0x20004024
 8000f04:	40000400 	.word	0x40000400

08000f08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	2224      	movs	r2, #36	@ 0x24
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f01b fa2c 	bl	801c374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f24:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f26:	4a21      	ldr	r2, [pc, #132]	@ (8000fac <MX_TIM4_Init+0xa4>)
 8000f28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f62:	2301      	movs	r3, #1
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4619      	mov	r1, r3
 8000f74:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f76:	f005 f993 	bl	80062a0 <HAL_TIM_Encoder_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f80:	f000 fb1a 	bl	80015b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_TIM4_Init+0xa0>)
 8000f92:	f005 fdf7 	bl	8006b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000f9c:	f000 fb0c 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3730      	adds	r7, #48	@ 0x30
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000406c 	.word	0x2000406c
 8000fac:	40000800 	.word	0x40000800

08000fb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <MX_USART2_UART_Init+0x50>)
 8000fb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_USART2_UART_Init+0x4c>)
 8000fe8:	f005 fe48 	bl	8006c7c <HAL_UART_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ff2:	f000 fae1 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200040b4 	.word	0x200040b4
 8001000:	40004400 	.word	0x40004400

08001004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <MX_DMA_Init+0x4c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a0f      	ldr	r2, [pc, #60]	@ (8001050 <MX_DMA_Init+0x4c>)
 8001014:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <MX_DMA_Init+0x4c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2105      	movs	r1, #5
 800102a:	2010      	movs	r0, #16
 800102c:	f001 fc6f 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001030:	2010      	movs	r0, #16
 8001032:	f001 fc88 	bl	8002946 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2105      	movs	r1, #5
 800103a:	2011      	movs	r0, #17
 800103c:	f001 fc67 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001040:	2011      	movs	r0, #17
 8001042:	f001 fc80 	bl	8002946 <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a6b      	ldr	r2, [pc, #428]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001074:	f043 0310 	orr.w	r3, r3, #16
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b69      	ldr	r3, [pc, #420]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0310 	and.w	r3, r3, #16
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	4b65      	ldr	r3, [pc, #404]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a64      	ldr	r2, [pc, #400]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b62      	ldr	r3, [pc, #392]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a5d      	ldr	r2, [pc, #372]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a56      	ldr	r2, [pc, #344]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b54      	ldr	r3, [pc, #336]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b50      	ldr	r3, [pc, #320]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b49      	ldr	r3, [pc, #292]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a48      	ldr	r2, [pc, #288]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b46      	ldr	r3, [pc, #280]	@ (8001220 <MX_GPIO_Init+0x1cc>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2108      	movs	r1, #8
 8001116:	4843      	ldr	r0, [pc, #268]	@ (8001224 <MX_GPIO_Init+0x1d0>)
 8001118:	f002 f9ce 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2101      	movs	r1, #1
 8001120:	4841      	ldr	r0, [pc, #260]	@ (8001228 <MX_GPIO_Init+0x1d4>)
 8001122:	f002 f9c9 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001126:	2200      	movs	r2, #0
 8001128:	f24f 0118 	movw	r1, #61464	@ 0xf018
 800112c:	483f      	ldr	r0, [pc, #252]	@ (800122c <MX_GPIO_Init+0x1d8>)
 800112e:	f002 f9c3 	bl	80034b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001132:	2200      	movs	r2, #0
 8001134:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001138:	483d      	ldr	r0, [pc, #244]	@ (8001230 <MX_GPIO_Init+0x1dc>)
 800113a:	f002 f9bd 	bl	80034b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800113e:	2308      	movs	r3, #8
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4833      	ldr	r0, [pc, #204]	@ (8001224 <MX_GPIO_Init+0x1d0>)
 8001156:	f002 f813 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	482d      	ldr	r0, [pc, #180]	@ (8001228 <MX_GPIO_Init+0x1d4>)
 8001172:	f002 f805 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800117a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	482a      	ldr	r0, [pc, #168]	@ (8001234 <MX_GPIO_Init+0x1e0>)
 800118c:	f001 fff8 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001190:	2304      	movs	r3, #4
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4822      	ldr	r0, [pc, #136]	@ (800122c <MX_GPIO_Init+0x1d8>)
 80011a4:	f001 ffec 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80011a8:	f24f 0318 	movw	r3, #61464	@ 0xf018
 80011ac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ae:	2301      	movs	r3, #1
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	481a      	ldr	r0, [pc, #104]	@ (800122c <MX_GPIO_Init+0x1d8>)
 80011c2:	f001 ffdd 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011c6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80011ca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	4619      	mov	r1, r3
 80011de:	4814      	ldr	r0, [pc, #80]	@ (8001230 <MX_GPIO_Init+0x1dc>)
 80011e0:	f001 ffce 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011e4:	2320      	movs	r3, #32
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	480e      	ldr	r0, [pc, #56]	@ (8001230 <MX_GPIO_Init+0x1dc>)
 80011f8:	f001 ffc2 	bl	8003180 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80011fc:	2302      	movs	r3, #2
 80011fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001200:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_GPIO_Init+0x1d0>)
 8001212:	f001 ffb5 	bl	8003180 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	@ 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40021000 	.word	0x40021000
 8001228:	40020800 	.word	0x40020800
 800122c:	40020400 	.word	0x40020400
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40020000 	.word	0x40020000

08001238 <cmd_vel_callback>:
void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);
void cmd_vel_callback(const void *msgin)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60fb      	str	r3, [r7, #12]

    // lấy vận tốc tuyến tính (m/s) hoặc vòng/s — tùy bạn định nghĩa
    target_speed = msg->linear.x;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff f827 	bl	80002a0 <__aeabi_d2f>
 8001252:	4603      	mov	r3, r0
 8001254:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <cmd_vel_callback+0x48>)
 8001256:	6013      	str	r3, [r2, #0]
    target_angle = msg->angular.z;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff f81d 	bl	80002a0 <__aeabi_d2f>
 8001266:	4603      	mov	r3, r0
 8001268:	4a06      	ldr	r2, [pc, #24]	@ (8001284 <cmd_vel_callback+0x4c>)
 800126a:	6013      	str	r3, [r2, #0]

    // Debug: bật LED khi nhận được dữ liệu
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800126c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <cmd_vel_callback+0x50>)
 8001272:	f002 f93a 	bl	80034ea <HAL_GPIO_TogglePin>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20004240 	.word	0x20004240
 8001284:	20004244 	.word	0x20004244
 8001288:	40020c00 	.word	0x40020c00

0800128c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800128c:	b5b0      	push	{r4, r5, r7, lr}
 800128e:	b0dc      	sub	sp, #368	@ 0x170
 8001290:	af02      	add	r7, sp, #8
 8001292:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001296:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800129a:	6018      	str	r0, [r3, #0]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800129c:	f00d fadc 	bl	800e858 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 80012a0:	4ba4      	ldr	r3, [pc, #656]	@ (8001534 <StartDefaultTask+0x2a8>)
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	4ba4      	ldr	r3, [pc, #656]	@ (8001538 <StartDefaultTask+0x2ac>)
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4ba4      	ldr	r3, [pc, #656]	@ (800153c <StartDefaultTask+0x2b0>)
 80012aa:	4aa5      	ldr	r2, [pc, #660]	@ (8001540 <StartDefaultTask+0x2b4>)
 80012ac:	49a5      	ldr	r1, [pc, #660]	@ (8001544 <StartDefaultTask+0x2b8>)
 80012ae:	2001      	movs	r0, #1
 80012b0:	f010 faee 	bl	8011890 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80012b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012b8:	4618      	mov	r0, r3
 80012ba:	f010 fa1b 	bl	80116f4 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 80012be:	4ba2      	ldr	r3, [pc, #648]	@ (8001548 <StartDefaultTask+0x2bc>)
 80012c0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  freeRTOS_allocator.deallocate = microros_deallocate;
 80012c4:	4ba1      	ldr	r3, [pc, #644]	@ (800154c <StartDefaultTask+0x2c0>)
 80012c6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  freeRTOS_allocator.reallocate = microros_reallocate;
 80012ca:	4ba1      	ldr	r3, [pc, #644]	@ (8001550 <StartDefaultTask+0x2c4>)
 80012cc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80012d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001554 <StartDefaultTask+0x2c8>)
 80012d2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80012d6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012da:	4618      	mov	r0, r3
 80012dc:	f010 fa18 	bl	8011710 <rcutils_set_default_allocator>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <StartDefaultTask+0x6a>
      printf("Error on default allocators (line %d)\n", __LINE__);
 80012ec:	f240 217e 	movw	r1, #638	@ 0x27e
 80012f0:	4899      	ldr	r0, [pc, #612]	@ (8001558 <StartDefaultTask+0x2cc>)
 80012f2:	f01a ff4d 	bl	801c190 <iprintf>
  rcl_subscription_t cmd_sub;
  rclc_executor_t executor;
  geometry_msgs__msg__Twist cmd_vel_msg;
  std_msgs__msg__Float32 feedback_msg1;
  std_msgs__msg__Float32 feedback_msg2;
  allocator = rcl_get_default_allocator();
 80012f6:	463b      	mov	r3, r7
 80012f8:	4618      	mov	r0, r3
 80012fa:	f010 fa27 	bl	801174c <rcutils_get_default_allocator>
 80012fe:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001302:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001306:	f107 04f0 	add.w	r4, r7, #240	@ 0xf0
 800130a:	461d      	mov	r5, r3
 800130c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 8001314:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001318:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	f010 f8f2 	bl	8011508 <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001324:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001328:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 800132c:	4a8b      	ldr	r2, [pc, #556]	@ (800155c <StartDefaultTask+0x2d0>)
 800132e:	498c      	ldr	r1, [pc, #560]	@ (8001560 <StartDefaultTask+0x2d4>)
 8001330:	f010 f934 	bl	801159c <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 8001334:	f011 f81e 	bl	8012374 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001338:	4602      	mov	r2, r0
 800133a:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 800133e:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8001342:	4b88      	ldr	r3, [pc, #544]	@ (8001564 <StartDefaultTask+0x2d8>)
 8001344:	f010 f966 	bl	8011614 <rclc_publisher_init_default>
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "cubemx_publisher");

    rclc_publisher_init_default(
 8001348:	f010 fffc 	bl	8012344 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>
 800134c:	4602      	mov	r2, r0
 800134e:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8001352:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8001356:	4b84      	ldr	r3, [pc, #528]	@ (8001568 <StartDefaultTask+0x2dc>)
 8001358:	f010 f95c 	bl	8011614 <rclc_publisher_init_default>
        &feedback_pub,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32),
        "motor_feedback");
    rclc_subscription_init_default(
 800135c:	f00d fd6e 	bl	800ee3c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001360:	4602      	mov	r2, r0
 8001362:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8001366:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 800136a:	4b80      	ldr	r3, [pc, #512]	@ (800156c <StartDefaultTask+0x2e0>)
 800136c:	f010 f986 	bl	801167c <rclc_subscription_init_default>
        &cmd_sub,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
        "cmd_vel");
    rclc_executor_init(&executor, &support.context, 2, &allocator);
 8001370:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001374:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 8001378:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800137c:	2202      	movs	r2, #2
 800137e:	f00f fdfb 	bl	8010f78 <rclc_executor_init>
    rclc_executor_add_subscription(&executor, &cmd_sub, &cmd_vel_msg, &cmd_vel_callback, ON_NEW_DATA);
 8001382:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001386:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800138a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 800138e:	2300      	movs	r3, #0
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	4b77      	ldr	r3, [pc, #476]	@ (8001570 <StartDefaultTask+0x2e4>)
 8001394:	f00f fe60 	bl	8011058 <rclc_executor_add_subscription>

    MotorReset(&motor1);
 8001398:	4876      	ldr	r0, [pc, #472]	@ (8001574 <StartDefaultTask+0x2e8>)
 800139a:	f000 fa78 	bl	800188e <MotorReset>
    MotorReset(&motor2);
 800139e:	4876      	ldr	r0, [pc, #472]	@ (8001578 <StartDefaultTask+0x2ec>)
 80013a0:	f000 fa75 	bl	800188e <MotorReset>
    MotorAngleInit(&motor3);
 80013a4:	4875      	ldr	r0, [pc, #468]	@ (800157c <StartDefaultTask+0x2f0>)
 80013a6:	f000 fa8f 	bl	80018c8 <MotorAngleInit>
    PIDInit(&pid_vel1, 1.0f, 0.0f, 0.0f);
 80013aa:	ed9f 1a75 	vldr	s2, [pc, #468]	@ 8001580 <StartDefaultTask+0x2f4>
 80013ae:	eddf 0a74 	vldr	s1, [pc, #464]	@ 8001580 <StartDefaultTask+0x2f4>
 80013b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80013b6:	4873      	ldr	r0, [pc, #460]	@ (8001584 <StartDefaultTask+0x2f8>)
 80013b8:	f000 fc7a 	bl	8001cb0 <PIDInit>
    PIDInit(&pid_vel2, 300.0f, 00.0f, 00.0f);
 80013bc:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 8001580 <StartDefaultTask+0x2f4>
 80013c0:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 8001580 <StartDefaultTask+0x2f4>
 80013c4:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 8001588 <StartDefaultTask+0x2fc>
 80013c8:	4870      	ldr	r0, [pc, #448]	@ (800158c <StartDefaultTask+0x300>)
 80013ca:	f000 fc71 	bl	8001cb0 <PIDInit>
    PIDInit(&pid_pos, 1.0f, 0.0f, 0.0f);
 80013ce:	ed9f 1a6c 	vldr	s2, [pc, #432]	@ 8001580 <StartDefaultTask+0x2f4>
 80013d2:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8001580 <StartDefaultTask+0x2f4>
 80013d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80013da:	486d      	ldr	r0, [pc, #436]	@ (8001590 <StartDefaultTask+0x304>)
 80013dc:	f000 fc68 	bl	8001cb0 <PIDInit>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80013e0:	213c      	movs	r1, #60	@ 0x3c
 80013e2:	486c      	ldr	r0, [pc, #432]	@ (8001594 <StartDefaultTask+0x308>)
 80013e4:	f005 f802 	bl	80063ec <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80013e8:	213c      	movs	r1, #60	@ 0x3c
 80013ea:	486b      	ldr	r0, [pc, #428]	@ (8001598 <StartDefaultTask+0x30c>)
 80013ec:	f004 fffe 	bl	80063ec <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80013f0:	213c      	movs	r1, #60	@ 0x3c
 80013f2:	486a      	ldr	r0, [pc, #424]	@ (800159c <StartDefaultTask+0x310>)
 80013f4:	f004 fffa 	bl	80063ec <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013f8:	2100      	movs	r1, #0
 80013fa:	4869      	ldr	r0, [pc, #420]	@ (80015a0 <StartDefaultTask+0x314>)
 80013fc:	f004 fe88 	bl	8006110 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001400:	2104      	movs	r1, #4
 8001402:	4867      	ldr	r0, [pc, #412]	@ (80015a0 <StartDefaultTask+0x314>)
 8001404:	f004 fe84 	bl	8006110 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001408:	2108      	movs	r1, #8
 800140a:	4865      	ldr	r0, [pc, #404]	@ (80015a0 <StartDefaultTask+0x314>)
 800140c:	f004 fe80 	bl	8006110 <HAL_TIM_PWM_Start>
    osDelay(50);
 8001410:	2032      	movs	r0, #50	@ 0x32
 8001412:	f00a fb0b 	bl	800ba2c <osDelay>



  msg.data = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

  for(;;)
  {
	  // 1) service ROS events (non-blocking short time)
	      rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 800141c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001420:	4a60      	ldr	r2, [pc, #384]	@ (80015a4 <StartDefaultTask+0x318>)
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	4608      	mov	r0, r1
 8001428:	f010 f836 	bl	8011498 <rclc_executor_spin_some>

	      // 2) read encoder (update motor1.velocity)
	      ReadEncoder(&motor1, &htim2);
 800142c:	4959      	ldr	r1, [pc, #356]	@ (8001594 <StartDefaultTask+0x308>)
 800142e:	4851      	ldr	r0, [pc, #324]	@ (8001574 <StartDefaultTask+0x2e8>)
 8001430:	f000 fa68 	bl	8001904 <ReadEncoder>
	      ReadEncoder(&motor2, &htim1);
 8001434:	4958      	ldr	r1, [pc, #352]	@ (8001598 <StartDefaultTask+0x30c>)
 8001436:	4850      	ldr	r0, [pc, #320]	@ (8001578 <StartDefaultTask+0x2ec>)
 8001438:	f000 fa64 	bl	8001904 <ReadEncoder>
	      ReadEncoder_angular(&motor3, &htim4);
 800143c:	4957      	ldr	r1, [pc, #348]	@ (800159c <StartDefaultTask+0x310>)
 800143e:	484f      	ldr	r0, [pc, #316]	@ (800157c <StartDefaultTask+0x2f0>)
 8001440:	f000 fab2 	bl	80019a8 <ReadEncoder_angular>

	      // 3) PID velocity: use target_speed (updated in callback)
	      float duty1 = MotorPIDVelocity(&pid_vel1, &motor1, target_speed);
 8001444:	4b58      	ldr	r3, [pc, #352]	@ (80015a8 <StartDefaultTask+0x31c>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	4949      	ldr	r1, [pc, #292]	@ (8001574 <StartDefaultTask+0x2e8>)
 8001450:	484c      	ldr	r0, [pc, #304]	@ (8001584 <StartDefaultTask+0x2f8>)
 8001452:	f000 fbf1 	bl	8001c38 <MotorPIDVelocity>
 8001456:	ed87 0a59 	vstr	s0, [r7, #356]	@ 0x164
	      float duty2 = MotorPIDVelocity(&pid_vel2, &motor2, target_speed);
 800145a:	4b53      	ldr	r3, [pc, #332]	@ (80015a8 <StartDefaultTask+0x31c>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	4944      	ldr	r1, [pc, #272]	@ (8001578 <StartDefaultTask+0x2ec>)
 8001466:	4849      	ldr	r0, [pc, #292]	@ (800158c <StartDefaultTask+0x300>)
 8001468:	f000 fbe6 	bl	8001c38 <MotorPIDVelocity>
 800146c:	ed87 0a58 	vstr	s0, [r7, #352]	@ 0x160
	      float g_duty3 = MotorPIDPosition(&pid_pos, &motor3, target_angle);
 8001470:	4b4e      	ldr	r3, [pc, #312]	@ (80015ac <StartDefaultTask+0x320>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	4940      	ldr	r1, [pc, #256]	@ (800157c <StartDefaultTask+0x2f0>)
 800147c:	4844      	ldr	r0, [pc, #272]	@ (8001590 <StartDefaultTask+0x304>)
 800147e:	f000 fb9b 	bl	8001bb8 <MotorPIDPosition>
 8001482:	ed87 0a57 	vstr	s0, [r7, #348]	@ 0x15c
	     MotorSetDuty1((int)duty1);
 8001486:	edd7 7a59 	vldr	s15, [r7, #356]	@ 0x164
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148e:	ee17 0a90 	vmov	r0, s15
 8001492:	f000 fac9 	bl	8001a28 <MotorSetDuty1>
	     MotorSetDuty2((int)duty2);
 8001496:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 800149a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800149e:	ee17 0a90 	vmov	r0, s15
 80014a2:	f000 fb05 	bl	8001ab0 <MotorSetDuty2>
	     MotorSetDuty3((int)g_duty3);
 80014a6:	edd7 7a57 	vldr	s15, [r7, #348]	@ 0x15c
 80014aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ae:	ee17 0a90 	vmov	r0, s15
 80014b2:	f000 fb41 	bl	8001b38 <MotorSetDuty3>
	      // 4) apply duty
	     // MotorSetDuty(2000);

	      // 5) publish feedback velocity
	     // feedback_msg.data = motor1.velocity;
	      feedback_msg1.data = motor1.velocity;
 80014b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001574 <StartDefaultTask+0x2e8>)
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80014be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80014c2:	601a      	str	r2, [r3, #0]
	      feedback_msg2.data = motor2.velocity;
 80014c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <StartDefaultTask+0x2ec>)
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80014cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80014d0:	601a      	str	r2, [r3, #0]


	      rcl_ret_t ret1 = rcl_publish(&feedback_pub, &feedback_msg1, NULL);
 80014d2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80014d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80014da:	2200      	movs	r2, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f00f f9bb 	bl	8010858 <rcl_publish>
 80014e2:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
	      if (ret1 != RCL_RET_OK) {
 80014e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <StartDefaultTask+0x26c>
	          printf("Error publishing feedback (line %d)\n", __LINE__);
 80014ee:	f240 21d9 	movw	r1, #729	@ 0x2d9
 80014f2:	482f      	ldr	r0, [pc, #188]	@ (80015b0 <StartDefaultTask+0x324>)
 80014f4:	f01a fe4c 	bl	801c190 <iprintf>
	      }
	      rcl_ret_t ret2 = rcl_publish(&feedback_pub, &feedback_msg2, NULL);
 80014f8:	f107 0120 	add.w	r1, r7, #32
 80014fc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001500:	2200      	movs	r2, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f00f f9a8 	bl	8010858 <rcl_publish>
 8001508:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
	      if (ret2 != RCL_RET_OK) {
 800150c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <StartDefaultTask+0x292>
	      	          printf("Error publishing feedback (line %d)\n", __LINE__);
 8001514:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8001518:	4825      	ldr	r0, [pc, #148]	@ (80015b0 <StartDefaultTask+0x324>)
 800151a:	f01a fe39 	bl	801c190 <iprintf>
	      	      }
	      // 6) optional toggle to observe loop
	      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800151e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001522:	4824      	ldr	r0, [pc, #144]	@ (80015b4 <StartDefaultTask+0x328>)
 8001524:	f001 ffe1 	bl	80034ea <HAL_GPIO_TogglePin>


	         msg.data++;
 8001528:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800152c:	3301      	adds	r3, #1
 800152e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  {
 8001532:	e773      	b.n	800141c <StartDefaultTask+0x190>
 8001534:	08002531 	.word	0x08002531
 8001538:	080024c9 	.word	0x080024c9
 800153c:	080024a9 	.word	0x080024a9
 8001540:	0800247d 	.word	0x0800247d
 8001544:	200040b4 	.word	0x200040b4
 8001548:	080015c5 	.word	0x080015c5
 800154c:	08001609 	.word	0x08001609
 8001550:	08001641 	.word	0x08001641
 8001554:	080016ad 	.word	0x080016ad
 8001558:	0801d2d4 	.word	0x0801d2d4
 800155c:	0801d2fc 	.word	0x0801d2fc
 8001560:	0801d300 	.word	0x0801d300
 8001564:	0801d30c 	.word	0x0801d30c
 8001568:	0801d320 	.word	0x0801d320
 800156c:	0801d330 	.word	0x0801d330
 8001570:	08001239 	.word	0x08001239
 8001574:	200041c0 	.word	0x200041c0
 8001578:	200041d4 	.word	0x200041d4
 800157c:	200041e8 	.word	0x200041e8
 8001580:	00000000 	.word	0x00000000
 8001584:	200041f8 	.word	0x200041f8
 8001588:	43960000 	.word	0x43960000
 800158c:	20004210 	.word	0x20004210
 8001590:	20004228 	.word	0x20004228
 8001594:	20003fdc 	.word	0x20003fdc
 8001598:	20003f94 	.word	0x20003f94
 800159c:	2000406c 	.word	0x2000406c
 80015a0:	20004024 	.word	0x20004024
 80015a4:	00989680 	.word	0x00989680
 80015a8:	20004240 	.word	0x20004240
 80015ac:	20004244 	.word	0x20004244
 80015b0:	0801d338 	.word	0x0801d338
 80015b4:	40020c00 	.word	0x40020c00

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <Error_Handler+0x8>

080015c4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <microros_allocate+0x3c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4413      	add	r3, r2
 80015d8:	461a      	mov	r2, r3
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <microros_allocate+0x3c>)
 80015dc:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <microros_allocate+0x40>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <microros_allocate+0x40>)
 80015ec:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff f88c 	bl	800070c <pvPortMallocMicroROS>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20004248 	.word	0x20004248
 8001604:	2000424c 	.word	0x2000424c

08001608 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff f99b 	bl	8000954 <getBlockSize>
 800161e:	4603      	mov	r3, r0
 8001620:	4a06      	ldr	r2, [pc, #24]	@ (800163c <microros_deallocate+0x34>)
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	461a      	mov	r2, r3
 8001628:	4b04      	ldr	r3, [pc, #16]	@ (800163c <microros_deallocate+0x34>)
 800162a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff f935 	bl	800089c <vPortFreeMicroROS>
  }
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000424c 	.word	0x2000424c

08001640 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <microros_reallocate+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4413      	add	r3, r2
 8001656:	461a      	mov	r2, r3
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <microros_reallocate+0x64>)
 800165a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <microros_reallocate+0x68>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	4413      	add	r3, r2
 8001666:	461a      	mov	r2, r3
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <microros_reallocate+0x68>)
 800166a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d104      	bne.n	800167c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001672:	68b8      	ldr	r0, [r7, #8]
 8001674:	f7ff f84a 	bl	800070c <pvPortMallocMicroROS>
 8001678:	4603      	mov	r3, r0
 800167a:	e00e      	b.n	800169a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7ff f969 	bl	8000954 <getBlockSize>
 8001682:	4603      	mov	r3, r0
 8001684:	4a08      	ldr	r2, [pc, #32]	@ (80016a8 <microros_reallocate+0x68>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	461a      	mov	r2, r3
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <microros_reallocate+0x68>)
 800168e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f7ff f97c 	bl	8000990 <pvPortReallocMicroROS>
 8001698:	4603      	mov	r3, r0
  }
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20004248 	.word	0x20004248
 80016a8:	2000424c 	.word	0x2000424c

080016ac <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	4a0c      	ldr	r2, [pc, #48]	@ (80016f4 <microros_zero_allocate+0x48>)
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <microros_zero_allocate+0x48>)
 80016ca:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	4a08      	ldr	r2, [pc, #32]	@ (80016f8 <microros_zero_allocate+0x4c>)
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	461a      	mov	r2, r3
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <microros_zero_allocate+0x4c>)
 80016de:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f7ff f981 	bl	80009ea <pvPortCallocMicroROS>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20004248 	.word	0x20004248
 80016f8:	2000424c 	.word	0x2000424c
 80016fc:	00000000 	.word	0x00000000

08001700 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001716:	a320      	add	r3, pc, #128	@ (adr r3, 8001798 <UTILS_NanosecondsToTimespec+0x98>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7fe fe10 	bl	8000340 <__aeabi_ldivmod>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800172a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800172e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001798 <UTILS_NanosecondsToTimespec+0x98>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe fe04 	bl	8000340 <__aeabi_ldivmod>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	da20      	bge.n	8001786 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <UTILS_NanosecondsToTimespec+0x90>)
 800174a:	fb82 1203 	smull	r1, r2, r2, r3
 800174e:	1712      	asrs	r2, r2, #28
 8001750:	17db      	asrs	r3, r3, #31
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	6979      	ldr	r1, [r7, #20]
 8001760:	17c8      	asrs	r0, r1, #31
 8001762:	460c      	mov	r4, r1
 8001764:	4605      	mov	r5, r0
 8001766:	ebb2 0804 	subs.w	r8, r2, r4
 800176a:	eb63 0905 	sbc.w	r9, r3, r5
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4906      	ldr	r1, [pc, #24]	@ (8001794 <UTILS_NanosecondsToTimespec+0x94>)
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	441a      	add	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]
    }
}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001790:	44b82fa1 	.word	0x44b82fa1
 8001794:	3b9aca00 	.word	0x3b9aca00
 8001798:	3b9aca00 	.word	0x3b9aca00
 800179c:	00000000 	.word	0x00000000

080017a0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80017a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017a4:	b08e      	sub	sp, #56	@ 0x38
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80017aa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80017ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80017b0:	2300      	movs	r3, #0
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	f04f 0300 	mov.w	r3, #0
 80017be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80017c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c6:	4618      	mov	r0, r3
 80017c8:	f00b fe44 	bl	800d454 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80017cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ce:	17da      	asrs	r2, r3, #31
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	61fa      	str	r2, [r7, #28]
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	69b9      	ldr	r1, [r7, #24]
 80017de:	000b      	movs	r3, r1
 80017e0:	2200      	movs	r2, #0
 80017e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80017e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e8:	2200      	movs	r2, #0
 80017ea:	461c      	mov	r4, r3
 80017ec:	4615      	mov	r5, r2
 80017ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80017f2:	1911      	adds	r1, r2, r4
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	416b      	adcs	r3, r5
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001802:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	f04f 0400 	mov.w	r4, #0
 800180e:	f04f 0500 	mov.w	r5, #0
 8001812:	015d      	lsls	r5, r3, #5
 8001814:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001818:	0154      	lsls	r4, r2, #5
 800181a:	4622      	mov	r2, r4
 800181c:	462b      	mov	r3, r5
 800181e:	ebb2 0800 	subs.w	r8, r2, r0
 8001822:	eb63 0901 	sbc.w	r9, r3, r1
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001832:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001836:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800183a:	4690      	mov	r8, r2
 800183c:	4699      	mov	r9, r3
 800183e:	eb18 0a00 	adds.w	sl, r8, r0
 8001842:	eb49 0b01 	adc.w	fp, r9, r1
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001852:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001856:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800185a:	ebb2 040a 	subs.w	r4, r2, sl
 800185e:	603c      	str	r4, [r7, #0]
 8001860:	eb63 030b 	sbc.w	r3, r3, fp
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800186a:	4623      	mov	r3, r4
 800186c:	181b      	adds	r3, r3, r0
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	462b      	mov	r3, r5
 8001872:	eb41 0303 	adc.w	r3, r1, r3
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	6a3a      	ldr	r2, [r7, #32]
 800187a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800187e:	f7ff ff3f 	bl	8001700 <UTILS_NanosecondsToTimespec>

    return 0;
 8001882:	2300      	movs	r3, #0
 8001884:	4618      	mov	r0, r3
 8001886:	3738      	adds	r7, #56	@ 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800188e <MotorReset>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;


void MotorReset(Motor_t *tmotor)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	tmotor->counter = 0;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
	tmotor->position = 0.0f;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	605a      	str	r2, [r3, #4]
	tmotor->velocity = 0.0f;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
	tmotor->setPoint = 0.0f;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
	tmotor->last_count = 0;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <MotorAngleInit>:
void MotorAngleInit(MOTOR_t *tMOTOR)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
		tMOTOR->cnter = 0;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
		tMOTOR->POS = 0.0f;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
		tMOTOR->Taget_angle = 0.0f;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
		tMOTOR->last_cnt = __HAL_TIM_GET_COUNTER(&htim4);
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <MotorAngleInit+0x38>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	60da      	str	r2, [r3, #12]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	2000406c 	.word	0x2000406c

08001904 <ReadEncoder>:
void ReadEncoder(Motor_t *tmotor, TIM_HandleTypeDef *htim)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    int32_t count = __HAL_TIM_GET_COUNTER(htim);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	613b      	str	r3, [r7, #16]
    int32_t diff = count - tmotor->last_count;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]


    if (diff > 32768)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001926:	dd04      	ble.n	8001932 <ReadEncoder+0x2e>
        diff -= 65536;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e007      	b.n	8001942 <ReadEncoder+0x3e>
    else if (diff < -32768)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001938:	da03      	bge.n	8001942 <ReadEncoder+0x3e>
        diff += 65536;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001940:	617b      	str	r3, [r7, #20]

    tmotor->counter = count;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	601a      	str	r2, [r3, #0]
    tmotor->position += (float)diff / PPR;   //position
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	ed93 7a01 	vldr	s14, [r3, #4]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001958:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 80019a0 <ReadEncoder+0x9c>
 800195c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	edc3 7a01 	vstr	s15, [r3, #4]
    float speed_rps = (diff / PPR) / SAMPLE_TIME;  // vòng/giây
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001974:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80019a0 <ReadEncoder+0x9c>
 8001978:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800197c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80019a4 <ReadEncoder+0xa0>
 8001980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001984:	edc7 7a03 	vstr	s15, [r7, #12]
    tmotor->velocity = speed_rps;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	609a      	str	r2, [r3, #8]
    tmotor->last_count = count;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	611a      	str	r2, [r3, #16]
}
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	458aa000 	.word	0x458aa000
 80019a4:	3c23d70a 	.word	0x3c23d70a

080019a8 <ReadEncoder_angular>:


void ReadEncoder_angular(MOTOR_t *tMOTOR, TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    int32_t cnt = __HAL_TIM_GET_COUNTER(htim);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	613b      	str	r3, [r7, #16]
    int32_t DIFF = cnt - tMOTOR->last_cnt;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	617b      	str	r3, [r7, #20]
    if (DIFF > 32768)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019ca:	dd04      	ble.n	80019d6 <ReadEncoder_angular+0x2e>
            DIFF -= 65536;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	e007      	b.n	80019e6 <ReadEncoder_angular+0x3e>
        else if (DIFF < -32768)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80019dc:	da03      	bge.n	80019e6 <ReadEncoder_angular+0x3e>
            DIFF += 65536;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80019e4:	617b      	str	r3, [r7, #20]
    float K = 79.0f / 43000.0f;
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <ReadEncoder_angular+0x7c>)
 80019e8:	60fb      	str	r3, [r7, #12]
    tMOTOR->cnter = cnt;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	601a      	str	r2, [r3, #0]
    tMOTOR->POS += (float)DIFF*K ;  //position
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	ee07 3a90 	vmov	s15, r3
 80019fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	edc3 7a01 	vstr	s15, [r3, #4]
    tMOTOR->last_cnt = cnt;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	60da      	str	r2, [r3, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	371c      	adds	r7, #28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	3af0ce84 	.word	0x3af0ce84

08001a28 <MotorSetDuty1>:
void MotorSetDuty1(int nDuty)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	if (nDuty > 4200) nDuty = 4200;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001a36:	4293      	cmp	r3, r2
 8001a38:	dd02      	ble.n	8001a40 <MotorSetDuty1+0x18>
 8001a3a:	f241 0368 	movw	r3, #4200	@ 0x1068
 8001a3e:	607b      	str	r3, [r7, #4]
	if (nDuty < -4200) nDuty = -4200;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a18      	ldr	r2, [pc, #96]	@ (8001aa4 <MotorSetDuty1+0x7c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	da01      	bge.n	8001a4c <MotorSetDuty1+0x24>
 8001a48:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MotorSetDuty1+0x7c>)
 8001a4a:	607b      	str	r3, [r7, #4]

	if (nDuty >= 0)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db10      	blt.n	8001a74 <MotorSetDuty1+0x4c>
	{
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a58:	4813      	ldr	r0, [pc, #76]	@ (8001aa8 <MotorSetDuty1+0x80>)
 8001a5a:	f001 fd2d 	bl	80034b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a64:	4810      	ldr	r0, [pc, #64]	@ (8001aa8 <MotorSetDuty1+0x80>)
 8001a66:	f001 fd27 	bl	80034b8 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, nDuty);
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MotorSetDuty1+0x84>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	635a      	str	r2, [r3, #52]	@ 0x34
	{
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, abs(nDuty));
	}
}
 8001a72:	e013      	b.n	8001a9c <MotorSetDuty1+0x74>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a7a:	480b      	ldr	r0, [pc, #44]	@ (8001aa8 <MotorSetDuty1+0x80>)
 8001a7c:	f001 fd1c 	bl	80034b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a86:	4808      	ldr	r0, [pc, #32]	@ (8001aa8 <MotorSetDuty1+0x80>)
 8001a88:	f001 fd16 	bl	80034b8 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, abs(nDuty));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a92:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a96:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <MotorSetDuty1+0x84>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	ffffef98 	.word	0xffffef98
 8001aa8:	40020400 	.word	0x40020400
 8001aac:	20004024 	.word	0x20004024

08001ab0 <MotorSetDuty2>:
void MotorSetDuty2(int nDuty)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if (nDuty > 4200) nDuty = 4200;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	dd02      	ble.n	8001ac8 <MotorSetDuty2+0x18>
 8001ac2:	f241 0368 	movw	r3, #4200	@ 0x1068
 8001ac6:	607b      	str	r3, [r7, #4]
	if (nDuty < -4200) nDuty = -4200;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a18      	ldr	r2, [pc, #96]	@ (8001b2c <MotorSetDuty2+0x7c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	da01      	bge.n	8001ad4 <MotorSetDuty2+0x24>
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <MotorSetDuty2+0x7c>)
 8001ad2:	607b      	str	r3, [r7, #4]

	if (nDuty >= 0)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db10      	blt.n	8001afc <MotorSetDuty2+0x4c>
	{
    HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ae0:	4813      	ldr	r0, [pc, #76]	@ (8001b30 <MotorSetDuty2+0x80>)
 8001ae2:	f001 fce9 	bl	80034b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aec:	4810      	ldr	r0, [pc, #64]	@ (8001b30 <MotorSetDuty2+0x80>)
 8001aee:	f001 fce3 	bl	80034b8 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, nDuty);
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <MotorSetDuty2+0x84>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	639a      	str	r2, [r3, #56]	@ 0x38
	{
    HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, abs(nDuty));
	}
}
 8001afa:	e013      	b.n	8001b24 <MotorSetDuty2+0x74>
    HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b02:	480b      	ldr	r0, [pc, #44]	@ (8001b30 <MotorSetDuty2+0x80>)
 8001b04:	f001 fcd8 	bl	80034b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b0e:	4808      	ldr	r0, [pc, #32]	@ (8001b30 <MotorSetDuty2+0x80>)
 8001b10:	f001 fcd2 	bl	80034b8 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, abs(nDuty));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b1a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <MotorSetDuty2+0x84>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	ffffef98 	.word	0xffffef98
 8001b30:	40020400 	.word	0x40020400
 8001b34:	20004024 	.word	0x20004024

08001b38 <MotorSetDuty3>:


void MotorSetDuty3(int nDuty)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	if (nDuty > 4200) nDuty = 4200;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001b46:	4293      	cmp	r3, r2
 8001b48:	dd02      	ble.n	8001b50 <MotorSetDuty3+0x18>
 8001b4a:	f241 0368 	movw	r3, #4200	@ 0x1068
 8001b4e:	607b      	str	r3, [r7, #4]
	if (nDuty < -4200) nDuty = -4200;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a16      	ldr	r2, [pc, #88]	@ (8001bac <MotorSetDuty3+0x74>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	da01      	bge.n	8001b5c <MotorSetDuty3+0x24>
 8001b58:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <MotorSetDuty3+0x74>)
 8001b5a:	607b      	str	r3, [r7, #4]

	if (nDuty >= 0)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0e      	blt.n	8001b80 <MotorSetDuty3+0x48>
	{
    HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2108      	movs	r1, #8
 8001b66:	4812      	ldr	r0, [pc, #72]	@ (8001bb0 <MotorSetDuty3+0x78>)
 8001b68:	f001 fca6 	bl	80034b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2110      	movs	r1, #16
 8001b70:	480f      	ldr	r0, [pc, #60]	@ (8001bb0 <MotorSetDuty3+0x78>)
 8001b72:	f001 fca1 	bl	80034b8 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, nDuty);
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <MotorSetDuty3+0x7c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	{
    HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, GPIO_PIN_SET);
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, abs(nDuty));
	}
}
 8001b7e:	e011      	b.n	8001ba4 <MotorSetDuty3+0x6c>
    HAL_GPIO_WritePin(IN5_GPIO_Port, IN5_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2108      	movs	r1, #8
 8001b84:	480a      	ldr	r0, [pc, #40]	@ (8001bb0 <MotorSetDuty3+0x78>)
 8001b86:	f001 fc97 	bl	80034b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN6_GPIO_Port, IN6_Pin, GPIO_PIN_SET);
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	4808      	ldr	r0, [pc, #32]	@ (8001bb0 <MotorSetDuty3+0x78>)
 8001b90:	f001 fc92 	bl	80034b8 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, abs(nDuty));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b9a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b9e:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <MotorSetDuty3+0x7c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	ffffef98 	.word	0xffffef98
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	20004024 	.word	0x20004024

08001bb8 <MotorPIDPosition>:




float MotorPIDPosition(PID_CONTROL_t *PID_Ctrl , MOTOR_t *tMOTOR, float pos_set)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	ed87 0a01 	vstr	s0, [r7, #4]
	 if (pos_set > ANGLE_RIGHT )
 8001bc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bca:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	dd02      	ble.n	8001bde <MotorPIDPosition+0x26>
		{
			pos_set = ANGLE_RIGHT ;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <MotorPIDPosition+0x74>)
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	e00a      	b.n	8001bf4 <MotorPIDPosition+0x3c>
		}
	  else if (pos_set < ANGLE_LEFT)
 8001bde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001be2:	eebb 7a0e 	vmov.f32	s14, #190	@ 0xc1f00000 -30.0
 8001be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	d501      	bpl.n	8001bf4 <MotorPIDPosition+0x3c>
		{
			pos_set = ANGLE_LEFT;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <MotorPIDPosition+0x78>)
 8001bf2:	607b      	str	r3, [r7, #4]
		}
	tMOTOR->Taget_angle = pos_set;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
	float g_duty = PIDCompute(PID_Ctrl, tMOTOR->Taget_angle, tMOTOR->POS, 0.01f);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c06:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8001c34 <MotorPIDPosition+0x7c>
 8001c0a:	eef0 0a47 	vmov.f32	s1, s14
 8001c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f866 	bl	8001ce4 <PIDCompute>
 8001c18:	ed87 0a05 	vstr	s0, [r7, #20]
	return g_duty;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	ee07 3a90 	vmov	s15, r3
}
 8001c22:	eeb0 0a67 	vmov.f32	s0, s15
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	41f00000 	.word	0x41f00000
 8001c30:	c1f00000 	.word	0xc1f00000
 8001c34:	3c23d70a 	.word	0x3c23d70a

08001c38 <MotorPIDVelocity>:

float MotorPIDVelocity(PID_CONTROL_t *PID_Ctrl , Motor_t *tmotor, float vel_set)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	ed87 0a01 	vstr	s0, [r7, #4]
	tmotor->setPoint = vel_set;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	60da      	str	r2, [r3, #12]
	float duty = PIDCompute(PID_Ctrl, tmotor->setPoint, tmotor->velocity, 0.01f);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c58:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001c80 <MotorPIDVelocity+0x48>
 8001c5c:	eef0 0a47 	vmov.f32	s1, s14
 8001c60:	eeb0 0a67 	vmov.f32	s0, s15
 8001c64:	68f8      	ldr	r0, [r7, #12]
 8001c66:	f000 f83d 	bl	8001ce4 <PIDCompute>
 8001c6a:	ed87 0a05 	vstr	s0, [r7, #20]
	return duty;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	ee07 3a90 	vmov	s15, r3
}
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	3c23d70a 	.word	0x3c23d70a

08001c84 <PIDReset>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void PIDReset(PID_CONTROL_t *PID_Ctrl)//pPID->dKp = 1.0f;tuong duong v?i:(*pPID).dKp = 1.0f;
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
		PID_Ctrl->dIntergral = 0.0f;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
		PID_Ctrl->dErrorTerm = 0.0f;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
		PID_Ctrl->result = 0.0f;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <PIDInit>:


void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8001cc0:	ed87 1a00 	vstr	s2, [r7]
		PIDReset(PID_Ctrl);
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff ffdd 	bl	8001c84 <PIDReset>
		PID_Ctrl->dKp = dKp;// = PID_Ctrl.dKp = dKp
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	601a      	str	r2, [r3, #0]
		PID_Ctrl->dKi = dKi;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	605a      	str	r2, [r3, #4]
		PID_Ctrl->dKd = dKd;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	609a      	str	r2, [r3, #8]
}
 8001cdc:	bf00      	nop
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <PIDCompute>:

float PIDCompute(PID_CONTROL_t *PID_Ctrl, float SetPoint, float Input, float dTs)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cf0:	edc7 0a01 	vstr	s1, [r7, #4]
 8001cf4:	ed87 1a00 	vstr	s2, [r7]
	float Error = SetPoint - Input;
 8001cf8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d04:	edc7 7a07 	vstr	s15, [r7, #28]
	float dP = 0 , dI = 0 , dD = 0;
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]

	dP = PID_Ctrl->dKp*Error;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d28:	edc7 7a06 	vstr	s15, [r7, #24]
	PID_Ctrl->dIntergral += Error;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d32:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	edc3 7a04 	vstr	s15, [r3, #16]
	dI = PID_Ctrl->dKi * dTs/2 * PID_Ctrl->dIntergral;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d46:	edd7 7a00 	vldr	s15, [r7]
 8001d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d60:	edc7 7a05 	vstr	s15, [r7, #20]
	dD = PID_Ctrl->dKd * (Error - PID_Ctrl->dErrorTerm)/ dTs;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d70:	edd7 6a07 	vldr	s13, [r7, #28]
 8001d74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d78:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d7c:	ed97 7a00 	vldr	s14, [r7]
 8001d80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d84:	edc7 7a04 	vstr	s15, [r7, #16]

	PID_Ctrl->result = (dP+dI+dD);
 8001d88:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edc3 7a05 	vstr	s15, [r3, #20]
	if(PID_Ctrl->result > 4200)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001da8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001df4 <PIDCompute+0x110>
 8001dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	dd02      	ble.n	8001dbc <PIDCompute+0xd8>
	{
		PID_Ctrl-> result = 4200;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4a0f      	ldr	r2, [pc, #60]	@ (8001df8 <PIDCompute+0x114>)
 8001dba:	615a      	str	r2, [r3, #20]
	}
		if(PID_Ctrl->result < -4200)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dc2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001dfc <PIDCompute+0x118>
 8001dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d502      	bpl.n	8001dd6 <PIDCompute+0xf2>
	{
		PID_Ctrl-> result = -4200;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e00 <PIDCompute+0x11c>)
 8001dd4:	615a      	str	r2, [r3, #20]
	}
	PID_Ctrl->dErrorTerm = Error;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	60da      	str	r2, [r3, #12]
	return PID_Ctrl->result;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	ee07 3a90 	vmov	s15, r3
}
 8001de4:	eeb0 0a67 	vmov.f32	s0, s15
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	45834000 	.word	0x45834000
 8001df8:	45834000 	.word	0x45834000
 8001dfc:	c5834000 	.word	0xc5834000
 8001e00:	c5834000 	.word	0xc5834000

08001e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	4a11      	ldr	r2, [pc, #68]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_MspInit+0x54>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	210f      	movs	r1, #15
 8001e46:	f06f 0001 	mvn.w	r0, #1
 8001e4a:	f000 fd60 	bl	800290e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800

08001e5c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	@ 0x38
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4c      	ldr	r2, [pc, #304]	@ (8001fac <HAL_TIM_Encoder_MspInit+0x150>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d12d      	bne.n	8001eda <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
 8001e82:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8e:	4b48      	ldr	r3, [pc, #288]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	4b44      	ldr	r3, [pc, #272]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a43      	ldr	r2, [pc, #268]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001eb6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001eba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4838      	ldr	r0, [pc, #224]	@ (8001fb4 <HAL_TIM_Encoder_MspInit+0x158>)
 8001ed4:	f001 f954 	bl	8003180 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ed8:	e063      	b.n	8001fa2 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee2:	d12d      	bne.n	8001f40 <HAL_TIM_Encoder_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	4b31      	ldr	r3, [pc, #196]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	4a30      	ldr	r2, [pc, #192]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	4a29      	ldr	r2, [pc, #164]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f10:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001f1c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f22:	2302      	movs	r3, #2
 8001f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f36:	4619      	mov	r1, r3
 8001f38:	481f      	ldr	r0, [pc, #124]	@ (8001fb8 <HAL_TIM_Encoder_MspInit+0x15c>)
 8001f3a:	f001 f921 	bl	8003180 <HAL_GPIO_Init>
}
 8001f3e:	e030      	b.n	8001fa2 <HAL_TIM_Encoder_MspInit+0x146>
  else if(htim_encoder->Instance==TIM4)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_TIM_Encoder_MspInit+0x160>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d12b      	bne.n	8001fa2 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_TIM_Encoder_MspInit+0x154>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f82:	23c0      	movs	r3, #192	@ 0xc0
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f92:	2302      	movs	r3, #2
 8001f94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4808      	ldr	r0, [pc, #32]	@ (8001fc0 <HAL_TIM_Encoder_MspInit+0x164>)
 8001f9e:	f001 f8ef 	bl	8003180 <HAL_GPIO_Init>
}
 8001fa2:	bf00      	nop
 8001fa4:	3738      	adds	r7, #56	@ 0x38
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40000800 	.word	0x40000800
 8001fc0:	40020400 	.word	0x40020400

08001fc4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002000 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <HAL_TIM_PWM_MspInit+0x40>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <HAL_TIM_PWM_MspInit+0x40>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <HAL_TIM_PWM_MspInit+0x40>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40000400 	.word	0x40000400
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	@ 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a21      	ldr	r2, [pc, #132]	@ (80020ac <HAL_TIM_MspPostInit+0xa4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d13c      	bne.n	80020a4 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <HAL_TIM_MspPostInit+0xa8>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	4a1f      	ldr	r2, [pc, #124]	@ (80020b0 <HAL_TIM_MspPostInit+0xa8>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	6313      	str	r3, [r2, #48]	@ 0x30
 800203a:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <HAL_TIM_MspPostInit+0xa8>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <HAL_TIM_MspPostInit+0xa8>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4a18      	ldr	r2, [pc, #96]	@ (80020b0 <HAL_TIM_MspPostInit+0xa8>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <HAL_TIM_MspPostInit+0xa8>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8002062:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002074:	2302      	movs	r3, #2
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <HAL_TIM_MspPostInit+0xac>)
 8002080:	f001 f87e 	bl	8003180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002084:	2320      	movs	r3, #32
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002094:	2302      	movs	r3, #2
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	4806      	ldr	r0, [pc, #24]	@ (80020b8 <HAL_TIM_MspPostInit+0xb0>)
 80020a0:	f001 f86e 	bl	8003180 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	@ 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40000400 	.word	0x40000400
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020400 	.word	0x40020400

080020bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	@ 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 0314 	add.w	r3, r7, #20
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002210 <HAL_UART_MspInit+0x154>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	f040 8093 	bne.w	8002206 <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002214 <HAL_UART_MspInit+0x158>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002214 <HAL_UART_MspInit+0x158>)
 80020ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f0:	4b48      	ldr	r3, [pc, #288]	@ (8002214 <HAL_UART_MspInit+0x158>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	4b44      	ldr	r3, [pc, #272]	@ (8002214 <HAL_UART_MspInit+0x158>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	4a43      	ldr	r2, [pc, #268]	@ (8002214 <HAL_UART_MspInit+0x158>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6313      	str	r3, [r2, #48]	@ 0x30
 800210c:	4b41      	ldr	r3, [pc, #260]	@ (8002214 <HAL_UART_MspInit+0x158>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002118:	230c      	movs	r3, #12
 800211a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002128:	2307      	movs	r3, #7
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	4839      	ldr	r0, [pc, #228]	@ (8002218 <HAL_UART_MspInit+0x15c>)
 8002134:	f001 f824 	bl	8003180 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002138:	4b38      	ldr	r3, [pc, #224]	@ (800221c <HAL_UART_MspInit+0x160>)
 800213a:	4a39      	ldr	r2, [pc, #228]	@ (8002220 <HAL_UART_MspInit+0x164>)
 800213c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800213e:	4b37      	ldr	r3, [pc, #220]	@ (800221c <HAL_UART_MspInit+0x160>)
 8002140:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002144:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002146:	4b35      	ldr	r3, [pc, #212]	@ (800221c <HAL_UART_MspInit+0x160>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800214c:	4b33      	ldr	r3, [pc, #204]	@ (800221c <HAL_UART_MspInit+0x160>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002152:	4b32      	ldr	r3, [pc, #200]	@ (800221c <HAL_UART_MspInit+0x160>)
 8002154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002158:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800215a:	4b30      	ldr	r3, [pc, #192]	@ (800221c <HAL_UART_MspInit+0x160>)
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002160:	4b2e      	ldr	r3, [pc, #184]	@ (800221c <HAL_UART_MspInit+0x160>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002166:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <HAL_UART_MspInit+0x160>)
 8002168:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800216c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800216e:	4b2b      	ldr	r3, [pc, #172]	@ (800221c <HAL_UART_MspInit+0x160>)
 8002170:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002174:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002176:	4b29      	ldr	r3, [pc, #164]	@ (800221c <HAL_UART_MspInit+0x160>)
 8002178:	2200      	movs	r2, #0
 800217a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800217c:	4827      	ldr	r0, [pc, #156]	@ (800221c <HAL_UART_MspInit+0x160>)
 800217e:	f000 fbfd 	bl	800297c <HAL_DMA_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002188:	f7ff fa16 	bl	80015b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a23      	ldr	r2, [pc, #140]	@ (800221c <HAL_UART_MspInit+0x160>)
 8002190:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002192:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_UART_MspInit+0x160>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002198:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <HAL_UART_MspInit+0x168>)
 800219a:	4a23      	ldr	r2, [pc, #140]	@ (8002228 <HAL_UART_MspInit+0x16c>)
 800219c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800219e:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021a8:	2240      	movs	r2, #64	@ 0x40
 80021aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c0:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80021c6:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021cc:	4b15      	ldr	r3, [pc, #84]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021ce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021d2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021d4:	4b13      	ldr	r3, [pc, #76]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021da:	4812      	ldr	r0, [pc, #72]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021dc:	f000 fbce 	bl	800297c <HAL_DMA_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80021e6:	f7ff f9e7 	bl	80015b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80021f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002224 <HAL_UART_MspInit+0x168>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2105      	movs	r1, #5
 80021fa:	2026      	movs	r0, #38	@ 0x26
 80021fc:	f000 fb87 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002200:	2026      	movs	r0, #38	@ 0x26
 8002202:	f000 fba0 	bl	8002946 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	@ 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40004400 	.word	0x40004400
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000
 800221c:	200040fc 	.word	0x200040fc
 8002220:	40026088 	.word	0x40026088
 8002224:	2000415c 	.word	0x2000415c
 8002228:	400260a0 	.word	0x400260a0

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <NMI_Handler+0x4>

08002234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <MemManage_Handler+0x4>

08002244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <UsageFault_Handler+0x4>

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002266:	f000 fa33 	bl	80026d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800226a:	f00b fa77 	bl	800d75c <xTaskGetSchedulerState>
 800226e:	4603      	mov	r3, r0
 8002270:	2b01      	cmp	r3, #1
 8002272:	d001      	beq.n	8002278 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002274:	f00c f870 	bl	800e358 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <DMA1_Stream5_IRQHandler+0x10>)
 8002282:	f000 fd13 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200040fc 	.word	0x200040fc

08002290 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <DMA1_Stream6_IRQHandler+0x10>)
 8002296:	f000 fd09 	bl	8002cac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000415c 	.word	0x2000415c

080022a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <USART2_IRQHandler+0x10>)
 80022aa:	f004 fe57 	bl	8006f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200040b4 	.word	0x200040b4

080022b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <OTG_FS_IRQHandler+0x10>)
 80022be:	f001 fbeb 	bl	8003a98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200097c0 	.word	0x200097c0

080022cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return 1;
 80022d0:	2301      	movs	r3, #1
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_kill>:

int _kill(int pid, int sig)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022e6:	f01a f8d9 	bl	801c49c <__errno>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2216      	movs	r2, #22
 80022ee:	601a      	str	r2, [r3, #0]
  return -1;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_exit>:

void _exit (int status)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002304:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ffe7 	bl	80022dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800230e:	bf00      	nop
 8002310:	e7fd      	b.n	800230e <_exit+0x12>

08002312 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e00a      	b.n	800233a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002324:	f3af 8000 	nop.w
 8002328:	4601      	mov	r1, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	60ba      	str	r2, [r7, #8]
 8002330:	b2ca      	uxtb	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	dbf0      	blt.n	8002324 <_read+0x12>
  }

  return len;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e009      	b.n	8002372 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbf1      	blt.n	800235e <_write+0x12>
  }
  return len;
 800237a:	687b      	ldr	r3, [r7, #4]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_close>:

int _close(int file)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023ac:	605a      	str	r2, [r3, #4]
  return 0;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_isatty>:

int _isatty(int file)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023c4:	2301      	movs	r3, #1
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f01a f83e 	bl	801c49c <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	@ (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20020000 	.word	0x20020000
 800244c:	00000400 	.word	0x00000400
 8002450:	20004254 	.word	0x20004254
 8002454:	2000e868 	.word	0x2000e868

08002458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <SystemInit+0x20>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	4a05      	ldr	r2, [pc, #20]	@ (8002478 <SystemInit+0x20>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800248a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800248c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002490:	4904      	ldr	r1, [pc, #16]	@ (80024a4 <cubemx_transport_open+0x28>)
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f004 fcbe 	bl	8006e14 <HAL_UART_Receive_DMA>
    return true;
 8002498:	2301      	movs	r3, #1
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20004258 	.word	0x20004258

080024a8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80024b6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f004 fcd0 	bl	8006e5e <HAL_UART_DMAStop>
    return true;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80024dc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d11c      	bne.n	8002524 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	6978      	ldr	r0, [r7, #20]
 80024f4:	f004 fc12 	bl	8006d1c <HAL_UART_Transmit_DMA>
 80024f8:	4603      	mov	r3, r0
 80024fa:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80024fc:	e002      	b.n	8002504 <cubemx_transport_write+0x3c>
            osDelay(1);
 80024fe:	2001      	movs	r0, #1
 8002500:	f009 fa94 	bl	800ba2c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d105      	bne.n	8002516 <cubemx_transport_write+0x4e>
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b20      	cmp	r3, #32
 8002514:	d1f3      	bne.n	80024fe <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <cubemx_transport_write+0x58>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	e002      	b.n	8002526 <cubemx_transport_write+0x5e>
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002524:	2300      	movs	r3, #0
    }
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002544:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800254a:	b672      	cpsid	i
}
 800254c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800255a:	4a1c      	ldr	r2, [pc, #112]	@ (80025cc <cubemx_transport_read+0x9c>)
 800255c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800255e:	b662      	cpsie	i
}
 8002560:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002568:	2001      	movs	r0, #1
 800256a:	f009 fa5f 	bl	800ba2c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800256e:	4b18      	ldr	r3, [pc, #96]	@ (80025d0 <cubemx_transport_read+0xa0>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <cubemx_transport_read+0x9c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d103      	bne.n	8002582 <cubemx_transport_read+0x52>
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	dbe3      	blt.n	800254a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002586:	e011      	b.n	80025ac <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <cubemx_transport_read+0xa0>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	440b      	add	r3, r1
 8002592:	4910      	ldr	r1, [pc, #64]	@ (80025d4 <cubemx_transport_read+0xa4>)
 8002594:	5c8a      	ldrb	r2, [r1, r2]
 8002596:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002598:	4b0d      	ldr	r3, [pc, #52]	@ (80025d0 <cubemx_transport_read+0xa0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a2:	4a0b      	ldr	r2, [pc, #44]	@ (80025d0 <cubemx_transport_read+0xa0>)
 80025a4:	6013      	str	r3, [r2, #0]
        wrote++;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80025ac:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <cubemx_transport_read+0xa0>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <cubemx_transport_read+0x9c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d003      	beq.n	80025c0 <cubemx_transport_read+0x90>
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3e3      	bcc.n	8002588 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80025c0:	69bb      	ldr	r3, [r7, #24]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3720      	adds	r7, #32
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20004a5c 	.word	0x20004a5c
 80025d0:	20004a58 	.word	0x20004a58
 80025d4:	20004258 	.word	0x20004258

080025d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002610 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025dc:	f7ff ff3c 	bl	8002458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e0:	480c      	ldr	r0, [pc, #48]	@ (8002614 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025e2:	490d      	ldr	r1, [pc, #52]	@ (8002618 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025e4:	4a0d      	ldr	r2, [pc, #52]	@ (800261c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e8:	e002      	b.n	80025f0 <LoopCopyDataInit>

080025ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ee:	3304      	adds	r3, #4

080025f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f4:	d3f9      	bcc.n	80025ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002624 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025fc:	e001      	b.n	8002602 <LoopFillZerobss>

080025fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002600:	3204      	adds	r2, #4

08002602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002604:	d3fb      	bcc.n	80025fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002606:	f019 ff4f 	bl	801c4a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800260a:	f7fe facf 	bl	8000bac <main>
  bx  lr    
 800260e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002618:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 800261c:	0801e2c0 	.word	0x0801e2c0
  ldr r2, =_sbss
 8002620:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8002624:	2000e864 	.word	0x2000e864

08002628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002628:	e7fe      	b.n	8002628 <ADC_IRQHandler>
	...

0800262c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002630:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <HAL_Init+0x40>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0d      	ldr	r2, [pc, #52]	@ (800266c <HAL_Init+0x40>)
 8002636:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800263a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_Init+0x40>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <HAL_Init+0x40>)
 8002642:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002646:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <HAL_Init+0x40>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a07      	ldr	r2, [pc, #28]	@ (800266c <HAL_Init+0x40>)
 800264e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002652:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002654:	2003      	movs	r0, #3
 8002656:	f000 f94f 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800265a:	2000      	movs	r0, #0
 800265c:	f000 f808 	bl	8002670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002660:	f7ff fbd0 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00

08002670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_InitTick+0x54>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <HAL_InitTick+0x58>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002686:	fbb3 f3f1 	udiv	r3, r3, r1
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f967 	bl	8002962 <HAL_SYSTICK_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e00e      	b.n	80026bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d80a      	bhi.n	80026ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026ac:	f000 f92f 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026b0:	4a06      	ldr	r2, [pc, #24]	@ (80026cc <HAL_InitTick+0x5c>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e000      	b.n	80026bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000004 	.word	0x20000004
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	20000008 	.word	0x20000008

080026d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_IncTick+0x20>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_IncTick+0x24>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <HAL_IncTick+0x24>)
 80026e2:	6013      	str	r3, [r2, #0]
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	2000000c 	.word	0x2000000c
 80026f4:	20004a60 	.word	0x20004a60

080026f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return uwTick;
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <HAL_GetTick+0x14>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20004a60 	.word	0x20004a60

08002710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff ffee 	bl	80026f8 <HAL_GetTick>
 800271c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002728:	d005      	beq.n	8002736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800272a:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <HAL_Delay+0x44>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002736:	bf00      	nop
 8002738:	f7ff ffde 	bl	80026f8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	429a      	cmp	r2, r3
 8002746:	d8f7      	bhi.n	8002738 <HAL_Delay+0x28>
  {
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000000c 	.word	0x2000000c

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	@ (80027f4 <__NVIC_EnableIRQ+0x38>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff29 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff3e 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff8e 	bl	800284c <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5d 	bl	80027f8 <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff31 	bl	80027bc <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff feb6 	bl	80026f8 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e099      	b.n	8002acc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b8:	e00f      	b.n	80029da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ba:	f7ff fe9d 	bl	80026f8 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d908      	bls.n	80029da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e078      	b.n	8002acc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e8      	bne.n	80029ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <HAL_DMA_Init+0x158>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d107      	bne.n	8002a44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d117      	bne.n	8002a9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fb01 	bl	8003088 <DMA_CheckFifoParam>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e016      	b.n	8002acc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fab8 	bl	800301c <DMA_CalcBaseAndBitshift>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab4:	223f      	movs	r2, #63	@ 0x3f
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	f010803f 	.word	0xf010803f

08002ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_DMA_Start_IT+0x26>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e040      	b.n	8002b80 <HAL_DMA_Start_IT+0xa8>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d12f      	bne.n	8002b72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fa4a 	bl	8002fc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	223f      	movs	r2, #63	@ 0x3f
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0216 	orr.w	r2, r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0208 	orr.w	r2, r2, #8
 8002b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e005      	b.n	8002b7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b96:	f7ff fdaf 	bl	80026f8 <HAL_GetTick>
 8002b9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d008      	beq.n	8002bba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e052      	b.n	8002c60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0216 	bic.w	r2, r2, #22
 8002bc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_DMA_Abort+0x62>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0208 	bic.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0a:	e013      	b.n	8002c34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0c:	f7ff fd74 	bl	80026f8 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d90c      	bls.n	8002c34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2203      	movs	r2, #3
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e015      	b.n	8002c60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1e4      	bne.n	8002c0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c46:	223f      	movs	r2, #63	@ 0x3f
 8002c48:	409a      	lsls	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d004      	beq.n	8002c86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2280      	movs	r2, #128	@ 0x80
 8002c80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e00c      	b.n	8002ca0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2205      	movs	r2, #5
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef4 <HAL_DMA_IRQHandler+0x248>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a8e      	ldr	r2, [pc, #568]	@ (8002ef8 <HAL_DMA_IRQHandler+0x24c>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0a9b      	lsrs	r3, r3, #10
 8002cc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d01a      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d013      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0204 	bic.w	r2, r2, #4
 8002cfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d04:	2208      	movs	r2, #8
 8002d06:	409a      	lsls	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d52:	2204      	movs	r2, #4
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d012      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	2204      	movs	r2, #4
 8002d72:	409a      	lsls	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	2210      	movs	r2, #16
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d043      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03c      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da6:	2210      	movs	r2, #16
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d018      	beq.n	8002dee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d108      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d024      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
 8002dda:	e01f      	b.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e016      	b.n	8002e1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0208 	bic.w	r2, r2, #8
 8002e0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e20:	2220      	movs	r2, #32
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 808f 	beq.w	8002f4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8087 	beq.w	8002f4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e42:	2220      	movs	r2, #32
 8002e44:	409a      	lsls	r2, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d136      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0216 	bic.w	r2, r2, #22
 8002e64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <HAL_DMA_IRQHandler+0x1da>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0208 	bic.w	r2, r2, #8
 8002e94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	223f      	movs	r2, #63	@ 0x3f
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d07e      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	4798      	blx	r3
        }
        return;
 8002ec2:	e079      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d031      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
 8002ef0:	e02c      	b.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
 8002ef2:	bf00      	nop
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d023      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
 8002f0c:	e01e      	b.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10f      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0210 	bic.w	r2, r2, #16
 8002f2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d032      	beq.n	8002fba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d022      	beq.n	8002fa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2205      	movs	r2, #5
 8002f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d307      	bcc.n	8002f94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f2      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x2cc>
 8002f92:	e000      	b.n	8002f96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
 8002fb6:	e000      	b.n	8002fba <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fb8:	bf00      	nop
    }
  }
}
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2b40      	cmp	r3, #64	@ 0x40
 8002fec:	d108      	bne.n	8003000 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ffe:	e007      	b.n	8003010 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	3b10      	subs	r3, #16
 800302c:	4a14      	ldr	r2, [pc, #80]	@ (8003080 <DMA_CalcBaseAndBitshift+0x64>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003036:	4a13      	ldr	r2, [pc, #76]	@ (8003084 <DMA_CalcBaseAndBitshift+0x68>)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	461a      	mov	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b03      	cmp	r3, #3
 8003048:	d909      	bls.n	800305e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	1d1a      	adds	r2, r3, #4
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	659a      	str	r2, [r3, #88]	@ 0x58
 800305c:	e007      	b.n	800306e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	aaaaaaab 	.word	0xaaaaaaab
 8003084:	0801d3e4 	.word	0x0801d3e4

08003088 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d11f      	bne.n	80030e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d856      	bhi.n	8003156 <DMA_CheckFifoParam+0xce>
 80030a8:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <DMA_CheckFifoParam+0x28>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030d3 	.word	0x080030d3
 80030b8:	080030c1 	.word	0x080030c1
 80030bc:	08003157 	.word	0x08003157
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d046      	beq.n	800315a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d0:	e043      	b.n	800315a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030da:	d140      	bne.n	800315e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e0:	e03d      	b.n	800315e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ea:	d121      	bne.n	8003130 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b03      	cmp	r3, #3
 80030f0:	d837      	bhi.n	8003162 <DMA_CheckFifoParam+0xda>
 80030f2:	a201      	add	r2, pc, #4	@ (adr r2, 80030f8 <DMA_CheckFifoParam+0x70>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	08003109 	.word	0x08003109
 80030fc:	0800310f 	.word	0x0800310f
 8003100:	08003109 	.word	0x08003109
 8003104:	08003121 	.word	0x08003121
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      break;
 800310c:	e030      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d025      	beq.n	8003166 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800311e:	e022      	b.n	8003166 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003128:	d11f      	bne.n	800316a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800312e:	e01c      	b.n	800316a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d903      	bls.n	800313e <DMA_CheckFifoParam+0xb6>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d003      	beq.n	8003144 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800313c:	e018      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
      break;
 8003142:	e015      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	e00b      	b.n	800316e <DMA_CheckFifoParam+0xe6>
      break;
 8003156:	bf00      	nop
 8003158:	e00a      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 800315a:	bf00      	nop
 800315c:	e008      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 800315e:	bf00      	nop
 8003160:	e006      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 8003162:	bf00      	nop
 8003164:	e004      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 8003166:	bf00      	nop
 8003168:	e002      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;   
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <DMA_CheckFifoParam+0xe8>
      break;
 800316e:	bf00      	nop
    }
  } 
  
  return status; 
 8003170:	7bfb      	ldrb	r3, [r7, #15]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003180:	b480      	push	{r7}
 8003182:	b089      	sub	sp, #36	@ 0x24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	e16b      	b.n	8003474 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800319c:	2201      	movs	r2, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	f040 815a 	bne.w	800346e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d005      	beq.n	80031d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d130      	bne.n	8003234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	2203      	movs	r2, #3
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003208:	2201      	movs	r2, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 0201 	and.w	r2, r3, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d017      	beq.n	8003270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d123      	bne.n	80032c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	08da      	lsrs	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3208      	adds	r2, #8
 8003284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3208      	adds	r2, #8
 80032be:	69b9      	ldr	r1, [r7, #24]
 80032c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80b4 	beq.w	800346e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	4b60      	ldr	r3, [pc, #384]	@ (800348c <HAL_GPIO_Init+0x30c>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	4a5f      	ldr	r2, [pc, #380]	@ (800348c <HAL_GPIO_Init+0x30c>)
 8003310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003314:	6453      	str	r3, [r2, #68]	@ 0x44
 8003316:	4b5d      	ldr	r3, [pc, #372]	@ (800348c <HAL_GPIO_Init+0x30c>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003322:	4a5b      	ldr	r2, [pc, #364]	@ (8003490 <HAL_GPIO_Init+0x310>)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3302      	adds	r3, #2
 800332a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	220f      	movs	r2, #15
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a52      	ldr	r2, [pc, #328]	@ (8003494 <HAL_GPIO_Init+0x314>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d02b      	beq.n	80033a6 <HAL_GPIO_Init+0x226>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a51      	ldr	r2, [pc, #324]	@ (8003498 <HAL_GPIO_Init+0x318>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d025      	beq.n	80033a2 <HAL_GPIO_Init+0x222>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a50      	ldr	r2, [pc, #320]	@ (800349c <HAL_GPIO_Init+0x31c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01f      	beq.n	800339e <HAL_GPIO_Init+0x21e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4f      	ldr	r2, [pc, #316]	@ (80034a0 <HAL_GPIO_Init+0x320>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d019      	beq.n	800339a <HAL_GPIO_Init+0x21a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a4e      	ldr	r2, [pc, #312]	@ (80034a4 <HAL_GPIO_Init+0x324>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <HAL_GPIO_Init+0x216>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a4d      	ldr	r2, [pc, #308]	@ (80034a8 <HAL_GPIO_Init+0x328>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00d      	beq.n	8003392 <HAL_GPIO_Init+0x212>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4c      	ldr	r2, [pc, #304]	@ (80034ac <HAL_GPIO_Init+0x32c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <HAL_GPIO_Init+0x20e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4b      	ldr	r2, [pc, #300]	@ (80034b0 <HAL_GPIO_Init+0x330>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_GPIO_Init+0x20a>
 8003386:	2307      	movs	r3, #7
 8003388:	e00e      	b.n	80033a8 <HAL_GPIO_Init+0x228>
 800338a:	2308      	movs	r3, #8
 800338c:	e00c      	b.n	80033a8 <HAL_GPIO_Init+0x228>
 800338e:	2306      	movs	r3, #6
 8003390:	e00a      	b.n	80033a8 <HAL_GPIO_Init+0x228>
 8003392:	2305      	movs	r3, #5
 8003394:	e008      	b.n	80033a8 <HAL_GPIO_Init+0x228>
 8003396:	2304      	movs	r3, #4
 8003398:	e006      	b.n	80033a8 <HAL_GPIO_Init+0x228>
 800339a:	2303      	movs	r3, #3
 800339c:	e004      	b.n	80033a8 <HAL_GPIO_Init+0x228>
 800339e:	2302      	movs	r3, #2
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_Init+0x228>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_GPIO_Init+0x228>
 80033a6:	2300      	movs	r3, #0
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f002 0203 	and.w	r2, r2, #3
 80033ae:	0092      	lsls	r2, r2, #2
 80033b0:	4093      	lsls	r3, r2
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b8:	4935      	ldr	r1, [pc, #212]	@ (8003490 <HAL_GPIO_Init+0x310>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c6:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <HAL_GPIO_Init+0x334>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ea:	4a32      	ldr	r2, [pc, #200]	@ (80034b4 <HAL_GPIO_Init+0x334>)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f0:	4b30      	ldr	r3, [pc, #192]	@ (80034b4 <HAL_GPIO_Init+0x334>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003414:	4a27      	ldr	r2, [pc, #156]	@ (80034b4 <HAL_GPIO_Init+0x334>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800341a:	4b26      	ldr	r3, [pc, #152]	@ (80034b4 <HAL_GPIO_Init+0x334>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343e:	4a1d      	ldr	r2, [pc, #116]	@ (80034b4 <HAL_GPIO_Init+0x334>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003444:	4b1b      	ldr	r3, [pc, #108]	@ (80034b4 <HAL_GPIO_Init+0x334>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003468:	4a12      	ldr	r2, [pc, #72]	@ (80034b4 <HAL_GPIO_Init+0x334>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3301      	adds	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	f67f ae90 	bls.w	800319c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3724      	adds	r7, #36	@ 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40013800 	.word	0x40013800
 8003494:	40020000 	.word	0x40020000
 8003498:	40020400 	.word	0x40020400
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020c00 	.word	0x40020c00
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40021400 	.word	0x40021400
 80034ac:	40021800 	.word	0x40021800
 80034b0:	40021c00 	.word	0x40021c00
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
 80034c4:	4613      	mov	r3, r2
 80034c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034d4:	e003      	b.n	80034de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034d6:	887b      	ldrh	r3, [r7, #2]
 80034d8:	041a      	lsls	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	619a      	str	r2, [r3, #24]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034fc:	887a      	ldrh	r2, [r7, #2]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4013      	ands	r3, r2
 8003502:	041a      	lsls	r2, r3, #16
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43d9      	mvns	r1, r3
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	400b      	ands	r3, r1
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	619a      	str	r2, [r3, #24]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af02      	add	r7, sp, #8
 8003524:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e059      	b.n	80035e4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f00b f9d8 	bl	800e900 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800355e:	d102      	bne.n	8003566 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f004 fe89 	bl	8008282 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7c1a      	ldrb	r2, [r3, #16]
 8003578:	f88d 2000 	strb.w	r2, [sp]
 800357c:	3304      	adds	r3, #4
 800357e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003580:	f004 fe0a 	bl	8008198 <USB_CoreInit>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e026      	b.n	80035e4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f004 fe81 	bl	80082a4 <USB_SetCurrentMode>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e017      	b.n	80035e4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7c1a      	ldrb	r2, [r3, #16]
 80035bc:	f88d 2000 	strb.w	r2, [sp]
 80035c0:	3304      	adds	r3, #4
 80035c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c4:	f005 f82a 	bl	800861c <USB_HostInit>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e004      	b.n	80035e4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b08b      	sub	sp, #44	@ 0x2c
 80035f0:	af04      	add	r7, sp, #16
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	70fb      	strb	r3, [r7, #3]
 80035fe:	460b      	mov	r3, r1
 8003600:	70bb      	strb	r3, [r7, #2]
 8003602:	4613      	mov	r3, r2
 8003604:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003606:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003608:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_HCD_HC_Init+0x2c>
 8003614:	2302      	movs	r3, #2
 8003616:	e09d      	b.n	8003754 <HAL_HCD_HC_Init+0x168>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3319      	adds	r3, #25
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3314      	adds	r3, #20
 8003644:	787a      	ldrb	r2, [r7, #1]
 8003646:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3315      	adds	r3, #21
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3326      	adds	r3, #38	@ 0x26
 800366c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003670:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	78bb      	ldrb	r3, [r7, #2]
 8003676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800367a:	b2d8      	uxtb	r0, r3
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3316      	adds	r3, #22
 800368a:	4602      	mov	r2, r0
 800368c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fba4 	bl	8003de0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003698:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800369c:	2b00      	cmp	r3, #0
 800369e:	da0a      	bge.n	80036b6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3317      	adds	r3, #23
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e009      	b.n	80036ca <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3317      	adds	r3, #23
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f005 f908 	bl	80088e4 <USB_GetHostSpeed>
 80036d4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80036d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10b      	bne.n	80036f6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80036de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d107      	bne.n	80036f6 <HAL_HCD_HC_Init+0x10a>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2bbc      	cmp	r3, #188	@ 0xbc
 80036f0:	d901      	bls.n	80036f6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80036f2:	23bc      	movs	r3, #188	@ 0xbc
 80036f4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3318      	adds	r3, #24
 8003706:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800370a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	b298      	uxth	r0, r3
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	3328      	adds	r3, #40	@ 0x28
 8003720:	4602      	mov	r2, r0
 8003722:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	b29b      	uxth	r3, r3
 800372c:	787c      	ldrb	r4, [r7, #1]
 800372e:	78ba      	ldrb	r2, [r7, #2]
 8003730:	78f9      	ldrb	r1, [r7, #3]
 8003732:	9302      	str	r3, [sp, #8]
 8003734:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	4623      	mov	r3, r4
 8003742:	f005 f8f7 	bl	8008934 <USB_HC_Init>
 8003746:	4603      	mov	r3, r0
 8003748:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003752:	7bfb      	ldrb	r3, [r7, #15]
}
 8003754:	4618      	mov	r0, r3
 8003756:	371c      	adds	r7, #28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd90      	pop	{r4, r7, pc}

0800375c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	461a      	mov	r2, r3
 800376a:	4603      	mov	r3, r0
 800376c:	70fb      	strb	r3, [r7, #3]
 800376e:	460b      	mov	r3, r1
 8003770:	70bb      	strb	r3, [r7, #2]
 8003772:	4613      	mov	r3, r2
 8003774:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	3317      	adds	r3, #23
 8003786:	78ba      	ldrb	r2, [r7, #2]
 8003788:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3326      	adds	r3, #38	@ 0x26
 800379a:	787a      	ldrb	r2, [r7, #1]
 800379c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800379e:	7c3b      	ldrb	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d114      	bne.n	80037ce <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	332a      	adds	r3, #42	@ 0x2a
 80037b4:	2203      	movs	r2, #3
 80037b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3319      	adds	r3, #25
 80037c8:	7f3a      	ldrb	r2, [r7, #28]
 80037ca:	701a      	strb	r2, [r3, #0]
 80037cc:	e009      	b.n	80037e2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	332a      	adds	r3, #42	@ 0x2a
 80037de:	2202      	movs	r2, #2
 80037e0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80037e2:	787b      	ldrb	r3, [r7, #1]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	f200 8102 	bhi.w	80039ee <HAL_HCD_HC_SubmitRequest+0x292>
 80037ea:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003801 	.word	0x08003801
 80037f4:	080039d9 	.word	0x080039d9
 80037f8:	080038c5 	.word	0x080038c5
 80037fc:	0800394f 	.word	0x0800394f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003800:	7c3b      	ldrb	r3, [r7, #16]
 8003802:	2b01      	cmp	r3, #1
 8003804:	f040 80f5 	bne.w	80039f2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003808:	78bb      	ldrb	r3, [r7, #2]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d12d      	bne.n	800386a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800380e:	8b3b      	ldrh	r3, [r7, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	333d      	adds	r3, #61	@ 0x3d
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	333d      	adds	r3, #61	@ 0x3d
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	332a      	adds	r3, #42	@ 0x2a
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003852:	e0ce      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	332a      	adds	r3, #42	@ 0x2a
 8003864:	2202      	movs	r2, #2
 8003866:	701a      	strb	r2, [r3, #0]
      break;
 8003868:	e0c3      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	331a      	adds	r3, #26
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	f040 80b8 	bne.w	80039f2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	333c      	adds	r3, #60	@ 0x3c
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	332a      	adds	r3, #42	@ 0x2a
 80038a8:	2200      	movs	r2, #0
 80038aa:	701a      	strb	r2, [r3, #0]
      break;
 80038ac:	e0a1      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	332a      	adds	r3, #42	@ 0x2a
 80038be:	2202      	movs	r2, #2
 80038c0:	701a      	strb	r2, [r3, #0]
      break;
 80038c2:	e096      	b.n	80039f2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038c4:	78bb      	ldrb	r3, [r7, #2]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d120      	bne.n	800390c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	333d      	adds	r3, #61	@ 0x3d
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	332a      	adds	r3, #42	@ 0x2a
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038f4:	e07e      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	332a      	adds	r3, #42	@ 0x2a
 8003906:	2202      	movs	r2, #2
 8003908:	701a      	strb	r2, [r3, #0]
      break;
 800390a:	e073      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	333c      	adds	r3, #60	@ 0x3c
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	332a      	adds	r3, #42	@ 0x2a
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
      break;
 8003936:	e05d      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	332a      	adds	r3, #42	@ 0x2a
 8003948:	2202      	movs	r2, #2
 800394a:	701a      	strb	r2, [r3, #0]
      break;
 800394c:	e052      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800394e:	78bb      	ldrb	r3, [r7, #2]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d120      	bne.n	8003996 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	333d      	adds	r3, #61	@ 0x3d
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	332a      	adds	r3, #42	@ 0x2a
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800397e:	e039      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	332a      	adds	r3, #42	@ 0x2a
 8003990:	2202      	movs	r2, #2
 8003992:	701a      	strb	r2, [r3, #0]
      break;
 8003994:	e02e      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	333c      	adds	r3, #60	@ 0x3c
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	332a      	adds	r3, #42	@ 0x2a
 80039bc:	2200      	movs	r2, #0
 80039be:	701a      	strb	r2, [r3, #0]
      break;
 80039c0:	e018      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	332a      	adds	r3, #42	@ 0x2a
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]
      break;
 80039d6:	e00d      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	332a      	adds	r3, #42	@ 0x2a
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
      break;
 80039ec:	e002      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80039f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	332c      	adds	r3, #44	@ 0x2c
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	8b39      	ldrh	r1, [r7, #24]
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4403      	add	r3, r0
 8003a18:	3334      	adds	r3, #52	@ 0x34
 8003a1a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	334c      	adds	r3, #76	@ 0x4c
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	3338      	adds	r3, #56	@ 0x38
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	3315      	adds	r3, #21
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	334d      	adds	r3, #77	@ 0x4d
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	3310      	adds	r3, #16
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	1d19      	adds	r1, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	799b      	ldrb	r3, [r3, #6]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f005 f880 	bl	8008b8c <USB_HC_StartXfer>
 8003a8c:	4603      	mov	r3, r0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop

08003a98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 fd6e 	bl	8008590 <USB_GetMode>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	f040 80fb 	bne.w	8003cb2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f004 fd31 	bl	8008528 <USB_ReadInterrupts>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80f1 	beq.w	8003cb0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f004 fd28 	bl	8008528 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ae2:	d104      	bne.n	8003aee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003aec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f004 fd18 	bl	8008528 <USB_ReadInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b02:	d104      	bne.n	8003b0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f004 fd08 	bl	8008528 <USB_ReadInterrupts>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b22:	d104      	bne.n	8003b2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 fcf8 	bl	8008528 <USB_ReadInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d103      	bne.n	8003b4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2202      	movs	r2, #2
 8003b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f004 fcea 	bl	8008528 <USB_ReadInterrupts>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b5e:	d120      	bne.n	8003ba2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003b68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d113      	bne.n	8003ba2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b7a:	2110      	movs	r1, #16
 8003b7c:	6938      	ldr	r0, [r7, #16]
 8003b7e:	f004 fbdd 	bl	800833c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b82:	6938      	ldr	r0, [r7, #16]
 8003b84:	f004 fc0c 	bl	80083a0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7a5b      	ldrb	r3, [r3, #9]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d105      	bne.n	8003b9c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f004 fe04 	bl	80087a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f00a ff2d 	bl	800e9fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f004 fcbe 	bl	8008528 <USB_ReadInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bb6:	d102      	bne.n	8003bbe <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f001 fd4d 	bl	8005658 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f004 fcb0 	bl	8008528 <USB_ReadInterrupts>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d106      	bne.n	8003be0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f00a fef6 	bl	800e9c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2208      	movs	r2, #8
 8003bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f004 fc9f 	bl	8008528 <USB_ReadInterrupts>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bf4:	d139      	bne.n	8003c6a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f005 fa40 	bl	8009080 <USB_HC_ReadInterrupt>
 8003c00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e025      	b.n	8003c54 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d018      	beq.n	8003c4e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c32:	d106      	bne.n	8003c42 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f905 	bl	8003e4a <HCD_HC_IN_IRQHandler>
 8003c40:	e005      	b.n	8003c4e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 ff67 	bl	8004b1c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3301      	adds	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	795b      	ldrb	r3, [r3, #5]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d3d3      	bcc.n	8003c08 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f004 fc5a 	bl	8008528 <USB_ReadInterrupts>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d101      	bne.n	8003c82 <HAL_HCD_IRQHandler+0x1ea>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_HCD_IRQHandler+0x1ec>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d014      	beq.n	8003cb2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0210 	bic.w	r2, r2, #16
 8003c96:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f001 fbfe 	bl	800549a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0210 	orr.w	r2, r2, #16
 8003cac:	619a      	str	r2, [r3, #24]
 8003cae:	e000      	b.n	8003cb2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003cb0:	bf00      	nop
    }
  }
}
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_HCD_Start+0x16>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e013      	b.n	8003cf6 <HAL_HCD_Start+0x3e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f004 fdc8 	bl	8008872 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 faba 	bl	8008260 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_HCD_Stop+0x16>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e00d      	b.n	8003d30 <HAL_HCD_Stop+0x32>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f005 fb1b 	bl	800935c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f004 fd6a 	bl	800881e <USB_ResetPort>
 8003d4a:	4603      	mov	r3, r0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	334c      	adds	r3, #76	@ 0x4c
 8003d70:	781b      	ldrb	r3, [r3, #0]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3338      	adds	r3, #56	@ 0x38
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f004 fdac 	bl	8008912 <USB_GetCurrentFrame>
 8003dba:	4603      	mov	r3, r0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 fd87 	bl	80088e4 <USB_GetHostSpeed>
 8003dd6:	4603      	mov	r3, r0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3708      	adds	r7, #8
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	331a      	adds	r3, #26
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	331b      	adds	r3, #27
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3325      	adds	r3, #37	@ 0x25
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3324      	adds	r3, #36	@ 0x24
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b086      	sub	sp, #24
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	460b      	mov	r3, r1
 8003e54:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 fb70 	bl	800854e <USB_ReadChInterrupts>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d11a      	bne.n	8003eae <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2304      	movs	r3, #4
 8003e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	334d      	adds	r3, #77	@ 0x4d
 8003e9a:	2207      	movs	r2, #7
 8003e9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f005 f8fb 	bl	80090a2 <USB_HC_Halt>
 8003eac:	e09e      	b.n	8003fec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f004 fb49 	bl	800854e <USB_ReadChInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec6:	d11b      	bne.n	8003f00 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003eda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	334d      	adds	r3, #77	@ 0x4d
 8003eec:	2208      	movs	r2, #8
 8003eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f005 f8d2 	bl	80090a2 <USB_HC_Halt>
 8003efe:	e075      	b.n	8003fec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f004 fb20 	bl	800854e <USB_ReadChInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d11a      	bne.n	8003f4e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f24:	461a      	mov	r2, r3
 8003f26:	2308      	movs	r3, #8
 8003f28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	334d      	adds	r3, #77	@ 0x4d
 8003f3a:	2206      	movs	r2, #6
 8003f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f005 f8ab 	bl	80090a2 <USB_HC_Halt>
 8003f4c:	e04e      	b.n	8003fec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f004 faf9 	bl	800854e <USB_ReadChInterrupts>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f66:	d11b      	bne.n	8003fa0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f74:	461a      	mov	r2, r3
 8003f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	334d      	adds	r3, #77	@ 0x4d
 8003f8c:	2209      	movs	r2, #9
 8003f8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f005 f882 	bl	80090a2 <USB_HC_Halt>
 8003f9e:	e025      	b.n	8003fec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 fad0 	bl	800854e <USB_ReadChInterrupts>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb4:	2b80      	cmp	r3, #128	@ 0x80
 8003fb6:	d119      	bne.n	8003fec <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2380      	movs	r3, #128	@ 0x80
 8003fc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	334d      	adds	r3, #77	@ 0x4d
 8003fda:	2207      	movs	r2, #7
 8003fdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	4611      	mov	r1, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f005 f85b 	bl	80090a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f004 faaa 	bl	800854e <USB_ReadChInterrupts>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004004:	d112      	bne.n	800402c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f005 f847 	bl	80090a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004020:	461a      	mov	r2, r3
 8004022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004026:	6093      	str	r3, [r2, #8]
 8004028:	f000 bd75 	b.w	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f004 fa8a 	bl	800854e <USB_ReadChInterrupts>
 800403a:	4603      	mov	r3, r0
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	f040 8128 	bne.w	8004296 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004046:	78fb      	ldrb	r3, [r7, #3]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004052:	461a      	mov	r2, r3
 8004054:	2320      	movs	r3, #32
 8004056:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	331b      	adds	r3, #27
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d119      	bne.n	80040a2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	331b      	adds	r3, #27
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	440a      	add	r2, r1
 8004098:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800409c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040a0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	799b      	ldrb	r3, [r3, #6]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01b      	beq.n	80040e2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3330      	adds	r3, #48	@ 0x30
 80040ba:	6819      	ldr	r1, [r3, #0]
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	1ac9      	subs	r1, r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4403      	add	r3, r0
 80040de:	3338      	adds	r3, #56	@ 0x38
 80040e0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	334d      	adds	r3, #77	@ 0x4d
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	3344      	adds	r3, #68	@ 0x44
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004116:	461a      	mov	r2, r3
 8004118:	2301      	movs	r3, #1
 800411a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	3326      	adds	r3, #38	@ 0x26
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	3326      	adds	r3, #38	@ 0x26
 8004142:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004144:	2b02      	cmp	r3, #2
 8004146:	d110      	bne.n	800416a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f004 ffa6 	bl	80090a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004162:	461a      	mov	r2, r3
 8004164:	2310      	movs	r3, #16
 8004166:	6093      	str	r3, [r2, #8]
 8004168:	e03d      	b.n	80041e6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	3326      	adds	r3, #38	@ 0x26
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d00a      	beq.n	8004196 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3326      	adds	r3, #38	@ 0x26
 8004190:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004192:	2b01      	cmp	r3, #1
 8004194:	d127      	bne.n	80041e6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	4413      	add	r3, r2
 800419e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	0151      	lsls	r1, r2, #5
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	440a      	add	r2, r1
 80041ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041b4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041b6:	78fa      	ldrb	r2, [r7, #3]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	1a9b      	subs	r3, r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	334c      	adds	r3, #76	@ 0x4c
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	334c      	adds	r3, #76	@ 0x4c
 80041da:	781a      	ldrb	r2, [r3, #0]
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f00a fc19 	bl	800ea18 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	799b      	ldrb	r3, [r3, #6]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d13b      	bne.n	8004266 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	3338      	adds	r3, #56	@ 0x38
 80041fe:	6819      	ldr	r1, [r3, #0]
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4403      	add	r3, r0
 800420e:	3328      	adds	r3, #40	@ 0x28
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	440b      	add	r3, r1
 8004214:	1e59      	subs	r1, r3, #1
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4403      	add	r3, r0
 8004224:	3328      	adds	r3, #40	@ 0x28
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	fbb1 f3f3 	udiv	r3, r1, r3
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8470 	beq.w	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	333c      	adds	r3, #60	@ 0x3c
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	f083 0301 	eor.w	r3, r3, #1
 800424e:	b2d8      	uxtb	r0, r3
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	333c      	adds	r3, #60	@ 0x3c
 800425e:	4602      	mov	r2, r0
 8004260:	701a      	strb	r2, [r3, #0]
 8004262:	f000 bc58 	b.w	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004266:	78fa      	ldrb	r2, [r7, #3]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	333c      	adds	r3, #60	@ 0x3c
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	f083 0301 	eor.w	r3, r3, #1
 800427e:	b2d8      	uxtb	r0, r3
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	333c      	adds	r3, #60	@ 0x3c
 800428e:	4602      	mov	r2, r0
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	f000 bc40 	b.w	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f004 f955 	bl	800854e <USB_ReadChInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d131      	bne.n	8004312 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ba:	461a      	mov	r2, r3
 80042bc:	2320      	movs	r3, #32
 80042be:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	331a      	adds	r3, #26
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	f040 841f 	bne.w	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	331b      	adds	r3, #27
 80042e8:	2201      	movs	r2, #1
 80042ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	334d      	adds	r3, #77	@ 0x4d
 80042fc:	2203      	movs	r2, #3
 80042fe:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f004 feca 	bl	80090a2 <USB_HC_Halt>
 800430e:	f000 bc02 	b.w	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f004 f917 	bl	800854e <USB_ReadChInterrupts>
 8004320:	4603      	mov	r3, r0
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b02      	cmp	r3, #2
 8004328:	f040 8305 	bne.w	8004936 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004338:	461a      	mov	r2, r3
 800433a:	2302      	movs	r3, #2
 800433c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	334d      	adds	r3, #77	@ 0x4d
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d114      	bne.n	800437e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	334d      	adds	r3, #77	@ 0x4d
 8004364:	2202      	movs	r2, #2
 8004366:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	334c      	adds	r3, #76	@ 0x4c
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
 800437c:	e2cc      	b.n	8004918 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	334d      	adds	r3, #77	@ 0x4d
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b06      	cmp	r3, #6
 8004392:	d114      	bne.n	80043be <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	334d      	adds	r3, #77	@ 0x4d
 80043a4:	2202      	movs	r2, #2
 80043a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	334c      	adds	r3, #76	@ 0x4c
 80043b8:	2205      	movs	r2, #5
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e2ac      	b.n	8004918 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	334d      	adds	r3, #77	@ 0x4d
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b07      	cmp	r3, #7
 80043d2:	d00b      	beq.n	80043ec <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	334d      	adds	r3, #77	@ 0x4d
 80043e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043e6:	2b09      	cmp	r3, #9
 80043e8:	f040 80a6 	bne.w	8004538 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	334d      	adds	r3, #77	@ 0x4d
 80043fc:	2202      	movs	r2, #2
 80043fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3344      	adds	r3, #68	@ 0x44
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	1c59      	adds	r1, r3, #1
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4403      	add	r3, r0
 8004420:	3344      	adds	r3, #68	@ 0x44
 8004422:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3344      	adds	r3, #68	@ 0x44
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d943      	bls.n	80044c2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	3344      	adds	r3, #68	@ 0x44
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800444e:	78fa      	ldrb	r2, [r7, #3]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	331a      	adds	r3, #26
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d123      	bne.n	80044ac <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	331b      	adds	r3, #27
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	331c      	adds	r3, #28
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4413      	add	r3, r2
 8004494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044aa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	1a9b      	subs	r3, r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	334c      	adds	r3, #76	@ 0x4c
 80044bc:	2204      	movs	r2, #4
 80044be:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044c0:	e229      	b.n	8004916 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	334c      	adds	r3, #76	@ 0x4c
 80044d2:	2202      	movs	r2, #2
 80044d4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3326      	adds	r3, #38	@ 0x26
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00b      	beq.n	8004504 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3326      	adds	r3, #38	@ 0x26
 80044fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044fe:	2b02      	cmp	r3, #2
 8004500:	f040 8209 	bne.w	8004916 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800451a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004522:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4413      	add	r3, r2
 800452c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004530:	461a      	mov	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004536:	e1ee      	b.n	8004916 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	334d      	adds	r3, #77	@ 0x4d
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b05      	cmp	r3, #5
 800454c:	f040 80c8 	bne.w	80046e0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4613      	mov	r3, r2
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	334d      	adds	r3, #77	@ 0x4d
 8004560:	2202      	movs	r2, #2
 8004562:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004564:	78fa      	ldrb	r2, [r7, #3]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	331b      	adds	r3, #27
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b01      	cmp	r3, #1
 8004578:	f040 81ce 	bne.w	8004918 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	3326      	adds	r3, #38	@ 0x26
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d16b      	bne.n	800466a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	3348      	adds	r3, #72	@ 0x48
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	1c59      	adds	r1, r3, #1
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4403      	add	r3, r0
 80045b2:	3348      	adds	r3, #72	@ 0x48
 80045b4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	3348      	adds	r3, #72	@ 0x48
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d943      	bls.n	8004654 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	3348      	adds	r3, #72	@ 0x48
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	1a9b      	subs	r3, r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	331b      	adds	r3, #27
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	3344      	adds	r3, #68	@ 0x44
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d809      	bhi.n	800461e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	331c      	adds	r3, #28
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800461e:	78fb      	ldrb	r3, [r7, #3]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4413      	add	r3, r2
 8004626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	0151      	lsls	r1, r2, #5
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	440a      	add	r2, r1
 8004634:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	334c      	adds	r3, #76	@ 0x4c
 800464e:	2204      	movs	r2, #4
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	e014      	b.n	800467e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	334c      	adds	r3, #76	@ 0x4c
 8004664:	2202      	movs	r2, #2
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e009      	b.n	800467e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	334c      	adds	r3, #76	@ 0x4c
 800467a:	2202      	movs	r2, #2
 800467c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	3326      	adds	r3, #38	@ 0x26
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00b      	beq.n	80046ac <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	3326      	adds	r3, #38	@ 0x26
 80046a4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	f040 8136 	bne.w	8004918 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046c2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046ca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d8:	461a      	mov	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e11b      	b.n	8004918 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	334d      	adds	r3, #77	@ 0x4d
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	f040 8081 	bne.w	80047fa <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	334d      	adds	r3, #77	@ 0x4d
 8004708:	2202      	movs	r2, #2
 800470a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	331b      	adds	r3, #27
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b01      	cmp	r3, #1
 8004720:	f040 80fa 	bne.w	8004918 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	334c      	adds	r3, #76	@ 0x4c
 8004734:	2202      	movs	r2, #2
 8004736:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4413      	add	r3, r2
 8004740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	440a      	add	r2, r1
 800474e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004756:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	440a      	add	r2, r1
 800476e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004776:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	78fa      	ldrb	r2, [r7, #3]
 8004788:	0151      	lsls	r1, r2, #5
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	440a      	add	r2, r1
 800478e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004792:	f023 0320 	bic.w	r3, r3, #32
 8004796:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004798:	78fa      	ldrb	r2, [r7, #3]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	3326      	adds	r3, #38	@ 0x26
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3326      	adds	r3, #38	@ 0x26
 80047be:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	f040 80a9 	bne.w	8004918 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80047c6:	78fb      	ldrb	r3, [r7, #3]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047e6:	78fb      	ldrb	r3, [r7, #3]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e08e      	b.n	8004918 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	334d      	adds	r3, #77	@ 0x4d
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d143      	bne.n	8004898 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	334d      	adds	r3, #77	@ 0x4d
 8004820:	2202      	movs	r2, #2
 8004822:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	334c      	adds	r3, #76	@ 0x4c
 8004834:	2202      	movs	r2, #2
 8004836:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	3326      	adds	r3, #38	@ 0x26
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3326      	adds	r3, #38	@ 0x26
 800485e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004860:	2b02      	cmp	r3, #2
 8004862:	d159      	bne.n	8004918 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4413      	add	r3, r2
 800486c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800487a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004882:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004890:	461a      	mov	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e03f      	b.n	8004918 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	334d      	adds	r3, #77	@ 0x4d
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d126      	bne.n	80048fc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048ae:	78fa      	ldrb	r2, [r7, #3]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	334d      	adds	r3, #77	@ 0x4d
 80048be:	2202      	movs	r2, #2
 80048c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	3344      	adds	r3, #68	@ 0x44
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	1c59      	adds	r1, r3, #1
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4403      	add	r3, r0
 80048e2:	3344      	adds	r3, #68	@ 0x44
 80048e4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	334c      	adds	r3, #76	@ 0x4c
 80048f6:	2204      	movs	r2, #4
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e00d      	b.n	8004918 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	334d      	adds	r3, #77	@ 0x4d
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b02      	cmp	r3, #2
 8004910:	f000 8100 	beq.w	8004b14 <HCD_HC_IN_IRQHandler+0xcca>
 8004914:	e000      	b.n	8004918 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004916:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	334c      	adds	r3, #76	@ 0x4c
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f00a f872 	bl	800ea18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004934:	e0ef      	b.n	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	4611      	mov	r1, r2
 800493e:	4618      	mov	r0, r3
 8004940:	f003 fe05 	bl	800854e <USB_ReadChInterrupts>
 8004944:	4603      	mov	r3, r0
 8004946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494a:	2b40      	cmp	r3, #64	@ 0x40
 800494c:	d12f      	bne.n	80049ae <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4413      	add	r3, r2
 8004956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800495a:	461a      	mov	r2, r3
 800495c:	2340      	movs	r3, #64	@ 0x40
 800495e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	334d      	adds	r3, #77	@ 0x4d
 8004970:	2205      	movs	r2, #5
 8004972:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	331a      	adds	r3, #26
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800498a:	78fa      	ldrb	r2, [r7, #3]
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	3344      	adds	r3, #68	@ 0x44
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f004 fb7b 	bl	80090a2 <USB_HC_Halt>
 80049ac:	e0b3      	b.n	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	78fa      	ldrb	r2, [r7, #3]
 80049b4:	4611      	mov	r1, r2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f003 fdc9 	bl	800854e <USB_ReadChInterrupts>
 80049bc:	4603      	mov	r3, r0
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b10      	cmp	r3, #16
 80049c4:	f040 80a7 	bne.w	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	3326      	adds	r3, #38	@ 0x26
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d11b      	bne.n	8004a16 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	3344      	adds	r3, #68	@ 0x44
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	334d      	adds	r3, #77	@ 0x4d
 8004a02:	2204      	movs	r2, #4
 8004a04:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f004 fb47 	bl	80090a2 <USB_HC_Halt>
 8004a14:	e03f      	b.n	8004a96 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	3326      	adds	r3, #38	@ 0x26
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	3326      	adds	r3, #38	@ 0x26
 8004a3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d129      	bne.n	8004a96 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	3344      	adds	r3, #68	@ 0x44
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	799b      	ldrb	r3, [r3, #6]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HCD_HC_IN_IRQHandler+0xc2a>
 8004a5e:	78fa      	ldrb	r2, [r7, #3]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	331b      	adds	r3, #27
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d110      	bne.n	8004a96 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004a74:	78fa      	ldrb	r2, [r7, #3]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	334d      	adds	r3, #77	@ 0x4d
 8004a84:	2204      	movs	r2, #4
 8004a86:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f004 fb06 	bl	80090a2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	331b      	adds	r3, #27
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d129      	bne.n	8004b00 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004aac:	78fa      	ldrb	r2, [r7, #3]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	331b      	adds	r3, #27
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	0151      	lsls	r1, r2, #5
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ade:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	0151      	lsls	r1, r2, #5
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	440a      	add	r2, r1
 8004af6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004afa:	f043 0320 	orr.w	r3, r3, #32
 8004afe:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	2310      	movs	r3, #16
 8004b10:	6093      	str	r3, [r2, #8]
 8004b12:	e000      	b.n	8004b16 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004b14:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	4611      	mov	r1, r2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f003 fd07 	bl	800854e <USB_ReadChInterrupts>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d11b      	bne.n	8004b82 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004b4a:	78fb      	ldrb	r3, [r7, #3]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b56:	461a      	mov	r2, r3
 8004b58:	2304      	movs	r3, #4
 8004b5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	334d      	adds	r3, #77	@ 0x4d
 8004b6c:	2207      	movs	r2, #7
 8004b6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	78fa      	ldrb	r2, [r7, #3]
 8004b76:	4611      	mov	r1, r2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f004 fa92 	bl	80090a2 <USB_HC_Halt>
 8004b7e:	f000 bc89 	b.w	8005494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f003 fcdf 	bl	800854e <USB_ReadChInterrupts>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	f040 8082 	bne.w	8004ca0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2320      	movs	r3, #32
 8004bac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	3319      	adds	r3, #25
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d124      	bne.n	8004c0e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	3319      	adds	r3, #25
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	334c      	adds	r3, #76	@ 0x4c
 8004be8:	2202      	movs	r2, #2
 8004bea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004bec:	78fa      	ldrb	r2, [r7, #3]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	334d      	adds	r3, #77	@ 0x4d
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f004 fa4a 	bl	80090a2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004c0e:	78fa      	ldrb	r2, [r7, #3]
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	4613      	mov	r3, r2
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	1a9b      	subs	r3, r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	331a      	adds	r3, #26
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 8437 	bne.w	8005494 <HCD_HC_OUT_IRQHandler+0x978>
 8004c26:	78fa      	ldrb	r2, [r7, #3]
 8004c28:	6879      	ldr	r1, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	440b      	add	r3, r1
 8004c34:	331b      	adds	r3, #27
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 842b 	bne.w	8005494 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004c3e:	78fa      	ldrb	r2, [r7, #3]
 8004c40:	6879      	ldr	r1, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	1a9b      	subs	r3, r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	3326      	adds	r3, #38	@ 0x26
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d009      	beq.n	8004c68 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	011b      	lsls	r3, r3, #4
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	331b      	adds	r3, #27
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	334d      	adds	r3, #77	@ 0x4d
 8004c78:	2203      	movs	r2, #3
 8004c7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	4611      	mov	r1, r2
 8004c84:	4618      	mov	r0, r3
 8004c86:	f004 fa0c 	bl	80090a2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3344      	adds	r3, #68	@ 0x44
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	e3f9      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	78fa      	ldrb	r2, [r7, #3]
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f003 fc50 	bl	800854e <USB_ReadChInterrupts>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb8:	d111      	bne.n	8004cde <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ccc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f004 f9e3 	bl	80090a2 <USB_HC_Halt>
 8004cdc:	e3da      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f003 fc31 	bl	800854e <USB_ReadChInterrupts>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d168      	bne.n	8004dc8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3344      	adds	r3, #68	@ 0x44
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f003 fc1b 	bl	800854e <USB_ReadChInterrupts>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1e:	2b40      	cmp	r3, #64	@ 0x40
 8004d20:	d112      	bne.n	8004d48 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	3319      	adds	r3, #25
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d42:	461a      	mov	r2, r3
 8004d44:	2340      	movs	r3, #64	@ 0x40
 8004d46:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	331b      	adds	r3, #27
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d019      	beq.n	8004d92 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d5e:	78fa      	ldrb	r2, [r7, #3]
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	331b      	adds	r3, #27
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d90:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2301      	movs	r3, #1
 8004da2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004da4:	78fa      	ldrb	r2, [r7, #3]
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4613      	mov	r3, r2
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	334d      	adds	r3, #77	@ 0x4d
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f004 f96e 	bl	80090a2 <USB_HC_Halt>
 8004dc6:	e365      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	78fa      	ldrb	r2, [r7, #3]
 8004dce:	4611      	mov	r1, r2
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f003 fbbc 	bl	800854e <USB_ReadChInterrupts>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ddc:	2b40      	cmp	r3, #64	@ 0x40
 8004dde:	d139      	bne.n	8004e54 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	334d      	adds	r3, #77	@ 0x4d
 8004df0:	2205      	movs	r2, #5
 8004df2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	331a      	adds	r3, #26
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	3319      	adds	r3, #25
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	3344      	adds	r3, #68	@ 0x44
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	78fa      	ldrb	r2, [r7, #3]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f004 f931 	bl	80090a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2340      	movs	r3, #64	@ 0x40
 8004e50:	6093      	str	r3, [r2, #8]
 8004e52:	e31f      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f003 fb76 	bl	800854e <USB_ReadChInterrupts>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d11a      	bne.n	8004ea2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004e6c:	78fb      	ldrb	r3, [r7, #3]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e78:	461a      	mov	r2, r3
 8004e7a:	2308      	movs	r3, #8
 8004e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	334d      	adds	r3, #77	@ 0x4d
 8004e8e:	2206      	movs	r2, #6
 8004e90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f004 f901 	bl	80090a2 <USB_HC_Halt>
 8004ea0:	e2f8      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f003 fb4f 	bl	800854e <USB_ReadChInterrupts>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b10      	cmp	r3, #16
 8004eb8:	d144      	bne.n	8004f44 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3344      	adds	r3, #68	@ 0x44
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004ece:	78fa      	ldrb	r2, [r7, #3]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	334d      	adds	r3, #77	@ 0x4d
 8004ede:	2204      	movs	r2, #4
 8004ee0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	3319      	adds	r3, #25
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d114      	bne.n	8004f22 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	3318      	adds	r3, #24
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d109      	bne.n	8004f22 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3319      	adds	r3, #25
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f004 f8b9 	bl	80090a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2310      	movs	r3, #16
 8004f40:	6093      	str	r3, [r2, #8]
 8004f42:	e2a7      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f003 fafe 	bl	800854e <USB_ReadChInterrupts>
 8004f52:	4603      	mov	r3, r0
 8004f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f58:	2b80      	cmp	r3, #128	@ 0x80
 8004f5a:	f040 8083 	bne.w	8005064 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	799b      	ldrb	r3, [r3, #6]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d111      	bne.n	8004f8a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	334d      	adds	r3, #77	@ 0x4d
 8004f76:	2207      	movs	r2, #7
 8004f78:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	4611      	mov	r1, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f004 f88d 	bl	80090a2 <USB_HC_Halt>
 8004f88:	e062      	b.n	8005050 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	3344      	adds	r3, #68	@ 0x44
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	1c59      	adds	r1, r3, #1
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4403      	add	r3, r0
 8004faa:	3344      	adds	r3, #68	@ 0x44
 8004fac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	3344      	adds	r3, #68	@ 0x44
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d922      	bls.n	800500a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3344      	adds	r3, #68	@ 0x44
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	1a9b      	subs	r3, r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	334c      	adds	r3, #76	@ 0x4c
 8004fe8:	2204      	movs	r2, #4
 8004fea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	334c      	adds	r3, #76	@ 0x4c
 8004ffc:	781a      	ldrb	r2, [r3, #0]
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	4619      	mov	r1, r3
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f009 fd08 	bl	800ea18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005008:	e022      	b.n	8005050 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	334c      	adds	r3, #76	@ 0x4c
 800501a:	2202      	movs	r2, #2
 800501c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005034:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800503c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4413      	add	r3, r2
 8005046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800504a:	461a      	mov	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4413      	add	r3, r2
 8005058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800505c:	461a      	mov	r2, r3
 800505e:	2380      	movs	r3, #128	@ 0x80
 8005060:	6093      	str	r3, [r2, #8]
 8005062:	e217      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f003 fa6e 	bl	800854e <USB_ReadChInterrupts>
 8005072:	4603      	mov	r3, r0
 8005074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800507c:	d11b      	bne.n	80050b6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800507e:	78fa      	ldrb	r2, [r7, #3]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	334d      	adds	r3, #77	@ 0x4d
 800508e:	2209      	movs	r2, #9
 8005090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	78fa      	ldrb	r2, [r7, #3]
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f004 f801 	bl	80090a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80050a0:	78fb      	ldrb	r3, [r7, #3]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ac:	461a      	mov	r2, r3
 80050ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050b2:	6093      	str	r3, [r2, #8]
 80050b4:	e1ee      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	78fa      	ldrb	r2, [r7, #3]
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f003 fa45 	bl	800854e <USB_ReadChInterrupts>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	f040 81df 	bne.w	800548e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050dc:	461a      	mov	r2, r3
 80050de:	2302      	movs	r3, #2
 80050e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	334d      	adds	r3, #77	@ 0x4d
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	f040 8093 	bne.w	8005220 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	334d      	adds	r3, #77	@ 0x4d
 800510a:	2202      	movs	r2, #2
 800510c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	334c      	adds	r3, #76	@ 0x4c
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	3326      	adds	r3, #38	@ 0x26
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d00b      	beq.n	8005150 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005138:	78fa      	ldrb	r2, [r7, #3]
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	1a9b      	subs	r3, r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	3326      	adds	r3, #38	@ 0x26
 8005148:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800514a:	2b03      	cmp	r3, #3
 800514c:	f040 8190 	bne.w	8005470 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	799b      	ldrb	r3, [r3, #6]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d115      	bne.n	8005184 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005158:	78fa      	ldrb	r2, [r7, #3]
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	1a9b      	subs	r3, r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	440b      	add	r3, r1
 8005166:	333d      	adds	r3, #61	@ 0x3d
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	f083 0301 	eor.w	r3, r3, #1
 8005170:	b2d8      	uxtb	r0, r3
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	333d      	adds	r3, #61	@ 0x3d
 8005180:	4602      	mov	r2, r0
 8005182:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	799b      	ldrb	r3, [r3, #6]
 8005188:	2b01      	cmp	r3, #1
 800518a:	f040 8171 	bne.w	8005470 <HCD_HC_OUT_IRQHandler+0x954>
 800518e:	78fa      	ldrb	r2, [r7, #3]
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	3334      	adds	r3, #52	@ 0x34
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8165 	beq.w	8005470 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3334      	adds	r3, #52	@ 0x34
 80051b6:	6819      	ldr	r1, [r3, #0]
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4403      	add	r3, r0
 80051c6:	3328      	adds	r3, #40	@ 0x28
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	440b      	add	r3, r1
 80051cc:	1e59      	subs	r1, r3, #1
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4403      	add	r3, r0
 80051dc:	3328      	adds	r3, #40	@ 0x28
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 813f 	beq.w	8005470 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	333d      	adds	r3, #61	@ 0x3d
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	f083 0301 	eor.w	r3, r3, #1
 800520a:	b2d8      	uxtb	r0, r3
 800520c:	6879      	ldr	r1, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	333d      	adds	r3, #61	@ 0x3d
 800521a:	4602      	mov	r2, r0
 800521c:	701a      	strb	r2, [r3, #0]
 800521e:	e127      	b.n	8005470 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	334d      	adds	r3, #77	@ 0x4d
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d120      	bne.n	8005278 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	334d      	adds	r3, #77	@ 0x4d
 8005246:	2202      	movs	r2, #2
 8005248:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	1a9b      	subs	r3, r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	331b      	adds	r3, #27
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 8107 	bne.w	8005470 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005262:	78fa      	ldrb	r2, [r7, #3]
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	334c      	adds	r3, #76	@ 0x4c
 8005272:	2202      	movs	r2, #2
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e0fb      	b.n	8005470 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	334d      	adds	r3, #77	@ 0x4d
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b04      	cmp	r3, #4
 800528c:	d13a      	bne.n	8005304 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	334d      	adds	r3, #77	@ 0x4d
 800529e:	2202      	movs	r2, #2
 80052a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052a2:	78fa      	ldrb	r2, [r7, #3]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	334c      	adds	r3, #76	@ 0x4c
 80052b2:	2202      	movs	r2, #2
 80052b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	331b      	adds	r3, #27
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	f040 80d1 	bne.w	8005470 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	331b      	adds	r3, #27
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005300:	6053      	str	r3, [r2, #4]
 8005302:	e0b5      	b.n	8005470 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	334d      	adds	r3, #77	@ 0x4d
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b05      	cmp	r3, #5
 8005318:	d114      	bne.n	8005344 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800531a:	78fa      	ldrb	r2, [r7, #3]
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	1a9b      	subs	r3, r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	334d      	adds	r3, #77	@ 0x4d
 800532a:	2202      	movs	r2, #2
 800532c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800532e:	78fa      	ldrb	r2, [r7, #3]
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	4613      	mov	r3, r2
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	440b      	add	r3, r1
 800533c:	334c      	adds	r3, #76	@ 0x4c
 800533e:	2202      	movs	r2, #2
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	e095      	b.n	8005470 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	334d      	adds	r3, #77	@ 0x4d
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b06      	cmp	r3, #6
 8005358:	d114      	bne.n	8005384 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800535a:	78fa      	ldrb	r2, [r7, #3]
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	440b      	add	r3, r1
 8005368:	334d      	adds	r3, #77	@ 0x4d
 800536a:	2202      	movs	r2, #2
 800536c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	334c      	adds	r3, #76	@ 0x4c
 800537e:	2205      	movs	r2, #5
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e075      	b.n	8005470 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	334d      	adds	r3, #77	@ 0x4d
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b07      	cmp	r3, #7
 8005398:	d00a      	beq.n	80053b0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	334d      	adds	r3, #77	@ 0x4d
 80053aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80053ac:	2b09      	cmp	r3, #9
 80053ae:	d170      	bne.n	8005492 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053b0:	78fa      	ldrb	r2, [r7, #3]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	334d      	adds	r3, #77	@ 0x4d
 80053c0:	2202      	movs	r2, #2
 80053c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	3344      	adds	r3, #68	@ 0x44
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4403      	add	r3, r0
 80053e4:	3344      	adds	r3, #68	@ 0x44
 80053e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3344      	adds	r3, #68	@ 0x44
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d914      	bls.n	8005428 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	3344      	adds	r3, #68	@ 0x44
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	334c      	adds	r3, #76	@ 0x4c
 8005422:	2204      	movs	r2, #4
 8005424:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005426:	e022      	b.n	800546e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	334c      	adds	r3, #76	@ 0x4c
 8005438:	2202      	movs	r2, #2
 800543a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005452:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800545a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005468:	461a      	mov	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800546e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	334c      	adds	r3, #76	@ 0x4c
 8005480:	781a      	ldrb	r2, [r3, #0]
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f009 fac6 	bl	800ea18 <HAL_HCD_HC_NotifyURBChange_Callback>
 800548c:	e002      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800548e:	bf00      	nop
 8005490:	e000      	b.n	8005494 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005492:	bf00      	nop
  }
}
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b08a      	sub	sp, #40	@ 0x28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	0c5b      	lsrs	r3, r3, #17
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d004      	beq.n	80054e0 <HCD_RXQLVL_IRQHandler+0x46>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b05      	cmp	r3, #5
 80054da:	f000 80b6 	beq.w	800564a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80054de:	e0b7      	b.n	8005650 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80b3 	beq.w	800564e <HCD_RXQLVL_IRQHandler+0x1b4>
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4613      	mov	r3, r2
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	332c      	adds	r3, #44	@ 0x2c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80a7 	beq.w	800564e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4613      	mov	r3, r2
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	3338      	adds	r3, #56	@ 0x38
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	18d1      	adds	r1, r2, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4613      	mov	r3, r2
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4403      	add	r3, r0
 8005524:	3334      	adds	r3, #52	@ 0x34
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4299      	cmp	r1, r3
 800552a:	f200 8083 	bhi.w	8005634 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4613      	mov	r3, r2
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	332c      	adds	r3, #44	@ 0x2c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	b292      	uxth	r2, r2
 8005548:	4619      	mov	r1, r3
 800554a:	f002 ff95 	bl	8008478 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4613      	mov	r3, r2
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	332c      	adds	r3, #44	@ 0x2c
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	18d1      	adds	r1, r2, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	4613      	mov	r3, r2
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4403      	add	r3, r0
 8005572:	332c      	adds	r3, #44	@ 0x2c
 8005574:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4613      	mov	r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	3338      	adds	r3, #56	@ 0x38
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	18d1      	adds	r1, r2, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	4613      	mov	r3, r2
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4403      	add	r3, r0
 800559a:	3338      	adds	r3, #56	@ 0x38
 800559c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	0cdb      	lsrs	r3, r3, #19
 80055ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4613      	mov	r3, r2
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	3328      	adds	r3, #40	@ 0x28
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d13f      	bne.n	800564e <HCD_RXQLVL_IRQHandler+0x1b4>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d03c      	beq.n	800564e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055ea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055f2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005600:	461a      	mov	r2, r3
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4613      	mov	r3, r2
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	440b      	add	r3, r1
 8005614:	333c      	adds	r3, #60	@ 0x3c
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f083 0301 	eor.w	r3, r3, #1
 800561c:	b2d8      	uxtb	r0, r3
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	333c      	adds	r3, #60	@ 0x3c
 800562e:	4602      	mov	r2, r0
 8005630:	701a      	strb	r2, [r3, #0]
      break;
 8005632:	e00c      	b.n	800564e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	4613      	mov	r3, r2
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	1a9b      	subs	r3, r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	334c      	adds	r3, #76	@ 0x4c
 8005644:	2204      	movs	r2, #4
 8005646:	701a      	strb	r2, [r3, #0]
      break;
 8005648:	e001      	b.n	800564e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800564e:	bf00      	nop
  }
}
 8005650:	bf00      	nop
 8005652:	3728      	adds	r7, #40	@ 0x28
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005684:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d10b      	bne.n	80056a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b01      	cmp	r3, #1
 8005698:	d102      	bne.n	80056a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f009 f9a0 	bl	800e9e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f043 0302 	orr.w	r3, r3, #2
 80056a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d132      	bne.n	8005718 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f043 0308 	orr.w	r3, r3, #8
 80056b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d126      	bne.n	8005712 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	7a5b      	ldrb	r3, [r3, #9]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d113      	bne.n	80056f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80056d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056d6:	d106      	bne.n	80056e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2102      	movs	r1, #2
 80056de:	4618      	mov	r0, r3
 80056e0:	f003 f860 	bl	80087a4 <USB_InitFSLSPClkSel>
 80056e4:	e011      	b.n	800570a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2101      	movs	r1, #1
 80056ec:	4618      	mov	r0, r3
 80056ee:	f003 f859 	bl	80087a4 <USB_InitFSLSPClkSel>
 80056f2:	e00a      	b.n	800570a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	79db      	ldrb	r3, [r3, #7]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d106      	bne.n	800570a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005702:	461a      	mov	r2, r3
 8005704:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005708:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f009 f996 	bl	800ea3c <HAL_HCD_PortEnabled_Callback>
 8005710:	e002      	b.n	8005718 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f009 f9a0 	bl	800ea58 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f003 0320 	and.w	r3, r3, #32
 800571e:	2b20      	cmp	r3, #32
 8005720:	d103      	bne.n	800572a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f043 0320 	orr.w	r3, r3, #32
 8005728:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005730:	461a      	mov	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	6013      	str	r3, [r2, #0]
}
 8005736:	bf00      	nop
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
	...

08005740 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e267      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d075      	beq.n	800584a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800575e:	4b88      	ldr	r3, [pc, #544]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b04      	cmp	r3, #4
 8005768:	d00c      	beq.n	8005784 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800576a:	4b85      	ldr	r3, [pc, #532]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005772:	2b08      	cmp	r3, #8
 8005774:	d112      	bne.n	800579c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005776:	4b82      	ldr	r3, [pc, #520]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800577e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005782:	d10b      	bne.n	800579c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005784:	4b7e      	ldr	r3, [pc, #504]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d05b      	beq.n	8005848 <HAL_RCC_OscConfig+0x108>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d157      	bne.n	8005848 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e242      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a4:	d106      	bne.n	80057b4 <HAL_RCC_OscConfig+0x74>
 80057a6:	4b76      	ldr	r3, [pc, #472]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a75      	ldr	r2, [pc, #468]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e01d      	b.n	80057f0 <HAL_RCC_OscConfig+0xb0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057bc:	d10c      	bne.n	80057d8 <HAL_RCC_OscConfig+0x98>
 80057be:	4b70      	ldr	r3, [pc, #448]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a6f      	ldr	r2, [pc, #444]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a6c      	ldr	r2, [pc, #432]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e00b      	b.n	80057f0 <HAL_RCC_OscConfig+0xb0>
 80057d8:	4b69      	ldr	r3, [pc, #420]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a68      	ldr	r2, [pc, #416]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	4b66      	ldr	r3, [pc, #408]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a65      	ldr	r2, [pc, #404]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80057ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d013      	beq.n	8005820 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fc ff7e 	bl	80026f8 <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005800:	f7fc ff7a 	bl	80026f8 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b64      	cmp	r3, #100	@ 0x64
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e207      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005812:	4b5b      	ldr	r3, [pc, #364]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0xc0>
 800581e:	e014      	b.n	800584a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005820:	f7fc ff6a 	bl	80026f8 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005828:	f7fc ff66 	bl	80026f8 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b64      	cmp	r3, #100	@ 0x64
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e1f3      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800583a:	4b51      	ldr	r3, [pc, #324]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f0      	bne.n	8005828 <HAL_RCC_OscConfig+0xe8>
 8005846:	e000      	b.n	800584a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d063      	beq.n	800591e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005856:	4b4a      	ldr	r3, [pc, #296]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005862:	4b47      	ldr	r3, [pc, #284]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800586a:	2b08      	cmp	r3, #8
 800586c:	d11c      	bne.n	80058a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800586e:	4b44      	ldr	r3, [pc, #272]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d116      	bne.n	80058a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587a:	4b41      	ldr	r3, [pc, #260]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_RCC_OscConfig+0x152>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d001      	beq.n	8005892 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e1c7      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005892:	4b3b      	ldr	r3, [pc, #236]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4937      	ldr	r1, [pc, #220]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058a6:	e03a      	b.n	800591e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d020      	beq.n	80058f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058b0:	4b34      	ldr	r3, [pc, #208]	@ (8005984 <HAL_RCC_OscConfig+0x244>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fc ff1f 	bl	80026f8 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058be:	f7fc ff1b 	bl	80026f8 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e1a8      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058dc:	4b28      	ldr	r3, [pc, #160]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4925      	ldr	r1, [pc, #148]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]
 80058f0:	e015      	b.n	800591e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058f2:	4b24      	ldr	r3, [pc, #144]	@ (8005984 <HAL_RCC_OscConfig+0x244>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fc fefe 	bl	80026f8 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005900:	f7fc fefa 	bl	80026f8 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b02      	cmp	r3, #2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e187      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005912:	4b1b      	ldr	r3, [pc, #108]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d036      	beq.n	8005998 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d016      	beq.n	8005960 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005932:	4b15      	ldr	r3, [pc, #84]	@ (8005988 <HAL_RCC_OscConfig+0x248>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005938:	f7fc fede 	bl	80026f8 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005940:	f7fc feda 	bl	80026f8 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e167      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005952:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <HAL_RCC_OscConfig+0x240>)
 8005954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x200>
 800595e:	e01b      	b.n	8005998 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005960:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <HAL_RCC_OscConfig+0x248>)
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005966:	f7fc fec7 	bl	80026f8 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800596c:	e00e      	b.n	800598c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800596e:	f7fc fec3 	bl	80026f8 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d907      	bls.n	800598c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e150      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
 8005980:	40023800 	.word	0x40023800
 8005984:	42470000 	.word	0x42470000
 8005988:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800598c:	4b88      	ldr	r3, [pc, #544]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 800598e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ea      	bne.n	800596e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 8097 	beq.w	8005ad4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059a6:	2300      	movs	r3, #0
 80059a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059aa:	4b81      	ldr	r3, [pc, #516]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	4b7d      	ldr	r3, [pc, #500]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	4a7c      	ldr	r2, [pc, #496]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 80059c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80059c6:	4b7a      	ldr	r3, [pc, #488]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d6:	4b77      	ldr	r3, [pc, #476]	@ (8005bb4 <HAL_RCC_OscConfig+0x474>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d118      	bne.n	8005a14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059e2:	4b74      	ldr	r3, [pc, #464]	@ (8005bb4 <HAL_RCC_OscConfig+0x474>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a73      	ldr	r2, [pc, #460]	@ (8005bb4 <HAL_RCC_OscConfig+0x474>)
 80059e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ee:	f7fc fe83 	bl	80026f8 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059f6:	f7fc fe7f 	bl	80026f8 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e10c      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a08:	4b6a      	ldr	r3, [pc, #424]	@ (8005bb4 <HAL_RCC_OscConfig+0x474>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f0      	beq.n	80059f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d106      	bne.n	8005a2a <HAL_RCC_OscConfig+0x2ea>
 8005a1c:	4b64      	ldr	r3, [pc, #400]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a20:	4a63      	ldr	r2, [pc, #396]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a28:	e01c      	b.n	8005a64 <HAL_RCC_OscConfig+0x324>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCC_OscConfig+0x30c>
 8005a32:	4b5f      	ldr	r3, [pc, #380]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a36:	4a5e      	ldr	r2, [pc, #376]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a38:	f043 0304 	orr.w	r3, r3, #4
 8005a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a3e:	4b5c      	ldr	r3, [pc, #368]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a42:	4a5b      	ldr	r2, [pc, #364]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a4a:	e00b      	b.n	8005a64 <HAL_RCC_OscConfig+0x324>
 8005a4c:	4b58      	ldr	r3, [pc, #352]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a50:	4a57      	ldr	r2, [pc, #348]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a58:	4b55      	ldr	r3, [pc, #340]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5c:	4a54      	ldr	r2, [pc, #336]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	f023 0304 	bic.w	r3, r3, #4
 8005a62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d015      	beq.n	8005a98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6c:	f7fc fe44 	bl	80026f8 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a74:	f7fc fe40 	bl	80026f8 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e0cb      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8a:	4b49      	ldr	r3, [pc, #292]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0ee      	beq.n	8005a74 <HAL_RCC_OscConfig+0x334>
 8005a96:	e014      	b.n	8005ac2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a98:	f7fc fe2e 	bl	80026f8 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa0:	f7fc fe2a 	bl	80026f8 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e0b5      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1ee      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ac2:	7dfb      	ldrb	r3, [r7, #23]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d105      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac8:	4b39      	ldr	r3, [pc, #228]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	4a38      	ldr	r2, [pc, #224]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005ace:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ad2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80a1 	beq.w	8005c20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ade:	4b34      	ldr	r3, [pc, #208]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d05c      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d141      	bne.n	8005b76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af2:	4b31      	ldr	r3, [pc, #196]	@ (8005bb8 <HAL_RCC_OscConfig+0x478>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af8:	f7fc fdfe 	bl	80026f8 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b00:	f7fc fdfa 	bl	80026f8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e087      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b12:	4b27      	ldr	r3, [pc, #156]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	69da      	ldr	r2, [r3, #28]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2c:	019b      	lsls	r3, r3, #6
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	3b01      	subs	r3, #1
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	491b      	ldr	r1, [pc, #108]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b48:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb8 <HAL_RCC_OscConfig+0x478>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4e:	f7fc fdd3 	bl	80026f8 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b56:	f7fc fdcf 	bl	80026f8 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e05c      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b68:	4b11      	ldr	r3, [pc, #68]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x416>
 8005b74:	e054      	b.n	8005c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b76:	4b10      	ldr	r3, [pc, #64]	@ (8005bb8 <HAL_RCC_OscConfig+0x478>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b7c:	f7fc fdbc 	bl	80026f8 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b84:	f7fc fdb8 	bl	80026f8 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e045      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <HAL_RCC_OscConfig+0x470>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f0      	bne.n	8005b84 <HAL_RCC_OscConfig+0x444>
 8005ba2:	e03d      	b.n	8005c20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d107      	bne.n	8005bbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e038      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	40007000 	.word	0x40007000
 8005bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8005c2c <HAL_RCC_OscConfig+0x4ec>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d028      	beq.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d121      	bne.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d11a      	bne.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d111      	bne.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	3b01      	subs	r3, #1
 8005c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d107      	bne.n	8005c1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e000      	b.n	8005c22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40023800 	.word	0x40023800

08005c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0cc      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c44:	4b68      	ldr	r3, [pc, #416]	@ (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d90c      	bls.n	8005c6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c52:	4b65      	ldr	r3, [pc, #404]	@ (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c54:	683a      	ldr	r2, [r7, #0]
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5a:	4b63      	ldr	r3, [pc, #396]	@ (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d001      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e0b8      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d020      	beq.n	8005cba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c84:	4b59      	ldr	r3, [pc, #356]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	4a58      	ldr	r2, [pc, #352]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c9c:	4b53      	ldr	r3, [pc, #332]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	4a52      	ldr	r2, [pc, #328]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005ca2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ca6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca8:	4b50      	ldr	r3, [pc, #320]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	494d      	ldr	r1, [pc, #308]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d044      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d107      	bne.n	8005cde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cce:	4b47      	ldr	r3, [pc, #284]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d119      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e07f      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d003      	beq.n	8005cee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d107      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cee:	4b3f      	ldr	r3, [pc, #252]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e06f      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e067      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d0e:	4b37      	ldr	r3, [pc, #220]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f023 0203 	bic.w	r2, r3, #3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4934      	ldr	r1, [pc, #208]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d20:	f7fc fcea 	bl	80026f8 <HAL_GetTick>
 8005d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d26:	e00a      	b.n	8005d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d28:	f7fc fce6 	bl	80026f8 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e04f      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 020c 	and.w	r2, r3, #12
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d1eb      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d50:	4b25      	ldr	r3, [pc, #148]	@ (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d20c      	bcs.n	8005d78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b22      	ldr	r3, [pc, #136]	@ (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d66:	4b20      	ldr	r3, [pc, #128]	@ (8005de8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e032      	b.n	8005dde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d008      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d84:	4b19      	ldr	r3, [pc, #100]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4916      	ldr	r1, [pc, #88]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005da2:	4b12      	ldr	r3, [pc, #72]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	490e      	ldr	r1, [pc, #56]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005db6:	f000 f821 	bl	8005dfc <HAL_RCC_GetSysClockFreq>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005dec <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	490a      	ldr	r1, [pc, #40]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005dc8:	5ccb      	ldrb	r3, [r1, r3]
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	4a09      	ldr	r2, [pc, #36]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005dd2:	4b09      	ldr	r3, [pc, #36]	@ (8005df8 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc fc4a 	bl	8002670 <HAL_InitTick>

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	40023c00 	.word	0x40023c00
 8005dec:	40023800 	.word	0x40023800
 8005df0:	0801d3cc 	.word	0x0801d3cc
 8005df4:	20000004 	.word	0x20000004
 8005df8:	20000008 	.word	0x20000008

08005dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e00:	b094      	sub	sp, #80	@ 0x50
 8005e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e14:	4b79      	ldr	r3, [pc, #484]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 030c 	and.w	r3, r3, #12
 8005e1c:	2b08      	cmp	r3, #8
 8005e1e:	d00d      	beq.n	8005e3c <HAL_RCC_GetSysClockFreq+0x40>
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	f200 80e1 	bhi.w	8005fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_RCC_GetSysClockFreq+0x34>
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d003      	beq.n	8005e36 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e2e:	e0db      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e30:	4b73      	ldr	r3, [pc, #460]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e34:	e0db      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e36:	4b73      	ldr	r3, [pc, #460]	@ (8006004 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e3a:	e0d8      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e44:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e46:	4b6d      	ldr	r3, [pc, #436]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d063      	beq.n	8005f1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e52:	4b6a      	ldr	r3, [pc, #424]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	099b      	lsrs	r3, r3, #6
 8005e58:	2200      	movs	r2, #0
 8005e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e66:	2300      	movs	r3, #0
 8005e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f04f 0100 	mov.w	r1, #0
 8005e7a:	0159      	lsls	r1, r3, #5
 8005e7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e80:	0150      	lsls	r0, r2, #5
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4621      	mov	r1, r4
 8005e88:	1a51      	subs	r1, r2, r1
 8005e8a:	6139      	str	r1, [r7, #16]
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	018b      	lsls	r3, r1, #6
 8005ea4:	4651      	mov	r1, sl
 8005ea6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eaa:	4651      	mov	r1, sl
 8005eac:	018a      	lsls	r2, r1, #6
 8005eae:	4651      	mov	r1, sl
 8005eb0:	ebb2 0801 	subs.w	r8, r2, r1
 8005eb4:	4659      	mov	r1, fp
 8005eb6:	eb63 0901 	sbc.w	r9, r3, r1
 8005eba:	f04f 0200 	mov.w	r2, #0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ec6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ece:	4690      	mov	r8, r2
 8005ed0:	4699      	mov	r9, r3
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	eb18 0303 	adds.w	r3, r8, r3
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	462b      	mov	r3, r5
 8005edc:	eb49 0303 	adc.w	r3, r9, r3
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005eee:	4629      	mov	r1, r5
 8005ef0:	024b      	lsls	r3, r1, #9
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ef8:	4621      	mov	r1, r4
 8005efa:	024a      	lsls	r2, r1, #9
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f02:	2200      	movs	r2, #0
 8005f04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f0c:	f7fa fa68 	bl	80003e0 <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4613      	mov	r3, r2
 8005f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f18:	e058      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1a:	4b38      	ldr	r3, [pc, #224]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	099b      	lsrs	r3, r3, #6
 8005f20:	2200      	movs	r2, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	4611      	mov	r1, r2
 8005f26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	f04f 0000 	mov.w	r0, #0
 8005f3c:	f04f 0100 	mov.w	r1, #0
 8005f40:	0159      	lsls	r1, r3, #5
 8005f42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f46:	0150      	lsls	r0, r2, #5
 8005f48:	4602      	mov	r2, r0
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f52:	4649      	mov	r1, r9
 8005f54:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f58:	f04f 0200 	mov.w	r2, #0
 8005f5c:	f04f 0300 	mov.w	r3, #0
 8005f60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f6c:	ebb2 040a 	subs.w	r4, r2, sl
 8005f70:	eb63 050b 	sbc.w	r5, r3, fp
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	00eb      	lsls	r3, r5, #3
 8005f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f82:	00e2      	lsls	r2, r4, #3
 8005f84:	4614      	mov	r4, r2
 8005f86:	461d      	mov	r5, r3
 8005f88:	4643      	mov	r3, r8
 8005f8a:	18e3      	adds	r3, r4, r3
 8005f8c:	603b      	str	r3, [r7, #0]
 8005f8e:	464b      	mov	r3, r9
 8005f90:	eb45 0303 	adc.w	r3, r5, r3
 8005f94:	607b      	str	r3, [r7, #4]
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	f04f 0300 	mov.w	r3, #0
 8005f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	028b      	lsls	r3, r1, #10
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fac:	4621      	mov	r1, r4
 8005fae:	028a      	lsls	r2, r1, #10
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	61fa      	str	r2, [r7, #28]
 8005fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fc0:	f7fa fa0e 	bl	80003e0 <__aeabi_uldivmod>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4613      	mov	r3, r2
 8005fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005ffc <HAL_RCC_GetSysClockFreq+0x200>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	0c1b      	lsrs	r3, r3, #16
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005fdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fe6:	e002      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fe8:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3750      	adds	r7, #80	@ 0x50
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40023800 	.word	0x40023800
 8006000:	00f42400 	.word	0x00f42400
 8006004:	007a1200 	.word	0x007a1200

08006008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800600c:	4b03      	ldr	r3, [pc, #12]	@ (800601c <HAL_RCC_GetHCLKFreq+0x14>)
 800600e:	681b      	ldr	r3, [r3, #0]
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	20000004 	.word	0x20000004

08006020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006024:	f7ff fff0 	bl	8006008 <HAL_RCC_GetHCLKFreq>
 8006028:	4602      	mov	r2, r0
 800602a:	4b05      	ldr	r3, [pc, #20]	@ (8006040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	0a9b      	lsrs	r3, r3, #10
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	4903      	ldr	r1, [pc, #12]	@ (8006044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006036:	5ccb      	ldrb	r3, [r1, r3]
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40023800 	.word	0x40023800
 8006044:	0801d3dc 	.word	0x0801d3dc

08006048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800604c:	f7ff ffdc 	bl	8006008 <HAL_RCC_GetHCLKFreq>
 8006050:	4602      	mov	r2, r0
 8006052:	4b05      	ldr	r3, [pc, #20]	@ (8006068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0b5b      	lsrs	r3, r3, #13
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	4903      	ldr	r1, [pc, #12]	@ (800606c <HAL_RCC_GetPCLK2Freq+0x24>)
 800605e:	5ccb      	ldrb	r3, [r1, r3]
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40023800 	.word	0x40023800
 800606c:	0801d3dc 	.word	0x0801d3dc

08006070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e041      	b.n	8006106 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fb ff94 	bl	8001fc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	4619      	mov	r1, r3
 80060ae:	4610      	mov	r0, r2
 80060b0:	f000 faec 	bl	800668c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <HAL_TIM_PWM_Start+0x24>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	bf14      	ite	ne
 800612c:	2301      	movne	r3, #1
 800612e:	2300      	moveq	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	e022      	b.n	800617a <HAL_TIM_PWM_Start+0x6a>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b04      	cmp	r3, #4
 8006138:	d109      	bne.n	800614e <HAL_TIM_PWM_Start+0x3e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b01      	cmp	r3, #1
 8006144:	bf14      	ite	ne
 8006146:	2301      	movne	r3, #1
 8006148:	2300      	moveq	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	e015      	b.n	800617a <HAL_TIM_PWM_Start+0x6a>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b08      	cmp	r3, #8
 8006152:	d109      	bne.n	8006168 <HAL_TIM_PWM_Start+0x58>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	bf14      	ite	ne
 8006160:	2301      	movne	r3, #1
 8006162:	2300      	moveq	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	e008      	b.n	800617a <HAL_TIM_PWM_Start+0x6a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	bf14      	ite	ne
 8006174:	2301      	movne	r3, #1
 8006176:	2300      	moveq	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e07c      	b.n	800627c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <HAL_TIM_PWM_Start+0x82>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006190:	e013      	b.n	80061ba <HAL_TIM_PWM_Start+0xaa>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b04      	cmp	r3, #4
 8006196:	d104      	bne.n	80061a2 <HAL_TIM_PWM_Start+0x92>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061a0:	e00b      	b.n	80061ba <HAL_TIM_PWM_Start+0xaa>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d104      	bne.n	80061b2 <HAL_TIM_PWM_Start+0xa2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061b0:	e003      	b.n	80061ba <HAL_TIM_PWM_Start+0xaa>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2201      	movs	r2, #1
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fcb8 	bl	8006b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006284 <HAL_TIM_PWM_Start+0x174>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d004      	beq.n	80061dc <HAL_TIM_PWM_Start+0xcc>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006288 <HAL_TIM_PWM_Start+0x178>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d101      	bne.n	80061e0 <HAL_TIM_PWM_Start+0xd0>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <HAL_TIM_PWM_Start+0xd2>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a22      	ldr	r2, [pc, #136]	@ (8006284 <HAL_TIM_PWM_Start+0x174>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d022      	beq.n	8006246 <HAL_TIM_PWM_Start+0x136>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006208:	d01d      	beq.n	8006246 <HAL_TIM_PWM_Start+0x136>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1f      	ldr	r2, [pc, #124]	@ (800628c <HAL_TIM_PWM_Start+0x17c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d018      	beq.n	8006246 <HAL_TIM_PWM_Start+0x136>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1d      	ldr	r2, [pc, #116]	@ (8006290 <HAL_TIM_PWM_Start+0x180>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_TIM_PWM_Start+0x136>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1c      	ldr	r2, [pc, #112]	@ (8006294 <HAL_TIM_PWM_Start+0x184>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00e      	beq.n	8006246 <HAL_TIM_PWM_Start+0x136>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a16      	ldr	r2, [pc, #88]	@ (8006288 <HAL_TIM_PWM_Start+0x178>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d009      	beq.n	8006246 <HAL_TIM_PWM_Start+0x136>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a18      	ldr	r2, [pc, #96]	@ (8006298 <HAL_TIM_PWM_Start+0x188>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_TIM_PWM_Start+0x136>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a16      	ldr	r2, [pc, #88]	@ (800629c <HAL_TIM_PWM_Start+0x18c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d111      	bne.n	800626a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b06      	cmp	r3, #6
 8006256:	d010      	beq.n	800627a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006268:	e007      	b.n	800627a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0201 	orr.w	r2, r2, #1
 8006278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40010000 	.word	0x40010000
 8006288:	40010400 	.word	0x40010400
 800628c:	40000400 	.word	0x40000400
 8006290:	40000800 	.word	0x40000800
 8006294:	40000c00 	.word	0x40000c00
 8006298:	40014000 	.word	0x40014000
 800629c:	40001800 	.word	0x40001800

080062a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e097      	b.n	80063e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fb fdc7 	bl	8001e5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062e4:	f023 0307 	bic.w	r3, r3, #7
 80062e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f000 f9c9 	bl	800668c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	021b      	lsls	r3, r3, #8
 8006332:	4313      	orrs	r3, r2
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006340:	f023 030c 	bic.w	r3, r3, #12
 8006344:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800634c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	4313      	orrs	r3, r2
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	011a      	lsls	r2, r3, #4
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	031b      	lsls	r3, r3, #12
 8006370:	4313      	orrs	r3, r2
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800637e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	4313      	orrs	r3, r2
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006404:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800640c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006414:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d110      	bne.n	800643e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d102      	bne.n	8006428 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006422:	7b7b      	ldrb	r3, [r7, #13]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d001      	beq.n	800642c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e069      	b.n	8006500 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800643c:	e031      	b.n	80064a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b04      	cmp	r3, #4
 8006442:	d110      	bne.n	8006466 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d102      	bne.n	8006450 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800644a:	7b3b      	ldrb	r3, [r7, #12]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d001      	beq.n	8006454 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e055      	b.n	8006500 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006464:	e01d      	b.n	80064a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d108      	bne.n	800647e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d105      	bne.n	800647e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006472:	7b7b      	ldrb	r3, [r7, #13]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006478:	7b3b      	ldrb	r3, [r7, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d001      	beq.n	8006482 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e03e      	b.n	8006500 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2202      	movs	r2, #2
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_TIM_Encoder_Start+0xc4>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d008      	beq.n	80064c0 <HAL_TIM_Encoder_Start+0xd4>
 80064ae:	e00f      	b.n	80064d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2201      	movs	r2, #1
 80064b6:	2100      	movs	r1, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fb3d 	bl	8006b38 <TIM_CCxChannelCmd>
      break;
 80064be:	e016      	b.n	80064ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2201      	movs	r2, #1
 80064c6:	2104      	movs	r1, #4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fb35 	bl	8006b38 <TIM_CCxChannelCmd>
      break;
 80064ce:	e00e      	b.n	80064ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2201      	movs	r2, #1
 80064d6:	2100      	movs	r1, #0
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 fb2d 	bl	8006b38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2201      	movs	r2, #1
 80064e4:	2104      	movs	r1, #4
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fb26 	bl	8006b38 <TIM_CCxChannelCmd>
      break;
 80064ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0201 	orr.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006522:	2302      	movs	r3, #2
 8006524:	e0ae      	b.n	8006684 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b0c      	cmp	r3, #12
 8006532:	f200 809f 	bhi.w	8006674 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006536:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653c:	08006571 	.word	0x08006571
 8006540:	08006675 	.word	0x08006675
 8006544:	08006675 	.word	0x08006675
 8006548:	08006675 	.word	0x08006675
 800654c:	080065b1 	.word	0x080065b1
 8006550:	08006675 	.word	0x08006675
 8006554:	08006675 	.word	0x08006675
 8006558:	08006675 	.word	0x08006675
 800655c:	080065f3 	.word	0x080065f3
 8006560:	08006675 	.word	0x08006675
 8006564:	08006675 	.word	0x08006675
 8006568:	08006675 	.word	0x08006675
 800656c:	08006633 	.word	0x08006633
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	4618      	mov	r0, r3
 8006578:	f000 f92e 	bl	80067d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0208 	orr.w	r2, r2, #8
 800658a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0204 	bic.w	r2, r2, #4
 800659a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6999      	ldr	r1, [r3, #24]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	619a      	str	r2, [r3, #24]
      break;
 80065ae:	e064      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 f97e 	bl	80068b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6999      	ldr	r1, [r3, #24]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	021a      	lsls	r2, r3, #8
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	619a      	str	r2, [r3, #24]
      break;
 80065f0:	e043      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f9d3 	bl	80069a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0208 	orr.w	r2, r2, #8
 800660c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69da      	ldr	r2, [r3, #28]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0204 	bic.w	r2, r2, #4
 800661c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69d9      	ldr	r1, [r3, #28]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	61da      	str	r2, [r3, #28]
      break;
 8006630:	e023      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fa27 	bl	8006a8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800664c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800665c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69d9      	ldr	r1, [r3, #28]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	021a      	lsls	r2, r3, #8
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	61da      	str	r2, [r3, #28]
      break;
 8006672:	e002      	b.n	800667a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	75fb      	strb	r3, [r7, #23]
      break;
 8006678:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a43      	ldr	r2, [pc, #268]	@ (80067ac <TIM_Base_SetConfig+0x120>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066aa:	d00f      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a40      	ldr	r2, [pc, #256]	@ (80067b0 <TIM_Base_SetConfig+0x124>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00b      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a3f      	ldr	r2, [pc, #252]	@ (80067b4 <TIM_Base_SetConfig+0x128>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d007      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a3e      	ldr	r2, [pc, #248]	@ (80067b8 <TIM_Base_SetConfig+0x12c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3d      	ldr	r2, [pc, #244]	@ (80067bc <TIM_Base_SetConfig+0x130>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d108      	bne.n	80066de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a32      	ldr	r2, [pc, #200]	@ (80067ac <TIM_Base_SetConfig+0x120>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d02b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ec:	d027      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a2f      	ldr	r2, [pc, #188]	@ (80067b0 <TIM_Base_SetConfig+0x124>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d023      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2e      	ldr	r2, [pc, #184]	@ (80067b4 <TIM_Base_SetConfig+0x128>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01f      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a2d      	ldr	r2, [pc, #180]	@ (80067b8 <TIM_Base_SetConfig+0x12c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2c      	ldr	r2, [pc, #176]	@ (80067bc <TIM_Base_SetConfig+0x130>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d017      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2b      	ldr	r2, [pc, #172]	@ (80067c0 <TIM_Base_SetConfig+0x134>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2a      	ldr	r2, [pc, #168]	@ (80067c4 <TIM_Base_SetConfig+0x138>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00f      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a29      	ldr	r2, [pc, #164]	@ (80067c8 <TIM_Base_SetConfig+0x13c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a28      	ldr	r2, [pc, #160]	@ (80067cc <TIM_Base_SetConfig+0x140>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d007      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a27      	ldr	r2, [pc, #156]	@ (80067d0 <TIM_Base_SetConfig+0x144>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a26      	ldr	r2, [pc, #152]	@ (80067d4 <TIM_Base_SetConfig+0x148>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d108      	bne.n	8006750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a0e      	ldr	r2, [pc, #56]	@ (80067ac <TIM_Base_SetConfig+0x120>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_Base_SetConfig+0xf2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a10      	ldr	r2, [pc, #64]	@ (80067bc <TIM_Base_SetConfig+0x130>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d103      	bne.n	8006786 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f043 0204 	orr.w	r2, r3, #4
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	601a      	str	r2, [r3, #0]
}
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40010000 	.word	0x40010000
 80067b0:	40000400 	.word	0x40000400
 80067b4:	40000800 	.word	0x40000800
 80067b8:	40000c00 	.word	0x40000c00
 80067bc:	40010400 	.word	0x40010400
 80067c0:	40014000 	.word	0x40014000
 80067c4:	40014400 	.word	0x40014400
 80067c8:	40014800 	.word	0x40014800
 80067cc:	40001800 	.word	0x40001800
 80067d0:	40001c00 	.word	0x40001c00
 80067d4:	40002000 	.word	0x40002000

080067d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f023 0201 	bic.w	r2, r3, #1
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0303 	bic.w	r3, r3, #3
 800680e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f023 0302 	bic.w	r3, r3, #2
 8006820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a20      	ldr	r2, [pc, #128]	@ (80068b0 <TIM_OC1_SetConfig+0xd8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_OC1_SetConfig+0x64>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a1f      	ldr	r2, [pc, #124]	@ (80068b4 <TIM_OC1_SetConfig+0xdc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d10c      	bne.n	8006856 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f023 0308 	bic.w	r3, r3, #8
 8006842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f023 0304 	bic.w	r3, r3, #4
 8006854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a15      	ldr	r2, [pc, #84]	@ (80068b0 <TIM_OC1_SetConfig+0xd8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC1_SetConfig+0x8e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a14      	ldr	r2, [pc, #80]	@ (80068b4 <TIM_OC1_SetConfig+0xdc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d111      	bne.n	800688a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800686c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	621a      	str	r2, [r3, #32]
}
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40010400 	.word	0x40010400

080068b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	f023 0210 	bic.w	r2, r3, #16
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f023 0320 	bic.w	r3, r3, #32
 8006902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4313      	orrs	r3, r2
 800690e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a22      	ldr	r2, [pc, #136]	@ (800699c <TIM_OC2_SetConfig+0xe4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_OC2_SetConfig+0x68>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a21      	ldr	r2, [pc, #132]	@ (80069a0 <TIM_OC2_SetConfig+0xe8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d10d      	bne.n	800693c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800693a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a17      	ldr	r2, [pc, #92]	@ (800699c <TIM_OC2_SetConfig+0xe4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d003      	beq.n	800694c <TIM_OC2_SetConfig+0x94>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a16      	ldr	r2, [pc, #88]	@ (80069a0 <TIM_OC2_SetConfig+0xe8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d113      	bne.n	8006974 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800695a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000
 80069a0:	40010400 	.word	0x40010400

080069a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0303 	bic.w	r3, r3, #3
 80069da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	021b      	lsls	r3, r3, #8
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a21      	ldr	r2, [pc, #132]	@ (8006a84 <TIM_OC3_SetConfig+0xe0>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d003      	beq.n	8006a0a <TIM_OC3_SetConfig+0x66>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a20      	ldr	r2, [pc, #128]	@ (8006a88 <TIM_OC3_SetConfig+0xe4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d10d      	bne.n	8006a26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a16      	ldr	r2, [pc, #88]	@ (8006a84 <TIM_OC3_SetConfig+0xe0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d003      	beq.n	8006a36 <TIM_OC3_SetConfig+0x92>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a15      	ldr	r2, [pc, #84]	@ (8006a88 <TIM_OC3_SetConfig+0xe4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d113      	bne.n	8006a5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	621a      	str	r2, [r3, #32]
}
 8006a78:	bf00      	nop
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40010400 	.word	0x40010400

08006a8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	031b      	lsls	r3, r3, #12
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a12      	ldr	r2, [pc, #72]	@ (8006b30 <TIM_OC4_SetConfig+0xa4>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_OC4_SetConfig+0x68>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a11      	ldr	r2, [pc, #68]	@ (8006b34 <TIM_OC4_SetConfig+0xa8>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d109      	bne.n	8006b08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	019b      	lsls	r3, r3, #6
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40010400 	.word	0x40010400

08006b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f003 031f 	and.w	r3, r3, #31
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1a      	ldr	r2, [r3, #32]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	43db      	mvns	r3, r3
 8006b5a:	401a      	ands	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1a      	ldr	r2, [r3, #32]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b70:	431a      	orrs	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	621a      	str	r2, [r3, #32]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e05a      	b.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a21      	ldr	r2, [pc, #132]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d022      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be8:	d01d      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1d      	ldr	r2, [pc, #116]	@ (8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1a      	ldr	r2, [pc, #104]	@ (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a18      	ldr	r2, [pc, #96]	@ (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a17      	ldr	r2, [pc, #92]	@ (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a15      	ldr	r2, [pc, #84]	@ (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10c      	bne.n	8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40010400 	.word	0x40010400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40001800 	.word	0x40001800

08006c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e042      	b.n	8006d14 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fb fa0a 	bl	80020bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2224      	movs	r2, #36	@ 0x24
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fff5 	bl	8007cb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695a      	ldr	r2, [r3, #20]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08c      	sub	sp, #48	@ 0x30
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	4613      	mov	r3, r2
 8006d28:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d162      	bne.n	8006dfc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <HAL_UART_Transmit_DMA+0x26>
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e05b      	b.n	8006dfe <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	88fa      	ldrh	r2, [r7, #6]
 8006d56:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2221      	movs	r2, #33	@ 0x21
 8006d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6a:	4a27      	ldr	r2, [pc, #156]	@ (8006e08 <HAL_UART_Transmit_DMA+0xec>)
 8006d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d72:	4a26      	ldr	r2, [pc, #152]	@ (8006e0c <HAL_UART_Transmit_DMA+0xf0>)
 8006d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7a:	4a25      	ldr	r2, [pc, #148]	@ (8006e10 <HAL_UART_Transmit_DMA+0xf4>)
 8006d7c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d82:	2200      	movs	r2, #0
 8006d84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006d86:	f107 0308 	add.w	r3, r7, #8
 8006d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d92:	6819      	ldr	r1, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	88fb      	ldrh	r3, [r7, #6]
 8006d9e:	f7fb fe9b 	bl	8002ad8 <HAL_DMA_Start_IT>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d008      	beq.n	8006dba <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2210      	movs	r2, #16
 8006dac:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2220      	movs	r2, #32
 8006db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e021      	b.n	8006dfe <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3314      	adds	r3, #20
 8006dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	e853 3f00 	ldrex	r3, [r3]
 8006dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3314      	adds	r3, #20
 8006de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006de4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	6a39      	ldr	r1, [r7, #32]
 8006dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dec:	e841 2300 	strex	r3, r2, [r1]
 8006df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e5      	bne.n	8006dc4 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e000      	b.n	8006dfe <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006dfc:	2302      	movs	r3, #2
  }
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3730      	adds	r7, #48	@ 0x30
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	0800752d 	.word	0x0800752d
 8006e0c:	080075c7 	.word	0x080075c7
 8006e10:	0800774b 	.word	0x0800774b

08006e14 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d112      	bne.n	8006e54 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <HAL_UART_Receive_DMA+0x26>
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e00b      	b.n	8006e56 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006e44:	88fb      	ldrh	r3, [r7, #6]
 8006e46:	461a      	mov	r2, r3
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 fcc8 	bl	80077e0 <UART_Start_Receive_DMA>
 8006e50:	4603      	mov	r3, r0
 8006e52:	e000      	b.n	8006e56 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e54:	2302      	movs	r3, #2
  }
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b090      	sub	sp, #64	@ 0x40
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e74:	2b80      	cmp	r3, #128	@ 0x80
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b21      	cmp	r3, #33	@ 0x21
 8006e8a:	d128      	bne.n	8006ede <HAL_UART_DMAStop+0x80>
 8006e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d025      	beq.n	8006ede <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3314      	adds	r3, #20
 8006e98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3314      	adds	r3, #20
 8006eb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e5      	bne.n	8006e92 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fb fe58 	bl	8002b88 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fd27 	bl	800792c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee8:	2b40      	cmp	r3, #64	@ 0x40
 8006eea:	bf0c      	ite	eq
 8006eec:	2301      	moveq	r3, #1
 8006eee:	2300      	movne	r3, #0
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b22      	cmp	r3, #34	@ 0x22
 8006efe:	d128      	bne.n	8006f52 <HAL_UART_DMAStop+0xf4>
 8006f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d025      	beq.n	8006f52 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3314      	adds	r3, #20
 8006f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3314      	adds	r3, #20
 8006f24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f26:	61fa      	str	r2, [r7, #28]
 8006f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	69b9      	ldr	r1, [r7, #24]
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	617b      	str	r3, [r7, #20]
   return(result);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e5      	bne.n	8006f06 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d004      	beq.n	8006f4c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fb fe1e 	bl	8002b88 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fd15 	bl	800797c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3740      	adds	r7, #64	@ 0x40
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b0ba      	sub	sp, #232	@ 0xe8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10f      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x66>
 8006fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fdba 	bl	8007b34 <UART_Receive_IT>
      return;
 8006fc0:	e273      	b.n	80074aa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 80de 	beq.w	8007188 <HAL_UART_IRQHandler+0x22c>
 8006fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fdc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80d1 	beq.w	8007188 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <HAL_UART_IRQHandler+0xae>
 8006ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007002:	f043 0201 	orr.w	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00b      	beq.n	800702e <HAL_UART_IRQHandler+0xd2>
 8007016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007026:	f043 0202 	orr.w	r2, r3, #2
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00b      	beq.n	8007052 <HAL_UART_IRQHandler+0xf6>
 800703a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704a:	f043 0204 	orr.w	r2, r3, #4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d011      	beq.n	8007082 <HAL_UART_IRQHandler+0x126>
 800705e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800706a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707a:	f043 0208 	orr.w	r2, r3, #8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 820a 	beq.w	80074a0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_UART_IRQHandler+0x14e>
 8007098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800709c:	f003 0320 	and.w	r3, r3, #32
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fd45 	bl	8007b34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b4:	2b40      	cmp	r3, #64	@ 0x40
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d103      	bne.n	80070d6 <HAL_UART_IRQHandler+0x17a>
 80070ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d04f      	beq.n	8007176 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fc50 	bl	800797c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e6:	2b40      	cmp	r3, #64	@ 0x40
 80070e8:	d141      	bne.n	800716e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3314      	adds	r3, #20
 80070f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007108:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3314      	adds	r3, #20
 8007112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007116:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800711a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007126:	e841 2300 	strex	r3, r2, [r1]
 800712a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800712e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1d9      	bne.n	80070ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d013      	beq.n	8007166 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007142:	4a8a      	ldr	r2, [pc, #552]	@ (800736c <HAL_UART_IRQHandler+0x410>)
 8007144:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714a:	4618      	mov	r0, r3
 800714c:	f7fb fd8c 	bl	8002c68 <HAL_DMA_Abort_IT>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007160:	4610      	mov	r0, r2
 8007162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007164:	e00e      	b.n	8007184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f9ca 	bl	8007500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716c:	e00a      	b.n	8007184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f9c6 	bl	8007500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007174:	e006      	b.n	8007184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f9c2 	bl	8007500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007182:	e18d      	b.n	80074a0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007184:	bf00      	nop
    return;
 8007186:	e18b      	b.n	80074a0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800718c:	2b01      	cmp	r3, #1
 800718e:	f040 8167 	bne.w	8007460 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8160 	beq.w	8007460 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a4:	f003 0310 	and.w	r3, r3, #16
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 8159 	beq.w	8007460 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071ae:	2300      	movs	r3, #0
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60bb      	str	r3, [r7, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	60bb      	str	r3, [r7, #8]
 80071c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ce:	2b40      	cmp	r3, #64	@ 0x40
 80071d0:	f040 80ce 	bne.w	8007370 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 80a9 	beq.w	800733c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071f2:	429a      	cmp	r2, r3
 80071f4:	f080 80a2 	bcs.w	800733c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80071fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720a:	f000 8088 	beq.w	800731e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	330c      	adds	r3, #12
 8007214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800722c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800723a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800723e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007246:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007252:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1d9      	bne.n	800720e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3314      	adds	r3, #20
 8007260:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800726a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800726c:	f023 0301 	bic.w	r3, r3, #1
 8007270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3314      	adds	r3, #20
 800727a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800727e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007282:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007286:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e1      	bne.n	800725a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3314      	adds	r3, #20
 800729c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3314      	adds	r3, #20
 80072b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e3      	bne.n	8007296 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2220      	movs	r2, #32
 80072d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	330c      	adds	r3, #12
 80072e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ee:	f023 0310 	bic.w	r3, r3, #16
 80072f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007300:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007302:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007306:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800730e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e3      	bne.n	80072dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007318:	4618      	mov	r0, r3
 800731a:	f7fb fc35 	bl	8002b88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800732c:	b29b      	uxth	r3, r3
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	b29b      	uxth	r3, r3
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f8ed 	bl	8007514 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800733a:	e0b3      	b.n	80074a4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007340:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007344:	429a      	cmp	r2, r3
 8007346:	f040 80ad 	bne.w	80074a4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007354:	f040 80a6 	bne.w	80074a4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f8d5 	bl	8007514 <HAL_UARTEx_RxEventCallback>
      return;
 800736a:	e09b      	b.n	80074a4 <HAL_UART_IRQHandler+0x548>
 800736c:	08007a43 	.word	0x08007a43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007378:	b29b      	uxth	r3, r3
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007384:	b29b      	uxth	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 808e 	beq.w	80074a8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800738c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8089 	beq.w	80074a8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	330c      	adds	r3, #12
 800739c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	330c      	adds	r3, #12
 80073b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80073ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80073bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e3      	bne.n	8007396 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3314      	adds	r3, #20
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	e853 3f00 	ldrex	r3, [r3]
 80073dc:	623b      	str	r3, [r7, #32]
   return(result);
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3314      	adds	r3, #20
 80073ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80073f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e3      	bne.n	80073ce <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	330c      	adds	r3, #12
 800741a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	60fb      	str	r3, [r7, #12]
   return(result);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0310 	bic.w	r3, r3, #16
 800742a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	330c      	adds	r3, #12
 8007434:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007438:	61fa      	str	r2, [r7, #28]
 800743a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	69b9      	ldr	r1, [r7, #24]
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	617b      	str	r3, [r7, #20]
   return(result);
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e3      	bne.n	8007414 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007452:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f85b 	bl	8007514 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800745e:	e023      	b.n	80074a8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <HAL_UART_IRQHandler+0x524>
 800746c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 faf3 	bl	8007a64 <UART_Transmit_IT>
    return;
 800747e:	e014      	b.n	80074aa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00e      	beq.n	80074aa <HAL_UART_IRQHandler+0x54e>
 800748c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d008      	beq.n	80074aa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fb33 	bl	8007b04 <UART_EndTransmit_IT>
    return;
 800749e:	e004      	b.n	80074aa <HAL_UART_IRQHandler+0x54e>
    return;
 80074a0:	bf00      	nop
 80074a2:	e002      	b.n	80074aa <HAL_UART_IRQHandler+0x54e>
      return;
 80074a4:	bf00      	nop
 80074a6:	e000      	b.n	80074aa <HAL_UART_IRQHandler+0x54e>
      return;
 80074a8:	bf00      	nop
  }
}
 80074aa:	37e8      	adds	r7, #232	@ 0xe8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b090      	sub	sp, #64	@ 0x40
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007538:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007544:	2b00      	cmp	r3, #0
 8007546:	d137      	bne.n	80075b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754a:	2200      	movs	r2, #0
 800754c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800754e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	3314      	adds	r3, #20
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	623b      	str	r3, [r7, #32]
   return(result);
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3314      	adds	r3, #20
 800756c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800756e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007570:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e5      	bne.n	800754e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	330c      	adds	r3, #12
 8007588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	60fb      	str	r3, [r7, #12]
   return(result);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
 800759a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075a2:	61fa      	str	r2, [r7, #28]
 80075a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	69b9      	ldr	r1, [r7, #24]
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	617b      	str	r3, [r7, #20]
   return(result);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e5      	bne.n	8007582 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075b6:	e002      	b.n	80075be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80075b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80075ba:	f7ff ff79 	bl	80074b0 <HAL_UART_TxCpltCallback>
}
 80075be:	bf00      	nop
 80075c0:	3740      	adds	r7, #64	@ 0x40
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7ff ff75 	bl	80074c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075da:	bf00      	nop
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b09c      	sub	sp, #112	@ 0x70
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d172      	bne.n	80076e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80075fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007600:	2200      	movs	r2, #0
 8007602:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007616:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800761a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800761c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	330c      	adds	r3, #12
 8007622:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007624:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007626:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800762a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e5      	bne.n	8007604 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3314      	adds	r3, #20
 800763e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3314      	adds	r3, #20
 8007656:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007658:	647a      	str	r2, [r7, #68]	@ 0x44
 800765a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800765e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e5      	bne.n	8007638 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3314      	adds	r3, #20
 8007672:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	623b      	str	r3, [r7, #32]
   return(result);
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007682:	663b      	str	r3, [r7, #96]	@ 0x60
 8007684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3314      	adds	r3, #20
 800768a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800768c:	633a      	str	r2, [r7, #48]	@ 0x30
 800768e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e5      	bne.n	800766c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d119      	bne.n	80076e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	330c      	adds	r3, #12
 80076b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	60fb      	str	r3, [r7, #12]
   return(result);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0310 	bic.w	r3, r3, #16
 80076c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	330c      	adds	r3, #12
 80076ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80076d0:	61fa      	str	r2, [r7, #28]
 80076d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	69b9      	ldr	r1, [r7, #24]
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	617b      	str	r3, [r7, #20]
   return(result);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e5      	bne.n	80076b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076e6:	2200      	movs	r2, #0
 80076e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d106      	bne.n	8007700 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076f6:	4619      	mov	r1, r3
 80076f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80076fa:	f7ff ff0b 	bl	8007514 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076fe:	e002      	b.n	8007706 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007700:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007702:	f7ff fee9 	bl	80074d8 <HAL_UART_RxCpltCallback>
}
 8007706:	bf00      	nop
 8007708:	3770      	adds	r7, #112	@ 0x70
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007726:	2b01      	cmp	r3, #1
 8007728:	d108      	bne.n	800773c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800772e:	085b      	lsrs	r3, r3, #1
 8007730:	b29b      	uxth	r3, r3
 8007732:	4619      	mov	r1, r3
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff feed 	bl	8007514 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800773a:	e002      	b.n	8007742 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f7ff fed5 	bl	80074ec <HAL_UART_RxHalfCpltCallback>
}
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007752:	2300      	movs	r3, #0
 8007754:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007766:	2b80      	cmp	r3, #128	@ 0x80
 8007768:	bf0c      	ite	eq
 800776a:	2301      	moveq	r3, #1
 800776c:	2300      	movne	r3, #0
 800776e:	b2db      	uxtb	r3, r3
 8007770:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b21      	cmp	r3, #33	@ 0x21
 800777c:	d108      	bne.n	8007790 <UART_DMAError+0x46>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2200      	movs	r2, #0
 8007788:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800778a:	68b8      	ldr	r0, [r7, #8]
 800778c:	f000 f8ce 	bl	800792c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779a:	2b40      	cmp	r3, #64	@ 0x40
 800779c:	bf0c      	ite	eq
 800779e:	2301      	moveq	r3, #1
 80077a0:	2300      	movne	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b22      	cmp	r3, #34	@ 0x22
 80077b0:	d108      	bne.n	80077c4 <UART_DMAError+0x7a>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d005      	beq.n	80077c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2200      	movs	r2, #0
 80077bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80077be:	68b8      	ldr	r0, [r7, #8]
 80077c0:	f000 f8dc 	bl	800797c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c8:	f043 0210 	orr.w	r2, r3, #16
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077d0:	68b8      	ldr	r0, [r7, #8]
 80077d2:	f7ff fe95 	bl	8007500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077d6:	bf00      	nop
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b098      	sub	sp, #96	@ 0x60
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	88fa      	ldrh	r2, [r7, #6]
 80077f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2222      	movs	r2, #34	@ 0x22
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780c:	4a44      	ldr	r2, [pc, #272]	@ (8007920 <UART_Start_Receive_DMA+0x140>)
 800780e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007814:	4a43      	ldr	r2, [pc, #268]	@ (8007924 <UART_Start_Receive_DMA+0x144>)
 8007816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781c:	4a42      	ldr	r2, [pc, #264]	@ (8007928 <UART_Start_Receive_DMA+0x148>)
 800781e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007824:	2200      	movs	r2, #0
 8007826:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007828:	f107 0308 	add.w	r3, r7, #8
 800782c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3304      	adds	r3, #4
 8007838:	4619      	mov	r1, r3
 800783a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	88fb      	ldrh	r3, [r7, #6]
 8007840:	f7fb f94a 	bl	8002ad8 <HAL_DMA_Start_IT>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d008      	beq.n	800785c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2210      	movs	r2, #16
 800784e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e05d      	b.n	8007918 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800785c:	2300      	movs	r3, #0
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	613b      	str	r3, [r7, #16]
 8007870:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d019      	beq.n	80078ae <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007884:	e853 3f00 	ldrex	r3, [r3]
 8007888:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800788a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800788c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007890:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	330c      	adds	r3, #12
 8007898:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800789a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800789c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80078a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80078a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e5      	bne.n	800787a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3314      	adds	r3, #20
 80078b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c0:	f043 0301 	orr.w	r3, r3, #1
 80078c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3314      	adds	r3, #20
 80078cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80078d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80078d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e5      	bne.n	80078ae <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3314      	adds	r3, #20
 80078e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	617b      	str	r3, [r7, #20]
   return(result);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3314      	adds	r3, #20
 8007900:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007902:	627a      	str	r2, [r7, #36]	@ 0x24
 8007904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6a39      	ldr	r1, [r7, #32]
 8007908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e5      	bne.n	80078e2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3760      	adds	r7, #96	@ 0x60
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	080075e3 	.word	0x080075e3
 8007924:	0800770f 	.word	0x0800770f
 8007928:	0800774b 	.word	0x0800774b

0800792c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800792c:	b480      	push	{r7}
 800792e:	b089      	sub	sp, #36	@ 0x24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	330c      	adds	r3, #12
 800793a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	e853 3f00 	ldrex	r3, [r3]
 8007942:	60bb      	str	r3, [r7, #8]
   return(result);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800794a:	61fb      	str	r3, [r7, #28]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	330c      	adds	r3, #12
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	61ba      	str	r2, [r7, #24]
 8007956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007958:	6979      	ldr	r1, [r7, #20]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	e841 2300 	strex	r3, r2, [r1]
 8007960:	613b      	str	r3, [r7, #16]
   return(result);
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e5      	bne.n	8007934 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2220      	movs	r2, #32
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007970:	bf00      	nop
 8007972:	3724      	adds	r7, #36	@ 0x24
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b095      	sub	sp, #84	@ 0x54
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800799a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	330c      	adds	r3, #12
 80079a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80079a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e5      	bne.n	8007984 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3314      	adds	r3, #20
 80079be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f023 0301 	bic.w	r3, r3, #1
 80079ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3314      	adds	r3, #20
 80079d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e5      	bne.n	80079b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d119      	bne.n	8007a28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f023 0310 	bic.w	r3, r3, #16
 8007a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	330c      	adds	r3, #12
 8007a12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a14:	61ba      	str	r2, [r7, #24]
 8007a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6979      	ldr	r1, [r7, #20]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	613b      	str	r3, [r7, #16]
   return(result);
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e5      	bne.n	80079f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a36:	bf00      	nop
 8007a38:	3754      	adds	r7, #84	@ 0x54
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b084      	sub	sp, #16
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a56:	68f8      	ldr	r0, [r7, #12]
 8007a58:	f7ff fd52 	bl	8007500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a5c:	bf00      	nop
 8007a5e:	3710      	adds	r7, #16
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b21      	cmp	r3, #33	@ 0x21
 8007a76:	d13e      	bne.n	8007af6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a80:	d114      	bne.n	8007aac <UART_Transmit_IT+0x48>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d110      	bne.n	8007aac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	461a      	mov	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a9e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	1c9a      	adds	r2, r3, #2
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	621a      	str	r2, [r3, #32]
 8007aaa:	e008      	b.n	8007abe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	1c59      	adds	r1, r3, #1
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6211      	str	r1, [r2, #32]
 8007ab6:	781a      	ldrb	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	4619      	mov	r1, r3
 8007acc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10f      	bne.n	8007af2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ae0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007af0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e000      	b.n	8007af8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
  }
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff fcc3 	bl	80074b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08c      	sub	sp, #48	@ 0x30
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007b40:	2300      	movs	r3, #0
 8007b42:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b22      	cmp	r3, #34	@ 0x22
 8007b4e:	f040 80aa 	bne.w	8007ca6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b5a:	d115      	bne.n	8007b88 <UART_Receive_IT+0x54>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d111      	bne.n	8007b88 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	1c9a      	adds	r2, r3, #2
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b86:	e024      	b.n	8007bd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b96:	d007      	beq.n	8007ba8 <UART_Receive_IT+0x74>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <UART_Receive_IT+0x82>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d106      	bne.n	8007bb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	e008      	b.n	8007bc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	4619      	mov	r1, r3
 8007be0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d15d      	bne.n	8007ca2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68da      	ldr	r2, [r3, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0220 	bic.w	r2, r2, #32
 8007bf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	695a      	ldr	r2, [r3, #20]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0201 	bic.w	r2, r2, #1
 8007c14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d135      	bne.n	8007c98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	330c      	adds	r3, #12
 8007c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	613b      	str	r3, [r7, #16]
   return(result);
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f023 0310 	bic.w	r3, r3, #16
 8007c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	330c      	adds	r3, #12
 8007c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c52:	623a      	str	r2, [r7, #32]
 8007c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	69f9      	ldr	r1, [r7, #28]
 8007c58:	6a3a      	ldr	r2, [r7, #32]
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e5      	bne.n	8007c32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d10a      	bne.n	8007c8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fc3f 	bl	8007514 <HAL_UARTEx_RxEventCallback>
 8007c96:	e002      	b.n	8007c9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff fc1d 	bl	80074d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e002      	b.n	8007ca8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
  }
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3730      	adds	r7, #48	@ 0x30
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb4:	b0c0      	sub	sp, #256	@ 0x100
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ccc:	68d9      	ldr	r1, [r3, #12]
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	ea40 0301 	orr.w	r3, r0, r1
 8007cd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d08:	f021 010c 	bic.w	r1, r1, #12
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d16:	430b      	orrs	r3, r1
 8007d18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2a:	6999      	ldr	r1, [r3, #24]
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	ea40 0301 	orr.w	r3, r0, r1
 8007d36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b8f      	ldr	r3, [pc, #572]	@ (8007f7c <UART_SetConfig+0x2cc>)
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d005      	beq.n	8007d50 <UART_SetConfig+0xa0>
 8007d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8007f80 <UART_SetConfig+0x2d0>)
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d104      	bne.n	8007d5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d50:	f7fe f97a 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 8007d54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d58:	e003      	b.n	8007d62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d5a:	f7fe f961 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 8007d5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d6c:	f040 810c 	bne.w	8007f88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d82:	4622      	mov	r2, r4
 8007d84:	462b      	mov	r3, r5
 8007d86:	1891      	adds	r1, r2, r2
 8007d88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007d8a:	415b      	adcs	r3, r3
 8007d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d92:	4621      	mov	r1, r4
 8007d94:	eb12 0801 	adds.w	r8, r2, r1
 8007d98:	4629      	mov	r1, r5
 8007d9a:	eb43 0901 	adc.w	r9, r3, r1
 8007d9e:	f04f 0200 	mov.w	r2, #0
 8007da2:	f04f 0300 	mov.w	r3, #0
 8007da6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007daa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007db2:	4690      	mov	r8, r2
 8007db4:	4699      	mov	r9, r3
 8007db6:	4623      	mov	r3, r4
 8007db8:	eb18 0303 	adds.w	r3, r8, r3
 8007dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	eb49 0303 	adc.w	r3, r9, r3
 8007dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007dde:	460b      	mov	r3, r1
 8007de0:	18db      	adds	r3, r3, r3
 8007de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007de4:	4613      	mov	r3, r2
 8007de6:	eb42 0303 	adc.w	r3, r2, r3
 8007dea:	657b      	str	r3, [r7, #84]	@ 0x54
 8007dec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007df0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007df4:	f7f8 faf4 	bl	80003e0 <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4b61      	ldr	r3, [pc, #388]	@ (8007f84 <UART_SetConfig+0x2d4>)
 8007dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007e02:	095b      	lsrs	r3, r3, #5
 8007e04:	011c      	lsls	r4, r3, #4
 8007e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e18:	4642      	mov	r2, r8
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	1891      	adds	r1, r2, r2
 8007e1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e20:	415b      	adcs	r3, r3
 8007e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e28:	4641      	mov	r1, r8
 8007e2a:	eb12 0a01 	adds.w	sl, r2, r1
 8007e2e:	4649      	mov	r1, r9
 8007e30:	eb43 0b01 	adc.w	fp, r3, r1
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e48:	4692      	mov	sl, r2
 8007e4a:	469b      	mov	fp, r3
 8007e4c:	4643      	mov	r3, r8
 8007e4e:	eb1a 0303 	adds.w	r3, sl, r3
 8007e52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e56:	464b      	mov	r3, r9
 8007e58:	eb4b 0303 	adc.w	r3, fp, r3
 8007e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e74:	460b      	mov	r3, r1
 8007e76:	18db      	adds	r3, r3, r3
 8007e78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	eb42 0303 	adc.w	r3, r2, r3
 8007e80:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007e8a:	f7f8 faa9 	bl	80003e0 <__aeabi_uldivmod>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4611      	mov	r1, r2
 8007e94:	4b3b      	ldr	r3, [pc, #236]	@ (8007f84 <UART_SetConfig+0x2d4>)
 8007e96:	fba3 2301 	umull	r2, r3, r3, r1
 8007e9a:	095b      	lsrs	r3, r3, #5
 8007e9c:	2264      	movs	r2, #100	@ 0x64
 8007e9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ea2:	1acb      	subs	r3, r1, r3
 8007ea4:	00db      	lsls	r3, r3, #3
 8007ea6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007eaa:	4b36      	ldr	r3, [pc, #216]	@ (8007f84 <UART_SetConfig+0x2d4>)
 8007eac:	fba3 2302 	umull	r2, r3, r3, r2
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007eb8:	441c      	add	r4, r3
 8007eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007ec8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ecc:	4642      	mov	r2, r8
 8007ece:	464b      	mov	r3, r9
 8007ed0:	1891      	adds	r1, r2, r2
 8007ed2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ed4:	415b      	adcs	r3, r3
 8007ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007edc:	4641      	mov	r1, r8
 8007ede:	1851      	adds	r1, r2, r1
 8007ee0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	414b      	adcs	r3, r1
 8007ee6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ef4:	4659      	mov	r1, fp
 8007ef6:	00cb      	lsls	r3, r1, #3
 8007ef8:	4651      	mov	r1, sl
 8007efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007efe:	4651      	mov	r1, sl
 8007f00:	00ca      	lsls	r2, r1, #3
 8007f02:	4610      	mov	r0, r2
 8007f04:	4619      	mov	r1, r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	4642      	mov	r2, r8
 8007f0a:	189b      	adds	r3, r3, r2
 8007f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f10:	464b      	mov	r3, r9
 8007f12:	460a      	mov	r2, r1
 8007f14:	eb42 0303 	adc.w	r3, r2, r3
 8007f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f30:	460b      	mov	r3, r1
 8007f32:	18db      	adds	r3, r3, r3
 8007f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f36:	4613      	mov	r3, r2
 8007f38:	eb42 0303 	adc.w	r3, r2, r3
 8007f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f46:	f7f8 fa4b 	bl	80003e0 <__aeabi_uldivmod>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f84 <UART_SetConfig+0x2d4>)
 8007f50:	fba3 1302 	umull	r1, r3, r3, r2
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	2164      	movs	r1, #100	@ 0x64
 8007f58:	fb01 f303 	mul.w	r3, r1, r3
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	3332      	adds	r3, #50	@ 0x32
 8007f62:	4a08      	ldr	r2, [pc, #32]	@ (8007f84 <UART_SetConfig+0x2d4>)
 8007f64:	fba2 2303 	umull	r2, r3, r2, r3
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	f003 0207 	and.w	r2, r3, #7
 8007f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4422      	add	r2, r4
 8007f76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f78:	e106      	b.n	8008188 <UART_SetConfig+0x4d8>
 8007f7a:	bf00      	nop
 8007f7c:	40011000 	.word	0x40011000
 8007f80:	40011400 	.word	0x40011400
 8007f84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007f96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007f9a:	4642      	mov	r2, r8
 8007f9c:	464b      	mov	r3, r9
 8007f9e:	1891      	adds	r1, r2, r2
 8007fa0:	6239      	str	r1, [r7, #32]
 8007fa2:	415b      	adcs	r3, r3
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007faa:	4641      	mov	r1, r8
 8007fac:	1854      	adds	r4, r2, r1
 8007fae:	4649      	mov	r1, r9
 8007fb0:	eb43 0501 	adc.w	r5, r3, r1
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	f04f 0300 	mov.w	r3, #0
 8007fbc:	00eb      	lsls	r3, r5, #3
 8007fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fc2:	00e2      	lsls	r2, r4, #3
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	461d      	mov	r5, r3
 8007fc8:	4643      	mov	r3, r8
 8007fca:	18e3      	adds	r3, r4, r3
 8007fcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	eb45 0303 	adc.w	r3, r5, r3
 8007fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	008b      	lsls	r3, r1, #2
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008000:	4621      	mov	r1, r4
 8008002:	008a      	lsls	r2, r1, #2
 8008004:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008008:	f7f8 f9ea 	bl	80003e0 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4b60      	ldr	r3, [pc, #384]	@ (8008194 <UART_SetConfig+0x4e4>)
 8008012:	fba3 2302 	umull	r2, r3, r3, r2
 8008016:	095b      	lsrs	r3, r3, #5
 8008018:	011c      	lsls	r4, r3, #4
 800801a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800801e:	2200      	movs	r2, #0
 8008020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008024:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008028:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800802c:	4642      	mov	r2, r8
 800802e:	464b      	mov	r3, r9
 8008030:	1891      	adds	r1, r2, r2
 8008032:	61b9      	str	r1, [r7, #24]
 8008034:	415b      	adcs	r3, r3
 8008036:	61fb      	str	r3, [r7, #28]
 8008038:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800803c:	4641      	mov	r1, r8
 800803e:	1851      	adds	r1, r2, r1
 8008040:	6139      	str	r1, [r7, #16]
 8008042:	4649      	mov	r1, r9
 8008044:	414b      	adcs	r3, r1
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	f04f 0200 	mov.w	r2, #0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008054:	4659      	mov	r1, fp
 8008056:	00cb      	lsls	r3, r1, #3
 8008058:	4651      	mov	r1, sl
 800805a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800805e:	4651      	mov	r1, sl
 8008060:	00ca      	lsls	r2, r1, #3
 8008062:	4610      	mov	r0, r2
 8008064:	4619      	mov	r1, r3
 8008066:	4603      	mov	r3, r0
 8008068:	4642      	mov	r2, r8
 800806a:	189b      	adds	r3, r3, r2
 800806c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008070:	464b      	mov	r3, r9
 8008072:	460a      	mov	r2, r1
 8008074:	eb42 0303 	adc.w	r3, r2, r3
 8008078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008086:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008088:	f04f 0200 	mov.w	r2, #0
 800808c:	f04f 0300 	mov.w	r3, #0
 8008090:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008094:	4649      	mov	r1, r9
 8008096:	008b      	lsls	r3, r1, #2
 8008098:	4641      	mov	r1, r8
 800809a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800809e:	4641      	mov	r1, r8
 80080a0:	008a      	lsls	r2, r1, #2
 80080a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80080a6:	f7f8 f99b 	bl	80003e0 <__aeabi_uldivmod>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4611      	mov	r1, r2
 80080b0:	4b38      	ldr	r3, [pc, #224]	@ (8008194 <UART_SetConfig+0x4e4>)
 80080b2:	fba3 2301 	umull	r2, r3, r3, r1
 80080b6:	095b      	lsrs	r3, r3, #5
 80080b8:	2264      	movs	r2, #100	@ 0x64
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	1acb      	subs	r3, r1, r3
 80080c0:	011b      	lsls	r3, r3, #4
 80080c2:	3332      	adds	r3, #50	@ 0x32
 80080c4:	4a33      	ldr	r2, [pc, #204]	@ (8008194 <UART_SetConfig+0x4e4>)
 80080c6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080d0:	441c      	add	r4, r3
 80080d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080d6:	2200      	movs	r2, #0
 80080d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80080da:	677a      	str	r2, [r7, #116]	@ 0x74
 80080dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80080e0:	4642      	mov	r2, r8
 80080e2:	464b      	mov	r3, r9
 80080e4:	1891      	adds	r1, r2, r2
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	415b      	adcs	r3, r3
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080f0:	4641      	mov	r1, r8
 80080f2:	1851      	adds	r1, r2, r1
 80080f4:	6039      	str	r1, [r7, #0]
 80080f6:	4649      	mov	r1, r9
 80080f8:	414b      	adcs	r3, r1
 80080fa:	607b      	str	r3, [r7, #4]
 80080fc:	f04f 0200 	mov.w	r2, #0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008108:	4659      	mov	r1, fp
 800810a:	00cb      	lsls	r3, r1, #3
 800810c:	4651      	mov	r1, sl
 800810e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008112:	4651      	mov	r1, sl
 8008114:	00ca      	lsls	r2, r1, #3
 8008116:	4610      	mov	r0, r2
 8008118:	4619      	mov	r1, r3
 800811a:	4603      	mov	r3, r0
 800811c:	4642      	mov	r2, r8
 800811e:	189b      	adds	r3, r3, r2
 8008120:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008122:	464b      	mov	r3, r9
 8008124:	460a      	mov	r2, r1
 8008126:	eb42 0303 	adc.w	r3, r2, r3
 800812a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	663b      	str	r3, [r7, #96]	@ 0x60
 8008136:	667a      	str	r2, [r7, #100]	@ 0x64
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008144:	4649      	mov	r1, r9
 8008146:	008b      	lsls	r3, r1, #2
 8008148:	4641      	mov	r1, r8
 800814a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800814e:	4641      	mov	r1, r8
 8008150:	008a      	lsls	r2, r1, #2
 8008152:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008156:	f7f8 f943 	bl	80003e0 <__aeabi_uldivmod>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4b0d      	ldr	r3, [pc, #52]	@ (8008194 <UART_SetConfig+0x4e4>)
 8008160:	fba3 1302 	umull	r1, r3, r3, r2
 8008164:	095b      	lsrs	r3, r3, #5
 8008166:	2164      	movs	r1, #100	@ 0x64
 8008168:	fb01 f303 	mul.w	r3, r1, r3
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	3332      	adds	r3, #50	@ 0x32
 8008172:	4a08      	ldr	r2, [pc, #32]	@ (8008194 <UART_SetConfig+0x4e4>)
 8008174:	fba2 2303 	umull	r2, r3, r2, r3
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	f003 020f 	and.w	r2, r3, #15
 800817e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4422      	add	r2, r4
 8008186:	609a      	str	r2, [r3, #8]
}
 8008188:	bf00      	nop
 800818a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800818e:	46bd      	mov	sp, r7
 8008190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008194:	51eb851f 	.word	0x51eb851f

08008198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008198:	b084      	sub	sp, #16
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	f107 001c 	add.w	r0, r7, #28
 80081a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80081aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d123      	bne.n	80081fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80081c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d105      	bne.n	80081ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f9dc 	bl	80085ac <USB_CoreReset>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
 80081f8:	e01b      	b.n	8008232 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f9d0 	bl	80085ac <USB_CoreReset>
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008210:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008214:	2b00      	cmp	r3, #0
 8008216:	d106      	bne.n	8008226 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	639a      	str	r2, [r3, #56]	@ 0x38
 8008224:	e005      	b.n	8008232 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008232:	7fbb      	ldrb	r3, [r7, #30]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d10b      	bne.n	8008250 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f043 0206 	orr.w	r2, r3, #6
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f043 0220 	orr.w	r2, r3, #32
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800825c:	b004      	add	sp, #16
 800825e:	4770      	bx	lr

08008260 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f043 0201 	orr.w	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f023 0201 	bic.w	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	460b      	mov	r3, r1
 80082ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d115      	bne.n	80082f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082d2:	200a      	movs	r0, #10
 80082d4:	f7fa fa1c 	bl	8002710 <HAL_Delay>
      ms += 10U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	330a      	adds	r3, #10
 80082dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f956 	bl	8008590 <USB_GetMode>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d01e      	beq.n	8008328 <USB_SetCurrentMode+0x84>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80082ee:	d9f0      	bls.n	80082d2 <USB_SetCurrentMode+0x2e>
 80082f0:	e01a      	b.n	8008328 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082f2:	78fb      	ldrb	r3, [r7, #3]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d115      	bne.n	8008324 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008304:	200a      	movs	r0, #10
 8008306:	f7fa fa03 	bl	8002710 <HAL_Delay>
      ms += 10U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	330a      	adds	r3, #10
 800830e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f93d 	bl	8008590 <USB_GetMode>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <USB_SetCurrentMode+0x84>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008320:	d9f0      	bls.n	8008304 <USB_SetCurrentMode+0x60>
 8008322:	e001      	b.n	8008328 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e005      	b.n	8008334 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2bc8      	cmp	r3, #200	@ 0xc8
 800832c:	d101      	bne.n	8008332 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3301      	adds	r3, #1
 800834e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008356:	d901      	bls.n	800835c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e01b      	b.n	8008394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	2b00      	cmp	r3, #0
 8008362:	daf2      	bge.n	800834a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	019b      	lsls	r3, r3, #6
 800836c:	f043 0220 	orr.w	r2, r3, #32
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	3301      	adds	r3, #1
 8008378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008380:	d901      	bls.n	8008386 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e006      	b.n	8008394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b20      	cmp	r3, #32
 8008390:	d0f0      	beq.n	8008374 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083b8:	d901      	bls.n	80083be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e018      	b.n	80083f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	daf2      	bge.n	80083ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2210      	movs	r2, #16
 80083ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	3301      	adds	r3, #1
 80083d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083dc:	d901      	bls.n	80083e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e006      	b.n	80083f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d0f0      	beq.n	80083d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b089      	sub	sp, #36	@ 0x24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	4611      	mov	r1, r2
 8008408:	461a      	mov	r2, r3
 800840a:	460b      	mov	r3, r1
 800840c:	71fb      	strb	r3, [r7, #7]
 800840e:	4613      	mov	r3, r2
 8008410:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800841a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800841e:	2b00      	cmp	r3, #0
 8008420:	d123      	bne.n	800846a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008422:	88bb      	ldrh	r3, [r7, #4]
 8008424:	3303      	adds	r3, #3
 8008426:	089b      	lsrs	r3, r3, #2
 8008428:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800842a:	2300      	movs	r3, #0
 800842c:	61bb      	str	r3, [r7, #24]
 800842e:	e018      	b.n	8008462 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	031a      	lsls	r2, r3, #12
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	4413      	add	r3, r2
 8008438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800843c:	461a      	mov	r2, r3
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	3301      	adds	r3, #1
 8008448:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	3301      	adds	r3, #1
 800844e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	3301      	adds	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008456:	69fb      	ldr	r3, [r7, #28]
 8008458:	3301      	adds	r3, #1
 800845a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	3301      	adds	r3, #1
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	69ba      	ldr	r2, [r7, #24]
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	429a      	cmp	r2, r3
 8008468:	d3e2      	bcc.n	8008430 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3724      	adds	r7, #36	@ 0x24
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008478:	b480      	push	{r7}
 800847a:	b08b      	sub	sp, #44	@ 0x2c
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	4613      	mov	r3, r2
 8008484:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	089b      	lsrs	r3, r3, #2
 8008492:	b29b      	uxth	r3, r3
 8008494:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	f003 0303 	and.w	r3, r3, #3
 800849c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800849e:	2300      	movs	r3, #0
 80084a0:	623b      	str	r3, [r7, #32]
 80084a2:	e014      	b.n	80084ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	3301      	adds	r3, #1
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	3301      	adds	r3, #1
 80084ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084be:	3301      	adds	r3, #1
 80084c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c4:	3301      	adds	r3, #1
 80084c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	3301      	adds	r3, #1
 80084cc:	623b      	str	r3, [r7, #32]
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d3e6      	bcc.n	80084a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084d6:	8bfb      	ldrh	r3, [r7, #30]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01e      	beq.n	800851a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084e6:	461a      	mov	r2, r3
 80084e8:	f107 0310 	add.w	r3, r7, #16
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	fa22 f303 	lsr.w	r3, r2, r3
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008500:	701a      	strb	r2, [r3, #0]
      i++;
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	3301      	adds	r3, #1
 8008506:	623b      	str	r3, [r7, #32]
      pDest++;
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	3301      	adds	r3, #1
 800850c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800850e:	8bfb      	ldrh	r3, [r7, #30]
 8008510:	3b01      	subs	r3, #1
 8008512:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008514:	8bfb      	ldrh	r3, [r7, #30]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1ea      	bne.n	80084f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800851c:	4618      	mov	r0, r3
 800851e:	372c      	adds	r7, #44	@ 0x2c
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	4013      	ands	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008540:	68fb      	ldr	r3, [r7, #12]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4413      	add	r3, r2
 8008566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	4013      	ands	r3, r2
 8008580:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008582:	68bb      	ldr	r3, [r7, #8]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	f003 0301 	and.w	r3, r3, #1
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3301      	adds	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085c4:	d901      	bls.n	80085ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e022      	b.n	8008610 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	daf2      	bge.n	80085b8 <USB_CoreReset+0xc>

  count = 10U;
 80085d2:	230a      	movs	r3, #10
 80085d4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80085d6:	e002      	b.n	80085de <USB_CoreReset+0x32>
  {
    count--;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3b01      	subs	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1f9      	bne.n	80085d8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	f043 0201 	orr.w	r2, r3, #1
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085fc:	d901      	bls.n	8008602 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e006      	b.n	8008610 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b01      	cmp	r3, #1
 800860c:	d0f0      	beq.n	80085f0 <USB_CoreReset+0x44>

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800861c:	b084      	sub	sp, #16
 800861e:	b580      	push	{r7, lr}
 8008620:	b086      	sub	sp, #24
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800862a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800863c:	461a      	mov	r2, r3
 800863e:	2300      	movs	r3, #0
 8008640:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008646:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008652:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800866e:	2b00      	cmp	r3, #0
 8008670:	d119      	bne.n	80086a6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008672:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008676:	2b01      	cmp	r3, #1
 8008678:	d10a      	bne.n	8008690 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008688:	f043 0304 	orr.w	r3, r3, #4
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	e014      	b.n	80086ba <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800869e:	f023 0304 	bic.w	r3, r3, #4
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	e009      	b.n	80086ba <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80086b4:	f023 0304 	bic.w	r3, r3, #4
 80086b8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086ba:	2110      	movs	r1, #16
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7ff fe3d 	bl	800833c <USB_FlushTxFifo>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff fe67 	bl	80083a0 <USB_FlushRxFifo>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80086dc:	2300      	movs	r3, #0
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	e015      	b.n	800870e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ee:	461a      	mov	r2, r3
 80086f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086f4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	015a      	lsls	r2, r3, #5
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008702:	461a      	mov	r2, r3
 8008704:	2300      	movs	r3, #0
 8008706:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	3301      	adds	r3, #1
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008712:	461a      	mov	r2, r3
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	4293      	cmp	r3, r2
 8008718:	d3e3      	bcc.n	80086e2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008726:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a18      	ldr	r2, [pc, #96]	@ (800878c <USB_HostInit+0x170>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d10b      	bne.n	8008748 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008736:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a15      	ldr	r2, [pc, #84]	@ (8008790 <USB_HostInit+0x174>)
 800873c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a14      	ldr	r2, [pc, #80]	@ (8008794 <USB_HostInit+0x178>)
 8008742:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008746:	e009      	b.n	800875c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2280      	movs	r2, #128	@ 0x80
 800874c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a11      	ldr	r2, [pc, #68]	@ (8008798 <USB_HostInit+0x17c>)
 8008752:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a11      	ldr	r2, [pc, #68]	@ (800879c <USB_HostInit+0x180>)
 8008758:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800875c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008760:	2b00      	cmp	r3, #0
 8008762:	d105      	bne.n	8008770 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	f043 0210 	orr.w	r2, r3, #16
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	699a      	ldr	r2, [r3, #24]
 8008774:	4b0a      	ldr	r3, [pc, #40]	@ (80087a0 <USB_HostInit+0x184>)
 8008776:	4313      	orrs	r3, r2
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800877c:	7dfb      	ldrb	r3, [r7, #23]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008788:	b004      	add	sp, #16
 800878a:	4770      	bx	lr
 800878c:	40040000 	.word	0x40040000
 8008790:	01000200 	.word	0x01000200
 8008794:	00e00300 	.word	0x00e00300
 8008798:	00600080 	.word	0x00600080
 800879c:	004000e0 	.word	0x004000e0
 80087a0:	a3200008 	.word	0xa3200008

080087a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80087c2:	f023 0303 	bic.w	r3, r3, #3
 80087c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	78fb      	ldrb	r3, [r7, #3]
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80087dc:	4313      	orrs	r3, r2
 80087de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d107      	bne.n	80087f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80087ec:	461a      	mov	r2, r3
 80087ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80087f2:	6053      	str	r3, [r2, #4]
 80087f4:	e00c      	b.n	8008810 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d107      	bne.n	800880c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008802:	461a      	mov	r2, r3
 8008804:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008808:	6053      	str	r3, [r2, #4]
 800880a:	e001      	b.n	8008810 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e000      	b.n	8008812 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800882a:	2300      	movs	r3, #0
 800882c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800883e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800884c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800884e:	2064      	movs	r0, #100	@ 0x64
 8008850:	f7f9 ff5e 	bl	8002710 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800885c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008860:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008862:	200a      	movs	r0, #10
 8008864:	f7f9 ff54 	bl	8002710 <HAL_Delay>

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008872:	b480      	push	{r7}
 8008874:	b085      	sub	sp, #20
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008896:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <USB_DriveVbus+0x44>
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d106      	bne.n	80088b6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80088b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80088b4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c0:	d109      	bne.n	80088d6 <USB_DriveVbus+0x64>
 80088c2:	78fb      	ldrb	r3, [r7, #3]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80088d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088d4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	0c5b      	lsrs	r3, r3, #17
 8008902:	f003 0303 	and.w	r3, r3, #3
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008912:	b480      	push	{r7}
 8008914:	b085      	sub	sp, #20
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	b29b      	uxth	r3, r3
}
 8008928:	4618      	mov	r0, r3
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b088      	sub	sp, #32
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	4608      	mov	r0, r1
 800893e:	4611      	mov	r1, r2
 8008940:	461a      	mov	r2, r3
 8008942:	4603      	mov	r3, r0
 8008944:	70fb      	strb	r3, [r7, #3]
 8008946:	460b      	mov	r3, r1
 8008948:	70bb      	strb	r3, [r7, #2]
 800894a:	4613      	mov	r3, r2
 800894c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	4413      	add	r3, r2
 800895e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008962:	461a      	mov	r2, r3
 8008964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008968:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800896a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800896e:	2b03      	cmp	r3, #3
 8008970:	d87c      	bhi.n	8008a6c <USB_HC_Init+0x138>
 8008972:	a201      	add	r2, pc, #4	@ (adr r2, 8008978 <USB_HC_Init+0x44>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	08008989 	.word	0x08008989
 800897c:	08008a2f 	.word	0x08008a2f
 8008980:	08008989 	.word	0x08008989
 8008984:	080089f1 	.word	0x080089f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008988:	78fb      	ldrb	r3, [r7, #3]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	4413      	add	r3, r2
 8008990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008994:	461a      	mov	r2, r3
 8008996:	f240 439d 	movw	r3, #1181	@ 0x49d
 800899a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800899c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	da10      	bge.n	80089c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	015a      	lsls	r2, r3, #5
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	4413      	add	r3, r2
 80089ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	78fa      	ldrb	r2, [r7, #3]
 80089b4:	0151      	lsls	r1, r2, #5
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	440a      	add	r2, r1
 80089ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089c2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80089c4:	e055      	b.n	8008a72 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a6f      	ldr	r2, [pc, #444]	@ (8008b88 <USB_HC_Init+0x254>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d151      	bne.n	8008a72 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	78fa      	ldrb	r2, [r7, #3]
 80089de:	0151      	lsls	r1, r2, #5
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	440a      	add	r2, r1
 80089e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80089ec:	60d3      	str	r3, [r2, #12]
      break;
 80089ee:	e040      	b.n	8008a72 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089fc:	461a      	mov	r2, r3
 80089fe:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008a02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008a04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	da34      	bge.n	8008a76 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	0151      	lsls	r1, r2, #5
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	440a      	add	r2, r1
 8008a22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008a2c:	e023      	b.n	8008a76 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f240 2325 	movw	r3, #549	@ 0x225
 8008a40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008a42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	da17      	bge.n	8008a7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	0151      	lsls	r1, r2, #5
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	440a      	add	r2, r1
 8008a60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a64:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008a68:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008a6a:	e006      	b.n	8008a7a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	77fb      	strb	r3, [r7, #31]
      break;
 8008a70:	e004      	b.n	8008a7c <USB_HC_Init+0x148>
      break;
 8008a72:	bf00      	nop
 8008a74:	e002      	b.n	8008a7c <USB_HC_Init+0x148>
      break;
 8008a76:	bf00      	nop
 8008a78:	e000      	b.n	8008a7c <USB_HC_Init+0x148>
      break;
 8008a7a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	015a      	lsls	r2, r3, #5
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	4413      	add	r3, r2
 8008a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a88:	461a      	mov	r2, r3
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	015a      	lsls	r2, r3, #5
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	4413      	add	r3, r2
 8008a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	78fa      	ldrb	r2, [r7, #3]
 8008a9e:	0151      	lsls	r1, r2, #5
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	440a      	add	r2, r1
 8008aa4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aa8:	f043 0302 	orr.w	r3, r3, #2
 8008aac:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ab4:	699a      	ldr	r2, [r3, #24]
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	2101      	movs	r1, #1
 8008abe:	fa01 f303 	lsl.w	r3, r1, r3
 8008ac2:	6939      	ldr	r1, [r7, #16]
 8008ac4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008ad8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	da03      	bge.n	8008ae8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008ae0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ae4:	61bb      	str	r3, [r7, #24]
 8008ae6:	e001      	b.n	8008aec <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fef9 	bl	80088e4 <USB_GetHostSpeed>
 8008af2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008af4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d106      	bne.n	8008b0a <USB_HC_Init+0x1d6>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d003      	beq.n	8008b0a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008b02:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008b06:	617b      	str	r3, [r7, #20]
 8008b08:	e001      	b.n	8008b0e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b0e:	787b      	ldrb	r3, [r7, #1]
 8008b10:	059b      	lsls	r3, r3, #22
 8008b12:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008b16:	78bb      	ldrb	r3, [r7, #2]
 8008b18:	02db      	lsls	r3, r3, #11
 8008b1a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b1e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008b24:	049b      	lsls	r3, r3, #18
 8008b26:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008b2a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008b2c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008b32:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	0151      	lsls	r1, r2, #5
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	440a      	add	r2, r1
 8008b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008b48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008b4c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008b4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d003      	beq.n	8008b5e <USB_HC_Init+0x22a>
 8008b56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d10f      	bne.n	8008b7e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008b5e:	78fb      	ldrb	r3, [r7, #3]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b7c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008b7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3720      	adds	r7, #32
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40040000 	.word	0x40040000

08008b8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08c      	sub	sp, #48	@ 0x30
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	4613      	mov	r3, r2
 8008b98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	785b      	ldrb	r3, [r3, #1]
 8008ba2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ba8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	4a5d      	ldr	r2, [pc, #372]	@ (8008d24 <USB_HC_StartXfer+0x198>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d12f      	bne.n	8008c12 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d11c      	bne.n	8008bf2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	7c9b      	ldrb	r3, [r3, #18]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <USB_HC_StartXfer+0x3c>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	7c9b      	ldrb	r3, [r3, #18]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d124      	bne.n	8008c12 <USB_HC_StartXfer+0x86>
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	799b      	ldrb	r3, [r3, #6]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d120      	bne.n	8008c12 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	69fa      	ldr	r2, [r7, #28]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	6a3a      	ldr	r2, [r7, #32]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bee:	60d3      	str	r3, [r2, #12]
 8008bf0:	e00f      	b.n	8008c12 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	791b      	ldrb	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <USB_HC_StartXfer+0x86>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	795b      	ldrb	r3, [r3, #5]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d107      	bne.n	8008c12 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	4619      	mov	r1, r3
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 fb6b 	bl	80092e4 <USB_DoPing>
        return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e232      	b.n	8009078 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	799b      	ldrb	r3, [r3, #6]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d158      	bne.n	8008ccc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	78db      	ldrb	r3, [r3, #3]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d007      	beq.n	8008c36 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	8a92      	ldrh	r2, [r2, #20]
 8008c2c:	fb03 f202 	mul.w	r2, r3, r2
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	61da      	str	r2, [r3, #28]
 8008c34:	e07c      	b.n	8008d30 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	7c9b      	ldrb	r3, [r3, #18]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d130      	bne.n	8008ca0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	2bbc      	cmp	r3, #188	@ 0xbc
 8008c44:	d918      	bls.n	8008c78 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	8a9b      	ldrh	r3, [r3, #20]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	69da      	ldr	r2, [r3, #28]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d003      	beq.n	8008c68 <USB_HC_StartXfer+0xdc>
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d103      	bne.n	8008c70 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	60da      	str	r2, [r3, #12]
 8008c6e:	e05f      	b.n	8008d30 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2201      	movs	r2, #1
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	e05b      	b.n	8008d30 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	6a1a      	ldr	r2, [r3, #32]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d007      	beq.n	8008c98 <USB_HC_StartXfer+0x10c>
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d003      	beq.n	8008c98 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2204      	movs	r2, #4
 8008c94:	60da      	str	r2, [r3, #12]
 8008c96:	e04b      	b.n	8008d30 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	60da      	str	r2, [r3, #12]
 8008c9e:	e047      	b.n	8008d30 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d10d      	bne.n	8008cc2 <USB_HC_StartXfer+0x136>
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	8a92      	ldrh	r2, [r2, #20]
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d907      	bls.n	8008cc2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008cb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	8a92      	ldrh	r2, [r2, #20]
 8008cb8:	fb03 f202 	mul.w	r2, r3, r2
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	61da      	str	r2, [r3, #28]
 8008cc0:	e036      	b.n	8008d30 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	6a1a      	ldr	r2, [r3, #32]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	61da      	str	r2, [r3, #28]
 8008cca:	e031      	b.n	8008d30 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d018      	beq.n	8008d06 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	8a92      	ldrh	r2, [r2, #20]
 8008cdc:	4413      	add	r3, r2
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	8a92      	ldrh	r2, [r2, #20]
 8008ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008cea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008cec:	8b7b      	ldrh	r3, [r7, #26]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d90b      	bls.n	8008d0a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008cf2:	8b7b      	ldrh	r3, [r7, #26]
 8008cf4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008cf6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	8a92      	ldrh	r2, [r2, #20]
 8008cfc:	fb03 f202 	mul.w	r2, r3, r2
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	61da      	str	r2, [r3, #28]
 8008d04:	e001      	b.n	8008d0a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008d06:	2301      	movs	r3, #1
 8008d08:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	78db      	ldrb	r3, [r3, #3]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008d12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	8a92      	ldrh	r2, [r2, #20]
 8008d18:	fb03 f202 	mul.w	r2, r3, r2
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	61da      	str	r2, [r3, #28]
 8008d20:	e006      	b.n	8008d30 <USB_HC_StartXfer+0x1a4>
 8008d22:	bf00      	nop
 8008d24:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6a1a      	ldr	r2, [r3, #32]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d38:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d3a:	04d9      	lsls	r1, r3, #19
 8008d3c:	4ba3      	ldr	r3, [pc, #652]	@ (8008fcc <USB_HC_StartXfer+0x440>)
 8008d3e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d40:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	7d9b      	ldrb	r3, [r3, #22]
 8008d46:	075b      	lsls	r3, r3, #29
 8008d48:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d4c:	69f9      	ldr	r1, [r7, #28]
 8008d4e:	0148      	lsls	r0, r1, #5
 8008d50:	6a39      	ldr	r1, [r7, #32]
 8008d52:	4401      	add	r1, r0
 8008d54:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d58:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008d5a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6999      	ldr	r1, [r3, #24]
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	6a3b      	ldr	r3, [r7, #32]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d72:	460a      	mov	r2, r1
 8008d74:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008d76:	6a3b      	ldr	r3, [r7, #32]
 8008d78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	bf0c      	ite	eq
 8008d86:	2301      	moveq	r3, #1
 8008d88:	2300      	movne	r3, #0
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	0151      	lsls	r1, r2, #5
 8008da0:	6a3a      	ldr	r2, [r7, #32]
 8008da2:	440a      	add	r2, r1
 8008da4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008da8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008dac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	7e7b      	ldrb	r3, [r7, #25]
 8008dbe:	075b      	lsls	r3, r3, #29
 8008dc0:	69f9      	ldr	r1, [r7, #28]
 8008dc2:	0148      	lsls	r0, r1, #5
 8008dc4:	6a39      	ldr	r1, [r7, #32]
 8008dc6:	4401      	add	r1, r0
 8008dc8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	799b      	ldrb	r3, [r3, #6]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	f040 80c3 	bne.w	8008f60 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	7c5b      	ldrb	r3, [r3, #17]
 8008dde:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008de4:	4313      	orrs	r3, r2
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	6a3a      	ldr	r2, [r7, #32]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008df2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008df6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	6a3a      	ldr	r2, [r7, #32]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e12:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008e16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	79db      	ldrb	r3, [r3, #7]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d123      	bne.n	8008e68 <USB_HC_StartXfer+0x2dc>
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	78db      	ldrb	r3, [r3, #3]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d11f      	bne.n	8008e68 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	0151      	lsls	r1, r2, #5
 8008e3a:	6a3a      	ldr	r2, [r7, #32]
 8008e3c:	440a      	add	r2, r1
 8008e3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e46:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	0151      	lsls	r1, r2, #5
 8008e5a:	6a3a      	ldr	r2, [r7, #32]
 8008e5c:	440a      	add	r2, r1
 8008e5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e66:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	7c9b      	ldrb	r3, [r3, #18]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d003      	beq.n	8008e78 <USB_HC_StartXfer+0x2ec>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	7c9b      	ldrb	r3, [r3, #18]
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d117      	bne.n	8008ea8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d113      	bne.n	8008ea8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	78db      	ldrb	r3, [r3, #3]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d10f      	bne.n	8008ea8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	69fa      	ldr	r2, [r7, #28]
 8008e98:	0151      	lsls	r1, r2, #5
 8008e9a:	6a3a      	ldr	r2, [r7, #32]
 8008e9c:	440a      	add	r2, r1
 8008e9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ea6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	7c9b      	ldrb	r3, [r3, #18]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d162      	bne.n	8008f76 <USB_HC_StartXfer+0x3ea>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	78db      	ldrb	r3, [r3, #3]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d15e      	bne.n	8008f76 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d858      	bhi.n	8008f74 <USB_HC_StartXfer+0x3e8>
 8008ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec8 <USB_HC_StartXfer+0x33c>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ed9 	.word	0x08008ed9
 8008ecc:	08008efb 	.word	0x08008efb
 8008ed0:	08008f1d 	.word	0x08008f1d
 8008ed4:	08008f3f 	.word	0x08008f3f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	69fa      	ldr	r2, [r7, #28]
 8008ee8:	0151      	lsls	r1, r2, #5
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	440a      	add	r2, r1
 8008eee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ef6:	6053      	str	r3, [r2, #4]
          break;
 8008ef8:	e03d      	b.n	8008f76 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	6a3b      	ldr	r3, [r7, #32]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	0151      	lsls	r1, r2, #5
 8008f0c:	6a3a      	ldr	r2, [r7, #32]
 8008f0e:	440a      	add	r2, r1
 8008f10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f14:	f043 030e 	orr.w	r3, r3, #14
 8008f18:	6053      	str	r3, [r2, #4]
          break;
 8008f1a:	e02c      	b.n	8008f76 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	0151      	lsls	r1, r2, #5
 8008f2e:	6a3a      	ldr	r2, [r7, #32]
 8008f30:	440a      	add	r2, r1
 8008f32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f3a:	6053      	str	r3, [r2, #4]
          break;
 8008f3c:	e01b      	b.n	8008f76 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	0151      	lsls	r1, r2, #5
 8008f50:	6a3a      	ldr	r2, [r7, #32]
 8008f52:	440a      	add	r2, r1
 8008f54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f5c:	6053      	str	r3, [r2, #4]
          break;
 8008f5e:	e00a      	b.n	8008f76 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6053      	str	r3, [r2, #4]
 8008f72:	e000      	b.n	8008f76 <USB_HC_StartXfer+0x3ea>
          break;
 8008f74:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f8c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	78db      	ldrb	r3, [r3, #3]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d004      	beq.n	8008fa0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f9c:	613b      	str	r3, [r7, #16]
 8008f9e:	e003      	b.n	8008fa8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fa6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008fae:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	015a      	lsls	r2, r3, #5
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	e055      	b.n	8009078 <USB_HC_StartXfer+0x4ec>
 8008fcc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	78db      	ldrb	r3, [r3, #3]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d14e      	bne.n	8009076 <USB_HC_StartXfer+0x4ea>
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	6a1b      	ldr	r3, [r3, #32]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d04a      	beq.n	8009076 <USB_HC_StartXfer+0x4ea>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	79db      	ldrb	r3, [r3, #7]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d146      	bne.n	8009076 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	7c9b      	ldrb	r3, [r3, #18]
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	d831      	bhi.n	8009054 <USB_HC_StartXfer+0x4c8>
 8008ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff8 <USB_HC_StartXfer+0x46c>)
 8008ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff6:	bf00      	nop
 8008ff8:	08009009 	.word	0x08009009
 8008ffc:	0800902d 	.word	0x0800902d
 8009000:	08009009 	.word	0x08009009
 8009004:	0800902d 	.word	0x0800902d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	3303      	adds	r3, #3
 800900e:	089b      	lsrs	r3, r3, #2
 8009010:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009012:	8afa      	ldrh	r2, [r7, #22]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009018:	b29b      	uxth	r3, r3
 800901a:	429a      	cmp	r2, r3
 800901c:	d91c      	bls.n	8009058 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	f043 0220 	orr.w	r2, r3, #32
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	619a      	str	r2, [r3, #24]
        }
        break;
 800902a:	e015      	b.n	8009058 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	3303      	adds	r3, #3
 8009032:	089b      	lsrs	r3, r3, #2
 8009034:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009036:	8afa      	ldrh	r2, [r7, #22]
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	b29b      	uxth	r3, r3
 8009042:	429a      	cmp	r2, r3
 8009044:	d90a      	bls.n	800905c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	619a      	str	r2, [r3, #24]
        }
        break;
 8009052:	e003      	b.n	800905c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009054:	bf00      	nop
 8009056:	e002      	b.n	800905e <USB_HC_StartXfer+0x4d2>
        break;
 8009058:	bf00      	nop
 800905a:	e000      	b.n	800905e <USB_HC_StartXfer+0x4d2>
        break;
 800905c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	6999      	ldr	r1, [r3, #24]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	785a      	ldrb	r2, [r3, #1]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	b29b      	uxth	r3, r3
 800906c:	2000      	movs	r0, #0
 800906e:	9000      	str	r0, [sp, #0]
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7ff f9c3 	bl	80083fc <USB_WritePacket>
  }

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3728      	adds	r7, #40	@ 0x28
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	b29b      	uxth	r3, r3
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b089      	sub	sp, #36	@ 0x24
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	0c9b      	lsrs	r3, r3, #18
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	0fdb      	lsrs	r3, r3, #31
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	0fdb      	lsrs	r3, r3, #31
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b20      	cmp	r3, #32
 8009106:	d10d      	bne.n	8009124 <USB_HC_Halt+0x82>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10a      	bne.n	8009124 <USB_HC_Halt+0x82>
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d002      	beq.n	8009120 <USB_HC_Halt+0x7e>
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b03      	cmp	r3, #3
 800911e:	d101      	bne.n	8009124 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	e0d8      	b.n	80092d6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <USB_HC_Halt+0x8e>
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b02      	cmp	r3, #2
 800912e:	d173      	bne.n	8009218 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	4413      	add	r3, r2
 8009138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	440a      	add	r2, r1
 8009146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800914a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800914e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f003 0320 	and.w	r3, r3, #32
 8009158:	2b00      	cmp	r3, #0
 800915a:	d14a      	bne.n	80091f2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009160:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d133      	bne.n	80091d0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	4413      	add	r3, r2
 8009170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	69fa      	ldr	r2, [r7, #28]
 800917c:	440a      	add	r2, r1
 800917e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009186:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	4413      	add	r3, r2
 8009190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	0151      	lsls	r1, r2, #5
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	440a      	add	r2, r1
 800919e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091a6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	3301      	adds	r3, #1
 80091ac:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091b4:	d82e      	bhi.n	8009214 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091cc:	d0ec      	beq.n	80091a8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091ce:	e081      	b.n	80092d4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69ba      	ldr	r2, [r7, #24]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091ee:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80091f0:	e070      	b.n	80092d4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	0151      	lsls	r1, r2, #5
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	440a      	add	r2, r1
 8009208:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800920c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009210:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009212:	e05f      	b.n	80092d4 <USB_HC_Halt+0x232>
            break;
 8009214:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009216:	e05d      	b.n	80092d4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69ba      	ldr	r2, [r7, #24]
 8009228:	0151      	lsls	r1, r2, #5
 800922a:	69fa      	ldr	r2, [r7, #28]
 800922c:	440a      	add	r2, r1
 800922e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009232:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009236:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d133      	bne.n	80092b0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	4413      	add	r3, r2
 8009250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	0151      	lsls	r1, r2, #5
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	440a      	add	r2, r1
 800925e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009262:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009266:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	4413      	add	r3, r2
 8009270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	0151      	lsls	r1, r2, #5
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	440a      	add	r2, r1
 800927e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009282:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009286:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	3301      	adds	r3, #1
 800928c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009294:	d81d      	bhi.n	80092d2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4413      	add	r3, r2
 800929e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092ac:	d0ec      	beq.n	8009288 <USB_HC_Halt+0x1e6>
 80092ae:	e011      	b.n	80092d4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	69fa      	ldr	r2, [r7, #28]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	e000      	b.n	80092d4 <USB_HC_Halt+0x232>
          break;
 80092d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3724      	adds	r7, #36	@ 0x24
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
	...

080092e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80092f8:	2301      	movs	r3, #1
 80092fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	04da      	lsls	r2, r3, #19
 8009300:	4b15      	ldr	r3, [pc, #84]	@ (8009358 <USB_DoPing+0x74>)
 8009302:	4013      	ands	r3, r2
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	0151      	lsls	r1, r2, #5
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	440a      	add	r2, r1
 800930c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009310:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009314:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	4413      	add	r3, r2
 800931e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800932c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009334:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	015a      	lsls	r2, r3, #5
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	4413      	add	r3, r2
 800933e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009342:	461a      	mov	r2, r3
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	1ff80000 	.word	0x1ff80000

0800935c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7fe ff86 	bl	8008282 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009376:	2110      	movs	r1, #16
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7fe ffdf 	bl	800833c <USB_FlushTxFifo>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff f809 	bl	80083a0 <USB_FlushRxFifo>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009398:	2300      	movs	r3, #0
 800939a:	61bb      	str	r3, [r7, #24]
 800939c:	e01f      	b.n	80093de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80093bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80093c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093d2:	461a      	mov	r2, r3
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	3301      	adds	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	2b0f      	cmp	r3, #15
 80093e2:	d9dc      	bls.n	800939e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80093e4:	2300      	movs	r3, #0
 80093e6:	61bb      	str	r3, [r7, #24]
 80093e8:	e034      	b.n	8009454 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	015a      	lsls	r2, r3, #5
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	4413      	add	r3, r2
 80093f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009400:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009408:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009410:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	4413      	add	r3, r2
 800941a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800941e:	461a      	mov	r2, r3
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3301      	adds	r3, #1
 8009428:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009430:	d80c      	bhi.n	800944c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	4413      	add	r3, r2
 800943a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009448:	d0ec      	beq.n	8009424 <USB_StopHost+0xc8>
 800944a:	e000      	b.n	800944e <USB_StopHost+0xf2>
        break;
 800944c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	3301      	adds	r3, #1
 8009452:	61bb      	str	r3, [r7, #24]
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	2b0f      	cmp	r3, #15
 8009458:	d9c7      	bls.n	80093ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009460:	461a      	mov	r2, r3
 8009462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009466:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800946e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7fe fef5 	bl	8008260 <USB_EnableGlobalInt>

  return ret;
 8009476:	7ffb      	ldrb	r3, [r7, #31]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3720      	adds	r7, #32
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009480:	b590      	push	{r4, r7, lr}
 8009482:	b089      	sub	sp, #36	@ 0x24
 8009484:	af04      	add	r7, sp, #16
 8009486:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009488:	2301      	movs	r3, #1
 800948a:	2202      	movs	r2, #2
 800948c:	2102      	movs	r1, #2
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fcb7 	bl	8009e02 <USBH_FindInterface>
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	2bff      	cmp	r3, #255	@ 0xff
 800949c:	d002      	beq.n	80094a4 <USBH_CDC_InterfaceInit+0x24>
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d901      	bls.n	80094a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80094a4:	2302      	movs	r3, #2
 80094a6:	e13d      	b.n	8009724 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fc8c 	bl	8009dca <USBH_SelectInterface>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80094bc:	2302      	movs	r3, #2
 80094be:	e131      	b.n	8009724 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80094c6:	2050      	movs	r0, #80	@ 0x50
 80094c8:	f012 fbc8 	bl	801bc5c <malloc>
 80094cc:	4603      	mov	r3, r0
 80094ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094d6:	69db      	ldr	r3, [r3, #28]
 80094d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80094e0:	2302      	movs	r3, #2
 80094e2:	e11f      	b.n	8009724 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80094e4:	2250      	movs	r2, #80	@ 0x50
 80094e6:	2100      	movs	r1, #0
 80094e8:	68b8      	ldr	r0, [r7, #8]
 80094ea:	f012 ff43 	bl	801c374 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	211a      	movs	r1, #26
 80094f4:	fb01 f303 	mul.w	r3, r1, r3
 80094f8:	4413      	add	r3, r2
 80094fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	b25b      	sxtb	r3, r3
 8009502:	2b00      	cmp	r3, #0
 8009504:	da15      	bge.n	8009532 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009506:	7bfb      	ldrb	r3, [r7, #15]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	211a      	movs	r1, #26
 800950c:	fb01 f303 	mul.w	r3, r1, r3
 8009510:	4413      	add	r3, r2
 8009512:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009516:	781a      	ldrb	r2, [r3, #0]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	211a      	movs	r1, #26
 8009522:	fb01 f303 	mul.w	r3, r1, r3
 8009526:	4413      	add	r3, r2
 8009528:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800952c:	881a      	ldrh	r2, [r3, #0]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f002 f904 	bl	800b746 <USBH_AllocPipe>
 800953e:	4603      	mov	r3, r0
 8009540:	461a      	mov	r2, r3
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	7819      	ldrb	r1, [r3, #0]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	7858      	ldrb	r0, [r3, #1]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	8952      	ldrh	r2, [r2, #10]
 800955e:	9202      	str	r2, [sp, #8]
 8009560:	2203      	movs	r2, #3
 8009562:	9201      	str	r2, [sp, #4]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	4623      	mov	r3, r4
 8009568:	4602      	mov	r2, r0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f002 f8bc 	bl	800b6e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2200      	movs	r2, #0
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f005 fbd9 	bl	800ed30 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800957e:	2300      	movs	r3, #0
 8009580:	2200      	movs	r2, #0
 8009582:	210a      	movs	r1, #10
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fc3c 	bl	8009e02 <USBH_FindInterface>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	2bff      	cmp	r3, #255	@ 0xff
 8009592:	d002      	beq.n	800959a <USBH_CDC_InterfaceInit+0x11a>
 8009594:	7bfb      	ldrb	r3, [r7, #15]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d901      	bls.n	800959e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800959a:	2302      	movs	r3, #2
 800959c:	e0c2      	b.n	8009724 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	211a      	movs	r1, #26
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	4413      	add	r3, r2
 80095aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	b25b      	sxtb	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	da16      	bge.n	80095e4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	211a      	movs	r1, #26
 80095bc:	fb01 f303 	mul.w	r3, r1, r3
 80095c0:	4413      	add	r3, r2
 80095c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80095c6:	781a      	ldrb	r2, [r3, #0]
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	211a      	movs	r1, #26
 80095d2:	fb01 f303 	mul.w	r3, r1, r3
 80095d6:	4413      	add	r3, r2
 80095d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80095dc:	881a      	ldrh	r2, [r3, #0]
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	835a      	strh	r2, [r3, #26]
 80095e2:	e015      	b.n	8009610 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	211a      	movs	r1, #26
 80095ea:	fb01 f303 	mul.w	r3, r1, r3
 80095ee:	4413      	add	r3, r2
 80095f0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80095f4:	781a      	ldrb	r2, [r3, #0]
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	211a      	movs	r1, #26
 8009600:	fb01 f303 	mul.w	r3, r1, r3
 8009604:	4413      	add	r3, r2
 8009606:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800960a:	881a      	ldrh	r2, [r3, #0]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	211a      	movs	r1, #26
 8009616:	fb01 f303 	mul.w	r3, r1, r3
 800961a:	4413      	add	r3, r2
 800961c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	b25b      	sxtb	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	da16      	bge.n	8009656 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009628:	7bfb      	ldrb	r3, [r7, #15]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	211a      	movs	r1, #26
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	4413      	add	r3, r2
 8009634:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009638:	781a      	ldrb	r2, [r3, #0]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	211a      	movs	r1, #26
 8009644:	fb01 f303 	mul.w	r3, r1, r3
 8009648:	4413      	add	r3, r2
 800964a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800964e:	881a      	ldrh	r2, [r3, #0]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	835a      	strh	r2, [r3, #26]
 8009654:	e015      	b.n	8009682 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	211a      	movs	r1, #26
 800965c:	fb01 f303 	mul.w	r3, r1, r3
 8009660:	4413      	add	r3, r2
 8009662:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009666:	781a      	ldrb	r2, [r3, #0]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	211a      	movs	r1, #26
 8009672:	fb01 f303 	mul.w	r3, r1, r3
 8009676:	4413      	add	r3, r2
 8009678:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800967c:	881a      	ldrh	r2, [r3, #0]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	7b9b      	ldrb	r3, [r3, #14]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f002 f85c 	bl	800b746 <USBH_AllocPipe>
 800968e:	4603      	mov	r3, r0
 8009690:	461a      	mov	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	7bdb      	ldrb	r3, [r3, #15]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f002 f852 	bl	800b746 <USBH_AllocPipe>
 80096a2:	4603      	mov	r3, r0
 80096a4:	461a      	mov	r2, r3
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	7b59      	ldrb	r1, [r3, #13]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	7b98      	ldrb	r0, [r3, #14]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	8b12      	ldrh	r2, [r2, #24]
 80096c2:	9202      	str	r2, [sp, #8]
 80096c4:	2202      	movs	r2, #2
 80096c6:	9201      	str	r2, [sp, #4]
 80096c8:	9300      	str	r3, [sp, #0]
 80096ca:	4623      	mov	r3, r4
 80096cc:	4602      	mov	r2, r0
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 f80a 	bl	800b6e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	7b19      	ldrb	r1, [r3, #12]
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	7bd8      	ldrb	r0, [r3, #15]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	8b52      	ldrh	r2, [r2, #26]
 80096ec:	9202      	str	r2, [sp, #8]
 80096ee:	2202      	movs	r2, #2
 80096f0:	9201      	str	r2, [sp, #4]
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	4623      	mov	r3, r4
 80096f6:	4602      	mov	r2, r0
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fff5 	bl	800b6e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	7b5b      	ldrb	r3, [r3, #13]
 800970a:	2200      	movs	r2, #0
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f005 fb0e 	bl	800ed30 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	7b1b      	ldrb	r3, [r3, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f005 fb07 	bl	800ed30 <USBH_LL_SetToggle>

  return USBH_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	bd90      	pop	{r4, r7, pc}

0800972c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800973a:	69db      	ldr	r3, [r3, #28]
 800973c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00e      	beq.n	8009764 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 ffea 	bl	800b726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f002 f815 	bl	800b788 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	7b1b      	ldrb	r3, [r3, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00e      	beq.n	800978a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	7b1b      	ldrb	r3, [r3, #12]
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 ffd7 	bl	800b726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	7b1b      	ldrb	r3, [r3, #12]
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f002 f802 	bl	800b788 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	7b5b      	ldrb	r3, [r3, #13]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00e      	beq.n	80097b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	7b5b      	ldrb	r3, [r3, #13]
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 ffc4 	bl	800b726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	7b5b      	ldrb	r3, [r3, #13]
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f001 ffef 	bl	800b788 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00b      	beq.n	80097d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f012 fa51 	bl	801bc6c <free>
    phost->pActiveClass->pData = 0U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097d0:	2200      	movs	r2, #0
 80097d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	3340      	adds	r3, #64	@ 0x40
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f8b1 	bl	800995e <GetLineCoding>
 80097fc:	4603      	mov	r3, r0
 80097fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009800:	7afb      	ldrb	r3, [r7, #11]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d105      	bne.n	8009812 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800980c:	2102      	movs	r1, #2
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009812:	7afb      	ldrb	r3, [r7, #11]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800983c:	2b04      	cmp	r3, #4
 800983e:	d877      	bhi.n	8009930 <USBH_CDC_Process+0x114>
 8009840:	a201      	add	r2, pc, #4	@ (adr r2, 8009848 <USBH_CDC_Process+0x2c>)
 8009842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009846:	bf00      	nop
 8009848:	0800985d 	.word	0x0800985d
 800984c:	08009863 	.word	0x08009863
 8009850:	08009893 	.word	0x08009893
 8009854:	08009907 	.word	0x08009907
 8009858:	08009915 	.word	0x08009915
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
      break;
 8009860:	e06d      	b.n	800993e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f897 	bl	800999c <SetLineCoding>
 800986e:	4603      	mov	r3, r0
 8009870:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d104      	bne.n	8009882 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2202      	movs	r2, #2
 800987c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009880:	e058      	b.n	8009934 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d055      	beq.n	8009934 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2204      	movs	r2, #4
 800988c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009890:	e050      	b.n	8009934 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	3340      	adds	r3, #64	@ 0x40
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f860 	bl	800995e <GetLineCoding>
 800989e:	4603      	mov	r3, r0
 80098a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d126      	bne.n	80098f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098ba:	791b      	ldrb	r3, [r3, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d13b      	bne.n	8009938 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d133      	bne.n	8009938 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80098dc:	429a      	cmp	r2, r3
 80098de:	d12b      	bne.n	8009938 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d124      	bne.n	8009938 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f96a 	bl	8009bc8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80098f4:	e020      	b.n	8009938 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d01d      	beq.n	8009938 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2204      	movs	r2, #4
 8009900:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009904:	e018      	b.n	8009938 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f867 	bl	80099da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f8e6 	bl	8009ade <CDC_ProcessReception>
      break;
 8009912:	e014      	b.n	800993e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009914:	2100      	movs	r1, #0
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 f8f8 	bl	800ab0c <USBH_ClrFeature>
 800991c:	4603      	mov	r3, r0
 800991e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009920:	7bbb      	ldrb	r3, [r7, #14]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10a      	bne.n	800993c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800992e:	e005      	b.n	800993c <USBH_CDC_Process+0x120>

    default:
      break;
 8009930:	bf00      	nop
 8009932:	e004      	b.n	800993e <USBH_CDC_Process+0x122>
      break;
 8009934:	bf00      	nop
 8009936:	e002      	b.n	800993e <USBH_CDC_Process+0x122>
      break;
 8009938:	bf00      	nop
 800993a:	e000      	b.n	800993e <USBH_CDC_Process+0x122>
      break;
 800993c:	bf00      	nop

  }

  return status;
 800993e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	22a1      	movs	r2, #161	@ 0xa1
 800996c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2221      	movs	r2, #33	@ 0x21
 8009972:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2207      	movs	r2, #7
 8009984:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2207      	movs	r2, #7
 800998a:	4619      	mov	r1, r3
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f001 fbf1 	bl	800b174 <USBH_CtlReq>
 8009992:	4603      	mov	r3, r0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2221      	movs	r2, #33	@ 0x21
 80099aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2207      	movs	r2, #7
 80099c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2207      	movs	r2, #7
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f001 fbd2 	bl	800b174 <USBH_CtlReq>
 80099d0:	4603      	mov	r3, r0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b086      	sub	sp, #24
 80099de:	af02      	add	r7, sp, #8
 80099e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099ec:	2300      	movs	r3, #0
 80099ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d002      	beq.n	8009a00 <CDC_ProcessTransmission+0x26>
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d023      	beq.n	8009a46 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80099fe:	e06a      	b.n	8009ad6 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	8b12      	ldrh	r2, [r2, #24]
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d90b      	bls.n	8009a24 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	69d9      	ldr	r1, [r3, #28]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	8b1a      	ldrh	r2, [r3, #24]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	7b5b      	ldrb	r3, [r3, #13]
 8009a18:	2001      	movs	r0, #1
 8009a1a:	9000      	str	r0, [sp, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 fe20 	bl	800b662 <USBH_BulkSendData>
 8009a22:	e00b      	b.n	8009a3c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	7b5b      	ldrb	r3, [r3, #13]
 8009a32:	2001      	movs	r0, #1
 8009a34:	9000      	str	r0, [sp, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 fe13 	bl	800b662 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009a44:	e047      	b.n	8009ad6 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	7b5b      	ldrb	r3, [r3, #13]
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f005 f945 	bl	800ecdc <USBH_LL_GetURBState>
 8009a52:	4603      	mov	r3, r0
 8009a54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009a56:	7afb      	ldrb	r3, [r7, #11]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d12e      	bne.n	8009aba <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	8b12      	ldrh	r2, [r2, #24]
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d90e      	bls.n	8009a86 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	8b12      	ldrh	r2, [r2, #24]
 8009a70:	1a9a      	subs	r2, r3, r2
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	8b12      	ldrh	r2, [r2, #24]
 8009a7e:	441a      	add	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	61da      	str	r2, [r3, #28]
 8009a84:	e002      	b.n	8009a8c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d004      	beq.n	8009a9e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009a9c:	e006      	b.n	8009aac <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f87a 	bl	8009ba0 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009aac:	2300      	movs	r3, #0
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2104      	movs	r1, #4
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 feb6 	bl	800a824 <USBH_OS_PutMessage>
      break;
 8009ab8:	e00c      	b.n	8009ad4 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d109      	bne.n	8009ad4 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009ac8:	2300      	movs	r3, #0
 8009aca:	2200      	movs	r2, #0
 8009acc:	2104      	movs	r1, #4
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fea8 	bl	800a824 <USBH_OS_PutMessage>
      break;
 8009ad4:	bf00      	nop
  }
}
 8009ad6:	bf00      	nop
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b086      	sub	sp, #24
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009aec:	69db      	ldr	r3, [r3, #28]
 8009aee:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009af0:	2300      	movs	r3, #0
 8009af2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d002      	beq.n	8009b04 <CDC_ProcessReception+0x26>
 8009afe:	2b04      	cmp	r3, #4
 8009b00:	d00e      	beq.n	8009b20 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8009b02:	e049      	b.n	8009b98 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	6a19      	ldr	r1, [r3, #32]
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	8b5a      	ldrh	r2, [r3, #26]
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	7b1b      	ldrb	r3, [r3, #12]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f001 fdcb 	bl	800b6ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2204      	movs	r2, #4
 8009b1a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009b1e:	e03b      	b.n	8009b98 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	7b1b      	ldrb	r3, [r3, #12]
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f005 f8d8 	bl	800ecdc <USBH_LL_GetURBState>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009b30:	7cfb      	ldrb	r3, [r7, #19]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d12f      	bne.n	8009b96 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	7b1b      	ldrb	r3, [r3, #12]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f005 f84d 	bl	800ebdc <USBH_LL_GetLastXferSize>
 8009b42:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d016      	beq.n	8009b7c <CDC_ProcessReception+0x9e>
 8009b4e:	697b      	ldr	r3, [r7, #20]
 8009b50:	8b5b      	ldrh	r3, [r3, #26]
 8009b52:	461a      	mov	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d110      	bne.n	8009b7c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	1ad2      	subs	r2, r2, r3
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	6a1a      	ldr	r2, [r3, #32]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	441a      	add	r2, r3
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2203      	movs	r2, #3
 8009b76:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8009b7a:	e006      	b.n	8009b8a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f815 	bl	8009bb4 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2104      	movs	r1, #4
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fe47 	bl	800a824 <USBH_OS_PutMessage>
      break;
 8009b96:	bf00      	nop
  }
}
 8009b98:	bf00      	nop
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	4613      	mov	r3, r2
 8009be8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d101      	bne.n	8009bf4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	e044      	b.n	8009c7e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	79fa      	ldrb	r2, [r7, #7]
 8009bf8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f000 f841 	bl	8009c94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d003      	beq.n	8009c40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8009c40:	2200      	movs	r2, #0
 8009c42:	2104      	movs	r1, #4
 8009c44:	2010      	movs	r0, #16
 8009c46:	f001 ff0c 	bl	800ba62 <osMessageQueueNew>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8009c52:	4b0d      	ldr	r3, [pc, #52]	@ (8009c88 <USBH_Init+0xac>)
 8009c54:	4a0d      	ldr	r2, [pc, #52]	@ (8009c8c <USBH_Init+0xb0>)
 8009c56:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8009c58:	4b0b      	ldr	r3, [pc, #44]	@ (8009c88 <USBH_Init+0xac>)
 8009c5a:	2280      	movs	r2, #128	@ 0x80
 8009c5c:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8009c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c88 <USBH_Init+0xac>)
 8009c60:	2218      	movs	r2, #24
 8009c62:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8009c64:	4a08      	ldr	r2, [pc, #32]	@ (8009c88 <USBH_Init+0xac>)
 8009c66:	68f9      	ldr	r1, [r7, #12]
 8009c68:	4809      	ldr	r0, [pc, #36]	@ (8009c90 <USBH_Init+0xb4>)
 8009c6a:	f001 fe4d 	bl	800b908 <osThreadNew>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f004 fefc 	bl	800ea74 <USBH_LL_Init>

  return USBH_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20004a64 	.word	0x20004a64
 8009c8c:	0801d364 	.word	0x0801d364
 8009c90:	0800a86d 	.word	0x0800a86d

08009c94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e009      	b.n	8009cb6 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	33e0      	adds	r3, #224	@ 0xe0
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	2200      	movs	r2, #0
 8009cae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	60fb      	str	r3, [r7, #12]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b0f      	cmp	r3, #15
 8009cba:	d9f2      	bls.n	8009ca2 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	e009      	b.n	8009cd6 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009ccc:	2200      	movs	r2, #0
 8009cce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cdc:	d3f1      	bcc.n	8009cc2 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2240      	movs	r2, #64	@ 0x40
 8009d02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	331c      	adds	r3, #28
 8009d2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d32:	2100      	movs	r1, #0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f012 fb1d 	bl	801c374 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009d40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d44:	2100      	movs	r1, #0
 8009d46:	4618      	mov	r0, r3
 8009d48:	f012 fb14 	bl	801c374 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009d52:	2212      	movs	r2, #18
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f012 fb0c 	bl	801c374 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009d62:	223e      	movs	r2, #62	@ 0x3e
 8009d64:	2100      	movs	r1, #0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f012 fb04 	bl	801c374 <memset>

  return USBH_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d016      	beq.n	8009db8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10e      	bne.n	8009db2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009d9a:	1c59      	adds	r1, r3, #1
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	33de      	adds	r3, #222	@ 0xde
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
 8009db0:	e004      	b.n	8009dbc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009db2:	2302      	movs	r3, #2
 8009db4:	73fb      	strb	r3, [r7, #15]
 8009db6:	e001      	b.n	8009dbc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009db8:	2302      	movs	r3, #2
 8009dba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009de0:	78fa      	ldrb	r2, [r7, #3]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d204      	bcs.n	8009df0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	78fa      	ldrb	r2, [r7, #3]
 8009dea:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009dee:	e001      	b.n	8009df4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009df0:	2302      	movs	r3, #2
 8009df2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009e02:	b480      	push	{r7}
 8009e04:	b087      	sub	sp, #28
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	461a      	mov	r2, r3
 8009e10:	4603      	mov	r3, r0
 8009e12:	70fb      	strb	r3, [r7, #3]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70bb      	strb	r3, [r7, #2]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009e20:	2300      	movs	r3, #0
 8009e22:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009e2a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e2c:	e025      	b.n	8009e7a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
 8009e30:	221a      	movs	r2, #26
 8009e32:	fb02 f303 	mul.w	r3, r2, r3
 8009e36:	3308      	adds	r3, #8
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	3302      	adds	r3, #2
 8009e3e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	795b      	ldrb	r3, [r3, #5]
 8009e44:	78fa      	ldrb	r2, [r7, #3]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d002      	beq.n	8009e50 <USBH_FindInterface+0x4e>
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	2bff      	cmp	r3, #255	@ 0xff
 8009e4e:	d111      	bne.n	8009e74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009e54:	78ba      	ldrb	r2, [r7, #2]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d002      	beq.n	8009e60 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e5a:	78bb      	ldrb	r3, [r7, #2]
 8009e5c:	2bff      	cmp	r3, #255	@ 0xff
 8009e5e:	d109      	bne.n	8009e74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e64:	787a      	ldrb	r2, [r7, #1]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d002      	beq.n	8009e70 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e6a:	787b      	ldrb	r3, [r7, #1]
 8009e6c:	2bff      	cmp	r3, #255	@ 0xff
 8009e6e:	d101      	bne.n	8009e74 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	e006      	b.n	8009e82 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	3301      	adds	r3, #1
 8009e78:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d9d6      	bls.n	8009e2e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009e80:	23ff      	movs	r3, #255	@ 0xff
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	371c      	adds	r7, #28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b082      	sub	sp, #8
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f004 fe28 	bl	800eaec <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f004 ff2f 	bl	800ed02 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3708      	adds	r7, #8
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af04      	add	r7, sp, #16
 8009eb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d102      	bne.n	8009ed2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2203      	movs	r2, #3
 8009ed0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b0b      	cmp	r3, #11
 8009eda:	f200 81f5 	bhi.w	800a2c8 <USBH_Process+0x418>
 8009ede:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee4 <USBH_Process+0x34>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009f15 	.word	0x08009f15
 8009ee8:	08009f53 	.word	0x08009f53
 8009eec:	08009fc9 	.word	0x08009fc9
 8009ef0:	0800a257 	.word	0x0800a257
 8009ef4:	0800a2c9 	.word	0x0800a2c9
 8009ef8:	0800a075 	.word	0x0800a075
 8009efc:	0800a1f1 	.word	0x0800a1f1
 8009f00:	0800a0b7 	.word	0x0800a0b7
 8009f04:	0800a0e3 	.word	0x0800a0e3
 8009f08:	0800a10b 	.word	0x0800a10b
 8009f0c:	0800a159 	.word	0x0800a159
 8009f10:	0800a23f 	.word	0x0800a23f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 81d5 	beq.w	800a2cc <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009f28:	20c8      	movs	r0, #200	@ 0xc8
 8009f2a:	f004 ff34 	bl	800ed96 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f004 fe39 	bl	800eba6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8009f44:	2300      	movs	r3, #0
 8009f46:	2200      	movs	r2, #0
 8009f48:	2101      	movs	r1, #1
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fc6a 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8009f50:	e1bc      	b.n	800a2cc <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d107      	bne.n	8009f6e <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2202      	movs	r2, #2
 8009f6a:	701a      	strb	r2, [r3, #0]
 8009f6c:	e025      	b.n	8009fba <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009f74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f78:	d914      	bls.n	8009fa4 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009f80:	3301      	adds	r3, #1
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d903      	bls.n	8009f9c <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	220d      	movs	r2, #13
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	e00e      	b.n	8009fba <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	e00a      	b.n	8009fba <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009faa:	f103 020a 	add.w	r2, r3, #10
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009fb4:	200a      	movs	r0, #10
 8009fb6:	f004 feee 	bl	800ed96 <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fc2f 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8009fc6:	e188      	b.n	800a2da <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d005      	beq.n	8009fde <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009fd8:	2104      	movs	r1, #4
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009fde:	2064      	movs	r0, #100	@ 0x64
 8009fe0:	f004 fed9 	bl	800ed96 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f004 fdb7 	bl	800eb58 <USBH_LL_GetSpeed>
 8009fea:	4603      	mov	r3, r0
 8009fec:	461a      	mov	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2205      	movs	r2, #5
 8009ff8:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 fba2 	bl	800b746 <USBH_AllocPipe>
 800a002:	4603      	mov	r3, r0
 800a004:	461a      	mov	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a00a:	2180      	movs	r1, #128	@ 0x80
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f001 fb9a 	bl	800b746 <USBH_AllocPipe>
 800a012:	4603      	mov	r3, r0
 800a014:	461a      	mov	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	7919      	ldrb	r1, [r3, #4]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a02e:	9202      	str	r2, [sp, #8]
 800a030:	2200      	movs	r2, #0
 800a032:	9201      	str	r2, [sp, #4]
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	4603      	mov	r3, r0
 800a038:	2280      	movs	r2, #128	@ 0x80
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f001 fb54 	bl	800b6e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7959      	ldrb	r1, [r3, #5]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a054:	9202      	str	r2, [sp, #8]
 800a056:	2200      	movs	r2, #0
 800a058:	9201      	str	r2, [sp, #4]
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	4603      	mov	r3, r0
 800a05e:	2200      	movs	r2, #0
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 fb41 	bl	800b6e8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a066:	2300      	movs	r3, #0
 800a068:	2200      	movs	r2, #0
 800a06a:	2101      	movs	r1, #1
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fbd9 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a072:	e132      	b.n	800a2da <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f935 	bl	800a2e4 <USBH_HandleEnum>
 800a07a:	4603      	mov	r3, r0
 800a07c:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a07e:	7bbb      	ldrb	r3, [r7, #14]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	f040 8124 	bne.w	800a2d0 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a096:	2b01      	cmp	r3, #1
 800a098:	d103      	bne.n	800a0a2 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2208      	movs	r2, #8
 800a09e:	701a      	strb	r2, [r3, #0]
 800a0a0:	e002      	b.n	800a0a8 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2207      	movs	r2, #7
 800a0a6:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2105      	movs	r1, #5
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fbb8 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a0b4:	e10c      	b.n	800a2d0 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f000 8109 	beq.w	800a2d4 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2208      	movs	r2, #8
 800a0d2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2105      	movs	r1, #5
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fba2 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a0e0:	e0f8      	b.n	800a2d4 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fcc7 	bl	800aa7e <USBH_SetCfg>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d102      	bne.n	800a0fc <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2209      	movs	r2, #9
 800a0fa:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2200      	movs	r2, #0
 800a100:	2101      	movs	r1, #1
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fb8e 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a108:	e0e7      	b.n	800a2da <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a110:	f003 0320 	and.w	r3, r3, #32
 800a114:	2b00      	cmp	r3, #0
 800a116:	d015      	beq.n	800a144 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a118:	2101      	movs	r1, #1
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fcd2 	bl	800aac4 <USBH_SetFeature>
 800a120:	4603      	mov	r3, r0
 800a122:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a124:	7bbb      	ldrb	r3, [r7, #14]
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d103      	bne.n	800a134 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	220a      	movs	r2, #10
 800a130:	701a      	strb	r2, [r3, #0]
 800a132:	e00a      	b.n	800a14a <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a134:	7bbb      	ldrb	r3, [r7, #14]
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d106      	bne.n	800a14a <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	220a      	movs	r2, #10
 800a140:	701a      	strb	r2, [r3, #0]
 800a142:	e002      	b.n	800a14a <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	220a      	movs	r2, #10
 800a148:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a14a:	2300      	movs	r3, #0
 800a14c:	2200      	movs	r2, #0
 800a14e:	2101      	movs	r1, #1
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fb67 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a156:	e0c0      	b.n	800a2da <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d03f      	beq.n	800a1e2 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
 800a16e:	e016      	b.n	800a19e <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a170:	7bfa      	ldrb	r2, [r7, #15]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	32de      	adds	r2, #222	@ 0xde
 800a176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17a:	791a      	ldrb	r2, [r3, #4]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a182:	429a      	cmp	r2, r3
 800a184:	d108      	bne.n	800a198 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a186:	7bfa      	ldrb	r2, [r7, #15]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	32de      	adds	r2, #222	@ 0xde
 800a18c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a196:	e005      	b.n	800a1a4 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a198:	7bfb      	ldrb	r3, [r7, #15]
 800a19a:	3301      	adds	r3, #1
 800a19c:	73fb      	strb	r3, [r7, #15]
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d0e5      	beq.n	800a170 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d016      	beq.n	800a1dc <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	4798      	blx	r3
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d109      	bne.n	800a1d4 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2206      	movs	r2, #6
 800a1c4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a1cc:	2103      	movs	r1, #3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	4798      	blx	r3
 800a1d2:	e006      	b.n	800a1e2 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	220d      	movs	r2, #13
 800a1d8:	701a      	strb	r2, [r3, #0]
 800a1da:	e002      	b.n	800a1e2 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	220d      	movs	r2, #13
 800a1e0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2105      	movs	r1, #5
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fb1b 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a1ee:	e074      	b.n	800a2da <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d017      	beq.n	800a22a <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	4798      	blx	r3
 800a206:	4603      	mov	r3, r0
 800a208:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a20a:	7bbb      	ldrb	r3, [r7, #14]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d103      	bne.n	800a21a <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	220b      	movs	r2, #11
 800a216:	701a      	strb	r2, [r3, #0]
 800a218:	e00a      	b.n	800a230 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800a21a:	7bbb      	ldrb	r3, [r7, #14]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d106      	bne.n	800a230 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	220d      	movs	r2, #13
 800a226:	701a      	strb	r2, [r3, #0]
 800a228:	e002      	b.n	800a230 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	220d      	movs	r2, #13
 800a22e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a230:	2300      	movs	r3, #0
 800a232:	2200      	movs	r2, #0
 800a234:	2105      	movs	r1, #5
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 faf4 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a23c:	e04d      	b.n	800a2da <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d047      	beq.n	800a2d8 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	4798      	blx	r3
      }
      break;
 800a254:	e040      	b.n	800a2d8 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7ff fd18 	bl	8009c94 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d009      	beq.n	800a282 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d005      	beq.n	800a298 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a292:	2105      	movs	r1, #5
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d107      	bne.n	800a2b4 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff fdee 	bl	8009e8e <USBH_Start>
 800a2b2:	e002      	b.n	800a2ba <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f004 fc19 	bl	800eaec <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2101      	movs	r1, #1
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 faaf 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a2c6:	e008      	b.n	800a2da <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800a2c8:	bf00      	nop
 800a2ca:	e006      	b.n	800a2da <USBH_Process+0x42a>
      break;
 800a2cc:	bf00      	nop
 800a2ce:	e004      	b.n	800a2da <USBH_Process+0x42a>
      break;
 800a2d0:	bf00      	nop
 800a2d2:	e002      	b.n	800a2da <USBH_Process+0x42a>
    break;
 800a2d4:	bf00      	nop
 800a2d6:	e000      	b.n	800a2da <USBH_Process+0x42a>
      break;
 800a2d8:	bf00      	nop
  }
  return USBH_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af04      	add	r7, sp, #16
 800a2ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	785b      	ldrb	r3, [r3, #1]
 800a2f8:	2b07      	cmp	r3, #7
 800a2fa:	f200 81db 	bhi.w	800a6b4 <USBH_HandleEnum+0x3d0>
 800a2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a304 <USBH_HandleEnum+0x20>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a325 	.word	0x0800a325
 800a308:	0800a3df 	.word	0x0800a3df
 800a30c:	0800a449 	.word	0x0800a449
 800a310:	0800a4d3 	.word	0x0800a4d3
 800a314:	0800a53d 	.word	0x0800a53d
 800a318:	0800a5ad 	.word	0x0800a5ad
 800a31c:	0800a617 	.word	0x0800a617
 800a320:	0800a675 	.word	0x0800a675
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a324:	2108      	movs	r1, #8
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fac6 	bl	800a8b8 <USBH_Get_DevDesc>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a330:	7bbb      	ldrb	r3, [r7, #14]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d12e      	bne.n	800a394 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	7919      	ldrb	r1, [r3, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a35a:	9202      	str	r2, [sp, #8]
 800a35c:	2200      	movs	r2, #0
 800a35e:	9201      	str	r2, [sp, #4]
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	4603      	mov	r3, r0
 800a364:	2280      	movs	r2, #128	@ 0x80
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 f9be 	bl	800b6e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	7959      	ldrb	r1, [r3, #5]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a380:	9202      	str	r2, [sp, #8]
 800a382:	2200      	movs	r2, #0
 800a384:	9201      	str	r2, [sp, #4]
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	4603      	mov	r3, r0
 800a38a:	2200      	movs	r2, #0
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f001 f9ab 	bl	800b6e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a392:	e191      	b.n	800a6b8 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	2b03      	cmp	r3, #3
 800a398:	f040 818e 	bne.w	800a6b8 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	d903      	bls.n	800a3be <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	220d      	movs	r2, #13
 800a3ba:	701a      	strb	r2, [r3, #0]
      break;
 800a3bc:	e17c      	b.n	800a6b8 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	795b      	ldrb	r3, [r3, #5]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 f9df 	bl	800b788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	791b      	ldrb	r3, [r3, #4]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f001 f9d9 	bl	800b788 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	701a      	strb	r2, [r3, #0]
      break;
 800a3dc:	e16c      	b.n	800a6b8 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a3de:	2112      	movs	r1, #18
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fa69 	bl	800a8b8 <USBH_Get_DevDesc>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3ea:	7bbb      	ldrb	r3, [r7, #14]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d103      	bne.n	800a3f8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3f6:	e161      	b.n	800a6bc <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3f8:	7bbb      	ldrb	r3, [r7, #14]
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	f040 815e 	bne.w	800a6bc <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a406:	3301      	adds	r3, #1
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a416:	2b03      	cmp	r3, #3
 800a418:	d903      	bls.n	800a422 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	220d      	movs	r2, #13
 800a41e:	701a      	strb	r2, [r3, #0]
      break;
 800a420:	e14c      	b.n	800a6bc <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	795b      	ldrb	r3, [r3, #5]
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f001 f9ad 	bl	800b788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	791b      	ldrb	r3, [r3, #4]
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 f9a7 	bl	800b788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	701a      	strb	r2, [r3, #0]
      break;
 800a446:	e139      	b.n	800a6bc <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a448:	2101      	movs	r1, #1
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 faf3 	bl	800aa36 <USBH_SetAddress>
 800a450:	4603      	mov	r3, r0
 800a452:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d130      	bne.n	800a4bc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a45a:	2002      	movs	r0, #2
 800a45c:	f004 fc9b 	bl	800ed96 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2203      	movs	r2, #3
 800a46c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	7919      	ldrb	r1, [r3, #4]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a482:	9202      	str	r2, [sp, #8]
 800a484:	2200      	movs	r2, #0
 800a486:	9201      	str	r2, [sp, #4]
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	4603      	mov	r3, r0
 800a48c:	2280      	movs	r2, #128	@ 0x80
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 f92a 	bl	800b6e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	7959      	ldrb	r1, [r3, #5]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4a8:	9202      	str	r2, [sp, #8]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	9201      	str	r2, [sp, #4]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 f917 	bl	800b6e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a4ba:	e101      	b.n	800a6c0 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	f040 80fe 	bne.w	800a6c0 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	220d      	movs	r2, #13
 800a4c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	705a      	strb	r2, [r3, #1]
      break;
 800a4d0:	e0f6      	b.n	800a6c0 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a4d2:	2109      	movs	r1, #9
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fa1b 	bl	800a910 <USBH_Get_CfgDesc>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d103      	bne.n	800a4ec <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2204      	movs	r2, #4
 800a4e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a4ea:	e0eb      	b.n	800a6c4 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4ec:	7bbb      	ldrb	r3, [r7, #14]
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	f040 80e8 	bne.w	800a6c4 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a50a:	2b03      	cmp	r3, #3
 800a50c:	d903      	bls.n	800a516 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	220d      	movs	r2, #13
 800a512:	701a      	strb	r2, [r3, #0]
      break;
 800a514:	e0d6      	b.n	800a6c4 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	795b      	ldrb	r3, [r3, #5]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 f933 	bl	800b788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	791b      	ldrb	r3, [r3, #4]
 800a526:	4619      	mov	r1, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f001 f92d 	bl	800b788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	701a      	strb	r2, [r3, #0]
      break;
 800a53a:	e0c3      	b.n	800a6c4 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 f9e3 	bl	800a910 <USBH_Get_CfgDesc>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d103      	bne.n	800a55c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2205      	movs	r2, #5
 800a558:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a55a:	e0b5      	b.n	800a6c8 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
 800a55e:	2b03      	cmp	r3, #3
 800a560:	f040 80b2 	bne.w	800a6c8 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a56a:	3301      	adds	r3, #1
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a57a:	2b03      	cmp	r3, #3
 800a57c:	d903      	bls.n	800a586 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	220d      	movs	r2, #13
 800a582:	701a      	strb	r2, [r3, #0]
      break;
 800a584:	e0a0      	b.n	800a6c8 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	795b      	ldrb	r3, [r3, #5]
 800a58a:	4619      	mov	r1, r3
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f001 f8fb 	bl	800b788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	791b      	ldrb	r3, [r3, #4]
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f001 f8f5 	bl	800b788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	701a      	strb	r2, [r3, #0]
      break;
 800a5aa:	e08d      	b.n	800a6c8 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d025      	beq.n	800a602 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a5c2:	23ff      	movs	r3, #255	@ 0xff
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f9cd 	bl	800a964 <USBH_Get_StringDesc>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d109      	bne.n	800a5e8 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2206      	movs	r2, #6
 800a5d8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2105      	movs	r1, #5
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 f91f 	bl	800a824 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a5e6:	e071      	b.n	800a6cc <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	2b03      	cmp	r3, #3
 800a5ec:	d16e      	bne.n	800a6cc <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2206      	movs	r2, #6
 800a5f2:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	2105      	movs	r1, #5
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f912 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800a600:	e064      	b.n	800a6cc <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2206      	movs	r2, #6
 800a606:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a608:	2300      	movs	r3, #0
 800a60a:	2200      	movs	r2, #0
 800a60c:	2105      	movs	r1, #5
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f908 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800a614:	e05a      	b.n	800a6cc <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01f      	beq.n	800a660 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a62c:	23ff      	movs	r3, #255	@ 0xff
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f998 	bl	800a964 <USBH_Get_StringDesc>
 800a634:	4603      	mov	r3, r0
 800a636:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d103      	bne.n	800a646 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2207      	movs	r2, #7
 800a642:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a644:	e044      	b.n	800a6d0 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b03      	cmp	r3, #3
 800a64a:	d141      	bne.n	800a6d0 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2207      	movs	r2, #7
 800a650:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a652:	2300      	movs	r3, #0
 800a654:	2200      	movs	r2, #0
 800a656:	2105      	movs	r1, #5
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f8e3 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800a65e:	e037      	b.n	800a6d0 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2207      	movs	r2, #7
 800a664:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a666:	2300      	movs	r3, #0
 800a668:	2200      	movs	r2, #0
 800a66a:	2105      	movs	r1, #5
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 f8d9 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800a672:	e02d      	b.n	800a6d0 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d017      	beq.n	800a6ae <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a68a:	23ff      	movs	r3, #255	@ 0xff
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f969 	bl	800a964 <USBH_Get_StringDesc>
 800a692:	4603      	mov	r3, r0
 800a694:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d102      	bne.n	800a6a2 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a69c:	2300      	movs	r3, #0
 800a69e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a6a0:	e018      	b.n	800a6d4 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d115      	bne.n	800a6d4 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a6ac:	e012      	b.n	800a6d4 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b2:	e00f      	b.n	800a6d4 <USBH_HandleEnum+0x3f0>

    default:
      break;
 800a6b4:	bf00      	nop
 800a6b6:	e00e      	b.n	800a6d6 <USBH_HandleEnum+0x3f2>
      break;
 800a6b8:	bf00      	nop
 800a6ba:	e00c      	b.n	800a6d6 <USBH_HandleEnum+0x3f2>
      break;
 800a6bc:	bf00      	nop
 800a6be:	e00a      	b.n	800a6d6 <USBH_HandleEnum+0x3f2>
      break;
 800a6c0:	bf00      	nop
 800a6c2:	e008      	b.n	800a6d6 <USBH_HandleEnum+0x3f2>
      break;
 800a6c4:	bf00      	nop
 800a6c6:	e006      	b.n	800a6d6 <USBH_HandleEnum+0x3f2>
      break;
 800a6c8:	bf00      	nop
 800a6ca:	e004      	b.n	800a6d6 <USBH_HandleEnum+0x3f2>
      break;
 800a6cc:	bf00      	nop
 800a6ce:	e002      	b.n	800a6d6 <USBH_HandleEnum+0x3f2>
      break;
 800a6d0:	bf00      	nop
 800a6d2:	e000      	b.n	800a6d6 <USBH_HandleEnum+0x3f2>
      break;
 800a6d4:	bf00      	nop
  }
  return Status;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b082      	sub	sp, #8
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f804 	bl	800a722 <USBH_HandleSof>
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b0b      	cmp	r3, #11
 800a732:	d10a      	bne.n	800a74a <USBH_HandleSof+0x28>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d005      	beq.n	800a74a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	4798      	blx	r3
  }
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b082      	sub	sp, #8
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2201      	movs	r2, #1
 800a75e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a762:	2300      	movs	r3, #0
 800a764:	2200      	movs	r2, #0
 800a766:	2101      	movs	r1, #1
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f85b 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800a76e:	bf00      	nop
}
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a776:	b480      	push	{r7}
 800a778:	b083      	sub	sp, #12
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800a78e:	bf00      	nop
}
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2101      	movs	r1, #1
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f82f 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f004 f996 	bl	800eb22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	791b      	ldrb	r3, [r3, #4]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 ffc3 	bl	800b788 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	795b      	ldrb	r3, [r3, #5]
 800a806:	4619      	mov	r1, r3
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 ffbd 	bl	800b788 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a80e:	2300      	movs	r3, #0
 800a810:	2200      	movs	r2, #0
 800a812:	2101      	movs	r1, #1
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f805 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	607a      	str	r2, [r7, #4]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	460b      	mov	r3, r1
 800a832:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800a834:	7afa      	ldrb	r2, [r7, #11]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800a842:	4618      	mov	r0, r3
 800a844:	f001 fa3e 	bl	800bcc4 <osMessageQueueGetSpace>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00a      	beq.n	800a864 <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f001 f972 	bl	800bb48 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800a864:	bf00      	nop
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a880:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a884:	2200      	movs	r2, #0
 800a886:	f001 f9bf 	bl	800bc08 <osMessageQueueGet>
 800a88a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1f0      	bne.n	800a874 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f7ff fb0c 	bl	8009eb0 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800a898:	e7ec      	b.n	800a874 <USBH_Process_OS+0x8>

0800a89a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff ffbb 	bl	800a824 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af02      	add	r7, sp, #8
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a8c4:	887b      	ldrh	r3, [r7, #2]
 800a8c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8ca:	d901      	bls.n	800a8d0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e01b      	b.n	800a908 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a8d6:	887b      	ldrh	r3, [r7, #2]
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f872 	bl	800a9cc <USBH_GetDescriptor>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d109      	bne.n	800a906 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a8f8:	887a      	ldrh	r2, [r7, #2]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 f929 	bl	800ab54 <USBH_ParseDevDesc>
 800a902:	4603      	mov	r3, r0
 800a904:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a906:	7bfb      	ldrb	r3, [r7, #15]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af02      	add	r7, sp, #8
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	331c      	adds	r3, #28
 800a920:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a922:	887b      	ldrh	r3, [r7, #2]
 800a924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a928:	d901      	bls.n	800a92e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e016      	b.n	800a95c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a92e:	887b      	ldrh	r3, [r7, #2]
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a938:	2100      	movs	r1, #0
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f846 	bl	800a9cc <USBH_GetDescriptor>
 800a940:	4603      	mov	r3, r0
 800a942:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d107      	bne.n	800a95a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a94a:	887b      	ldrh	r3, [r7, #2]
 800a94c:	461a      	mov	r2, r3
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f9af 	bl	800acb4 <USBH_ParseCfgDesc>
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af02      	add	r7, sp, #8
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	607a      	str	r2, [r7, #4]
 800a96e:	461a      	mov	r2, r3
 800a970:	460b      	mov	r3, r1
 800a972:	72fb      	strb	r3, [r7, #11]
 800a974:	4613      	mov	r3, r2
 800a976:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a978:	893b      	ldrh	r3, [r7, #8]
 800a97a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a97e:	d802      	bhi.n	800a986 <USBH_Get_StringDesc+0x22>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a986:	2303      	movs	r3, #3
 800a988:	e01c      	b.n	800a9c4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a98a:	7afb      	ldrb	r3, [r7, #11]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a992:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a99a:	893b      	ldrh	r3, [r7, #8]
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	460b      	mov	r3, r1
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f000 f812 	bl	800a9cc <USBH_GetDescriptor>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d107      	bne.n	800a9c2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a9b8:	893a      	ldrh	r2, [r7, #8]
 800a9ba:	6879      	ldr	r1, [r7, #4]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fb8c 	bl	800b0da <USBH_ParseStringDesc>
  }

  return status;
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	607b      	str	r3, [r7, #4]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	72fb      	strb	r3, [r7, #11]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	789b      	ldrb	r3, [r3, #2]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d11c      	bne.n	800aa20 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2206      	movs	r2, #6
 800a9f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	893a      	ldrh	r2, [r7, #8]
 800a9fc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a9fe:	893b      	ldrh	r3, [r7, #8]
 800aa00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aa04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa08:	d104      	bne.n	800aa14 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f240 4209 	movw	r2, #1033	@ 0x409
 800aa10:	829a      	strh	r2, [r3, #20]
 800aa12:	e002      	b.n	800aa1a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	8b3a      	ldrh	r2, [r7, #24]
 800aa1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aa20:	8b3b      	ldrh	r3, [r7, #24]
 800aa22:	461a      	mov	r2, r3
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f000 fba4 	bl	800b174 <USBH_CtlReq>
 800aa2c:	4603      	mov	r3, r0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b082      	sub	sp, #8
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	460b      	mov	r3, r1
 800aa40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	789b      	ldrb	r3, [r3, #2]
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d10f      	bne.n	800aa6a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2205      	movs	r2, #5
 800aa54:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fb80 	bl	800b174 <USBH_CtlReq>
 800aa74:	4603      	mov	r3, r0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b082      	sub	sp, #8
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	460b      	mov	r3, r1
 800aa88:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	789b      	ldrb	r3, [r3, #2]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d10e      	bne.n	800aab0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2209      	movs	r2, #9
 800aa9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	887a      	ldrh	r2, [r7, #2]
 800aaa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aab0:	2200      	movs	r2, #0
 800aab2:	2100      	movs	r1, #0
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 fb5d 	bl	800b174 <USBH_CtlReq>
 800aaba:	4603      	mov	r3, r0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3708      	adds	r7, #8
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	789b      	ldrb	r3, [r3, #2]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d10f      	bne.n	800aaf8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2203      	movs	r2, #3
 800aae2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800aae4:	78fb      	ldrb	r3, [r7, #3]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aaf8:	2200      	movs	r2, #0
 800aafa:	2100      	movs	r1, #0
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fb39 	bl	800b174 <USBH_CtlReq>
 800ab02:	4603      	mov	r3, r0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	789b      	ldrb	r3, [r3, #2]
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d10f      	bne.n	800ab40 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab40:	2200      	movs	r2, #0
 800ab42:	2100      	movs	r1, #0
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fb15 	bl	800b174 <USBH_CtlReq>
 800ab4a:	4603      	mov	r3, r0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ab68:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d101      	bne.n	800ab78 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800ab74:	2302      	movs	r3, #2
 800ab76:	e094      	b.n	800aca2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	781a      	ldrb	r2, [r3, #0]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	785a      	ldrb	r2, [r3, #1]
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	3302      	adds	r3, #2
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	3303      	adds	r3, #3
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	021b      	lsls	r3, r3, #8
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	791a      	ldrb	r2, [r3, #4]
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	795a      	ldrb	r2, [r3, #5]
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	799a      	ldrb	r2, [r3, #6]
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	79da      	ldrb	r2, [r3, #7]
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d004      	beq.n	800abd6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d11b      	bne.n	800ac0e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	79db      	ldrb	r3, [r3, #7]
 800abda:	2b20      	cmp	r3, #32
 800abdc:	dc0f      	bgt.n	800abfe <USBH_ParseDevDesc+0xaa>
 800abde:	2b08      	cmp	r3, #8
 800abe0:	db0f      	blt.n	800ac02 <USBH_ParseDevDesc+0xae>
 800abe2:	3b08      	subs	r3, #8
 800abe4:	4a32      	ldr	r2, [pc, #200]	@ (800acb0 <USBH_ParseDevDesc+0x15c>)
 800abe6:	fa22 f303 	lsr.w	r3, r2, r3
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	bf14      	ite	ne
 800abf2:	2301      	movne	r3, #1
 800abf4:	2300      	moveq	r3, #0
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <USBH_ParseDevDesc+0xb6>
 800abfc:	e001      	b.n	800ac02 <USBH_ParseDevDesc+0xae>
 800abfe:	2b40      	cmp	r3, #64	@ 0x40
 800ac00:	d003      	beq.n	800ac0a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2208      	movs	r2, #8
 800ac06:	71da      	strb	r2, [r3, #7]
        break;
 800ac08:	e000      	b.n	800ac0c <USBH_ParseDevDesc+0xb8>
        break;
 800ac0a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ac0c:	e00e      	b.n	800ac2c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d107      	bne.n	800ac28 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	79db      	ldrb	r3, [r3, #7]
 800ac1c:	2b08      	cmp	r3, #8
 800ac1e:	d005      	beq.n	800ac2c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	2208      	movs	r2, #8
 800ac24:	71da      	strb	r2, [r3, #7]
 800ac26:	e001      	b.n	800ac2c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ac2c:	88fb      	ldrh	r3, [r7, #6]
 800ac2e:	2b08      	cmp	r3, #8
 800ac30:	d936      	bls.n	800aca0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	3308      	adds	r3, #8
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	3309      	adds	r3, #9
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	021b      	lsls	r3, r3, #8
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	4313      	orrs	r3, r2
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	330a      	adds	r3, #10
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	461a      	mov	r2, r3
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	330b      	adds	r3, #11
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	330c      	adds	r3, #12
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	330d      	adds	r3, #13
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	7b9a      	ldrb	r2, [r3, #14]
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	7bda      	ldrb	r2, [r3, #15]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	7c1a      	ldrb	r2, [r3, #16]
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	7c5a      	ldrb	r2, [r3, #17]
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	371c      	adds	r7, #28
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	01000101 	.word	0x01000101

0800acb4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08c      	sub	sp, #48	@ 0x30
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4613      	mov	r3, r2
 800acc0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800acc8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d101      	bne.n	800ace6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ace2:	2302      	movs	r3, #2
 800ace4:	e0de      	b.n	800aea4 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800acea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b09      	cmp	r3, #9
 800acf0:	d002      	beq.n	800acf8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800acf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf4:	2209      	movs	r2, #9
 800acf6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	781a      	ldrb	r2, [r3, #0]
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	785a      	ldrb	r2, [r3, #1]
 800ad04:	6a3b      	ldr	r3, [r7, #32]
 800ad06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	3302      	adds	r3, #2
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	3303      	adds	r3, #3
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	021b      	lsls	r3, r3, #8
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad22:	bf28      	it	cs
 800ad24:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	791a      	ldrb	r2, [r3, #4]
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	795a      	ldrb	r2, [r3, #5]
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	799a      	ldrb	r2, [r3, #6]
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	79da      	ldrb	r2, [r3, #7]
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	7a1a      	ldrb	r2, [r3, #8]
 800ad52:	6a3b      	ldr	r3, [r7, #32]
 800ad54:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ad56:	88fb      	ldrh	r3, [r7, #6]
 800ad58:	2b09      	cmp	r3, #9
 800ad5a:	f240 80a1 	bls.w	800aea0 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800ad5e:	2309      	movs	r3, #9
 800ad60:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ad66:	e085      	b.n	800ae74 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ad68:	f107 0316 	add.w	r3, r7, #22
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad70:	f000 f9e6 	bl	800b140 <USBH_GetNextDesc>
 800ad74:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b04      	cmp	r3, #4
 800ad7c:	d17a      	bne.n	800ae74 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ad7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b09      	cmp	r3, #9
 800ad84:	d002      	beq.n	800ad8c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ad86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad88:	2209      	movs	r2, #9
 800ad8a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ad8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad90:	221a      	movs	r2, #26
 800ad92:	fb02 f303 	mul.w	r3, r2, r3
 800ad96:	3308      	adds	r3, #8
 800ad98:	6a3a      	ldr	r2, [r7, #32]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	3302      	adds	r3, #2
 800ad9e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ada0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ada2:	69f8      	ldr	r0, [r7, #28]
 800ada4:	f000 f882 	bl	800aeac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ada8:	2300      	movs	r3, #0
 800adaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800adb2:	e043      	b.n	800ae3c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800adb4:	f107 0316 	add.w	r3, r7, #22
 800adb8:	4619      	mov	r1, r3
 800adba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adbc:	f000 f9c0 	bl	800b140 <USBH_GetNextDesc>
 800adc0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	785b      	ldrb	r3, [r3, #1]
 800adc6:	2b05      	cmp	r3, #5
 800adc8:	d138      	bne.n	800ae3c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	795b      	ldrb	r3, [r3, #5]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d113      	bne.n	800adfa <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800add6:	2b02      	cmp	r3, #2
 800add8:	d003      	beq.n	800ade2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	799b      	ldrb	r3, [r3, #6]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d10b      	bne.n	800adfa <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	79db      	ldrb	r3, [r3, #7]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10b      	bne.n	800ae02 <USBH_ParseCfgDesc+0x14e>
 800adea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b09      	cmp	r3, #9
 800adf0:	d007      	beq.n	800ae02 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf4:	2209      	movs	r2, #9
 800adf6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800adf8:	e003      	b.n	800ae02 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800adfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfc:	2207      	movs	r2, #7
 800adfe:	701a      	strb	r2, [r3, #0]
 800ae00:	e000      	b.n	800ae04 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae02:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ae04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae08:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ae0c:	3201      	adds	r2, #1
 800ae0e:	00d2      	lsls	r2, r2, #3
 800ae10:	211a      	movs	r1, #26
 800ae12:	fb01 f303 	mul.w	r3, r1, r3
 800ae16:	4413      	add	r3, r2
 800ae18:	3308      	adds	r3, #8
 800ae1a:	6a3a      	ldr	r2, [r7, #32]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	3304      	adds	r3, #4
 800ae20:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ae22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae24:	69b9      	ldr	r1, [r7, #24]
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 f86f 	bl	800af0a <USBH_ParseEPDesc>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ae32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae36:	3301      	adds	r3, #1
 800ae38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d80a      	bhi.n	800ae5a <USBH_ParseCfgDesc+0x1a6>
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	791b      	ldrb	r3, [r3, #4]
 800ae48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d204      	bcs.n	800ae5a <USBH_ParseCfgDesc+0x1a6>
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	885a      	ldrh	r2, [r3, #2]
 800ae54:	8afb      	ldrh	r3, [r7, #22]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d8ac      	bhi.n	800adb4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	791b      	ldrb	r3, [r3, #4]
 800ae5e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d201      	bcs.n	800ae6a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800ae66:	2303      	movs	r3, #3
 800ae68:	e01c      	b.n	800aea4 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800ae6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae6e:	3301      	adds	r3, #1
 800ae70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d805      	bhi.n	800ae88 <USBH_ParseCfgDesc+0x1d4>
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	885a      	ldrh	r2, [r3, #2]
 800ae80:	8afb      	ldrh	r3, [r7, #22]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	f63f af70 	bhi.w	800ad68 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	791b      	ldrb	r3, [r3, #4]
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	bf28      	it	cs
 800ae90:	2302      	movcs	r3, #2
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d201      	bcs.n	800aea0 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e001      	b.n	800aea4 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800aea0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3730      	adds	r7, #48	@ 0x30
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781a      	ldrb	r2, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	785a      	ldrb	r2, [r3, #1]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	789a      	ldrb	r2, [r3, #2]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	78da      	ldrb	r2, [r3, #3]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	791a      	ldrb	r2, [r3, #4]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	795a      	ldrb	r2, [r3, #5]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	799a      	ldrb	r2, [r3, #6]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	79da      	ldrb	r2, [r3, #7]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	7a1a      	ldrb	r2, [r3, #8]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	721a      	strb	r2, [r3, #8]
}
 800aefe:	bf00      	nop
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr

0800af0a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800af0a:	b480      	push	{r7}
 800af0c:	b087      	sub	sp, #28
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	781a      	ldrb	r2, [r3, #0]
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	785a      	ldrb	r2, [r3, #1]
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	789a      	ldrb	r2, [r3, #2]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	78da      	ldrb	r2, [r3, #3]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	3304      	adds	r3, #4
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	461a      	mov	r2, r3
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3305      	adds	r3, #5
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	021b      	lsls	r3, r3, #8
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	4313      	orrs	r3, r2
 800af4e:	b29a      	uxth	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	799a      	ldrb	r2, [r3, #6]
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	889b      	ldrh	r3, [r3, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d009      	beq.n	800af78 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800af68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af6c:	d804      	bhi.n	800af78 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800af72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af76:	d901      	bls.n	800af7c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800af78:	2303      	movs	r3, #3
 800af7a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800af82:	2b00      	cmp	r3, #0
 800af84:	d136      	bne.n	800aff4 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	78db      	ldrb	r3, [r3, #3]
 800af8a:	f003 0303 	and.w	r3, r3, #3
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d108      	bne.n	800afa4 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	889b      	ldrh	r3, [r3, #4]
 800af96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af9a:	f240 8097 	bls.w	800b0cc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800af9e:	2303      	movs	r3, #3
 800afa0:	75fb      	strb	r3, [r7, #23]
 800afa2:	e093      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	78db      	ldrb	r3, [r3, #3]
 800afa8:	f003 0303 	and.w	r3, r3, #3
 800afac:	2b00      	cmp	r3, #0
 800afae:	d107      	bne.n	800afc0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	889b      	ldrh	r3, [r3, #4]
 800afb4:	2b40      	cmp	r3, #64	@ 0x40
 800afb6:	f240 8089 	bls.w	800b0cc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800afba:	2303      	movs	r3, #3
 800afbc:	75fb      	strb	r3, [r7, #23]
 800afbe:	e085      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	78db      	ldrb	r3, [r3, #3]
 800afc4:	f003 0303 	and.w	r3, r3, #3
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d005      	beq.n	800afd8 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	78db      	ldrb	r3, [r3, #3]
 800afd0:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d10a      	bne.n	800afee <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	799b      	ldrb	r3, [r3, #6]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d003      	beq.n	800afe8 <USBH_ParseEPDesc+0xde>
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	799b      	ldrb	r3, [r3, #6]
 800afe4:	2b10      	cmp	r3, #16
 800afe6:	d970      	bls.n	800b0ca <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800afe8:	2303      	movs	r3, #3
 800afea:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800afec:	e06d      	b.n	800b0ca <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800afee:	2303      	movs	r3, #3
 800aff0:	75fb      	strb	r3, [r7, #23]
 800aff2:	e06b      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800affa:	2b01      	cmp	r3, #1
 800affc:	d13c      	bne.n	800b078 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	78db      	ldrb	r3, [r3, #3]
 800b002:	f003 0303 	and.w	r3, r3, #3
 800b006:	2b02      	cmp	r3, #2
 800b008:	d005      	beq.n	800b016 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	78db      	ldrb	r3, [r3, #3]
 800b00e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b012:	2b00      	cmp	r3, #0
 800b014:	d106      	bne.n	800b024 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	889b      	ldrh	r3, [r3, #4]
 800b01a:	2b40      	cmp	r3, #64	@ 0x40
 800b01c:	d956      	bls.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b01e:	2303      	movs	r3, #3
 800b020:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b022:	e053      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	78db      	ldrb	r3, [r3, #3]
 800b028:	f003 0303 	and.w	r3, r3, #3
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d10e      	bne.n	800b04e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	799b      	ldrb	r3, [r3, #6]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d007      	beq.n	800b048 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b03c:	2b10      	cmp	r3, #16
 800b03e:	d803      	bhi.n	800b048 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b044:	2b40      	cmp	r3, #64	@ 0x40
 800b046:	d941      	bls.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b048:	2303      	movs	r3, #3
 800b04a:	75fb      	strb	r3, [r7, #23]
 800b04c:	e03e      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	78db      	ldrb	r3, [r3, #3]
 800b052:	f003 0303 	and.w	r3, r3, #3
 800b056:	2b03      	cmp	r3, #3
 800b058:	d10b      	bne.n	800b072 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	799b      	ldrb	r3, [r3, #6]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d004      	beq.n	800b06c <USBH_ParseEPDesc+0x162>
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	889b      	ldrh	r3, [r3, #4]
 800b066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b06a:	d32f      	bcc.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b06c:	2303      	movs	r3, #3
 800b06e:	75fb      	strb	r3, [r7, #23]
 800b070:	e02c      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b072:	2303      	movs	r3, #3
 800b074:	75fb      	strb	r3, [r7, #23]
 800b076:	e029      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d120      	bne.n	800b0c4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	78db      	ldrb	r3, [r3, #3]
 800b086:	f003 0303 	and.w	r3, r3, #3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d106      	bne.n	800b09c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	889b      	ldrh	r3, [r3, #4]
 800b092:	2b08      	cmp	r3, #8
 800b094:	d01a      	beq.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b096:	2303      	movs	r3, #3
 800b098:	75fb      	strb	r3, [r7, #23]
 800b09a:	e017      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	78db      	ldrb	r3, [r3, #3]
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d10a      	bne.n	800b0be <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	799b      	ldrb	r3, [r3, #6]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <USBH_ParseEPDesc+0x1ae>
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	889b      	ldrh	r3, [r3, #4]
 800b0b4:	2b08      	cmp	r3, #8
 800b0b6:	d909      	bls.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b0b8:	2303      	movs	r3, #3
 800b0ba:	75fb      	strb	r3, [r7, #23]
 800b0bc:	e006      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	75fb      	strb	r3, [r7, #23]
 800b0c2:	e003      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	75fb      	strb	r3, [r7, #23]
 800b0c8:	e000      	b.n	800b0cc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b0ca:	bf00      	nop
  }

  return status;
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b087      	sub	sp, #28
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	60f8      	str	r0, [r7, #12]
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d120      	bne.n	800b134 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	1e9a      	subs	r2, r3, #2
 800b0f8:	88fb      	ldrh	r3, [r7, #6]
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	bf28      	it	cs
 800b0fe:	4613      	movcs	r3, r2
 800b100:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3302      	adds	r3, #2
 800b106:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b108:	2300      	movs	r3, #0
 800b10a:	82fb      	strh	r3, [r7, #22]
 800b10c:	e00b      	b.n	800b126 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b10e:	8afb      	ldrh	r3, [r7, #22]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	4413      	add	r3, r2
 800b114:	781a      	ldrb	r2, [r3, #0]
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	3301      	adds	r3, #1
 800b11e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b120:	8afb      	ldrh	r3, [r7, #22]
 800b122:	3302      	adds	r3, #2
 800b124:	82fb      	strh	r3, [r7, #22]
 800b126:	8afa      	ldrh	r2, [r7, #22]
 800b128:	8abb      	ldrh	r3, [r7, #20]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d3ef      	bcc.n	800b10e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2200      	movs	r2, #0
 800b132:	701a      	strb	r2, [r3, #0]
  }
}
 800b134:	bf00      	nop
 800b136:	371c      	adds	r7, #28
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	881b      	ldrh	r3, [r3, #0]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	7812      	ldrb	r2, [r2, #0]
 800b152:	4413      	add	r3, r2
 800b154:	b29a      	uxth	r2, r3
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4413      	add	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b166:	68fb      	ldr	r3, [r7, #12]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b182:	2301      	movs	r3, #1
 800b184:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	789b      	ldrb	r3, [r3, #2]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d002      	beq.n	800b194 <USBH_CtlReq+0x20>
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d015      	beq.n	800b1be <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b192:	e033      	b.n	800b1fc <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	88fa      	ldrh	r2, [r7, #6]
 800b19e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2103      	movs	r1, #3
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7ff fb34 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b1bc:	e01e      	b.n	800b1fc <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	f000 f822 	bl	800b208 <USBH_HandleControl>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d002      	beq.n	800b1d4 <USBH_CtlReq+0x60>
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d106      	bne.n	800b1e2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	761a      	strb	r2, [r3, #24]
 800b1e0:	e005      	b.n	800b1ee <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d102      	bne.n	800b1ee <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	2103      	movs	r1, #3
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7ff fb15 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b1fa:	bf00      	nop
  }
  return status;
 800b1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
	...

0800b208 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b210:	2301      	movs	r3, #1
 800b212:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b214:	2300      	movs	r3, #0
 800b216:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	7e1b      	ldrb	r3, [r3, #24]
 800b21c:	3b01      	subs	r3, #1
 800b21e:	2b0a      	cmp	r3, #10
 800b220:	f200 81b2 	bhi.w	800b588 <USBH_HandleControl+0x380>
 800b224:	a201      	add	r2, pc, #4	@ (adr r2, 800b22c <USBH_HandleControl+0x24>)
 800b226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b22a:	bf00      	nop
 800b22c:	0800b259 	.word	0x0800b259
 800b230:	0800b273 	.word	0x0800b273
 800b234:	0800b2f5 	.word	0x0800b2f5
 800b238:	0800b31b 	.word	0x0800b31b
 800b23c:	0800b379 	.word	0x0800b379
 800b240:	0800b3a3 	.word	0x0800b3a3
 800b244:	0800b425 	.word	0x0800b425
 800b248:	0800b447 	.word	0x0800b447
 800b24c:	0800b4a9 	.word	0x0800b4a9
 800b250:	0800b4cf 	.word	0x0800b4cf
 800b254:	0800b531 	.word	0x0800b531
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f103 0110 	add.w	r1, r3, #16
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	795b      	ldrb	r3, [r3, #5]
 800b262:	461a      	mov	r2, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f99f 	bl	800b5a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2202      	movs	r2, #2
 800b26e:	761a      	strb	r2, [r3, #24]
      break;
 800b270:	e195      	b.n	800b59e <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	795b      	ldrb	r3, [r3, #5]
 800b276:	4619      	mov	r1, r3
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f003 fd2f 	bl	800ecdc <USBH_LL_GetURBState>
 800b27e:	4603      	mov	r3, r0
 800b280:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b282:	7bbb      	ldrb	r3, [r7, #14]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d124      	bne.n	800b2d2 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	7c1b      	ldrb	r3, [r3, #16]
 800b28c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b290:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	8adb      	ldrh	r3, [r3, #22]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00a      	beq.n	800b2b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b29a:	7b7b      	ldrb	r3, [r7, #13]
 800b29c:	2b80      	cmp	r3, #128	@ 0x80
 800b29e:	d103      	bne.n	800b2a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2203      	movs	r2, #3
 800b2a4:	761a      	strb	r2, [r3, #24]
 800b2a6:	e00d      	b.n	800b2c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2205      	movs	r2, #5
 800b2ac:	761a      	strb	r2, [r3, #24]
 800b2ae:	e009      	b.n	800b2c4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b2b0:	7b7b      	ldrb	r3, [r7, #13]
 800b2b2:	2b80      	cmp	r3, #128	@ 0x80
 800b2b4:	d103      	bne.n	800b2be <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2209      	movs	r2, #9
 800b2ba:	761a      	strb	r2, [r3, #24]
 800b2bc:	e002      	b.n	800b2c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2207      	movs	r2, #7
 800b2c2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	2103      	movs	r1, #3
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff faaa 	bl	800a824 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b2d0:	e15c      	b.n	800b58c <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b2d2:	7bbb      	ldrb	r3, [r7, #14]
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	d003      	beq.n	800b2e0 <USBH_HandleControl+0xd8>
 800b2d8:	7bbb      	ldrb	r3, [r7, #14]
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	f040 8156 	bne.w	800b58c <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	220b      	movs	r2, #11
 800b2e4:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2103      	movs	r1, #3
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff fa99 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b2f2:	e14b      	b.n	800b58c <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6899      	ldr	r1, [r3, #8]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	899a      	ldrh	r2, [r3, #12]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	791b      	ldrb	r3, [r3, #4]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f98a 	bl	800b626 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2204      	movs	r2, #4
 800b316:	761a      	strb	r2, [r3, #24]
      break;
 800b318:	e141      	b.n	800b59e <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	791b      	ldrb	r3, [r3, #4]
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f003 fcdb 	bl	800ecdc <USBH_LL_GetURBState>
 800b326:	4603      	mov	r3, r0
 800b328:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d109      	bne.n	800b344 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2209      	movs	r2, #9
 800b334:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b336:	2300      	movs	r3, #0
 800b338:	2200      	movs	r2, #0
 800b33a:	2103      	movs	r1, #3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7ff fa71 	bl	800a824 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b342:	e125      	b.n	800b590 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800b344:	7bbb      	ldrb	r3, [r7, #14]
 800b346:	2b05      	cmp	r3, #5
 800b348:	d108      	bne.n	800b35c <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800b34a:	2303      	movs	r3, #3
 800b34c:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b34e:	2300      	movs	r3, #0
 800b350:	2200      	movs	r2, #0
 800b352:	2103      	movs	r1, #3
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f7ff fa65 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b35a:	e119      	b.n	800b590 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
 800b35e:	2b04      	cmp	r3, #4
 800b360:	f040 8116 	bne.w	800b590 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	220b      	movs	r2, #11
 800b368:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b36a:	2300      	movs	r3, #0
 800b36c:	2200      	movs	r2, #0
 800b36e:	2103      	movs	r1, #3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f7ff fa57 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b376:	e10b      	b.n	800b590 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6899      	ldr	r1, [r3, #8]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	899a      	ldrh	r2, [r3, #12]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	795b      	ldrb	r3, [r3, #5]
 800b384:	2001      	movs	r0, #1
 800b386:	9000      	str	r0, [sp, #0]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 f927 	bl	800b5dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b394:	b29a      	uxth	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2206      	movs	r2, #6
 800b39e:	761a      	strb	r2, [r3, #24]
      break;
 800b3a0:	e0fd      	b.n	800b59e <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	795b      	ldrb	r3, [r3, #5]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f003 fc97 	bl	800ecdc <USBH_LL_GetURBState>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d109      	bne.n	800b3cc <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2207      	movs	r2, #7
 800b3bc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b3be:	2300      	movs	r3, #0
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2103      	movs	r1, #3
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7ff fa2d 	bl	800a824 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b3ca:	e0e3      	b.n	800b594 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800b3cc:	7bbb      	ldrb	r3, [r7, #14]
 800b3ce:	2b05      	cmp	r3, #5
 800b3d0:	d10b      	bne.n	800b3ea <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	220c      	movs	r2, #12
 800b3d6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b3dc:	2300      	movs	r3, #0
 800b3de:	2200      	movs	r2, #0
 800b3e0:	2103      	movs	r1, #3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff fa1e 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b3e8:	e0d4      	b.n	800b594 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b3ea:	7bbb      	ldrb	r3, [r7, #14]
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d109      	bne.n	800b404 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2205      	movs	r2, #5
 800b3f4:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2103      	movs	r1, #3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7ff fa11 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b402:	e0c7      	b.n	800b594 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800b404:	7bbb      	ldrb	r3, [r7, #14]
 800b406:	2b04      	cmp	r3, #4
 800b408:	f040 80c4 	bne.w	800b594 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	220b      	movs	r2, #11
 800b410:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b412:	2302      	movs	r3, #2
 800b414:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b416:	2300      	movs	r3, #0
 800b418:	2200      	movs	r2, #0
 800b41a:	2103      	movs	r1, #3
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff fa01 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b422:	e0b7      	b.n	800b594 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	791b      	ldrb	r3, [r3, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	2100      	movs	r1, #0
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f8fa 	bl	800b626 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b438:	b29a      	uxth	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2208      	movs	r2, #8
 800b442:	761a      	strb	r2, [r3, #24]

      break;
 800b444:	e0ab      	b.n	800b59e <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	791b      	ldrb	r3, [r3, #4]
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f003 fc45 	bl	800ecdc <USBH_LL_GetURBState>
 800b452:	4603      	mov	r3, r0
 800b454:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b456:	7bbb      	ldrb	r3, [r7, #14]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d10b      	bne.n	800b474 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	220d      	movs	r2, #13
 800b460:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b466:	2300      	movs	r3, #0
 800b468:	2200      	movs	r2, #0
 800b46a:	2103      	movs	r1, #3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f7ff f9d9 	bl	800a824 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b472:	e091      	b.n	800b598 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	2b04      	cmp	r3, #4
 800b478:	d109      	bne.n	800b48e <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	220b      	movs	r2, #11
 800b47e:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b480:	2300      	movs	r3, #0
 800b482:	2200      	movs	r2, #0
 800b484:	2103      	movs	r1, #3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7ff f9cc 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b48c:	e084      	b.n	800b598 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	2b05      	cmp	r3, #5
 800b492:	f040 8081 	bne.w	800b598 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800b496:	2303      	movs	r3, #3
 800b498:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b49a:	2300      	movs	r3, #0
 800b49c:	2200      	movs	r2, #0
 800b49e:	2103      	movs	r1, #3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7ff f9bf 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b4a6:	e077      	b.n	800b598 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	795b      	ldrb	r3, [r3, #5]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	9200      	str	r2, [sp, #0]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f891 	bl	800b5dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	220a      	movs	r2, #10
 800b4ca:	761a      	strb	r2, [r3, #24]
      break;
 800b4cc:	e067      	b.n	800b59e <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	795b      	ldrb	r3, [r3, #5]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f003 fc01 	bl	800ecdc <USBH_LL_GetURBState>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b4de:	7bbb      	ldrb	r3, [r7, #14]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d10b      	bne.n	800b4fc <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	220d      	movs	r2, #13
 800b4ec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	2103      	movs	r1, #3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff f995 	bl	800a824 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b4fa:	e04f      	b.n	800b59c <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b4fc:	7bbb      	ldrb	r3, [r7, #14]
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d109      	bne.n	800b516 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2209      	movs	r2, #9
 800b506:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b508:	2300      	movs	r3, #0
 800b50a:	2200      	movs	r2, #0
 800b50c:	2103      	movs	r1, #3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff f988 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b514:	e042      	b.n	800b59c <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800b516:	7bbb      	ldrb	r3, [r7, #14]
 800b518:	2b04      	cmp	r3, #4
 800b51a:	d13f      	bne.n	800b59c <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	220b      	movs	r2, #11
 800b520:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b522:	2300      	movs	r3, #0
 800b524:	2200      	movs	r2, #0
 800b526:	2103      	movs	r1, #3
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7ff f97b 	bl	800a824 <USBH_OS_PutMessage>
      break;
 800b52e:	e035      	b.n	800b59c <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7e5b      	ldrb	r3, [r3, #25]
 800b534:	3301      	adds	r3, #1
 800b536:	b2da      	uxtb	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	765a      	strb	r2, [r3, #25]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	7e5b      	ldrb	r3, [r3, #25]
 800b540:	2b02      	cmp	r3, #2
 800b542:	d806      	bhi.n	800b552 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2201      	movs	r2, #1
 800b54e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b550:	e025      	b.n	800b59e <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b558:	2106      	movs	r1, #6
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	795b      	ldrb	r3, [r3, #5]
 800b568:	4619      	mov	r1, r3
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f90c 	bl	800b788 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	791b      	ldrb	r3, [r3, #4]
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f906 	bl	800b788 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b582:	2302      	movs	r3, #2
 800b584:	73fb      	strb	r3, [r7, #15]
      break;
 800b586:	e00a      	b.n	800b59e <USBH_HandleControl+0x396>

    default:
      break;
 800b588:	bf00      	nop
 800b58a:	e008      	b.n	800b59e <USBH_HandleControl+0x396>
      break;
 800b58c:	bf00      	nop
 800b58e:	e006      	b.n	800b59e <USBH_HandleControl+0x396>
      break;
 800b590:	bf00      	nop
 800b592:	e004      	b.n	800b59e <USBH_HandleControl+0x396>
      break;
 800b594:	bf00      	nop
 800b596:	e002      	b.n	800b59e <USBH_HandleControl+0x396>
      break;
 800b598:	bf00      	nop
 800b59a:	e000      	b.n	800b59e <USBH_HandleControl+0x396>
      break;
 800b59c:	bf00      	nop
  }

  return status;
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af04      	add	r7, sp, #16
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5b6:	79f9      	ldrb	r1, [r7, #7]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9303      	str	r3, [sp, #12]
 800b5bc:	2308      	movs	r3, #8
 800b5be:	9302      	str	r3, [sp, #8]
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	9301      	str	r3, [sp, #4]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	f003 fb54 	bl	800ec7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b088      	sub	sp, #32
 800b5e0:	af04      	add	r7, sp, #16
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	80fb      	strh	r3, [r7, #6]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b600:	7979      	ldrb	r1, [r7, #5]
 800b602:	7e3b      	ldrb	r3, [r7, #24]
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	88fb      	ldrh	r3, [r7, #6]
 800b608:	9302      	str	r3, [sp, #8]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	2301      	movs	r3, #1
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	2300      	movs	r3, #0
 800b614:	2200      	movs	r2, #0
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f003 fb2f 	bl	800ec7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b088      	sub	sp, #32
 800b62a:	af04      	add	r7, sp, #16
 800b62c:	60f8      	str	r0, [r7, #12]
 800b62e:	60b9      	str	r1, [r7, #8]
 800b630:	4611      	mov	r1, r2
 800b632:	461a      	mov	r2, r3
 800b634:	460b      	mov	r3, r1
 800b636:	80fb      	strh	r3, [r7, #6]
 800b638:	4613      	mov	r3, r2
 800b63a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b63c:	7979      	ldrb	r1, [r7, #5]
 800b63e:	2300      	movs	r3, #0
 800b640:	9303      	str	r3, [sp, #12]
 800b642:	88fb      	ldrh	r3, [r7, #6]
 800b644:	9302      	str	r3, [sp, #8]
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	2301      	movs	r3, #1
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	2300      	movs	r3, #0
 800b650:	2201      	movs	r2, #1
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f003 fb11 	bl	800ec7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b658:	2300      	movs	r3, #0

}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b088      	sub	sp, #32
 800b666:	af04      	add	r7, sp, #16
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	60b9      	str	r1, [r7, #8]
 800b66c:	4611      	mov	r1, r2
 800b66e:	461a      	mov	r2, r3
 800b670:	460b      	mov	r3, r1
 800b672:	80fb      	strh	r3, [r7, #6]
 800b674:	4613      	mov	r3, r2
 800b676:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b682:	2300      	movs	r3, #0
 800b684:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b686:	7979      	ldrb	r1, [r7, #5]
 800b688:	7e3b      	ldrb	r3, [r7, #24]
 800b68a:	9303      	str	r3, [sp, #12]
 800b68c:	88fb      	ldrh	r3, [r7, #6]
 800b68e:	9302      	str	r3, [sp, #8]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	2301      	movs	r3, #1
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	2302      	movs	r3, #2
 800b69a:	2200      	movs	r2, #0
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f003 faec 	bl	800ec7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af04      	add	r7, sp, #16
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	80fb      	strh	r3, [r7, #6]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b6c2:	7979      	ldrb	r1, [r7, #5]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	9303      	str	r3, [sp, #12]
 800b6c8:	88fb      	ldrh	r3, [r7, #6]
 800b6ca:	9302      	str	r3, [sp, #8]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	2302      	movs	r3, #2
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f003 face 	bl	800ec7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af04      	add	r7, sp, #16
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	4608      	mov	r0, r1
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	70fb      	strb	r3, [r7, #3]
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	70bb      	strb	r3, [r7, #2]
 800b6fe:	4613      	mov	r3, r2
 800b700:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b702:	7878      	ldrb	r0, [r7, #1]
 800b704:	78ba      	ldrb	r2, [r7, #2]
 800b706:	78f9      	ldrb	r1, [r7, #3]
 800b708:	8b3b      	ldrh	r3, [r7, #24]
 800b70a:	9302      	str	r3, [sp, #8]
 800b70c:	7d3b      	ldrb	r3, [r7, #20]
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	7c3b      	ldrb	r3, [r7, #16]
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	4603      	mov	r3, r0
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f003 fa73 	bl	800ec02 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	460b      	mov	r3, r1
 800b730:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b732:	78fb      	ldrb	r3, [r7, #3]
 800b734:	4619      	mov	r1, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f003 fa92 	bl	800ec60 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	460b      	mov	r3, r1
 800b750:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f836 	bl	800b7c4 <USBH_GetFreePipe>
 800b758:	4603      	mov	r3, r0
 800b75a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b75c:	89fb      	ldrh	r3, [r7, #14]
 800b75e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b762:	4293      	cmp	r3, r2
 800b764:	d00a      	beq.n	800b77c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b766:	78fa      	ldrb	r2, [r7, #3]
 800b768:	89fb      	ldrh	r3, [r7, #14]
 800b76a:	f003 030f 	and.w	r3, r3, #15
 800b76e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	33e0      	adds	r3, #224	@ 0xe0
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	440b      	add	r3, r1
 800b77a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b77c:	89fb      	ldrh	r3, [r7, #14]
 800b77e:	b2db      	uxtb	r3, r3
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	460b      	mov	r3, r1
 800b792:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b794:	78fb      	ldrb	r3, [r7, #3]
 800b796:	2b0f      	cmp	r3, #15
 800b798:	d80d      	bhi.n	800b7b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b79a:	78fb      	ldrb	r3, [r7, #3]
 800b79c:	687a      	ldr	r2, [r7, #4]
 800b79e:	33e0      	adds	r3, #224	@ 0xe0
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	78fb      	ldrb	r3, [r7, #3]
 800b7a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	33e0      	adds	r3, #224	@ 0xe0
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	440b      	add	r3, r1
 800b7b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]
 800b7d4:	e00f      	b.n	800b7f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	33e0      	adds	r3, #224	@ 0xe0
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d102      	bne.n	800b7f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b7ea:	7bfb      	ldrb	r3, [r7, #15]
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	e007      	b.n	800b800 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	73fb      	strb	r3, [r7, #15]
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
 800b7f8:	2b0f      	cmp	r3, #15
 800b7fa:	d9ec      	bls.n	800b7d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b7fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b800:	4618      	mov	r0, r3
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <__NVIC_SetPriority>:
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	6039      	str	r1, [r7, #0]
 800b816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	db0a      	blt.n	800b836 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	b2da      	uxtb	r2, r3
 800b824:	490c      	ldr	r1, [pc, #48]	@ (800b858 <__NVIC_SetPriority+0x4c>)
 800b826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b82a:	0112      	lsls	r2, r2, #4
 800b82c:	b2d2      	uxtb	r2, r2
 800b82e:	440b      	add	r3, r1
 800b830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b834:	e00a      	b.n	800b84c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	b2da      	uxtb	r2, r3
 800b83a:	4908      	ldr	r1, [pc, #32]	@ (800b85c <__NVIC_SetPriority+0x50>)
 800b83c:	79fb      	ldrb	r3, [r7, #7]
 800b83e:	f003 030f 	and.w	r3, r3, #15
 800b842:	3b04      	subs	r3, #4
 800b844:	0112      	lsls	r2, r2, #4
 800b846:	b2d2      	uxtb	r2, r2
 800b848:	440b      	add	r3, r1
 800b84a:	761a      	strb	r2, [r3, #24]
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr
 800b858:	e000e100 	.word	0xe000e100
 800b85c:	e000ed00 	.word	0xe000ed00

0800b860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b860:	b580      	push	{r7, lr}
 800b862:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b864:	2100      	movs	r1, #0
 800b866:	f06f 0004 	mvn.w	r0, #4
 800b86a:	f7ff ffcf 	bl	800b80c <__NVIC_SetPriority>
#endif
}
 800b86e:	bf00      	nop
 800b870:	bd80      	pop	{r7, pc}
	...

0800b874 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b87a:	f3ef 8305 	mrs	r3, IPSR
 800b87e:	603b      	str	r3, [r7, #0]
  return(result);
 800b880:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b882:	2b00      	cmp	r3, #0
 800b884:	d003      	beq.n	800b88e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b886:	f06f 0305 	mvn.w	r3, #5
 800b88a:	607b      	str	r3, [r7, #4]
 800b88c:	e00c      	b.n	800b8a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b88e:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b8 <osKernelInitialize+0x44>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d105      	bne.n	800b8a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b896:	4b08      	ldr	r3, [pc, #32]	@ (800b8b8 <osKernelInitialize+0x44>)
 800b898:	2201      	movs	r2, #1
 800b89a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b89c:	2300      	movs	r3, #0
 800b89e:	607b      	str	r3, [r7, #4]
 800b8a0:	e002      	b.n	800b8a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b8a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b8a8:	687b      	ldr	r3, [r7, #4]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	20004a88 	.word	0x20004a88

0800b8bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8c2:	f3ef 8305 	mrs	r3, IPSR
 800b8c6:	603b      	str	r3, [r7, #0]
  return(result);
 800b8c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b8ce:	f06f 0305 	mvn.w	r3, #5
 800b8d2:	607b      	str	r3, [r7, #4]
 800b8d4:	e010      	b.n	800b8f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b904 <osKernelStart+0x48>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d109      	bne.n	800b8f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b8de:	f7ff ffbf 	bl	800b860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b8e2:	4b08      	ldr	r3, [pc, #32]	@ (800b904 <osKernelStart+0x48>)
 800b8e4:	2202      	movs	r2, #2
 800b8e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b8e8:	f001 fac2 	bl	800ce70 <vTaskStartScheduler>
      stat = osOK;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	607b      	str	r3, [r7, #4]
 800b8f0:	e002      	b.n	800b8f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b8f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b8f8:	687b      	ldr	r3, [r7, #4]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20004a88 	.word	0x20004a88

0800b908 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08e      	sub	sp, #56	@ 0x38
 800b90c:	af04      	add	r7, sp, #16
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b914:	2300      	movs	r3, #0
 800b916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b918:	f3ef 8305 	mrs	r3, IPSR
 800b91c:	617b      	str	r3, [r7, #20]
  return(result);
 800b91e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b920:	2b00      	cmp	r3, #0
 800b922:	d17e      	bne.n	800ba22 <osThreadNew+0x11a>
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d07b      	beq.n	800ba22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b92a:	2380      	movs	r3, #128	@ 0x80
 800b92c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b92e:	2318      	movs	r3, #24
 800b930:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b932:	2300      	movs	r3, #0
 800b934:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b936:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b93a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d045      	beq.n	800b9ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <osThreadNew+0x48>
        name = attr->name;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d008      	beq.n	800b976 <osThreadNew+0x6e>
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	2b38      	cmp	r3, #56	@ 0x38
 800b968:	d805      	bhi.n	800b976 <osThreadNew+0x6e>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	f003 0301 	and.w	r3, r3, #1
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <osThreadNew+0x72>
        return (NULL);
 800b976:	2300      	movs	r3, #0
 800b978:	e054      	b.n	800ba24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	089b      	lsrs	r3, r3, #2
 800b988:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00e      	beq.n	800b9b0 <osThreadNew+0xa8>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	2b5b      	cmp	r3, #91	@ 0x5b
 800b998:	d90a      	bls.n	800b9b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d006      	beq.n	800b9b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d002      	beq.n	800b9b0 <osThreadNew+0xa8>
        mem = 1;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	61bb      	str	r3, [r7, #24]
 800b9ae:	e010      	b.n	800b9d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10c      	bne.n	800b9d2 <osThreadNew+0xca>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d108      	bne.n	800b9d2 <osThreadNew+0xca>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d104      	bne.n	800b9d2 <osThreadNew+0xca>
          mem = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	61bb      	str	r3, [r7, #24]
 800b9cc:	e001      	b.n	800b9d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d110      	bne.n	800b9fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b9e0:	9202      	str	r2, [sp, #8]
 800b9e2:	9301      	str	r3, [sp, #4]
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	6a3a      	ldr	r2, [r7, #32]
 800b9ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f001 f862 	bl	800cab8 <xTaskCreateStatic>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	613b      	str	r3, [r7, #16]
 800b9f8:	e013      	b.n	800ba22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d110      	bne.n	800ba22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	f107 0310 	add.w	r3, r7, #16
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f001 f8b0 	bl	800cb78 <xTaskCreate>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d001      	beq.n	800ba22 <osThreadNew+0x11a>
            hTask = NULL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ba22:	693b      	ldr	r3, [r7, #16]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3728      	adds	r7, #40	@ 0x28
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba34:	f3ef 8305 	mrs	r3, IPSR
 800ba38:	60bb      	str	r3, [r7, #8]
  return(result);
 800ba3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d003      	beq.n	800ba48 <osDelay+0x1c>
    stat = osErrorISR;
 800ba40:	f06f 0305 	mvn.w	r3, #5
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	e007      	b.n	800ba58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d002      	beq.n	800ba58 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f001 f9d6 	bl	800ce04 <vTaskDelay>
    }
  }

  return (stat);
 800ba58:	68fb      	ldr	r3, [r7, #12]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b08a      	sub	sp, #40	@ 0x28
 800ba66:	af02      	add	r7, sp, #8
 800ba68:	60f8      	str	r0, [r7, #12]
 800ba6a:	60b9      	str	r1, [r7, #8]
 800ba6c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba72:	f3ef 8305 	mrs	r3, IPSR
 800ba76:	613b      	str	r3, [r7, #16]
  return(result);
 800ba78:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d15f      	bne.n	800bb3e <osMessageQueueNew+0xdc>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d05c      	beq.n	800bb3e <osMessageQueueNew+0xdc>
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d059      	beq.n	800bb3e <osMessageQueueNew+0xdc>
    mem = -1;
 800ba8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d029      	beq.n	800baea <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d012      	beq.n	800bac4 <osMessageQueueNew+0x62>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	2b4f      	cmp	r3, #79	@ 0x4f
 800baa4:	d90e      	bls.n	800bac4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00a      	beq.n	800bac4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	695a      	ldr	r2, [r3, #20]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	68b9      	ldr	r1, [r7, #8]
 800bab6:	fb01 f303 	mul.w	r3, r1, r3
 800baba:	429a      	cmp	r2, r3
 800babc:	d302      	bcc.n	800bac4 <osMessageQueueNew+0x62>
        mem = 1;
 800babe:	2301      	movs	r3, #1
 800bac0:	61bb      	str	r3, [r7, #24]
 800bac2:	e014      	b.n	800baee <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d110      	bne.n	800baee <osMessageQueueNew+0x8c>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10c      	bne.n	800baee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d108      	bne.n	800baee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d104      	bne.n	800baee <osMessageQueueNew+0x8c>
          mem = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	61bb      	str	r3, [r7, #24]
 800bae8:	e001      	b.n	800baee <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d10b      	bne.n	800bb0c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	691a      	ldr	r2, [r3, #16]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	2100      	movs	r1, #0
 800bafe:	9100      	str	r1, [sp, #0]
 800bb00:	68b9      	ldr	r1, [r7, #8]
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 fa66 	bl	800bfd4 <xQueueGenericCreateStatic>
 800bb08:	61f8      	str	r0, [r7, #28]
 800bb0a:	e008      	b.n	800bb1e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d105      	bne.n	800bb1e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bb12:	2200      	movs	r2, #0
 800bb14:	68b9      	ldr	r1, [r7, #8]
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f000 fad9 	bl	800c0ce <xQueueGenericCreate>
 800bb1c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00c      	beq.n	800bb3e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d003      	beq.n	800bb32 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	617b      	str	r3, [r7, #20]
 800bb30:	e001      	b.n	800bb36 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bb36:	6979      	ldr	r1, [r7, #20]
 800bb38:	69f8      	ldr	r0, [r7, #28]
 800bb3a:	f000 ff5f 	bl	800c9fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bb3e:	69fb      	ldr	r3, [r7, #28]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3720      	adds	r7, #32
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	4613      	mov	r3, r2
 800bb56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb60:	f3ef 8305 	mrs	r3, IPSR
 800bb64:	617b      	str	r3, [r7, #20]
  return(result);
 800bb66:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d028      	beq.n	800bbbe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d005      	beq.n	800bb7e <osMessageQueuePut+0x36>
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <osMessageQueuePut+0x36>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bb7e:	f06f 0303 	mvn.w	r3, #3
 800bb82:	61fb      	str	r3, [r7, #28]
 800bb84:	e038      	b.n	800bbf8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bb86:	2300      	movs	r3, #0
 800bb88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bb8a:	f107 0210 	add.w	r2, r7, #16
 800bb8e:	2300      	movs	r3, #0
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	69b8      	ldr	r0, [r7, #24]
 800bb94:	f000 fbfc 	bl	800c390 <xQueueGenericSendFromISR>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	d003      	beq.n	800bba6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bb9e:	f06f 0302 	mvn.w	r3, #2
 800bba2:	61fb      	str	r3, [r7, #28]
 800bba4:	e028      	b.n	800bbf8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d025      	beq.n	800bbf8 <osMessageQueuePut+0xb0>
 800bbac:	4b15      	ldr	r3, [pc, #84]	@ (800bc04 <osMessageQueuePut+0xbc>)
 800bbae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	e01c      	b.n	800bbf8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d002      	beq.n	800bbca <osMessageQueuePut+0x82>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d103      	bne.n	800bbd2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bbca:	f06f 0303 	mvn.w	r3, #3
 800bbce:	61fb      	str	r3, [r7, #28]
 800bbd0:	e012      	b.n	800bbf8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	68b9      	ldr	r1, [r7, #8]
 800bbd8:	69b8      	ldr	r0, [r7, #24]
 800bbda:	f000 fad7 	bl	800c18c <xQueueGenericSend>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d009      	beq.n	800bbf8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bbea:	f06f 0301 	mvn.w	r3, #1
 800bbee:	61fb      	str	r3, [r7, #28]
 800bbf0:	e002      	b.n	800bbf8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bbf2:	f06f 0302 	mvn.w	r3, #2
 800bbf6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bbf8:	69fb      	ldr	r3, [r7, #28]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3720      	adds	r7, #32
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	e000ed04 	.word	0xe000ed04

0800bc08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b088      	sub	sp, #32
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc1e:	f3ef 8305 	mrs	r3, IPSR
 800bc22:	617b      	str	r3, [r7, #20]
  return(result);
 800bc24:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d028      	beq.n	800bc7c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d005      	beq.n	800bc3c <osMessageQueueGet+0x34>
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d002      	beq.n	800bc3c <osMessageQueueGet+0x34>
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bc3c:	f06f 0303 	mvn.w	r3, #3
 800bc40:	61fb      	str	r3, [r7, #28]
 800bc42:	e037      	b.n	800bcb4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bc44:	2300      	movs	r3, #0
 800bc46:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bc48:	f107 0310 	add.w	r3, r7, #16
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	68b9      	ldr	r1, [r7, #8]
 800bc50:	69b8      	ldr	r0, [r7, #24]
 800bc52:	f000 fd1d 	bl	800c690 <xQueueReceiveFromISR>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d003      	beq.n	800bc64 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bc5c:	f06f 0302 	mvn.w	r3, #2
 800bc60:	61fb      	str	r3, [r7, #28]
 800bc62:	e027      	b.n	800bcb4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d024      	beq.n	800bcb4 <osMessageQueueGet+0xac>
 800bc6a:	4b15      	ldr	r3, [pc, #84]	@ (800bcc0 <osMessageQueueGet+0xb8>)
 800bc6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	f3bf 8f6f 	isb	sy
 800bc7a:	e01b      	b.n	800bcb4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d002      	beq.n	800bc88 <osMessageQueueGet+0x80>
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d103      	bne.n	800bc90 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bc88:	f06f 0303 	mvn.w	r3, #3
 800bc8c:	61fb      	str	r3, [r7, #28]
 800bc8e:	e011      	b.n	800bcb4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bc90:	683a      	ldr	r2, [r7, #0]
 800bc92:	68b9      	ldr	r1, [r7, #8]
 800bc94:	69b8      	ldr	r0, [r7, #24]
 800bc96:	f000 fc19 	bl	800c4cc <xQueueReceive>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d009      	beq.n	800bcb4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d003      	beq.n	800bcae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bca6:	f06f 0301 	mvn.w	r3, #1
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	e002      	b.n	800bcb4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bcae:	f06f 0302 	mvn.w	r3, #2
 800bcb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bcb4:	69fb      	ldr	r3, [r7, #28]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3720      	adds	r7, #32
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	e000ed04 	.word	0xe000ed04

0800bcc4 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b08a      	sub	sp, #40	@ 0x28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d102      	bne.n	800bcdc <osMessageQueueGetSpace+0x18>
    space = 0U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcda:	e023      	b.n	800bd24 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcdc:	f3ef 8305 	mrs	r3, IPSR
 800bce0:	61bb      	str	r3, [r7, #24]
  return(result);
 800bce2:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d019      	beq.n	800bd1c <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bce8:	f3ef 8211 	mrs	r2, BASEPRI
 800bcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf0:	f383 8811 	msr	BASEPRI, r3
 800bcf4:	f3bf 8f6f 	isb	sy
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	613a      	str	r2, [r7, #16]
 800bcfe:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bd00:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800bd02:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd1a:	e003      	b.n	800bd24 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800bd1c:	6a38      	ldr	r0, [r7, #32]
 800bd1e:	f000 fd39 	bl	800c794 <uxQueueSpacesAvailable>
 800bd22:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800bd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3728      	adds	r7, #40	@ 0x28
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4a07      	ldr	r2, [pc, #28]	@ (800bd5c <vApplicationGetIdleTaskMemory+0x2c>)
 800bd40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	4a06      	ldr	r2, [pc, #24]	@ (800bd60 <vApplicationGetIdleTaskMemory+0x30>)
 800bd46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2280      	movs	r2, #128	@ 0x80
 800bd4c:	601a      	str	r2, [r3, #0]
}
 800bd4e:	bf00      	nop
 800bd50:	3714      	adds	r7, #20
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	20004a8c 	.word	0x20004a8c
 800bd60:	20004ae8 	.word	0x20004ae8

0800bd64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4a07      	ldr	r2, [pc, #28]	@ (800bd90 <vApplicationGetTimerTaskMemory+0x2c>)
 800bd74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	4a06      	ldr	r2, [pc, #24]	@ (800bd94 <vApplicationGetTimerTaskMemory+0x30>)
 800bd7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bd82:	601a      	str	r2, [r3, #0]
}
 800bd84:	bf00      	nop
 800bd86:	3714      	adds	r7, #20
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr
 800bd90:	20004ce8 	.word	0x20004ce8
 800bd94:	20004d44 	.word	0x20004d44

0800bd98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f103 0208 	add.w	r2, r3, #8
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bdb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f103 0208 	add.w	r2, r3, #8
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f103 0208 	add.w	r2, r3, #8
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	689a      	ldr	r2, [r3, #8]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	601a      	str	r2, [r3, #0]
}
 800be2e:	bf00      	nop
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be3a:	b480      	push	{r7}
 800be3c:	b085      	sub	sp, #20
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be50:	d103      	bne.n	800be5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	60fb      	str	r3, [r7, #12]
 800be58:	e00c      	b.n	800be74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3308      	adds	r3, #8
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	e002      	b.n	800be68 <vListInsert+0x2e>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	429a      	cmp	r2, r3
 800be72:	d2f6      	bcs.n	800be62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	601a      	str	r2, [r3, #0]
}
 800bea0:	bf00      	nop
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	6892      	ldr	r2, [r2, #8]
 800bec2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6852      	ldr	r2, [r2, #4]
 800becc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d103      	bne.n	800bee0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	1e5a      	subs	r2, r3, #1
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10b      	bne.n	800bf2c <xQueueGenericReset+0x2c>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	60bb      	str	r3, [r7, #8]
}
 800bf26:	bf00      	nop
 800bf28:	bf00      	nop
 800bf2a:	e7fd      	b.n	800bf28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf2c:	f002 f984 	bl	800e238 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf38:	68f9      	ldr	r1, [r7, #12]
 800bf3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bf3c:	fb01 f303 	mul.w	r3, r1, r3
 800bf40:	441a      	add	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	68f9      	ldr	r1, [r7, #12]
 800bf60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bf62:	fb01 f303 	mul.w	r3, r1, r3
 800bf66:	441a      	add	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	22ff      	movs	r2, #255	@ 0xff
 800bf70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	22ff      	movs	r2, #255	@ 0xff
 800bf78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d114      	bne.n	800bfac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d01a      	beq.n	800bfc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3310      	adds	r3, #16
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 f9fc 	bl	800d38c <xTaskRemoveFromEventList>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d012      	beq.n	800bfc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bf9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfd0 <xQueueGenericReset+0xd0>)
 800bf9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfa0:	601a      	str	r2, [r3, #0]
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	e009      	b.n	800bfc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	3310      	adds	r3, #16
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff fef1 	bl	800bd98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3324      	adds	r3, #36	@ 0x24
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff feec 	bl	800bd98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bfc0:	f002 f96c 	bl	800e29c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bfc4:	2301      	movs	r3, #1
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	e000ed04 	.word	0xe000ed04

0800bfd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b08e      	sub	sp, #56	@ 0x38
 800bfd8:	af02      	add	r7, sp, #8
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10b      	bne.n	800c000 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bffa:	bf00      	nop
 800bffc:	bf00      	nop
 800bffe:	e7fd      	b.n	800bffc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10b      	bne.n	800c01e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c018:	bf00      	nop
 800c01a:	bf00      	nop
 800c01c:	e7fd      	b.n	800c01a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <xQueueGenericCreateStatic+0x56>
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <xQueueGenericCreateStatic+0x5a>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e000      	b.n	800c030 <xQueueGenericCreateStatic+0x5c>
 800c02e:	2300      	movs	r3, #0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10b      	bne.n	800c04c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	623b      	str	r3, [r7, #32]
}
 800c046:	bf00      	nop
 800c048:	bf00      	nop
 800c04a:	e7fd      	b.n	800c048 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d102      	bne.n	800c058 <xQueueGenericCreateStatic+0x84>
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <xQueueGenericCreateStatic+0x88>
 800c058:	2301      	movs	r3, #1
 800c05a:	e000      	b.n	800c05e <xQueueGenericCreateStatic+0x8a>
 800c05c:	2300      	movs	r3, #0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d10b      	bne.n	800c07a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c066:	f383 8811 	msr	BASEPRI, r3
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	61fb      	str	r3, [r7, #28]
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop
 800c078:	e7fd      	b.n	800c076 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c07a:	2350      	movs	r3, #80	@ 0x50
 800c07c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2b50      	cmp	r3, #80	@ 0x50
 800c082:	d00b      	beq.n	800c09c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c088:	f383 8811 	msr	BASEPRI, r3
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	61bb      	str	r3, [r7, #24]
}
 800c096:	bf00      	nop
 800c098:	bf00      	nop
 800c09a:	e7fd      	b.n	800c098 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c09c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00d      	beq.n	800c0c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	68b9      	ldr	r1, [r7, #8]
 800c0be:	68f8      	ldr	r0, [r7, #12]
 800c0c0:	f000 f840 	bl	800c144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3730      	adds	r7, #48	@ 0x30
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b08a      	sub	sp, #40	@ 0x28
 800c0d2:	af02      	add	r7, sp, #8
 800c0d4:	60f8      	str	r0, [r7, #12]
 800c0d6:	60b9      	str	r1, [r7, #8]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10b      	bne.n	800c0fa <xQueueGenericCreate+0x2c>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	613b      	str	r3, [r7, #16]
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop
 800c0f8:	e7fd      	b.n	800c0f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	fb02 f303 	mul.w	r3, r2, r3
 800c102:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	3350      	adds	r3, #80	@ 0x50
 800c108:	4618      	mov	r0, r3
 800c10a:	f002 f9b7 	bl	800e47c <pvPortMalloc>
 800c10e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d011      	beq.n	800c13a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	3350      	adds	r3, #80	@ 0x50
 800c11e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c128:	79fa      	ldrb	r2, [r7, #7]
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	4613      	mov	r3, r2
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	68b9      	ldr	r1, [r7, #8]
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f000 f805 	bl	800c144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c13a:	69bb      	ldr	r3, [r7, #24]
	}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3720      	adds	r7, #32
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d103      	bne.n	800c160 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	69ba      	ldr	r2, [r7, #24]
 800c15c:	601a      	str	r2, [r3, #0]
 800c15e:	e002      	b.n	800c166 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c172:	2101      	movs	r1, #1
 800c174:	69b8      	ldr	r0, [r7, #24]
 800c176:	f7ff fec3 	bl	800bf00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	78fa      	ldrb	r2, [r7, #3]
 800c17e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c182:	bf00      	nop
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08e      	sub	sp, #56	@ 0x38
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
 800c198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c19a:	2300      	movs	r3, #0
 800c19c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d10b      	bne.n	800c1c0 <xQueueGenericSend+0x34>
	__asm volatile
 800c1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ac:	f383 8811 	msr	BASEPRI, r3
 800c1b0:	f3bf 8f6f 	isb	sy
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c1ba:	bf00      	nop
 800c1bc:	bf00      	nop
 800c1be:	e7fd      	b.n	800c1bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d103      	bne.n	800c1ce <xQueueGenericSend+0x42>
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <xQueueGenericSend+0x46>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e000      	b.n	800c1d4 <xQueueGenericSend+0x48>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d10b      	bne.n	800c1f0 <xQueueGenericSend+0x64>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c1ea:	bf00      	nop
 800c1ec:	bf00      	nop
 800c1ee:	e7fd      	b.n	800c1ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d103      	bne.n	800c1fe <xQueueGenericSend+0x72>
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d101      	bne.n	800c202 <xQueueGenericSend+0x76>
 800c1fe:	2301      	movs	r3, #1
 800c200:	e000      	b.n	800c204 <xQueueGenericSend+0x78>
 800c202:	2300      	movs	r3, #0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10b      	bne.n	800c220 <xQueueGenericSend+0x94>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	623b      	str	r3, [r7, #32]
}
 800c21a:	bf00      	nop
 800c21c:	bf00      	nop
 800c21e:	e7fd      	b.n	800c21c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c220:	f001 fa9c 	bl	800d75c <xTaskGetSchedulerState>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <xQueueGenericSend+0xa4>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d101      	bne.n	800c234 <xQueueGenericSend+0xa8>
 800c230:	2301      	movs	r3, #1
 800c232:	e000      	b.n	800c236 <xQueueGenericSend+0xaa>
 800c234:	2300      	movs	r3, #0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10b      	bne.n	800c252 <xQueueGenericSend+0xc6>
	__asm volatile
 800c23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	61fb      	str	r3, [r7, #28]
}
 800c24c:	bf00      	nop
 800c24e:	bf00      	nop
 800c250:	e7fd      	b.n	800c24e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c252:	f001 fff1 	bl	800e238 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c25c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c25e:	429a      	cmp	r2, r3
 800c260:	d302      	bcc.n	800c268 <xQueueGenericSend+0xdc>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b02      	cmp	r3, #2
 800c266:	d129      	bne.n	800c2bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c268:	683a      	ldr	r2, [r7, #0]
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c26e:	f000 fab5 	bl	800c7dc <prvCopyDataToQueue>
 800c272:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d010      	beq.n	800c29e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c27e:	3324      	adds	r3, #36	@ 0x24
 800c280:	4618      	mov	r0, r3
 800c282:	f001 f883 	bl	800d38c <xTaskRemoveFromEventList>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d013      	beq.n	800c2b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c28c:	4b3f      	ldr	r3, [pc, #252]	@ (800c38c <xQueueGenericSend+0x200>)
 800c28e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	f3bf 8f4f 	dsb	sy
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	e00a      	b.n	800c2b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d007      	beq.n	800c2b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2a4:	4b39      	ldr	r3, [pc, #228]	@ (800c38c <xQueueGenericSend+0x200>)
 800c2a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2b4:	f001 fff2 	bl	800e29c <vPortExitCritical>
				return pdPASS;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e063      	b.n	800c384 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d103      	bne.n	800c2ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2c2:	f001 ffeb 	bl	800e29c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e05c      	b.n	800c384 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d106      	bne.n	800c2de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2d0:	f107 0314 	add.w	r3, r7, #20
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f001 f8e5 	bl	800d4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2de:	f001 ffdd 	bl	800e29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2e2:	f000 fe2d 	bl	800cf40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2e6:	f001 ffa7 	bl	800e238 <vPortEnterCritical>
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2f0:	b25b      	sxtb	r3, r3
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2f6:	d103      	bne.n	800c300 <xQueueGenericSend+0x174>
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c306:	b25b      	sxtb	r3, r3
 800c308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c30c:	d103      	bne.n	800c316 <xQueueGenericSend+0x18a>
 800c30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c310:	2200      	movs	r2, #0
 800c312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c316:	f001 ffc1 	bl	800e29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c31a:	1d3a      	adds	r2, r7, #4
 800c31c:	f107 0314 	add.w	r3, r7, #20
 800c320:	4611      	mov	r1, r2
 800c322:	4618      	mov	r0, r3
 800c324:	f001 f8d4 	bl	800d4d0 <xTaskCheckForTimeOut>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d124      	bne.n	800c378 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c32e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c330:	f000 fb4c 	bl	800c9cc <prvIsQueueFull>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d018      	beq.n	800c36c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c33c:	3310      	adds	r3, #16
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	4611      	mov	r1, r2
 800c342:	4618      	mov	r0, r3
 800c344:	f000 ffd0 	bl	800d2e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c34a:	f000 fad7 	bl	800c8fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c34e:	f000 fe05 	bl	800cf5c <xTaskResumeAll>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	f47f af7c 	bne.w	800c252 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c35a:	4b0c      	ldr	r3, [pc, #48]	@ (800c38c <xQueueGenericSend+0x200>)
 800c35c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	f3bf 8f4f 	dsb	sy
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	e772      	b.n	800c252 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c36c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c36e:	f000 fac5 	bl	800c8fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c372:	f000 fdf3 	bl	800cf5c <xTaskResumeAll>
 800c376:	e76c      	b.n	800c252 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c37a:	f000 fabf 	bl	800c8fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c37e:	f000 fded 	bl	800cf5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c382:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c384:	4618      	mov	r0, r3
 800c386:	3738      	adds	r7, #56	@ 0x38
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	e000ed04 	.word	0xe000ed04

0800c390 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b090      	sub	sp, #64	@ 0x40
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d10b      	bne.n	800c3c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c3ba:	bf00      	nop
 800c3bc:	bf00      	nop
 800c3be:	e7fd      	b.n	800c3bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d103      	bne.n	800c3ce <xQueueGenericSendFromISR+0x3e>
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <xQueueGenericSendFromISR+0x42>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e000      	b.n	800c3d4 <xQueueGenericSendFromISR+0x44>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10b      	bne.n	800c3f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3dc:	f383 8811 	msr	BASEPRI, r3
 800c3e0:	f3bf 8f6f 	isb	sy
 800c3e4:	f3bf 8f4f 	dsb	sy
 800c3e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c3ea:	bf00      	nop
 800c3ec:	bf00      	nop
 800c3ee:	e7fd      	b.n	800c3ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2b02      	cmp	r3, #2
 800c3f4:	d103      	bne.n	800c3fe <xQueueGenericSendFromISR+0x6e>
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d101      	bne.n	800c402 <xQueueGenericSendFromISR+0x72>
 800c3fe:	2301      	movs	r3, #1
 800c400:	e000      	b.n	800c404 <xQueueGenericSendFromISR+0x74>
 800c402:	2300      	movs	r3, #0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10b      	bne.n	800c420 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	623b      	str	r3, [r7, #32]
}
 800c41a:	bf00      	nop
 800c41c:	bf00      	nop
 800c41e:	e7fd      	b.n	800c41c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c420:	f001 ffea 	bl	800e3f8 <vPortValidateInterruptPriority>
	__asm volatile
 800c424:	f3ef 8211 	mrs	r2, BASEPRI
 800c428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	61fa      	str	r2, [r7, #28]
 800c43a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c43c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c43e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c448:	429a      	cmp	r2, r3
 800c44a:	d302      	bcc.n	800c452 <xQueueGenericSendFromISR+0xc2>
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d12f      	bne.n	800c4b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c460:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	68b9      	ldr	r1, [r7, #8]
 800c466:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c468:	f000 f9b8 	bl	800c7dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c46c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c474:	d112      	bne.n	800c49c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d016      	beq.n	800c4ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c480:	3324      	adds	r3, #36	@ 0x24
 800c482:	4618      	mov	r0, r3
 800c484:	f000 ff82 	bl	800d38c <xTaskRemoveFromEventList>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00e      	beq.n	800c4ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00b      	beq.n	800c4ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	601a      	str	r2, [r3, #0]
 800c49a:	e007      	b.n	800c4ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c49c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	b25a      	sxtb	r2, r3
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c4b0:	e001      	b.n	800c4b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b8:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	f383 8811 	msr	BASEPRI, r3
}
 800c4c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3740      	adds	r7, #64	@ 0x40
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b08c      	sub	sp, #48	@ 0x30
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10b      	bne.n	800c4fe <xQueueReceive+0x32>
	__asm volatile
 800c4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	623b      	str	r3, [r7, #32]
}
 800c4f8:	bf00      	nop
 800c4fa:	bf00      	nop
 800c4fc:	e7fd      	b.n	800c4fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d103      	bne.n	800c50c <xQueueReceive+0x40>
 800c504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <xQueueReceive+0x44>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e000      	b.n	800c512 <xQueueReceive+0x46>
 800c510:	2300      	movs	r3, #0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10b      	bne.n	800c52e <xQueueReceive+0x62>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	61fb      	str	r3, [r7, #28]
}
 800c528:	bf00      	nop
 800c52a:	bf00      	nop
 800c52c:	e7fd      	b.n	800c52a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c52e:	f001 f915 	bl	800d75c <xTaskGetSchedulerState>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d102      	bne.n	800c53e <xQueueReceive+0x72>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d101      	bne.n	800c542 <xQueueReceive+0x76>
 800c53e:	2301      	movs	r3, #1
 800c540:	e000      	b.n	800c544 <xQueueReceive+0x78>
 800c542:	2300      	movs	r3, #0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10b      	bne.n	800c560 <xQueueReceive+0x94>
	__asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	61bb      	str	r3, [r7, #24]
}
 800c55a:	bf00      	nop
 800c55c:	bf00      	nop
 800c55e:	e7fd      	b.n	800c55c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c560:	f001 fe6a 	bl	800e238 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c568:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d01f      	beq.n	800c5b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c570:	68b9      	ldr	r1, [r7, #8]
 800c572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c574:	f000 f99c 	bl	800c8b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57a:	1e5a      	subs	r2, r3, #1
 800c57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d00f      	beq.n	800c5a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58a:	3310      	adds	r3, #16
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 fefd 	bl	800d38c <xTaskRemoveFromEventList>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d007      	beq.n	800c5a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c598:	4b3c      	ldr	r3, [pc, #240]	@ (800c68c <xQueueReceive+0x1c0>)
 800c59a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c59e:	601a      	str	r2, [r3, #0]
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5a8:	f001 fe78 	bl	800e29c <vPortExitCritical>
				return pdPASS;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e069      	b.n	800c684 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d103      	bne.n	800c5be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5b6:	f001 fe71 	bl	800e29c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	e062      	b.n	800c684 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d106      	bne.n	800c5d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5c4:	f107 0310 	add.w	r3, r7, #16
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 ff6b 	bl	800d4a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5d2:	f001 fe63 	bl	800e29c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5d6:	f000 fcb3 	bl	800cf40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5da:	f001 fe2d 	bl	800e238 <vPortEnterCritical>
 800c5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5e4:	b25b      	sxtb	r3, r3
 800c5e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5ea:	d103      	bne.n	800c5f4 <xQueueReceive+0x128>
 800c5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5fa:	b25b      	sxtb	r3, r3
 800c5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c600:	d103      	bne.n	800c60a <xQueueReceive+0x13e>
 800c602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c60a:	f001 fe47 	bl	800e29c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c60e:	1d3a      	adds	r2, r7, #4
 800c610:	f107 0310 	add.w	r3, r7, #16
 800c614:	4611      	mov	r1, r2
 800c616:	4618      	mov	r0, r3
 800c618:	f000 ff5a 	bl	800d4d0 <xTaskCheckForTimeOut>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d123      	bne.n	800c66a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c624:	f000 f9bc 	bl	800c9a0 <prvIsQueueEmpty>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d017      	beq.n	800c65e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c630:	3324      	adds	r3, #36	@ 0x24
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	4611      	mov	r1, r2
 800c636:	4618      	mov	r0, r3
 800c638:	f000 fe56 	bl	800d2e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c63c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c63e:	f000 f95d 	bl	800c8fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c642:	f000 fc8b 	bl	800cf5c <xTaskResumeAll>
 800c646:	4603      	mov	r3, r0
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d189      	bne.n	800c560 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c64c:	4b0f      	ldr	r3, [pc, #60]	@ (800c68c <xQueueReceive+0x1c0>)
 800c64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c652:	601a      	str	r2, [r3, #0]
 800c654:	f3bf 8f4f 	dsb	sy
 800c658:	f3bf 8f6f 	isb	sy
 800c65c:	e780      	b.n	800c560 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c65e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c660:	f000 f94c 	bl	800c8fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c664:	f000 fc7a 	bl	800cf5c <xTaskResumeAll>
 800c668:	e77a      	b.n	800c560 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c66a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c66c:	f000 f946 	bl	800c8fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c670:	f000 fc74 	bl	800cf5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c676:	f000 f993 	bl	800c9a0 <prvIsQueueEmpty>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f43f af6f 	beq.w	800c560 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c682:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c684:	4618      	mov	r0, r3
 800c686:	3730      	adds	r7, #48	@ 0x30
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	e000ed04 	.word	0xe000ed04

0800c690 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08e      	sub	sp, #56	@ 0x38
 800c694:	af00      	add	r7, sp, #0
 800c696:	60f8      	str	r0, [r7, #12]
 800c698:	60b9      	str	r1, [r7, #8]
 800c69a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10b      	bne.n	800c6be <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	623b      	str	r3, [r7, #32]
}
 800c6b8:	bf00      	nop
 800c6ba:	bf00      	nop
 800c6bc:	e7fd      	b.n	800c6ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d103      	bne.n	800c6cc <xQueueReceiveFromISR+0x3c>
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <xQueueReceiveFromISR+0x40>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e000      	b.n	800c6d2 <xQueueReceiveFromISR+0x42>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10b      	bne.n	800c6ee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6da:	f383 8811 	msr	BASEPRI, r3
 800c6de:	f3bf 8f6f 	isb	sy
 800c6e2:	f3bf 8f4f 	dsb	sy
 800c6e6:	61fb      	str	r3, [r7, #28]
}
 800c6e8:	bf00      	nop
 800c6ea:	bf00      	nop
 800c6ec:	e7fd      	b.n	800c6ea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6ee:	f001 fe83 	bl	800e3f8 <vPortValidateInterruptPriority>
	__asm volatile
 800c6f2:	f3ef 8211 	mrs	r2, BASEPRI
 800c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	61ba      	str	r2, [r7, #24]
 800c708:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c70a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c70c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c712:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c716:	2b00      	cmp	r3, #0
 800c718:	d02f      	beq.n	800c77a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c724:	68b9      	ldr	r1, [r7, #8]
 800c726:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c728:	f000 f8c2 	bl	800c8b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c72e:	1e5a      	subs	r2, r3, #1
 800c730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c732:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c734:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c738:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c73c:	d112      	bne.n	800c764 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d016      	beq.n	800c774 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c748:	3310      	adds	r3, #16
 800c74a:	4618      	mov	r0, r3
 800c74c:	f000 fe1e 	bl	800d38c <xTaskRemoveFromEventList>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00e      	beq.n	800c774 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00b      	beq.n	800c774 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	601a      	str	r2, [r3, #0]
 800c762:	e007      	b.n	800c774 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c768:	3301      	adds	r3, #1
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	b25a      	sxtb	r2, r3
 800c76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c774:	2301      	movs	r3, #1
 800c776:	637b      	str	r3, [r7, #52]	@ 0x34
 800c778:	e001      	b.n	800c77e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c77a:	2300      	movs	r3, #0
 800c77c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c780:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	f383 8811 	msr	BASEPRI, r3
}
 800c788:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3738      	adds	r7, #56	@ 0x38
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d10b      	bne.n	800c7be <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800c7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	60fb      	str	r3, [r7, #12]
}
 800c7b8:	bf00      	nop
 800c7ba:	bf00      	nop
 800c7bc:	e7fd      	b.n	800c7ba <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800c7be:	f001 fd3b 	bl	800e238 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c7ce:	f001 fd65 	bl	800e29c <vPortExitCritical>

	return uxReturn;
 800c7d2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3718      	adds	r7, #24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10d      	bne.n	800c816 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d14d      	bne.n	800c89e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	4618      	mov	r0, r3
 800c808:	f000 ffc6 	bl	800d798 <xTaskPriorityDisinherit>
 800c80c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	609a      	str	r2, [r3, #8]
 800c814:	e043      	b.n	800c89e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d119      	bne.n	800c850 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6858      	ldr	r0, [r3, #4]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c824:	461a      	mov	r2, r3
 800c826:	68b9      	ldr	r1, [r7, #8]
 800c828:	f00f fe6d 	bl	801c506 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c834:	441a      	add	r2, r3
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	685a      	ldr	r2, [r3, #4]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	429a      	cmp	r2, r3
 800c844:	d32b      	bcc.n	800c89e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	605a      	str	r2, [r3, #4]
 800c84e:	e026      	b.n	800c89e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68d8      	ldr	r0, [r3, #12]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c858:	461a      	mov	r2, r3
 800c85a:	68b9      	ldr	r1, [r7, #8]
 800c85c:	f00f fe53 	bl	801c506 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	68da      	ldr	r2, [r3, #12]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c868:	425b      	negs	r3, r3
 800c86a:	441a      	add	r2, r3
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	68da      	ldr	r2, [r3, #12]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d207      	bcs.n	800c88c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	689a      	ldr	r2, [r3, #8]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c884:	425b      	negs	r3, r3
 800c886:	441a      	add	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2b02      	cmp	r3, #2
 800c890:	d105      	bne.n	800c89e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d002      	beq.n	800c89e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	3b01      	subs	r3, #1
 800c89c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c8a6:	697b      	ldr	r3, [r7, #20]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3718      	adds	r7, #24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d018      	beq.n	800c8f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68da      	ldr	r2, [r3, #12]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ca:	441a      	add	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68da      	ldr	r2, [r3, #12]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d303      	bcc.n	800c8e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	68d9      	ldr	r1, [r3, #12]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	6838      	ldr	r0, [r7, #0]
 800c8f0:	f00f fe09 	bl	801c506 <memcpy>
	}
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c904:	f001 fc98 	bl	800e238 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c90e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c910:	e011      	b.n	800c936 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c916:	2b00      	cmp	r3, #0
 800c918:	d012      	beq.n	800c940 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	3324      	adds	r3, #36	@ 0x24
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 fd34 	bl	800d38c <xTaskRemoveFromEventList>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c92a:	f000 fe35 	bl	800d598 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	3b01      	subs	r3, #1
 800c932:	b2db      	uxtb	r3, r3
 800c934:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	dce9      	bgt.n	800c912 <prvUnlockQueue+0x16>
 800c93e:	e000      	b.n	800c942 <prvUnlockQueue+0x46>
					break;
 800c940:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	22ff      	movs	r2, #255	@ 0xff
 800c946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c94a:	f001 fca7 	bl	800e29c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c94e:	f001 fc73 	bl	800e238 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c958:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c95a:	e011      	b.n	800c980 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d012      	beq.n	800c98a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	3310      	adds	r3, #16
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fd0f 	bl	800d38c <xTaskRemoveFromEventList>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c974:	f000 fe10 	bl	800d598 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c984:	2b00      	cmp	r3, #0
 800c986:	dce9      	bgt.n	800c95c <prvUnlockQueue+0x60>
 800c988:	e000      	b.n	800c98c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c98a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	22ff      	movs	r2, #255	@ 0xff
 800c990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c994:	f001 fc82 	bl	800e29c <vPortExitCritical>
}
 800c998:	bf00      	nop
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9a8:	f001 fc46 	bl	800e238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d102      	bne.n	800c9ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	60fb      	str	r3, [r7, #12]
 800c9b8:	e001      	b.n	800c9be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9be:	f001 fc6d 	bl	800e29c <vPortExitCritical>

	return xReturn;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9d4:	f001 fc30 	bl	800e238 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d102      	bne.n	800c9ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	60fb      	str	r3, [r7, #12]
 800c9e8:	e001      	b.n	800c9ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9ee:	f001 fc55 	bl	800e29c <vPortExitCritical>

	return xReturn;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
 800ca0a:	e014      	b.n	800ca36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca0c:	4a0f      	ldr	r2, [pc, #60]	@ (800ca4c <vQueueAddToRegistry+0x50>)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d10b      	bne.n	800ca30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca18:	490c      	ldr	r1, [pc, #48]	@ (800ca4c <vQueueAddToRegistry+0x50>)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	683a      	ldr	r2, [r7, #0]
 800ca1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca22:	4a0a      	ldr	r2, [pc, #40]	@ (800ca4c <vQueueAddToRegistry+0x50>)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	00db      	lsls	r3, r3, #3
 800ca28:	4413      	add	r3, r2
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca2e:	e006      	b.n	800ca3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	3301      	adds	r3, #1
 800ca34:	60fb      	str	r3, [r7, #12]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2b07      	cmp	r3, #7
 800ca3a:	d9e7      	bls.n	800ca0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca3c:	bf00      	nop
 800ca3e:	bf00      	nop
 800ca40:	3714      	adds	r7, #20
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr
 800ca4a:	bf00      	nop
 800ca4c:	20005144 	.word	0x20005144

0800ca50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca60:	f001 fbea 	bl	800e238 <vPortEnterCritical>
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca6a:	b25b      	sxtb	r3, r3
 800ca6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca70:	d103      	bne.n	800ca7a <vQueueWaitForMessageRestricted+0x2a>
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca80:	b25b      	sxtb	r3, r3
 800ca82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ca86:	d103      	bne.n	800ca90 <vQueueWaitForMessageRestricted+0x40>
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca90:	f001 fc04 	bl	800e29c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d106      	bne.n	800caaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	3324      	adds	r3, #36	@ 0x24
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	68b9      	ldr	r1, [r7, #8]
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 fc45 	bl	800d334 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800caaa:	6978      	ldr	r0, [r7, #20]
 800caac:	f7ff ff26 	bl	800c8fc <prvUnlockQueue>
	}
 800cab0:	bf00      	nop
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08e      	sub	sp, #56	@ 0x38
 800cabc:	af04      	add	r7, sp, #16
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
 800cac4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10b      	bne.n	800cae4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	623b      	str	r3, [r7, #32]
}
 800cade:	bf00      	nop
 800cae0:	bf00      	nop
 800cae2:	e7fd      	b.n	800cae0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d10b      	bne.n	800cb02 <xTaskCreateStatic+0x4a>
	__asm volatile
 800caea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	61fb      	str	r3, [r7, #28]
}
 800cafc:	bf00      	nop
 800cafe:	bf00      	nop
 800cb00:	e7fd      	b.n	800cafe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb02:	235c      	movs	r3, #92	@ 0x5c
 800cb04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	2b5c      	cmp	r3, #92	@ 0x5c
 800cb0a:	d00b      	beq.n	800cb24 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	61bb      	str	r3, [r7, #24]
}
 800cb1e:	bf00      	nop
 800cb20:	bf00      	nop
 800cb22:	e7fd      	b.n	800cb20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d01e      	beq.n	800cb6a <xTaskCreateStatic+0xb2>
 800cb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d01b      	beq.n	800cb6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3e:	2202      	movs	r2, #2
 800cb40:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb44:	2300      	movs	r3, #0
 800cb46:	9303      	str	r3, [sp, #12]
 800cb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4a:	9302      	str	r3, [sp, #8]
 800cb4c:	f107 0314 	add.w	r3, r7, #20
 800cb50:	9301      	str	r3, [sp, #4]
 800cb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	68b9      	ldr	r1, [r7, #8]
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f000 f850 	bl	800cc02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb64:	f000 f8de 	bl	800cd24 <prvAddNewTaskToReadyList>
 800cb68:	e001      	b.n	800cb6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb6e:	697b      	ldr	r3, [r7, #20]
	}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3728      	adds	r7, #40	@ 0x28
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b08c      	sub	sp, #48	@ 0x30
 800cb7c:	af04      	add	r7, sp, #16
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	603b      	str	r3, [r7, #0]
 800cb84:	4613      	mov	r3, r2
 800cb86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cb88:	88fb      	ldrh	r3, [r7, #6]
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f001 fc75 	bl	800e47c <pvPortMalloc>
 800cb92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00e      	beq.n	800cbb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cb9a:	205c      	movs	r0, #92	@ 0x5c
 800cb9c:	f001 fc6e 	bl	800e47c <pvPortMalloc>
 800cba0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d003      	beq.n	800cbb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	631a      	str	r2, [r3, #48]	@ 0x30
 800cbae:	e005      	b.n	800cbbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbb0:	6978      	ldr	r0, [r7, #20]
 800cbb2:	f001 fd31 	bl	800e618 <vPortFree>
 800cbb6:	e001      	b.n	800cbbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d017      	beq.n	800cbf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbca:	88fa      	ldrh	r2, [r7, #6]
 800cbcc:	2300      	movs	r3, #0
 800cbce:	9303      	str	r3, [sp, #12]
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	9302      	str	r3, [sp, #8]
 800cbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	68b9      	ldr	r1, [r7, #8]
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f000 f80e 	bl	800cc02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cbe6:	69f8      	ldr	r0, [r7, #28]
 800cbe8:	f000 f89c 	bl	800cd24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cbec:	2301      	movs	r3, #1
 800cbee:	61bb      	str	r3, [r7, #24]
 800cbf0:	e002      	b.n	800cbf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cbf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cbf8:	69bb      	ldr	r3, [r7, #24]
	}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3720      	adds	r7, #32
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b088      	sub	sp, #32
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	60b9      	str	r1, [r7, #8]
 800cc0c:	607a      	str	r2, [r7, #4]
 800cc0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	461a      	mov	r2, r3
 800cc1a:	21a5      	movs	r1, #165	@ 0xa5
 800cc1c:	f00f fbaa 	bl	801c374 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	f023 0307 	bic.w	r3, r3, #7
 800cc38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	f003 0307 	and.w	r3, r3, #7
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00b      	beq.n	800cc5c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	617b      	str	r3, [r7, #20]
}
 800cc56:	bf00      	nop
 800cc58:	bf00      	nop
 800cc5a:	e7fd      	b.n	800cc58 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d01f      	beq.n	800cca2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc62:	2300      	movs	r3, #0
 800cc64:	61fb      	str	r3, [r7, #28]
 800cc66:	e012      	b.n	800cc8e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	7819      	ldrb	r1, [r3, #0]
 800cc70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	4413      	add	r3, r2
 800cc76:	3334      	adds	r3, #52	@ 0x34
 800cc78:	460a      	mov	r2, r1
 800cc7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	4413      	add	r3, r2
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d006      	beq.n	800cc96 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	61fb      	str	r3, [r7, #28]
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	2b0f      	cmp	r3, #15
 800cc92:	d9e9      	bls.n	800cc68 <prvInitialiseNewTask+0x66>
 800cc94:	e000      	b.n	800cc98 <prvInitialiseNewTask+0x96>
			{
				break;
 800cc96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cca0:	e003      	b.n	800ccaa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ccaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccac:	2b37      	cmp	r3, #55	@ 0x37
 800ccae:	d901      	bls.n	800ccb4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ccb0:	2337      	movs	r3, #55	@ 0x37
 800ccb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ccba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccbe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ccc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc8:	3304      	adds	r3, #4
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7ff f884 	bl	800bdd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ccd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd2:	3318      	adds	r3, #24
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7ff f87f 	bl	800bdd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ccda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ccea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ccf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	68f9      	ldr	r1, [r7, #12]
 800cd02:	69b8      	ldr	r0, [r7, #24]
 800cd04:	f001 f966 	bl	800dfd4 <pxPortInitialiseStack>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d002      	beq.n	800cd1a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd1a:	bf00      	nop
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd2c:	f001 fa84 	bl	800e238 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd30:	4b2d      	ldr	r3, [pc, #180]	@ (800cde8 <prvAddNewTaskToReadyList+0xc4>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	3301      	adds	r3, #1
 800cd36:	4a2c      	ldr	r2, [pc, #176]	@ (800cde8 <prvAddNewTaskToReadyList+0xc4>)
 800cd38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd3a:	4b2c      	ldr	r3, [pc, #176]	@ (800cdec <prvAddNewTaskToReadyList+0xc8>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d109      	bne.n	800cd56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd42:	4a2a      	ldr	r2, [pc, #168]	@ (800cdec <prvAddNewTaskToReadyList+0xc8>)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd48:	4b27      	ldr	r3, [pc, #156]	@ (800cde8 <prvAddNewTaskToReadyList+0xc4>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d110      	bne.n	800cd72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd50:	f000 fc46 	bl	800d5e0 <prvInitialiseTaskLists>
 800cd54:	e00d      	b.n	800cd72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd56:	4b26      	ldr	r3, [pc, #152]	@ (800cdf0 <prvAddNewTaskToReadyList+0xcc>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d109      	bne.n	800cd72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd5e:	4b23      	ldr	r3, [pc, #140]	@ (800cdec <prvAddNewTaskToReadyList+0xc8>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d802      	bhi.n	800cd72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cd6c:	4a1f      	ldr	r2, [pc, #124]	@ (800cdec <prvAddNewTaskToReadyList+0xc8>)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cd72:	4b20      	ldr	r3, [pc, #128]	@ (800cdf4 <prvAddNewTaskToReadyList+0xd0>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3301      	adds	r3, #1
 800cd78:	4a1e      	ldr	r2, [pc, #120]	@ (800cdf4 <prvAddNewTaskToReadyList+0xd0>)
 800cd7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cd7c:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf4 <prvAddNewTaskToReadyList+0xd0>)
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd88:	4b1b      	ldr	r3, [pc, #108]	@ (800cdf8 <prvAddNewTaskToReadyList+0xd4>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d903      	bls.n	800cd98 <prvAddNewTaskToReadyList+0x74>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd94:	4a18      	ldr	r2, [pc, #96]	@ (800cdf8 <prvAddNewTaskToReadyList+0xd4>)
 800cd96:	6013      	str	r3, [r2, #0]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd9c:	4613      	mov	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	4413      	add	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4a15      	ldr	r2, [pc, #84]	@ (800cdfc <prvAddNewTaskToReadyList+0xd8>)
 800cda6:	441a      	add	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	3304      	adds	r3, #4
 800cdac:	4619      	mov	r1, r3
 800cdae:	4610      	mov	r0, r2
 800cdb0:	f7ff f81f 	bl	800bdf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cdb4:	f001 fa72 	bl	800e29c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cdb8:	4b0d      	ldr	r3, [pc, #52]	@ (800cdf0 <prvAddNewTaskToReadyList+0xcc>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00e      	beq.n	800cdde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdc0:	4b0a      	ldr	r3, [pc, #40]	@ (800cdec <prvAddNewTaskToReadyList+0xc8>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d207      	bcs.n	800cdde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cdce:	4b0c      	ldr	r3, [pc, #48]	@ (800ce00 <prvAddNewTaskToReadyList+0xdc>)
 800cdd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdde:	bf00      	nop
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	20005658 	.word	0x20005658
 800cdec:	20005184 	.word	0x20005184
 800cdf0:	20005664 	.word	0x20005664
 800cdf4:	20005674 	.word	0x20005674
 800cdf8:	20005660 	.word	0x20005660
 800cdfc:	20005188 	.word	0x20005188
 800ce00:	e000ed04 	.word	0xe000ed04

0800ce04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d018      	beq.n	800ce48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce16:	4b14      	ldr	r3, [pc, #80]	@ (800ce68 <vTaskDelay+0x64>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00b      	beq.n	800ce36 <vTaskDelay+0x32>
	__asm volatile
 800ce1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce22:	f383 8811 	msr	BASEPRI, r3
 800ce26:	f3bf 8f6f 	isb	sy
 800ce2a:	f3bf 8f4f 	dsb	sy
 800ce2e:	60bb      	str	r3, [r7, #8]
}
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
 800ce34:	e7fd      	b.n	800ce32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce36:	f000 f883 	bl	800cf40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 fd1b 	bl	800d878 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce42:	f000 f88b 	bl	800cf5c <xTaskResumeAll>
 800ce46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d107      	bne.n	800ce5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ce4e:	4b07      	ldr	r3, [pc, #28]	@ (800ce6c <vTaskDelay+0x68>)
 800ce50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce54:	601a      	str	r2, [r3, #0]
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce5e:	bf00      	nop
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20005680 	.word	0x20005680
 800ce6c:	e000ed04 	.word	0xe000ed04

0800ce70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b08a      	sub	sp, #40	@ 0x28
 800ce74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce76:	2300      	movs	r3, #0
 800ce78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce7e:	463a      	mov	r2, r7
 800ce80:	1d39      	adds	r1, r7, #4
 800ce82:	f107 0308 	add.w	r3, r7, #8
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fe ff52 	bl	800bd30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	9202      	str	r2, [sp, #8]
 800ce94:	9301      	str	r3, [sp, #4]
 800ce96:	2300      	movs	r3, #0
 800ce98:	9300      	str	r3, [sp, #0]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	460a      	mov	r2, r1
 800ce9e:	4922      	ldr	r1, [pc, #136]	@ (800cf28 <vTaskStartScheduler+0xb8>)
 800cea0:	4822      	ldr	r0, [pc, #136]	@ (800cf2c <vTaskStartScheduler+0xbc>)
 800cea2:	f7ff fe09 	bl	800cab8 <xTaskCreateStatic>
 800cea6:	4603      	mov	r3, r0
 800cea8:	4a21      	ldr	r2, [pc, #132]	@ (800cf30 <vTaskStartScheduler+0xc0>)
 800ceaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ceac:	4b20      	ldr	r3, [pc, #128]	@ (800cf30 <vTaskStartScheduler+0xc0>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	617b      	str	r3, [r7, #20]
 800ceb8:	e001      	b.n	800cebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d102      	bne.n	800ceca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cec4:	f000 fd2c 	bl	800d920 <xTimerCreateTimerTask>
 800cec8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d116      	bne.n	800cefe <vTaskStartScheduler+0x8e>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	613b      	str	r3, [r7, #16]
}
 800cee2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cee4:	4b13      	ldr	r3, [pc, #76]	@ (800cf34 <vTaskStartScheduler+0xc4>)
 800cee6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ceea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ceec:	4b12      	ldr	r3, [pc, #72]	@ (800cf38 <vTaskStartScheduler+0xc8>)
 800ceee:	2201      	movs	r2, #1
 800cef0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cef2:	4b12      	ldr	r3, [pc, #72]	@ (800cf3c <vTaskStartScheduler+0xcc>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cef8:	f001 f8fa 	bl	800e0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cefc:	e00f      	b.n	800cf1e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cf04:	d10b      	bne.n	800cf1e <vTaskStartScheduler+0xae>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	60fb      	str	r3, [r7, #12]
}
 800cf18:	bf00      	nop
 800cf1a:	bf00      	nop
 800cf1c:	e7fd      	b.n	800cf1a <vTaskStartScheduler+0xaa>
}
 800cf1e:	bf00      	nop
 800cf20:	3718      	adds	r7, #24
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	0801d370 	.word	0x0801d370
 800cf2c:	0800d5b1 	.word	0x0800d5b1
 800cf30:	2000567c 	.word	0x2000567c
 800cf34:	20005678 	.word	0x20005678
 800cf38:	20005664 	.word	0x20005664
 800cf3c:	2000565c 	.word	0x2000565c

0800cf40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf40:	b480      	push	{r7}
 800cf42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf44:	4b04      	ldr	r3, [pc, #16]	@ (800cf58 <vTaskSuspendAll+0x18>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	3301      	adds	r3, #1
 800cf4a:	4a03      	ldr	r2, [pc, #12]	@ (800cf58 <vTaskSuspendAll+0x18>)
 800cf4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf4e:	bf00      	nop
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr
 800cf58:	20005680 	.word	0x20005680

0800cf5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf66:	2300      	movs	r3, #0
 800cf68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf6a:	4b42      	ldr	r3, [pc, #264]	@ (800d074 <xTaskResumeAll+0x118>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10b      	bne.n	800cf8a <xTaskResumeAll+0x2e>
	__asm volatile
 800cf72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	603b      	str	r3, [r7, #0]
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop
 800cf88:	e7fd      	b.n	800cf86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf8a:	f001 f955 	bl	800e238 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf8e:	4b39      	ldr	r3, [pc, #228]	@ (800d074 <xTaskResumeAll+0x118>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	3b01      	subs	r3, #1
 800cf94:	4a37      	ldr	r2, [pc, #220]	@ (800d074 <xTaskResumeAll+0x118>)
 800cf96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf98:	4b36      	ldr	r3, [pc, #216]	@ (800d074 <xTaskResumeAll+0x118>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d162      	bne.n	800d066 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfa0:	4b35      	ldr	r3, [pc, #212]	@ (800d078 <xTaskResumeAll+0x11c>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d05e      	beq.n	800d066 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfa8:	e02f      	b.n	800d00a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfaa:	4b34      	ldr	r3, [pc, #208]	@ (800d07c <xTaskResumeAll+0x120>)
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	3318      	adds	r3, #24
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fe ff78 	bl	800beac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe ff73 	bl	800beac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfca:	4b2d      	ldr	r3, [pc, #180]	@ (800d080 <xTaskResumeAll+0x124>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d903      	bls.n	800cfda <xTaskResumeAll+0x7e>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfd6:	4a2a      	ldr	r2, [pc, #168]	@ (800d080 <xTaskResumeAll+0x124>)
 800cfd8:	6013      	str	r3, [r2, #0]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfde:	4613      	mov	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4a27      	ldr	r2, [pc, #156]	@ (800d084 <xTaskResumeAll+0x128>)
 800cfe8:	441a      	add	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	3304      	adds	r3, #4
 800cfee:	4619      	mov	r1, r3
 800cff0:	4610      	mov	r0, r2
 800cff2:	f7fe fefe 	bl	800bdf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cffa:	4b23      	ldr	r3, [pc, #140]	@ (800d088 <xTaskResumeAll+0x12c>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d000:	429a      	cmp	r2, r3
 800d002:	d302      	bcc.n	800d00a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d004:	4b21      	ldr	r3, [pc, #132]	@ (800d08c <xTaskResumeAll+0x130>)
 800d006:	2201      	movs	r2, #1
 800d008:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d00a:	4b1c      	ldr	r3, [pc, #112]	@ (800d07c <xTaskResumeAll+0x120>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1cb      	bne.n	800cfaa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d018:	f000 fb80 	bl	800d71c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d01c:	4b1c      	ldr	r3, [pc, #112]	@ (800d090 <xTaskResumeAll+0x134>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d010      	beq.n	800d04a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d028:	f000 f846 	bl	800d0b8 <xTaskIncrementTick>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d002      	beq.n	800d038 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d032:	4b16      	ldr	r3, [pc, #88]	@ (800d08c <xTaskResumeAll+0x130>)
 800d034:	2201      	movs	r2, #1
 800d036:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	3b01      	subs	r3, #1
 800d03c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1f1      	bne.n	800d028 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d044:	4b12      	ldr	r3, [pc, #72]	@ (800d090 <xTaskResumeAll+0x134>)
 800d046:	2200      	movs	r2, #0
 800d048:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d04a:	4b10      	ldr	r3, [pc, #64]	@ (800d08c <xTaskResumeAll+0x130>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d052:	2301      	movs	r3, #1
 800d054:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d056:	4b0f      	ldr	r3, [pc, #60]	@ (800d094 <xTaskResumeAll+0x138>)
 800d058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d05c:	601a      	str	r2, [r3, #0]
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d066:	f001 f919 	bl	800e29c <vPortExitCritical>

	return xAlreadyYielded;
 800d06a:	68bb      	ldr	r3, [r7, #8]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	20005680 	.word	0x20005680
 800d078:	20005658 	.word	0x20005658
 800d07c:	20005618 	.word	0x20005618
 800d080:	20005660 	.word	0x20005660
 800d084:	20005188 	.word	0x20005188
 800d088:	20005184 	.word	0x20005184
 800d08c:	2000566c 	.word	0x2000566c
 800d090:	20005668 	.word	0x20005668
 800d094:	e000ed04 	.word	0xe000ed04

0800d098 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d09e:	4b05      	ldr	r3, [pc, #20]	@ (800d0b4 <xTaskGetTickCount+0x1c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d0a4:	687b      	ldr	r3, [r7, #4]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	370c      	adds	r7, #12
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
 800d0b2:	bf00      	nop
 800d0b4:	2000565c 	.word	0x2000565c

0800d0b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0c2:	4b4f      	ldr	r3, [pc, #316]	@ (800d200 <xTaskIncrementTick+0x148>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f040 8090 	bne.w	800d1ec <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0cc:	4b4d      	ldr	r3, [pc, #308]	@ (800d204 <xTaskIncrementTick+0x14c>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0d4:	4a4b      	ldr	r2, [pc, #300]	@ (800d204 <xTaskIncrementTick+0x14c>)
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d121      	bne.n	800d124 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d0e0:	4b49      	ldr	r3, [pc, #292]	@ (800d208 <xTaskIncrementTick+0x150>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d00b      	beq.n	800d102 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	603b      	str	r3, [r7, #0]
}
 800d0fc:	bf00      	nop
 800d0fe:	bf00      	nop
 800d100:	e7fd      	b.n	800d0fe <xTaskIncrementTick+0x46>
 800d102:	4b41      	ldr	r3, [pc, #260]	@ (800d208 <xTaskIncrementTick+0x150>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	4b40      	ldr	r3, [pc, #256]	@ (800d20c <xTaskIncrementTick+0x154>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a3e      	ldr	r2, [pc, #248]	@ (800d208 <xTaskIncrementTick+0x150>)
 800d10e:	6013      	str	r3, [r2, #0]
 800d110:	4a3e      	ldr	r2, [pc, #248]	@ (800d20c <xTaskIncrementTick+0x154>)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6013      	str	r3, [r2, #0]
 800d116:	4b3e      	ldr	r3, [pc, #248]	@ (800d210 <xTaskIncrementTick+0x158>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	3301      	adds	r3, #1
 800d11c:	4a3c      	ldr	r2, [pc, #240]	@ (800d210 <xTaskIncrementTick+0x158>)
 800d11e:	6013      	str	r3, [r2, #0]
 800d120:	f000 fafc 	bl	800d71c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d124:	4b3b      	ldr	r3, [pc, #236]	@ (800d214 <xTaskIncrementTick+0x15c>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d349      	bcc.n	800d1c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d12e:	4b36      	ldr	r3, [pc, #216]	@ (800d208 <xTaskIncrementTick+0x150>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d104      	bne.n	800d142 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d138:	4b36      	ldr	r3, [pc, #216]	@ (800d214 <xTaskIncrementTick+0x15c>)
 800d13a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d13e:	601a      	str	r2, [r3, #0]
					break;
 800d140:	e03f      	b.n	800d1c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d142:	4b31      	ldr	r3, [pc, #196]	@ (800d208 <xTaskIncrementTick+0x150>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	685b      	ldr	r3, [r3, #4]
 800d150:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d152:	693a      	ldr	r2, [r7, #16]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	429a      	cmp	r2, r3
 800d158:	d203      	bcs.n	800d162 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d15a:	4a2e      	ldr	r2, [pc, #184]	@ (800d214 <xTaskIncrementTick+0x15c>)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d160:	e02f      	b.n	800d1c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	3304      	adds	r3, #4
 800d166:	4618      	mov	r0, r3
 800d168:	f7fe fea0 	bl	800beac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d170:	2b00      	cmp	r3, #0
 800d172:	d004      	beq.n	800d17e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	3318      	adds	r3, #24
 800d178:	4618      	mov	r0, r3
 800d17a:	f7fe fe97 	bl	800beac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d182:	4b25      	ldr	r3, [pc, #148]	@ (800d218 <xTaskIncrementTick+0x160>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	429a      	cmp	r2, r3
 800d188:	d903      	bls.n	800d192 <xTaskIncrementTick+0xda>
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d18e:	4a22      	ldr	r2, [pc, #136]	@ (800d218 <xTaskIncrementTick+0x160>)
 800d190:	6013      	str	r3, [r2, #0]
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d196:	4613      	mov	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4a1f      	ldr	r2, [pc, #124]	@ (800d21c <xTaskIncrementTick+0x164>)
 800d1a0:	441a      	add	r2, r3
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	f7fe fe22 	bl	800bdf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1b2:	4b1b      	ldr	r3, [pc, #108]	@ (800d220 <xTaskIncrementTick+0x168>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d3b8      	bcc.n	800d12e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1c0:	e7b5      	b.n	800d12e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1c2:	4b17      	ldr	r3, [pc, #92]	@ (800d220 <xTaskIncrementTick+0x168>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1c8:	4914      	ldr	r1, [pc, #80]	@ (800d21c <xTaskIncrementTick+0x164>)
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	4413      	add	r3, r2
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	440b      	add	r3, r1
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d901      	bls.n	800d1de <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d1de:	4b11      	ldr	r3, [pc, #68]	@ (800d224 <xTaskIncrementTick+0x16c>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d007      	beq.n	800d1f6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	617b      	str	r3, [r7, #20]
 800d1ea:	e004      	b.n	800d1f6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d228 <xTaskIncrementTick+0x170>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	4a0d      	ldr	r2, [pc, #52]	@ (800d228 <xTaskIncrementTick+0x170>)
 800d1f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d1f6:	697b      	ldr	r3, [r7, #20]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3718      	adds	r7, #24
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	20005680 	.word	0x20005680
 800d204:	2000565c 	.word	0x2000565c
 800d208:	20005610 	.word	0x20005610
 800d20c:	20005614 	.word	0x20005614
 800d210:	20005670 	.word	0x20005670
 800d214:	20005678 	.word	0x20005678
 800d218:	20005660 	.word	0x20005660
 800d21c:	20005188 	.word	0x20005188
 800d220:	20005184 	.word	0x20005184
 800d224:	2000566c 	.word	0x2000566c
 800d228:	20005668 	.word	0x20005668

0800d22c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d22c:	b480      	push	{r7}
 800d22e:	b085      	sub	sp, #20
 800d230:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d232:	4b28      	ldr	r3, [pc, #160]	@ (800d2d4 <vTaskSwitchContext+0xa8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d003      	beq.n	800d242 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d23a:	4b27      	ldr	r3, [pc, #156]	@ (800d2d8 <vTaskSwitchContext+0xac>)
 800d23c:	2201      	movs	r2, #1
 800d23e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d240:	e042      	b.n	800d2c8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800d242:	4b25      	ldr	r3, [pc, #148]	@ (800d2d8 <vTaskSwitchContext+0xac>)
 800d244:	2200      	movs	r2, #0
 800d246:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d248:	4b24      	ldr	r3, [pc, #144]	@ (800d2dc <vTaskSwitchContext+0xb0>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	60fb      	str	r3, [r7, #12]
 800d24e:	e011      	b.n	800d274 <vTaskSwitchContext+0x48>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d10b      	bne.n	800d26e <vTaskSwitchContext+0x42>
	__asm volatile
 800d256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d25a:	f383 8811 	msr	BASEPRI, r3
 800d25e:	f3bf 8f6f 	isb	sy
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	607b      	str	r3, [r7, #4]
}
 800d268:	bf00      	nop
 800d26a:	bf00      	nop
 800d26c:	e7fd      	b.n	800d26a <vTaskSwitchContext+0x3e>
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	3b01      	subs	r3, #1
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	491a      	ldr	r1, [pc, #104]	@ (800d2e0 <vTaskSwitchContext+0xb4>)
 800d276:	68fa      	ldr	r2, [r7, #12]
 800d278:	4613      	mov	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	4413      	add	r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	440b      	add	r3, r1
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d0e3      	beq.n	800d250 <vTaskSwitchContext+0x24>
 800d288:	68fa      	ldr	r2, [r7, #12]
 800d28a:	4613      	mov	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4413      	add	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4a13      	ldr	r2, [pc, #76]	@ (800d2e0 <vTaskSwitchContext+0xb4>)
 800d294:	4413      	add	r3, r2
 800d296:	60bb      	str	r3, [r7, #8]
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	685a      	ldr	r2, [r3, #4]
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	605a      	str	r2, [r3, #4]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d104      	bne.n	800d2b8 <vTaskSwitchContext+0x8c>
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	685a      	ldr	r2, [r3, #4]
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	605a      	str	r2, [r3, #4]
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	68db      	ldr	r3, [r3, #12]
 800d2be:	4a09      	ldr	r2, [pc, #36]	@ (800d2e4 <vTaskSwitchContext+0xb8>)
 800d2c0:	6013      	str	r3, [r2, #0]
 800d2c2:	4a06      	ldr	r2, [pc, #24]	@ (800d2dc <vTaskSwitchContext+0xb0>)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6013      	str	r3, [r2, #0]
}
 800d2c8:	bf00      	nop
 800d2ca:	3714      	adds	r7, #20
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	20005680 	.word	0x20005680
 800d2d8:	2000566c 	.word	0x2000566c
 800d2dc:	20005660 	.word	0x20005660
 800d2e0:	20005188 	.word	0x20005188
 800d2e4:	20005184 	.word	0x20005184

0800d2e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10b      	bne.n	800d310 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	60fb      	str	r3, [r7, #12]
}
 800d30a:	bf00      	nop
 800d30c:	bf00      	nop
 800d30e:	e7fd      	b.n	800d30c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d310:	4b07      	ldr	r3, [pc, #28]	@ (800d330 <vTaskPlaceOnEventList+0x48>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3318      	adds	r3, #24
 800d316:	4619      	mov	r1, r3
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7fe fd8e 	bl	800be3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d31e:	2101      	movs	r1, #1
 800d320:	6838      	ldr	r0, [r7, #0]
 800d322:	f000 faa9 	bl	800d878 <prvAddCurrentTaskToDelayedList>
}
 800d326:	bf00      	nop
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	20005184 	.word	0x20005184

0800d334 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10b      	bne.n	800d35e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d34a:	f383 8811 	msr	BASEPRI, r3
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f3bf 8f4f 	dsb	sy
 800d356:	617b      	str	r3, [r7, #20]
}
 800d358:	bf00      	nop
 800d35a:	bf00      	nop
 800d35c:	e7fd      	b.n	800d35a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d35e:	4b0a      	ldr	r3, [pc, #40]	@ (800d388 <vTaskPlaceOnEventListRestricted+0x54>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3318      	adds	r3, #24
 800d364:	4619      	mov	r1, r3
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f7fe fd43 	bl	800bdf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d002      	beq.n	800d378 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d372:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d376:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d378:	6879      	ldr	r1, [r7, #4]
 800d37a:	68b8      	ldr	r0, [r7, #8]
 800d37c:	f000 fa7c 	bl	800d878 <prvAddCurrentTaskToDelayedList>
	}
 800d380:	bf00      	nop
 800d382:	3718      	adds	r7, #24
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	20005184 	.word	0x20005184

0800d38c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b086      	sub	sp, #24
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10b      	bne.n	800d3ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	60fb      	str	r3, [r7, #12]
}
 800d3b4:	bf00      	nop
 800d3b6:	bf00      	nop
 800d3b8:	e7fd      	b.n	800d3b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	3318      	adds	r3, #24
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fe fd74 	bl	800beac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3c4:	4b1d      	ldr	r3, [pc, #116]	@ (800d43c <xTaskRemoveFromEventList+0xb0>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d11d      	bne.n	800d408 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	3304      	adds	r3, #4
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7fe fd6b 	bl	800beac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3da:	4b19      	ldr	r3, [pc, #100]	@ (800d440 <xTaskRemoveFromEventList+0xb4>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d903      	bls.n	800d3ea <xTaskRemoveFromEventList+0x5e>
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e6:	4a16      	ldr	r2, [pc, #88]	@ (800d440 <xTaskRemoveFromEventList+0xb4>)
 800d3e8:	6013      	str	r3, [r2, #0]
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4a13      	ldr	r2, [pc, #76]	@ (800d444 <xTaskRemoveFromEventList+0xb8>)
 800d3f8:	441a      	add	r2, r3
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f7fe fcf6 	bl	800bdf2 <vListInsertEnd>
 800d406:	e005      	b.n	800d414 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	3318      	adds	r3, #24
 800d40c:	4619      	mov	r1, r3
 800d40e:	480e      	ldr	r0, [pc, #56]	@ (800d448 <xTaskRemoveFromEventList+0xbc>)
 800d410:	f7fe fcef 	bl	800bdf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d418:	4b0c      	ldr	r3, [pc, #48]	@ (800d44c <xTaskRemoveFromEventList+0xc0>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d41e:	429a      	cmp	r2, r3
 800d420:	d905      	bls.n	800d42e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d422:	2301      	movs	r3, #1
 800d424:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d426:	4b0a      	ldr	r3, [pc, #40]	@ (800d450 <xTaskRemoveFromEventList+0xc4>)
 800d428:	2201      	movs	r2, #1
 800d42a:	601a      	str	r2, [r3, #0]
 800d42c:	e001      	b.n	800d432 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d42e:	2300      	movs	r3, #0
 800d430:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d432:	697b      	ldr	r3, [r7, #20]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	20005680 	.word	0x20005680
 800d440:	20005660 	.word	0x20005660
 800d444:	20005188 	.word	0x20005188
 800d448:	20005618 	.word	0x20005618
 800d44c:	20005184 	.word	0x20005184
 800d450:	2000566c 	.word	0x2000566c

0800d454 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10b      	bne.n	800d47a <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	60fb      	str	r3, [r7, #12]
}
 800d474:	bf00      	nop
 800d476:	bf00      	nop
 800d478:	e7fd      	b.n	800d476 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d47a:	f000 fedd 	bl	800e238 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d47e:	4b07      	ldr	r3, [pc, #28]	@ (800d49c <vTaskSetTimeOutState+0x48>)
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d486:	4b06      	ldr	r3, [pc, #24]	@ (800d4a0 <vTaskSetTimeOutState+0x4c>)
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d48e:	f000 ff05 	bl	800e29c <vPortExitCritical>
}
 800d492:	bf00      	nop
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	20005670 	.word	0x20005670
 800d4a0:	2000565c 	.word	0x2000565c

0800d4a4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d4ac:	4b06      	ldr	r3, [pc, #24]	@ (800d4c8 <vTaskInternalSetTimeOutState+0x24>)
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d4b4:	4b05      	ldr	r3, [pc, #20]	@ (800d4cc <vTaskInternalSetTimeOutState+0x28>)
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	605a      	str	r2, [r3, #4]
}
 800d4bc:	bf00      	nop
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	20005670 	.word	0x20005670
 800d4cc:	2000565c 	.word	0x2000565c

0800d4d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b088      	sub	sp, #32
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d10b      	bne.n	800d4f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	613b      	str	r3, [r7, #16]
}
 800d4f2:	bf00      	nop
 800d4f4:	bf00      	nop
 800d4f6:	e7fd      	b.n	800d4f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10b      	bne.n	800d516 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	60fb      	str	r3, [r7, #12]
}
 800d510:	bf00      	nop
 800d512:	bf00      	nop
 800d514:	e7fd      	b.n	800d512 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d516:	f000 fe8f 	bl	800e238 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d51a:	4b1d      	ldr	r3, [pc, #116]	@ (800d590 <xTaskCheckForTimeOut+0xc0>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	69ba      	ldr	r2, [r7, #24]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d532:	d102      	bne.n	800d53a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d534:	2300      	movs	r3, #0
 800d536:	61fb      	str	r3, [r7, #28]
 800d538:	e023      	b.n	800d582 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	4b15      	ldr	r3, [pc, #84]	@ (800d594 <xTaskCheckForTimeOut+0xc4>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	429a      	cmp	r2, r3
 800d544:	d007      	beq.n	800d556 <xTaskCheckForTimeOut+0x86>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d302      	bcc.n	800d556 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d550:	2301      	movs	r3, #1
 800d552:	61fb      	str	r3, [r7, #28]
 800d554:	e015      	b.n	800d582 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	697a      	ldr	r2, [r7, #20]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d20b      	bcs.n	800d578 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	1ad2      	subs	r2, r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff ff99 	bl	800d4a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d572:	2300      	movs	r3, #0
 800d574:	61fb      	str	r3, [r7, #28]
 800d576:	e004      	b.n	800d582 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2200      	movs	r2, #0
 800d57c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d57e:	2301      	movs	r3, #1
 800d580:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d582:	f000 fe8b 	bl	800e29c <vPortExitCritical>

	return xReturn;
 800d586:	69fb      	ldr	r3, [r7, #28]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3720      	adds	r7, #32
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	2000565c 	.word	0x2000565c
 800d594:	20005670 	.word	0x20005670

0800d598 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d598:	b480      	push	{r7}
 800d59a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d59c:	4b03      	ldr	r3, [pc, #12]	@ (800d5ac <vTaskMissedYield+0x14>)
 800d59e:	2201      	movs	r2, #1
 800d5a0:	601a      	str	r2, [r3, #0]
}
 800d5a2:	bf00      	nop
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	2000566c 	.word	0x2000566c

0800d5b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d5b8:	f000 f852 	bl	800d660 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d5bc:	4b06      	ldr	r3, [pc, #24]	@ (800d5d8 <prvIdleTask+0x28>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d9f9      	bls.n	800d5b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d5c4:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <prvIdleTask+0x2c>)
 800d5c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5ca:	601a      	str	r2, [r3, #0]
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d5d4:	e7f0      	b.n	800d5b8 <prvIdleTask+0x8>
 800d5d6:	bf00      	nop
 800d5d8:	20005188 	.word	0x20005188
 800d5dc:	e000ed04 	.word	0xe000ed04

0800d5e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	607b      	str	r3, [r7, #4]
 800d5ea:	e00c      	b.n	800d606 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	009b      	lsls	r3, r3, #2
 800d5f2:	4413      	add	r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	4a12      	ldr	r2, [pc, #72]	@ (800d640 <prvInitialiseTaskLists+0x60>)
 800d5f8:	4413      	add	r3, r2
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fe fbcc 	bl	800bd98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	3301      	adds	r3, #1
 800d604:	607b      	str	r3, [r7, #4]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2b37      	cmp	r3, #55	@ 0x37
 800d60a:	d9ef      	bls.n	800d5ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d60c:	480d      	ldr	r0, [pc, #52]	@ (800d644 <prvInitialiseTaskLists+0x64>)
 800d60e:	f7fe fbc3 	bl	800bd98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d612:	480d      	ldr	r0, [pc, #52]	@ (800d648 <prvInitialiseTaskLists+0x68>)
 800d614:	f7fe fbc0 	bl	800bd98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d618:	480c      	ldr	r0, [pc, #48]	@ (800d64c <prvInitialiseTaskLists+0x6c>)
 800d61a:	f7fe fbbd 	bl	800bd98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d61e:	480c      	ldr	r0, [pc, #48]	@ (800d650 <prvInitialiseTaskLists+0x70>)
 800d620:	f7fe fbba 	bl	800bd98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d624:	480b      	ldr	r0, [pc, #44]	@ (800d654 <prvInitialiseTaskLists+0x74>)
 800d626:	f7fe fbb7 	bl	800bd98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d62a:	4b0b      	ldr	r3, [pc, #44]	@ (800d658 <prvInitialiseTaskLists+0x78>)
 800d62c:	4a05      	ldr	r2, [pc, #20]	@ (800d644 <prvInitialiseTaskLists+0x64>)
 800d62e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d630:	4b0a      	ldr	r3, [pc, #40]	@ (800d65c <prvInitialiseTaskLists+0x7c>)
 800d632:	4a05      	ldr	r2, [pc, #20]	@ (800d648 <prvInitialiseTaskLists+0x68>)
 800d634:	601a      	str	r2, [r3, #0]
}
 800d636:	bf00      	nop
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	20005188 	.word	0x20005188
 800d644:	200055e8 	.word	0x200055e8
 800d648:	200055fc 	.word	0x200055fc
 800d64c:	20005618 	.word	0x20005618
 800d650:	2000562c 	.word	0x2000562c
 800d654:	20005644 	.word	0x20005644
 800d658:	20005610 	.word	0x20005610
 800d65c:	20005614 	.word	0x20005614

0800d660 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d666:	e019      	b.n	800d69c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d668:	f000 fde6 	bl	800e238 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d66c:	4b10      	ldr	r3, [pc, #64]	@ (800d6b0 <prvCheckTasksWaitingTermination+0x50>)
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3304      	adds	r3, #4
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fe fc17 	bl	800beac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d67e:	4b0d      	ldr	r3, [pc, #52]	@ (800d6b4 <prvCheckTasksWaitingTermination+0x54>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	3b01      	subs	r3, #1
 800d684:	4a0b      	ldr	r2, [pc, #44]	@ (800d6b4 <prvCheckTasksWaitingTermination+0x54>)
 800d686:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d688:	4b0b      	ldr	r3, [pc, #44]	@ (800d6b8 <prvCheckTasksWaitingTermination+0x58>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	4a0a      	ldr	r2, [pc, #40]	@ (800d6b8 <prvCheckTasksWaitingTermination+0x58>)
 800d690:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d692:	f000 fe03 	bl	800e29c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f810 	bl	800d6bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d69c:	4b06      	ldr	r3, [pc, #24]	@ (800d6b8 <prvCheckTasksWaitingTermination+0x58>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1e1      	bne.n	800d668 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	2000562c 	.word	0x2000562c
 800d6b4:	20005658 	.word	0x20005658
 800d6b8:	20005640 	.word	0x20005640

0800d6bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d108      	bne.n	800d6e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 ffa0 	bl	800e618 <vPortFree>
				vPortFree( pxTCB );
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 ff9d 	bl	800e618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d6de:	e019      	b.n	800d714 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d103      	bne.n	800d6f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 ff94 	bl	800e618 <vPortFree>
	}
 800d6f0:	e010      	b.n	800d714 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d00b      	beq.n	800d714 <prvDeleteTCB+0x58>
	__asm volatile
 800d6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d700:	f383 8811 	msr	BASEPRI, r3
 800d704:	f3bf 8f6f 	isb	sy
 800d708:	f3bf 8f4f 	dsb	sy
 800d70c:	60fb      	str	r3, [r7, #12]
}
 800d70e:	bf00      	nop
 800d710:	bf00      	nop
 800d712:	e7fd      	b.n	800d710 <prvDeleteTCB+0x54>
	}
 800d714:	bf00      	nop
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d722:	4b0c      	ldr	r3, [pc, #48]	@ (800d754 <prvResetNextTaskUnblockTime+0x38>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d104      	bne.n	800d736 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d72c:	4b0a      	ldr	r3, [pc, #40]	@ (800d758 <prvResetNextTaskUnblockTime+0x3c>)
 800d72e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d732:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d734:	e008      	b.n	800d748 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d736:	4b07      	ldr	r3, [pc, #28]	@ (800d754 <prvResetNextTaskUnblockTime+0x38>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	4a04      	ldr	r2, [pc, #16]	@ (800d758 <prvResetNextTaskUnblockTime+0x3c>)
 800d746:	6013      	str	r3, [r2, #0]
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr
 800d754:	20005610 	.word	0x20005610
 800d758:	20005678 	.word	0x20005678

0800d75c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d762:	4b0b      	ldr	r3, [pc, #44]	@ (800d790 <xTaskGetSchedulerState+0x34>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d102      	bne.n	800d770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d76a:	2301      	movs	r3, #1
 800d76c:	607b      	str	r3, [r7, #4]
 800d76e:	e008      	b.n	800d782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d770:	4b08      	ldr	r3, [pc, #32]	@ (800d794 <xTaskGetSchedulerState+0x38>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d102      	bne.n	800d77e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d778:	2302      	movs	r3, #2
 800d77a:	607b      	str	r3, [r7, #4]
 800d77c:	e001      	b.n	800d782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d77e:	2300      	movs	r3, #0
 800d780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d782:	687b      	ldr	r3, [r7, #4]
	}
 800d784:	4618      	mov	r0, r3
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr
 800d790:	20005664 	.word	0x20005664
 800d794:	20005680 	.word	0x20005680

0800d798 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d058      	beq.n	800d860 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d7ae:	4b2f      	ldr	r3, [pc, #188]	@ (800d86c <xTaskPriorityDisinherit+0xd4>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	693a      	ldr	r2, [r7, #16]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d00b      	beq.n	800d7d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d7b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7bc:	f383 8811 	msr	BASEPRI, r3
 800d7c0:	f3bf 8f6f 	isb	sy
 800d7c4:	f3bf 8f4f 	dsb	sy
 800d7c8:	60fb      	str	r3, [r7, #12]
}
 800d7ca:	bf00      	nop
 800d7cc:	bf00      	nop
 800d7ce:	e7fd      	b.n	800d7cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d10b      	bne.n	800d7f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7dc:	f383 8811 	msr	BASEPRI, r3
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	60bb      	str	r3, [r7, #8]
}
 800d7ea:	bf00      	nop
 800d7ec:	bf00      	nop
 800d7ee:	e7fd      	b.n	800d7ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7f4:	1e5a      	subs	r2, r3, #1
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d802:	429a      	cmp	r2, r3
 800d804:	d02c      	beq.n	800d860 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d128      	bne.n	800d860 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	3304      	adds	r3, #4
 800d812:	4618      	mov	r0, r3
 800d814:	f7fe fb4a 	bl	800beac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d824:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d830:	4b0f      	ldr	r3, [pc, #60]	@ (800d870 <xTaskPriorityDisinherit+0xd8>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	429a      	cmp	r2, r3
 800d836:	d903      	bls.n	800d840 <xTaskPriorityDisinherit+0xa8>
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d83c:	4a0c      	ldr	r2, [pc, #48]	@ (800d870 <xTaskPriorityDisinherit+0xd8>)
 800d83e:	6013      	str	r3, [r2, #0]
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d844:	4613      	mov	r3, r2
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	4413      	add	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4a09      	ldr	r2, [pc, #36]	@ (800d874 <xTaskPriorityDisinherit+0xdc>)
 800d84e:	441a      	add	r2, r3
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	3304      	adds	r3, #4
 800d854:	4619      	mov	r1, r3
 800d856:	4610      	mov	r0, r2
 800d858:	f7fe facb 	bl	800bdf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d85c:	2301      	movs	r3, #1
 800d85e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d860:	697b      	ldr	r3, [r7, #20]
	}
 800d862:	4618      	mov	r0, r3
 800d864:	3718      	adds	r7, #24
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	20005184 	.word	0x20005184
 800d870:	20005660 	.word	0x20005660
 800d874:	20005188 	.word	0x20005188

0800d878 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d882:	4b21      	ldr	r3, [pc, #132]	@ (800d908 <prvAddCurrentTaskToDelayedList+0x90>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d888:	4b20      	ldr	r3, [pc, #128]	@ (800d90c <prvAddCurrentTaskToDelayedList+0x94>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	3304      	adds	r3, #4
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fe fb0c 	bl	800beac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d89a:	d10a      	bne.n	800d8b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d007      	beq.n	800d8b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8a2:	4b1a      	ldr	r3, [pc, #104]	@ (800d90c <prvAddCurrentTaskToDelayedList+0x94>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	3304      	adds	r3, #4
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4819      	ldr	r0, [pc, #100]	@ (800d910 <prvAddCurrentTaskToDelayedList+0x98>)
 800d8ac:	f7fe faa1 	bl	800bdf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d8b0:	e026      	b.n	800d900 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d8ba:	4b14      	ldr	r3, [pc, #80]	@ (800d90c <prvAddCurrentTaskToDelayedList+0x94>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d209      	bcs.n	800d8de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8ca:	4b12      	ldr	r3, [pc, #72]	@ (800d914 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d90c <prvAddCurrentTaskToDelayedList+0x94>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3304      	adds	r3, #4
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	4610      	mov	r0, r2
 800d8d8:	f7fe faaf 	bl	800be3a <vListInsert>
}
 800d8dc:	e010      	b.n	800d900 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8de:	4b0e      	ldr	r3, [pc, #56]	@ (800d918 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800d90c <prvAddCurrentTaskToDelayedList+0x94>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	f7fe faa5 	bl	800be3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d91c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	68ba      	ldr	r2, [r7, #8]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d202      	bcs.n	800d900 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d8fa:	4a08      	ldr	r2, [pc, #32]	@ (800d91c <prvAddCurrentTaskToDelayedList+0xa4>)
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	6013      	str	r3, [r2, #0]
}
 800d900:	bf00      	nop
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	2000565c 	.word	0x2000565c
 800d90c:	20005184 	.word	0x20005184
 800d910:	20005644 	.word	0x20005644
 800d914:	20005614 	.word	0x20005614
 800d918:	20005610 	.word	0x20005610
 800d91c:	20005678 	.word	0x20005678

0800d920 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08a      	sub	sp, #40	@ 0x28
 800d924:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d926:	2300      	movs	r3, #0
 800d928:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d92a:	f000 fb13 	bl	800df54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d92e:	4b1d      	ldr	r3, [pc, #116]	@ (800d9a4 <xTimerCreateTimerTask+0x84>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d021      	beq.n	800d97a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d936:	2300      	movs	r3, #0
 800d938:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d93a:	2300      	movs	r3, #0
 800d93c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d93e:	1d3a      	adds	r2, r7, #4
 800d940:	f107 0108 	add.w	r1, r7, #8
 800d944:	f107 030c 	add.w	r3, r7, #12
 800d948:	4618      	mov	r0, r3
 800d94a:	f7fe fa0b 	bl	800bd64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d94e:	6879      	ldr	r1, [r7, #4]
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	9202      	str	r2, [sp, #8]
 800d956:	9301      	str	r3, [sp, #4]
 800d958:	2302      	movs	r3, #2
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	2300      	movs	r3, #0
 800d95e:	460a      	mov	r2, r1
 800d960:	4911      	ldr	r1, [pc, #68]	@ (800d9a8 <xTimerCreateTimerTask+0x88>)
 800d962:	4812      	ldr	r0, [pc, #72]	@ (800d9ac <xTimerCreateTimerTask+0x8c>)
 800d964:	f7ff f8a8 	bl	800cab8 <xTaskCreateStatic>
 800d968:	4603      	mov	r3, r0
 800d96a:	4a11      	ldr	r2, [pc, #68]	@ (800d9b0 <xTimerCreateTimerTask+0x90>)
 800d96c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d96e:	4b10      	ldr	r3, [pc, #64]	@ (800d9b0 <xTimerCreateTimerTask+0x90>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d001      	beq.n	800d97a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d976:	2301      	movs	r3, #1
 800d978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d10b      	bne.n	800d998 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	613b      	str	r3, [r7, #16]
}
 800d992:	bf00      	nop
 800d994:	bf00      	nop
 800d996:	e7fd      	b.n	800d994 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d998:	697b      	ldr	r3, [r7, #20]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3718      	adds	r7, #24
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	200056b4 	.word	0x200056b4
 800d9a8:	0801d378 	.word	0x0801d378
 800d9ac:	0800daed 	.word	0x0800daed
 800d9b0:	200056b8 	.word	0x200056b8

0800d9b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b08a      	sub	sp, #40	@ 0x28
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
 800d9c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10b      	bne.n	800d9e4 <xTimerGenericCommand+0x30>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	623b      	str	r3, [r7, #32]
}
 800d9de:	bf00      	nop
 800d9e0:	bf00      	nop
 800d9e2:	e7fd      	b.n	800d9e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d9e4:	4b19      	ldr	r3, [pc, #100]	@ (800da4c <xTimerGenericCommand+0x98>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d02a      	beq.n	800da42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	2b05      	cmp	r3, #5
 800d9fc:	dc18      	bgt.n	800da30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d9fe:	f7ff fead 	bl	800d75c <xTaskGetSchedulerState>
 800da02:	4603      	mov	r3, r0
 800da04:	2b02      	cmp	r3, #2
 800da06:	d109      	bne.n	800da1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800da08:	4b10      	ldr	r3, [pc, #64]	@ (800da4c <xTimerGenericCommand+0x98>)
 800da0a:	6818      	ldr	r0, [r3, #0]
 800da0c:	f107 0110 	add.w	r1, r7, #16
 800da10:	2300      	movs	r3, #0
 800da12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da14:	f7fe fbba 	bl	800c18c <xQueueGenericSend>
 800da18:	6278      	str	r0, [r7, #36]	@ 0x24
 800da1a:	e012      	b.n	800da42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da1c:	4b0b      	ldr	r3, [pc, #44]	@ (800da4c <xTimerGenericCommand+0x98>)
 800da1e:	6818      	ldr	r0, [r3, #0]
 800da20:	f107 0110 	add.w	r1, r7, #16
 800da24:	2300      	movs	r3, #0
 800da26:	2200      	movs	r2, #0
 800da28:	f7fe fbb0 	bl	800c18c <xQueueGenericSend>
 800da2c:	6278      	str	r0, [r7, #36]	@ 0x24
 800da2e:	e008      	b.n	800da42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800da30:	4b06      	ldr	r3, [pc, #24]	@ (800da4c <xTimerGenericCommand+0x98>)
 800da32:	6818      	ldr	r0, [r3, #0]
 800da34:	f107 0110 	add.w	r1, r7, #16
 800da38:	2300      	movs	r3, #0
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	f7fe fca8 	bl	800c390 <xQueueGenericSendFromISR>
 800da40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800da42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800da44:	4618      	mov	r0, r3
 800da46:	3728      	adds	r7, #40	@ 0x28
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	200056b4 	.word	0x200056b4

0800da50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b088      	sub	sp, #32
 800da54:	af02      	add	r7, sp, #8
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da5a:	4b23      	ldr	r3, [pc, #140]	@ (800dae8 <prvProcessExpiredTimer+0x98>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	3304      	adds	r3, #4
 800da68:	4618      	mov	r0, r3
 800da6a:	f7fe fa1f 	bl	800beac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da74:	f003 0304 	and.w	r3, r3, #4
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d023      	beq.n	800dac4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	699a      	ldr	r2, [r3, #24]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	18d1      	adds	r1, r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	6978      	ldr	r0, [r7, #20]
 800da8a:	f000 f8d5 	bl	800dc38 <prvInsertTimerInActiveList>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d020      	beq.n	800dad6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800da94:	2300      	movs	r3, #0
 800da96:	9300      	str	r3, [sp, #0]
 800da98:	2300      	movs	r3, #0
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	2100      	movs	r1, #0
 800da9e:	6978      	ldr	r0, [r7, #20]
 800daa0:	f7ff ff88 	bl	800d9b4 <xTimerGenericCommand>
 800daa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d114      	bne.n	800dad6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800daac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	60fb      	str	r3, [r7, #12]
}
 800dabe:	bf00      	nop
 800dac0:	bf00      	nop
 800dac2:	e7fd      	b.n	800dac0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800daca:	f023 0301 	bic.w	r3, r3, #1
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	6978      	ldr	r0, [r7, #20]
 800dadc:	4798      	blx	r3
}
 800dade:	bf00      	nop
 800dae0:	3718      	adds	r7, #24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	200056ac 	.word	0x200056ac

0800daec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800daf4:	f107 0308 	add.w	r3, r7, #8
 800daf8:	4618      	mov	r0, r3
 800dafa:	f000 f859 	bl	800dbb0 <prvGetNextExpireTime>
 800dafe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	4619      	mov	r1, r3
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f000 f805 	bl	800db14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800db0a:	f000 f8d7 	bl	800dcbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800db0e:	bf00      	nop
 800db10:	e7f0      	b.n	800daf4 <prvTimerTask+0x8>
	...

0800db14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800db1e:	f7ff fa0f 	bl	800cf40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db22:	f107 0308 	add.w	r3, r7, #8
 800db26:	4618      	mov	r0, r3
 800db28:	f000 f866 	bl	800dbf8 <prvSampleTimeNow>
 800db2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d130      	bne.n	800db96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d10a      	bne.n	800db50 <prvProcessTimerOrBlockTask+0x3c>
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d806      	bhi.n	800db50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800db42:	f7ff fa0b 	bl	800cf5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800db46:	68f9      	ldr	r1, [r7, #12]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7ff ff81 	bl	800da50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800db4e:	e024      	b.n	800db9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d008      	beq.n	800db68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800db56:	4b13      	ldr	r3, [pc, #76]	@ (800dba4 <prvProcessTimerOrBlockTask+0x90>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d101      	bne.n	800db64 <prvProcessTimerOrBlockTask+0x50>
 800db60:	2301      	movs	r3, #1
 800db62:	e000      	b.n	800db66 <prvProcessTimerOrBlockTask+0x52>
 800db64:	2300      	movs	r3, #0
 800db66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800db68:	4b0f      	ldr	r3, [pc, #60]	@ (800dba8 <prvProcessTimerOrBlockTask+0x94>)
 800db6a:	6818      	ldr	r0, [r3, #0]
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	4619      	mov	r1, r3
 800db76:	f7fe ff6b 	bl	800ca50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800db7a:	f7ff f9ef 	bl	800cf5c <xTaskResumeAll>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10a      	bne.n	800db9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800db84:	4b09      	ldr	r3, [pc, #36]	@ (800dbac <prvProcessTimerOrBlockTask+0x98>)
 800db86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db8a:	601a      	str	r2, [r3, #0]
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	f3bf 8f6f 	isb	sy
}
 800db94:	e001      	b.n	800db9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800db96:	f7ff f9e1 	bl	800cf5c <xTaskResumeAll>
}
 800db9a:	bf00      	nop
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	200056b0 	.word	0x200056b0
 800dba8:	200056b4 	.word	0x200056b4
 800dbac:	e000ed04 	.word	0xe000ed04

0800dbb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dbb8:	4b0e      	ldr	r3, [pc, #56]	@ (800dbf4 <prvGetNextExpireTime+0x44>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d101      	bne.n	800dbc6 <prvGetNextExpireTime+0x16>
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	e000      	b.n	800dbc8 <prvGetNextExpireTime+0x18>
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d105      	bne.n	800dbe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dbd4:	4b07      	ldr	r3, [pc, #28]	@ (800dbf4 <prvGetNextExpireTime+0x44>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68db      	ldr	r3, [r3, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	60fb      	str	r3, [r7, #12]
 800dbde:	e001      	b.n	800dbe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	200056ac 	.word	0x200056ac

0800dbf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dc00:	f7ff fa4a 	bl	800d098 <xTaskGetTickCount>
 800dc04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dc06:	4b0b      	ldr	r3, [pc, #44]	@ (800dc34 <prvSampleTimeNow+0x3c>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d205      	bcs.n	800dc1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dc10:	f000 f93a 	bl	800de88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	601a      	str	r2, [r3, #0]
 800dc1a:	e002      	b.n	800dc22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dc22:	4a04      	ldr	r2, [pc, #16]	@ (800dc34 <prvSampleTimeNow+0x3c>)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dc28:	68fb      	ldr	r3, [r7, #12]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	200056bc 	.word	0x200056bc

0800dc38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
 800dc44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dc46:	2300      	movs	r3, #0
 800dc48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	68ba      	ldr	r2, [r7, #8]
 800dc4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	68fa      	ldr	r2, [r7, #12]
 800dc54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d812      	bhi.n	800dc84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	1ad2      	subs	r2, r2, r3
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	699b      	ldr	r3, [r3, #24]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d302      	bcc.n	800dc72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	e01b      	b.n	800dcaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dc72:	4b10      	ldr	r3, [pc, #64]	@ (800dcb4 <prvInsertTimerInActiveList+0x7c>)
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	3304      	adds	r3, #4
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	f7fe f8dc 	bl	800be3a <vListInsert>
 800dc82:	e012      	b.n	800dcaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d206      	bcs.n	800dc9a <prvInsertTimerInActiveList+0x62>
 800dc8c:	68ba      	ldr	r2, [r7, #8]
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d302      	bcc.n	800dc9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dc94:	2301      	movs	r3, #1
 800dc96:	617b      	str	r3, [r7, #20]
 800dc98:	e007      	b.n	800dcaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc9a:	4b07      	ldr	r3, [pc, #28]	@ (800dcb8 <prvInsertTimerInActiveList+0x80>)
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	3304      	adds	r3, #4
 800dca2:	4619      	mov	r1, r3
 800dca4:	4610      	mov	r0, r2
 800dca6:	f7fe f8c8 	bl	800be3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dcaa:	697b      	ldr	r3, [r7, #20]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	200056b0 	.word	0x200056b0
 800dcb8:	200056ac 	.word	0x200056ac

0800dcbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b08e      	sub	sp, #56	@ 0x38
 800dcc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcc2:	e0ce      	b.n	800de62 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	da19      	bge.n	800dcfe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dcca:	1d3b      	adds	r3, r7, #4
 800dccc:	3304      	adds	r3, #4
 800dcce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d10b      	bne.n	800dcee <prvProcessReceivedCommands+0x32>
	__asm volatile
 800dcd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcda:	f383 8811 	msr	BASEPRI, r3
 800dcde:	f3bf 8f6f 	isb	sy
 800dce2:	f3bf 8f4f 	dsb	sy
 800dce6:	61fb      	str	r3, [r7, #28]
}
 800dce8:	bf00      	nop
 800dcea:	bf00      	nop
 800dcec:	e7fd      	b.n	800dcea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcf4:	6850      	ldr	r0, [r2, #4]
 800dcf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcf8:	6892      	ldr	r2, [r2, #8]
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	f2c0 80ae 	blt.w	800de62 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd0c:	695b      	ldr	r3, [r3, #20]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d004      	beq.n	800dd1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd14:	3304      	adds	r3, #4
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe f8c8 	bl	800beac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd1c:	463b      	mov	r3, r7
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7ff ff6a 	bl	800dbf8 <prvSampleTimeNow>
 800dd24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b09      	cmp	r3, #9
 800dd2a:	f200 8097 	bhi.w	800de5c <prvProcessReceivedCommands+0x1a0>
 800dd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd34 <prvProcessReceivedCommands+0x78>)
 800dd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd34:	0800dd5d 	.word	0x0800dd5d
 800dd38:	0800dd5d 	.word	0x0800dd5d
 800dd3c:	0800dd5d 	.word	0x0800dd5d
 800dd40:	0800ddd3 	.word	0x0800ddd3
 800dd44:	0800dde7 	.word	0x0800dde7
 800dd48:	0800de33 	.word	0x0800de33
 800dd4c:	0800dd5d 	.word	0x0800dd5d
 800dd50:	0800dd5d 	.word	0x0800dd5d
 800dd54:	0800ddd3 	.word	0x0800ddd3
 800dd58:	0800dde7 	.word	0x0800dde7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd62:	f043 0301 	orr.w	r3, r3, #1
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dd6e:	68ba      	ldr	r2, [r7, #8]
 800dd70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd72:	699b      	ldr	r3, [r3, #24]
 800dd74:	18d1      	adds	r1, r2, r3
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd7c:	f7ff ff5c 	bl	800dc38 <prvInsertTimerInActiveList>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d06c      	beq.n	800de60 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd88:	6a1b      	ldr	r3, [r3, #32]
 800dd8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd94:	f003 0304 	and.w	r3, r3, #4
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d061      	beq.n	800de60 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dd9c:	68ba      	ldr	r2, [r7, #8]
 800dd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda0:	699b      	ldr	r3, [r3, #24]
 800dda2:	441a      	add	r2, r3
 800dda4:	2300      	movs	r3, #0
 800dda6:	9300      	str	r3, [sp, #0]
 800dda8:	2300      	movs	r3, #0
 800ddaa:	2100      	movs	r1, #0
 800ddac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ddae:	f7ff fe01 	bl	800d9b4 <xTimerGenericCommand>
 800ddb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ddb4:	6a3b      	ldr	r3, [r7, #32]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d152      	bne.n	800de60 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	61bb      	str	r3, [r7, #24]
}
 800ddcc:	bf00      	nop
 800ddce:	bf00      	nop
 800ddd0:	e7fd      	b.n	800ddce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ddd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddd8:	f023 0301 	bic.w	r3, r3, #1
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dde4:	e03d      	b.n	800de62 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddec:	f043 0301 	orr.w	r3, r3, #1
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ddfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de00:	699b      	ldr	r3, [r3, #24]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10b      	bne.n	800de1e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	617b      	str	r3, [r7, #20]
}
 800de18:	bf00      	nop
 800de1a:	bf00      	nop
 800de1c:	e7fd      	b.n	800de1a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800de1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de20:	699a      	ldr	r2, [r3, #24]
 800de22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de24:	18d1      	adds	r1, r2, r3
 800de26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de2c:	f7ff ff04 	bl	800dc38 <prvInsertTimerInActiveList>
					break;
 800de30:	e017      	b.n	800de62 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800de32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de38:	f003 0302 	and.w	r3, r3, #2
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d103      	bne.n	800de48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800de40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de42:	f000 fbe9 	bl	800e618 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800de46:	e00c      	b.n	800de62 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800de48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de4e:	f023 0301 	bic.w	r3, r3, #1
 800de52:	b2da      	uxtb	r2, r3
 800de54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800de5a:	e002      	b.n	800de62 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800de5c:	bf00      	nop
 800de5e:	e000      	b.n	800de62 <prvProcessReceivedCommands+0x1a6>
					break;
 800de60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de62:	4b08      	ldr	r3, [pc, #32]	@ (800de84 <prvProcessReceivedCommands+0x1c8>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	1d39      	adds	r1, r7, #4
 800de68:	2200      	movs	r2, #0
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe fb2e 	bl	800c4cc <xQueueReceive>
 800de70:	4603      	mov	r3, r0
 800de72:	2b00      	cmp	r3, #0
 800de74:	f47f af26 	bne.w	800dcc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800de78:	bf00      	nop
 800de7a:	bf00      	nop
 800de7c:	3730      	adds	r7, #48	@ 0x30
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	200056b4 	.word	0x200056b4

0800de88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de8e:	e049      	b.n	800df24 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de90:	4b2e      	ldr	r3, [pc, #184]	@ (800df4c <prvSwitchTimerLists+0xc4>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de9a:	4b2c      	ldr	r3, [pc, #176]	@ (800df4c <prvSwitchTimerLists+0xc4>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3304      	adds	r3, #4
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7fd ffff 	bl	800beac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6a1b      	ldr	r3, [r3, #32]
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800debc:	f003 0304 	and.w	r3, r3, #4
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d02f      	beq.n	800df24 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	699b      	ldr	r3, [r3, #24]
 800dec8:	693a      	ldr	r2, [r7, #16]
 800deca:	4413      	add	r3, r2
 800decc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dece:	68ba      	ldr	r2, [r7, #8]
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d90e      	bls.n	800def4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	68ba      	ldr	r2, [r7, #8]
 800deda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dee2:	4b1a      	ldr	r3, [pc, #104]	@ (800df4c <prvSwitchTimerLists+0xc4>)
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	3304      	adds	r3, #4
 800deea:	4619      	mov	r1, r3
 800deec:	4610      	mov	r0, r2
 800deee:	f7fd ffa4 	bl	800be3a <vListInsert>
 800def2:	e017      	b.n	800df24 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800def4:	2300      	movs	r3, #0
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	2300      	movs	r3, #0
 800defa:	693a      	ldr	r2, [r7, #16]
 800defc:	2100      	movs	r1, #0
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f7ff fd58 	bl	800d9b4 <xTimerGenericCommand>
 800df04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10b      	bne.n	800df24 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800df0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df10:	f383 8811 	msr	BASEPRI, r3
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	603b      	str	r3, [r7, #0]
}
 800df1e:	bf00      	nop
 800df20:	bf00      	nop
 800df22:	e7fd      	b.n	800df20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df24:	4b09      	ldr	r3, [pc, #36]	@ (800df4c <prvSwitchTimerLists+0xc4>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1b0      	bne.n	800de90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800df2e:	4b07      	ldr	r3, [pc, #28]	@ (800df4c <prvSwitchTimerLists+0xc4>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800df34:	4b06      	ldr	r3, [pc, #24]	@ (800df50 <prvSwitchTimerLists+0xc8>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a04      	ldr	r2, [pc, #16]	@ (800df4c <prvSwitchTimerLists+0xc4>)
 800df3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800df3c:	4a04      	ldr	r2, [pc, #16]	@ (800df50 <prvSwitchTimerLists+0xc8>)
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	6013      	str	r3, [r2, #0]
}
 800df42:	bf00      	nop
 800df44:	3718      	adds	r7, #24
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	200056ac 	.word	0x200056ac
 800df50:	200056b0 	.word	0x200056b0

0800df54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800df5a:	f000 f96d 	bl	800e238 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800df5e:	4b15      	ldr	r3, [pc, #84]	@ (800dfb4 <prvCheckForValidListAndQueue+0x60>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d120      	bne.n	800dfa8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800df66:	4814      	ldr	r0, [pc, #80]	@ (800dfb8 <prvCheckForValidListAndQueue+0x64>)
 800df68:	f7fd ff16 	bl	800bd98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800df6c:	4813      	ldr	r0, [pc, #76]	@ (800dfbc <prvCheckForValidListAndQueue+0x68>)
 800df6e:	f7fd ff13 	bl	800bd98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800df72:	4b13      	ldr	r3, [pc, #76]	@ (800dfc0 <prvCheckForValidListAndQueue+0x6c>)
 800df74:	4a10      	ldr	r2, [pc, #64]	@ (800dfb8 <prvCheckForValidListAndQueue+0x64>)
 800df76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800df78:	4b12      	ldr	r3, [pc, #72]	@ (800dfc4 <prvCheckForValidListAndQueue+0x70>)
 800df7a:	4a10      	ldr	r2, [pc, #64]	@ (800dfbc <prvCheckForValidListAndQueue+0x68>)
 800df7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800df7e:	2300      	movs	r3, #0
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	4b11      	ldr	r3, [pc, #68]	@ (800dfc8 <prvCheckForValidListAndQueue+0x74>)
 800df84:	4a11      	ldr	r2, [pc, #68]	@ (800dfcc <prvCheckForValidListAndQueue+0x78>)
 800df86:	2110      	movs	r1, #16
 800df88:	200a      	movs	r0, #10
 800df8a:	f7fe f823 	bl	800bfd4 <xQueueGenericCreateStatic>
 800df8e:	4603      	mov	r3, r0
 800df90:	4a08      	ldr	r2, [pc, #32]	@ (800dfb4 <prvCheckForValidListAndQueue+0x60>)
 800df92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800df94:	4b07      	ldr	r3, [pc, #28]	@ (800dfb4 <prvCheckForValidListAndQueue+0x60>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d005      	beq.n	800dfa8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800df9c:	4b05      	ldr	r3, [pc, #20]	@ (800dfb4 <prvCheckForValidListAndQueue+0x60>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	490b      	ldr	r1, [pc, #44]	@ (800dfd0 <prvCheckForValidListAndQueue+0x7c>)
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fe fd2a 	bl	800c9fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dfa8:	f000 f978 	bl	800e29c <vPortExitCritical>
}
 800dfac:	bf00      	nop
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	200056b4 	.word	0x200056b4
 800dfb8:	20005684 	.word	0x20005684
 800dfbc:	20005698 	.word	0x20005698
 800dfc0:	200056ac 	.word	0x200056ac
 800dfc4:	200056b0 	.word	0x200056b0
 800dfc8:	20005760 	.word	0x20005760
 800dfcc:	200056c0 	.word	0x200056c0
 800dfd0:	0801d380 	.word	0x0801d380

0800dfd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	60f8      	str	r0, [r7, #12]
 800dfdc:	60b9      	str	r1, [r7, #8]
 800dfde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	3b04      	subs	r3, #4
 800dfe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dfec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	3b04      	subs	r3, #4
 800dff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	f023 0201 	bic.w	r2, r3, #1
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3b04      	subs	r3, #4
 800e002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e004:	4a0c      	ldr	r2, [pc, #48]	@ (800e038 <pxPortInitialiseStack+0x64>)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	3b14      	subs	r3, #20
 800e00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	3b04      	subs	r3, #4
 800e01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f06f 0202 	mvn.w	r2, #2
 800e022:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	3b20      	subs	r3, #32
 800e028:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e02a:	68fb      	ldr	r3, [r7, #12]
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3714      	adds	r7, #20
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	0800e03d 	.word	0x0800e03d

0800e03c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e03c:	b480      	push	{r7}
 800e03e:	b085      	sub	sp, #20
 800e040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e042:	2300      	movs	r3, #0
 800e044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e046:	4b13      	ldr	r3, [pc, #76]	@ (800e094 <prvTaskExitError+0x58>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e04e:	d00b      	beq.n	800e068 <prvTaskExitError+0x2c>
	__asm volatile
 800e050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e054:	f383 8811 	msr	BASEPRI, r3
 800e058:	f3bf 8f6f 	isb	sy
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	60fb      	str	r3, [r7, #12]
}
 800e062:	bf00      	nop
 800e064:	bf00      	nop
 800e066:	e7fd      	b.n	800e064 <prvTaskExitError+0x28>
	__asm volatile
 800e068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e06c:	f383 8811 	msr	BASEPRI, r3
 800e070:	f3bf 8f6f 	isb	sy
 800e074:	f3bf 8f4f 	dsb	sy
 800e078:	60bb      	str	r3, [r7, #8]
}
 800e07a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e07c:	bf00      	nop
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d0fc      	beq.n	800e07e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e084:	bf00      	nop
 800e086:	bf00      	nop
 800e088:	3714      	adds	r7, #20
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	20000030 	.word	0x20000030
	...

0800e0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e0a0:	4b07      	ldr	r3, [pc, #28]	@ (800e0c0 <pxCurrentTCBConst2>)
 800e0a2:	6819      	ldr	r1, [r3, #0]
 800e0a4:	6808      	ldr	r0, [r1, #0]
 800e0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0aa:	f380 8809 	msr	PSP, r0
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f04f 0000 	mov.w	r0, #0
 800e0b6:	f380 8811 	msr	BASEPRI, r0
 800e0ba:	4770      	bx	lr
 800e0bc:	f3af 8000 	nop.w

0800e0c0 <pxCurrentTCBConst2>:
 800e0c0:	20005184 	.word	0x20005184
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e0c4:	bf00      	nop
 800e0c6:	bf00      	nop

0800e0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e0c8:	4808      	ldr	r0, [pc, #32]	@ (800e0ec <prvPortStartFirstTask+0x24>)
 800e0ca:	6800      	ldr	r0, [r0, #0]
 800e0cc:	6800      	ldr	r0, [r0, #0]
 800e0ce:	f380 8808 	msr	MSP, r0
 800e0d2:	f04f 0000 	mov.w	r0, #0
 800e0d6:	f380 8814 	msr	CONTROL, r0
 800e0da:	b662      	cpsie	i
 800e0dc:	b661      	cpsie	f
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	df00      	svc	0
 800e0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e0ea:	bf00      	nop
 800e0ec:	e000ed08 	.word	0xe000ed08

0800e0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e0f6:	4b47      	ldr	r3, [pc, #284]	@ (800e214 <xPortStartScheduler+0x124>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	4a47      	ldr	r2, [pc, #284]	@ (800e218 <xPortStartScheduler+0x128>)
 800e0fc:	4293      	cmp	r3, r2
 800e0fe:	d10b      	bne.n	800e118 <xPortStartScheduler+0x28>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	60fb      	str	r3, [r7, #12]
}
 800e112:	bf00      	nop
 800e114:	bf00      	nop
 800e116:	e7fd      	b.n	800e114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e118:	4b3e      	ldr	r3, [pc, #248]	@ (800e214 <xPortStartScheduler+0x124>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	4a3f      	ldr	r2, [pc, #252]	@ (800e21c <xPortStartScheduler+0x12c>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	d10b      	bne.n	800e13a <xPortStartScheduler+0x4a>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	613b      	str	r3, [r7, #16]
}
 800e134:	bf00      	nop
 800e136:	bf00      	nop
 800e138:	e7fd      	b.n	800e136 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e13a:	4b39      	ldr	r3, [pc, #228]	@ (800e220 <xPortStartScheduler+0x130>)
 800e13c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	b2db      	uxtb	r3, r3
 800e144:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	22ff      	movs	r2, #255	@ 0xff
 800e14a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	b2db      	uxtb	r3, r3
 800e152:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e154:	78fb      	ldrb	r3, [r7, #3]
 800e156:	b2db      	uxtb	r3, r3
 800e158:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	4b31      	ldr	r3, [pc, #196]	@ (800e224 <xPortStartScheduler+0x134>)
 800e160:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e162:	4b31      	ldr	r3, [pc, #196]	@ (800e228 <xPortStartScheduler+0x138>)
 800e164:	2207      	movs	r2, #7
 800e166:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e168:	e009      	b.n	800e17e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e16a:	4b2f      	ldr	r3, [pc, #188]	@ (800e228 <xPortStartScheduler+0x138>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	3b01      	subs	r3, #1
 800e170:	4a2d      	ldr	r2, [pc, #180]	@ (800e228 <xPortStartScheduler+0x138>)
 800e172:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e174:	78fb      	ldrb	r3, [r7, #3]
 800e176:	b2db      	uxtb	r3, r3
 800e178:	005b      	lsls	r3, r3, #1
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e17e:	78fb      	ldrb	r3, [r7, #3]
 800e180:	b2db      	uxtb	r3, r3
 800e182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e186:	2b80      	cmp	r3, #128	@ 0x80
 800e188:	d0ef      	beq.n	800e16a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e18a:	4b27      	ldr	r3, [pc, #156]	@ (800e228 <xPortStartScheduler+0x138>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f1c3 0307 	rsb	r3, r3, #7
 800e192:	2b04      	cmp	r3, #4
 800e194:	d00b      	beq.n	800e1ae <xPortStartScheduler+0xbe>
	__asm volatile
 800e196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e19a:	f383 8811 	msr	BASEPRI, r3
 800e19e:	f3bf 8f6f 	isb	sy
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	60bb      	str	r3, [r7, #8]
}
 800e1a8:	bf00      	nop
 800e1aa:	bf00      	nop
 800e1ac:	e7fd      	b.n	800e1aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e1ae:	4b1e      	ldr	r3, [pc, #120]	@ (800e228 <xPortStartScheduler+0x138>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	021b      	lsls	r3, r3, #8
 800e1b4:	4a1c      	ldr	r2, [pc, #112]	@ (800e228 <xPortStartScheduler+0x138>)
 800e1b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e1b8:	4b1b      	ldr	r3, [pc, #108]	@ (800e228 <xPortStartScheduler+0x138>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e1c0:	4a19      	ldr	r2, [pc, #100]	@ (800e228 <xPortStartScheduler+0x138>)
 800e1c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e1cc:	4b17      	ldr	r3, [pc, #92]	@ (800e22c <xPortStartScheduler+0x13c>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a16      	ldr	r2, [pc, #88]	@ (800e22c <xPortStartScheduler+0x13c>)
 800e1d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e1d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1d8:	4b14      	ldr	r3, [pc, #80]	@ (800e22c <xPortStartScheduler+0x13c>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a13      	ldr	r2, [pc, #76]	@ (800e22c <xPortStartScheduler+0x13c>)
 800e1de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e1e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e1e4:	f000 f8da 	bl	800e39c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e1e8:	4b11      	ldr	r3, [pc, #68]	@ (800e230 <xPortStartScheduler+0x140>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e1ee:	f000 f8f9 	bl	800e3e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1f2:	4b10      	ldr	r3, [pc, #64]	@ (800e234 <xPortStartScheduler+0x144>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a0f      	ldr	r2, [pc, #60]	@ (800e234 <xPortStartScheduler+0x144>)
 800e1f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e1fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e1fe:	f7ff ff63 	bl	800e0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e202:	f7ff f813 	bl	800d22c <vTaskSwitchContext>
	prvTaskExitError();
 800e206:	f7ff ff19 	bl	800e03c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	e000ed00 	.word	0xe000ed00
 800e218:	410fc271 	.word	0x410fc271
 800e21c:	410fc270 	.word	0x410fc270
 800e220:	e000e400 	.word	0xe000e400
 800e224:	200057b0 	.word	0x200057b0
 800e228:	200057b4 	.word	0x200057b4
 800e22c:	e000ed20 	.word	0xe000ed20
 800e230:	20000030 	.word	0x20000030
 800e234:	e000ef34 	.word	0xe000ef34

0800e238 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
	__asm volatile
 800e23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e242:	f383 8811 	msr	BASEPRI, r3
 800e246:	f3bf 8f6f 	isb	sy
 800e24a:	f3bf 8f4f 	dsb	sy
 800e24e:	607b      	str	r3, [r7, #4]
}
 800e250:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e252:	4b10      	ldr	r3, [pc, #64]	@ (800e294 <vPortEnterCritical+0x5c>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	3301      	adds	r3, #1
 800e258:	4a0e      	ldr	r2, [pc, #56]	@ (800e294 <vPortEnterCritical+0x5c>)
 800e25a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e25c:	4b0d      	ldr	r3, [pc, #52]	@ (800e294 <vPortEnterCritical+0x5c>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	2b01      	cmp	r3, #1
 800e262:	d110      	bne.n	800e286 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e264:	4b0c      	ldr	r3, [pc, #48]	@ (800e298 <vPortEnterCritical+0x60>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00b      	beq.n	800e286 <vPortEnterCritical+0x4e>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	603b      	str	r3, [r7, #0]
}
 800e280:	bf00      	nop
 800e282:	bf00      	nop
 800e284:	e7fd      	b.n	800e282 <vPortEnterCritical+0x4a>
	}
}
 800e286:	bf00      	nop
 800e288:	370c      	adds	r7, #12
 800e28a:	46bd      	mov	sp, r7
 800e28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	20000030 	.word	0x20000030
 800e298:	e000ed04 	.word	0xe000ed04

0800e29c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e2a2:	4b12      	ldr	r3, [pc, #72]	@ (800e2ec <vPortExitCritical+0x50>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d10b      	bne.n	800e2c2 <vPortExitCritical+0x26>
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	607b      	str	r3, [r7, #4]
}
 800e2bc:	bf00      	nop
 800e2be:	bf00      	nop
 800e2c0:	e7fd      	b.n	800e2be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e2c2:	4b0a      	ldr	r3, [pc, #40]	@ (800e2ec <vPortExitCritical+0x50>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	4a08      	ldr	r2, [pc, #32]	@ (800e2ec <vPortExitCritical+0x50>)
 800e2ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e2cc:	4b07      	ldr	r3, [pc, #28]	@ (800e2ec <vPortExitCritical+0x50>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d105      	bne.n	800e2e0 <vPortExitCritical+0x44>
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	f383 8811 	msr	BASEPRI, r3
}
 800e2de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2e0:	bf00      	nop
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr
 800e2ec:	20000030 	.word	0x20000030

0800e2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2f0:	f3ef 8009 	mrs	r0, PSP
 800e2f4:	f3bf 8f6f 	isb	sy
 800e2f8:	4b15      	ldr	r3, [pc, #84]	@ (800e350 <pxCurrentTCBConst>)
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	f01e 0f10 	tst.w	lr, #16
 800e300:	bf08      	it	eq
 800e302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e30a:	6010      	str	r0, [r2, #0]
 800e30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e310:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e314:	f380 8811 	msr	BASEPRI, r0
 800e318:	f3bf 8f4f 	dsb	sy
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f7fe ff84 	bl	800d22c <vTaskSwitchContext>
 800e324:	f04f 0000 	mov.w	r0, #0
 800e328:	f380 8811 	msr	BASEPRI, r0
 800e32c:	bc09      	pop	{r0, r3}
 800e32e:	6819      	ldr	r1, [r3, #0]
 800e330:	6808      	ldr	r0, [r1, #0]
 800e332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e336:	f01e 0f10 	tst.w	lr, #16
 800e33a:	bf08      	it	eq
 800e33c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e340:	f380 8809 	msr	PSP, r0
 800e344:	f3bf 8f6f 	isb	sy
 800e348:	4770      	bx	lr
 800e34a:	bf00      	nop
 800e34c:	f3af 8000 	nop.w

0800e350 <pxCurrentTCBConst>:
 800e350:	20005184 	.word	0x20005184
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e354:	bf00      	nop
 800e356:	bf00      	nop

0800e358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
	__asm volatile
 800e35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e362:	f383 8811 	msr	BASEPRI, r3
 800e366:	f3bf 8f6f 	isb	sy
 800e36a:	f3bf 8f4f 	dsb	sy
 800e36e:	607b      	str	r3, [r7, #4]
}
 800e370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e372:	f7fe fea1 	bl	800d0b8 <xTaskIncrementTick>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d003      	beq.n	800e384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e37c:	4b06      	ldr	r3, [pc, #24]	@ (800e398 <xPortSysTickHandler+0x40>)
 800e37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e382:	601a      	str	r2, [r3, #0]
 800e384:	2300      	movs	r3, #0
 800e386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	f383 8811 	msr	BASEPRI, r3
}
 800e38e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	e000ed04 	.word	0xe000ed04

0800e39c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e39c:	b480      	push	{r7}
 800e39e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d0 <vPortSetupTimerInterrupt+0x34>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d4 <vPortSetupTimerInterrupt+0x38>)
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d8 <vPortSetupTimerInterrupt+0x3c>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a0a      	ldr	r2, [pc, #40]	@ (800e3dc <vPortSetupTimerInterrupt+0x40>)
 800e3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3b6:	099b      	lsrs	r3, r3, #6
 800e3b8:	4a09      	ldr	r2, [pc, #36]	@ (800e3e0 <vPortSetupTimerInterrupt+0x44>)
 800e3ba:	3b01      	subs	r3, #1
 800e3bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e3be:	4b04      	ldr	r3, [pc, #16]	@ (800e3d0 <vPortSetupTimerInterrupt+0x34>)
 800e3c0:	2207      	movs	r2, #7
 800e3c2:	601a      	str	r2, [r3, #0]
}
 800e3c4:	bf00      	nop
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	e000e010 	.word	0xe000e010
 800e3d4:	e000e018 	.word	0xe000e018
 800e3d8:	20000004 	.word	0x20000004
 800e3dc:	10624dd3 	.word	0x10624dd3
 800e3e0:	e000e014 	.word	0xe000e014

0800e3e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e3e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e3f4 <vPortEnableVFP+0x10>
 800e3e8:	6801      	ldr	r1, [r0, #0]
 800e3ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e3ee:	6001      	str	r1, [r0, #0]
 800e3f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e3f2:	bf00      	nop
 800e3f4:	e000ed88 	.word	0xe000ed88

0800e3f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e3fe:	f3ef 8305 	mrs	r3, IPSR
 800e402:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2b0f      	cmp	r3, #15
 800e408:	d915      	bls.n	800e436 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e40a:	4a18      	ldr	r2, [pc, #96]	@ (800e46c <vPortValidateInterruptPriority+0x74>)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	4413      	add	r3, r2
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e414:	4b16      	ldr	r3, [pc, #88]	@ (800e470 <vPortValidateInterruptPriority+0x78>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	7afa      	ldrb	r2, [r7, #11]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d20b      	bcs.n	800e436 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e422:	f383 8811 	msr	BASEPRI, r3
 800e426:	f3bf 8f6f 	isb	sy
 800e42a:	f3bf 8f4f 	dsb	sy
 800e42e:	607b      	str	r3, [r7, #4]
}
 800e430:	bf00      	nop
 800e432:	bf00      	nop
 800e434:	e7fd      	b.n	800e432 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e436:	4b0f      	ldr	r3, [pc, #60]	@ (800e474 <vPortValidateInterruptPriority+0x7c>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e43e:	4b0e      	ldr	r3, [pc, #56]	@ (800e478 <vPortValidateInterruptPriority+0x80>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	429a      	cmp	r2, r3
 800e444:	d90b      	bls.n	800e45e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44a:	f383 8811 	msr	BASEPRI, r3
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	603b      	str	r3, [r7, #0]
}
 800e458:	bf00      	nop
 800e45a:	bf00      	nop
 800e45c:	e7fd      	b.n	800e45a <vPortValidateInterruptPriority+0x62>
	}
 800e45e:	bf00      	nop
 800e460:	3714      	adds	r7, #20
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	e000e3f0 	.word	0xe000e3f0
 800e470:	200057b0 	.word	0x200057b0
 800e474:	e000ed0c 	.word	0xe000ed0c
 800e478:	200057b4 	.word	0x200057b4

0800e47c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b08a      	sub	sp, #40	@ 0x28
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e484:	2300      	movs	r3, #0
 800e486:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e488:	f7fe fd5a 	bl	800cf40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e48c:	4b5c      	ldr	r3, [pc, #368]	@ (800e600 <pvPortMalloc+0x184>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d101      	bne.n	800e498 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e494:	f000 f924 	bl	800e6e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e498:	4b5a      	ldr	r3, [pc, #360]	@ (800e604 <pvPortMalloc+0x188>)
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	4013      	ands	r3, r2
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f040 8095 	bne.w	800e5d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d01e      	beq.n	800e4ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e4ac:	2208      	movs	r2, #8
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f003 0307 	and.w	r3, r3, #7
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d015      	beq.n	800e4ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f023 0307 	bic.w	r3, r3, #7
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f003 0307 	and.w	r3, r3, #7
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00b      	beq.n	800e4ea <pvPortMalloc+0x6e>
	__asm volatile
 800e4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	617b      	str	r3, [r7, #20]
}
 800e4e4:	bf00      	nop
 800e4e6:	bf00      	nop
 800e4e8:	e7fd      	b.n	800e4e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d06f      	beq.n	800e5d0 <pvPortMalloc+0x154>
 800e4f0:	4b45      	ldr	r3, [pc, #276]	@ (800e608 <pvPortMalloc+0x18c>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d86a      	bhi.n	800e5d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e4fa:	4b44      	ldr	r3, [pc, #272]	@ (800e60c <pvPortMalloc+0x190>)
 800e4fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e4fe:	4b43      	ldr	r3, [pc, #268]	@ (800e60c <pvPortMalloc+0x190>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e504:	e004      	b.n	800e510 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	429a      	cmp	r2, r3
 800e518:	d903      	bls.n	800e522 <pvPortMalloc+0xa6>
 800e51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1f1      	bne.n	800e506 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e522:	4b37      	ldr	r3, [pc, #220]	@ (800e600 <pvPortMalloc+0x184>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e528:	429a      	cmp	r2, r3
 800e52a:	d051      	beq.n	800e5d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e52c:	6a3b      	ldr	r3, [r7, #32]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2208      	movs	r2, #8
 800e532:	4413      	add	r3, r2
 800e534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	6a3b      	ldr	r3, [r7, #32]
 800e53c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e540:	685a      	ldr	r2, [r3, #4]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	1ad2      	subs	r2, r2, r3
 800e546:	2308      	movs	r3, #8
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d920      	bls.n	800e590 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e54e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4413      	add	r3, r2
 800e554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	f003 0307 	and.w	r3, r3, #7
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00b      	beq.n	800e578 <pvPortMalloc+0xfc>
	__asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	613b      	str	r3, [r7, #16]
}
 800e572:	bf00      	nop
 800e574:	bf00      	nop
 800e576:	e7fd      	b.n	800e574 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	1ad2      	subs	r2, r2, r3
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e58a:	69b8      	ldr	r0, [r7, #24]
 800e58c:	f000 f90a 	bl	800e7a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e590:	4b1d      	ldr	r3, [pc, #116]	@ (800e608 <pvPortMalloc+0x18c>)
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	4a1b      	ldr	r2, [pc, #108]	@ (800e608 <pvPortMalloc+0x18c>)
 800e59c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e59e:	4b1a      	ldr	r3, [pc, #104]	@ (800e608 <pvPortMalloc+0x18c>)
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	4b1b      	ldr	r3, [pc, #108]	@ (800e610 <pvPortMalloc+0x194>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d203      	bcs.n	800e5b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e5aa:	4b17      	ldr	r3, [pc, #92]	@ (800e608 <pvPortMalloc+0x18c>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4a18      	ldr	r2, [pc, #96]	@ (800e610 <pvPortMalloc+0x194>)
 800e5b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b4:	685a      	ldr	r2, [r3, #4]
 800e5b6:	4b13      	ldr	r3, [pc, #76]	@ (800e604 <pvPortMalloc+0x188>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	431a      	orrs	r2, r3
 800e5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e5c6:	4b13      	ldr	r3, [pc, #76]	@ (800e614 <pvPortMalloc+0x198>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	4a11      	ldr	r2, [pc, #68]	@ (800e614 <pvPortMalloc+0x198>)
 800e5ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e5d0:	f7fe fcc4 	bl	800cf5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	f003 0307 	and.w	r3, r3, #7
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00b      	beq.n	800e5f6 <pvPortMalloc+0x17a>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	60fb      	str	r3, [r7, #12]
}
 800e5f0:	bf00      	nop
 800e5f2:	bf00      	nop
 800e5f4:	e7fd      	b.n	800e5f2 <pvPortMalloc+0x176>
	return pvReturn;
 800e5f6:	69fb      	ldr	r3, [r7, #28]
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3728      	adds	r7, #40	@ 0x28
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	200093c0 	.word	0x200093c0
 800e604:	200093d4 	.word	0x200093d4
 800e608:	200093c4 	.word	0x200093c4
 800e60c:	200093b8 	.word	0x200093b8
 800e610:	200093c8 	.word	0x200093c8
 800e614:	200093cc 	.word	0x200093cc

0800e618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d04f      	beq.n	800e6ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e62a:	2308      	movs	r3, #8
 800e62c:	425b      	negs	r3, r3
 800e62e:	697a      	ldr	r2, [r7, #20]
 800e630:	4413      	add	r3, r2
 800e632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	685a      	ldr	r2, [r3, #4]
 800e63c:	4b25      	ldr	r3, [pc, #148]	@ (800e6d4 <vPortFree+0xbc>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4013      	ands	r3, r2
 800e642:	2b00      	cmp	r3, #0
 800e644:	d10b      	bne.n	800e65e <vPortFree+0x46>
	__asm volatile
 800e646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e64a:	f383 8811 	msr	BASEPRI, r3
 800e64e:	f3bf 8f6f 	isb	sy
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	60fb      	str	r3, [r7, #12]
}
 800e658:	bf00      	nop
 800e65a:	bf00      	nop
 800e65c:	e7fd      	b.n	800e65a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00b      	beq.n	800e67e <vPortFree+0x66>
	__asm volatile
 800e666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e66a:	f383 8811 	msr	BASEPRI, r3
 800e66e:	f3bf 8f6f 	isb	sy
 800e672:	f3bf 8f4f 	dsb	sy
 800e676:	60bb      	str	r3, [r7, #8]
}
 800e678:	bf00      	nop
 800e67a:	bf00      	nop
 800e67c:	e7fd      	b.n	800e67a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	685a      	ldr	r2, [r3, #4]
 800e682:	4b14      	ldr	r3, [pc, #80]	@ (800e6d4 <vPortFree+0xbc>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4013      	ands	r3, r2
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d01e      	beq.n	800e6ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d11a      	bne.n	800e6ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	685a      	ldr	r2, [r3, #4]
 800e698:	4b0e      	ldr	r3, [pc, #56]	@ (800e6d4 <vPortFree+0xbc>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	43db      	mvns	r3, r3
 800e69e:	401a      	ands	r2, r3
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e6a4:	f7fe fc4c 	bl	800cf40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	4b0a      	ldr	r3, [pc, #40]	@ (800e6d8 <vPortFree+0xc0>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	4a09      	ldr	r2, [pc, #36]	@ (800e6d8 <vPortFree+0xc0>)
 800e6b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e6b6:	6938      	ldr	r0, [r7, #16]
 800e6b8:	f000 f874 	bl	800e7a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e6bc:	4b07      	ldr	r3, [pc, #28]	@ (800e6dc <vPortFree+0xc4>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	4a06      	ldr	r2, [pc, #24]	@ (800e6dc <vPortFree+0xc4>)
 800e6c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e6c6:	f7fe fc49 	bl	800cf5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e6ca:	bf00      	nop
 800e6cc:	3718      	adds	r7, #24
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	200093d4 	.word	0x200093d4
 800e6d8:	200093c4 	.word	0x200093c4
 800e6dc:	200093d0 	.word	0x200093d0

0800e6e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e6ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e6ec:	4b27      	ldr	r3, [pc, #156]	@ (800e78c <prvHeapInit+0xac>)
 800e6ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f003 0307 	and.w	r3, r3, #7
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d00c      	beq.n	800e714 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3307      	adds	r3, #7
 800e6fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f023 0307 	bic.w	r3, r3, #7
 800e706:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e708:	68ba      	ldr	r2, [r7, #8]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	1ad3      	subs	r3, r2, r3
 800e70e:	4a1f      	ldr	r2, [pc, #124]	@ (800e78c <prvHeapInit+0xac>)
 800e710:	4413      	add	r3, r2
 800e712:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e718:	4a1d      	ldr	r2, [pc, #116]	@ (800e790 <prvHeapInit+0xb0>)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e71e:	4b1c      	ldr	r3, [pc, #112]	@ (800e790 <prvHeapInit+0xb0>)
 800e720:	2200      	movs	r2, #0
 800e722:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	4413      	add	r3, r2
 800e72a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e72c:	2208      	movs	r2, #8
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	1a9b      	subs	r3, r3, r2
 800e732:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f023 0307 	bic.w	r3, r3, #7
 800e73a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	4a15      	ldr	r2, [pc, #84]	@ (800e794 <prvHeapInit+0xb4>)
 800e740:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e742:	4b14      	ldr	r3, [pc, #80]	@ (800e794 <prvHeapInit+0xb4>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2200      	movs	r2, #0
 800e748:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e74a:	4b12      	ldr	r3, [pc, #72]	@ (800e794 <prvHeapInit+0xb4>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2200      	movs	r2, #0
 800e750:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	1ad2      	subs	r2, r2, r3
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e760:	4b0c      	ldr	r3, [pc, #48]	@ (800e794 <prvHeapInit+0xb4>)
 800e762:	681a      	ldr	r2, [r3, #0]
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	4a0a      	ldr	r2, [pc, #40]	@ (800e798 <prvHeapInit+0xb8>)
 800e76e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	4a09      	ldr	r2, [pc, #36]	@ (800e79c <prvHeapInit+0xbc>)
 800e776:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e778:	4b09      	ldr	r3, [pc, #36]	@ (800e7a0 <prvHeapInit+0xc0>)
 800e77a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e77e:	601a      	str	r2, [r3, #0]
}
 800e780:	bf00      	nop
 800e782:	3714      	adds	r7, #20
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr
 800e78c:	200057b8 	.word	0x200057b8
 800e790:	200093b8 	.word	0x200093b8
 800e794:	200093c0 	.word	0x200093c0
 800e798:	200093c8 	.word	0x200093c8
 800e79c:	200093c4 	.word	0x200093c4
 800e7a0:	200093d4 	.word	0x200093d4

0800e7a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e7ac:	4b28      	ldr	r3, [pc, #160]	@ (800e850 <prvInsertBlockIntoFreeList+0xac>)
 800e7ae:	60fb      	str	r3, [r7, #12]
 800e7b0:	e002      	b.n	800e7b8 <prvInsertBlockIntoFreeList+0x14>
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	60fb      	str	r3, [r7, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d8f7      	bhi.n	800e7b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d108      	bne.n	800e7e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	685a      	ldr	r2, [r3, #4]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	441a      	add	r2, r3
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	68ba      	ldr	r2, [r7, #8]
 800e7f0:	441a      	add	r2, r3
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d118      	bne.n	800e82c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	4b15      	ldr	r3, [pc, #84]	@ (800e854 <prvInsertBlockIntoFreeList+0xb0>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	429a      	cmp	r2, r3
 800e804:	d00d      	beq.n	800e822 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	685a      	ldr	r2, [r3, #4]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	441a      	add	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	e008      	b.n	800e834 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e822:	4b0c      	ldr	r3, [pc, #48]	@ (800e854 <prvInsertBlockIntoFreeList+0xb0>)
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	601a      	str	r2, [r3, #0]
 800e82a:	e003      	b.n	800e834 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d002      	beq.n	800e842 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e842:	bf00      	nop
 800e844:	3714      	adds	r7, #20
 800e846:	46bd      	mov	sp, r7
 800e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	200093b8 	.word	0x200093b8
 800e854:	200093c0 	.word	0x200093c0

0800e858 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e85c:	2201      	movs	r2, #1
 800e85e:	490e      	ldr	r1, [pc, #56]	@ (800e898 <MX_USB_HOST_Init+0x40>)
 800e860:	480e      	ldr	r0, [pc, #56]	@ (800e89c <MX_USB_HOST_Init+0x44>)
 800e862:	f7fb f9bb 	bl	8009bdc <USBH_Init>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d001      	beq.n	800e870 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e86c:	f7f2 fea4 	bl	80015b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e870:	490b      	ldr	r1, [pc, #44]	@ (800e8a0 <MX_USB_HOST_Init+0x48>)
 800e872:	480a      	ldr	r0, [pc, #40]	@ (800e89c <MX_USB_HOST_Init+0x44>)
 800e874:	f7fb fa7f 	bl	8009d76 <USBH_RegisterClass>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e87e:	f7f2 fe9b 	bl	80015b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e882:	4806      	ldr	r0, [pc, #24]	@ (800e89c <MX_USB_HOST_Init+0x44>)
 800e884:	f7fb fb03 	bl	8009e8e <USBH_Start>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d001      	beq.n	800e892 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e88e:	f7f2 fe93 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e892:	bf00      	nop
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	0800e8a5 	.word	0x0800e8a5
 800e89c:	200093d8 	.word	0x200093d8
 800e8a0:	20000010 	.word	0x20000010

0800e8a4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	2b04      	cmp	r3, #4
 800e8b6:	d819      	bhi.n	800e8ec <USBH_UserProcess+0x48>
 800e8b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e8c0 <USBH_UserProcess+0x1c>)
 800e8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8be:	bf00      	nop
 800e8c0:	0800e8ed 	.word	0x0800e8ed
 800e8c4:	0800e8dd 	.word	0x0800e8dd
 800e8c8:	0800e8ed 	.word	0x0800e8ed
 800e8cc:	0800e8e5 	.word	0x0800e8e5
 800e8d0:	0800e8d5 	.word	0x0800e8d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e8d4:	4b09      	ldr	r3, [pc, #36]	@ (800e8fc <USBH_UserProcess+0x58>)
 800e8d6:	2203      	movs	r2, #3
 800e8d8:	701a      	strb	r2, [r3, #0]
  break;
 800e8da:	e008      	b.n	800e8ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e8dc:	4b07      	ldr	r3, [pc, #28]	@ (800e8fc <USBH_UserProcess+0x58>)
 800e8de:	2202      	movs	r2, #2
 800e8e0:	701a      	strb	r2, [r3, #0]
  break;
 800e8e2:	e004      	b.n	800e8ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e8e4:	4b05      	ldr	r3, [pc, #20]	@ (800e8fc <USBH_UserProcess+0x58>)
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	701a      	strb	r2, [r3, #0]
  break;
 800e8ea:	e000      	b.n	800e8ee <USBH_UserProcess+0x4a>

  default:
  break;
 800e8ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e8ee:	bf00      	nop
 800e8f0:	370c      	adds	r7, #12
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	200097bc 	.word	0x200097bc

0800e900 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b08a      	sub	sp, #40	@ 0x28
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e908:	f107 0314 	add.w	r3, r7, #20
 800e90c:	2200      	movs	r2, #0
 800e90e:	601a      	str	r2, [r3, #0]
 800e910:	605a      	str	r2, [r3, #4]
 800e912:	609a      	str	r2, [r3, #8]
 800e914:	60da      	str	r2, [r3, #12]
 800e916:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e920:	d147      	bne.n	800e9b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e922:	2300      	movs	r3, #0
 800e924:	613b      	str	r3, [r7, #16]
 800e926:	4b25      	ldr	r3, [pc, #148]	@ (800e9bc <HAL_HCD_MspInit+0xbc>)
 800e928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e92a:	4a24      	ldr	r2, [pc, #144]	@ (800e9bc <HAL_HCD_MspInit+0xbc>)
 800e92c:	f043 0301 	orr.w	r3, r3, #1
 800e930:	6313      	str	r3, [r2, #48]	@ 0x30
 800e932:	4b22      	ldr	r3, [pc, #136]	@ (800e9bc <HAL_HCD_MspInit+0xbc>)
 800e934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e936:	f003 0301 	and.w	r3, r3, #1
 800e93a:	613b      	str	r3, [r7, #16]
 800e93c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800e93e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e944:	2300      	movs	r3, #0
 800e946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e948:	2300      	movs	r3, #0
 800e94a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800e94c:	f107 0314 	add.w	r3, r7, #20
 800e950:	4619      	mov	r1, r3
 800e952:	481b      	ldr	r0, [pc, #108]	@ (800e9c0 <HAL_HCD_MspInit+0xc0>)
 800e954:	f7f4 fc14 	bl	8003180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800e958:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e95c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e95e:	2302      	movs	r3, #2
 800e960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e962:	2300      	movs	r3, #0
 800e964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e966:	2300      	movs	r3, #0
 800e968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e96a:	230a      	movs	r3, #10
 800e96c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e96e:	f107 0314 	add.w	r3, r7, #20
 800e972:	4619      	mov	r1, r3
 800e974:	4812      	ldr	r0, [pc, #72]	@ (800e9c0 <HAL_HCD_MspInit+0xc0>)
 800e976:	f7f4 fc03 	bl	8003180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e97a:	4b10      	ldr	r3, [pc, #64]	@ (800e9bc <HAL_HCD_MspInit+0xbc>)
 800e97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e97e:	4a0f      	ldr	r2, [pc, #60]	@ (800e9bc <HAL_HCD_MspInit+0xbc>)
 800e980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e984:	6353      	str	r3, [r2, #52]	@ 0x34
 800e986:	2300      	movs	r3, #0
 800e988:	60fb      	str	r3, [r7, #12]
 800e98a:	4b0c      	ldr	r3, [pc, #48]	@ (800e9bc <HAL_HCD_MspInit+0xbc>)
 800e98c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e98e:	4a0b      	ldr	r2, [pc, #44]	@ (800e9bc <HAL_HCD_MspInit+0xbc>)
 800e990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e994:	6453      	str	r3, [r2, #68]	@ 0x44
 800e996:	4b09      	ldr	r3, [pc, #36]	@ (800e9bc <HAL_HCD_MspInit+0xbc>)
 800e998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e99a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e99e:	60fb      	str	r3, [r7, #12]
 800e9a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	2105      	movs	r1, #5
 800e9a6:	2043      	movs	r0, #67	@ 0x43
 800e9a8:	f7f3 ffb1 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e9ac:	2043      	movs	r0, #67	@ 0x43
 800e9ae:	f7f3 ffca 	bl	8002946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e9b2:	bf00      	nop
 800e9b4:	3728      	adds	r7, #40	@ 0x28
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	40023800 	.word	0x40023800
 800e9c0:	40020000 	.word	0x40020000

0800e9c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fb fe93 	bl	800a6fe <USBH_LL_IncTimer>
}
 800e9d8:	bf00      	nop
 800e9da:	3708      	adds	r7, #8
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fb fed3 	bl	800a79a <USBH_LL_Connect>
}
 800e9f4:	bf00      	nop
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fb fee0 	bl	800a7d0 <USBH_LL_Disconnect>
}
 800ea10:	bf00      	nop
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	460b      	mov	r3, r1
 800ea22:	70fb      	strb	r3, [r7, #3]
 800ea24:	4613      	mov	r3, r2
 800ea26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fb ff33 	bl	800a89a <USBH_LL_NotifyURBChange>
#endif
}
 800ea34:	bf00      	nop
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fb fe81 	bl	800a752 <USBH_LL_PortEnabled>
}
 800ea50:	bf00      	nop
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fb fe85 	bl	800a776 <USBH_LL_PortDisabled>
}
 800ea6c:	bf00      	nop
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d12a      	bne.n	800eadc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ea86:	4a18      	ldr	r2, [pc, #96]	@ (800eae8 <USBH_LL_Init+0x74>)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	4a15      	ldr	r2, [pc, #84]	@ (800eae8 <USBH_LL_Init+0x74>)
 800ea92:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ea96:	4b14      	ldr	r3, [pc, #80]	@ (800eae8 <USBH_LL_Init+0x74>)
 800ea98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ea9c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ea9e:	4b12      	ldr	r3, [pc, #72]	@ (800eae8 <USBH_LL_Init+0x74>)
 800eaa0:	2208      	movs	r2, #8
 800eaa2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800eaa4:	4b10      	ldr	r3, [pc, #64]	@ (800eae8 <USBH_LL_Init+0x74>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eaaa:	4b0f      	ldr	r3, [pc, #60]	@ (800eae8 <USBH_LL_Init+0x74>)
 800eaac:	2200      	movs	r2, #0
 800eaae:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800eab0:	4b0d      	ldr	r3, [pc, #52]	@ (800eae8 <USBH_LL_Init+0x74>)
 800eab2:	2202      	movs	r2, #2
 800eab4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eab6:	4b0c      	ldr	r3, [pc, #48]	@ (800eae8 <USBH_LL_Init+0x74>)
 800eab8:	2200      	movs	r2, #0
 800eaba:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800eabc:	480a      	ldr	r0, [pc, #40]	@ (800eae8 <USBH_LL_Init+0x74>)
 800eabe:	f7f4 fd2e 	bl	800351e <HAL_HCD_Init>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d001      	beq.n	800eacc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800eac8:	f7f2 fd76 	bl	80015b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800eacc:	4806      	ldr	r0, [pc, #24]	@ (800eae8 <USBH_LL_Init+0x74>)
 800eace:	f7f5 f96b 	bl	8003da8 <HAL_HCD_GetCurrentFrame>
 800ead2:	4603      	mov	r3, r0
 800ead4:	4619      	mov	r1, r3
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7fb fe02 	bl	800a6e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	200097c0 	.word	0x200097c0

0800eaec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7f5 f8d8 	bl	8003cb8 <HAL_HCD_Start>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 f94c 	bl	800edac <USBH_Get_USB_Status>
 800eb14:	4603      	mov	r3, r0
 800eb16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb18:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3710      	adds	r7, #16
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b084      	sub	sp, #16
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7f5 f8e0 	bl	8003cfe <HAL_HCD_Stop>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f000 f931 	bl	800edac <USBH_Get_USB_Status>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800eb60:	2301      	movs	r3, #1
 800eb62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7f5 f92a 	bl	8003dc4 <HAL_HCD_GetCurrentSpeed>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d00c      	beq.n	800eb90 <USBH_LL_GetSpeed+0x38>
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	d80d      	bhi.n	800eb96 <USBH_LL_GetSpeed+0x3e>
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d002      	beq.n	800eb84 <USBH_LL_GetSpeed+0x2c>
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d003      	beq.n	800eb8a <USBH_LL_GetSpeed+0x32>
 800eb82:	e008      	b.n	800eb96 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800eb84:	2300      	movs	r3, #0
 800eb86:	73fb      	strb	r3, [r7, #15]
    break;
 800eb88:	e008      	b.n	800eb9c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	73fb      	strb	r3, [r7, #15]
    break;
 800eb8e:	e005      	b.n	800eb9c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800eb90:	2302      	movs	r3, #2
 800eb92:	73fb      	strb	r3, [r7, #15]
    break;
 800eb94:	e002      	b.n	800eb9c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800eb96:	2301      	movs	r3, #1
 800eb98:	73fb      	strb	r3, [r7, #15]
    break;
 800eb9a:	bf00      	nop
  }
  return  speed;
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b084      	sub	sp, #16
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7f5 f8bb 	bl	8003d38 <HAL_HCD_ResetPort>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebc6:	7bfb      	ldrb	r3, [r7, #15]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f000 f8ef 	bl	800edac <USBH_Get_USB_Status>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ebee:	78fa      	ldrb	r2, [r7, #3]
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7f5 f8c3 	bl	8003d7e <HAL_HCD_HC_GetXferCount>
 800ebf8:	4603      	mov	r3, r0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 800ec02:	b590      	push	{r4, r7, lr}
 800ec04:	b089      	sub	sp, #36	@ 0x24
 800ec06:	af04      	add	r7, sp, #16
 800ec08:	6078      	str	r0, [r7, #4]
 800ec0a:	4608      	mov	r0, r1
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	461a      	mov	r2, r3
 800ec10:	4603      	mov	r3, r0
 800ec12:	70fb      	strb	r3, [r7, #3]
 800ec14:	460b      	mov	r3, r1
 800ec16:	70bb      	strb	r3, [r7, #2]
 800ec18:	4613      	mov	r3, r2
 800ec1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ec2a:	787c      	ldrb	r4, [r7, #1]
 800ec2c:	78ba      	ldrb	r2, [r7, #2]
 800ec2e:	78f9      	ldrb	r1, [r7, #3]
 800ec30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ec32:	9302      	str	r3, [sp, #8]
 800ec34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ec38:	9301      	str	r3, [sp, #4]
 800ec3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec3e:	9300      	str	r3, [sp, #0]
 800ec40:	4623      	mov	r3, r4
 800ec42:	f7f4 fcd3 	bl	80035ec <HAL_HCD_HC_Init>
 800ec46:	4603      	mov	r3, r0
 800ec48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec4a:	7bfb      	ldrb	r3, [r7, #15]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f000 f8ad 	bl	800edac <USBH_Get_USB_Status>
 800ec52:	4603      	mov	r3, r0
 800ec54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3714      	adds	r7, #20
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd90      	pop	{r4, r7, pc}

0800ec60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	370c      	adds	r7, #12
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ec7a:	b590      	push	{r4, r7, lr}
 800ec7c:	b089      	sub	sp, #36	@ 0x24
 800ec7e:	af04      	add	r7, sp, #16
 800ec80:	6078      	str	r0, [r7, #4]
 800ec82:	4608      	mov	r0, r1
 800ec84:	4611      	mov	r1, r2
 800ec86:	461a      	mov	r2, r3
 800ec88:	4603      	mov	r3, r0
 800ec8a:	70fb      	strb	r3, [r7, #3]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	70bb      	strb	r3, [r7, #2]
 800ec90:	4613      	mov	r3, r2
 800ec92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800eca2:	787c      	ldrb	r4, [r7, #1]
 800eca4:	78ba      	ldrb	r2, [r7, #2]
 800eca6:	78f9      	ldrb	r1, [r7, #3]
 800eca8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ecac:	9303      	str	r3, [sp, #12]
 800ecae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ecb0:	9302      	str	r3, [sp, #8]
 800ecb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ecba:	9300      	str	r3, [sp, #0]
 800ecbc:	4623      	mov	r3, r4
 800ecbe:	f7f4 fd4d 	bl	800375c <HAL_HCD_HC_SubmitRequest>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f000 f86f 	bl	800edac <USBH_Get_USB_Status>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3714      	adds	r7, #20
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd90      	pop	{r4, r7, pc}

0800ecdc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	460b      	mov	r3, r1
 800ece6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ecee:	78fa      	ldrb	r2, [r7, #3]
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7f5 f82e 	bl	8003d54 <HAL_HCD_HC_GetURBState>
 800ecf8:	4603      	mov	r3, r0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b082      	sub	sp, #8
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d103      	bne.n	800ed20 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ed18:	78fb      	ldrb	r3, [r7, #3]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f000 f872 	bl	800ee04 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ed20:	20c8      	movs	r0, #200	@ 0xc8
 800ed22:	f7f3 fcf5 	bl	8002710 <HAL_Delay>
  return USBH_OK;
 800ed26:	2300      	movs	r3, #0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	70fb      	strb	r3, [r7, #3]
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ed46:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ed48:	78fa      	ldrb	r2, [r7, #3]
 800ed4a:	68f9      	ldr	r1, [r7, #12]
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	011b      	lsls	r3, r3, #4
 800ed50:	1a9b      	subs	r3, r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	440b      	add	r3, r1
 800ed56:	3317      	adds	r3, #23
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00a      	beq.n	800ed74 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ed5e:	78fa      	ldrb	r2, [r7, #3]
 800ed60:	68f9      	ldr	r1, [r7, #12]
 800ed62:	4613      	mov	r3, r2
 800ed64:	011b      	lsls	r3, r3, #4
 800ed66:	1a9b      	subs	r3, r3, r2
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	440b      	add	r3, r1
 800ed6c:	333c      	adds	r3, #60	@ 0x3c
 800ed6e:	78ba      	ldrb	r2, [r7, #2]
 800ed70:	701a      	strb	r2, [r3, #0]
 800ed72:	e009      	b.n	800ed88 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ed74:	78fa      	ldrb	r2, [r7, #3]
 800ed76:	68f9      	ldr	r1, [r7, #12]
 800ed78:	4613      	mov	r3, r2
 800ed7a:	011b      	lsls	r3, r3, #4
 800ed7c:	1a9b      	subs	r3, r3, r2
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	440b      	add	r3, r1
 800ed82:	333d      	adds	r3, #61	@ 0x3d
 800ed84:	78ba      	ldrb	r2, [r7, #2]
 800ed86:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ed88:	2300      	movs	r3, #0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3714      	adds	r7, #20
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr

0800ed96 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b082      	sub	sp, #8
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f7f3 fcb6 	bl	8002710 <HAL_Delay>
}
 800eda4:	bf00      	nop
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	4603      	mov	r3, r0
 800edb4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800edba:	79fb      	ldrb	r3, [r7, #7]
 800edbc:	2b03      	cmp	r3, #3
 800edbe:	d817      	bhi.n	800edf0 <USBH_Get_USB_Status+0x44>
 800edc0:	a201      	add	r2, pc, #4	@ (adr r2, 800edc8 <USBH_Get_USB_Status+0x1c>)
 800edc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc6:	bf00      	nop
 800edc8:	0800edd9 	.word	0x0800edd9
 800edcc:	0800eddf 	.word	0x0800eddf
 800edd0:	0800ede5 	.word	0x0800ede5
 800edd4:	0800edeb 	.word	0x0800edeb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800edd8:	2300      	movs	r3, #0
 800edda:	73fb      	strb	r3, [r7, #15]
    break;
 800eddc:	e00b      	b.n	800edf6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800edde:	2302      	movs	r3, #2
 800ede0:	73fb      	strb	r3, [r7, #15]
    break;
 800ede2:	e008      	b.n	800edf6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ede4:	2301      	movs	r3, #1
 800ede6:	73fb      	strb	r3, [r7, #15]
    break;
 800ede8:	e005      	b.n	800edf6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800edea:	2302      	movs	r3, #2
 800edec:	73fb      	strb	r3, [r7, #15]
    break;
 800edee:	e002      	b.n	800edf6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800edf0:	2302      	movs	r3, #2
 800edf2:	73fb      	strb	r3, [r7, #15]
    break;
 800edf4:	bf00      	nop
  }
  return usb_status;
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3714      	adds	r7, #20
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ee0e:	79fb      	ldrb	r3, [r7, #7]
 800ee10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d102      	bne.n	800ee1e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	73fb      	strb	r3, [r7, #15]
 800ee1c:	e001      	b.n	800ee22 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ee22:	7bfb      	ldrb	r3, [r7, #15]
 800ee24:	461a      	mov	r2, r3
 800ee26:	2101      	movs	r1, #1
 800ee28:	4803      	ldr	r0, [pc, #12]	@ (800ee38 <MX_DriverVbusFS+0x34>)
 800ee2a:	f7f4 fb45 	bl	80034b8 <HAL_GPIO_WritePin>
}
 800ee2e:	bf00      	nop
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	40020800 	.word	0x40020800

0800ee3c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ee3c:	4b04      	ldr	r3, [pc, #16]	@ (800ee50 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	b10a      	cbz	r2, 800ee46 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800ee42:	4803      	ldr	r0, [pc, #12]	@ (800ee50 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ee44:	4770      	bx	lr
 800ee46:	4a03      	ldr	r2, [pc, #12]	@ (800ee54 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800ee48:	4801      	ldr	r0, [pc, #4]	@ (800ee50 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800ee4a:	6812      	ldr	r2, [r2, #0]
 800ee4c:	601a      	str	r2, [r3, #0]
 800ee4e:	4770      	bx	lr
 800ee50:	2000003c 	.word	0x2000003c
 800ee54:	200001f0 	.word	0x200001f0

0800ee58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ee58:	4a02      	ldr	r2, [pc, #8]	@ (800ee64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800ee5a:	4b03      	ldr	r3, [pc, #12]	@ (800ee68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800ee5c:	6812      	ldr	r2, [r2, #0]
 800ee5e:	601a      	str	r2, [r3, #0]
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	200001f0 	.word	0x200001f0
 800ee68:	2000003c 	.word	0x2000003c

0800ee6c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800ee6c:	f003 bb1a 	b.w	80124a4 <geometry_msgs__msg__Twist__init>

0800ee70 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800ee70:	f003 bb3c 	b.w	80124ec <geometry_msgs__msg__Twist__fini>

0800ee74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ee74:	b510      	push	{r4, lr}
 800ee76:	f000 f819 	bl	800eeac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ee7a:	4c07      	ldr	r4, [pc, #28]	@ (800ee98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800ee7c:	60e0      	str	r0, [r4, #12]
 800ee7e:	f000 f815 	bl	800eeac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ee82:	4b06      	ldr	r3, [pc, #24]	@ (800ee9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ee84:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	b10a      	cbz	r2, 800ee8e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800ee8a:	4804      	ldr	r0, [pc, #16]	@ (800ee9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ee8c:	bd10      	pop	{r4, pc}
 800ee8e:	4a04      	ldr	r2, [pc, #16]	@ (800eea0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800ee90:	4802      	ldr	r0, [pc, #8]	@ (800ee9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800ee92:	6812      	ldr	r2, [r2, #0]
 800ee94:	601a      	str	r2, [r3, #0]
 800ee96:	bd10      	pop	{r4, pc}
 800ee98:	20000048 	.word	0x20000048
 800ee9c:	200000c0 	.word	0x200000c0
 800eea0:	200001f4 	.word	0x200001f4

0800eea4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800eea4:	f003 bb2e 	b.w	8012504 <geometry_msgs__msg__Vector3__init>

0800eea8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800eea8:	f003 bb30 	b.w	801250c <geometry_msgs__msg__Vector3__fini>

0800eeac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800eeac:	4b04      	ldr	r3, [pc, #16]	@ (800eec0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	b10a      	cbz	r2, 800eeb6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800eeb2:	4803      	ldr	r0, [pc, #12]	@ (800eec0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800eeb4:	4770      	bx	lr
 800eeb6:	4a03      	ldr	r2, [pc, #12]	@ (800eec4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800eeb8:	4801      	ldr	r0, [pc, #4]	@ (800eec0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800eeba:	6812      	ldr	r2, [r2, #0]
 800eebc:	601a      	str	r2, [r3, #0]
 800eebe:	4770      	bx	lr
 800eec0:	20000180 	.word	0x20000180
 800eec4:	200001f4 	.word	0x200001f4

0800eec8 <get_serialized_size_geometry_msgs__msg__Twist>:
 800eec8:	b570      	push	{r4, r5, r6, lr}
 800eeca:	4604      	mov	r4, r0
 800eecc:	b148      	cbz	r0, 800eee2 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800eece:	460d      	mov	r5, r1
 800eed0:	f000 f860 	bl	800ef94 <get_serialized_size_geometry_msgs__msg__Vector3>
 800eed4:	4606      	mov	r6, r0
 800eed6:	1829      	adds	r1, r5, r0
 800eed8:	f104 0018 	add.w	r0, r4, #24
 800eedc:	f000 f85a 	bl	800ef94 <get_serialized_size_geometry_msgs__msg__Vector3>
 800eee0:	4430      	add	r0, r6
 800eee2:	bd70      	pop	{r4, r5, r6, pc}

0800eee4 <_Twist__cdr_deserialize>:
 800eee4:	b570      	push	{r4, r5, r6, lr}
 800eee6:	460c      	mov	r4, r1
 800eee8:	b189      	cbz	r1, 800ef0e <_Twist__cdr_deserialize+0x2a>
 800eeea:	4605      	mov	r5, r0
 800eeec:	f000 f8de 	bl	800f0ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800eef0:	6843      	ldr	r3, [r0, #4]
 800eef2:	4621      	mov	r1, r4
 800eef4:	68db      	ldr	r3, [r3, #12]
 800eef6:	4628      	mov	r0, r5
 800eef8:	4798      	blx	r3
 800eefa:	f000 f8d7 	bl	800f0ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800eefe:	6843      	ldr	r3, [r0, #4]
 800ef00:	f104 0118 	add.w	r1, r4, #24
 800ef04:	4628      	mov	r0, r5
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef0c:	4718      	bx	r3
 800ef0e:	4608      	mov	r0, r1
 800ef10:	bd70      	pop	{r4, r5, r6, pc}
 800ef12:	bf00      	nop

0800ef14 <_Twist__cdr_serialize>:
 800ef14:	b510      	push	{r4, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	9101      	str	r1, [sp, #4]
 800ef1a:	b190      	cbz	r0, 800ef42 <_Twist__cdr_serialize+0x2e>
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	f000 f8c5 	bl	800f0ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ef22:	6843      	ldr	r3, [r0, #4]
 800ef24:	9901      	ldr	r1, [sp, #4]
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	4620      	mov	r0, r4
 800ef2a:	4798      	blx	r3
 800ef2c:	f000 f8be 	bl	800f0ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ef30:	6843      	ldr	r3, [r0, #4]
 800ef32:	9901      	ldr	r1, [sp, #4]
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	f104 0018 	add.w	r0, r4, #24
 800ef3a:	b002      	add	sp, #8
 800ef3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef40:	4718      	bx	r3
 800ef42:	b002      	add	sp, #8
 800ef44:	bd10      	pop	{r4, pc}
 800ef46:	bf00      	nop

0800ef48 <_Twist__get_serialized_size>:
 800ef48:	b538      	push	{r3, r4, r5, lr}
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	b148      	cbz	r0, 800ef62 <_Twist__get_serialized_size+0x1a>
 800ef4e:	2100      	movs	r1, #0
 800ef50:	f000 f820 	bl	800ef94 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ef54:	4605      	mov	r5, r0
 800ef56:	4601      	mov	r1, r0
 800ef58:	f104 0018 	add.w	r0, r4, #24
 800ef5c:	f000 f81a 	bl	800ef94 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ef60:	4428      	add	r0, r5
 800ef62:	bd38      	pop	{r3, r4, r5, pc}

0800ef64 <_Twist__max_serialized_size>:
 800ef64:	b510      	push	{r4, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	2301      	movs	r3, #1
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	f10d 0007 	add.w	r0, sp, #7
 800ef70:	f88d 3007 	strb.w	r3, [sp, #7]
 800ef74:	f000 f87e 	bl	800f074 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ef78:	4604      	mov	r4, r0
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	f10d 0007 	add.w	r0, sp, #7
 800ef80:	f000 f878 	bl	800f074 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ef84:	4420      	add	r0, r4
 800ef86:	b002      	add	sp, #8
 800ef88:	bd10      	pop	{r4, pc}
 800ef8a:	bf00      	nop

0800ef8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ef8c:	4800      	ldr	r0, [pc, #0]	@ (800ef90 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800ef8e:	4770      	bx	lr
 800ef90:	2000018c 	.word	0x2000018c

0800ef94 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800ef94:	b1b8      	cbz	r0, 800efc6 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800ef96:	b538      	push	{r3, r4, r5, lr}
 800ef98:	460d      	mov	r5, r1
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	2108      	movs	r1, #8
 800ef9e:	f001 fb25 	bl	80105ec <ucdr_alignment>
 800efa2:	f105 0308 	add.w	r3, r5, #8
 800efa6:	181c      	adds	r4, r3, r0
 800efa8:	2108      	movs	r1, #8
 800efaa:	4620      	mov	r0, r4
 800efac:	f001 fb1e 	bl	80105ec <ucdr_alignment>
 800efb0:	3008      	adds	r0, #8
 800efb2:	4404      	add	r4, r0
 800efb4:	2108      	movs	r1, #8
 800efb6:	4620      	mov	r0, r4
 800efb8:	f001 fb18 	bl	80105ec <ucdr_alignment>
 800efbc:	f1c5 0508 	rsb	r5, r5, #8
 800efc0:	4428      	add	r0, r5
 800efc2:	4420      	add	r0, r4
 800efc4:	bd38      	pop	{r3, r4, r5, pc}
 800efc6:	4770      	bx	lr

0800efc8 <_Vector3__cdr_deserialize>:
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	460c      	mov	r4, r1
 800efcc:	b171      	cbz	r1, 800efec <_Vector3__cdr_deserialize+0x24>
 800efce:	4605      	mov	r5, r0
 800efd0:	f001 f9ee 	bl	80103b0 <ucdr_deserialize_double>
 800efd4:	f104 0108 	add.w	r1, r4, #8
 800efd8:	4628      	mov	r0, r5
 800efda:	f001 f9e9 	bl	80103b0 <ucdr_deserialize_double>
 800efde:	f104 0110 	add.w	r1, r4, #16
 800efe2:	4628      	mov	r0, r5
 800efe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efe8:	f001 b9e2 	b.w	80103b0 <ucdr_deserialize_double>
 800efec:	4608      	mov	r0, r1
 800efee:	bd38      	pop	{r3, r4, r5, pc}

0800eff0 <_Vector3__cdr_serialize>:
 800eff0:	b198      	cbz	r0, 800f01a <_Vector3__cdr_serialize+0x2a>
 800eff2:	b538      	push	{r3, r4, r5, lr}
 800eff4:	ed90 0b00 	vldr	d0, [r0]
 800eff8:	460d      	mov	r5, r1
 800effa:	4604      	mov	r4, r0
 800effc:	4608      	mov	r0, r1
 800effe:	f001 f907 	bl	8010210 <ucdr_serialize_double>
 800f002:	ed94 0b02 	vldr	d0, [r4, #8]
 800f006:	4628      	mov	r0, r5
 800f008:	f001 f902 	bl	8010210 <ucdr_serialize_double>
 800f00c:	ed94 0b04 	vldr	d0, [r4, #16]
 800f010:	4628      	mov	r0, r5
 800f012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f016:	f001 b8fb 	b.w	8010210 <ucdr_serialize_double>
 800f01a:	4770      	bx	lr

0800f01c <_Vector3__get_serialized_size>:
 800f01c:	b198      	cbz	r0, 800f046 <_Vector3__get_serialized_size+0x2a>
 800f01e:	b510      	push	{r4, lr}
 800f020:	2108      	movs	r1, #8
 800f022:	2000      	movs	r0, #0
 800f024:	f001 fae2 	bl	80105ec <ucdr_alignment>
 800f028:	f100 0408 	add.w	r4, r0, #8
 800f02c:	2108      	movs	r1, #8
 800f02e:	4620      	mov	r0, r4
 800f030:	f001 fadc 	bl	80105ec <ucdr_alignment>
 800f034:	3008      	adds	r0, #8
 800f036:	4404      	add	r4, r0
 800f038:	2108      	movs	r1, #8
 800f03a:	4620      	mov	r0, r4
 800f03c:	f001 fad6 	bl	80105ec <ucdr_alignment>
 800f040:	3008      	adds	r0, #8
 800f042:	4420      	add	r0, r4
 800f044:	bd10      	pop	{r4, pc}
 800f046:	4770      	bx	lr

0800f048 <_Vector3__max_serialized_size>:
 800f048:	b538      	push	{r3, r4, r5, lr}
 800f04a:	2108      	movs	r1, #8
 800f04c:	2000      	movs	r0, #0
 800f04e:	f001 facd 	bl	80105ec <ucdr_alignment>
 800f052:	f100 0508 	add.w	r5, r0, #8
 800f056:	2108      	movs	r1, #8
 800f058:	4628      	mov	r0, r5
 800f05a:	f001 fac7 	bl	80105ec <ucdr_alignment>
 800f05e:	f100 0408 	add.w	r4, r0, #8
 800f062:	442c      	add	r4, r5
 800f064:	2108      	movs	r1, #8
 800f066:	4620      	mov	r0, r4
 800f068:	f001 fac0 	bl	80105ec <ucdr_alignment>
 800f06c:	3008      	adds	r0, #8
 800f06e:	4420      	add	r0, r4
 800f070:	bd38      	pop	{r3, r4, r5, pc}
 800f072:	bf00      	nop

0800f074 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	2301      	movs	r3, #1
 800f078:	460c      	mov	r4, r1
 800f07a:	7003      	strb	r3, [r0, #0]
 800f07c:	2108      	movs	r1, #8
 800f07e:	4620      	mov	r0, r4
 800f080:	f001 fab4 	bl	80105ec <ucdr_alignment>
 800f084:	f104 0508 	add.w	r5, r4, #8
 800f088:	1946      	adds	r6, r0, r5
 800f08a:	2108      	movs	r1, #8
 800f08c:	4630      	mov	r0, r6
 800f08e:	f001 faad 	bl	80105ec <ucdr_alignment>
 800f092:	f100 0508 	add.w	r5, r0, #8
 800f096:	4435      	add	r5, r6
 800f098:	2108      	movs	r1, #8
 800f09a:	4628      	mov	r0, r5
 800f09c:	f001 faa6 	bl	80105ec <ucdr_alignment>
 800f0a0:	f1c4 0408 	rsb	r4, r4, #8
 800f0a4:	4420      	add	r0, r4
 800f0a6:	4428      	add	r0, r5
 800f0a8:	bd70      	pop	{r4, r5, r6, pc}
 800f0aa:	bf00      	nop

0800f0ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800f0ac:	4800      	ldr	r0, [pc, #0]	@ (800f0b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800f0ae:	4770      	bx	lr
 800f0b0:	200001b4 	.word	0x200001b4

0800f0b4 <ucdr_serialize_bool>:
 800f0b4:	b538      	push	{r3, r4, r5, lr}
 800f0b6:	460d      	mov	r5, r1
 800f0b8:	2101      	movs	r1, #1
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	f001 fa4a 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f0c0:	b148      	cbz	r0, 800f0d6 <ucdr_serialize_bool+0x22>
 800f0c2:	68a3      	ldr	r3, [r4, #8]
 800f0c4:	701d      	strb	r5, [r3, #0]
 800f0c6:	68a2      	ldr	r2, [r4, #8]
 800f0c8:	6923      	ldr	r3, [r4, #16]
 800f0ca:	2101      	movs	r1, #1
 800f0cc:	440a      	add	r2, r1
 800f0ce:	440b      	add	r3, r1
 800f0d0:	60a2      	str	r2, [r4, #8]
 800f0d2:	6123      	str	r3, [r4, #16]
 800f0d4:	7561      	strb	r1, [r4, #21]
 800f0d6:	7da0      	ldrb	r0, [r4, #22]
 800f0d8:	f080 0001 	eor.w	r0, r0, #1
 800f0dc:	bd38      	pop	{r3, r4, r5, pc}
 800f0de:	bf00      	nop

0800f0e0 <ucdr_deserialize_bool>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	460d      	mov	r5, r1
 800f0e4:	2101      	movs	r1, #1
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	f001 fa34 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f0ec:	b160      	cbz	r0, 800f108 <ucdr_deserialize_bool+0x28>
 800f0ee:	68a2      	ldr	r2, [r4, #8]
 800f0f0:	6923      	ldr	r3, [r4, #16]
 800f0f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f0f6:	3900      	subs	r1, #0
 800f0f8:	bf18      	it	ne
 800f0fa:	2101      	movne	r1, #1
 800f0fc:	7029      	strb	r1, [r5, #0]
 800f0fe:	3301      	adds	r3, #1
 800f100:	2101      	movs	r1, #1
 800f102:	60a2      	str	r2, [r4, #8]
 800f104:	6123      	str	r3, [r4, #16]
 800f106:	7561      	strb	r1, [r4, #21]
 800f108:	7da0      	ldrb	r0, [r4, #22]
 800f10a:	f080 0001 	eor.w	r0, r0, #1
 800f10e:	bd38      	pop	{r3, r4, r5, pc}

0800f110 <ucdr_serialize_uint8_t>:
 800f110:	b538      	push	{r3, r4, r5, lr}
 800f112:	460d      	mov	r5, r1
 800f114:	2101      	movs	r1, #1
 800f116:	4604      	mov	r4, r0
 800f118:	f001 fa1c 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f11c:	b148      	cbz	r0, 800f132 <ucdr_serialize_uint8_t+0x22>
 800f11e:	68a3      	ldr	r3, [r4, #8]
 800f120:	701d      	strb	r5, [r3, #0]
 800f122:	68a2      	ldr	r2, [r4, #8]
 800f124:	6923      	ldr	r3, [r4, #16]
 800f126:	2101      	movs	r1, #1
 800f128:	440a      	add	r2, r1
 800f12a:	440b      	add	r3, r1
 800f12c:	60a2      	str	r2, [r4, #8]
 800f12e:	6123      	str	r3, [r4, #16]
 800f130:	7561      	strb	r1, [r4, #21]
 800f132:	7da0      	ldrb	r0, [r4, #22]
 800f134:	f080 0001 	eor.w	r0, r0, #1
 800f138:	bd38      	pop	{r3, r4, r5, pc}
 800f13a:	bf00      	nop

0800f13c <ucdr_deserialize_uint8_t>:
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	460d      	mov	r5, r1
 800f140:	2101      	movs	r1, #1
 800f142:	4604      	mov	r4, r0
 800f144:	f001 fa06 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f148:	b150      	cbz	r0, 800f160 <ucdr_deserialize_uint8_t+0x24>
 800f14a:	68a3      	ldr	r3, [r4, #8]
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	702b      	strb	r3, [r5, #0]
 800f150:	68a2      	ldr	r2, [r4, #8]
 800f152:	6923      	ldr	r3, [r4, #16]
 800f154:	2101      	movs	r1, #1
 800f156:	440a      	add	r2, r1
 800f158:	440b      	add	r3, r1
 800f15a:	60a2      	str	r2, [r4, #8]
 800f15c:	6123      	str	r3, [r4, #16]
 800f15e:	7561      	strb	r1, [r4, #21]
 800f160:	7da0      	ldrb	r0, [r4, #22]
 800f162:	f080 0001 	eor.w	r0, r0, #1
 800f166:	bd38      	pop	{r3, r4, r5, pc}

0800f168 <ucdr_serialize_uint16_t>:
 800f168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16c:	b082      	sub	sp, #8
 800f16e:	460b      	mov	r3, r1
 800f170:	2102      	movs	r1, #2
 800f172:	4604      	mov	r4, r0
 800f174:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f178:	f001 fa40 	bl	80105fc <ucdr_buffer_alignment>
 800f17c:	4601      	mov	r1, r0
 800f17e:	4620      	mov	r0, r4
 800f180:	7d67      	ldrb	r7, [r4, #21]
 800f182:	f001 fa7f 	bl	8010684 <ucdr_advance_buffer>
 800f186:	2102      	movs	r1, #2
 800f188:	4620      	mov	r0, r4
 800f18a:	f001 f9d7 	bl	801053c <ucdr_check_buffer_available_for>
 800f18e:	bb78      	cbnz	r0, 800f1f0 <ucdr_serialize_uint16_t+0x88>
 800f190:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f194:	42ab      	cmp	r3, r5
 800f196:	d926      	bls.n	800f1e6 <ucdr_serialize_uint16_t+0x7e>
 800f198:	1b5e      	subs	r6, r3, r5
 800f19a:	60a3      	str	r3, [r4, #8]
 800f19c:	6923      	ldr	r3, [r4, #16]
 800f19e:	f1c6 0802 	rsb	r8, r6, #2
 800f1a2:	4433      	add	r3, r6
 800f1a4:	6123      	str	r3, [r4, #16]
 800f1a6:	4641      	mov	r1, r8
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f001 f9d3 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d03b      	beq.n	800f22a <ucdr_serialize_uint16_t+0xc2>
 800f1b2:	7d23      	ldrb	r3, [r4, #20]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d04a      	beq.n	800f24e <ucdr_serialize_uint16_t+0xe6>
 800f1b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f1bc:	702b      	strb	r3, [r5, #0]
 800f1be:	2e00      	cmp	r6, #0
 800f1c0:	d040      	beq.n	800f244 <ucdr_serialize_uint16_t+0xdc>
 800f1c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f1c6:	706b      	strb	r3, [r5, #1]
 800f1c8:	6923      	ldr	r3, [r4, #16]
 800f1ca:	68a2      	ldr	r2, [r4, #8]
 800f1cc:	7da0      	ldrb	r0, [r4, #22]
 800f1ce:	3302      	adds	r3, #2
 800f1d0:	1b9e      	subs	r6, r3, r6
 800f1d2:	4442      	add	r2, r8
 800f1d4:	2302      	movs	r3, #2
 800f1d6:	f080 0001 	eor.w	r0, r0, #1
 800f1da:	60a2      	str	r2, [r4, #8]
 800f1dc:	6126      	str	r6, [r4, #16]
 800f1de:	7563      	strb	r3, [r4, #21]
 800f1e0:	b002      	add	sp, #8
 800f1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e6:	2102      	movs	r1, #2
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f001 f9b3 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f1ee:	b190      	cbz	r0, 800f216 <ucdr_serialize_uint16_t+0xae>
 800f1f0:	7d23      	ldrb	r3, [r4, #20]
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	68a3      	ldr	r3, [r4, #8]
 800f1f6:	d014      	beq.n	800f222 <ucdr_serialize_uint16_t+0xba>
 800f1f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f1fc:	701a      	strb	r2, [r3, #0]
 800f1fe:	68a3      	ldr	r3, [r4, #8]
 800f200:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f204:	705a      	strb	r2, [r3, #1]
 800f206:	68a2      	ldr	r2, [r4, #8]
 800f208:	6923      	ldr	r3, [r4, #16]
 800f20a:	3202      	adds	r2, #2
 800f20c:	3302      	adds	r3, #2
 800f20e:	2102      	movs	r1, #2
 800f210:	60a2      	str	r2, [r4, #8]
 800f212:	6123      	str	r3, [r4, #16]
 800f214:	7561      	strb	r1, [r4, #21]
 800f216:	7da0      	ldrb	r0, [r4, #22]
 800f218:	f080 0001 	eor.w	r0, r0, #1
 800f21c:	b002      	add	sp, #8
 800f21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f222:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f226:	801a      	strh	r2, [r3, #0]
 800f228:	e7ed      	b.n	800f206 <ucdr_serialize_uint16_t+0x9e>
 800f22a:	68a2      	ldr	r2, [r4, #8]
 800f22c:	6923      	ldr	r3, [r4, #16]
 800f22e:	7da0      	ldrb	r0, [r4, #22]
 800f230:	7567      	strb	r7, [r4, #21]
 800f232:	1b92      	subs	r2, r2, r6
 800f234:	1b9b      	subs	r3, r3, r6
 800f236:	f080 0001 	eor.w	r0, r0, #1
 800f23a:	60a2      	str	r2, [r4, #8]
 800f23c:	6123      	str	r3, [r4, #16]
 800f23e:	b002      	add	sp, #8
 800f240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f244:	68a3      	ldr	r3, [r4, #8]
 800f246:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f24a:	701a      	strb	r2, [r3, #0]
 800f24c:	e7bc      	b.n	800f1c8 <ucdr_serialize_uint16_t+0x60>
 800f24e:	4628      	mov	r0, r5
 800f250:	f10d 0506 	add.w	r5, sp, #6
 800f254:	4629      	mov	r1, r5
 800f256:	4632      	mov	r2, r6
 800f258:	f00d f955 	bl	801c506 <memcpy>
 800f25c:	68a0      	ldr	r0, [r4, #8]
 800f25e:	4642      	mov	r2, r8
 800f260:	19a9      	adds	r1, r5, r6
 800f262:	f00d f950 	bl	801c506 <memcpy>
 800f266:	e7af      	b.n	800f1c8 <ucdr_serialize_uint16_t+0x60>

0800f268 <ucdr_serialize_endian_uint16_t>:
 800f268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f26c:	b083      	sub	sp, #12
 800f26e:	460d      	mov	r5, r1
 800f270:	2102      	movs	r1, #2
 800f272:	4604      	mov	r4, r0
 800f274:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f278:	f001 f9c0 	bl	80105fc <ucdr_buffer_alignment>
 800f27c:	4601      	mov	r1, r0
 800f27e:	4620      	mov	r0, r4
 800f280:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f284:	f001 f9fe 	bl	8010684 <ucdr_advance_buffer>
 800f288:	2102      	movs	r1, #2
 800f28a:	4620      	mov	r0, r4
 800f28c:	f001 f956 	bl	801053c <ucdr_check_buffer_available_for>
 800f290:	bb70      	cbnz	r0, 800f2f0 <ucdr_serialize_endian_uint16_t+0x88>
 800f292:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f296:	42be      	cmp	r6, r7
 800f298:	d925      	bls.n	800f2e6 <ucdr_serialize_endian_uint16_t+0x7e>
 800f29a:	6923      	ldr	r3, [r4, #16]
 800f29c:	60a6      	str	r6, [r4, #8]
 800f29e:	1bf6      	subs	r6, r6, r7
 800f2a0:	4433      	add	r3, r6
 800f2a2:	f1c6 0902 	rsb	r9, r6, #2
 800f2a6:	6123      	str	r3, [r4, #16]
 800f2a8:	4649      	mov	r1, r9
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f001 f952 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	d039      	beq.n	800f328 <ucdr_serialize_endian_uint16_t+0xc0>
 800f2b4:	2d01      	cmp	r5, #1
 800f2b6:	d04a      	beq.n	800f34e <ucdr_serialize_endian_uint16_t+0xe6>
 800f2b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f2bc:	703b      	strb	r3, [r7, #0]
 800f2be:	2e00      	cmp	r6, #0
 800f2c0:	d040      	beq.n	800f344 <ucdr_serialize_endian_uint16_t+0xdc>
 800f2c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f2c6:	707b      	strb	r3, [r7, #1]
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	68a2      	ldr	r2, [r4, #8]
 800f2cc:	7da0      	ldrb	r0, [r4, #22]
 800f2ce:	3302      	adds	r3, #2
 800f2d0:	444a      	add	r2, r9
 800f2d2:	1b9b      	subs	r3, r3, r6
 800f2d4:	2102      	movs	r1, #2
 800f2d6:	f080 0001 	eor.w	r0, r0, #1
 800f2da:	60a2      	str	r2, [r4, #8]
 800f2dc:	6123      	str	r3, [r4, #16]
 800f2de:	7561      	strb	r1, [r4, #21]
 800f2e0:	b003      	add	sp, #12
 800f2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2e6:	2102      	movs	r1, #2
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f001 f933 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f2ee:	b188      	cbz	r0, 800f314 <ucdr_serialize_endian_uint16_t+0xac>
 800f2f0:	2d01      	cmp	r5, #1
 800f2f2:	68a3      	ldr	r3, [r4, #8]
 800f2f4:	d014      	beq.n	800f320 <ucdr_serialize_endian_uint16_t+0xb8>
 800f2f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f2fa:	701a      	strb	r2, [r3, #0]
 800f2fc:	68a3      	ldr	r3, [r4, #8]
 800f2fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f302:	705a      	strb	r2, [r3, #1]
 800f304:	68a2      	ldr	r2, [r4, #8]
 800f306:	6923      	ldr	r3, [r4, #16]
 800f308:	3202      	adds	r2, #2
 800f30a:	3302      	adds	r3, #2
 800f30c:	2102      	movs	r1, #2
 800f30e:	60a2      	str	r2, [r4, #8]
 800f310:	6123      	str	r3, [r4, #16]
 800f312:	7561      	strb	r1, [r4, #21]
 800f314:	7da0      	ldrb	r0, [r4, #22]
 800f316:	f080 0001 	eor.w	r0, r0, #1
 800f31a:	b003      	add	sp, #12
 800f31c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f320:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f324:	801a      	strh	r2, [r3, #0]
 800f326:	e7ed      	b.n	800f304 <ucdr_serialize_endian_uint16_t+0x9c>
 800f328:	68a2      	ldr	r2, [r4, #8]
 800f32a:	6923      	ldr	r3, [r4, #16]
 800f32c:	7da0      	ldrb	r0, [r4, #22]
 800f32e:	f884 8015 	strb.w	r8, [r4, #21]
 800f332:	1b92      	subs	r2, r2, r6
 800f334:	1b9b      	subs	r3, r3, r6
 800f336:	f080 0001 	eor.w	r0, r0, #1
 800f33a:	60a2      	str	r2, [r4, #8]
 800f33c:	6123      	str	r3, [r4, #16]
 800f33e:	b003      	add	sp, #12
 800f340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f344:	68a3      	ldr	r3, [r4, #8]
 800f346:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f34a:	701a      	strb	r2, [r3, #0]
 800f34c:	e7bc      	b.n	800f2c8 <ucdr_serialize_endian_uint16_t+0x60>
 800f34e:	f10d 0506 	add.w	r5, sp, #6
 800f352:	4629      	mov	r1, r5
 800f354:	4632      	mov	r2, r6
 800f356:	4638      	mov	r0, r7
 800f358:	f00d f8d5 	bl	801c506 <memcpy>
 800f35c:	68a0      	ldr	r0, [r4, #8]
 800f35e:	464a      	mov	r2, r9
 800f360:	19a9      	adds	r1, r5, r6
 800f362:	f00d f8d0 	bl	801c506 <memcpy>
 800f366:	e7af      	b.n	800f2c8 <ucdr_serialize_endian_uint16_t+0x60>

0800f368 <ucdr_deserialize_uint16_t>:
 800f368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f36c:	460d      	mov	r5, r1
 800f36e:	2102      	movs	r1, #2
 800f370:	4604      	mov	r4, r0
 800f372:	f001 f943 	bl	80105fc <ucdr_buffer_alignment>
 800f376:	4601      	mov	r1, r0
 800f378:	4620      	mov	r0, r4
 800f37a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f37e:	f001 f981 	bl	8010684 <ucdr_advance_buffer>
 800f382:	2102      	movs	r1, #2
 800f384:	4620      	mov	r0, r4
 800f386:	f001 f8d9 	bl	801053c <ucdr_check_buffer_available_for>
 800f38a:	bb60      	cbnz	r0, 800f3e6 <ucdr_deserialize_uint16_t+0x7e>
 800f38c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f390:	42be      	cmp	r6, r7
 800f392:	d923      	bls.n	800f3dc <ucdr_deserialize_uint16_t+0x74>
 800f394:	6923      	ldr	r3, [r4, #16]
 800f396:	60a6      	str	r6, [r4, #8]
 800f398:	1bf6      	subs	r6, r6, r7
 800f39a:	4433      	add	r3, r6
 800f39c:	f1c6 0902 	rsb	r9, r6, #2
 800f3a0:	6123      	str	r3, [r4, #16]
 800f3a2:	4649      	mov	r1, r9
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f001 f8d5 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d034      	beq.n	800f418 <ucdr_deserialize_uint16_t+0xb0>
 800f3ae:	7d23      	ldrb	r3, [r4, #20]
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	d042      	beq.n	800f43a <ucdr_deserialize_uint16_t+0xd2>
 800f3b4:	787b      	ldrb	r3, [r7, #1]
 800f3b6:	702b      	strb	r3, [r5, #0]
 800f3b8:	2e00      	cmp	r6, #0
 800f3ba:	d03a      	beq.n	800f432 <ucdr_deserialize_uint16_t+0xca>
 800f3bc:	783b      	ldrb	r3, [r7, #0]
 800f3be:	706b      	strb	r3, [r5, #1]
 800f3c0:	6923      	ldr	r3, [r4, #16]
 800f3c2:	68a2      	ldr	r2, [r4, #8]
 800f3c4:	7da0      	ldrb	r0, [r4, #22]
 800f3c6:	2102      	movs	r1, #2
 800f3c8:	3302      	adds	r3, #2
 800f3ca:	444a      	add	r2, r9
 800f3cc:	1b9b      	subs	r3, r3, r6
 800f3ce:	7561      	strb	r1, [r4, #21]
 800f3d0:	60a2      	str	r2, [r4, #8]
 800f3d2:	6123      	str	r3, [r4, #16]
 800f3d4:	f080 0001 	eor.w	r0, r0, #1
 800f3d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3dc:	2102      	movs	r1, #2
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f001 f8b8 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f3e4:	b180      	cbz	r0, 800f408 <ucdr_deserialize_uint16_t+0xa0>
 800f3e6:	7d23      	ldrb	r3, [r4, #20]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	d011      	beq.n	800f412 <ucdr_deserialize_uint16_t+0xaa>
 800f3ee:	785b      	ldrb	r3, [r3, #1]
 800f3f0:	702b      	strb	r3, [r5, #0]
 800f3f2:	68a3      	ldr	r3, [r4, #8]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	706b      	strb	r3, [r5, #1]
 800f3f8:	68a2      	ldr	r2, [r4, #8]
 800f3fa:	6923      	ldr	r3, [r4, #16]
 800f3fc:	3202      	adds	r2, #2
 800f3fe:	3302      	adds	r3, #2
 800f400:	2102      	movs	r1, #2
 800f402:	60a2      	str	r2, [r4, #8]
 800f404:	6123      	str	r3, [r4, #16]
 800f406:	7561      	strb	r1, [r4, #21]
 800f408:	7da0      	ldrb	r0, [r4, #22]
 800f40a:	f080 0001 	eor.w	r0, r0, #1
 800f40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	802b      	strh	r3, [r5, #0]
 800f416:	e7ef      	b.n	800f3f8 <ucdr_deserialize_uint16_t+0x90>
 800f418:	68a2      	ldr	r2, [r4, #8]
 800f41a:	6923      	ldr	r3, [r4, #16]
 800f41c:	7da0      	ldrb	r0, [r4, #22]
 800f41e:	f884 8015 	strb.w	r8, [r4, #21]
 800f422:	1b92      	subs	r2, r2, r6
 800f424:	1b9b      	subs	r3, r3, r6
 800f426:	60a2      	str	r2, [r4, #8]
 800f428:	6123      	str	r3, [r4, #16]
 800f42a:	f080 0001 	eor.w	r0, r0, #1
 800f42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f432:	68a3      	ldr	r3, [r4, #8]
 800f434:	781b      	ldrb	r3, [r3, #0]
 800f436:	706b      	strb	r3, [r5, #1]
 800f438:	e7c2      	b.n	800f3c0 <ucdr_deserialize_uint16_t+0x58>
 800f43a:	4639      	mov	r1, r7
 800f43c:	4632      	mov	r2, r6
 800f43e:	4628      	mov	r0, r5
 800f440:	f00d f861 	bl	801c506 <memcpy>
 800f444:	68a1      	ldr	r1, [r4, #8]
 800f446:	464a      	mov	r2, r9
 800f448:	19a8      	adds	r0, r5, r6
 800f44a:	f00d f85c 	bl	801c506 <memcpy>
 800f44e:	e7b7      	b.n	800f3c0 <ucdr_deserialize_uint16_t+0x58>

0800f450 <ucdr_deserialize_endian_uint16_t>:
 800f450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f454:	460e      	mov	r6, r1
 800f456:	2102      	movs	r1, #2
 800f458:	4604      	mov	r4, r0
 800f45a:	4615      	mov	r5, r2
 800f45c:	f001 f8ce 	bl	80105fc <ucdr_buffer_alignment>
 800f460:	4601      	mov	r1, r0
 800f462:	4620      	mov	r0, r4
 800f464:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f468:	f001 f90c 	bl	8010684 <ucdr_advance_buffer>
 800f46c:	2102      	movs	r1, #2
 800f46e:	4620      	mov	r0, r4
 800f470:	f001 f864 	bl	801053c <ucdr_check_buffer_available_for>
 800f474:	bb70      	cbnz	r0, 800f4d4 <ucdr_deserialize_endian_uint16_t+0x84>
 800f476:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f47a:	4547      	cmp	r7, r8
 800f47c:	d925      	bls.n	800f4ca <ucdr_deserialize_endian_uint16_t+0x7a>
 800f47e:	6923      	ldr	r3, [r4, #16]
 800f480:	60a7      	str	r7, [r4, #8]
 800f482:	eba7 0708 	sub.w	r7, r7, r8
 800f486:	443b      	add	r3, r7
 800f488:	f1c7 0a02 	rsb	sl, r7, #2
 800f48c:	6123      	str	r3, [r4, #16]
 800f48e:	4651      	mov	r1, sl
 800f490:	4620      	mov	r0, r4
 800f492:	f001 f85f 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f496:	2800      	cmp	r0, #0
 800f498:	d034      	beq.n	800f504 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f49a:	2e01      	cmp	r6, #1
 800f49c:	d043      	beq.n	800f526 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f49e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f4a2:	702b      	strb	r3, [r5, #0]
 800f4a4:	2f00      	cmp	r7, #0
 800f4a6:	d03a      	beq.n	800f51e <ucdr_deserialize_endian_uint16_t+0xce>
 800f4a8:	f898 3000 	ldrb.w	r3, [r8]
 800f4ac:	706b      	strb	r3, [r5, #1]
 800f4ae:	6923      	ldr	r3, [r4, #16]
 800f4b0:	68a2      	ldr	r2, [r4, #8]
 800f4b2:	7da0      	ldrb	r0, [r4, #22]
 800f4b4:	2102      	movs	r1, #2
 800f4b6:	3302      	adds	r3, #2
 800f4b8:	4452      	add	r2, sl
 800f4ba:	1bdb      	subs	r3, r3, r7
 800f4bc:	7561      	strb	r1, [r4, #21]
 800f4be:	60a2      	str	r2, [r4, #8]
 800f4c0:	6123      	str	r3, [r4, #16]
 800f4c2:	f080 0001 	eor.w	r0, r0, #1
 800f4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ca:	2102      	movs	r1, #2
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	f001 f841 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f4d2:	b178      	cbz	r0, 800f4f4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f4d4:	2e01      	cmp	r6, #1
 800f4d6:	68a3      	ldr	r3, [r4, #8]
 800f4d8:	d011      	beq.n	800f4fe <ucdr_deserialize_endian_uint16_t+0xae>
 800f4da:	785b      	ldrb	r3, [r3, #1]
 800f4dc:	702b      	strb	r3, [r5, #0]
 800f4de:	68a3      	ldr	r3, [r4, #8]
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	706b      	strb	r3, [r5, #1]
 800f4e4:	68a2      	ldr	r2, [r4, #8]
 800f4e6:	6923      	ldr	r3, [r4, #16]
 800f4e8:	3202      	adds	r2, #2
 800f4ea:	3302      	adds	r3, #2
 800f4ec:	2102      	movs	r1, #2
 800f4ee:	60a2      	str	r2, [r4, #8]
 800f4f0:	6123      	str	r3, [r4, #16]
 800f4f2:	7561      	strb	r1, [r4, #21]
 800f4f4:	7da0      	ldrb	r0, [r4, #22]
 800f4f6:	f080 0001 	eor.w	r0, r0, #1
 800f4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fe:	881b      	ldrh	r3, [r3, #0]
 800f500:	802b      	strh	r3, [r5, #0]
 800f502:	e7ef      	b.n	800f4e4 <ucdr_deserialize_endian_uint16_t+0x94>
 800f504:	68a2      	ldr	r2, [r4, #8]
 800f506:	6923      	ldr	r3, [r4, #16]
 800f508:	7da0      	ldrb	r0, [r4, #22]
 800f50a:	f884 9015 	strb.w	r9, [r4, #21]
 800f50e:	1bd2      	subs	r2, r2, r7
 800f510:	1bdb      	subs	r3, r3, r7
 800f512:	60a2      	str	r2, [r4, #8]
 800f514:	6123      	str	r3, [r4, #16]
 800f516:	f080 0001 	eor.w	r0, r0, #1
 800f51a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f51e:	68a3      	ldr	r3, [r4, #8]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	706b      	strb	r3, [r5, #1]
 800f524:	e7c3      	b.n	800f4ae <ucdr_deserialize_endian_uint16_t+0x5e>
 800f526:	4641      	mov	r1, r8
 800f528:	463a      	mov	r2, r7
 800f52a:	4628      	mov	r0, r5
 800f52c:	f00c ffeb 	bl	801c506 <memcpy>
 800f530:	68a1      	ldr	r1, [r4, #8]
 800f532:	4652      	mov	r2, sl
 800f534:	19e8      	adds	r0, r5, r7
 800f536:	f00c ffe6 	bl	801c506 <memcpy>
 800f53a:	e7b8      	b.n	800f4ae <ucdr_deserialize_endian_uint16_t+0x5e>

0800f53c <ucdr_serialize_uint32_t>:
 800f53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f540:	b082      	sub	sp, #8
 800f542:	4604      	mov	r4, r0
 800f544:	9101      	str	r1, [sp, #4]
 800f546:	2104      	movs	r1, #4
 800f548:	f001 f858 	bl	80105fc <ucdr_buffer_alignment>
 800f54c:	4601      	mov	r1, r0
 800f54e:	4620      	mov	r0, r4
 800f550:	7d67      	ldrb	r7, [r4, #21]
 800f552:	f001 f897 	bl	8010684 <ucdr_advance_buffer>
 800f556:	2104      	movs	r1, #4
 800f558:	4620      	mov	r0, r4
 800f55a:	f000 ffef 	bl	801053c <ucdr_check_buffer_available_for>
 800f55e:	2800      	cmp	r0, #0
 800f560:	d139      	bne.n	800f5d6 <ucdr_serialize_uint32_t+0x9a>
 800f562:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f566:	42ab      	cmp	r3, r5
 800f568:	d930      	bls.n	800f5cc <ucdr_serialize_uint32_t+0x90>
 800f56a:	1b5e      	subs	r6, r3, r5
 800f56c:	60a3      	str	r3, [r4, #8]
 800f56e:	6923      	ldr	r3, [r4, #16]
 800f570:	f1c6 0804 	rsb	r8, r6, #4
 800f574:	4433      	add	r3, r6
 800f576:	6123      	str	r3, [r4, #16]
 800f578:	4641      	mov	r1, r8
 800f57a:	4620      	mov	r0, r4
 800f57c:	f000 ffea 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f580:	2800      	cmp	r0, #0
 800f582:	d04c      	beq.n	800f61e <ucdr_serialize_uint32_t+0xe2>
 800f584:	7d23      	ldrb	r3, [r4, #20]
 800f586:	2b01      	cmp	r3, #1
 800f588:	d063      	beq.n	800f652 <ucdr_serialize_uint32_t+0x116>
 800f58a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f58e:	702b      	strb	r3, [r5, #0]
 800f590:	2e00      	cmp	r6, #0
 800f592:	d051      	beq.n	800f638 <ucdr_serialize_uint32_t+0xfc>
 800f594:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f598:	706b      	strb	r3, [r5, #1]
 800f59a:	2e01      	cmp	r6, #1
 800f59c:	d050      	beq.n	800f640 <ucdr_serialize_uint32_t+0x104>
 800f59e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f5a2:	70ab      	strb	r3, [r5, #2]
 800f5a4:	2e02      	cmp	r6, #2
 800f5a6:	d04f      	beq.n	800f648 <ucdr_serialize_uint32_t+0x10c>
 800f5a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f5ac:	70eb      	strb	r3, [r5, #3]
 800f5ae:	6923      	ldr	r3, [r4, #16]
 800f5b0:	68a2      	ldr	r2, [r4, #8]
 800f5b2:	7da0      	ldrb	r0, [r4, #22]
 800f5b4:	3304      	adds	r3, #4
 800f5b6:	1b9e      	subs	r6, r3, r6
 800f5b8:	4442      	add	r2, r8
 800f5ba:	2304      	movs	r3, #4
 800f5bc:	f080 0001 	eor.w	r0, r0, #1
 800f5c0:	60a2      	str	r2, [r4, #8]
 800f5c2:	6126      	str	r6, [r4, #16]
 800f5c4:	7563      	strb	r3, [r4, #21]
 800f5c6:	b002      	add	sp, #8
 800f5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5cc:	2104      	movs	r1, #4
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f000 ffc0 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f5d4:	b1d0      	cbz	r0, 800f60c <ucdr_serialize_uint32_t+0xd0>
 800f5d6:	7d23      	ldrb	r3, [r4, #20]
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	68a3      	ldr	r3, [r4, #8]
 800f5dc:	d01c      	beq.n	800f618 <ucdr_serialize_uint32_t+0xdc>
 800f5de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f5e2:	701a      	strb	r2, [r3, #0]
 800f5e4:	68a3      	ldr	r3, [r4, #8]
 800f5e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5ea:	705a      	strb	r2, [r3, #1]
 800f5ec:	68a3      	ldr	r3, [r4, #8]
 800f5ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f5f2:	709a      	strb	r2, [r3, #2]
 800f5f4:	68a3      	ldr	r3, [r4, #8]
 800f5f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f5fa:	70da      	strb	r2, [r3, #3]
 800f5fc:	68a2      	ldr	r2, [r4, #8]
 800f5fe:	6923      	ldr	r3, [r4, #16]
 800f600:	3204      	adds	r2, #4
 800f602:	3304      	adds	r3, #4
 800f604:	2104      	movs	r1, #4
 800f606:	60a2      	str	r2, [r4, #8]
 800f608:	6123      	str	r3, [r4, #16]
 800f60a:	7561      	strb	r1, [r4, #21]
 800f60c:	7da0      	ldrb	r0, [r4, #22]
 800f60e:	f080 0001 	eor.w	r0, r0, #1
 800f612:	b002      	add	sp, #8
 800f614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f618:	9a01      	ldr	r2, [sp, #4]
 800f61a:	601a      	str	r2, [r3, #0]
 800f61c:	e7ee      	b.n	800f5fc <ucdr_serialize_uint32_t+0xc0>
 800f61e:	68a2      	ldr	r2, [r4, #8]
 800f620:	6923      	ldr	r3, [r4, #16]
 800f622:	7da0      	ldrb	r0, [r4, #22]
 800f624:	7567      	strb	r7, [r4, #21]
 800f626:	1b92      	subs	r2, r2, r6
 800f628:	1b9b      	subs	r3, r3, r6
 800f62a:	f080 0001 	eor.w	r0, r0, #1
 800f62e:	60a2      	str	r2, [r4, #8]
 800f630:	6123      	str	r3, [r4, #16]
 800f632:	b002      	add	sp, #8
 800f634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f638:	68a3      	ldr	r3, [r4, #8]
 800f63a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f63e:	701a      	strb	r2, [r3, #0]
 800f640:	68a3      	ldr	r3, [r4, #8]
 800f642:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f646:	701a      	strb	r2, [r3, #0]
 800f648:	68a3      	ldr	r3, [r4, #8]
 800f64a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f64e:	701a      	strb	r2, [r3, #0]
 800f650:	e7ad      	b.n	800f5ae <ucdr_serialize_uint32_t+0x72>
 800f652:	4628      	mov	r0, r5
 800f654:	ad01      	add	r5, sp, #4
 800f656:	4629      	mov	r1, r5
 800f658:	4632      	mov	r2, r6
 800f65a:	f00c ff54 	bl	801c506 <memcpy>
 800f65e:	68a0      	ldr	r0, [r4, #8]
 800f660:	4642      	mov	r2, r8
 800f662:	19a9      	adds	r1, r5, r6
 800f664:	f00c ff4f 	bl	801c506 <memcpy>
 800f668:	e7a1      	b.n	800f5ae <ucdr_serialize_uint32_t+0x72>
 800f66a:	bf00      	nop

0800f66c <ucdr_serialize_endian_uint32_t>:
 800f66c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f670:	b083      	sub	sp, #12
 800f672:	460d      	mov	r5, r1
 800f674:	2104      	movs	r1, #4
 800f676:	4604      	mov	r4, r0
 800f678:	9201      	str	r2, [sp, #4]
 800f67a:	f000 ffbf 	bl	80105fc <ucdr_buffer_alignment>
 800f67e:	4601      	mov	r1, r0
 800f680:	4620      	mov	r0, r4
 800f682:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f686:	f000 fffd 	bl	8010684 <ucdr_advance_buffer>
 800f68a:	2104      	movs	r1, #4
 800f68c:	4620      	mov	r0, r4
 800f68e:	f000 ff55 	bl	801053c <ucdr_check_buffer_available_for>
 800f692:	2800      	cmp	r0, #0
 800f694:	d138      	bne.n	800f708 <ucdr_serialize_endian_uint32_t+0x9c>
 800f696:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f69a:	42b7      	cmp	r7, r6
 800f69c:	d92f      	bls.n	800f6fe <ucdr_serialize_endian_uint32_t+0x92>
 800f69e:	6923      	ldr	r3, [r4, #16]
 800f6a0:	60a7      	str	r7, [r4, #8]
 800f6a2:	1bbf      	subs	r7, r7, r6
 800f6a4:	443b      	add	r3, r7
 800f6a6:	f1c7 0904 	rsb	r9, r7, #4
 800f6aa:	6123      	str	r3, [r4, #16]
 800f6ac:	4649      	mov	r1, r9
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f000 ff50 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d04a      	beq.n	800f74e <ucdr_serialize_endian_uint32_t+0xe2>
 800f6b8:	2d01      	cmp	r5, #1
 800f6ba:	d063      	beq.n	800f784 <ucdr_serialize_endian_uint32_t+0x118>
 800f6bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f6c0:	7033      	strb	r3, [r6, #0]
 800f6c2:	2f00      	cmp	r7, #0
 800f6c4:	d051      	beq.n	800f76a <ucdr_serialize_endian_uint32_t+0xfe>
 800f6c6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f6ca:	7073      	strb	r3, [r6, #1]
 800f6cc:	2f01      	cmp	r7, #1
 800f6ce:	d050      	beq.n	800f772 <ucdr_serialize_endian_uint32_t+0x106>
 800f6d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f6d4:	70b3      	strb	r3, [r6, #2]
 800f6d6:	2f02      	cmp	r7, #2
 800f6d8:	d04f      	beq.n	800f77a <ucdr_serialize_endian_uint32_t+0x10e>
 800f6da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f6de:	70f3      	strb	r3, [r6, #3]
 800f6e0:	6923      	ldr	r3, [r4, #16]
 800f6e2:	68a2      	ldr	r2, [r4, #8]
 800f6e4:	7da0      	ldrb	r0, [r4, #22]
 800f6e6:	3304      	adds	r3, #4
 800f6e8:	444a      	add	r2, r9
 800f6ea:	1bdb      	subs	r3, r3, r7
 800f6ec:	2104      	movs	r1, #4
 800f6ee:	f080 0001 	eor.w	r0, r0, #1
 800f6f2:	60a2      	str	r2, [r4, #8]
 800f6f4:	6123      	str	r3, [r4, #16]
 800f6f6:	7561      	strb	r1, [r4, #21]
 800f6f8:	b003      	add	sp, #12
 800f6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6fe:	2104      	movs	r1, #4
 800f700:	4620      	mov	r0, r4
 800f702:	f000 ff27 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f706:	b1c8      	cbz	r0, 800f73c <ucdr_serialize_endian_uint32_t+0xd0>
 800f708:	2d01      	cmp	r5, #1
 800f70a:	68a3      	ldr	r3, [r4, #8]
 800f70c:	d01c      	beq.n	800f748 <ucdr_serialize_endian_uint32_t+0xdc>
 800f70e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f712:	701a      	strb	r2, [r3, #0]
 800f714:	68a3      	ldr	r3, [r4, #8]
 800f716:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f71a:	705a      	strb	r2, [r3, #1]
 800f71c:	68a3      	ldr	r3, [r4, #8]
 800f71e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f722:	709a      	strb	r2, [r3, #2]
 800f724:	68a3      	ldr	r3, [r4, #8]
 800f726:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f72a:	70da      	strb	r2, [r3, #3]
 800f72c:	68a2      	ldr	r2, [r4, #8]
 800f72e:	6923      	ldr	r3, [r4, #16]
 800f730:	3204      	adds	r2, #4
 800f732:	3304      	adds	r3, #4
 800f734:	2104      	movs	r1, #4
 800f736:	60a2      	str	r2, [r4, #8]
 800f738:	6123      	str	r3, [r4, #16]
 800f73a:	7561      	strb	r1, [r4, #21]
 800f73c:	7da0      	ldrb	r0, [r4, #22]
 800f73e:	f080 0001 	eor.w	r0, r0, #1
 800f742:	b003      	add	sp, #12
 800f744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f748:	9a01      	ldr	r2, [sp, #4]
 800f74a:	601a      	str	r2, [r3, #0]
 800f74c:	e7ee      	b.n	800f72c <ucdr_serialize_endian_uint32_t+0xc0>
 800f74e:	68a2      	ldr	r2, [r4, #8]
 800f750:	6923      	ldr	r3, [r4, #16]
 800f752:	7da0      	ldrb	r0, [r4, #22]
 800f754:	f884 8015 	strb.w	r8, [r4, #21]
 800f758:	1bd2      	subs	r2, r2, r7
 800f75a:	1bdb      	subs	r3, r3, r7
 800f75c:	f080 0001 	eor.w	r0, r0, #1
 800f760:	60a2      	str	r2, [r4, #8]
 800f762:	6123      	str	r3, [r4, #16]
 800f764:	b003      	add	sp, #12
 800f766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f76a:	68a3      	ldr	r3, [r4, #8]
 800f76c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f770:	701a      	strb	r2, [r3, #0]
 800f772:	68a3      	ldr	r3, [r4, #8]
 800f774:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f778:	701a      	strb	r2, [r3, #0]
 800f77a:	68a3      	ldr	r3, [r4, #8]
 800f77c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f780:	701a      	strb	r2, [r3, #0]
 800f782:	e7ad      	b.n	800f6e0 <ucdr_serialize_endian_uint32_t+0x74>
 800f784:	ad01      	add	r5, sp, #4
 800f786:	4629      	mov	r1, r5
 800f788:	463a      	mov	r2, r7
 800f78a:	4630      	mov	r0, r6
 800f78c:	f00c febb 	bl	801c506 <memcpy>
 800f790:	68a0      	ldr	r0, [r4, #8]
 800f792:	464a      	mov	r2, r9
 800f794:	19e9      	adds	r1, r5, r7
 800f796:	f00c feb6 	bl	801c506 <memcpy>
 800f79a:	e7a1      	b.n	800f6e0 <ucdr_serialize_endian_uint32_t+0x74>

0800f79c <ucdr_deserialize_uint32_t>:
 800f79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7a0:	460d      	mov	r5, r1
 800f7a2:	2104      	movs	r1, #4
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	f000 ff29 	bl	80105fc <ucdr_buffer_alignment>
 800f7aa:	4601      	mov	r1, r0
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f7b2:	f000 ff67 	bl	8010684 <ucdr_advance_buffer>
 800f7b6:	2104      	movs	r1, #4
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f000 febf 	bl	801053c <ucdr_check_buffer_available_for>
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d138      	bne.n	800f834 <ucdr_deserialize_uint32_t+0x98>
 800f7c2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f7c6:	42b7      	cmp	r7, r6
 800f7c8:	d92f      	bls.n	800f82a <ucdr_deserialize_uint32_t+0x8e>
 800f7ca:	6923      	ldr	r3, [r4, #16]
 800f7cc:	60a7      	str	r7, [r4, #8]
 800f7ce:	1bbf      	subs	r7, r7, r6
 800f7d0:	443b      	add	r3, r7
 800f7d2:	f1c7 0904 	rsb	r9, r7, #4
 800f7d6:	6123      	str	r3, [r4, #16]
 800f7d8:	4649      	mov	r1, r9
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f000 feba 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d046      	beq.n	800f872 <ucdr_deserialize_uint32_t+0xd6>
 800f7e4:	7d23      	ldrb	r3, [r4, #20]
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d05c      	beq.n	800f8a4 <ucdr_deserialize_uint32_t+0x108>
 800f7ea:	78f3      	ldrb	r3, [r6, #3]
 800f7ec:	702b      	strb	r3, [r5, #0]
 800f7ee:	2f00      	cmp	r7, #0
 800f7f0:	d04c      	beq.n	800f88c <ucdr_deserialize_uint32_t+0xf0>
 800f7f2:	78b3      	ldrb	r3, [r6, #2]
 800f7f4:	706b      	strb	r3, [r5, #1]
 800f7f6:	2f01      	cmp	r7, #1
 800f7f8:	f105 0302 	add.w	r3, r5, #2
 800f7fc:	d04a      	beq.n	800f894 <ucdr_deserialize_uint32_t+0xf8>
 800f7fe:	7873      	ldrb	r3, [r6, #1]
 800f800:	70ab      	strb	r3, [r5, #2]
 800f802:	2f02      	cmp	r7, #2
 800f804:	f105 0303 	add.w	r3, r5, #3
 800f808:	d048      	beq.n	800f89c <ucdr_deserialize_uint32_t+0x100>
 800f80a:	7833      	ldrb	r3, [r6, #0]
 800f80c:	70eb      	strb	r3, [r5, #3]
 800f80e:	6923      	ldr	r3, [r4, #16]
 800f810:	68a2      	ldr	r2, [r4, #8]
 800f812:	7da0      	ldrb	r0, [r4, #22]
 800f814:	2104      	movs	r1, #4
 800f816:	3304      	adds	r3, #4
 800f818:	444a      	add	r2, r9
 800f81a:	1bdb      	subs	r3, r3, r7
 800f81c:	7561      	strb	r1, [r4, #21]
 800f81e:	60a2      	str	r2, [r4, #8]
 800f820:	6123      	str	r3, [r4, #16]
 800f822:	f080 0001 	eor.w	r0, r0, #1
 800f826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f82a:	2104      	movs	r1, #4
 800f82c:	4620      	mov	r0, r4
 800f82e:	f000 fe91 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f832:	b1b0      	cbz	r0, 800f862 <ucdr_deserialize_uint32_t+0xc6>
 800f834:	7d23      	ldrb	r3, [r4, #20]
 800f836:	2b01      	cmp	r3, #1
 800f838:	68a3      	ldr	r3, [r4, #8]
 800f83a:	d017      	beq.n	800f86c <ucdr_deserialize_uint32_t+0xd0>
 800f83c:	78db      	ldrb	r3, [r3, #3]
 800f83e:	702b      	strb	r3, [r5, #0]
 800f840:	68a3      	ldr	r3, [r4, #8]
 800f842:	789b      	ldrb	r3, [r3, #2]
 800f844:	706b      	strb	r3, [r5, #1]
 800f846:	68a3      	ldr	r3, [r4, #8]
 800f848:	785b      	ldrb	r3, [r3, #1]
 800f84a:	70ab      	strb	r3, [r5, #2]
 800f84c:	68a3      	ldr	r3, [r4, #8]
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	70eb      	strb	r3, [r5, #3]
 800f852:	68a2      	ldr	r2, [r4, #8]
 800f854:	6923      	ldr	r3, [r4, #16]
 800f856:	3204      	adds	r2, #4
 800f858:	3304      	adds	r3, #4
 800f85a:	2104      	movs	r1, #4
 800f85c:	60a2      	str	r2, [r4, #8]
 800f85e:	6123      	str	r3, [r4, #16]
 800f860:	7561      	strb	r1, [r4, #21]
 800f862:	7da0      	ldrb	r0, [r4, #22]
 800f864:	f080 0001 	eor.w	r0, r0, #1
 800f868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	602b      	str	r3, [r5, #0]
 800f870:	e7ef      	b.n	800f852 <ucdr_deserialize_uint32_t+0xb6>
 800f872:	68a2      	ldr	r2, [r4, #8]
 800f874:	6923      	ldr	r3, [r4, #16]
 800f876:	7da0      	ldrb	r0, [r4, #22]
 800f878:	f884 8015 	strb.w	r8, [r4, #21]
 800f87c:	1bd2      	subs	r2, r2, r7
 800f87e:	1bdb      	subs	r3, r3, r7
 800f880:	60a2      	str	r2, [r4, #8]
 800f882:	6123      	str	r3, [r4, #16]
 800f884:	f080 0001 	eor.w	r0, r0, #1
 800f888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f88c:	68a3      	ldr	r3, [r4, #8]
 800f88e:	789b      	ldrb	r3, [r3, #2]
 800f890:	706b      	strb	r3, [r5, #1]
 800f892:	1cab      	adds	r3, r5, #2
 800f894:	68a2      	ldr	r2, [r4, #8]
 800f896:	7852      	ldrb	r2, [r2, #1]
 800f898:	f803 2b01 	strb.w	r2, [r3], #1
 800f89c:	68a2      	ldr	r2, [r4, #8]
 800f89e:	7812      	ldrb	r2, [r2, #0]
 800f8a0:	701a      	strb	r2, [r3, #0]
 800f8a2:	e7b4      	b.n	800f80e <ucdr_deserialize_uint32_t+0x72>
 800f8a4:	4631      	mov	r1, r6
 800f8a6:	463a      	mov	r2, r7
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	f00c fe2c 	bl	801c506 <memcpy>
 800f8ae:	68a1      	ldr	r1, [r4, #8]
 800f8b0:	464a      	mov	r2, r9
 800f8b2:	19e8      	adds	r0, r5, r7
 800f8b4:	f00c fe27 	bl	801c506 <memcpy>
 800f8b8:	e7a9      	b.n	800f80e <ucdr_deserialize_uint32_t+0x72>
 800f8ba:	bf00      	nop

0800f8bc <ucdr_deserialize_endian_uint32_t>:
 800f8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	460e      	mov	r6, r1
 800f8c2:	2104      	movs	r1, #4
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	4615      	mov	r5, r2
 800f8c8:	f000 fe98 	bl	80105fc <ucdr_buffer_alignment>
 800f8cc:	4601      	mov	r1, r0
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f8d4:	f000 fed6 	bl	8010684 <ucdr_advance_buffer>
 800f8d8:	2104      	movs	r1, #4
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f000 fe2e 	bl	801053c <ucdr_check_buffer_available_for>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d13c      	bne.n	800f95e <ucdr_deserialize_endian_uint32_t+0xa2>
 800f8e4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f8e8:	42bb      	cmp	r3, r7
 800f8ea:	d933      	bls.n	800f954 <ucdr_deserialize_endian_uint32_t+0x98>
 800f8ec:	eba3 0807 	sub.w	r8, r3, r7
 800f8f0:	60a3      	str	r3, [r4, #8]
 800f8f2:	6923      	ldr	r3, [r4, #16]
 800f8f4:	f1c8 0a04 	rsb	sl, r8, #4
 800f8f8:	4443      	add	r3, r8
 800f8fa:	6123      	str	r3, [r4, #16]
 800f8fc:	4651      	mov	r1, sl
 800f8fe:	4620      	mov	r0, r4
 800f900:	f000 fe28 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f904:	2800      	cmp	r0, #0
 800f906:	d048      	beq.n	800f99a <ucdr_deserialize_endian_uint32_t+0xde>
 800f908:	2e01      	cmp	r6, #1
 800f90a:	d061      	beq.n	800f9d0 <ucdr_deserialize_endian_uint32_t+0x114>
 800f90c:	78fb      	ldrb	r3, [r7, #3]
 800f90e:	702b      	strb	r3, [r5, #0]
 800f910:	f1b8 0f00 	cmp.w	r8, #0
 800f914:	d050      	beq.n	800f9b8 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f916:	78bb      	ldrb	r3, [r7, #2]
 800f918:	706b      	strb	r3, [r5, #1]
 800f91a:	f1b8 0f01 	cmp.w	r8, #1
 800f91e:	f105 0302 	add.w	r3, r5, #2
 800f922:	d04d      	beq.n	800f9c0 <ucdr_deserialize_endian_uint32_t+0x104>
 800f924:	787b      	ldrb	r3, [r7, #1]
 800f926:	70ab      	strb	r3, [r5, #2]
 800f928:	f1b8 0f02 	cmp.w	r8, #2
 800f92c:	f105 0303 	add.w	r3, r5, #3
 800f930:	d04a      	beq.n	800f9c8 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f932:	783b      	ldrb	r3, [r7, #0]
 800f934:	70eb      	strb	r3, [r5, #3]
 800f936:	6923      	ldr	r3, [r4, #16]
 800f938:	68a2      	ldr	r2, [r4, #8]
 800f93a:	7da0      	ldrb	r0, [r4, #22]
 800f93c:	2104      	movs	r1, #4
 800f93e:	3304      	adds	r3, #4
 800f940:	4452      	add	r2, sl
 800f942:	eba3 0308 	sub.w	r3, r3, r8
 800f946:	7561      	strb	r1, [r4, #21]
 800f948:	60a2      	str	r2, [r4, #8]
 800f94a:	6123      	str	r3, [r4, #16]
 800f94c:	f080 0001 	eor.w	r0, r0, #1
 800f950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f954:	2104      	movs	r1, #4
 800f956:	4620      	mov	r0, r4
 800f958:	f000 fdfc 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800f95c:	b1a8      	cbz	r0, 800f98a <ucdr_deserialize_endian_uint32_t+0xce>
 800f95e:	2e01      	cmp	r6, #1
 800f960:	68a3      	ldr	r3, [r4, #8]
 800f962:	d017      	beq.n	800f994 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f964:	78db      	ldrb	r3, [r3, #3]
 800f966:	702b      	strb	r3, [r5, #0]
 800f968:	68a3      	ldr	r3, [r4, #8]
 800f96a:	789b      	ldrb	r3, [r3, #2]
 800f96c:	706b      	strb	r3, [r5, #1]
 800f96e:	68a3      	ldr	r3, [r4, #8]
 800f970:	785b      	ldrb	r3, [r3, #1]
 800f972:	70ab      	strb	r3, [r5, #2]
 800f974:	68a3      	ldr	r3, [r4, #8]
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	70eb      	strb	r3, [r5, #3]
 800f97a:	68a2      	ldr	r2, [r4, #8]
 800f97c:	6923      	ldr	r3, [r4, #16]
 800f97e:	3204      	adds	r2, #4
 800f980:	3304      	adds	r3, #4
 800f982:	2104      	movs	r1, #4
 800f984:	60a2      	str	r2, [r4, #8]
 800f986:	6123      	str	r3, [r4, #16]
 800f988:	7561      	strb	r1, [r4, #21]
 800f98a:	7da0      	ldrb	r0, [r4, #22]
 800f98c:	f080 0001 	eor.w	r0, r0, #1
 800f990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	602b      	str	r3, [r5, #0]
 800f998:	e7ef      	b.n	800f97a <ucdr_deserialize_endian_uint32_t+0xbe>
 800f99a:	68a2      	ldr	r2, [r4, #8]
 800f99c:	6923      	ldr	r3, [r4, #16]
 800f99e:	7da0      	ldrb	r0, [r4, #22]
 800f9a0:	f884 9015 	strb.w	r9, [r4, #21]
 800f9a4:	eba2 0208 	sub.w	r2, r2, r8
 800f9a8:	eba3 0308 	sub.w	r3, r3, r8
 800f9ac:	60a2      	str	r2, [r4, #8]
 800f9ae:	6123      	str	r3, [r4, #16]
 800f9b0:	f080 0001 	eor.w	r0, r0, #1
 800f9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9b8:	68a3      	ldr	r3, [r4, #8]
 800f9ba:	789b      	ldrb	r3, [r3, #2]
 800f9bc:	706b      	strb	r3, [r5, #1]
 800f9be:	1cab      	adds	r3, r5, #2
 800f9c0:	68a2      	ldr	r2, [r4, #8]
 800f9c2:	7852      	ldrb	r2, [r2, #1]
 800f9c4:	f803 2b01 	strb.w	r2, [r3], #1
 800f9c8:	68a2      	ldr	r2, [r4, #8]
 800f9ca:	7812      	ldrb	r2, [r2, #0]
 800f9cc:	701a      	strb	r2, [r3, #0]
 800f9ce:	e7b2      	b.n	800f936 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f9d0:	4639      	mov	r1, r7
 800f9d2:	4642      	mov	r2, r8
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	f00c fd96 	bl	801c506 <memcpy>
 800f9da:	68a1      	ldr	r1, [r4, #8]
 800f9dc:	4652      	mov	r2, sl
 800f9de:	eb05 0008 	add.w	r0, r5, r8
 800f9e2:	f00c fd90 	bl	801c506 <memcpy>
 800f9e6:	e7a6      	b.n	800f936 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f9e8 <ucdr_serialize_uint64_t>:
 800f9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9ec:	2108      	movs	r1, #8
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	4604      	mov	r4, r0
 800f9f2:	e9cd 2300 	strd	r2, r3, [sp]
 800f9f6:	f000 fe01 	bl	80105fc <ucdr_buffer_alignment>
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	7d67      	ldrb	r7, [r4, #21]
 800fa00:	f000 fe40 	bl	8010684 <ucdr_advance_buffer>
 800fa04:	2108      	movs	r1, #8
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 fd98 	bl	801053c <ucdr_check_buffer_available_for>
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	d14e      	bne.n	800faae <ucdr_serialize_uint64_t+0xc6>
 800fa10:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fa14:	42ab      	cmp	r3, r5
 800fa16:	d945      	bls.n	800faa4 <ucdr_serialize_uint64_t+0xbc>
 800fa18:	1b5e      	subs	r6, r3, r5
 800fa1a:	60a3      	str	r3, [r4, #8]
 800fa1c:	6923      	ldr	r3, [r4, #16]
 800fa1e:	f1c6 0808 	rsb	r8, r6, #8
 800fa22:	4433      	add	r3, r6
 800fa24:	6123      	str	r3, [r4, #16]
 800fa26:	4641      	mov	r1, r8
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f000 fd93 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	d074      	beq.n	800fb1c <ucdr_serialize_uint64_t+0x134>
 800fa32:	7d23      	ldrb	r3, [r4, #20]
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	f000 809b 	beq.w	800fb70 <ucdr_serialize_uint64_t+0x188>
 800fa3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa3e:	702b      	strb	r3, [r5, #0]
 800fa40:	2e00      	cmp	r6, #0
 800fa42:	d078      	beq.n	800fb36 <ucdr_serialize_uint64_t+0x14e>
 800fa44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa48:	706b      	strb	r3, [r5, #1]
 800fa4a:	2e01      	cmp	r6, #1
 800fa4c:	d077      	beq.n	800fb3e <ucdr_serialize_uint64_t+0x156>
 800fa4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa52:	70ab      	strb	r3, [r5, #2]
 800fa54:	2e02      	cmp	r6, #2
 800fa56:	d076      	beq.n	800fb46 <ucdr_serialize_uint64_t+0x15e>
 800fa58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa5c:	70eb      	strb	r3, [r5, #3]
 800fa5e:	2e03      	cmp	r6, #3
 800fa60:	d075      	beq.n	800fb4e <ucdr_serialize_uint64_t+0x166>
 800fa62:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fa66:	712b      	strb	r3, [r5, #4]
 800fa68:	2e04      	cmp	r6, #4
 800fa6a:	d074      	beq.n	800fb56 <ucdr_serialize_uint64_t+0x16e>
 800fa6c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fa70:	716b      	strb	r3, [r5, #5]
 800fa72:	2e05      	cmp	r6, #5
 800fa74:	d073      	beq.n	800fb5e <ucdr_serialize_uint64_t+0x176>
 800fa76:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fa7a:	71ab      	strb	r3, [r5, #6]
 800fa7c:	2e06      	cmp	r6, #6
 800fa7e:	d072      	beq.n	800fb66 <ucdr_serialize_uint64_t+0x17e>
 800fa80:	f89d 3000 	ldrb.w	r3, [sp]
 800fa84:	71eb      	strb	r3, [r5, #7]
 800fa86:	6923      	ldr	r3, [r4, #16]
 800fa88:	68a2      	ldr	r2, [r4, #8]
 800fa8a:	7da0      	ldrb	r0, [r4, #22]
 800fa8c:	3308      	adds	r3, #8
 800fa8e:	1b9e      	subs	r6, r3, r6
 800fa90:	4442      	add	r2, r8
 800fa92:	2308      	movs	r3, #8
 800fa94:	f080 0001 	eor.w	r0, r0, #1
 800fa98:	60a2      	str	r2, [r4, #8]
 800fa9a:	6126      	str	r6, [r4, #16]
 800fa9c:	7563      	strb	r3, [r4, #21]
 800fa9e:	b002      	add	sp, #8
 800faa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faa4:	2108      	movs	r1, #8
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 fd54 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800faac:	b350      	cbz	r0, 800fb04 <ucdr_serialize_uint64_t+0x11c>
 800faae:	7d23      	ldrb	r3, [r4, #20]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d02d      	beq.n	800fb10 <ucdr_serialize_uint64_t+0x128>
 800fab4:	68a3      	ldr	r3, [r4, #8]
 800fab6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800faba:	701a      	strb	r2, [r3, #0]
 800fabc:	68a3      	ldr	r3, [r4, #8]
 800fabe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fac2:	705a      	strb	r2, [r3, #1]
 800fac4:	68a3      	ldr	r3, [r4, #8]
 800fac6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800faca:	709a      	strb	r2, [r3, #2]
 800facc:	68a3      	ldr	r3, [r4, #8]
 800face:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fad2:	70da      	strb	r2, [r3, #3]
 800fad4:	68a3      	ldr	r3, [r4, #8]
 800fad6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fada:	711a      	strb	r2, [r3, #4]
 800fadc:	68a3      	ldr	r3, [r4, #8]
 800fade:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fae2:	715a      	strb	r2, [r3, #5]
 800fae4:	68a3      	ldr	r3, [r4, #8]
 800fae6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800faea:	719a      	strb	r2, [r3, #6]
 800faec:	68a3      	ldr	r3, [r4, #8]
 800faee:	f89d 2000 	ldrb.w	r2, [sp]
 800faf2:	71da      	strb	r2, [r3, #7]
 800faf4:	68a2      	ldr	r2, [r4, #8]
 800faf6:	6923      	ldr	r3, [r4, #16]
 800faf8:	3208      	adds	r2, #8
 800fafa:	3308      	adds	r3, #8
 800fafc:	2108      	movs	r1, #8
 800fafe:	60a2      	str	r2, [r4, #8]
 800fb00:	6123      	str	r3, [r4, #16]
 800fb02:	7561      	strb	r1, [r4, #21]
 800fb04:	7da0      	ldrb	r0, [r4, #22]
 800fb06:	f080 0001 	eor.w	r0, r0, #1
 800fb0a:	b002      	add	sp, #8
 800fb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb10:	466b      	mov	r3, sp
 800fb12:	cb03      	ldmia	r3!, {r0, r1}
 800fb14:	68a3      	ldr	r3, [r4, #8]
 800fb16:	6018      	str	r0, [r3, #0]
 800fb18:	6059      	str	r1, [r3, #4]
 800fb1a:	e7eb      	b.n	800faf4 <ucdr_serialize_uint64_t+0x10c>
 800fb1c:	68a2      	ldr	r2, [r4, #8]
 800fb1e:	6923      	ldr	r3, [r4, #16]
 800fb20:	7da0      	ldrb	r0, [r4, #22]
 800fb22:	7567      	strb	r7, [r4, #21]
 800fb24:	1b92      	subs	r2, r2, r6
 800fb26:	1b9b      	subs	r3, r3, r6
 800fb28:	f080 0001 	eor.w	r0, r0, #1
 800fb2c:	60a2      	str	r2, [r4, #8]
 800fb2e:	6123      	str	r3, [r4, #16]
 800fb30:	b002      	add	sp, #8
 800fb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb36:	68a3      	ldr	r3, [r4, #8]
 800fb38:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb3c:	701a      	strb	r2, [r3, #0]
 800fb3e:	68a3      	ldr	r3, [r4, #8]
 800fb40:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb44:	701a      	strb	r2, [r3, #0]
 800fb46:	68a3      	ldr	r3, [r4, #8]
 800fb48:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb4c:	701a      	strb	r2, [r3, #0]
 800fb4e:	68a3      	ldr	r3, [r4, #8]
 800fb50:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fb54:	701a      	strb	r2, [r3, #0]
 800fb56:	68a3      	ldr	r3, [r4, #8]
 800fb58:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb5c:	701a      	strb	r2, [r3, #0]
 800fb5e:	68a3      	ldr	r3, [r4, #8]
 800fb60:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fb64:	701a      	strb	r2, [r3, #0]
 800fb66:	68a3      	ldr	r3, [r4, #8]
 800fb68:	f89d 2000 	ldrb.w	r2, [sp]
 800fb6c:	701a      	strb	r2, [r3, #0]
 800fb6e:	e78a      	b.n	800fa86 <ucdr_serialize_uint64_t+0x9e>
 800fb70:	4628      	mov	r0, r5
 800fb72:	466d      	mov	r5, sp
 800fb74:	4629      	mov	r1, r5
 800fb76:	4632      	mov	r2, r6
 800fb78:	f00c fcc5 	bl	801c506 <memcpy>
 800fb7c:	68a0      	ldr	r0, [r4, #8]
 800fb7e:	4642      	mov	r2, r8
 800fb80:	19a9      	adds	r1, r5, r6
 800fb82:	f00c fcc0 	bl	801c506 <memcpy>
 800fb86:	e77e      	b.n	800fa86 <ucdr_serialize_uint64_t+0x9e>

0800fb88 <ucdr_serialize_int16_t>:
 800fb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	460b      	mov	r3, r1
 800fb90:	2102      	movs	r1, #2
 800fb92:	4604      	mov	r4, r0
 800fb94:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fb98:	f000 fd30 	bl	80105fc <ucdr_buffer_alignment>
 800fb9c:	4601      	mov	r1, r0
 800fb9e:	4620      	mov	r0, r4
 800fba0:	7d67      	ldrb	r7, [r4, #21]
 800fba2:	f000 fd6f 	bl	8010684 <ucdr_advance_buffer>
 800fba6:	2102      	movs	r1, #2
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f000 fcc7 	bl	801053c <ucdr_check_buffer_available_for>
 800fbae:	bb78      	cbnz	r0, 800fc10 <ucdr_serialize_int16_t+0x88>
 800fbb0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fbb4:	42ab      	cmp	r3, r5
 800fbb6:	d926      	bls.n	800fc06 <ucdr_serialize_int16_t+0x7e>
 800fbb8:	1b5e      	subs	r6, r3, r5
 800fbba:	60a3      	str	r3, [r4, #8]
 800fbbc:	6923      	ldr	r3, [r4, #16]
 800fbbe:	f1c6 0802 	rsb	r8, r6, #2
 800fbc2:	4433      	add	r3, r6
 800fbc4:	6123      	str	r3, [r4, #16]
 800fbc6:	4641      	mov	r1, r8
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f000 fcc3 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d03b      	beq.n	800fc4a <ucdr_serialize_int16_t+0xc2>
 800fbd2:	7d23      	ldrb	r3, [r4, #20]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d04a      	beq.n	800fc6e <ucdr_serialize_int16_t+0xe6>
 800fbd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fbdc:	702b      	strb	r3, [r5, #0]
 800fbde:	2e00      	cmp	r6, #0
 800fbe0:	d040      	beq.n	800fc64 <ucdr_serialize_int16_t+0xdc>
 800fbe2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fbe6:	706b      	strb	r3, [r5, #1]
 800fbe8:	6923      	ldr	r3, [r4, #16]
 800fbea:	68a2      	ldr	r2, [r4, #8]
 800fbec:	7da0      	ldrb	r0, [r4, #22]
 800fbee:	3302      	adds	r3, #2
 800fbf0:	1b9e      	subs	r6, r3, r6
 800fbf2:	4442      	add	r2, r8
 800fbf4:	2302      	movs	r3, #2
 800fbf6:	f080 0001 	eor.w	r0, r0, #1
 800fbfa:	60a2      	str	r2, [r4, #8]
 800fbfc:	6126      	str	r6, [r4, #16]
 800fbfe:	7563      	strb	r3, [r4, #21]
 800fc00:	b002      	add	sp, #8
 800fc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc06:	2102      	movs	r1, #2
 800fc08:	4620      	mov	r0, r4
 800fc0a:	f000 fca3 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800fc0e:	b190      	cbz	r0, 800fc36 <ucdr_serialize_int16_t+0xae>
 800fc10:	7d23      	ldrb	r3, [r4, #20]
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	68a3      	ldr	r3, [r4, #8]
 800fc16:	d014      	beq.n	800fc42 <ucdr_serialize_int16_t+0xba>
 800fc18:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fc1c:	701a      	strb	r2, [r3, #0]
 800fc1e:	68a3      	ldr	r3, [r4, #8]
 800fc20:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc24:	705a      	strb	r2, [r3, #1]
 800fc26:	68a2      	ldr	r2, [r4, #8]
 800fc28:	6923      	ldr	r3, [r4, #16]
 800fc2a:	3202      	adds	r2, #2
 800fc2c:	3302      	adds	r3, #2
 800fc2e:	2102      	movs	r1, #2
 800fc30:	60a2      	str	r2, [r4, #8]
 800fc32:	6123      	str	r3, [r4, #16]
 800fc34:	7561      	strb	r1, [r4, #21]
 800fc36:	7da0      	ldrb	r0, [r4, #22]
 800fc38:	f080 0001 	eor.w	r0, r0, #1
 800fc3c:	b002      	add	sp, #8
 800fc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc42:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fc46:	801a      	strh	r2, [r3, #0]
 800fc48:	e7ed      	b.n	800fc26 <ucdr_serialize_int16_t+0x9e>
 800fc4a:	68a2      	ldr	r2, [r4, #8]
 800fc4c:	6923      	ldr	r3, [r4, #16]
 800fc4e:	7da0      	ldrb	r0, [r4, #22]
 800fc50:	7567      	strb	r7, [r4, #21]
 800fc52:	1b92      	subs	r2, r2, r6
 800fc54:	1b9b      	subs	r3, r3, r6
 800fc56:	f080 0001 	eor.w	r0, r0, #1
 800fc5a:	60a2      	str	r2, [r4, #8]
 800fc5c:	6123      	str	r3, [r4, #16]
 800fc5e:	b002      	add	sp, #8
 800fc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc64:	68a3      	ldr	r3, [r4, #8]
 800fc66:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc6a:	701a      	strb	r2, [r3, #0]
 800fc6c:	e7bc      	b.n	800fbe8 <ucdr_serialize_int16_t+0x60>
 800fc6e:	4628      	mov	r0, r5
 800fc70:	f10d 0506 	add.w	r5, sp, #6
 800fc74:	4629      	mov	r1, r5
 800fc76:	4632      	mov	r2, r6
 800fc78:	f00c fc45 	bl	801c506 <memcpy>
 800fc7c:	68a0      	ldr	r0, [r4, #8]
 800fc7e:	4642      	mov	r2, r8
 800fc80:	19a9      	adds	r1, r5, r6
 800fc82:	f00c fc40 	bl	801c506 <memcpy>
 800fc86:	e7af      	b.n	800fbe8 <ucdr_serialize_int16_t+0x60>

0800fc88 <ucdr_deserialize_int16_t>:
 800fc88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc8c:	460d      	mov	r5, r1
 800fc8e:	2102      	movs	r1, #2
 800fc90:	4604      	mov	r4, r0
 800fc92:	f000 fcb3 	bl	80105fc <ucdr_buffer_alignment>
 800fc96:	4601      	mov	r1, r0
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc9e:	f000 fcf1 	bl	8010684 <ucdr_advance_buffer>
 800fca2:	2102      	movs	r1, #2
 800fca4:	4620      	mov	r0, r4
 800fca6:	f000 fc49 	bl	801053c <ucdr_check_buffer_available_for>
 800fcaa:	bb60      	cbnz	r0, 800fd06 <ucdr_deserialize_int16_t+0x7e>
 800fcac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fcb0:	42be      	cmp	r6, r7
 800fcb2:	d923      	bls.n	800fcfc <ucdr_deserialize_int16_t+0x74>
 800fcb4:	6923      	ldr	r3, [r4, #16]
 800fcb6:	60a6      	str	r6, [r4, #8]
 800fcb8:	1bf6      	subs	r6, r6, r7
 800fcba:	4433      	add	r3, r6
 800fcbc:	f1c6 0902 	rsb	r9, r6, #2
 800fcc0:	6123      	str	r3, [r4, #16]
 800fcc2:	4649      	mov	r1, r9
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	f000 fc45 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800fcca:	2800      	cmp	r0, #0
 800fccc:	d034      	beq.n	800fd38 <ucdr_deserialize_int16_t+0xb0>
 800fcce:	7d23      	ldrb	r3, [r4, #20]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d042      	beq.n	800fd5a <ucdr_deserialize_int16_t+0xd2>
 800fcd4:	787b      	ldrb	r3, [r7, #1]
 800fcd6:	702b      	strb	r3, [r5, #0]
 800fcd8:	2e00      	cmp	r6, #0
 800fcda:	d03a      	beq.n	800fd52 <ucdr_deserialize_int16_t+0xca>
 800fcdc:	783b      	ldrb	r3, [r7, #0]
 800fcde:	706b      	strb	r3, [r5, #1]
 800fce0:	6923      	ldr	r3, [r4, #16]
 800fce2:	68a2      	ldr	r2, [r4, #8]
 800fce4:	7da0      	ldrb	r0, [r4, #22]
 800fce6:	2102      	movs	r1, #2
 800fce8:	3302      	adds	r3, #2
 800fcea:	444a      	add	r2, r9
 800fcec:	1b9b      	subs	r3, r3, r6
 800fcee:	7561      	strb	r1, [r4, #21]
 800fcf0:	60a2      	str	r2, [r4, #8]
 800fcf2:	6123      	str	r3, [r4, #16]
 800fcf4:	f080 0001 	eor.w	r0, r0, #1
 800fcf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcfc:	2102      	movs	r1, #2
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f000 fc28 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800fd04:	b180      	cbz	r0, 800fd28 <ucdr_deserialize_int16_t+0xa0>
 800fd06:	7d23      	ldrb	r3, [r4, #20]
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	68a3      	ldr	r3, [r4, #8]
 800fd0c:	d011      	beq.n	800fd32 <ucdr_deserialize_int16_t+0xaa>
 800fd0e:	785b      	ldrb	r3, [r3, #1]
 800fd10:	702b      	strb	r3, [r5, #0]
 800fd12:	68a3      	ldr	r3, [r4, #8]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	706b      	strb	r3, [r5, #1]
 800fd18:	68a2      	ldr	r2, [r4, #8]
 800fd1a:	6923      	ldr	r3, [r4, #16]
 800fd1c:	3202      	adds	r2, #2
 800fd1e:	3302      	adds	r3, #2
 800fd20:	2102      	movs	r1, #2
 800fd22:	60a2      	str	r2, [r4, #8]
 800fd24:	6123      	str	r3, [r4, #16]
 800fd26:	7561      	strb	r1, [r4, #21]
 800fd28:	7da0      	ldrb	r0, [r4, #22]
 800fd2a:	f080 0001 	eor.w	r0, r0, #1
 800fd2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd32:	881b      	ldrh	r3, [r3, #0]
 800fd34:	802b      	strh	r3, [r5, #0]
 800fd36:	e7ef      	b.n	800fd18 <ucdr_deserialize_int16_t+0x90>
 800fd38:	68a2      	ldr	r2, [r4, #8]
 800fd3a:	6923      	ldr	r3, [r4, #16]
 800fd3c:	7da0      	ldrb	r0, [r4, #22]
 800fd3e:	f884 8015 	strb.w	r8, [r4, #21]
 800fd42:	1b92      	subs	r2, r2, r6
 800fd44:	1b9b      	subs	r3, r3, r6
 800fd46:	60a2      	str	r2, [r4, #8]
 800fd48:	6123      	str	r3, [r4, #16]
 800fd4a:	f080 0001 	eor.w	r0, r0, #1
 800fd4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd52:	68a3      	ldr	r3, [r4, #8]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	706b      	strb	r3, [r5, #1]
 800fd58:	e7c2      	b.n	800fce0 <ucdr_deserialize_int16_t+0x58>
 800fd5a:	4639      	mov	r1, r7
 800fd5c:	4632      	mov	r2, r6
 800fd5e:	4628      	mov	r0, r5
 800fd60:	f00c fbd1 	bl	801c506 <memcpy>
 800fd64:	68a1      	ldr	r1, [r4, #8]
 800fd66:	464a      	mov	r2, r9
 800fd68:	19a8      	adds	r0, r5, r6
 800fd6a:	f00c fbcc 	bl	801c506 <memcpy>
 800fd6e:	e7b7      	b.n	800fce0 <ucdr_deserialize_int16_t+0x58>

0800fd70 <ucdr_serialize_int32_t>:
 800fd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd74:	b082      	sub	sp, #8
 800fd76:	4604      	mov	r4, r0
 800fd78:	9101      	str	r1, [sp, #4]
 800fd7a:	2104      	movs	r1, #4
 800fd7c:	f000 fc3e 	bl	80105fc <ucdr_buffer_alignment>
 800fd80:	4601      	mov	r1, r0
 800fd82:	4620      	mov	r0, r4
 800fd84:	7d67      	ldrb	r7, [r4, #21]
 800fd86:	f000 fc7d 	bl	8010684 <ucdr_advance_buffer>
 800fd8a:	2104      	movs	r1, #4
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	f000 fbd5 	bl	801053c <ucdr_check_buffer_available_for>
 800fd92:	2800      	cmp	r0, #0
 800fd94:	d139      	bne.n	800fe0a <ucdr_serialize_int32_t+0x9a>
 800fd96:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fd9a:	42ab      	cmp	r3, r5
 800fd9c:	d930      	bls.n	800fe00 <ucdr_serialize_int32_t+0x90>
 800fd9e:	1b5e      	subs	r6, r3, r5
 800fda0:	60a3      	str	r3, [r4, #8]
 800fda2:	6923      	ldr	r3, [r4, #16]
 800fda4:	f1c6 0804 	rsb	r8, r6, #4
 800fda8:	4433      	add	r3, r6
 800fdaa:	6123      	str	r3, [r4, #16]
 800fdac:	4641      	mov	r1, r8
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f000 fbd0 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800fdb4:	2800      	cmp	r0, #0
 800fdb6:	d04c      	beq.n	800fe52 <ucdr_serialize_int32_t+0xe2>
 800fdb8:	7d23      	ldrb	r3, [r4, #20]
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d063      	beq.n	800fe86 <ucdr_serialize_int32_t+0x116>
 800fdbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fdc2:	702b      	strb	r3, [r5, #0]
 800fdc4:	2e00      	cmp	r6, #0
 800fdc6:	d051      	beq.n	800fe6c <ucdr_serialize_int32_t+0xfc>
 800fdc8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fdcc:	706b      	strb	r3, [r5, #1]
 800fdce:	2e01      	cmp	r6, #1
 800fdd0:	d050      	beq.n	800fe74 <ucdr_serialize_int32_t+0x104>
 800fdd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fdd6:	70ab      	strb	r3, [r5, #2]
 800fdd8:	2e02      	cmp	r6, #2
 800fdda:	d04f      	beq.n	800fe7c <ucdr_serialize_int32_t+0x10c>
 800fddc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fde0:	70eb      	strb	r3, [r5, #3]
 800fde2:	6923      	ldr	r3, [r4, #16]
 800fde4:	68a2      	ldr	r2, [r4, #8]
 800fde6:	7da0      	ldrb	r0, [r4, #22]
 800fde8:	3304      	adds	r3, #4
 800fdea:	1b9e      	subs	r6, r3, r6
 800fdec:	4442      	add	r2, r8
 800fdee:	2304      	movs	r3, #4
 800fdf0:	f080 0001 	eor.w	r0, r0, #1
 800fdf4:	60a2      	str	r2, [r4, #8]
 800fdf6:	6126      	str	r6, [r4, #16]
 800fdf8:	7563      	strb	r3, [r4, #21]
 800fdfa:	b002      	add	sp, #8
 800fdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe00:	2104      	movs	r1, #4
 800fe02:	4620      	mov	r0, r4
 800fe04:	f000 fba6 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800fe08:	b1d0      	cbz	r0, 800fe40 <ucdr_serialize_int32_t+0xd0>
 800fe0a:	7d23      	ldrb	r3, [r4, #20]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	68a3      	ldr	r3, [r4, #8]
 800fe10:	d01c      	beq.n	800fe4c <ucdr_serialize_int32_t+0xdc>
 800fe12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fe16:	701a      	strb	r2, [r3, #0]
 800fe18:	68a3      	ldr	r3, [r4, #8]
 800fe1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe1e:	705a      	strb	r2, [r3, #1]
 800fe20:	68a3      	ldr	r3, [r4, #8]
 800fe22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe26:	709a      	strb	r2, [r3, #2]
 800fe28:	68a3      	ldr	r3, [r4, #8]
 800fe2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe2e:	70da      	strb	r2, [r3, #3]
 800fe30:	68a2      	ldr	r2, [r4, #8]
 800fe32:	6923      	ldr	r3, [r4, #16]
 800fe34:	3204      	adds	r2, #4
 800fe36:	3304      	adds	r3, #4
 800fe38:	2104      	movs	r1, #4
 800fe3a:	60a2      	str	r2, [r4, #8]
 800fe3c:	6123      	str	r3, [r4, #16]
 800fe3e:	7561      	strb	r1, [r4, #21]
 800fe40:	7da0      	ldrb	r0, [r4, #22]
 800fe42:	f080 0001 	eor.w	r0, r0, #1
 800fe46:	b002      	add	sp, #8
 800fe48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe4c:	9a01      	ldr	r2, [sp, #4]
 800fe4e:	601a      	str	r2, [r3, #0]
 800fe50:	e7ee      	b.n	800fe30 <ucdr_serialize_int32_t+0xc0>
 800fe52:	68a2      	ldr	r2, [r4, #8]
 800fe54:	6923      	ldr	r3, [r4, #16]
 800fe56:	7da0      	ldrb	r0, [r4, #22]
 800fe58:	7567      	strb	r7, [r4, #21]
 800fe5a:	1b92      	subs	r2, r2, r6
 800fe5c:	1b9b      	subs	r3, r3, r6
 800fe5e:	f080 0001 	eor.w	r0, r0, #1
 800fe62:	60a2      	str	r2, [r4, #8]
 800fe64:	6123      	str	r3, [r4, #16]
 800fe66:	b002      	add	sp, #8
 800fe68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe6c:	68a3      	ldr	r3, [r4, #8]
 800fe6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fe72:	701a      	strb	r2, [r3, #0]
 800fe74:	68a3      	ldr	r3, [r4, #8]
 800fe76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe7a:	701a      	strb	r2, [r3, #0]
 800fe7c:	68a3      	ldr	r3, [r4, #8]
 800fe7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fe82:	701a      	strb	r2, [r3, #0]
 800fe84:	e7ad      	b.n	800fde2 <ucdr_serialize_int32_t+0x72>
 800fe86:	4628      	mov	r0, r5
 800fe88:	ad01      	add	r5, sp, #4
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	4632      	mov	r2, r6
 800fe8e:	f00c fb3a 	bl	801c506 <memcpy>
 800fe92:	68a0      	ldr	r0, [r4, #8]
 800fe94:	4642      	mov	r2, r8
 800fe96:	19a9      	adds	r1, r5, r6
 800fe98:	f00c fb35 	bl	801c506 <memcpy>
 800fe9c:	e7a1      	b.n	800fde2 <ucdr_serialize_int32_t+0x72>
 800fe9e:	bf00      	nop

0800fea0 <ucdr_deserialize_int32_t>:
 800fea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea4:	460d      	mov	r5, r1
 800fea6:	2104      	movs	r1, #4
 800fea8:	4604      	mov	r4, r0
 800feaa:	f000 fba7 	bl	80105fc <ucdr_buffer_alignment>
 800feae:	4601      	mov	r1, r0
 800feb0:	4620      	mov	r0, r4
 800feb2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800feb6:	f000 fbe5 	bl	8010684 <ucdr_advance_buffer>
 800feba:	2104      	movs	r1, #4
 800febc:	4620      	mov	r0, r4
 800febe:	f000 fb3d 	bl	801053c <ucdr_check_buffer_available_for>
 800fec2:	2800      	cmp	r0, #0
 800fec4:	d138      	bne.n	800ff38 <ucdr_deserialize_int32_t+0x98>
 800fec6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800feca:	42b7      	cmp	r7, r6
 800fecc:	d92f      	bls.n	800ff2e <ucdr_deserialize_int32_t+0x8e>
 800fece:	6923      	ldr	r3, [r4, #16]
 800fed0:	60a7      	str	r7, [r4, #8]
 800fed2:	1bbf      	subs	r7, r7, r6
 800fed4:	443b      	add	r3, r7
 800fed6:	f1c7 0904 	rsb	r9, r7, #4
 800feda:	6123      	str	r3, [r4, #16]
 800fedc:	4649      	mov	r1, r9
 800fede:	4620      	mov	r0, r4
 800fee0:	f000 fb38 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800fee4:	2800      	cmp	r0, #0
 800fee6:	d046      	beq.n	800ff76 <ucdr_deserialize_int32_t+0xd6>
 800fee8:	7d23      	ldrb	r3, [r4, #20]
 800feea:	2b01      	cmp	r3, #1
 800feec:	d05c      	beq.n	800ffa8 <ucdr_deserialize_int32_t+0x108>
 800feee:	78f3      	ldrb	r3, [r6, #3]
 800fef0:	702b      	strb	r3, [r5, #0]
 800fef2:	2f00      	cmp	r7, #0
 800fef4:	d04c      	beq.n	800ff90 <ucdr_deserialize_int32_t+0xf0>
 800fef6:	78b3      	ldrb	r3, [r6, #2]
 800fef8:	706b      	strb	r3, [r5, #1]
 800fefa:	2f01      	cmp	r7, #1
 800fefc:	f105 0302 	add.w	r3, r5, #2
 800ff00:	d04a      	beq.n	800ff98 <ucdr_deserialize_int32_t+0xf8>
 800ff02:	7873      	ldrb	r3, [r6, #1]
 800ff04:	70ab      	strb	r3, [r5, #2]
 800ff06:	2f02      	cmp	r7, #2
 800ff08:	f105 0303 	add.w	r3, r5, #3
 800ff0c:	d048      	beq.n	800ffa0 <ucdr_deserialize_int32_t+0x100>
 800ff0e:	7833      	ldrb	r3, [r6, #0]
 800ff10:	70eb      	strb	r3, [r5, #3]
 800ff12:	6923      	ldr	r3, [r4, #16]
 800ff14:	68a2      	ldr	r2, [r4, #8]
 800ff16:	7da0      	ldrb	r0, [r4, #22]
 800ff18:	2104      	movs	r1, #4
 800ff1a:	3304      	adds	r3, #4
 800ff1c:	444a      	add	r2, r9
 800ff1e:	1bdb      	subs	r3, r3, r7
 800ff20:	7561      	strb	r1, [r4, #21]
 800ff22:	60a2      	str	r2, [r4, #8]
 800ff24:	6123      	str	r3, [r4, #16]
 800ff26:	f080 0001 	eor.w	r0, r0, #1
 800ff2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff2e:	2104      	movs	r1, #4
 800ff30:	4620      	mov	r0, r4
 800ff32:	f000 fb0f 	bl	8010554 <ucdr_check_final_buffer_behavior>
 800ff36:	b1b0      	cbz	r0, 800ff66 <ucdr_deserialize_int32_t+0xc6>
 800ff38:	7d23      	ldrb	r3, [r4, #20]
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	68a3      	ldr	r3, [r4, #8]
 800ff3e:	d017      	beq.n	800ff70 <ucdr_deserialize_int32_t+0xd0>
 800ff40:	78db      	ldrb	r3, [r3, #3]
 800ff42:	702b      	strb	r3, [r5, #0]
 800ff44:	68a3      	ldr	r3, [r4, #8]
 800ff46:	789b      	ldrb	r3, [r3, #2]
 800ff48:	706b      	strb	r3, [r5, #1]
 800ff4a:	68a3      	ldr	r3, [r4, #8]
 800ff4c:	785b      	ldrb	r3, [r3, #1]
 800ff4e:	70ab      	strb	r3, [r5, #2]
 800ff50:	68a3      	ldr	r3, [r4, #8]
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	70eb      	strb	r3, [r5, #3]
 800ff56:	68a2      	ldr	r2, [r4, #8]
 800ff58:	6923      	ldr	r3, [r4, #16]
 800ff5a:	3204      	adds	r2, #4
 800ff5c:	3304      	adds	r3, #4
 800ff5e:	2104      	movs	r1, #4
 800ff60:	60a2      	str	r2, [r4, #8]
 800ff62:	6123      	str	r3, [r4, #16]
 800ff64:	7561      	strb	r1, [r4, #21]
 800ff66:	7da0      	ldrb	r0, [r4, #22]
 800ff68:	f080 0001 	eor.w	r0, r0, #1
 800ff6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	602b      	str	r3, [r5, #0]
 800ff74:	e7ef      	b.n	800ff56 <ucdr_deserialize_int32_t+0xb6>
 800ff76:	68a2      	ldr	r2, [r4, #8]
 800ff78:	6923      	ldr	r3, [r4, #16]
 800ff7a:	7da0      	ldrb	r0, [r4, #22]
 800ff7c:	f884 8015 	strb.w	r8, [r4, #21]
 800ff80:	1bd2      	subs	r2, r2, r7
 800ff82:	1bdb      	subs	r3, r3, r7
 800ff84:	60a2      	str	r2, [r4, #8]
 800ff86:	6123      	str	r3, [r4, #16]
 800ff88:	f080 0001 	eor.w	r0, r0, #1
 800ff8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff90:	68a3      	ldr	r3, [r4, #8]
 800ff92:	789b      	ldrb	r3, [r3, #2]
 800ff94:	706b      	strb	r3, [r5, #1]
 800ff96:	1cab      	adds	r3, r5, #2
 800ff98:	68a2      	ldr	r2, [r4, #8]
 800ff9a:	7852      	ldrb	r2, [r2, #1]
 800ff9c:	f803 2b01 	strb.w	r2, [r3], #1
 800ffa0:	68a2      	ldr	r2, [r4, #8]
 800ffa2:	7812      	ldrb	r2, [r2, #0]
 800ffa4:	701a      	strb	r2, [r3, #0]
 800ffa6:	e7b4      	b.n	800ff12 <ucdr_deserialize_int32_t+0x72>
 800ffa8:	4631      	mov	r1, r6
 800ffaa:	463a      	mov	r2, r7
 800ffac:	4628      	mov	r0, r5
 800ffae:	f00c faaa 	bl	801c506 <memcpy>
 800ffb2:	68a1      	ldr	r1, [r4, #8]
 800ffb4:	464a      	mov	r2, r9
 800ffb6:	19e8      	adds	r0, r5, r7
 800ffb8:	f00c faa5 	bl	801c506 <memcpy>
 800ffbc:	e7a9      	b.n	800ff12 <ucdr_deserialize_int32_t+0x72>
 800ffbe:	bf00      	nop

0800ffc0 <ucdr_serialize_float>:
 800ffc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc4:	2104      	movs	r1, #4
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	4604      	mov	r4, r0
 800ffca:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ffce:	f000 fb15 	bl	80105fc <ucdr_buffer_alignment>
 800ffd2:	4601      	mov	r1, r0
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	7d67      	ldrb	r7, [r4, #21]
 800ffd8:	f000 fb54 	bl	8010684 <ucdr_advance_buffer>
 800ffdc:	2104      	movs	r1, #4
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f000 faac 	bl	801053c <ucdr_check_buffer_available_for>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	d139      	bne.n	801005c <ucdr_serialize_float+0x9c>
 800ffe8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ffec:	42ab      	cmp	r3, r5
 800ffee:	d930      	bls.n	8010052 <ucdr_serialize_float+0x92>
 800fff0:	1b5e      	subs	r6, r3, r5
 800fff2:	60a3      	str	r3, [r4, #8]
 800fff4:	6923      	ldr	r3, [r4, #16]
 800fff6:	f1c6 0804 	rsb	r8, r6, #4
 800fffa:	4433      	add	r3, r6
 800fffc:	6123      	str	r3, [r4, #16]
 800fffe:	4641      	mov	r1, r8
 8010000:	4620      	mov	r0, r4
 8010002:	f000 faa7 	bl	8010554 <ucdr_check_final_buffer_behavior>
 8010006:	2800      	cmp	r0, #0
 8010008:	d04c      	beq.n	80100a4 <ucdr_serialize_float+0xe4>
 801000a:	7d23      	ldrb	r3, [r4, #20]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d063      	beq.n	80100d8 <ucdr_serialize_float+0x118>
 8010010:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010014:	702b      	strb	r3, [r5, #0]
 8010016:	2e00      	cmp	r6, #0
 8010018:	d051      	beq.n	80100be <ucdr_serialize_float+0xfe>
 801001a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801001e:	706b      	strb	r3, [r5, #1]
 8010020:	2e01      	cmp	r6, #1
 8010022:	d050      	beq.n	80100c6 <ucdr_serialize_float+0x106>
 8010024:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010028:	70ab      	strb	r3, [r5, #2]
 801002a:	2e02      	cmp	r6, #2
 801002c:	d04f      	beq.n	80100ce <ucdr_serialize_float+0x10e>
 801002e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010032:	70eb      	strb	r3, [r5, #3]
 8010034:	6923      	ldr	r3, [r4, #16]
 8010036:	68a2      	ldr	r2, [r4, #8]
 8010038:	7da0      	ldrb	r0, [r4, #22]
 801003a:	3304      	adds	r3, #4
 801003c:	1b9e      	subs	r6, r3, r6
 801003e:	4442      	add	r2, r8
 8010040:	2304      	movs	r3, #4
 8010042:	f080 0001 	eor.w	r0, r0, #1
 8010046:	60a2      	str	r2, [r4, #8]
 8010048:	6126      	str	r6, [r4, #16]
 801004a:	7563      	strb	r3, [r4, #21]
 801004c:	b002      	add	sp, #8
 801004e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010052:	2104      	movs	r1, #4
 8010054:	4620      	mov	r0, r4
 8010056:	f000 fa7d 	bl	8010554 <ucdr_check_final_buffer_behavior>
 801005a:	b1d0      	cbz	r0, 8010092 <ucdr_serialize_float+0xd2>
 801005c:	7d23      	ldrb	r3, [r4, #20]
 801005e:	2b01      	cmp	r3, #1
 8010060:	68a3      	ldr	r3, [r4, #8]
 8010062:	d01c      	beq.n	801009e <ucdr_serialize_float+0xde>
 8010064:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010068:	701a      	strb	r2, [r3, #0]
 801006a:	68a3      	ldr	r3, [r4, #8]
 801006c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010070:	705a      	strb	r2, [r3, #1]
 8010072:	68a3      	ldr	r3, [r4, #8]
 8010074:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010078:	709a      	strb	r2, [r3, #2]
 801007a:	68a3      	ldr	r3, [r4, #8]
 801007c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010080:	70da      	strb	r2, [r3, #3]
 8010082:	68a2      	ldr	r2, [r4, #8]
 8010084:	6923      	ldr	r3, [r4, #16]
 8010086:	3204      	adds	r2, #4
 8010088:	3304      	adds	r3, #4
 801008a:	2104      	movs	r1, #4
 801008c:	60a2      	str	r2, [r4, #8]
 801008e:	6123      	str	r3, [r4, #16]
 8010090:	7561      	strb	r1, [r4, #21]
 8010092:	7da0      	ldrb	r0, [r4, #22]
 8010094:	f080 0001 	eor.w	r0, r0, #1
 8010098:	b002      	add	sp, #8
 801009a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009e:	9a01      	ldr	r2, [sp, #4]
 80100a0:	601a      	str	r2, [r3, #0]
 80100a2:	e7ee      	b.n	8010082 <ucdr_serialize_float+0xc2>
 80100a4:	68a2      	ldr	r2, [r4, #8]
 80100a6:	6923      	ldr	r3, [r4, #16]
 80100a8:	7da0      	ldrb	r0, [r4, #22]
 80100aa:	7567      	strb	r7, [r4, #21]
 80100ac:	1b92      	subs	r2, r2, r6
 80100ae:	1b9b      	subs	r3, r3, r6
 80100b0:	f080 0001 	eor.w	r0, r0, #1
 80100b4:	60a2      	str	r2, [r4, #8]
 80100b6:	6123      	str	r3, [r4, #16]
 80100b8:	b002      	add	sp, #8
 80100ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100be:	68a3      	ldr	r3, [r4, #8]
 80100c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100c4:	701a      	strb	r2, [r3, #0]
 80100c6:	68a3      	ldr	r3, [r4, #8]
 80100c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80100cc:	701a      	strb	r2, [r3, #0]
 80100ce:	68a3      	ldr	r3, [r4, #8]
 80100d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80100d4:	701a      	strb	r2, [r3, #0]
 80100d6:	e7ad      	b.n	8010034 <ucdr_serialize_float+0x74>
 80100d8:	4628      	mov	r0, r5
 80100da:	ad01      	add	r5, sp, #4
 80100dc:	4629      	mov	r1, r5
 80100de:	4632      	mov	r2, r6
 80100e0:	f00c fa11 	bl	801c506 <memcpy>
 80100e4:	68a0      	ldr	r0, [r4, #8]
 80100e6:	4642      	mov	r2, r8
 80100e8:	19a9      	adds	r1, r5, r6
 80100ea:	f00c fa0c 	bl	801c506 <memcpy>
 80100ee:	e7a1      	b.n	8010034 <ucdr_serialize_float+0x74>

080100f0 <ucdr_deserialize_float>:
 80100f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100f4:	460d      	mov	r5, r1
 80100f6:	2104      	movs	r1, #4
 80100f8:	4604      	mov	r4, r0
 80100fa:	f000 fa7f 	bl	80105fc <ucdr_buffer_alignment>
 80100fe:	4601      	mov	r1, r0
 8010100:	4620      	mov	r0, r4
 8010102:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010106:	f000 fabd 	bl	8010684 <ucdr_advance_buffer>
 801010a:	2104      	movs	r1, #4
 801010c:	4620      	mov	r0, r4
 801010e:	f000 fa15 	bl	801053c <ucdr_check_buffer_available_for>
 8010112:	2800      	cmp	r0, #0
 8010114:	d138      	bne.n	8010188 <ucdr_deserialize_float+0x98>
 8010116:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801011a:	42b7      	cmp	r7, r6
 801011c:	d92f      	bls.n	801017e <ucdr_deserialize_float+0x8e>
 801011e:	6923      	ldr	r3, [r4, #16]
 8010120:	60a7      	str	r7, [r4, #8]
 8010122:	1bbf      	subs	r7, r7, r6
 8010124:	443b      	add	r3, r7
 8010126:	f1c7 0904 	rsb	r9, r7, #4
 801012a:	6123      	str	r3, [r4, #16]
 801012c:	4649      	mov	r1, r9
 801012e:	4620      	mov	r0, r4
 8010130:	f000 fa10 	bl	8010554 <ucdr_check_final_buffer_behavior>
 8010134:	2800      	cmp	r0, #0
 8010136:	d046      	beq.n	80101c6 <ucdr_deserialize_float+0xd6>
 8010138:	7d23      	ldrb	r3, [r4, #20]
 801013a:	2b01      	cmp	r3, #1
 801013c:	d05c      	beq.n	80101f8 <ucdr_deserialize_float+0x108>
 801013e:	78f3      	ldrb	r3, [r6, #3]
 8010140:	702b      	strb	r3, [r5, #0]
 8010142:	2f00      	cmp	r7, #0
 8010144:	d04c      	beq.n	80101e0 <ucdr_deserialize_float+0xf0>
 8010146:	78b3      	ldrb	r3, [r6, #2]
 8010148:	706b      	strb	r3, [r5, #1]
 801014a:	2f01      	cmp	r7, #1
 801014c:	f105 0302 	add.w	r3, r5, #2
 8010150:	d04a      	beq.n	80101e8 <ucdr_deserialize_float+0xf8>
 8010152:	7873      	ldrb	r3, [r6, #1]
 8010154:	70ab      	strb	r3, [r5, #2]
 8010156:	2f02      	cmp	r7, #2
 8010158:	f105 0303 	add.w	r3, r5, #3
 801015c:	d048      	beq.n	80101f0 <ucdr_deserialize_float+0x100>
 801015e:	7833      	ldrb	r3, [r6, #0]
 8010160:	70eb      	strb	r3, [r5, #3]
 8010162:	6923      	ldr	r3, [r4, #16]
 8010164:	68a2      	ldr	r2, [r4, #8]
 8010166:	7da0      	ldrb	r0, [r4, #22]
 8010168:	2104      	movs	r1, #4
 801016a:	3304      	adds	r3, #4
 801016c:	444a      	add	r2, r9
 801016e:	1bdb      	subs	r3, r3, r7
 8010170:	7561      	strb	r1, [r4, #21]
 8010172:	60a2      	str	r2, [r4, #8]
 8010174:	6123      	str	r3, [r4, #16]
 8010176:	f080 0001 	eor.w	r0, r0, #1
 801017a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801017e:	2104      	movs	r1, #4
 8010180:	4620      	mov	r0, r4
 8010182:	f000 f9e7 	bl	8010554 <ucdr_check_final_buffer_behavior>
 8010186:	b1b0      	cbz	r0, 80101b6 <ucdr_deserialize_float+0xc6>
 8010188:	7d23      	ldrb	r3, [r4, #20]
 801018a:	2b01      	cmp	r3, #1
 801018c:	68a3      	ldr	r3, [r4, #8]
 801018e:	d017      	beq.n	80101c0 <ucdr_deserialize_float+0xd0>
 8010190:	78db      	ldrb	r3, [r3, #3]
 8010192:	702b      	strb	r3, [r5, #0]
 8010194:	68a3      	ldr	r3, [r4, #8]
 8010196:	789b      	ldrb	r3, [r3, #2]
 8010198:	706b      	strb	r3, [r5, #1]
 801019a:	68a3      	ldr	r3, [r4, #8]
 801019c:	785b      	ldrb	r3, [r3, #1]
 801019e:	70ab      	strb	r3, [r5, #2]
 80101a0:	68a3      	ldr	r3, [r4, #8]
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	70eb      	strb	r3, [r5, #3]
 80101a6:	68a2      	ldr	r2, [r4, #8]
 80101a8:	6923      	ldr	r3, [r4, #16]
 80101aa:	3204      	adds	r2, #4
 80101ac:	3304      	adds	r3, #4
 80101ae:	2104      	movs	r1, #4
 80101b0:	60a2      	str	r2, [r4, #8]
 80101b2:	6123      	str	r3, [r4, #16]
 80101b4:	7561      	strb	r1, [r4, #21]
 80101b6:	7da0      	ldrb	r0, [r4, #22]
 80101b8:	f080 0001 	eor.w	r0, r0, #1
 80101bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	602b      	str	r3, [r5, #0]
 80101c4:	e7ef      	b.n	80101a6 <ucdr_deserialize_float+0xb6>
 80101c6:	68a2      	ldr	r2, [r4, #8]
 80101c8:	6923      	ldr	r3, [r4, #16]
 80101ca:	7da0      	ldrb	r0, [r4, #22]
 80101cc:	f884 8015 	strb.w	r8, [r4, #21]
 80101d0:	1bd2      	subs	r2, r2, r7
 80101d2:	1bdb      	subs	r3, r3, r7
 80101d4:	60a2      	str	r2, [r4, #8]
 80101d6:	6123      	str	r3, [r4, #16]
 80101d8:	f080 0001 	eor.w	r0, r0, #1
 80101dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101e0:	68a3      	ldr	r3, [r4, #8]
 80101e2:	789b      	ldrb	r3, [r3, #2]
 80101e4:	706b      	strb	r3, [r5, #1]
 80101e6:	1cab      	adds	r3, r5, #2
 80101e8:	68a2      	ldr	r2, [r4, #8]
 80101ea:	7852      	ldrb	r2, [r2, #1]
 80101ec:	f803 2b01 	strb.w	r2, [r3], #1
 80101f0:	68a2      	ldr	r2, [r4, #8]
 80101f2:	7812      	ldrb	r2, [r2, #0]
 80101f4:	701a      	strb	r2, [r3, #0]
 80101f6:	e7b4      	b.n	8010162 <ucdr_deserialize_float+0x72>
 80101f8:	4631      	mov	r1, r6
 80101fa:	463a      	mov	r2, r7
 80101fc:	4628      	mov	r0, r5
 80101fe:	f00c f982 	bl	801c506 <memcpy>
 8010202:	68a1      	ldr	r1, [r4, #8]
 8010204:	464a      	mov	r2, r9
 8010206:	19e8      	adds	r0, r5, r7
 8010208:	f00c f97d 	bl	801c506 <memcpy>
 801020c:	e7a9      	b.n	8010162 <ucdr_deserialize_float+0x72>
 801020e:	bf00      	nop

08010210 <ucdr_serialize_double>:
 8010210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010214:	2108      	movs	r1, #8
 8010216:	b082      	sub	sp, #8
 8010218:	4604      	mov	r4, r0
 801021a:	ed8d 0b00 	vstr	d0, [sp]
 801021e:	f000 f9ed 	bl	80105fc <ucdr_buffer_alignment>
 8010222:	4601      	mov	r1, r0
 8010224:	4620      	mov	r0, r4
 8010226:	7d67      	ldrb	r7, [r4, #21]
 8010228:	f000 fa2c 	bl	8010684 <ucdr_advance_buffer>
 801022c:	2108      	movs	r1, #8
 801022e:	4620      	mov	r0, r4
 8010230:	f000 f984 	bl	801053c <ucdr_check_buffer_available_for>
 8010234:	2800      	cmp	r0, #0
 8010236:	d14e      	bne.n	80102d6 <ucdr_serialize_double+0xc6>
 8010238:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801023c:	42ab      	cmp	r3, r5
 801023e:	d945      	bls.n	80102cc <ucdr_serialize_double+0xbc>
 8010240:	1b5e      	subs	r6, r3, r5
 8010242:	60a3      	str	r3, [r4, #8]
 8010244:	6923      	ldr	r3, [r4, #16]
 8010246:	f1c6 0808 	rsb	r8, r6, #8
 801024a:	4433      	add	r3, r6
 801024c:	6123      	str	r3, [r4, #16]
 801024e:	4641      	mov	r1, r8
 8010250:	4620      	mov	r0, r4
 8010252:	f000 f97f 	bl	8010554 <ucdr_check_final_buffer_behavior>
 8010256:	2800      	cmp	r0, #0
 8010258:	d074      	beq.n	8010344 <ucdr_serialize_double+0x134>
 801025a:	7d23      	ldrb	r3, [r4, #20]
 801025c:	2b01      	cmp	r3, #1
 801025e:	f000 809b 	beq.w	8010398 <ucdr_serialize_double+0x188>
 8010262:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010266:	702b      	strb	r3, [r5, #0]
 8010268:	2e00      	cmp	r6, #0
 801026a:	d078      	beq.n	801035e <ucdr_serialize_double+0x14e>
 801026c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010270:	706b      	strb	r3, [r5, #1]
 8010272:	2e01      	cmp	r6, #1
 8010274:	d077      	beq.n	8010366 <ucdr_serialize_double+0x156>
 8010276:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801027a:	70ab      	strb	r3, [r5, #2]
 801027c:	2e02      	cmp	r6, #2
 801027e:	d076      	beq.n	801036e <ucdr_serialize_double+0x15e>
 8010280:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010284:	70eb      	strb	r3, [r5, #3]
 8010286:	2e03      	cmp	r6, #3
 8010288:	d075      	beq.n	8010376 <ucdr_serialize_double+0x166>
 801028a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801028e:	712b      	strb	r3, [r5, #4]
 8010290:	2e04      	cmp	r6, #4
 8010292:	d074      	beq.n	801037e <ucdr_serialize_double+0x16e>
 8010294:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010298:	716b      	strb	r3, [r5, #5]
 801029a:	2e05      	cmp	r6, #5
 801029c:	d073      	beq.n	8010386 <ucdr_serialize_double+0x176>
 801029e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80102a2:	71ab      	strb	r3, [r5, #6]
 80102a4:	2e06      	cmp	r6, #6
 80102a6:	d072      	beq.n	801038e <ucdr_serialize_double+0x17e>
 80102a8:	f89d 3000 	ldrb.w	r3, [sp]
 80102ac:	71eb      	strb	r3, [r5, #7]
 80102ae:	6923      	ldr	r3, [r4, #16]
 80102b0:	68a2      	ldr	r2, [r4, #8]
 80102b2:	7da0      	ldrb	r0, [r4, #22]
 80102b4:	3308      	adds	r3, #8
 80102b6:	1b9e      	subs	r6, r3, r6
 80102b8:	4442      	add	r2, r8
 80102ba:	2308      	movs	r3, #8
 80102bc:	f080 0001 	eor.w	r0, r0, #1
 80102c0:	60a2      	str	r2, [r4, #8]
 80102c2:	6126      	str	r6, [r4, #16]
 80102c4:	7563      	strb	r3, [r4, #21]
 80102c6:	b002      	add	sp, #8
 80102c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102cc:	2108      	movs	r1, #8
 80102ce:	4620      	mov	r0, r4
 80102d0:	f000 f940 	bl	8010554 <ucdr_check_final_buffer_behavior>
 80102d4:	b350      	cbz	r0, 801032c <ucdr_serialize_double+0x11c>
 80102d6:	7d23      	ldrb	r3, [r4, #20]
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d02d      	beq.n	8010338 <ucdr_serialize_double+0x128>
 80102dc:	68a3      	ldr	r3, [r4, #8]
 80102de:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80102e2:	701a      	strb	r2, [r3, #0]
 80102e4:	68a3      	ldr	r3, [r4, #8]
 80102e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102ea:	705a      	strb	r2, [r3, #1]
 80102ec:	68a3      	ldr	r3, [r4, #8]
 80102ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80102f2:	709a      	strb	r2, [r3, #2]
 80102f4:	68a3      	ldr	r3, [r4, #8]
 80102f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102fa:	70da      	strb	r2, [r3, #3]
 80102fc:	68a3      	ldr	r3, [r4, #8]
 80102fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010302:	711a      	strb	r2, [r3, #4]
 8010304:	68a3      	ldr	r3, [r4, #8]
 8010306:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801030a:	715a      	strb	r2, [r3, #5]
 801030c:	68a3      	ldr	r3, [r4, #8]
 801030e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010312:	719a      	strb	r2, [r3, #6]
 8010314:	68a3      	ldr	r3, [r4, #8]
 8010316:	f89d 2000 	ldrb.w	r2, [sp]
 801031a:	71da      	strb	r2, [r3, #7]
 801031c:	68a2      	ldr	r2, [r4, #8]
 801031e:	6923      	ldr	r3, [r4, #16]
 8010320:	3208      	adds	r2, #8
 8010322:	3308      	adds	r3, #8
 8010324:	2108      	movs	r1, #8
 8010326:	60a2      	str	r2, [r4, #8]
 8010328:	6123      	str	r3, [r4, #16]
 801032a:	7561      	strb	r1, [r4, #21]
 801032c:	7da0      	ldrb	r0, [r4, #22]
 801032e:	f080 0001 	eor.w	r0, r0, #1
 8010332:	b002      	add	sp, #8
 8010334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010338:	466b      	mov	r3, sp
 801033a:	cb03      	ldmia	r3!, {r0, r1}
 801033c:	68a3      	ldr	r3, [r4, #8]
 801033e:	6018      	str	r0, [r3, #0]
 8010340:	6059      	str	r1, [r3, #4]
 8010342:	e7eb      	b.n	801031c <ucdr_serialize_double+0x10c>
 8010344:	68a2      	ldr	r2, [r4, #8]
 8010346:	6923      	ldr	r3, [r4, #16]
 8010348:	7da0      	ldrb	r0, [r4, #22]
 801034a:	7567      	strb	r7, [r4, #21]
 801034c:	1b92      	subs	r2, r2, r6
 801034e:	1b9b      	subs	r3, r3, r6
 8010350:	f080 0001 	eor.w	r0, r0, #1
 8010354:	60a2      	str	r2, [r4, #8]
 8010356:	6123      	str	r3, [r4, #16]
 8010358:	b002      	add	sp, #8
 801035a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801035e:	68a3      	ldr	r3, [r4, #8]
 8010360:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010364:	701a      	strb	r2, [r3, #0]
 8010366:	68a3      	ldr	r3, [r4, #8]
 8010368:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801036c:	701a      	strb	r2, [r3, #0]
 801036e:	68a3      	ldr	r3, [r4, #8]
 8010370:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010374:	701a      	strb	r2, [r3, #0]
 8010376:	68a3      	ldr	r3, [r4, #8]
 8010378:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801037c:	701a      	strb	r2, [r3, #0]
 801037e:	68a3      	ldr	r3, [r4, #8]
 8010380:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010384:	701a      	strb	r2, [r3, #0]
 8010386:	68a3      	ldr	r3, [r4, #8]
 8010388:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801038c:	701a      	strb	r2, [r3, #0]
 801038e:	68a3      	ldr	r3, [r4, #8]
 8010390:	f89d 2000 	ldrb.w	r2, [sp]
 8010394:	701a      	strb	r2, [r3, #0]
 8010396:	e78a      	b.n	80102ae <ucdr_serialize_double+0x9e>
 8010398:	4628      	mov	r0, r5
 801039a:	466d      	mov	r5, sp
 801039c:	4629      	mov	r1, r5
 801039e:	4632      	mov	r2, r6
 80103a0:	f00c f8b1 	bl	801c506 <memcpy>
 80103a4:	68a0      	ldr	r0, [r4, #8]
 80103a6:	4642      	mov	r2, r8
 80103a8:	19a9      	adds	r1, r5, r6
 80103aa:	f00c f8ac 	bl	801c506 <memcpy>
 80103ae:	e77e      	b.n	80102ae <ucdr_serialize_double+0x9e>

080103b0 <ucdr_deserialize_double>:
 80103b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103b4:	460d      	mov	r5, r1
 80103b6:	2108      	movs	r1, #8
 80103b8:	4604      	mov	r4, r0
 80103ba:	f000 f91f 	bl	80105fc <ucdr_buffer_alignment>
 80103be:	4601      	mov	r1, r0
 80103c0:	4620      	mov	r0, r4
 80103c2:	f894 9015 	ldrb.w	r9, [r4, #21]
 80103c6:	f000 f95d 	bl	8010684 <ucdr_advance_buffer>
 80103ca:	2108      	movs	r1, #8
 80103cc:	4620      	mov	r0, r4
 80103ce:	f000 f8b5 	bl	801053c <ucdr_check_buffer_available_for>
 80103d2:	2800      	cmp	r0, #0
 80103d4:	d151      	bne.n	801047a <ucdr_deserialize_double+0xca>
 80103d6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80103da:	42be      	cmp	r6, r7
 80103dc:	d948      	bls.n	8010470 <ucdr_deserialize_double+0xc0>
 80103de:	6923      	ldr	r3, [r4, #16]
 80103e0:	60a6      	str	r6, [r4, #8]
 80103e2:	1bf6      	subs	r6, r6, r7
 80103e4:	4433      	add	r3, r6
 80103e6:	f1c6 0808 	rsb	r8, r6, #8
 80103ea:	6123      	str	r3, [r4, #16]
 80103ec:	4641      	mov	r1, r8
 80103ee:	4620      	mov	r0, r4
 80103f0:	f000 f8b0 	bl	8010554 <ucdr_check_final_buffer_behavior>
 80103f4:	2800      	cmp	r0, #0
 80103f6:	d06d      	beq.n	80104d4 <ucdr_deserialize_double+0x124>
 80103f8:	7d23      	ldrb	r3, [r4, #20]
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	f000 8093 	beq.w	8010526 <ucdr_deserialize_double+0x176>
 8010400:	79fb      	ldrb	r3, [r7, #7]
 8010402:	702b      	strb	r3, [r5, #0]
 8010404:	2e00      	cmp	r6, #0
 8010406:	d072      	beq.n	80104ee <ucdr_deserialize_double+0x13e>
 8010408:	79bb      	ldrb	r3, [r7, #6]
 801040a:	706b      	strb	r3, [r5, #1]
 801040c:	2e01      	cmp	r6, #1
 801040e:	f105 0302 	add.w	r3, r5, #2
 8010412:	d070      	beq.n	80104f6 <ucdr_deserialize_double+0x146>
 8010414:	797b      	ldrb	r3, [r7, #5]
 8010416:	70ab      	strb	r3, [r5, #2]
 8010418:	2e02      	cmp	r6, #2
 801041a:	f105 0303 	add.w	r3, r5, #3
 801041e:	d06e      	beq.n	80104fe <ucdr_deserialize_double+0x14e>
 8010420:	793b      	ldrb	r3, [r7, #4]
 8010422:	70eb      	strb	r3, [r5, #3]
 8010424:	2e03      	cmp	r6, #3
 8010426:	f105 0304 	add.w	r3, r5, #4
 801042a:	d06c      	beq.n	8010506 <ucdr_deserialize_double+0x156>
 801042c:	78fb      	ldrb	r3, [r7, #3]
 801042e:	712b      	strb	r3, [r5, #4]
 8010430:	2e04      	cmp	r6, #4
 8010432:	f105 0305 	add.w	r3, r5, #5
 8010436:	d06a      	beq.n	801050e <ucdr_deserialize_double+0x15e>
 8010438:	78bb      	ldrb	r3, [r7, #2]
 801043a:	716b      	strb	r3, [r5, #5]
 801043c:	2e05      	cmp	r6, #5
 801043e:	f105 0306 	add.w	r3, r5, #6
 8010442:	d068      	beq.n	8010516 <ucdr_deserialize_double+0x166>
 8010444:	787b      	ldrb	r3, [r7, #1]
 8010446:	71ab      	strb	r3, [r5, #6]
 8010448:	2e06      	cmp	r6, #6
 801044a:	f105 0307 	add.w	r3, r5, #7
 801044e:	d066      	beq.n	801051e <ucdr_deserialize_double+0x16e>
 8010450:	783b      	ldrb	r3, [r7, #0]
 8010452:	71eb      	strb	r3, [r5, #7]
 8010454:	6923      	ldr	r3, [r4, #16]
 8010456:	68a2      	ldr	r2, [r4, #8]
 8010458:	7da0      	ldrb	r0, [r4, #22]
 801045a:	3308      	adds	r3, #8
 801045c:	1b9e      	subs	r6, r3, r6
 801045e:	2308      	movs	r3, #8
 8010460:	4442      	add	r2, r8
 8010462:	7563      	strb	r3, [r4, #21]
 8010464:	60a2      	str	r2, [r4, #8]
 8010466:	6126      	str	r6, [r4, #16]
 8010468:	f080 0001 	eor.w	r0, r0, #1
 801046c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010470:	2108      	movs	r1, #8
 8010472:	4620      	mov	r0, r4
 8010474:	f000 f86e 	bl	8010554 <ucdr_check_final_buffer_behavior>
 8010478:	b310      	cbz	r0, 80104c0 <ucdr_deserialize_double+0x110>
 801047a:	7d23      	ldrb	r3, [r4, #20]
 801047c:	2b01      	cmp	r3, #1
 801047e:	68a3      	ldr	r3, [r4, #8]
 8010480:	d023      	beq.n	80104ca <ucdr_deserialize_double+0x11a>
 8010482:	79db      	ldrb	r3, [r3, #7]
 8010484:	702b      	strb	r3, [r5, #0]
 8010486:	68a3      	ldr	r3, [r4, #8]
 8010488:	799b      	ldrb	r3, [r3, #6]
 801048a:	706b      	strb	r3, [r5, #1]
 801048c:	68a3      	ldr	r3, [r4, #8]
 801048e:	795b      	ldrb	r3, [r3, #5]
 8010490:	70ab      	strb	r3, [r5, #2]
 8010492:	68a3      	ldr	r3, [r4, #8]
 8010494:	791b      	ldrb	r3, [r3, #4]
 8010496:	70eb      	strb	r3, [r5, #3]
 8010498:	68a3      	ldr	r3, [r4, #8]
 801049a:	78db      	ldrb	r3, [r3, #3]
 801049c:	712b      	strb	r3, [r5, #4]
 801049e:	68a3      	ldr	r3, [r4, #8]
 80104a0:	789b      	ldrb	r3, [r3, #2]
 80104a2:	716b      	strb	r3, [r5, #5]
 80104a4:	68a3      	ldr	r3, [r4, #8]
 80104a6:	785b      	ldrb	r3, [r3, #1]
 80104a8:	71ab      	strb	r3, [r5, #6]
 80104aa:	68a3      	ldr	r3, [r4, #8]
 80104ac:	781b      	ldrb	r3, [r3, #0]
 80104ae:	71eb      	strb	r3, [r5, #7]
 80104b0:	68a2      	ldr	r2, [r4, #8]
 80104b2:	6923      	ldr	r3, [r4, #16]
 80104b4:	3208      	adds	r2, #8
 80104b6:	3308      	adds	r3, #8
 80104b8:	2108      	movs	r1, #8
 80104ba:	60a2      	str	r2, [r4, #8]
 80104bc:	6123      	str	r3, [r4, #16]
 80104be:	7561      	strb	r1, [r4, #21]
 80104c0:	7da0      	ldrb	r0, [r4, #22]
 80104c2:	f080 0001 	eor.w	r0, r0, #1
 80104c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ca:	681a      	ldr	r2, [r3, #0]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	606b      	str	r3, [r5, #4]
 80104d0:	602a      	str	r2, [r5, #0]
 80104d2:	e7ed      	b.n	80104b0 <ucdr_deserialize_double+0x100>
 80104d4:	68a2      	ldr	r2, [r4, #8]
 80104d6:	6923      	ldr	r3, [r4, #16]
 80104d8:	7da0      	ldrb	r0, [r4, #22]
 80104da:	f884 9015 	strb.w	r9, [r4, #21]
 80104de:	1b92      	subs	r2, r2, r6
 80104e0:	1b9b      	subs	r3, r3, r6
 80104e2:	60a2      	str	r2, [r4, #8]
 80104e4:	6123      	str	r3, [r4, #16]
 80104e6:	f080 0001 	eor.w	r0, r0, #1
 80104ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ee:	68a3      	ldr	r3, [r4, #8]
 80104f0:	799b      	ldrb	r3, [r3, #6]
 80104f2:	706b      	strb	r3, [r5, #1]
 80104f4:	1cab      	adds	r3, r5, #2
 80104f6:	68a2      	ldr	r2, [r4, #8]
 80104f8:	7952      	ldrb	r2, [r2, #5]
 80104fa:	f803 2b01 	strb.w	r2, [r3], #1
 80104fe:	68a2      	ldr	r2, [r4, #8]
 8010500:	7912      	ldrb	r2, [r2, #4]
 8010502:	f803 2b01 	strb.w	r2, [r3], #1
 8010506:	68a2      	ldr	r2, [r4, #8]
 8010508:	78d2      	ldrb	r2, [r2, #3]
 801050a:	f803 2b01 	strb.w	r2, [r3], #1
 801050e:	68a2      	ldr	r2, [r4, #8]
 8010510:	7892      	ldrb	r2, [r2, #2]
 8010512:	f803 2b01 	strb.w	r2, [r3], #1
 8010516:	68a2      	ldr	r2, [r4, #8]
 8010518:	7852      	ldrb	r2, [r2, #1]
 801051a:	f803 2b01 	strb.w	r2, [r3], #1
 801051e:	68a2      	ldr	r2, [r4, #8]
 8010520:	7812      	ldrb	r2, [r2, #0]
 8010522:	701a      	strb	r2, [r3, #0]
 8010524:	e796      	b.n	8010454 <ucdr_deserialize_double+0xa4>
 8010526:	4639      	mov	r1, r7
 8010528:	4632      	mov	r2, r6
 801052a:	4628      	mov	r0, r5
 801052c:	f00b ffeb 	bl	801c506 <memcpy>
 8010530:	68a1      	ldr	r1, [r4, #8]
 8010532:	4642      	mov	r2, r8
 8010534:	19a8      	adds	r0, r5, r6
 8010536:	f00b ffe6 	bl	801c506 <memcpy>
 801053a:	e78b      	b.n	8010454 <ucdr_deserialize_double+0xa4>

0801053c <ucdr_check_buffer_available_for>:
 801053c:	7d83      	ldrb	r3, [r0, #22]
 801053e:	b93b      	cbnz	r3, 8010550 <ucdr_check_buffer_available_for+0x14>
 8010540:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010544:	4419      	add	r1, r3
 8010546:	4288      	cmp	r0, r1
 8010548:	bf34      	ite	cc
 801054a:	2000      	movcc	r0, #0
 801054c:	2001      	movcs	r0, #1
 801054e:	4770      	bx	lr
 8010550:	2000      	movs	r0, #0
 8010552:	4770      	bx	lr

08010554 <ucdr_check_final_buffer_behavior>:
 8010554:	7d83      	ldrb	r3, [r0, #22]
 8010556:	b943      	cbnz	r3, 801056a <ucdr_check_final_buffer_behavior+0x16>
 8010558:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801055c:	4291      	cmp	r1, r2
 801055e:	b510      	push	{r4, lr}
 8010560:	4604      	mov	r4, r0
 8010562:	d205      	bcs.n	8010570 <ucdr_check_final_buffer_behavior+0x1c>
 8010564:	2301      	movs	r3, #1
 8010566:	4618      	mov	r0, r3
 8010568:	bd10      	pop	{r4, pc}
 801056a:	2300      	movs	r3, #0
 801056c:	4618      	mov	r0, r3
 801056e:	4770      	bx	lr
 8010570:	6982      	ldr	r2, [r0, #24]
 8010572:	b13a      	cbz	r2, 8010584 <ucdr_check_final_buffer_behavior+0x30>
 8010574:	69c1      	ldr	r1, [r0, #28]
 8010576:	4790      	blx	r2
 8010578:	f080 0301 	eor.w	r3, r0, #1
 801057c:	b2db      	uxtb	r3, r3
 801057e:	75a0      	strb	r0, [r4, #22]
 8010580:	4618      	mov	r0, r3
 8010582:	bd10      	pop	{r4, pc}
 8010584:	2001      	movs	r0, #1
 8010586:	75a0      	strb	r0, [r4, #22]
 8010588:	e7fa      	b.n	8010580 <ucdr_check_final_buffer_behavior+0x2c>
 801058a:	bf00      	nop

0801058c <ucdr_set_on_full_buffer_callback>:
 801058c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010590:	4770      	bx	lr
 8010592:	bf00      	nop

08010594 <ucdr_init_buffer_origin_offset_endian>:
 8010594:	b410      	push	{r4}
 8010596:	9c01      	ldr	r4, [sp, #4]
 8010598:	6001      	str	r1, [r0, #0]
 801059a:	440a      	add	r2, r1
 801059c:	6042      	str	r2, [r0, #4]
 801059e:	190a      	adds	r2, r1, r4
 80105a0:	441c      	add	r4, r3
 80105a2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80105a6:	6082      	str	r2, [r0, #8]
 80105a8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80105ac:	7503      	strb	r3, [r0, #20]
 80105ae:	2200      	movs	r2, #0
 80105b0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80105b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105b8:	7542      	strb	r2, [r0, #21]
 80105ba:	7582      	strb	r2, [r0, #22]
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop

080105c0 <ucdr_init_buffer_origin_offset>:
 80105c0:	b510      	push	{r4, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	9c04      	ldr	r4, [sp, #16]
 80105c6:	9400      	str	r4, [sp, #0]
 80105c8:	2401      	movs	r4, #1
 80105ca:	9401      	str	r4, [sp, #4]
 80105cc:	f7ff ffe2 	bl	8010594 <ucdr_init_buffer_origin_offset_endian>
 80105d0:	b002      	add	sp, #8
 80105d2:	bd10      	pop	{r4, pc}

080105d4 <ucdr_init_buffer_origin>:
 80105d4:	b510      	push	{r4, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	2400      	movs	r4, #0
 80105da:	9400      	str	r4, [sp, #0]
 80105dc:	f7ff fff0 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 80105e0:	b002      	add	sp, #8
 80105e2:	bd10      	pop	{r4, pc}

080105e4 <ucdr_init_buffer>:
 80105e4:	2300      	movs	r3, #0
 80105e6:	f7ff bff5 	b.w	80105d4 <ucdr_init_buffer_origin>
 80105ea:	bf00      	nop

080105ec <ucdr_alignment>:
 80105ec:	fbb0 f3f1 	udiv	r3, r0, r1
 80105f0:	fb03 0011 	mls	r0, r3, r1, r0
 80105f4:	1a08      	subs	r0, r1, r0
 80105f6:	3901      	subs	r1, #1
 80105f8:	4008      	ands	r0, r1
 80105fa:	4770      	bx	lr

080105fc <ucdr_buffer_alignment>:
 80105fc:	7d43      	ldrb	r3, [r0, #21]
 80105fe:	428b      	cmp	r3, r1
 8010600:	d208      	bcs.n	8010614 <ucdr_buffer_alignment+0x18>
 8010602:	6900      	ldr	r0, [r0, #16]
 8010604:	fbb0 f3f1 	udiv	r3, r0, r1
 8010608:	fb01 0013 	mls	r0, r1, r3, r0
 801060c:	1a08      	subs	r0, r1, r0
 801060e:	3901      	subs	r1, #1
 8010610:	4008      	ands	r0, r1
 8010612:	4770      	bx	lr
 8010614:	2000      	movs	r0, #0
 8010616:	4770      	bx	lr

08010618 <ucdr_align_to>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	4604      	mov	r4, r0
 801061c:	460d      	mov	r5, r1
 801061e:	f7ff ffed 	bl	80105fc <ucdr_buffer_alignment>
 8010622:	68a3      	ldr	r3, [r4, #8]
 8010624:	6921      	ldr	r1, [r4, #16]
 8010626:	7565      	strb	r5, [r4, #21]
 8010628:	181a      	adds	r2, r3, r0
 801062a:	6863      	ldr	r3, [r4, #4]
 801062c:	4293      	cmp	r3, r2
 801062e:	4408      	add	r0, r1
 8010630:	bf28      	it	cs
 8010632:	4613      	movcs	r3, r2
 8010634:	6120      	str	r0, [r4, #16]
 8010636:	60a3      	str	r3, [r4, #8]
 8010638:	bd38      	pop	{r3, r4, r5, pc}
 801063a:	bf00      	nop

0801063c <ucdr_buffer_length>:
 801063c:	6882      	ldr	r2, [r0, #8]
 801063e:	6800      	ldr	r0, [r0, #0]
 8010640:	1a10      	subs	r0, r2, r0
 8010642:	4770      	bx	lr

08010644 <ucdr_buffer_remaining>:
 8010644:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010648:	1a10      	subs	r0, r2, r0
 801064a:	4770      	bx	lr

0801064c <ucdr_check_final_buffer_behavior_array>:
 801064c:	b538      	push	{r3, r4, r5, lr}
 801064e:	7d83      	ldrb	r3, [r0, #22]
 8010650:	b963      	cbnz	r3, 801066c <ucdr_check_final_buffer_behavior_array+0x20>
 8010652:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010656:	429a      	cmp	r2, r3
 8010658:	4604      	mov	r4, r0
 801065a:	460d      	mov	r5, r1
 801065c:	d308      	bcc.n	8010670 <ucdr_check_final_buffer_behavior_array+0x24>
 801065e:	b139      	cbz	r1, 8010670 <ucdr_check_final_buffer_behavior_array+0x24>
 8010660:	6983      	ldr	r3, [r0, #24]
 8010662:	b163      	cbz	r3, 801067e <ucdr_check_final_buffer_behavior_array+0x32>
 8010664:	69c1      	ldr	r1, [r0, #28]
 8010666:	4798      	blx	r3
 8010668:	75a0      	strb	r0, [r4, #22]
 801066a:	b108      	cbz	r0, 8010670 <ucdr_check_final_buffer_behavior_array+0x24>
 801066c:	2000      	movs	r0, #0
 801066e:	bd38      	pop	{r3, r4, r5, pc}
 8010670:	4620      	mov	r0, r4
 8010672:	f7ff ffe7 	bl	8010644 <ucdr_buffer_remaining>
 8010676:	42a8      	cmp	r0, r5
 8010678:	bf28      	it	cs
 801067a:	4628      	movcs	r0, r5
 801067c:	bd38      	pop	{r3, r4, r5, pc}
 801067e:	2301      	movs	r3, #1
 8010680:	7583      	strb	r3, [r0, #22]
 8010682:	e7f3      	b.n	801066c <ucdr_check_final_buffer_behavior_array+0x20>

08010684 <ucdr_advance_buffer>:
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	4604      	mov	r4, r0
 8010688:	460d      	mov	r5, r1
 801068a:	f7ff ff57 	bl	801053c <ucdr_check_buffer_available_for>
 801068e:	b178      	cbz	r0, 80106b0 <ucdr_advance_buffer+0x2c>
 8010690:	6923      	ldr	r3, [r4, #16]
 8010692:	68a2      	ldr	r2, [r4, #8]
 8010694:	442b      	add	r3, r5
 8010696:	6123      	str	r3, [r4, #16]
 8010698:	2301      	movs	r3, #1
 801069a:	442a      	add	r2, r5
 801069c:	7563      	strb	r3, [r4, #21]
 801069e:	60a2      	str	r2, [r4, #8]
 80106a0:	bd38      	pop	{r3, r4, r5, pc}
 80106a2:	68a2      	ldr	r2, [r4, #8]
 80106a4:	6923      	ldr	r3, [r4, #16]
 80106a6:	4402      	add	r2, r0
 80106a8:	4403      	add	r3, r0
 80106aa:	1a2d      	subs	r5, r5, r0
 80106ac:	60a2      	str	r2, [r4, #8]
 80106ae:	6123      	str	r3, [r4, #16]
 80106b0:	4629      	mov	r1, r5
 80106b2:	2201      	movs	r2, #1
 80106b4:	4620      	mov	r0, r4
 80106b6:	f7ff ffc9 	bl	801064c <ucdr_check_final_buffer_behavior_array>
 80106ba:	2800      	cmp	r0, #0
 80106bc:	d1f1      	bne.n	80106a2 <ucdr_advance_buffer+0x1e>
 80106be:	2301      	movs	r3, #1
 80106c0:	7563      	strb	r3, [r4, #21]
 80106c2:	bd38      	pop	{r3, r4, r5, pc}

080106c4 <rcl_get_zero_initialized_publisher>:
 80106c4:	4b01      	ldr	r3, [pc, #4]	@ (80106cc <rcl_get_zero_initialized_publisher+0x8>)
 80106c6:	6818      	ldr	r0, [r3, #0]
 80106c8:	4770      	bx	lr
 80106ca:	bf00      	nop
 80106cc:	0801db20 	.word	0x0801db20

080106d0 <rcl_publisher_init>:
 80106d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106d4:	b088      	sub	sp, #32
 80106d6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80106d8:	2d00      	cmp	r5, #0
 80106da:	d069      	beq.n	80107b0 <rcl_publisher_init+0xe0>
 80106dc:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80106e0:	4604      	mov	r4, r0
 80106e2:	4648      	mov	r0, r9
 80106e4:	460e      	mov	r6, r1
 80106e6:	4690      	mov	r8, r2
 80106e8:	461f      	mov	r7, r3
 80106ea:	f001 f83d 	bl	8011768 <rcutils_allocator_is_valid>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d05e      	beq.n	80107b0 <rcl_publisher_init+0xe0>
 80106f2:	2c00      	cmp	r4, #0
 80106f4:	d05c      	beq.n	80107b0 <rcl_publisher_init+0xe0>
 80106f6:	f8d4 a000 	ldr.w	sl, [r4]
 80106fa:	f1ba 0f00 	cmp.w	sl, #0
 80106fe:	d004      	beq.n	801070a <rcl_publisher_init+0x3a>
 8010700:	2764      	movs	r7, #100	@ 0x64
 8010702:	4638      	mov	r0, r7
 8010704:	b008      	add	sp, #32
 8010706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801070a:	4630      	mov	r0, r6
 801070c:	f005 f9f4 	bl	8015af8 <rcl_node_is_valid>
 8010710:	2800      	cmp	r0, #0
 8010712:	d052      	beq.n	80107ba <rcl_publisher_init+0xea>
 8010714:	f1b8 0f00 	cmp.w	r8, #0
 8010718:	d04a      	beq.n	80107b0 <rcl_publisher_init+0xe0>
 801071a:	2f00      	cmp	r7, #0
 801071c:	d048      	beq.n	80107b0 <rcl_publisher_init+0xe0>
 801071e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8010722:	aa07      	add	r2, sp, #28
 8010724:	9205      	str	r2, [sp, #20]
 8010726:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 801072a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801072e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010732:	f8cd a01c 	str.w	sl, [sp, #28]
 8010736:	4639      	mov	r1, r7
 8010738:	e899 000c 	ldmia.w	r9, {r2, r3}
 801073c:	4630      	mov	r0, r6
 801073e:	f005 fa2f 	bl	8015ba0 <rcl_node_resolve_name>
 8010742:	4607      	mov	r7, r0
 8010744:	2800      	cmp	r0, #0
 8010746:	d14f      	bne.n	80107e8 <rcl_publisher_init+0x118>
 8010748:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801074a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 801074c:	20c8      	movs	r0, #200	@ 0xc8
 801074e:	4798      	blx	r3
 8010750:	6020      	str	r0, [r4, #0]
 8010752:	2800      	cmp	r0, #0
 8010754:	d04e      	beq.n	80107f4 <rcl_publisher_init+0x124>
 8010756:	4630      	mov	r0, r6
 8010758:	f005 f9f0 	bl	8015b3c <rcl_node_get_rmw_handle>
 801075c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	9a07      	ldr	r2, [sp, #28]
 8010764:	6827      	ldr	r7, [r4, #0]
 8010766:	462b      	mov	r3, r5
 8010768:	4641      	mov	r1, r8
 801076a:	f001 f90b 	bl	8011984 <rmw_create_publisher>
 801076e:	6823      	ldr	r3, [r4, #0]
 8010770:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8010774:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8010778:	b370      	cbz	r0, 80107d8 <rcl_publisher_init+0x108>
 801077a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801077e:	f001 f9df 	bl	8011b40 <rmw_publisher_get_actual_qos>
 8010782:	6823      	ldr	r3, [r4, #0]
 8010784:	4607      	mov	r7, r0
 8010786:	b9d0      	cbnz	r0, 80107be <rcl_publisher_init+0xee>
 8010788:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 801078c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8010790:	4629      	mov	r1, r5
 8010792:	2270      	movs	r2, #112	@ 0x70
 8010794:	4618      	mov	r0, r3
 8010796:	f00b feb6 	bl	801c506 <memcpy>
 801079a:	6832      	ldr	r2, [r6, #0]
 801079c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80107a0:	9807      	ldr	r0, [sp, #28]
 80107a2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80107a4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80107a6:	4798      	blx	r3
 80107a8:	4638      	mov	r0, r7
 80107aa:	b008      	add	sp, #32
 80107ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b0:	270b      	movs	r7, #11
 80107b2:	4638      	mov	r0, r7
 80107b4:	b008      	add	sp, #32
 80107b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107ba:	27c8      	movs	r7, #200	@ 0xc8
 80107bc:	e7a1      	b.n	8010702 <rcl_publisher_init+0x32>
 80107be:	b18b      	cbz	r3, 80107e4 <rcl_publisher_init+0x114>
 80107c0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80107c4:	b142      	cbz	r2, 80107d8 <rcl_publisher_init+0x108>
 80107c6:	4630      	mov	r0, r6
 80107c8:	f005 f9b8 	bl	8015b3c <rcl_node_get_rmw_handle>
 80107cc:	6823      	ldr	r3, [r4, #0]
 80107ce:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80107d2:	f001 f9c5 	bl	8011b60 <rmw_destroy_publisher>
 80107d6:	6823      	ldr	r3, [r4, #0]
 80107d8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80107da:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80107dc:	4618      	mov	r0, r3
 80107de:	4790      	blx	r2
 80107e0:	2300      	movs	r3, #0
 80107e2:	6023      	str	r3, [r4, #0]
 80107e4:	2701      	movs	r7, #1
 80107e6:	e7db      	b.n	80107a0 <rcl_publisher_init+0xd0>
 80107e8:	2867      	cmp	r0, #103	@ 0x67
 80107ea:	d0d9      	beq.n	80107a0 <rcl_publisher_init+0xd0>
 80107ec:	2869      	cmp	r0, #105	@ 0x69
 80107ee:	d003      	beq.n	80107f8 <rcl_publisher_init+0x128>
 80107f0:	280a      	cmp	r0, #10
 80107f2:	d1f7      	bne.n	80107e4 <rcl_publisher_init+0x114>
 80107f4:	270a      	movs	r7, #10
 80107f6:	e7d3      	b.n	80107a0 <rcl_publisher_init+0xd0>
 80107f8:	2767      	movs	r7, #103	@ 0x67
 80107fa:	e7d1      	b.n	80107a0 <rcl_publisher_init+0xd0>

080107fc <rcl_publisher_get_default_options>:
 80107fc:	b570      	push	{r4, r5, r6, lr}
 80107fe:	4d14      	ldr	r5, [pc, #80]	@ (8010850 <rcl_publisher_get_default_options+0x54>)
 8010800:	4914      	ldr	r1, [pc, #80]	@ (8010854 <rcl_publisher_get_default_options+0x58>)
 8010802:	b088      	sub	sp, #32
 8010804:	4604      	mov	r4, r0
 8010806:	2250      	movs	r2, #80	@ 0x50
 8010808:	4628      	mov	r0, r5
 801080a:	f00b fe7c 	bl	801c506 <memcpy>
 801080e:	a802      	add	r0, sp, #8
 8010810:	f000 ff9c 	bl	801174c <rcutils_get_default_allocator>
 8010814:	f10d 0c08 	add.w	ip, sp, #8
 8010818:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801081c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8010820:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010824:	466e      	mov	r6, sp
 8010826:	f8dc 3000 	ldr.w	r3, [ip]
 801082a:	f8ce 3000 	str.w	r3, [lr]
 801082e:	4630      	mov	r0, r6
 8010830:	f001 f82a 	bl	8011888 <rmw_get_default_publisher_options>
 8010834:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010838:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 801083c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010840:	2270      	movs	r2, #112	@ 0x70
 8010842:	4629      	mov	r1, r5
 8010844:	4620      	mov	r0, r4
 8010846:	f00b fe5e 	bl	801c506 <memcpy>
 801084a:	4620      	mov	r0, r4
 801084c:	b008      	add	sp, #32
 801084e:	bd70      	pop	{r4, r5, r6, pc}
 8010850:	20009ba0 	.word	0x20009ba0
 8010854:	0801db28 	.word	0x0801db28

08010858 <rcl_publish>:
 8010858:	b1f8      	cbz	r0, 801089a <rcl_publish+0x42>
 801085a:	6803      	ldr	r3, [r0, #0]
 801085c:	b570      	push	{r4, r5, r6, lr}
 801085e:	4604      	mov	r4, r0
 8010860:	b1b3      	cbz	r3, 8010890 <rcl_publish+0x38>
 8010862:	4616      	mov	r6, r2
 8010864:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8010868:	b192      	cbz	r2, 8010890 <rcl_publish+0x38>
 801086a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801086e:	460d      	mov	r5, r1
 8010870:	f004 fd7e 	bl	8015370 <rcl_context_is_valid>
 8010874:	b160      	cbz	r0, 8010890 <rcl_publish+0x38>
 8010876:	6823      	ldr	r3, [r4, #0]
 8010878:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801087c:	b140      	cbz	r0, 8010890 <rcl_publish+0x38>
 801087e:	b155      	cbz	r5, 8010896 <rcl_publish+0x3e>
 8010880:	4632      	mov	r2, r6
 8010882:	4629      	mov	r1, r5
 8010884:	f001 f81e 	bl	80118c4 <rmw_publish>
 8010888:	3800      	subs	r0, #0
 801088a:	bf18      	it	ne
 801088c:	2001      	movne	r0, #1
 801088e:	bd70      	pop	{r4, r5, r6, pc}
 8010890:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8010894:	bd70      	pop	{r4, r5, r6, pc}
 8010896:	200b      	movs	r0, #11
 8010898:	bd70      	pop	{r4, r5, r6, pc}
 801089a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801089e:	4770      	bx	lr

080108a0 <rcl_publisher_is_valid>:
 80108a0:	b1a0      	cbz	r0, 80108cc <rcl_publisher_is_valid+0x2c>
 80108a2:	6803      	ldr	r3, [r0, #0]
 80108a4:	b510      	push	{r4, lr}
 80108a6:	4604      	mov	r4, r0
 80108a8:	b173      	cbz	r3, 80108c8 <rcl_publisher_is_valid+0x28>
 80108aa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80108ae:	b15a      	cbz	r2, 80108c8 <rcl_publisher_is_valid+0x28>
 80108b0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80108b4:	f004 fd5c 	bl	8015370 <rcl_context_is_valid>
 80108b8:	b130      	cbz	r0, 80108c8 <rcl_publisher_is_valid+0x28>
 80108ba:	6823      	ldr	r3, [r4, #0]
 80108bc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80108c0:	3800      	subs	r0, #0
 80108c2:	bf18      	it	ne
 80108c4:	2001      	movne	r0, #1
 80108c6:	bd10      	pop	{r4, pc}
 80108c8:	2000      	movs	r0, #0
 80108ca:	bd10      	pop	{r4, pc}
 80108cc:	2000      	movs	r0, #0
 80108ce:	4770      	bx	lr

080108d0 <rcl_publisher_is_valid_except_context>:
 80108d0:	b130      	cbz	r0, 80108e0 <rcl_publisher_is_valid_except_context+0x10>
 80108d2:	6800      	ldr	r0, [r0, #0]
 80108d4:	b120      	cbz	r0, 80108e0 <rcl_publisher_is_valid_except_context+0x10>
 80108d6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80108da:	3800      	subs	r0, #0
 80108dc:	bf18      	it	ne
 80108de:	2001      	movne	r0, #1
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop

080108e4 <_rclc_check_for_new_data>:
 80108e4:	2800      	cmp	r0, #0
 80108e6:	d046      	beq.n	8010976 <_rclc_check_for_new_data+0x92>
 80108e8:	b510      	push	{r4, lr}
 80108ea:	7802      	ldrb	r2, [r0, #0]
 80108ec:	b084      	sub	sp, #16
 80108ee:	4603      	mov	r3, r0
 80108f0:	2a0a      	cmp	r2, #10
 80108f2:	d842      	bhi.n	801097a <_rclc_check_for_new_data+0x96>
 80108f4:	e8df f002 	tbb	[pc, r2]
 80108f8:	14181212 	.word	0x14181212
 80108fc:	06060614 	.word	0x06060614
 8010900:	2e1a      	.short	0x2e1a
 8010902:	16          	.byte	0x16
 8010903:	00          	.byte	0x00
 8010904:	6a0a      	ldr	r2, [r1, #32]
 8010906:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010908:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801090c:	2000      	movs	r0, #0
 801090e:	1a12      	subs	r2, r2, r0
 8010910:	bf18      	it	ne
 8010912:	2201      	movne	r2, #1
 8010914:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8010918:	b004      	add	sp, #16
 801091a:	bd10      	pop	{r4, pc}
 801091c:	680a      	ldr	r2, [r1, #0]
 801091e:	e7f2      	b.n	8010906 <_rclc_check_for_new_data+0x22>
 8010920:	698a      	ldr	r2, [r1, #24]
 8010922:	e7f0      	b.n	8010906 <_rclc_check_for_new_data+0x22>
 8010924:	688a      	ldr	r2, [r1, #8]
 8010926:	e7ee      	b.n	8010906 <_rclc_check_for_new_data+0x22>
 8010928:	690a      	ldr	r2, [r1, #16]
 801092a:	e7ec      	b.n	8010906 <_rclc_check_for_new_data+0x22>
 801092c:	685c      	ldr	r4, [r3, #4]
 801092e:	4608      	mov	r0, r1
 8010930:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8010934:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8010938:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 801093c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8010946:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 801094a:	f104 0110 	add.w	r1, r4, #16
 801094e:	f006 fc8f 	bl	8017270 <rcl_action_client_wait_set_get_entities_ready>
 8010952:	e7e1      	b.n	8010918 <_rclc_check_for_new_data+0x34>
 8010954:	685c      	ldr	r4, [r3, #4]
 8010956:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 801095a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 801095e:	e9cd 3200 	strd	r3, r2, [sp]
 8010962:	4608      	mov	r0, r1
 8010964:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010968:	f104 0220 	add.w	r2, r4, #32
 801096c:	f104 0110 	add.w	r1, r4, #16
 8010970:	f006 fe96 	bl	80176a0 <rcl_action_server_wait_set_get_entities_ready>
 8010974:	e7d0      	b.n	8010918 <_rclc_check_for_new_data+0x34>
 8010976:	200b      	movs	r0, #11
 8010978:	4770      	bx	lr
 801097a:	2001      	movs	r0, #1
 801097c:	e7cc      	b.n	8010918 <_rclc_check_for_new_data+0x34>
 801097e:	bf00      	nop

08010980 <_rclc_take_new_data>:
 8010980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010982:	b09b      	sub	sp, #108	@ 0x6c
 8010984:	2800      	cmp	r0, #0
 8010986:	f000 8088 	beq.w	8010a9a <_rclc_take_new_data+0x11a>
 801098a:	7803      	ldrb	r3, [r0, #0]
 801098c:	4604      	mov	r4, r0
 801098e:	2b0a      	cmp	r3, #10
 8010990:	f200 8167 	bhi.w	8010c62 <_rclc_take_new_data+0x2e2>
 8010994:	e8df f003 	tbb	[pc, r3]
 8010998:	44152d2d 	.word	0x44152d2d
 801099c:	19191944 	.word	0x19191944
 80109a0:	065a      	.short	0x065a
 80109a2:	15          	.byte	0x15
 80109a3:	00          	.byte	0x00
 80109a4:	6840      	ldr	r0, [r0, #4]
 80109a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	f040 80b2 	bne.w	8010b14 <_rclc_take_new_data+0x194>
 80109b0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	f040 80e4 	bne.w	8010b82 <_rclc_take_new_data+0x202>
 80109ba:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d16f      	bne.n	8010aa2 <_rclc_take_new_data+0x122>
 80109c2:	2500      	movs	r5, #0
 80109c4:	4628      	mov	r0, r5
 80109c6:	b01b      	add	sp, #108	@ 0x6c
 80109c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ca:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80109cc:	6a0b      	ldr	r3, [r1, #32]
 80109ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d0f5      	beq.n	80109c2 <_rclc_take_new_data+0x42>
 80109d6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80109da:	f104 0110 	add.w	r1, r4, #16
 80109de:	f005 f98d 	bl	8015cfc <rcl_take_request>
 80109e2:	4605      	mov	r5, r0
 80109e4:	2800      	cmp	r0, #0
 80109e6:	d0ec      	beq.n	80109c2 <_rclc_take_new_data+0x42>
 80109e8:	f240 2359 	movw	r3, #601	@ 0x259
 80109ec:	4298      	cmp	r0, r3
 80109ee:	d013      	beq.n	8010a18 <_rclc_take_new_data+0x98>
 80109f0:	e029      	b.n	8010a46 <_rclc_take_new_data+0xc6>
 80109f2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80109f4:	680b      	ldr	r3, [r1, #0]
 80109f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d0e1      	beq.n	80109c2 <_rclc_take_new_data+0x42>
 80109fe:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8010a02:	2300      	movs	r3, #0
 8010a04:	aa0a      	add	r2, sp, #40	@ 0x28
 8010a06:	f005 fab7 	bl	8015f78 <rcl_take>
 8010a0a:	4605      	mov	r5, r0
 8010a0c:	2800      	cmp	r0, #0
 8010a0e:	d0d9      	beq.n	80109c4 <_rclc_take_new_data+0x44>
 8010a10:	f240 1391 	movw	r3, #401	@ 0x191
 8010a14:	4298      	cmp	r0, r3
 8010a16:	d116      	bne.n	8010a46 <_rclc_take_new_data+0xc6>
 8010a18:	2300      	movs	r3, #0
 8010a1a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8010a1e:	e7d1      	b.n	80109c4 <_rclc_take_new_data+0x44>
 8010a20:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8010a22:	698b      	ldr	r3, [r1, #24]
 8010a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d0ca      	beq.n	80109c2 <_rclc_take_new_data+0x42>
 8010a2c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8010a30:	f104 0110 	add.w	r1, r4, #16
 8010a34:	f004 fc2c 	bl	8015290 <rcl_take_response>
 8010a38:	4605      	mov	r5, r0
 8010a3a:	2800      	cmp	r0, #0
 8010a3c:	d0c1      	beq.n	80109c2 <_rclc_take_new_data+0x42>
 8010a3e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010a42:	4298      	cmp	r0, r3
 8010a44:	d0be      	beq.n	80109c4 <_rclc_take_new_data+0x44>
 8010a46:	f000 feb3 	bl	80117b0 <rcutils_reset_error>
 8010a4a:	e7bb      	b.n	80109c4 <_rclc_take_new_data+0x44>
 8010a4c:	6840      	ldr	r0, [r0, #4]
 8010a4e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d17d      	bne.n	8010b52 <_rclc_take_new_data+0x1d2>
 8010a56:	69c3      	ldr	r3, [r0, #28]
 8010a58:	b11b      	cbz	r3, 8010a62 <_rclc_take_new_data+0xe2>
 8010a5a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d144      	bne.n	8010aec <_rclc_take_new_data+0x16c>
 8010a62:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f040 80ac 	bne.w	8010bc4 <_rclc_take_new_data+0x244>
 8010a6c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d0a6      	beq.n	80109c2 <_rclc_take_new_data+0x42>
 8010a74:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8010a76:	a90a      	add	r1, sp, #40	@ 0x28
 8010a78:	3010      	adds	r0, #16
 8010a7a:	f006 fad1 	bl	8017020 <rcl_action_take_result_response>
 8010a7e:	4605      	mov	r5, r0
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d1e0      	bne.n	8010a46 <_rclc_take_new_data+0xc6>
 8010a84:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010a88:	6860      	ldr	r0, [r4, #4]
 8010a8a:	f006 ff2d 	bl	80178e8 <rclc_action_find_handle_by_result_request_sequence_number>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	d098      	beq.n	80109c4 <_rclc_take_new_data+0x44>
 8010a92:	2301      	movs	r3, #1
 8010a94:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8010a98:	e794      	b.n	80109c4 <_rclc_take_new_data+0x44>
 8010a9a:	250b      	movs	r5, #11
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	b01b      	add	sp, #108	@ 0x6c
 8010aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aa2:	ae04      	add	r6, sp, #16
 8010aa4:	aa0a      	add	r2, sp, #40	@ 0x28
 8010aa6:	3010      	adds	r0, #16
 8010aa8:	4631      	mov	r1, r6
 8010aaa:	f006 fd2d 	bl	8017508 <rcl_action_take_cancel_request>
 8010aae:	4605      	mov	r5, r0
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	d1c8      	bne.n	8010a46 <_rclc_take_new_data+0xc6>
 8010ab4:	6860      	ldr	r0, [r4, #4]
 8010ab6:	a90a      	add	r1, sp, #40	@ 0x28
 8010ab8:	f006 fed4 	bl	8017864 <rclc_action_find_goal_handle_by_uuid>
 8010abc:	4607      	mov	r7, r0
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	f000 80bb 	beq.w	8010c3a <_rclc_take_new_data+0x2ba>
 8010ac4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8010ac8:	2101      	movs	r1, #1
 8010aca:	f006 fe55 	bl	8017778 <rcl_action_transition_goal_state>
 8010ace:	2803      	cmp	r0, #3
 8010ad0:	4684      	mov	ip, r0
 8010ad2:	f040 80a7 	bne.w	8010c24 <_rclc_take_new_data+0x2a4>
 8010ad6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010ad8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8010adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ade:	e896 0003 	ldmia.w	r6, {r0, r1}
 8010ae2:	e884 0003 	stmia.w	r4, {r0, r1}
 8010ae6:	f887 c008 	strb.w	ip, [r7, #8]
 8010aea:	e76b      	b.n	80109c4 <_rclc_take_new_data+0x44>
 8010aec:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010aee:	3010      	adds	r0, #16
 8010af0:	f006 fb16 	bl	8017120 <rcl_action_take_feedback>
 8010af4:	4605      	mov	r5, r0
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d1a5      	bne.n	8010a46 <_rclc_take_new_data+0xc6>
 8010afa:	6860      	ldr	r0, [r4, #4]
 8010afc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010afe:	f006 feb1 	bl	8017864 <rclc_action_find_goal_handle_by_uuid>
 8010b02:	4603      	mov	r3, r0
 8010b04:	2800      	cmp	r0, #0
 8010b06:	f000 80a3 	beq.w	8010c50 <_rclc_take_new_data+0x2d0>
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	6860      	ldr	r0, [r4, #4]
 8010b0e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8010b12:	e7a6      	b.n	8010a62 <_rclc_take_new_data+0xe2>
 8010b14:	f006 fe80 	bl	8017818 <rclc_action_take_goal_handle>
 8010b18:	4606      	mov	r6, r0
 8010b1a:	6860      	ldr	r0, [r4, #4]
 8010b1c:	2e00      	cmp	r6, #0
 8010b1e:	f43f af47 	beq.w	80109b0 <_rclc_take_new_data+0x30>
 8010b22:	6070      	str	r0, [r6, #4]
 8010b24:	69f2      	ldr	r2, [r6, #28]
 8010b26:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8010b2a:	3010      	adds	r0, #16
 8010b2c:	f006 fc34 	bl	8017398 <rcl_action_take_goal_request>
 8010b30:	4605      	mov	r5, r0
 8010b32:	2800      	cmp	r0, #0
 8010b34:	f040 808e 	bne.w	8010c54 <_rclc_take_new_data+0x2d4>
 8010b38:	69f7      	ldr	r7, [r6, #28]
 8010b3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010b3c:	7235      	strb	r5, [r6, #8]
 8010b3e:	f8c6 0009 	str.w	r0, [r6, #9]
 8010b42:	f8c6 100d 	str.w	r1, [r6, #13]
 8010b46:	6860      	ldr	r0, [r4, #4]
 8010b48:	f8c6 2011 	str.w	r2, [r6, #17]
 8010b4c:	f8c6 3015 	str.w	r3, [r6, #21]
 8010b50:	e72e      	b.n	80109b0 <_rclc_take_new_data+0x30>
 8010b52:	aa04      	add	r2, sp, #16
 8010b54:	a90a      	add	r1, sp, #40	@ 0x28
 8010b56:	3010      	adds	r0, #16
 8010b58:	f006 f9ea 	bl	8016f30 <rcl_action_take_goal_response>
 8010b5c:	4605      	mov	r5, r0
 8010b5e:	2800      	cmp	r0, #0
 8010b60:	f47f af71 	bne.w	8010a46 <_rclc_take_new_data+0xc6>
 8010b64:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010b68:	6860      	ldr	r0, [r4, #4]
 8010b6a:	f006 feab 	bl	80178c4 <rclc_action_find_handle_by_goal_request_sequence_number>
 8010b6e:	b130      	cbz	r0, 8010b7e <_rclc_take_new_data+0x1fe>
 8010b70:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010b74:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010b78:	2201      	movs	r2, #1
 8010b7a:	f880 2020 	strb.w	r2, [r0, #32]
 8010b7e:	6860      	ldr	r0, [r4, #4]
 8010b80:	e769      	b.n	8010a56 <_rclc_take_new_data+0xd6>
 8010b82:	aa04      	add	r2, sp, #16
 8010b84:	3010      	adds	r0, #16
 8010b86:	a90a      	add	r1, sp, #40	@ 0x28
 8010b88:	f006 fc7e 	bl	8017488 <rcl_action_take_result_request>
 8010b8c:	4605      	mov	r5, r0
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	f47f af59 	bne.w	8010a46 <_rclc_take_new_data+0xc6>
 8010b94:	6860      	ldr	r0, [r4, #4]
 8010b96:	a904      	add	r1, sp, #16
 8010b98:	f006 fe64 	bl	8017864 <rclc_action_find_goal_handle_by_uuid>
 8010b9c:	4607      	mov	r7, r0
 8010b9e:	b160      	cbz	r0, 8010bba <_rclc_take_new_data+0x23a>
 8010ba0:	ad0a      	add	r5, sp, #40	@ 0x28
 8010ba2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8010ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ba8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010baa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010bae:	f04f 0c02 	mov.w	ip, #2
 8010bb2:	e886 0003 	stmia.w	r6, {r0, r1}
 8010bb6:	f887 c008 	strb.w	ip, [r7, #8]
 8010bba:	6860      	ldr	r0, [r4, #4]
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8010bc2:	e6fa      	b.n	80109ba <_rclc_take_new_data+0x3a>
 8010bc4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8010bc8:	a90a      	add	r1, sp, #40	@ 0x28
 8010bca:	3010      	adds	r0, #16
 8010bcc:	f006 fa68 	bl	80170a0 <rcl_action_take_cancel_response>
 8010bd0:	4605      	mov	r5, r0
 8010bd2:	2800      	cmp	r0, #0
 8010bd4:	f47f af37 	bne.w	8010a46 <_rclc_take_new_data+0xc6>
 8010bd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010bdc:	6860      	ldr	r0, [r4, #4]
 8010bde:	f006 fe95 	bl	801790c <rclc_action_find_handle_by_cancel_request_sequence_number>
 8010be2:	4606      	mov	r6, r0
 8010be4:	6860      	ldr	r0, [r4, #4]
 8010be6:	2e00      	cmp	r6, #0
 8010be8:	f43f af40 	beq.w	8010a6c <_rclc_take_new_data+0xec>
 8010bec:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010bee:	2701      	movs	r7, #1
 8010bf0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	f43f af3a 	beq.w	8010a6c <_rclc_take_new_data+0xec>
 8010bf8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010bfa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8010bfe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010c02:	f006 fe2f 	bl	8017864 <rclc_action_find_goal_handle_by_uuid>
 8010c06:	b138      	cbz	r0, 8010c18 <_rclc_take_new_data+0x298>
 8010c08:	6860      	ldr	r0, [r4, #4]
 8010c0a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010c0c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8010c10:	3501      	adds	r5, #1
 8010c12:	42ab      	cmp	r3, r5
 8010c14:	d8f0      	bhi.n	8010bf8 <_rclc_take_new_data+0x278>
 8010c16:	e729      	b.n	8010a6c <_rclc_take_new_data+0xec>
 8010c18:	6860      	ldr	r0, [r4, #4]
 8010c1a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010c1c:	3501      	adds	r5, #1
 8010c1e:	42ab      	cmp	r3, r5
 8010c20:	d8ea      	bhi.n	8010bf8 <_rclc_take_new_data+0x278>
 8010c22:	e723      	b.n	8010a6c <_rclc_take_new_data+0xec>
 8010c24:	ab06      	add	r3, sp, #24
 8010c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c28:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010c2c:	2103      	movs	r1, #3
 8010c2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010c32:	6860      	ldr	r0, [r4, #4]
 8010c34:	f006 fee0 	bl	80179f8 <rclc_action_server_goal_cancel_reject>
 8010c38:	e6c4      	b.n	80109c4 <_rclc_take_new_data+0x44>
 8010c3a:	ab06      	add	r3, sp, #24
 8010c3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010c3e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010c42:	2102      	movs	r1, #2
 8010c44:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010c48:	6860      	ldr	r0, [r4, #4]
 8010c4a:	f006 fed5 	bl	80179f8 <rclc_action_server_goal_cancel_reject>
 8010c4e:	e6b9      	b.n	80109c4 <_rclc_take_new_data+0x44>
 8010c50:	6860      	ldr	r0, [r4, #4]
 8010c52:	e706      	b.n	8010a62 <_rclc_take_new_data+0xe2>
 8010c54:	6860      	ldr	r0, [r4, #4]
 8010c56:	4631      	mov	r1, r6
 8010c58:	f006 fdee 	bl	8017838 <rclc_action_remove_used_goal_handle>
 8010c5c:	f000 fda8 	bl	80117b0 <rcutils_reset_error>
 8010c60:	e6b0      	b.n	80109c4 <_rclc_take_new_data+0x44>
 8010c62:	2501      	movs	r5, #1
 8010c64:	e6ae      	b.n	80109c4 <_rclc_take_new_data+0x44>
 8010c66:	bf00      	nop

08010c68 <_rclc_execute.part.0>:
 8010c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c6a:	7803      	ldrb	r3, [r0, #0]
 8010c6c:	b087      	sub	sp, #28
 8010c6e:	4604      	mov	r4, r0
 8010c70:	2b0a      	cmp	r3, #10
 8010c72:	f200 8136 	bhi.w	8010ee2 <_rclc_execute.part.0+0x27a>
 8010c76:	e8df f003 	tbb	[pc, r3]
 8010c7a:	435e      	.short	0x435e
 8010c7c:	06a1664f 	.word	0x06a1664f
 8010c80:	6c1e0606 	.word	0x6c1e0606
 8010c84:	59          	.byte	0x59
 8010c85:	00          	.byte	0x00
 8010c86:	2b06      	cmp	r3, #6
 8010c88:	f000 8122 	beq.w	8010ed0 <_rclc_execute.part.0+0x268>
 8010c8c:	2b07      	cmp	r3, #7
 8010c8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010c90:	f040 8118 	bne.w	8010ec4 <_rclc_execute.part.0+0x25c>
 8010c94:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8010c98:	6880      	ldr	r0, [r0, #8]
 8010c9a:	4798      	blx	r3
 8010c9c:	f104 0110 	add.w	r1, r4, #16
 8010ca0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8010ca2:	6860      	ldr	r0, [r4, #4]
 8010ca4:	f005 f86a 	bl	8015d7c <rcl_send_response>
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	d033      	beq.n	8010d14 <_rclc_execute.part.0+0xac>
 8010cac:	9005      	str	r0, [sp, #20]
 8010cae:	f000 fd7f 	bl	80117b0 <rcutils_reset_error>
 8010cb2:	9805      	ldr	r0, [sp, #20]
 8010cb4:	e02e      	b.n	8010d14 <_rclc_execute.part.0+0xac>
 8010cb6:	6840      	ldr	r0, [r0, #4]
 8010cb8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	f000 8086 	beq.w	8010dce <_rclc_execute.part.0+0x166>
 8010cc2:	2600      	movs	r6, #0
 8010cc4:	2701      	movs	r7, #1
 8010cc6:	e004      	b.n	8010cd2 <_rclc_execute.part.0+0x6a>
 8010cc8:	f006 fd80 	bl	80177cc <rclc_action_send_result_request>
 8010ccc:	b998      	cbnz	r0, 8010cf6 <_rclc_execute.part.0+0x8e>
 8010cce:	722f      	strb	r7, [r5, #8]
 8010cd0:	6860      	ldr	r0, [r4, #4]
 8010cd2:	f006 fe2d 	bl	8017930 <rclc_action_find_first_handle_with_goal_response>
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d077      	beq.n	8010dcc <_rclc_execute.part.0+0x164>
 8010cdc:	6863      	ldr	r3, [r4, #4]
 8010cde:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010ce0:	699b      	ldr	r3, [r3, #24]
 8010ce2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8010ce6:	f885 6020 	strb.w	r6, [r5, #32]
 8010cea:	4798      	blx	r3
 8010cec:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1e8      	bne.n	8010cc8 <_rclc_execute.part.0+0x60>
 8010cf6:	6860      	ldr	r0, [r4, #4]
 8010cf8:	4629      	mov	r1, r5
 8010cfa:	f006 fd9d 	bl	8017838 <rclc_action_remove_used_goal_handle>
 8010cfe:	e7e7      	b.n	8010cd0 <_rclc_execute.part.0+0x68>
 8010d00:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8010d04:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8010d08:	2d00      	cmp	r5, #0
 8010d0a:	f000 80c9 	beq.w	8010ea0 <_rclc_execute.part.0+0x238>
 8010d0e:	6880      	ldr	r0, [r0, #8]
 8010d10:	4798      	blx	r3
 8010d12:	2000      	movs	r0, #0
 8010d14:	b007      	add	sp, #28
 8010d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d18:	6840      	ldr	r0, [r0, #4]
 8010d1a:	f005 fa31 	bl	8016180 <rcl_timer_call>
 8010d1e:	f240 3321 	movw	r3, #801	@ 0x321
 8010d22:	4298      	cmp	r0, r3
 8010d24:	d004      	beq.n	8010d30 <_rclc_execute.part.0+0xc8>
 8010d26:	2800      	cmp	r0, #0
 8010d28:	d0f4      	beq.n	8010d14 <_rclc_execute.part.0+0xac>
 8010d2a:	e7bf      	b.n	8010cac <_rclc_execute.part.0+0x44>
 8010d2c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d2e:	4798      	blx	r3
 8010d30:	2000      	movs	r0, #0
 8010d32:	b007      	add	sp, #28
 8010d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d36:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8010d3a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d3c:	b925      	cbnz	r5, 8010d48 <_rclc_execute.part.0+0xe0>
 8010d3e:	4628      	mov	r0, r5
 8010d40:	4798      	blx	r3
 8010d42:	4628      	mov	r0, r5
 8010d44:	e7e6      	b.n	8010d14 <_rclc_execute.part.0+0xac>
 8010d46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010d48:	68a0      	ldr	r0, [r4, #8]
 8010d4a:	4798      	blx	r3
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	b007      	add	sp, #28
 8010d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d52:	6840      	ldr	r0, [r0, #4]
 8010d54:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8010d58:	bb3b      	cbnz	r3, 8010daa <_rclc_execute.part.0+0x142>
 8010d5a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d07b      	beq.n	8010e5a <_rclc_execute.part.0+0x1f2>
 8010d62:	f640 0634 	movw	r6, #2100	@ 0x834
 8010d66:	2701      	movs	r7, #1
 8010d68:	e007      	b.n	8010d7a <_rclc_execute.part.0+0x112>
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	f006 fdf8 	bl	8017960 <rclc_action_server_response_goal_request>
 8010d70:	6860      	ldr	r0, [r4, #4]
 8010d72:	4629      	mov	r1, r5
 8010d74:	f006 fd60 	bl	8017838 <rclc_action_remove_used_goal_handle>
 8010d78:	6860      	ldr	r0, [r4, #4]
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	f006 fd8a 	bl	8017894 <rclc_action_find_first_handle_by_status>
 8010d80:	4605      	mov	r5, r0
 8010d82:	2800      	cmp	r0, #0
 8010d84:	d066      	beq.n	8010e54 <_rclc_execute.part.0+0x1ec>
 8010d86:	6863      	ldr	r3, [r4, #4]
 8010d88:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010d8a:	699b      	ldr	r3, [r3, #24]
 8010d8c:	4798      	blx	r3
 8010d8e:	42b0      	cmp	r0, r6
 8010d90:	f04f 0100 	mov.w	r1, #0
 8010d94:	d1e9      	bne.n	8010d6a <_rclc_execute.part.0+0x102>
 8010d96:	2101      	movs	r1, #1
 8010d98:	4628      	mov	r0, r5
 8010d9a:	f006 fde1 	bl	8017960 <rclc_action_server_response_goal_request>
 8010d9e:	722f      	strb	r7, [r5, #8]
 8010da0:	e7ea      	b.n	8010d78 <_rclc_execute.part.0+0x110>
 8010da2:	6848      	ldr	r0, [r1, #4]
 8010da4:	f006 fd48 	bl	8017838 <rclc_action_remove_used_goal_handle>
 8010da8:	6860      	ldr	r0, [r4, #4]
 8010daa:	f006 fd7f 	bl	80178ac <rclc_action_find_first_terminated_handle>
 8010dae:	4601      	mov	r1, r0
 8010db0:	2800      	cmp	r0, #0
 8010db2:	d1f6      	bne.n	8010da2 <_rclc_execute.part.0+0x13a>
 8010db4:	6860      	ldr	r0, [r4, #4]
 8010db6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8010dba:	e7ce      	b.n	8010d5a <_rclc_execute.part.0+0xf2>
 8010dbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010dbe:	6880      	ldr	r0, [r0, #8]
 8010dc0:	f104 0110 	add.w	r1, r4, #16
 8010dc4:	4798      	blx	r3
 8010dc6:	2000      	movs	r0, #0
 8010dc8:	b007      	add	sp, #28
 8010dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dcc:	6860      	ldr	r0, [r4, #4]
 8010dce:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010dd2:	b18b      	cbz	r3, 8010df8 <_rclc_execute.part.0+0x190>
 8010dd4:	68c5      	ldr	r5, [r0, #12]
 8010dd6:	b32d      	cbz	r5, 8010e24 <_rclc_execute.part.0+0x1bc>
 8010dd8:	2600      	movs	r6, #0
 8010dda:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8010dde:	b143      	cbz	r3, 8010df2 <_rclc_execute.part.0+0x18a>
 8010de0:	69c3      	ldr	r3, [r0, #28]
 8010de2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8010de6:	b123      	cbz	r3, 8010df2 <_rclc_execute.part.0+0x18a>
 8010de8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010dea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010dec:	4628      	mov	r0, r5
 8010dee:	4798      	blx	r3
 8010df0:	6860      	ldr	r0, [r4, #4]
 8010df2:	682d      	ldr	r5, [r5, #0]
 8010df4:	2d00      	cmp	r5, #0
 8010df6:	d1f0      	bne.n	8010dda <_rclc_execute.part.0+0x172>
 8010df8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010dfc:	b193      	cbz	r3, 8010e24 <_rclc_execute.part.0+0x1bc>
 8010dfe:	68c5      	ldr	r5, [r0, #12]
 8010e00:	b185      	cbz	r5, 8010e24 <_rclc_execute.part.0+0x1bc>
 8010e02:	2600      	movs	r6, #0
 8010e04:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8010e08:	b14b      	cbz	r3, 8010e1e <_rclc_execute.part.0+0x1b6>
 8010e0a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010e0c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8010e10:	b12b      	cbz	r3, 8010e1e <_rclc_execute.part.0+0x1b6>
 8010e12:	4628      	mov	r0, r5
 8010e14:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8010e18:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010e1a:	4798      	blx	r3
 8010e1c:	6860      	ldr	r0, [r4, #4]
 8010e1e:	682d      	ldr	r5, [r5, #0]
 8010e20:	2d00      	cmp	r5, #0
 8010e22:	d1ef      	bne.n	8010e04 <_rclc_execute.part.0+0x19c>
 8010e24:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d081      	beq.n	8010d30 <_rclc_execute.part.0+0xc8>
 8010e2c:	2700      	movs	r7, #0
 8010e2e:	e00b      	b.n	8010e48 <_rclc_execute.part.0+0x1e0>
 8010e30:	6863      	ldr	r3, [r4, #4]
 8010e32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010e34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8010e36:	6a1e      	ldr	r6, [r3, #32]
 8010e38:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8010e3c:	47b0      	blx	r6
 8010e3e:	6860      	ldr	r0, [r4, #4]
 8010e40:	4629      	mov	r1, r5
 8010e42:	f006 fcf9 	bl	8017838 <rclc_action_remove_used_goal_handle>
 8010e46:	6860      	ldr	r0, [r4, #4]
 8010e48:	f006 fd7e 	bl	8017948 <rclc_action_find_first_handle_with_result_response>
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	d1ee      	bne.n	8010e30 <_rclc_execute.part.0+0x1c8>
 8010e52:	e76d      	b.n	8010d30 <_rclc_execute.part.0+0xc8>
 8010e54:	6860      	ldr	r0, [r4, #4]
 8010e56:	f880 5020 	strb.w	r5, [r0, #32]
 8010e5a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f43f af66 	beq.w	8010d30 <_rclc_execute.part.0+0xc8>
 8010e64:	68c5      	ldr	r5, [r0, #12]
 8010e66:	b1b5      	cbz	r5, 8010e96 <_rclc_execute.part.0+0x22e>
 8010e68:	2602      	movs	r6, #2
 8010e6a:	e001      	b.n	8010e70 <_rclc_execute.part.0+0x208>
 8010e6c:	682d      	ldr	r5, [r5, #0]
 8010e6e:	b195      	cbz	r5, 8010e96 <_rclc_execute.part.0+0x22e>
 8010e70:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8010e74:	2b03      	cmp	r3, #3
 8010e76:	d1f9      	bne.n	8010e6c <_rclc_execute.part.0+0x204>
 8010e78:	69c3      	ldr	r3, [r0, #28]
 8010e7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	4798      	blx	r3
 8010e80:	4603      	mov	r3, r0
 8010e82:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8010e86:	4628      	mov	r0, r5
 8010e88:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8010e8c:	b163      	cbz	r3, 8010ea8 <_rclc_execute.part.0+0x240>
 8010e8e:	f006 fd87 	bl	80179a0 <rclc_action_server_goal_cancel_accept>
 8010e92:	6860      	ldr	r0, [r4, #4]
 8010e94:	e7ea      	b.n	8010e6c <_rclc_execute.part.0+0x204>
 8010e96:	2300      	movs	r3, #0
 8010e98:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	e739      	b.n	8010d14 <_rclc_execute.part.0+0xac>
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	4798      	blx	r3
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	e735      	b.n	8010d14 <_rclc_execute.part.0+0xac>
 8010ea8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8010eaa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010eae:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8010eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010eb6:	6860      	ldr	r0, [r4, #4]
 8010eb8:	2101      	movs	r1, #1
 8010eba:	f006 fd9d 	bl	80179f8 <rclc_action_server_goal_cancel_reject>
 8010ebe:	722e      	strb	r6, [r5, #8]
 8010ec0:	6860      	ldr	r0, [r4, #4]
 8010ec2:	e7d3      	b.n	8010e6c <_rclc_execute.part.0+0x204>
 8010ec4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8010ec6:	6880      	ldr	r0, [r0, #8]
 8010ec8:	4798      	blx	r3
 8010eca:	f104 0110 	add.w	r1, r4, #16
 8010ece:	e6e7      	b.n	8010ca0 <_rclc_execute.part.0+0x38>
 8010ed0:	f100 0110 	add.w	r1, r0, #16
 8010ed4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010ed6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8010ed8:	6880      	ldr	r0, [r0, #8]
 8010eda:	9105      	str	r1, [sp, #20]
 8010edc:	4798      	blx	r3
 8010ede:	9905      	ldr	r1, [sp, #20]
 8010ee0:	e6de      	b.n	8010ca0 <_rclc_execute.part.0+0x38>
 8010ee2:	2001      	movs	r0, #1
 8010ee4:	e716      	b.n	8010d14 <_rclc_execute.part.0+0xac>
 8010ee6:	bf00      	nop

08010ee8 <rclc_executor_trigger_any>:
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d03f      	beq.n	8010f6c <rclc_executor_trigger_any+0x84>
 8010eec:	2900      	cmp	r1, #0
 8010eee:	d03e      	beq.n	8010f6e <rclc_executor_trigger_any+0x86>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d037      	beq.n	8010f6c <rclc_executor_trigger_any+0x84>
 8010efc:	b430      	push	{r4, r5}
 8010efe:	f893 c000 	ldrb.w	ip, [r3]
 8010f02:	f1bc 0f08 	cmp.w	ip, #8
 8010f06:	d11e      	bne.n	8010f46 <rclc_executor_trigger_any+0x5e>
 8010f08:	685c      	ldr	r4, [r3, #4]
 8010f0a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8010f0c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8010f10:	d105      	bne.n	8010f1e <rclc_executor_trigger_any+0x36>
 8010f12:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8010f16:	b910      	cbnz	r0, 8010f1e <rclc_executor_trigger_any+0x36>
 8010f18:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8010f1c:	b128      	cbz	r0, 8010f2a <rclc_executor_trigger_any+0x42>
 8010f1e:	bc30      	pop	{r4, r5}
 8010f20:	4770      	bx	lr
 8010f22:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d1f9      	bne.n	8010f1e <rclc_executor_trigger_any+0x36>
 8010f2a:	3201      	adds	r2, #1
 8010f2c:	4291      	cmp	r1, r2
 8010f2e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8010f32:	d018      	beq.n	8010f66 <rclc_executor_trigger_any+0x7e>
 8010f34:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d0f0      	beq.n	8010f1e <rclc_executor_trigger_any+0x36>
 8010f3c:	f893 c000 	ldrb.w	ip, [r3]
 8010f40:	f1bc 0f08 	cmp.w	ip, #8
 8010f44:	d0e0      	beq.n	8010f08 <rclc_executor_trigger_any+0x20>
 8010f46:	f1bc 0f09 	cmp.w	ip, #9
 8010f4a:	d1ea      	bne.n	8010f22 <rclc_executor_trigger_any+0x3a>
 8010f4c:	685c      	ldr	r4, [r3, #4]
 8010f4e:	6a25      	ldr	r5, [r4, #32]
 8010f50:	2d00      	cmp	r5, #0
 8010f52:	d1e4      	bne.n	8010f1e <rclc_executor_trigger_any+0x36>
 8010f54:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d1e0      	bne.n	8010f1e <rclc_executor_trigger_any+0x36>
 8010f5c:	3201      	adds	r2, #1
 8010f5e:	4291      	cmp	r1, r2
 8010f60:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8010f64:	d1e6      	bne.n	8010f34 <rclc_executor_trigger_any+0x4c>
 8010f66:	2000      	movs	r0, #0
 8010f68:	bc30      	pop	{r4, r5}
 8010f6a:	4770      	bx	lr
 8010f6c:	4770      	bx	lr
 8010f6e:	4608      	mov	r0, r1
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	0000      	movs	r0, r0
	...

08010f78 <rclc_executor_init>:
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	d05f      	beq.n	801103c <rclc_executor_init+0xc4>
 8010f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f80:	460c      	mov	r4, r1
 8010f82:	b0b0      	sub	sp, #192	@ 0xc0
 8010f84:	2900      	cmp	r1, #0
 8010f86:	d051      	beq.n	801102c <rclc_executor_init+0xb4>
 8010f88:	4605      	mov	r5, r0
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	4616      	mov	r6, r2
 8010f8e:	461f      	mov	r7, r3
 8010f90:	f000 fbea 	bl	8011768 <rcutils_allocator_is_valid>
 8010f94:	2800      	cmp	r0, #0
 8010f96:	d049      	beq.n	801102c <rclc_executor_init+0xb4>
 8010f98:	2e00      	cmp	r6, #0
 8010f9a:	d047      	beq.n	801102c <rclc_executor_init+0xb4>
 8010f9c:	492c      	ldr	r1, [pc, #176]	@ (8011050 <rclc_executor_init+0xd8>)
 8010f9e:	2288      	movs	r2, #136	@ 0x88
 8010fa0:	a80e      	add	r0, sp, #56	@ 0x38
 8010fa2:	f00b fab0 	bl	801c506 <memcpy>
 8010fa6:	a90e      	add	r1, sp, #56	@ 0x38
 8010fa8:	2288      	movs	r2, #136	@ 0x88
 8010faa:	4628      	mov	r0, r5
 8010fac:	f00b faab 	bl	801c506 <memcpy>
 8010fb0:	602c      	str	r4, [r5, #0]
 8010fb2:	4668      	mov	r0, sp
 8010fb4:	60ae      	str	r6, [r5, #8]
 8010fb6:	466c      	mov	r4, sp
 8010fb8:	f005 f9ea 	bl	8016390 <rcl_get_zero_initialized_wait_set>
 8010fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fbe:	f105 0c14 	add.w	ip, r5, #20
 8010fc2:	f8d7 8000 	ldr.w	r8, [r7]
 8010fc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010fd6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8011048 <rclc_executor_init+0xd0>
 8010fda:	6823      	ldr	r3, [r4, #0]
 8010fdc:	f8cc 3000 	str.w	r3, [ip]
 8010fe0:	6939      	ldr	r1, [r7, #16]
 8010fe2:	612f      	str	r7, [r5, #16]
 8010fe4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8010fe8:	01b0      	lsls	r0, r6, #6
 8010fea:	47c0      	blx	r8
 8010fec:	6068      	str	r0, [r5, #4]
 8010fee:	b338      	cbz	r0, 8011040 <rclc_executor_init+0xc8>
 8010ff0:	2400      	movs	r4, #0
 8010ff2:	e000      	b.n	8010ff6 <rclc_executor_init+0x7e>
 8010ff4:	6868      	ldr	r0, [r5, #4]
 8010ff6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8010ffa:	4631      	mov	r1, r6
 8010ffc:	3401      	adds	r4, #1
 8010ffe:	f000 fa6b 	bl	80114d8 <rclc_executor_handle_init>
 8011002:	42a6      	cmp	r6, r4
 8011004:	d1f6      	bne.n	8010ff4 <rclc_executor_init+0x7c>
 8011006:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 801100a:	f000 fa5b 	bl	80114c4 <rclc_executor_handle_counters_zero_init>
 801100e:	4a11      	ldr	r2, [pc, #68]	@ (8011054 <rclc_executor_init+0xdc>)
 8011010:	686b      	ldr	r3, [r5, #4]
 8011012:	2000      	movs	r0, #0
 8011014:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8011018:	b163      	cbz	r3, 8011034 <rclc_executor_init+0xbc>
 801101a:	692b      	ldr	r3, [r5, #16]
 801101c:	b153      	cbz	r3, 8011034 <rclc_executor_init+0xbc>
 801101e:	68ab      	ldr	r3, [r5, #8]
 8011020:	b143      	cbz	r3, 8011034 <rclc_executor_init+0xbc>
 8011022:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8011026:	b030      	add	sp, #192	@ 0xc0
 8011028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801102c:	200b      	movs	r0, #11
 801102e:	b030      	add	sp, #192	@ 0xc0
 8011030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011034:	4618      	mov	r0, r3
 8011036:	b030      	add	sp, #192	@ 0xc0
 8011038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801103c:	200b      	movs	r0, #11
 801103e:	4770      	bx	lr
 8011040:	200a      	movs	r0, #10
 8011042:	e7f4      	b.n	801102e <rclc_executor_init+0xb6>
 8011044:	f3af 8000 	nop.w
 8011048:	3b9aca00 	.word	0x3b9aca00
 801104c:	00000000 	.word	0x00000000
 8011050:	0801db78 	.word	0x0801db78
 8011054:	08010ee9 	.word	0x08010ee9

08011058 <rclc_executor_add_subscription>:
 8011058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801105a:	f89d e018 	ldrb.w	lr, [sp, #24]
 801105e:	b338      	cbz	r0, 80110b0 <rclc_executor_add_subscription+0x58>
 8011060:	b331      	cbz	r1, 80110b0 <rclc_executor_add_subscription+0x58>
 8011062:	b32a      	cbz	r2, 80110b0 <rclc_executor_add_subscription+0x58>
 8011064:	b323      	cbz	r3, 80110b0 <rclc_executor_add_subscription+0x58>
 8011066:	4604      	mov	r4, r0
 8011068:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 801106c:	42a8      	cmp	r0, r5
 801106e:	d301      	bcc.n	8011074 <rclc_executor_add_subscription+0x1c>
 8011070:	2001      	movs	r0, #1
 8011072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011074:	6866      	ldr	r6, [r4, #4]
 8011076:	0187      	lsls	r7, r0, #6
 8011078:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 801107c:	2500      	movs	r5, #0
 801107e:	55f5      	strb	r5, [r6, r7]
 8011080:	3001      	adds	r0, #1
 8011082:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8011086:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 801108a:	2301      	movs	r3, #1
 801108c:	f104 0514 	add.w	r5, r4, #20
 8011090:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8011094:	f88c e001 	strb.w	lr, [ip, #1]
 8011098:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 801109c:	60e0      	str	r0, [r4, #12]
 801109e:	4628      	mov	r0, r5
 80110a0:	f005 f98a 	bl	80163b8 <rcl_wait_set_is_valid>
 80110a4:	b930      	cbnz	r0, 80110b4 <rclc_executor_add_subscription+0x5c>
 80110a6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80110a8:	3301      	adds	r3, #1
 80110aa:	2000      	movs	r0, #0
 80110ac:	64a3      	str	r3, [r4, #72]	@ 0x48
 80110ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110b0:	200b      	movs	r0, #11
 80110b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110b4:	4628      	mov	r0, r5
 80110b6:	f005 f985 	bl	80163c4 <rcl_wait_set_fini>
 80110ba:	2800      	cmp	r0, #0
 80110bc:	d0f3      	beq.n	80110a6 <rclc_executor_add_subscription+0x4e>
 80110be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080110c0 <rclc_executor_prepare>:
 80110c0:	2800      	cmp	r0, #0
 80110c2:	d044      	beq.n	801114e <rclc_executor_prepare+0x8e>
 80110c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110c6:	f100 0514 	add.w	r5, r0, #20
 80110ca:	b09b      	sub	sp, #108	@ 0x6c
 80110cc:	4604      	mov	r4, r0
 80110ce:	4628      	mov	r0, r5
 80110d0:	f005 f972 	bl	80163b8 <rcl_wait_set_is_valid>
 80110d4:	b110      	cbz	r0, 80110dc <rclc_executor_prepare+0x1c>
 80110d6:	2000      	movs	r0, #0
 80110d8:	b01b      	add	sp, #108	@ 0x6c
 80110da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110dc:	4628      	mov	r0, r5
 80110de:	f005 f971 	bl	80163c4 <rcl_wait_set_fini>
 80110e2:	2800      	cmp	r0, #0
 80110e4:	d130      	bne.n	8011148 <rclc_executor_prepare+0x88>
 80110e6:	a80c      	add	r0, sp, #48	@ 0x30
 80110e8:	f005 f952 	bl	8016390 <rcl_get_zero_initialized_wait_set>
 80110ec:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80110f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80110f4:	46ae      	mov	lr, r5
 80110f6:	6927      	ldr	r7, [r4, #16]
 80110f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80110fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011100:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011104:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011108:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801110c:	f8dc 3000 	ldr.w	r3, [ip]
 8011110:	f8ce 3000 	str.w	r3, [lr]
 8011114:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011116:	ae04      	add	r6, sp, #16
 8011118:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	6822      	ldr	r2, [r4, #0]
 801111e:	6033      	str	r3, [r6, #0]
 8011120:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011122:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8011124:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011128:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 801112c:	e9cd 2100 	strd	r2, r1, [sp]
 8011130:	4628      	mov	r0, r5
 8011132:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8011134:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011136:	f005 fc43 	bl	80169c0 <rcl_wait_set_init>
 801113a:	2800      	cmp	r0, #0
 801113c:	d0cc      	beq.n	80110d8 <rclc_executor_prepare+0x18>
 801113e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011140:	f000 fb36 	bl	80117b0 <rcutils_reset_error>
 8011144:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011146:	e7c7      	b.n	80110d8 <rclc_executor_prepare+0x18>
 8011148:	f000 fb32 	bl	80117b0 <rcutils_reset_error>
 801114c:	e7cb      	b.n	80110e6 <rclc_executor_prepare+0x26>
 801114e:	200b      	movs	r0, #11
 8011150:	4770      	bx	lr
 8011152:	bf00      	nop

08011154 <rclc_executor_spin_some.part.0>:
 8011154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011158:	f100 0614 	add.w	r6, r0, #20
 801115c:	b083      	sub	sp, #12
 801115e:	4691      	mov	r9, r2
 8011160:	4698      	mov	r8, r3
 8011162:	4605      	mov	r5, r0
 8011164:	f7ff ffac 	bl	80110c0 <rclc_executor_prepare>
 8011168:	4630      	mov	r0, r6
 801116a:	f005 f9f7 	bl	801655c <rcl_wait_set_clear>
 801116e:	4607      	mov	r7, r0
 8011170:	2800      	cmp	r0, #0
 8011172:	f040 80ed 	bne.w	8011350 <rclc_executor_spin_some.part.0+0x1fc>
 8011176:	68ab      	ldr	r3, [r5, #8]
 8011178:	4604      	mov	r4, r0
 801117a:	b303      	cbz	r3, 80111be <rclc_executor_spin_some.part.0+0x6a>
 801117c:	6869      	ldr	r1, [r5, #4]
 801117e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8011182:	01a2      	lsls	r2, r4, #6
 8011184:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8011188:	b1cb      	cbz	r3, 80111be <rclc_executor_spin_some.part.0+0x6a>
 801118a:	5c8b      	ldrb	r3, [r1, r2]
 801118c:	2b0a      	cmp	r3, #10
 801118e:	f200 80d8 	bhi.w	8011342 <rclc_executor_spin_some.part.0+0x1ee>
 8011192:	e8df f003 	tbb	[pc, r3]
 8011196:	9c9c      	.short	0x9c9c
 8011198:	068c8ca7 	.word	0x068c8ca7
 801119c:	bdc90606 	.word	0xbdc90606
 80111a0:	b2          	.byte	0xb2
 80111a1:	00          	.byte	0x00
 80111a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80111a6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80111aa:	4630      	mov	r0, r6
 80111ac:	f005 fd1e 	bl	8016bec <rcl_wait_set_add_service>
 80111b0:	2800      	cmp	r0, #0
 80111b2:	f040 8086 	bne.w	80112c2 <rclc_executor_spin_some.part.0+0x16e>
 80111b6:	68ab      	ldr	r3, [r5, #8]
 80111b8:	3401      	adds	r4, #1
 80111ba:	429c      	cmp	r4, r3
 80111bc:	d3de      	bcc.n	801117c <rclc_executor_spin_some.part.0+0x28>
 80111be:	4643      	mov	r3, r8
 80111c0:	464a      	mov	r2, r9
 80111c2:	4630      	mov	r0, r6
 80111c4:	f005 fd40 	bl	8016c48 <rcl_wait>
 80111c8:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	f000 80c7 	beq.w	8011360 <rclc_executor_spin_some.part.0+0x20c>
 80111d2:	2b01      	cmp	r3, #1
 80111d4:	f040 80b5 	bne.w	8011342 <rclc_executor_spin_some.part.0+0x1ee>
 80111d8:	68ab      	ldr	r3, [r5, #8]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f000 8159 	beq.w	8011492 <rclc_executor_spin_some.part.0+0x33e>
 80111e0:	2400      	movs	r4, #0
 80111e2:	46a0      	mov	r8, r4
 80111e4:	f240 1991 	movw	r9, #401	@ 0x191
 80111e8:	e00a      	b.n	8011200 <rclc_executor_spin_some.part.0+0xac>
 80111ea:	f7ff fb7b 	bl	80108e4 <_rclc_check_for_new_data>
 80111ee:	4604      	mov	r4, r0
 80111f0:	b110      	cbz	r0, 80111f8 <rclc_executor_spin_some.part.0+0xa4>
 80111f2:	4548      	cmp	r0, r9
 80111f4:	f040 80b2 	bne.w	801135c <rclc_executor_spin_some.part.0+0x208>
 80111f8:	68ab      	ldr	r3, [r5, #8]
 80111fa:	4598      	cmp	r8, r3
 80111fc:	f080 8126 	bcs.w	801144c <rclc_executor_spin_some.part.0+0x2f8>
 8011200:	686a      	ldr	r2, [r5, #4]
 8011202:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8011206:	4631      	mov	r1, r6
 8011208:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 801120c:	f108 0801 	add.w	r8, r8, #1
 8011210:	f1bc 0f00 	cmp.w	ip, #0
 8011214:	d1e9      	bne.n	80111ea <rclc_executor_spin_some.part.0+0x96>
 8011216:	4619      	mov	r1, r3
 8011218:	4610      	mov	r0, r2
 801121a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 801121e:	4798      	blx	r3
 8011220:	2800      	cmp	r0, #0
 8011222:	f000 809b 	beq.w	801135c <rclc_executor_spin_some.part.0+0x208>
 8011226:	68ab      	ldr	r3, [r5, #8]
 8011228:	2b00      	cmp	r3, #0
 801122a:	f000 8097 	beq.w	801135c <rclc_executor_spin_some.part.0+0x208>
 801122e:	f04f 0800 	mov.w	r8, #0
 8011232:	f240 1991 	movw	r9, #401	@ 0x191
 8011236:	e009      	b.n	801124c <rclc_executor_spin_some.part.0+0xf8>
 8011238:	f7ff fba2 	bl	8010980 <_rclc_take_new_data>
 801123c:	4604      	mov	r4, r0
 801123e:	b110      	cbz	r0, 8011246 <rclc_executor_spin_some.part.0+0xf2>
 8011240:	4548      	cmp	r0, r9
 8011242:	f040 808b 	bne.w	801135c <rclc_executor_spin_some.part.0+0x208>
 8011246:	68ab      	ldr	r3, [r5, #8]
 8011248:	4598      	cmp	r8, r3
 801124a:	d209      	bcs.n	8011260 <rclc_executor_spin_some.part.0+0x10c>
 801124c:	6868      	ldr	r0, [r5, #4]
 801124e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8011252:	4631      	mov	r1, r6
 8011254:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8011258:	f108 0801 	add.w	r8, r8, #1
 801125c:	2a00      	cmp	r2, #0
 801125e:	d1eb      	bne.n	8011238 <rclc_executor_spin_some.part.0+0xe4>
 8011260:	2600      	movs	r6, #0
 8011262:	b97b      	cbnz	r3, 8011284 <rclc_executor_spin_some.part.0+0x130>
 8011264:	e07a      	b.n	801135c <rclc_executor_spin_some.part.0+0x208>
 8011266:	f812 200c 	ldrb.w	r2, [r2, ip]
 801126a:	2a08      	cmp	r2, #8
 801126c:	f000 80fd 	beq.w	801146a <rclc_executor_spin_some.part.0+0x316>
 8011270:	2a09      	cmp	r2, #9
 8011272:	f000 80ef 	beq.w	8011454 <rclc_executor_spin_some.part.0+0x300>
 8011276:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 801127a:	b98a      	cbnz	r2, 80112a0 <rclc_executor_spin_some.part.0+0x14c>
 801127c:	3601      	adds	r6, #1
 801127e:	429e      	cmp	r6, r3
 8011280:	d262      	bcs.n	8011348 <rclc_executor_spin_some.part.0+0x1f4>
 8011282:	2400      	movs	r4, #0
 8011284:	686a      	ldr	r2, [r5, #4]
 8011286:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801128a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 801128e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8011292:	2900      	cmp	r1, #0
 8011294:	d062      	beq.n	801135c <rclc_executor_spin_some.part.0+0x208>
 8011296:	7841      	ldrb	r1, [r0, #1]
 8011298:	2900      	cmp	r1, #0
 801129a:	d0e4      	beq.n	8011266 <rclc_executor_spin_some.part.0+0x112>
 801129c:	2901      	cmp	r1, #1
 801129e:	d1ed      	bne.n	801127c <rclc_executor_spin_some.part.0+0x128>
 80112a0:	f7ff fce2 	bl	8010c68 <_rclc_execute.part.0>
 80112a4:	2800      	cmp	r0, #0
 80112a6:	f040 80b6 	bne.w	8011416 <rclc_executor_spin_some.part.0+0x2c2>
 80112aa:	68ab      	ldr	r3, [r5, #8]
 80112ac:	e7e6      	b.n	801127c <rclc_executor_spin_some.part.0+0x128>
 80112ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80112b2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80112b6:	4630      	mov	r0, r6
 80112b8:	f005 fc6c 	bl	8016b94 <rcl_wait_set_add_client>
 80112bc:	2800      	cmp	r0, #0
 80112be:	f43f af7a 	beq.w	80111b6 <rclc_executor_spin_some.part.0+0x62>
 80112c2:	9001      	str	r0, [sp, #4]
 80112c4:	f000 fa74 	bl	80117b0 <rcutils_reset_error>
 80112c8:	9801      	ldr	r0, [sp, #4]
 80112ca:	4607      	mov	r7, r0
 80112cc:	e03c      	b.n	8011348 <rclc_executor_spin_some.part.0+0x1f4>
 80112ce:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80112d2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80112d6:	4630      	mov	r0, r6
 80112d8:	f005 f914 	bl	8016504 <rcl_wait_set_add_subscription>
 80112dc:	2800      	cmp	r0, #0
 80112de:	f43f af6a 	beq.w	80111b6 <rclc_executor_spin_some.part.0+0x62>
 80112e2:	e7ee      	b.n	80112c2 <rclc_executor_spin_some.part.0+0x16e>
 80112e4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80112e8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80112ec:	4630      	mov	r0, r6
 80112ee:	f005 fc21 	bl	8016b34 <rcl_wait_set_add_timer>
 80112f2:	2800      	cmp	r0, #0
 80112f4:	f43f af5f 	beq.w	80111b6 <rclc_executor_spin_some.part.0+0x62>
 80112f8:	e7e3      	b.n	80112c2 <rclc_executor_spin_some.part.0+0x16e>
 80112fa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80112fe:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011302:	4630      	mov	r0, r6
 8011304:	f005 fbea 	bl	8016adc <rcl_wait_set_add_guard_condition>
 8011308:	2800      	cmp	r0, #0
 801130a:	f43f af54 	beq.w	80111b6 <rclc_executor_spin_some.part.0+0x62>
 801130e:	e7d8      	b.n	80112c2 <rclc_executor_spin_some.part.0+0x16e>
 8011310:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8011314:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011318:	3110      	adds	r1, #16
 801131a:	4630      	mov	r0, r6
 801131c:	f006 f96c 	bl	80175f8 <rcl_action_wait_set_add_action_server>
 8011320:	2800      	cmp	r0, #0
 8011322:	f43f af48 	beq.w	80111b6 <rclc_executor_spin_some.part.0+0x62>
 8011326:	e7cc      	b.n	80112c2 <rclc_executor_spin_some.part.0+0x16e>
 8011328:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801132c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8011330:	3110      	adds	r1, #16
 8011332:	2300      	movs	r3, #0
 8011334:	4630      	mov	r0, r6
 8011336:	f005 ff37 	bl	80171a8 <rcl_action_wait_set_add_action_client>
 801133a:	2800      	cmp	r0, #0
 801133c:	f43f af3b 	beq.w	80111b6 <rclc_executor_spin_some.part.0+0x62>
 8011340:	e7bf      	b.n	80112c2 <rclc_executor_spin_some.part.0+0x16e>
 8011342:	f000 fa35 	bl	80117b0 <rcutils_reset_error>
 8011346:	2701      	movs	r7, #1
 8011348:	4638      	mov	r0, r7
 801134a:	b003      	add	sp, #12
 801134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011350:	f000 fa2e 	bl	80117b0 <rcutils_reset_error>
 8011354:	4638      	mov	r0, r7
 8011356:	b003      	add	sp, #12
 8011358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801135c:	4627      	mov	r7, r4
 801135e:	e7f3      	b.n	8011348 <rclc_executor_spin_some.part.0+0x1f4>
 8011360:	68ab      	ldr	r3, [r5, #8]
 8011362:	2b00      	cmp	r3, #0
 8011364:	f000 8092 	beq.w	801148c <rclc_executor_spin_some.part.0+0x338>
 8011368:	2400      	movs	r4, #0
 801136a:	46a0      	mov	r8, r4
 801136c:	f240 1991 	movw	r9, #401	@ 0x191
 8011370:	e008      	b.n	8011384 <rclc_executor_spin_some.part.0+0x230>
 8011372:	f7ff fab7 	bl	80108e4 <_rclc_check_for_new_data>
 8011376:	4604      	mov	r4, r0
 8011378:	b108      	cbz	r0, 801137e <rclc_executor_spin_some.part.0+0x22a>
 801137a:	4548      	cmp	r0, r9
 801137c:	d1ee      	bne.n	801135c <rclc_executor_spin_some.part.0+0x208>
 801137e:	68ab      	ldr	r3, [r5, #8]
 8011380:	4598      	cmp	r8, r3
 8011382:	d265      	bcs.n	8011450 <rclc_executor_spin_some.part.0+0x2fc>
 8011384:	686a      	ldr	r2, [r5, #4]
 8011386:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801138a:	4631      	mov	r1, r6
 801138c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8011390:	f108 0801 	add.w	r8, r8, #1
 8011394:	f1bc 0f00 	cmp.w	ip, #0
 8011398:	d1eb      	bne.n	8011372 <rclc_executor_spin_some.part.0+0x21e>
 801139a:	4619      	mov	r1, r3
 801139c:	4610      	mov	r0, r2
 801139e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80113a2:	4798      	blx	r3
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d0d9      	beq.n	801135c <rclc_executor_spin_some.part.0+0x208>
 80113a8:	68ab      	ldr	r3, [r5, #8]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0d6      	beq.n	801135c <rclc_executor_spin_some.part.0+0x208>
 80113ae:	f04f 0800 	mov.w	r8, #0
 80113b2:	f240 1991 	movw	r9, #401	@ 0x191
 80113b6:	f240 2a59 	movw	sl, #601	@ 0x259
 80113ba:	e00e      	b.n	80113da <rclc_executor_spin_some.part.0+0x286>
 80113bc:	f813 300b 	ldrb.w	r3, [r3, fp]
 80113c0:	2b08      	cmp	r3, #8
 80113c2:	d033      	beq.n	801142c <rclc_executor_spin_some.part.0+0x2d8>
 80113c4:	2b09      	cmp	r3, #9
 80113c6:	d028      	beq.n	801141a <rclc_executor_spin_some.part.0+0x2c6>
 80113c8:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 80113cc:	b9fb      	cbnz	r3, 801140e <rclc_executor_spin_some.part.0+0x2ba>
 80113ce:	68ab      	ldr	r3, [r5, #8]
 80113d0:	f108 0801 	add.w	r8, r8, #1
 80113d4:	4598      	cmp	r8, r3
 80113d6:	d2b7      	bcs.n	8011348 <rclc_executor_spin_some.part.0+0x1f4>
 80113d8:	2400      	movs	r4, #0
 80113da:	6868      	ldr	r0, [r5, #4]
 80113dc:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80113e0:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80113e4:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d0b7      	beq.n	801135c <rclc_executor_spin_some.part.0+0x208>
 80113ec:	4631      	mov	r1, r6
 80113ee:	f7ff fac7 	bl	8010980 <_rclc_take_new_data>
 80113f2:	b118      	cbz	r0, 80113fc <rclc_executor_spin_some.part.0+0x2a8>
 80113f4:	4548      	cmp	r0, r9
 80113f6:	d001      	beq.n	80113fc <rclc_executor_spin_some.part.0+0x2a8>
 80113f8:	4550      	cmp	r0, sl
 80113fa:	d10c      	bne.n	8011416 <rclc_executor_spin_some.part.0+0x2c2>
 80113fc:	686b      	ldr	r3, [r5, #4]
 80113fe:	eb13 000b 	adds.w	r0, r3, fp
 8011402:	d021      	beq.n	8011448 <rclc_executor_spin_some.part.0+0x2f4>
 8011404:	7842      	ldrb	r2, [r0, #1]
 8011406:	2a00      	cmp	r2, #0
 8011408:	d0d8      	beq.n	80113bc <rclc_executor_spin_some.part.0+0x268>
 801140a:	2a01      	cmp	r2, #1
 801140c:	d1df      	bne.n	80113ce <rclc_executor_spin_some.part.0+0x27a>
 801140e:	f7ff fc2b 	bl	8010c68 <_rclc_execute.part.0>
 8011412:	2800      	cmp	r0, #0
 8011414:	d0db      	beq.n	80113ce <rclc_executor_spin_some.part.0+0x27a>
 8011416:	4607      	mov	r7, r0
 8011418:	e796      	b.n	8011348 <rclc_executor_spin_some.part.0+0x1f4>
 801141a:	6843      	ldr	r3, [r0, #4]
 801141c:	6a1a      	ldr	r2, [r3, #32]
 801141e:	2a00      	cmp	r2, #0
 8011420:	d1f5      	bne.n	801140e <rclc_executor_spin_some.part.0+0x2ba>
 8011422:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8011426:	2b00      	cmp	r3, #0
 8011428:	d0d1      	beq.n	80113ce <rclc_executor_spin_some.part.0+0x27a>
 801142a:	e7f0      	b.n	801140e <rclc_executor_spin_some.part.0+0x2ba>
 801142c:	6843      	ldr	r3, [r0, #4]
 801142e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011430:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8011434:	d1eb      	bne.n	801140e <rclc_executor_spin_some.part.0+0x2ba>
 8011436:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801143a:	2a00      	cmp	r2, #0
 801143c:	d1e7      	bne.n	801140e <rclc_executor_spin_some.part.0+0x2ba>
 801143e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011442:	2b00      	cmp	r3, #0
 8011444:	d0c3      	beq.n	80113ce <rclc_executor_spin_some.part.0+0x27a>
 8011446:	e7e2      	b.n	801140e <rclc_executor_spin_some.part.0+0x2ba>
 8011448:	270b      	movs	r7, #11
 801144a:	e77d      	b.n	8011348 <rclc_executor_spin_some.part.0+0x1f4>
 801144c:	686a      	ldr	r2, [r5, #4]
 801144e:	e6e2      	b.n	8011216 <rclc_executor_spin_some.part.0+0xc2>
 8011450:	686a      	ldr	r2, [r5, #4]
 8011452:	e7a2      	b.n	801139a <rclc_executor_spin_some.part.0+0x246>
 8011454:	6842      	ldr	r2, [r0, #4]
 8011456:	6a11      	ldr	r1, [r2, #32]
 8011458:	2900      	cmp	r1, #0
 801145a:	f47f af21 	bne.w	80112a0 <rclc_executor_spin_some.part.0+0x14c>
 801145e:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8011462:	2a00      	cmp	r2, #0
 8011464:	f43f af0a 	beq.w	801127c <rclc_executor_spin_some.part.0+0x128>
 8011468:	e71a      	b.n	80112a0 <rclc_executor_spin_some.part.0+0x14c>
 801146a:	6842      	ldr	r2, [r0, #4]
 801146c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801146e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8011472:	f47f af15 	bne.w	80112a0 <rclc_executor_spin_some.part.0+0x14c>
 8011476:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 801147a:	2900      	cmp	r1, #0
 801147c:	f47f af10 	bne.w	80112a0 <rclc_executor_spin_some.part.0+0x14c>
 8011480:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8011484:	2a00      	cmp	r2, #0
 8011486:	f43f aef9 	beq.w	801127c <rclc_executor_spin_some.part.0+0x128>
 801148a:	e709      	b.n	80112a0 <rclc_executor_spin_some.part.0+0x14c>
 801148c:	686a      	ldr	r2, [r5, #4]
 801148e:	461c      	mov	r4, r3
 8011490:	e783      	b.n	801139a <rclc_executor_spin_some.part.0+0x246>
 8011492:	686a      	ldr	r2, [r5, #4]
 8011494:	461c      	mov	r4, r3
 8011496:	e6be      	b.n	8011216 <rclc_executor_spin_some.part.0+0xc2>

08011498 <rclc_executor_spin_some>:
 8011498:	b190      	cbz	r0, 80114c0 <rclc_executor_spin_some+0x28>
 801149a:	b570      	push	{r4, r5, r6, lr}
 801149c:	4604      	mov	r4, r0
 801149e:	6800      	ldr	r0, [r0, #0]
 80114a0:	4616      	mov	r6, r2
 80114a2:	461d      	mov	r5, r3
 80114a4:	f003 ff64 	bl	8015370 <rcl_context_is_valid>
 80114a8:	b130      	cbz	r0, 80114b8 <rclc_executor_spin_some+0x20>
 80114aa:	4632      	mov	r2, r6
 80114ac:	462b      	mov	r3, r5
 80114ae:	4620      	mov	r0, r4
 80114b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114b4:	f7ff be4e 	b.w	8011154 <rclc_executor_spin_some.part.0>
 80114b8:	f000 f97a 	bl	80117b0 <rcutils_reset_error>
 80114bc:	2001      	movs	r0, #1
 80114be:	bd70      	pop	{r4, r5, r6, pc}
 80114c0:	200b      	movs	r0, #11
 80114c2:	4770      	bx	lr

080114c4 <rclc_executor_handle_counters_zero_init>:
 80114c4:	b130      	cbz	r0, 80114d4 <rclc_executor_handle_counters_zero_init+0x10>
 80114c6:	b508      	push	{r3, lr}
 80114c8:	2220      	movs	r2, #32
 80114ca:	2100      	movs	r1, #0
 80114cc:	f00a ff52 	bl	801c374 <memset>
 80114d0:	2000      	movs	r0, #0
 80114d2:	bd08      	pop	{r3, pc}
 80114d4:	200b      	movs	r0, #11
 80114d6:	4770      	bx	lr

080114d8 <rclc_executor_handle_init>:
 80114d8:	b168      	cbz	r0, 80114f6 <rclc_executor_handle_init+0x1e>
 80114da:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8011500 <rclc_executor_handle_init+0x28>
 80114de:	2300      	movs	r3, #0
 80114e0:	220b      	movs	r2, #11
 80114e2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 80114e6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80114ea:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 80114ee:	8002      	strh	r2, [r0, #0]
 80114f0:	8703      	strh	r3, [r0, #56]	@ 0x38
 80114f2:	4618      	mov	r0, r3
 80114f4:	4770      	bx	lr
 80114f6:	200b      	movs	r0, #11
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop
 80114fc:	f3af 8000 	nop.w
	...

08011508 <rclc_support_init>:
 8011508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801150c:	b086      	sub	sp, #24
 801150e:	b3b8      	cbz	r0, 8011580 <rclc_support_init+0x78>
 8011510:	461c      	mov	r4, r3
 8011512:	b3ab      	cbz	r3, 8011580 <rclc_support_init+0x78>
 8011514:	460f      	mov	r7, r1
 8011516:	4690      	mov	r8, r2
 8011518:	4606      	mov	r6, r0
 801151a:	f004 f87d 	bl	8015618 <rcl_get_zero_initialized_init_options>
 801151e:	f104 030c 	add.w	r3, r4, #12
 8011522:	9005      	str	r0, [sp, #20]
 8011524:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011528:	e88d 0003 	stmia.w	sp, {r0, r1}
 801152c:	a805      	add	r0, sp, #20
 801152e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011532:	f004 f873 	bl	801561c <rcl_init_options_init>
 8011536:	4605      	mov	r5, r0
 8011538:	b9e0      	cbnz	r0, 8011574 <rclc_support_init+0x6c>
 801153a:	ad02      	add	r5, sp, #8
 801153c:	4628      	mov	r0, r5
 801153e:	f003 ff0d 	bl	801535c <rcl_get_zero_initialized_context>
 8011542:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011546:	4633      	mov	r3, r6
 8011548:	e886 0003 	stmia.w	r6, {r0, r1}
 801154c:	aa05      	add	r2, sp, #20
 801154e:	4641      	mov	r1, r8
 8011550:	4638      	mov	r0, r7
 8011552:	f003 ff73 	bl	801543c <rcl_init>
 8011556:	4605      	mov	r5, r0
 8011558:	b9b8      	cbnz	r0, 801158a <rclc_support_init+0x82>
 801155a:	60b4      	str	r4, [r6, #8]
 801155c:	4622      	mov	r2, r4
 801155e:	f106 010c 	add.w	r1, r6, #12
 8011562:	2003      	movs	r0, #3
 8011564:	f004 fd88 	bl	8016078 <rcl_clock_init>
 8011568:	4605      	mov	r5, r0
 801156a:	b970      	cbnz	r0, 801158a <rclc_support_init+0x82>
 801156c:	a805      	add	r0, sp, #20
 801156e:	f004 f8bb 	bl	80156e8 <rcl_init_options_fini>
 8011572:	b108      	cbz	r0, 8011578 <rclc_support_init+0x70>
 8011574:	f000 f91c 	bl	80117b0 <rcutils_reset_error>
 8011578:	4628      	mov	r0, r5
 801157a:	b006      	add	sp, #24
 801157c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011580:	250b      	movs	r5, #11
 8011582:	4628      	mov	r0, r5
 8011584:	b006      	add	sp, #24
 8011586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801158a:	f000 f911 	bl	80117b0 <rcutils_reset_error>
 801158e:	a805      	add	r0, sp, #20
 8011590:	f004 f8aa 	bl	80156e8 <rcl_init_options_fini>
 8011594:	2800      	cmp	r0, #0
 8011596:	d0ef      	beq.n	8011578 <rclc_support_init+0x70>
 8011598:	e7ec      	b.n	8011574 <rclc_support_init+0x6c>
 801159a:	bf00      	nop

0801159c <rclc_node_init_default>:
 801159c:	b3b8      	cbz	r0, 801160e <rclc_node_init_default+0x72>
 801159e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115a2:	460d      	mov	r5, r1
 80115a4:	b0a1      	sub	sp, #132	@ 0x84
 80115a6:	b329      	cbz	r1, 80115f4 <rclc_node_init_default+0x58>
 80115a8:	4616      	mov	r6, r2
 80115aa:	b31a      	cbz	r2, 80115f4 <rclc_node_init_default+0x58>
 80115ac:	461f      	mov	r7, r3
 80115ae:	b30b      	cbz	r3, 80115f4 <rclc_node_init_default+0x58>
 80115b0:	f10d 0810 	add.w	r8, sp, #16
 80115b4:	4604      	mov	r4, r0
 80115b6:	4640      	mov	r0, r8
 80115b8:	f004 f94e 	bl	8015858 <rcl_get_zero_initialized_node>
 80115bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80115c0:	f10d 0918 	add.w	r9, sp, #24
 80115c4:	e884 0003 	stmia.w	r4, {r0, r1}
 80115c8:	4648      	mov	r0, r9
 80115ca:	f004 fabd 	bl	8015b48 <rcl_node_get_default_options>
 80115ce:	4640      	mov	r0, r8
 80115d0:	f004 f942 	bl	8015858 <rcl_get_zero_initialized_node>
 80115d4:	f8cd 9000 	str.w	r9, [sp]
 80115d8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80115dc:	463b      	mov	r3, r7
 80115de:	e884 0003 	stmia.w	r4, {r0, r1}
 80115e2:	4632      	mov	r2, r6
 80115e4:	4629      	mov	r1, r5
 80115e6:	4620      	mov	r0, r4
 80115e8:	f004 f940 	bl	801586c <rcl_node_init>
 80115ec:	b930      	cbnz	r0, 80115fc <rclc_node_init_default+0x60>
 80115ee:	b021      	add	sp, #132	@ 0x84
 80115f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115f4:	200b      	movs	r0, #11
 80115f6:	b021      	add	sp, #132	@ 0x84
 80115f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115fc:	9003      	str	r0, [sp, #12]
 80115fe:	f000 f8d7 	bl	80117b0 <rcutils_reset_error>
 8011602:	f000 f8d5 	bl	80117b0 <rcutils_reset_error>
 8011606:	9803      	ldr	r0, [sp, #12]
 8011608:	b021      	add	sp, #132	@ 0x84
 801160a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801160e:	200b      	movs	r0, #11
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop

08011614 <rclc_publisher_init_default>:
 8011614:	b368      	cbz	r0, 8011672 <rclc_publisher_init_default+0x5e>
 8011616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801161a:	460d      	mov	r5, r1
 801161c:	b0a0      	sub	sp, #128	@ 0x80
 801161e:	b321      	cbz	r1, 801166a <rclc_publisher_init_default+0x56>
 8011620:	4616      	mov	r6, r2
 8011622:	b312      	cbz	r2, 801166a <rclc_publisher_init_default+0x56>
 8011624:	461f      	mov	r7, r3
 8011626:	b303      	cbz	r3, 801166a <rclc_publisher_init_default+0x56>
 8011628:	4604      	mov	r4, r0
 801162a:	f7ff f84b 	bl	80106c4 <rcl_get_zero_initialized_publisher>
 801162e:	f10d 0810 	add.w	r8, sp, #16
 8011632:	6020      	str	r0, [r4, #0]
 8011634:	4640      	mov	r0, r8
 8011636:	f7ff f8e1 	bl	80107fc <rcl_publisher_get_default_options>
 801163a:	490f      	ldr	r1, [pc, #60]	@ (8011678 <rclc_publisher_init_default+0x64>)
 801163c:	2250      	movs	r2, #80	@ 0x50
 801163e:	4640      	mov	r0, r8
 8011640:	f00a ff61 	bl	801c506 <memcpy>
 8011644:	f8cd 8000 	str.w	r8, [sp]
 8011648:	463b      	mov	r3, r7
 801164a:	4632      	mov	r2, r6
 801164c:	4629      	mov	r1, r5
 801164e:	4620      	mov	r0, r4
 8011650:	f7ff f83e 	bl	80106d0 <rcl_publisher_init>
 8011654:	b910      	cbnz	r0, 801165c <rclc_publisher_init_default+0x48>
 8011656:	b020      	add	sp, #128	@ 0x80
 8011658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801165c:	9003      	str	r0, [sp, #12]
 801165e:	f000 f8a7 	bl	80117b0 <rcutils_reset_error>
 8011662:	9803      	ldr	r0, [sp, #12]
 8011664:	b020      	add	sp, #128	@ 0x80
 8011666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801166a:	200b      	movs	r0, #11
 801166c:	b020      	add	sp, #128	@ 0x80
 801166e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011672:	200b      	movs	r0, #11
 8011674:	4770      	bx	lr
 8011676:	bf00      	nop
 8011678:	0801dc00 	.word	0x0801dc00

0801167c <rclc_subscription_init_default>:
 801167c:	b368      	cbz	r0, 80116da <rclc_subscription_init_default+0x5e>
 801167e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011682:	460d      	mov	r5, r1
 8011684:	b0a0      	sub	sp, #128	@ 0x80
 8011686:	b321      	cbz	r1, 80116d2 <rclc_subscription_init_default+0x56>
 8011688:	4616      	mov	r6, r2
 801168a:	b312      	cbz	r2, 80116d2 <rclc_subscription_init_default+0x56>
 801168c:	461f      	mov	r7, r3
 801168e:	b303      	cbz	r3, 80116d2 <rclc_subscription_init_default+0x56>
 8011690:	4604      	mov	r4, r0
 8011692:	f004 fb95 	bl	8015dc0 <rcl_get_zero_initialized_subscription>
 8011696:	f10d 0810 	add.w	r8, sp, #16
 801169a:	6020      	str	r0, [r4, #0]
 801169c:	4640      	mov	r0, r8
 801169e:	f004 fc3d 	bl	8015f1c <rcl_subscription_get_default_options>
 80116a2:	490f      	ldr	r1, [pc, #60]	@ (80116e0 <rclc_subscription_init_default+0x64>)
 80116a4:	2250      	movs	r2, #80	@ 0x50
 80116a6:	4640      	mov	r0, r8
 80116a8:	f00a ff2d 	bl	801c506 <memcpy>
 80116ac:	f8cd 8000 	str.w	r8, [sp]
 80116b0:	463b      	mov	r3, r7
 80116b2:	4632      	mov	r2, r6
 80116b4:	4629      	mov	r1, r5
 80116b6:	4620      	mov	r0, r4
 80116b8:	f004 fb88 	bl	8015dcc <rcl_subscription_init>
 80116bc:	b910      	cbnz	r0, 80116c4 <rclc_subscription_init_default+0x48>
 80116be:	b020      	add	sp, #128	@ 0x80
 80116c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116c4:	9003      	str	r0, [sp, #12]
 80116c6:	f000 f873 	bl	80117b0 <rcutils_reset_error>
 80116ca:	9803      	ldr	r0, [sp, #12]
 80116cc:	b020      	add	sp, #128	@ 0x80
 80116ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d2:	200b      	movs	r0, #11
 80116d4:	b020      	add	sp, #128	@ 0x80
 80116d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116da:	200b      	movs	r0, #11
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop
 80116e0:	0801dc50 	.word	0x0801dc50

080116e4 <__default_zero_allocate>:
 80116e4:	f00a ba56 	b.w	801bb94 <calloc>

080116e8 <__default_reallocate>:
 80116e8:	f00a bbe2 	b.w	801beb0 <realloc>

080116ec <__default_deallocate>:
 80116ec:	f00a babe 	b.w	801bc6c <free>

080116f0 <__default_allocate>:
 80116f0:	f00a bab4 	b.w	801bc5c <malloc>

080116f4 <rcutils_get_zero_initialized_allocator>:
 80116f4:	b510      	push	{r4, lr}
 80116f6:	4c05      	ldr	r4, [pc, #20]	@ (801170c <rcutils_get_zero_initialized_allocator+0x18>)
 80116f8:	4686      	mov	lr, r0
 80116fa:	4684      	mov	ip, r0
 80116fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011702:	6823      	ldr	r3, [r4, #0]
 8011704:	f8cc 3000 	str.w	r3, [ip]
 8011708:	4670      	mov	r0, lr
 801170a:	bd10      	pop	{r4, pc}
 801170c:	0801dca0 	.word	0x0801dca0

08011710 <rcutils_set_default_allocator>:
 8011710:	b1a8      	cbz	r0, 801173e <rcutils_set_default_allocator+0x2e>
 8011712:	6802      	ldr	r2, [r0, #0]
 8011714:	b1a2      	cbz	r2, 8011740 <rcutils_set_default_allocator+0x30>
 8011716:	6841      	ldr	r1, [r0, #4]
 8011718:	b1a1      	cbz	r1, 8011744 <rcutils_set_default_allocator+0x34>
 801171a:	b410      	push	{r4}
 801171c:	68c4      	ldr	r4, [r0, #12]
 801171e:	b164      	cbz	r4, 801173a <rcutils_set_default_allocator+0x2a>
 8011720:	6880      	ldr	r0, [r0, #8]
 8011722:	b138      	cbz	r0, 8011734 <rcutils_set_default_allocator+0x24>
 8011724:	4b08      	ldr	r3, [pc, #32]	@ (8011748 <rcutils_set_default_allocator+0x38>)
 8011726:	601a      	str	r2, [r3, #0]
 8011728:	2200      	movs	r2, #0
 801172a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801172e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8011732:	2001      	movs	r0, #1
 8011734:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011738:	4770      	bx	lr
 801173a:	4620      	mov	r0, r4
 801173c:	e7fa      	b.n	8011734 <rcutils_set_default_allocator+0x24>
 801173e:	4770      	bx	lr
 8011740:	4610      	mov	r0, r2
 8011742:	4770      	bx	lr
 8011744:	4608      	mov	r0, r1
 8011746:	4770      	bx	lr
 8011748:	200001dc 	.word	0x200001dc

0801174c <rcutils_get_default_allocator>:
 801174c:	b510      	push	{r4, lr}
 801174e:	4c05      	ldr	r4, [pc, #20]	@ (8011764 <rcutils_get_default_allocator+0x18>)
 8011750:	4686      	mov	lr, r0
 8011752:	4684      	mov	ip, r0
 8011754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011756:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801175a:	6823      	ldr	r3, [r4, #0]
 801175c:	f8cc 3000 	str.w	r3, [ip]
 8011760:	4670      	mov	r0, lr
 8011762:	bd10      	pop	{r4, pc}
 8011764:	200001dc 	.word	0x200001dc

08011768 <rcutils_allocator_is_valid>:
 8011768:	b158      	cbz	r0, 8011782 <rcutils_allocator_is_valid+0x1a>
 801176a:	6803      	ldr	r3, [r0, #0]
 801176c:	b143      	cbz	r3, 8011780 <rcutils_allocator_is_valid+0x18>
 801176e:	6843      	ldr	r3, [r0, #4]
 8011770:	b133      	cbz	r3, 8011780 <rcutils_allocator_is_valid+0x18>
 8011772:	68c3      	ldr	r3, [r0, #12]
 8011774:	b123      	cbz	r3, 8011780 <rcutils_allocator_is_valid+0x18>
 8011776:	6880      	ldr	r0, [r0, #8]
 8011778:	3800      	subs	r0, #0
 801177a:	bf18      	it	ne
 801177c:	2001      	movne	r0, #1
 801177e:	4770      	bx	lr
 8011780:	4618      	mov	r0, r3
 8011782:	4770      	bx	lr

08011784 <rcutils_get_error_string>:
 8011784:	4b06      	ldr	r3, [pc, #24]	@ (80117a0 <rcutils_get_error_string+0x1c>)
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	b13b      	cbz	r3, 801179a <rcutils_get_error_string+0x16>
 801178a:	4b06      	ldr	r3, [pc, #24]	@ (80117a4 <rcutils_get_error_string+0x20>)
 801178c:	781a      	ldrb	r2, [r3, #0]
 801178e:	b90a      	cbnz	r2, 8011794 <rcutils_get_error_string+0x10>
 8011790:	2201      	movs	r2, #1
 8011792:	701a      	strb	r2, [r3, #0]
 8011794:	4b04      	ldr	r3, [pc, #16]	@ (80117a8 <rcutils_get_error_string+0x24>)
 8011796:	7818      	ldrb	r0, [r3, #0]
 8011798:	4770      	bx	lr
 801179a:	4b04      	ldr	r3, [pc, #16]	@ (80117ac <rcutils_get_error_string+0x28>)
 801179c:	7818      	ldrb	r0, [r3, #0]
 801179e:	4770      	bx	lr
 80117a0:	20009c10 	.word	0x20009c10
 80117a4:	20009c29 	.word	0x20009c29
 80117a8:	20009c28 	.word	0x20009c28
 80117ac:	0801d550 	.word	0x0801d550

080117b0 <rcutils_reset_error>:
 80117b0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80117d0 <rcutils_reset_error+0x20>
 80117b4:	4a08      	ldr	r2, [pc, #32]	@ (80117d8 <rcutils_reset_error+0x28>)
 80117b6:	4809      	ldr	r0, [pc, #36]	@ (80117dc <rcutils_reset_error+0x2c>)
 80117b8:	4909      	ldr	r1, [pc, #36]	@ (80117e0 <rcutils_reset_error+0x30>)
 80117ba:	2300      	movs	r3, #0
 80117bc:	8013      	strh	r3, [r2, #0]
 80117be:	ed82 7b02 	vstr	d7, [r2, #8]
 80117c2:	4a08      	ldr	r2, [pc, #32]	@ (80117e4 <rcutils_reset_error+0x34>)
 80117c4:	7003      	strb	r3, [r0, #0]
 80117c6:	700b      	strb	r3, [r1, #0]
 80117c8:	7013      	strb	r3, [r2, #0]
 80117ca:	4770      	bx	lr
 80117cc:	f3af 8000 	nop.w
	...
 80117d8:	20009c18 	.word	0x20009c18
 80117dc:	20009c29 	.word	0x20009c29
 80117e0:	20009c28 	.word	0x20009c28
 80117e4:	20009c10 	.word	0x20009c10

080117e8 <rcutils_system_time_now>:
 80117e8:	b308      	cbz	r0, 801182e <rcutils_system_time_now+0x46>
 80117ea:	b570      	push	{r4, r5, r6, lr}
 80117ec:	b084      	sub	sp, #16
 80117ee:	4604      	mov	r4, r0
 80117f0:	4669      	mov	r1, sp
 80117f2:	2001      	movs	r0, #1
 80117f4:	f7ef ffd4 	bl	80017a0 <clock_gettime>
 80117f8:	e9dd 3500 	ldrd	r3, r5, [sp]
 80117fc:	2d00      	cmp	r5, #0
 80117fe:	db13      	blt.n	8011828 <rcutils_system_time_now+0x40>
 8011800:	9902      	ldr	r1, [sp, #8]
 8011802:	2900      	cmp	r1, #0
 8011804:	db0d      	blt.n	8011822 <rcutils_system_time_now+0x3a>
 8011806:	4e0b      	ldr	r6, [pc, #44]	@ (8011834 <rcutils_system_time_now+0x4c>)
 8011808:	fba3 3206 	umull	r3, r2, r3, r6
 801180c:	185b      	adds	r3, r3, r1
 801180e:	fb06 2205 	mla	r2, r6, r5, r2
 8011812:	f04f 0000 	mov.w	r0, #0
 8011816:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801181a:	e9c4 3200 	strd	r3, r2, [r4]
 801181e:	b004      	add	sp, #16
 8011820:	bd70      	pop	{r4, r5, r6, pc}
 8011822:	ea53 0205 	orrs.w	r2, r3, r5
 8011826:	d1ee      	bne.n	8011806 <rcutils_system_time_now+0x1e>
 8011828:	2002      	movs	r0, #2
 801182a:	b004      	add	sp, #16
 801182c:	bd70      	pop	{r4, r5, r6, pc}
 801182e:	200b      	movs	r0, #11
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop
 8011834:	3b9aca00 	.word	0x3b9aca00

08011838 <rcutils_steady_time_now>:
 8011838:	b308      	cbz	r0, 801187e <rcutils_steady_time_now+0x46>
 801183a:	b570      	push	{r4, r5, r6, lr}
 801183c:	b084      	sub	sp, #16
 801183e:	4604      	mov	r4, r0
 8011840:	4669      	mov	r1, sp
 8011842:	2000      	movs	r0, #0
 8011844:	f7ef ffac 	bl	80017a0 <clock_gettime>
 8011848:	e9dd 3500 	ldrd	r3, r5, [sp]
 801184c:	2d00      	cmp	r5, #0
 801184e:	db13      	blt.n	8011878 <rcutils_steady_time_now+0x40>
 8011850:	9902      	ldr	r1, [sp, #8]
 8011852:	2900      	cmp	r1, #0
 8011854:	db0d      	blt.n	8011872 <rcutils_steady_time_now+0x3a>
 8011856:	4e0b      	ldr	r6, [pc, #44]	@ (8011884 <rcutils_steady_time_now+0x4c>)
 8011858:	fba3 3206 	umull	r3, r2, r3, r6
 801185c:	185b      	adds	r3, r3, r1
 801185e:	fb06 2205 	mla	r2, r6, r5, r2
 8011862:	f04f 0000 	mov.w	r0, #0
 8011866:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801186a:	e9c4 3200 	strd	r3, r2, [r4]
 801186e:	b004      	add	sp, #16
 8011870:	bd70      	pop	{r4, r5, r6, pc}
 8011872:	ea53 0205 	orrs.w	r2, r3, r5
 8011876:	d1ee      	bne.n	8011856 <rcutils_steady_time_now+0x1e>
 8011878:	2002      	movs	r0, #2
 801187a:	b004      	add	sp, #16
 801187c:	bd70      	pop	{r4, r5, r6, pc}
 801187e:	200b      	movs	r0, #11
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	3b9aca00 	.word	0x3b9aca00

08011888 <rmw_get_default_publisher_options>:
 8011888:	2200      	movs	r2, #0
 801188a:	6002      	str	r2, [r0, #0]
 801188c:	7102      	strb	r2, [r0, #4]
 801188e:	4770      	bx	lr

08011890 <rmw_uros_set_custom_transport>:
 8011890:	b470      	push	{r4, r5, r6}
 8011892:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8011896:	b162      	cbz	r2, 80118b2 <rmw_uros_set_custom_transport+0x22>
 8011898:	b15b      	cbz	r3, 80118b2 <rmw_uros_set_custom_transport+0x22>
 801189a:	b155      	cbz	r5, 80118b2 <rmw_uros_set_custom_transport+0x22>
 801189c:	b14e      	cbz	r6, 80118b2 <rmw_uros_set_custom_transport+0x22>
 801189e:	4c06      	ldr	r4, [pc, #24]	@ (80118b8 <rmw_uros_set_custom_transport+0x28>)
 80118a0:	7020      	strb	r0, [r4, #0]
 80118a2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80118a6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80118aa:	6166      	str	r6, [r4, #20]
 80118ac:	2000      	movs	r0, #0
 80118ae:	bc70      	pop	{r4, r5, r6}
 80118b0:	4770      	bx	lr
 80118b2:	200b      	movs	r0, #11
 80118b4:	bc70      	pop	{r4, r5, r6}
 80118b6:	4770      	bx	lr
 80118b8:	20009c2c 	.word	0x20009c2c

080118bc <flush_session>:
 80118bc:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80118be:	f001 bd37 	b.w	8013330 <uxr_run_session_until_confirm_delivery>
 80118c2:	bf00      	nop

080118c4 <rmw_publish>:
 80118c4:	2800      	cmp	r0, #0
 80118c6:	d053      	beq.n	8011970 <rmw_publish+0xac>
 80118c8:	b570      	push	{r4, r5, r6, lr}
 80118ca:	460d      	mov	r5, r1
 80118cc:	b08e      	sub	sp, #56	@ 0x38
 80118ce:	2900      	cmp	r1, #0
 80118d0:	d04b      	beq.n	801196a <rmw_publish+0xa6>
 80118d2:	4604      	mov	r4, r0
 80118d4:	6800      	ldr	r0, [r0, #0]
 80118d6:	f000 fced 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 80118da:	2800      	cmp	r0, #0
 80118dc:	d045      	beq.n	801196a <rmw_publish+0xa6>
 80118de:	6866      	ldr	r6, [r4, #4]
 80118e0:	2e00      	cmp	r6, #0
 80118e2:	d042      	beq.n	801196a <rmw_publish+0xa6>
 80118e4:	69b4      	ldr	r4, [r6, #24]
 80118e6:	4628      	mov	r0, r5
 80118e8:	6923      	ldr	r3, [r4, #16]
 80118ea:	4798      	blx	r3
 80118ec:	69f3      	ldr	r3, [r6, #28]
 80118ee:	9005      	str	r0, [sp, #20]
 80118f0:	b113      	cbz	r3, 80118f8 <rmw_publish+0x34>
 80118f2:	a805      	add	r0, sp, #20
 80118f4:	4798      	blx	r3
 80118f6:	9805      	ldr	r0, [sp, #20]
 80118f8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80118fc:	691b      	ldr	r3, [r3, #16]
 80118fe:	9000      	str	r0, [sp, #0]
 8011900:	6972      	ldr	r2, [r6, #20]
 8011902:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011904:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011908:	ab06      	add	r3, sp, #24
 801190a:	f002 fafd 	bl	8013f08 <uxr_prepare_output_stream>
 801190e:	b1d8      	cbz	r0, 8011948 <rmw_publish+0x84>
 8011910:	68a3      	ldr	r3, [r4, #8]
 8011912:	a906      	add	r1, sp, #24
 8011914:	4628      	mov	r0, r5
 8011916:	4798      	blx	r3
 8011918:	6a33      	ldr	r3, [r6, #32]
 801191a:	4604      	mov	r4, r0
 801191c:	b10b      	cbz	r3, 8011922 <rmw_publish+0x5e>
 801191e:	a806      	add	r0, sp, #24
 8011920:	4798      	blx	r3
 8011922:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8011926:	2b01      	cmp	r3, #1
 8011928:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801192c:	d022      	beq.n	8011974 <rmw_publish+0xb0>
 801192e:	6918      	ldr	r0, [r3, #16]
 8011930:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8011932:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011936:	f001 fcfb 	bl	8013330 <uxr_run_session_until_confirm_delivery>
 801193a:	4020      	ands	r0, r4
 801193c:	b2c4      	uxtb	r4, r0
 801193e:	f084 0001 	eor.w	r0, r4, #1
 8011942:	b2c0      	uxtb	r0, r0
 8011944:	b00e      	add	sp, #56	@ 0x38
 8011946:	bd70      	pop	{r4, r5, r6, pc}
 8011948:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801194c:	6918      	ldr	r0, [r3, #16]
 801194e:	9b05      	ldr	r3, [sp, #20]
 8011950:	9300      	str	r3, [sp, #0]
 8011952:	4b0b      	ldr	r3, [pc, #44]	@ (8011980 <rmw_publish+0xbc>)
 8011954:	9301      	str	r3, [sp, #4]
 8011956:	9602      	str	r6, [sp, #8]
 8011958:	6972      	ldr	r2, [r6, #20]
 801195a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 801195c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011960:	ab06      	add	r3, sp, #24
 8011962:	f002 fb01 	bl	8013f68 <uxr_prepare_output_stream_fragmented>
 8011966:	2800      	cmp	r0, #0
 8011968:	d1d2      	bne.n	8011910 <rmw_publish+0x4c>
 801196a:	2001      	movs	r0, #1
 801196c:	b00e      	add	sp, #56	@ 0x38
 801196e:	bd70      	pop	{r4, r5, r6, pc}
 8011970:	2001      	movs	r0, #1
 8011972:	4770      	bx	lr
 8011974:	6918      	ldr	r0, [r3, #16]
 8011976:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801197a:	f001 f919 	bl	8012bb0 <uxr_flash_output_streams>
 801197e:	e7de      	b.n	801193e <rmw_publish+0x7a>
 8011980:	080118bd 	.word	0x080118bd

08011984 <rmw_create_publisher>:
 8011984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011988:	b087      	sub	sp, #28
 801198a:	2800      	cmp	r0, #0
 801198c:	f000 80cc 	beq.w	8011b28 <rmw_create_publisher+0x1a4>
 8011990:	460e      	mov	r6, r1
 8011992:	2900      	cmp	r1, #0
 8011994:	f000 80c8 	beq.w	8011b28 <rmw_create_publisher+0x1a4>
 8011998:	4604      	mov	r4, r0
 801199a:	6800      	ldr	r0, [r0, #0]
 801199c:	4615      	mov	r5, r2
 801199e:	4698      	mov	r8, r3
 80119a0:	f000 fc88 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 80119a4:	2800      	cmp	r0, #0
 80119a6:	f000 80bf 	beq.w	8011b28 <rmw_create_publisher+0x1a4>
 80119aa:	2d00      	cmp	r5, #0
 80119ac:	f000 80bc 	beq.w	8011b28 <rmw_create_publisher+0x1a4>
 80119b0:	782b      	ldrb	r3, [r5, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f000 80b8 	beq.w	8011b28 <rmw_create_publisher+0x1a4>
 80119b8:	f1b8 0f00 	cmp.w	r8, #0
 80119bc:	f000 80b4 	beq.w	8011b28 <rmw_create_publisher+0x1a4>
 80119c0:	485c      	ldr	r0, [pc, #368]	@ (8011b34 <rmw_create_publisher+0x1b0>)
 80119c2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80119c6:	f006 fd87 	bl	80184d8 <get_memory>
 80119ca:	2800      	cmp	r0, #0
 80119cc:	f000 80ac 	beq.w	8011b28 <rmw_create_publisher+0x1a4>
 80119d0:	6884      	ldr	r4, [r0, #8]
 80119d2:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80119d6:	f006 fde7 	bl	80185a8 <rmw_get_implementation_identifier>
 80119da:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80119de:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80119e2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80119e6:	4628      	mov	r0, r5
 80119e8:	f7ee fbfc 	bl	80001e4 <strlen>
 80119ec:	3001      	adds	r0, #1
 80119ee:	283c      	cmp	r0, #60	@ 0x3c
 80119f0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80119f4:	f200 8091 	bhi.w	8011b1a <rmw_create_publisher+0x196>
 80119f8:	4a4f      	ldr	r2, [pc, #316]	@ (8011b38 <rmw_create_publisher+0x1b4>)
 80119fa:	462b      	mov	r3, r5
 80119fc:	213c      	movs	r1, #60	@ 0x3c
 80119fe:	4650      	mov	r0, sl
 8011a00:	f00a fbd8 	bl	801c1b4 <sniprintf>
 8011a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011a08:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8011a0a:	4641      	mov	r1, r8
 8011a0c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8011a10:	2250      	movs	r2, #80	@ 0x50
 8011a12:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011a16:	f00a fd76 	bl	801c506 <memcpy>
 8011a1a:	f898 3008 	ldrb.w	r3, [r8, #8]
 8011a1e:	4947      	ldr	r1, [pc, #284]	@ (8011b3c <rmw_create_publisher+0x1b8>)
 8011a20:	2b02      	cmp	r3, #2
 8011a22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011a26:	bf0c      	ite	eq
 8011a28:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8011a2c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8011a30:	67a3      	str	r3, [r4, #120]	@ 0x78
 8011a32:	2300      	movs	r3, #0
 8011a34:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011a38:	4630      	mov	r0, r6
 8011a3a:	f000 fc49 	bl	80122d0 <get_message_typesupport_handle>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d06b      	beq.n	8011b1a <rmw_create_publisher+0x196>
 8011a42:	6842      	ldr	r2, [r0, #4]
 8011a44:	61a2      	str	r2, [r4, #24]
 8011a46:	2a00      	cmp	r2, #0
 8011a48:	d067      	beq.n	8011b1a <rmw_create_publisher+0x196>
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	4643      	mov	r3, r8
 8011a4e:	4648      	mov	r0, r9
 8011a50:	f007 f83a 	bl	8018ac8 <create_topic>
 8011a54:	6260      	str	r0, [r4, #36]	@ 0x24
 8011a56:	2800      	cmp	r0, #0
 8011a58:	d063      	beq.n	8011b22 <rmw_create_publisher+0x19e>
 8011a5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011a62:	2103      	movs	r1, #3
 8011a64:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8011a68:	1c42      	adds	r2, r0, #1
 8011a6a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8011a6e:	f000 ff51 	bl	8012914 <uxr_object_id>
 8011a72:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011a76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011a7a:	6120      	str	r0, [r4, #16]
 8011a7c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8011a80:	6910      	ldr	r0, [r2, #16]
 8011a82:	2506      	movs	r5, #6
 8011a84:	9500      	str	r5, [sp, #0]
 8011a86:	6819      	ldr	r1, [r3, #0]
 8011a88:	6922      	ldr	r2, [r4, #16]
 8011a8a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011a8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011a92:	f000 fdf1 	bl	8012678 <uxr_buffer_create_publisher_bin>
 8011a96:	4602      	mov	r2, r0
 8011a98:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011a9c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011aa0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011aa4:	f000 fb86 	bl	80121b4 <run_xrce_session>
 8011aa8:	b3b8      	cbz	r0, 8011b1a <rmw_create_publisher+0x196>
 8011aaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011ab2:	2105      	movs	r1, #5
 8011ab4:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8011ab8:	1c42      	adds	r2, r0, #1
 8011aba:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8011abe:	f000 ff29 	bl	8012914 <uxr_object_id>
 8011ac2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011ac6:	6160      	str	r0, [r4, #20]
 8011ac8:	691e      	ldr	r6, [r3, #16]
 8011aca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011ace:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8011ad2:	f10d 0a10 	add.w	sl, sp, #16
 8011ad6:	4641      	mov	r1, r8
 8011ad8:	4650      	mov	r0, sl
 8011ada:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8011ade:	f000 fb85 	bl	80121ec <convert_qos_profile>
 8011ae2:	9503      	str	r5, [sp, #12]
 8011ae4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8011ae8:	9001      	str	r0, [sp, #4]
 8011aea:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011aee:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011af2:	9300      	str	r3, [sp, #0]
 8011af4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8011af8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8011afc:	f8d8 1000 	ldr.w	r1, [r8]
 8011b00:	4630      	mov	r0, r6
 8011b02:	f000 fe19 	bl	8012738 <uxr_buffer_create_datawriter_bin>
 8011b06:	4602      	mov	r2, r0
 8011b08:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011b0c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011b10:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011b14:	f000 fb4e 	bl	80121b4 <run_xrce_session>
 8011b18:	b938      	cbnz	r0, 8011b2a <rmw_create_publisher+0x1a6>
 8011b1a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011b1c:	b108      	cbz	r0, 8011b22 <rmw_create_publisher+0x19e>
 8011b1e:	f000 fa47 	bl	8011fb0 <rmw_uxrce_fini_topic_memory>
 8011b22:	4638      	mov	r0, r7
 8011b24:	f000 f9ec 	bl	8011f00 <rmw_uxrce_fini_publisher_memory>
 8011b28:	2700      	movs	r7, #0
 8011b2a:	4638      	mov	r0, r7
 8011b2c:	b007      	add	sp, #28
 8011b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b32:	bf00      	nop
 8011b34:	2000e524 	.word	0x2000e524
 8011b38:	0801d564 	.word	0x0801d564
 8011b3c:	0801d4e0 	.word	0x0801d4e0

08011b40 <rmw_publisher_get_actual_qos>:
 8011b40:	b150      	cbz	r0, 8011b58 <rmw_publisher_get_actual_qos+0x18>
 8011b42:	b508      	push	{r3, lr}
 8011b44:	460b      	mov	r3, r1
 8011b46:	b149      	cbz	r1, 8011b5c <rmw_publisher_get_actual_qos+0x1c>
 8011b48:	6841      	ldr	r1, [r0, #4]
 8011b4a:	2250      	movs	r2, #80	@ 0x50
 8011b4c:	3128      	adds	r1, #40	@ 0x28
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f00a fcd9 	bl	801c506 <memcpy>
 8011b54:	2000      	movs	r0, #0
 8011b56:	bd08      	pop	{r3, pc}
 8011b58:	200b      	movs	r0, #11
 8011b5a:	4770      	bx	lr
 8011b5c:	200b      	movs	r0, #11
 8011b5e:	bd08      	pop	{r3, pc}

08011b60 <rmw_destroy_publisher>:
 8011b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b62:	b128      	cbz	r0, 8011b70 <rmw_destroy_publisher+0x10>
 8011b64:	4604      	mov	r4, r0
 8011b66:	6800      	ldr	r0, [r0, #0]
 8011b68:	460d      	mov	r5, r1
 8011b6a:	f000 fba3 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 8011b6e:	b910      	cbnz	r0, 8011b76 <rmw_destroy_publisher+0x16>
 8011b70:	2401      	movs	r4, #1
 8011b72:	4620      	mov	r0, r4
 8011b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b76:	6863      	ldr	r3, [r4, #4]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d0f9      	beq.n	8011b70 <rmw_destroy_publisher+0x10>
 8011b7c:	2d00      	cmp	r5, #0
 8011b7e:	d0f7      	beq.n	8011b70 <rmw_destroy_publisher+0x10>
 8011b80:	6828      	ldr	r0, [r5, #0]
 8011b82:	f000 fb97 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 8011b86:	2800      	cmp	r0, #0
 8011b88:	d0f2      	beq.n	8011b70 <rmw_destroy_publisher+0x10>
 8011b8a:	686c      	ldr	r4, [r5, #4]
 8011b8c:	2c00      	cmp	r4, #0
 8011b8e:	d0ef      	beq.n	8011b70 <rmw_destroy_publisher+0x10>
 8011b90:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011b92:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8011b96:	f006 ffe7 	bl	8018b68 <destroy_topic>
 8011b9a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011b9e:	6962      	ldr	r2, [r4, #20]
 8011ba0:	6918      	ldr	r0, [r3, #16]
 8011ba2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011ba6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011baa:	6819      	ldr	r1, [r3, #0]
 8011bac:	f000 fcb0 	bl	8012510 <uxr_buffer_delete_entity>
 8011bb0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011bb4:	6922      	ldr	r2, [r4, #16]
 8011bb6:	691b      	ldr	r3, [r3, #16]
 8011bb8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011bbc:	4604      	mov	r4, r0
 8011bbe:	6809      	ldr	r1, [r1, #0]
 8011bc0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011bc4:	f000 fca4 	bl	8012510 <uxr_buffer_delete_entity>
 8011bc8:	693e      	ldr	r6, [r7, #16]
 8011bca:	4622      	mov	r2, r4
 8011bcc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011bd0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011bd4:	4604      	mov	r4, r0
 8011bd6:	4630      	mov	r0, r6
 8011bd8:	f000 faec 	bl	80121b4 <run_xrce_session>
 8011bdc:	693e      	ldr	r6, [r7, #16]
 8011bde:	4622      	mov	r2, r4
 8011be0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011be4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011be8:	4604      	mov	r4, r0
 8011bea:	4630      	mov	r0, r6
 8011bec:	f000 fae2 	bl	80121b4 <run_xrce_session>
 8011bf0:	b12c      	cbz	r4, 8011bfe <rmw_destroy_publisher+0x9e>
 8011bf2:	b120      	cbz	r0, 8011bfe <rmw_destroy_publisher+0x9e>
 8011bf4:	2400      	movs	r4, #0
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	f000 f982 	bl	8011f00 <rmw_uxrce_fini_publisher_memory>
 8011bfc:	e7b9      	b.n	8011b72 <rmw_destroy_publisher+0x12>
 8011bfe:	2402      	movs	r4, #2
 8011c00:	e7f9      	b.n	8011bf6 <rmw_destroy_publisher+0x96>
 8011c02:	bf00      	nop

08011c04 <rmw_uxrce_init_service_memory>:
 8011c04:	b1e2      	cbz	r2, 8011c40 <rmw_uxrce_init_service_memory+0x3c>
 8011c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c0a:	7b05      	ldrb	r5, [r0, #12]
 8011c0c:	4606      	mov	r6, r0
 8011c0e:	b9ad      	cbnz	r5, 8011c3c <rmw_uxrce_init_service_memory+0x38>
 8011c10:	23c8      	movs	r3, #200	@ 0xc8
 8011c12:	e9c0 5500 	strd	r5, r5, [r0]
 8011c16:	6083      	str	r3, [r0, #8]
 8011c18:	f240 1301 	movw	r3, #257	@ 0x101
 8011c1c:	4617      	mov	r7, r2
 8011c1e:	8183      	strh	r3, [r0, #12]
 8011c20:	460c      	mov	r4, r1
 8011c22:	46a8      	mov	r8, r5
 8011c24:	4621      	mov	r1, r4
 8011c26:	4630      	mov	r0, r6
 8011c28:	3501      	adds	r5, #1
 8011c2a:	f006 fc65 	bl	80184f8 <put_memory>
 8011c2e:	42af      	cmp	r7, r5
 8011c30:	60a4      	str	r4, [r4, #8]
 8011c32:	f884 800c 	strb.w	r8, [r4, #12]
 8011c36:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011c3a:	d1f3      	bne.n	8011c24 <rmw_uxrce_init_service_memory+0x20>
 8011c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c40:	4770      	bx	lr
 8011c42:	bf00      	nop

08011c44 <rmw_uxrce_init_client_memory>:
 8011c44:	b1e2      	cbz	r2, 8011c80 <rmw_uxrce_init_client_memory+0x3c>
 8011c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c4a:	7b05      	ldrb	r5, [r0, #12]
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	b9ad      	cbnz	r5, 8011c7c <rmw_uxrce_init_client_memory+0x38>
 8011c50:	23c8      	movs	r3, #200	@ 0xc8
 8011c52:	e9c0 5500 	strd	r5, r5, [r0]
 8011c56:	6083      	str	r3, [r0, #8]
 8011c58:	f240 1301 	movw	r3, #257	@ 0x101
 8011c5c:	4617      	mov	r7, r2
 8011c5e:	8183      	strh	r3, [r0, #12]
 8011c60:	460c      	mov	r4, r1
 8011c62:	46a8      	mov	r8, r5
 8011c64:	4621      	mov	r1, r4
 8011c66:	4630      	mov	r0, r6
 8011c68:	3501      	adds	r5, #1
 8011c6a:	f006 fc45 	bl	80184f8 <put_memory>
 8011c6e:	42af      	cmp	r7, r5
 8011c70:	60a4      	str	r4, [r4, #8]
 8011c72:	f884 800c 	strb.w	r8, [r4, #12]
 8011c76:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011c7a:	d1f3      	bne.n	8011c64 <rmw_uxrce_init_client_memory+0x20>
 8011c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop

08011c84 <rmw_uxrce_init_publisher_memory>:
 8011c84:	b1e2      	cbz	r2, 8011cc0 <rmw_uxrce_init_publisher_memory+0x3c>
 8011c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c8a:	7b05      	ldrb	r5, [r0, #12]
 8011c8c:	4606      	mov	r6, r0
 8011c8e:	b9ad      	cbnz	r5, 8011cbc <rmw_uxrce_init_publisher_memory+0x38>
 8011c90:	23d8      	movs	r3, #216	@ 0xd8
 8011c92:	e9c0 5500 	strd	r5, r5, [r0]
 8011c96:	6083      	str	r3, [r0, #8]
 8011c98:	f240 1301 	movw	r3, #257	@ 0x101
 8011c9c:	4617      	mov	r7, r2
 8011c9e:	8183      	strh	r3, [r0, #12]
 8011ca0:	460c      	mov	r4, r1
 8011ca2:	46a8      	mov	r8, r5
 8011ca4:	4621      	mov	r1, r4
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	3501      	adds	r5, #1
 8011caa:	f006 fc25 	bl	80184f8 <put_memory>
 8011cae:	42af      	cmp	r7, r5
 8011cb0:	60a4      	str	r4, [r4, #8]
 8011cb2:	f884 800c 	strb.w	r8, [r4, #12]
 8011cb6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011cba:	d1f3      	bne.n	8011ca4 <rmw_uxrce_init_publisher_memory+0x20>
 8011cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cc0:	4770      	bx	lr
 8011cc2:	bf00      	nop

08011cc4 <rmw_uxrce_init_subscription_memory>:
 8011cc4:	b1e2      	cbz	r2, 8011d00 <rmw_uxrce_init_subscription_memory+0x3c>
 8011cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cca:	7b05      	ldrb	r5, [r0, #12]
 8011ccc:	4606      	mov	r6, r0
 8011cce:	b9ad      	cbnz	r5, 8011cfc <rmw_uxrce_init_subscription_memory+0x38>
 8011cd0:	23d8      	movs	r3, #216	@ 0xd8
 8011cd2:	e9c0 5500 	strd	r5, r5, [r0]
 8011cd6:	6083      	str	r3, [r0, #8]
 8011cd8:	f240 1301 	movw	r3, #257	@ 0x101
 8011cdc:	4617      	mov	r7, r2
 8011cde:	8183      	strh	r3, [r0, #12]
 8011ce0:	460c      	mov	r4, r1
 8011ce2:	46a8      	mov	r8, r5
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	4630      	mov	r0, r6
 8011ce8:	3501      	adds	r5, #1
 8011cea:	f006 fc05 	bl	80184f8 <put_memory>
 8011cee:	42af      	cmp	r7, r5
 8011cf0:	60a4      	str	r4, [r4, #8]
 8011cf2:	f884 800c 	strb.w	r8, [r4, #12]
 8011cf6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011cfa:	d1f3      	bne.n	8011ce4 <rmw_uxrce_init_subscription_memory+0x20>
 8011cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d00:	4770      	bx	lr
 8011d02:	bf00      	nop

08011d04 <rmw_uxrce_init_node_memory>:
 8011d04:	b1e2      	cbz	r2, 8011d40 <rmw_uxrce_init_node_memory+0x3c>
 8011d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d0a:	7b05      	ldrb	r5, [r0, #12]
 8011d0c:	4606      	mov	r6, r0
 8011d0e:	b9ad      	cbnz	r5, 8011d3c <rmw_uxrce_init_node_memory+0x38>
 8011d10:	23a4      	movs	r3, #164	@ 0xa4
 8011d12:	e9c0 5500 	strd	r5, r5, [r0]
 8011d16:	6083      	str	r3, [r0, #8]
 8011d18:	f240 1301 	movw	r3, #257	@ 0x101
 8011d1c:	4617      	mov	r7, r2
 8011d1e:	8183      	strh	r3, [r0, #12]
 8011d20:	460c      	mov	r4, r1
 8011d22:	46a8      	mov	r8, r5
 8011d24:	4621      	mov	r1, r4
 8011d26:	4630      	mov	r0, r6
 8011d28:	3501      	adds	r5, #1
 8011d2a:	f006 fbe5 	bl	80184f8 <put_memory>
 8011d2e:	42af      	cmp	r7, r5
 8011d30:	60a4      	str	r4, [r4, #8]
 8011d32:	f884 800c 	strb.w	r8, [r4, #12]
 8011d36:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8011d3a:	d1f3      	bne.n	8011d24 <rmw_uxrce_init_node_memory+0x20>
 8011d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop

08011d44 <rmw_uxrce_init_session_memory>:
 8011d44:	b1ea      	cbz	r2, 8011d82 <rmw_uxrce_init_session_memory+0x3e>
 8011d46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d4a:	7b05      	ldrb	r5, [r0, #12]
 8011d4c:	4606      	mov	r6, r0
 8011d4e:	b9b5      	cbnz	r5, 8011d7e <rmw_uxrce_init_session_memory+0x3a>
 8011d50:	e9c0 5500 	strd	r5, r5, [r0]
 8011d54:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011d58:	f240 1301 	movw	r3, #257	@ 0x101
 8011d5c:	4617      	mov	r7, r2
 8011d5e:	f8c0 8008 	str.w	r8, [r0, #8]
 8011d62:	460c      	mov	r4, r1
 8011d64:	8183      	strh	r3, [r0, #12]
 8011d66:	46a9      	mov	r9, r5
 8011d68:	4621      	mov	r1, r4
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	3501      	adds	r5, #1
 8011d6e:	f006 fbc3 	bl	80184f8 <put_memory>
 8011d72:	42af      	cmp	r7, r5
 8011d74:	60a4      	str	r4, [r4, #8]
 8011d76:	f884 900c 	strb.w	r9, [r4, #12]
 8011d7a:	4444      	add	r4, r8
 8011d7c:	d1f4      	bne.n	8011d68 <rmw_uxrce_init_session_memory+0x24>
 8011d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d82:	4770      	bx	lr

08011d84 <rmw_uxrce_init_topic_memory>:
 8011d84:	b1e2      	cbz	r2, 8011dc0 <rmw_uxrce_init_topic_memory+0x3c>
 8011d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d8a:	7b05      	ldrb	r5, [r0, #12]
 8011d8c:	4606      	mov	r6, r0
 8011d8e:	b9ad      	cbnz	r5, 8011dbc <rmw_uxrce_init_topic_memory+0x38>
 8011d90:	231c      	movs	r3, #28
 8011d92:	e9c0 5500 	strd	r5, r5, [r0]
 8011d96:	6083      	str	r3, [r0, #8]
 8011d98:	f240 1301 	movw	r3, #257	@ 0x101
 8011d9c:	4617      	mov	r7, r2
 8011d9e:	8183      	strh	r3, [r0, #12]
 8011da0:	460c      	mov	r4, r1
 8011da2:	46a8      	mov	r8, r5
 8011da4:	4621      	mov	r1, r4
 8011da6:	4630      	mov	r0, r6
 8011da8:	3501      	adds	r5, #1
 8011daa:	f006 fba5 	bl	80184f8 <put_memory>
 8011dae:	42af      	cmp	r7, r5
 8011db0:	60a4      	str	r4, [r4, #8]
 8011db2:	f884 800c 	strb.w	r8, [r4, #12]
 8011db6:	f104 041c 	add.w	r4, r4, #28
 8011dba:	d1f3      	bne.n	8011da4 <rmw_uxrce_init_topic_memory+0x20>
 8011dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dc0:	4770      	bx	lr
 8011dc2:	bf00      	nop

08011dc4 <rmw_uxrce_init_static_input_buffer_memory>:
 8011dc4:	b1ea      	cbz	r2, 8011e02 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8011dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dca:	7b05      	ldrb	r5, [r0, #12]
 8011dcc:	4606      	mov	r6, r0
 8011dce:	b9b5      	cbnz	r5, 8011dfe <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8011dd0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8011dd4:	e9c0 5500 	strd	r5, r5, [r0]
 8011dd8:	6083      	str	r3, [r0, #8]
 8011dda:	f240 1301 	movw	r3, #257	@ 0x101
 8011dde:	4617      	mov	r7, r2
 8011de0:	8183      	strh	r3, [r0, #12]
 8011de2:	460c      	mov	r4, r1
 8011de4:	46a8      	mov	r8, r5
 8011de6:	4621      	mov	r1, r4
 8011de8:	4630      	mov	r0, r6
 8011dea:	3501      	adds	r5, #1
 8011dec:	f006 fb84 	bl	80184f8 <put_memory>
 8011df0:	42af      	cmp	r7, r5
 8011df2:	60a4      	str	r4, [r4, #8]
 8011df4:	f884 800c 	strb.w	r8, [r4, #12]
 8011df8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8011dfc:	d1f3      	bne.n	8011de6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8011dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e02:	4770      	bx	lr

08011e04 <rmw_uxrce_init_init_options_impl_memory>:
 8011e04:	b1e2      	cbz	r2, 8011e40 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8011e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e0a:	7b05      	ldrb	r5, [r0, #12]
 8011e0c:	4606      	mov	r6, r0
 8011e0e:	b9ad      	cbnz	r5, 8011e3c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011e10:	232c      	movs	r3, #44	@ 0x2c
 8011e12:	e9c0 5500 	strd	r5, r5, [r0]
 8011e16:	6083      	str	r3, [r0, #8]
 8011e18:	f240 1301 	movw	r3, #257	@ 0x101
 8011e1c:	4617      	mov	r7, r2
 8011e1e:	8183      	strh	r3, [r0, #12]
 8011e20:	460c      	mov	r4, r1
 8011e22:	46a8      	mov	r8, r5
 8011e24:	4621      	mov	r1, r4
 8011e26:	4630      	mov	r0, r6
 8011e28:	3501      	adds	r5, #1
 8011e2a:	f006 fb65 	bl	80184f8 <put_memory>
 8011e2e:	42af      	cmp	r7, r5
 8011e30:	60a4      	str	r4, [r4, #8]
 8011e32:	f884 800c 	strb.w	r8, [r4, #12]
 8011e36:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8011e3a:	d1f3      	bne.n	8011e24 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e40:	4770      	bx	lr
 8011e42:	bf00      	nop

08011e44 <rmw_uxrce_init_wait_set_memory>:
 8011e44:	b1e2      	cbz	r2, 8011e80 <rmw_uxrce_init_wait_set_memory+0x3c>
 8011e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e4a:	7b05      	ldrb	r5, [r0, #12]
 8011e4c:	4606      	mov	r6, r0
 8011e4e:	b9ad      	cbnz	r5, 8011e7c <rmw_uxrce_init_wait_set_memory+0x38>
 8011e50:	231c      	movs	r3, #28
 8011e52:	e9c0 5500 	strd	r5, r5, [r0]
 8011e56:	6083      	str	r3, [r0, #8]
 8011e58:	f240 1301 	movw	r3, #257	@ 0x101
 8011e5c:	4617      	mov	r7, r2
 8011e5e:	8183      	strh	r3, [r0, #12]
 8011e60:	460c      	mov	r4, r1
 8011e62:	46a8      	mov	r8, r5
 8011e64:	4621      	mov	r1, r4
 8011e66:	4630      	mov	r0, r6
 8011e68:	3501      	adds	r5, #1
 8011e6a:	f006 fb45 	bl	80184f8 <put_memory>
 8011e6e:	42af      	cmp	r7, r5
 8011e70:	60a4      	str	r4, [r4, #8]
 8011e72:	f884 800c 	strb.w	r8, [r4, #12]
 8011e76:	f104 041c 	add.w	r4, r4, #28
 8011e7a:	d1f3      	bne.n	8011e64 <rmw_uxrce_init_wait_set_memory+0x20>
 8011e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e80:	4770      	bx	lr
 8011e82:	bf00      	nop

08011e84 <rmw_uxrce_init_guard_condition_memory>:
 8011e84:	b1e2      	cbz	r2, 8011ec0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8011e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e8a:	7b05      	ldrb	r5, [r0, #12]
 8011e8c:	4606      	mov	r6, r0
 8011e8e:	b9ad      	cbnz	r5, 8011ebc <rmw_uxrce_init_guard_condition_memory+0x38>
 8011e90:	2320      	movs	r3, #32
 8011e92:	e9c0 5500 	strd	r5, r5, [r0]
 8011e96:	6083      	str	r3, [r0, #8]
 8011e98:	f240 1301 	movw	r3, #257	@ 0x101
 8011e9c:	4617      	mov	r7, r2
 8011e9e:	8183      	strh	r3, [r0, #12]
 8011ea0:	460c      	mov	r4, r1
 8011ea2:	46a8      	mov	r8, r5
 8011ea4:	4621      	mov	r1, r4
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	3501      	adds	r5, #1
 8011eaa:	f006 fb25 	bl	80184f8 <put_memory>
 8011eae:	42af      	cmp	r7, r5
 8011eb0:	60a4      	str	r4, [r4, #8]
 8011eb2:	f884 800c 	strb.w	r8, [r4, #12]
 8011eb6:	f104 0420 	add.w	r4, r4, #32
 8011eba:	d1f3      	bne.n	8011ea4 <rmw_uxrce_init_guard_condition_memory+0x20>
 8011ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec0:	4770      	bx	lr
 8011ec2:	bf00      	nop

08011ec4 <rmw_uxrce_fini_session_memory>:
 8011ec4:	4601      	mov	r1, r0
 8011ec6:	4801      	ldr	r0, [pc, #4]	@ (8011ecc <rmw_uxrce_fini_session_memory+0x8>)
 8011ec8:	f006 bb16 	b.w	80184f8 <put_memory>
 8011ecc:	2000e544 	.word	0x2000e544

08011ed0 <rmw_uxrce_fini_node_memory>:
 8011ed0:	b538      	push	{r3, r4, r5, lr}
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	6800      	ldr	r0, [r0, #0]
 8011ed6:	b128      	cbz	r0, 8011ee4 <rmw_uxrce_fini_node_memory+0x14>
 8011ed8:	4b07      	ldr	r3, [pc, #28]	@ (8011ef8 <rmw_uxrce_fini_node_memory+0x28>)
 8011eda:	6819      	ldr	r1, [r3, #0]
 8011edc:	f7ee f978 	bl	80001d0 <strcmp>
 8011ee0:	b940      	cbnz	r0, 8011ef4 <rmw_uxrce_fini_node_memory+0x24>
 8011ee2:	6020      	str	r0, [r4, #0]
 8011ee4:	6861      	ldr	r1, [r4, #4]
 8011ee6:	b129      	cbz	r1, 8011ef4 <rmw_uxrce_fini_node_memory+0x24>
 8011ee8:	2500      	movs	r5, #0
 8011eea:	4804      	ldr	r0, [pc, #16]	@ (8011efc <rmw_uxrce_fini_node_memory+0x2c>)
 8011eec:	610d      	str	r5, [r1, #16]
 8011eee:	f006 fb03 	bl	80184f8 <put_memory>
 8011ef2:	6065      	str	r5, [r4, #4]
 8011ef4:	bd38      	pop	{r3, r4, r5, pc}
 8011ef6:	bf00      	nop
 8011ef8:	0801deb8 	.word	0x0801deb8
 8011efc:	2000e514 	.word	0x2000e514

08011f00 <rmw_uxrce_fini_publisher_memory>:
 8011f00:	b510      	push	{r4, lr}
 8011f02:	4604      	mov	r4, r0
 8011f04:	6800      	ldr	r0, [r0, #0]
 8011f06:	b128      	cbz	r0, 8011f14 <rmw_uxrce_fini_publisher_memory+0x14>
 8011f08:	4b06      	ldr	r3, [pc, #24]	@ (8011f24 <rmw_uxrce_fini_publisher_memory+0x24>)
 8011f0a:	6819      	ldr	r1, [r3, #0]
 8011f0c:	f7ee f960 	bl	80001d0 <strcmp>
 8011f10:	b938      	cbnz	r0, 8011f22 <rmw_uxrce_fini_publisher_memory+0x22>
 8011f12:	6020      	str	r0, [r4, #0]
 8011f14:	6861      	ldr	r1, [r4, #4]
 8011f16:	b121      	cbz	r1, 8011f22 <rmw_uxrce_fini_publisher_memory+0x22>
 8011f18:	4803      	ldr	r0, [pc, #12]	@ (8011f28 <rmw_uxrce_fini_publisher_memory+0x28>)
 8011f1a:	f006 faed 	bl	80184f8 <put_memory>
 8011f1e:	2300      	movs	r3, #0
 8011f20:	6063      	str	r3, [r4, #4]
 8011f22:	bd10      	pop	{r4, pc}
 8011f24:	0801deb8 	.word	0x0801deb8
 8011f28:	2000e524 	.word	0x2000e524

08011f2c <rmw_uxrce_fini_subscription_memory>:
 8011f2c:	b510      	push	{r4, lr}
 8011f2e:	4604      	mov	r4, r0
 8011f30:	6800      	ldr	r0, [r0, #0]
 8011f32:	b128      	cbz	r0, 8011f40 <rmw_uxrce_fini_subscription_memory+0x14>
 8011f34:	4b06      	ldr	r3, [pc, #24]	@ (8011f50 <rmw_uxrce_fini_subscription_memory+0x24>)
 8011f36:	6819      	ldr	r1, [r3, #0]
 8011f38:	f7ee f94a 	bl	80001d0 <strcmp>
 8011f3c:	b938      	cbnz	r0, 8011f4e <rmw_uxrce_fini_subscription_memory+0x22>
 8011f3e:	6020      	str	r0, [r4, #0]
 8011f40:	6861      	ldr	r1, [r4, #4]
 8011f42:	b121      	cbz	r1, 8011f4e <rmw_uxrce_fini_subscription_memory+0x22>
 8011f44:	4803      	ldr	r0, [pc, #12]	@ (8011f54 <rmw_uxrce_fini_subscription_memory+0x28>)
 8011f46:	f006 fad7 	bl	80184f8 <put_memory>
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	6063      	str	r3, [r4, #4]
 8011f4e:	bd10      	pop	{r4, pc}
 8011f50:	0801deb8 	.word	0x0801deb8
 8011f54:	2000e564 	.word	0x2000e564

08011f58 <rmw_uxrce_fini_service_memory>:
 8011f58:	b510      	push	{r4, lr}
 8011f5a:	4604      	mov	r4, r0
 8011f5c:	6800      	ldr	r0, [r0, #0]
 8011f5e:	b128      	cbz	r0, 8011f6c <rmw_uxrce_fini_service_memory+0x14>
 8011f60:	4b06      	ldr	r3, [pc, #24]	@ (8011f7c <rmw_uxrce_fini_service_memory+0x24>)
 8011f62:	6819      	ldr	r1, [r3, #0]
 8011f64:	f7ee f934 	bl	80001d0 <strcmp>
 8011f68:	b938      	cbnz	r0, 8011f7a <rmw_uxrce_fini_service_memory+0x22>
 8011f6a:	6020      	str	r0, [r4, #0]
 8011f6c:	6861      	ldr	r1, [r4, #4]
 8011f6e:	b121      	cbz	r1, 8011f7a <rmw_uxrce_fini_service_memory+0x22>
 8011f70:	4803      	ldr	r0, [pc, #12]	@ (8011f80 <rmw_uxrce_fini_service_memory+0x28>)
 8011f72:	f006 fac1 	bl	80184f8 <put_memory>
 8011f76:	2300      	movs	r3, #0
 8011f78:	6063      	str	r3, [r4, #4]
 8011f7a:	bd10      	pop	{r4, pc}
 8011f7c:	0801deb8 	.word	0x0801deb8
 8011f80:	2000e534 	.word	0x2000e534

08011f84 <rmw_uxrce_fini_client_memory>:
 8011f84:	b510      	push	{r4, lr}
 8011f86:	4604      	mov	r4, r0
 8011f88:	6800      	ldr	r0, [r0, #0]
 8011f8a:	b128      	cbz	r0, 8011f98 <rmw_uxrce_fini_client_memory+0x14>
 8011f8c:	4b06      	ldr	r3, [pc, #24]	@ (8011fa8 <rmw_uxrce_fini_client_memory+0x24>)
 8011f8e:	6819      	ldr	r1, [r3, #0]
 8011f90:	f7ee f91e 	bl	80001d0 <strcmp>
 8011f94:	b938      	cbnz	r0, 8011fa6 <rmw_uxrce_fini_client_memory+0x22>
 8011f96:	6020      	str	r0, [r4, #0]
 8011f98:	6861      	ldr	r1, [r4, #4]
 8011f9a:	b121      	cbz	r1, 8011fa6 <rmw_uxrce_fini_client_memory+0x22>
 8011f9c:	4803      	ldr	r0, [pc, #12]	@ (8011fac <rmw_uxrce_fini_client_memory+0x28>)
 8011f9e:	f006 faab 	bl	80184f8 <put_memory>
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	6063      	str	r3, [r4, #4]
 8011fa6:	bd10      	pop	{r4, pc}
 8011fa8:	0801deb8 	.word	0x0801deb8
 8011fac:	20009c48 	.word	0x20009c48

08011fb0 <rmw_uxrce_fini_topic_memory>:
 8011fb0:	b510      	push	{r4, lr}
 8011fb2:	4604      	mov	r4, r0
 8011fb4:	4621      	mov	r1, r4
 8011fb6:	4803      	ldr	r0, [pc, #12]	@ (8011fc4 <rmw_uxrce_fini_topic_memory+0x14>)
 8011fb8:	f006 fa9e 	bl	80184f8 <put_memory>
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	61a3      	str	r3, [r4, #24]
 8011fc0:	bd10      	pop	{r4, pc}
 8011fc2:	bf00      	nop
 8011fc4:	2000e574 	.word	0x2000e574

08011fc8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011fc8:	b082      	sub	sp, #8
 8011fca:	b530      	push	{r4, r5, lr}
 8011fcc:	4925      	ldr	r1, [pc, #148]	@ (8012064 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011fce:	680d      	ldr	r5, [r1, #0]
 8011fd0:	ac03      	add	r4, sp, #12
 8011fd2:	e884 000c 	stmia.w	r4, {r2, r3}
 8011fd6:	461c      	mov	r4, r3
 8011fd8:	2d00      	cmp	r5, #0
 8011fda:	d041      	beq.n	8012060 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8011fdc:	462b      	mov	r3, r5
 8011fde:	2100      	movs	r1, #0
 8011fe0:	689a      	ldr	r2, [r3, #8]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8011fe8:	4290      	cmp	r0, r2
 8011fea:	bf08      	it	eq
 8011fec:	3101      	addeq	r1, #1
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d1f6      	bne.n	8011fe0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8011ff2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011ff6:	2b02      	cmp	r3, #2
 8011ff8:	d029      	beq.n	801204e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011ffa:	d907      	bls.n	801200c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011ffc:	2b03      	cmp	r3, #3
 8011ffe:	d005      	beq.n	801200c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8012000:	2100      	movs	r1, #0
 8012002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012006:	4608      	mov	r0, r1
 8012008:	b002      	add	sp, #8
 801200a:	4770      	bx	lr
 801200c:	b314      	cbz	r4, 8012054 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801200e:	428c      	cmp	r4, r1
 8012010:	d820      	bhi.n	8012054 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8012012:	2d00      	cmp	r5, #0
 8012014:	d0f4      	beq.n	8012000 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8012016:	2100      	movs	r1, #0
 8012018:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801201c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8012020:	e002      	b.n	8012028 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8012022:	686d      	ldr	r5, [r5, #4]
 8012024:	2d00      	cmp	r5, #0
 8012026:	d0ec      	beq.n	8012002 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8012028:	68ab      	ldr	r3, [r5, #8]
 801202a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 801202e:	4290      	cmp	r0, r2
 8012030:	d1f7      	bne.n	8012022 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8012032:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8012036:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801203a:	4562      	cmp	r2, ip
 801203c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012040:	eb73 0e04 	sbcs.w	lr, r3, r4
 8012044:	daed      	bge.n	8012022 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8012046:	4694      	mov	ip, r2
 8012048:	461c      	mov	r4, r3
 801204a:	4629      	mov	r1, r5
 801204c:	e7e9      	b.n	8012022 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801204e:	b10c      	cbz	r4, 8012054 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8012050:	428c      	cmp	r4, r1
 8012052:	d9d5      	bls.n	8012000 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8012054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012058:	4802      	ldr	r0, [pc, #8]	@ (8012064 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801205a:	b002      	add	sp, #8
 801205c:	f006 ba3c 	b.w	80184d8 <get_memory>
 8012060:	4629      	mov	r1, r5
 8012062:	e7c6      	b.n	8011ff2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8012064:	2000e554 	.word	0x2000e554

08012068 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8012068:	4b11      	ldr	r3, [pc, #68]	@ (80120b0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	b530      	push	{r4, r5, lr}
 801206e:	b1e3      	cbz	r3, 80120aa <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8012070:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8012074:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8012078:	2400      	movs	r4, #0
 801207a:	e001      	b.n	8012080 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	b193      	cbz	r3, 80120a6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8012080:	689a      	ldr	r2, [r3, #8]
 8012082:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8012086:	4288      	cmp	r0, r1
 8012088:	d1f8      	bne.n	801207c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801208a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 801208e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8012092:	4571      	cmp	r1, lr
 8012094:	eb72 050c 	sbcs.w	r5, r2, ip
 8012098:	daf0      	bge.n	801207c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 801209a:	461c      	mov	r4, r3
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	468e      	mov	lr, r1
 80120a0:	4694      	mov	ip, r2
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d1ec      	bne.n	8012080 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80120a6:	4620      	mov	r0, r4
 80120a8:	bd30      	pop	{r4, r5, pc}
 80120aa:	461c      	mov	r4, r3
 80120ac:	4620      	mov	r0, r4
 80120ae:	bd30      	pop	{r4, r5, pc}
 80120b0:	2000e554 	.word	0x2000e554
 80120b4:	00000000 	.word	0x00000000

080120b8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80120b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120bc:	4b3c      	ldr	r3, [pc, #240]	@ (80121b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80120be:	ed2d 8b06 	vpush	{d8-d10}
 80120c2:	681f      	ldr	r7, [r3, #0]
 80120c4:	b08d      	sub	sp, #52	@ 0x34
 80120c6:	f007 fb6f 	bl	80197a8 <rmw_uros_epoch_nanos>
 80120ca:	2f00      	cmp	r7, #0
 80120cc:	d05d      	beq.n	801218a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80120ce:	46b8      	mov	r8, r7
 80120d0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8012198 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 80120d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80120d8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 80120dc:	2b04      	cmp	r3, #4
 80120de:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80121a0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 80120e2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 80121a8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 80120e6:	4681      	mov	r9, r0
 80120e8:	468a      	mov	sl, r1
 80120ea:	ac04      	add	r4, sp, #16
 80120ec:	d03f      	beq.n	801216e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80120ee:	2b05      	cmp	r3, #5
 80120f0:	d044      	beq.n	801217c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80120f2:	2b03      	cmp	r3, #3
 80120f4:	d03b      	beq.n	801216e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 80120f6:	ed8d 8b04 	vstr	d8, [sp, #16]
 80120fa:	ed8d ab06 	vstr	d10, [sp, #24]
 80120fe:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012102:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8012106:	ab08      	add	r3, sp, #32
 8012108:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801210a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801210e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012112:	f006 f815 	bl	8018140 <rmw_time_equal>
 8012116:	b118      	cbz	r0, 8012120 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8012118:	ed8d 9b04 	vstr	d9, [sp, #16]
 801211c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012120:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012124:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8012128:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 801212c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8012130:	f006 f85a 	bl	80181e8 <rmw_time_total_nsec>
 8012134:	1830      	adds	r0, r6, r0
 8012136:	eb47 0101 	adc.w	r1, r7, r1
 801213a:	4548      	cmp	r0, r9
 801213c:	eb71 030a 	sbcs.w	r3, r1, sl
 8012140:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8012144:	db05      	blt.n	8012152 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8012146:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801214a:	4591      	cmp	r9, r2
 801214c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8012150:	da03      	bge.n	801215a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8012152:	4817      	ldr	r0, [pc, #92]	@ (80121b0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8012154:	4641      	mov	r1, r8
 8012156:	f006 f9cf 	bl	80184f8 <put_memory>
 801215a:	f1bb 0f00 	cmp.w	fp, #0
 801215e:	d014      	beq.n	801218a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8012160:	46d8      	mov	r8, fp
 8012162:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012166:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801216a:	2b04      	cmp	r3, #4
 801216c:	d1bf      	bne.n	80120ee <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801216e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8012172:	3340      	adds	r3, #64	@ 0x40
 8012174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801217a:	e7c0      	b.n	80120fe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801217c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8012180:	3348      	adds	r3, #72	@ 0x48
 8012182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012188:	e7b9      	b.n	80120fe <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801218a:	b00d      	add	sp, #52	@ 0x34
 801218c:	ecbd 8b06 	vpop	{d8-d10}
 8012190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012194:	f3af 8000 	nop.w
	...
 80121a0:	00000001 	.word	0x00000001
 80121a4:	00000000 	.word	0x00000000
 80121a8:	0000001e 	.word	0x0000001e
 80121ac:	00000000 	.word	0x00000000
 80121b0:	2000e554 	.word	0x2000e554

080121b4 <run_xrce_session>:
 80121b4:	b510      	push	{r4, lr}
 80121b6:	788c      	ldrb	r4, [r1, #2]
 80121b8:	b086      	sub	sp, #24
 80121ba:	2c01      	cmp	r4, #1
 80121bc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80121c0:	d00c      	beq.n	80121dc <run_xrce_session+0x28>
 80121c2:	4619      	mov	r1, r3
 80121c4:	2301      	movs	r3, #1
 80121c6:	9300      	str	r3, [sp, #0]
 80121c8:	f10d 020e 	add.w	r2, sp, #14
 80121cc:	f10d 0317 	add.w	r3, sp, #23
 80121d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80121d4:	f001 f8d2 	bl	801337c <uxr_run_session_until_all_status>
 80121d8:	b006      	add	sp, #24
 80121da:	bd10      	pop	{r4, pc}
 80121dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80121e0:	f000 fce6 	bl	8012bb0 <uxr_flash_output_streams>
 80121e4:	4620      	mov	r0, r4
 80121e6:	b006      	add	sp, #24
 80121e8:	bd10      	pop	{r4, pc}
 80121ea:	bf00      	nop

080121ec <convert_qos_profile>:
 80121ec:	7a4a      	ldrb	r2, [r1, #9]
 80121ee:	f891 c008 	ldrb.w	ip, [r1, #8]
 80121f2:	2a02      	cmp	r2, #2
 80121f4:	bf18      	it	ne
 80121f6:	2200      	movne	r2, #0
 80121f8:	7002      	strb	r2, [r0, #0]
 80121fa:	780a      	ldrb	r2, [r1, #0]
 80121fc:	8889      	ldrh	r1, [r1, #4]
 80121fe:	8081      	strh	r1, [r0, #4]
 8012200:	f1ac 0c02 	sub.w	ip, ip, #2
 8012204:	f1a2 0202 	sub.w	r2, r2, #2
 8012208:	fabc fc8c 	clz	ip, ip
 801220c:	fab2 f282 	clz	r2, r2
 8012210:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8012214:	0952      	lsrs	r2, r2, #5
 8012216:	f880 c001 	strb.w	ip, [r0, #1]
 801221a:	7082      	strb	r2, [r0, #2]
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop

08012220 <generate_type_name>:
 8012220:	b530      	push	{r4, r5, lr}
 8012222:	2300      	movs	r3, #0
 8012224:	700b      	strb	r3, [r1, #0]
 8012226:	6803      	ldr	r3, [r0, #0]
 8012228:	b087      	sub	sp, #28
 801222a:	4614      	mov	r4, r2
 801222c:	b1d3      	cbz	r3, 8012264 <generate_type_name+0x44>
 801222e:	4a0f      	ldr	r2, [pc, #60]	@ (801226c <generate_type_name+0x4c>)
 8012230:	4615      	mov	r5, r2
 8012232:	9203      	str	r2, [sp, #12]
 8012234:	9500      	str	r5, [sp, #0]
 8012236:	6842      	ldr	r2, [r0, #4]
 8012238:	480d      	ldr	r0, [pc, #52]	@ (8012270 <generate_type_name+0x50>)
 801223a:	9001      	str	r0, [sp, #4]
 801223c:	4608      	mov	r0, r1
 801223e:	490d      	ldr	r1, [pc, #52]	@ (8012274 <generate_type_name+0x54>)
 8012240:	9204      	str	r2, [sp, #16]
 8012242:	9105      	str	r1, [sp, #20]
 8012244:	9102      	str	r1, [sp, #8]
 8012246:	4a0c      	ldr	r2, [pc, #48]	@ (8012278 <generate_type_name+0x58>)
 8012248:	4621      	mov	r1, r4
 801224a:	f009 ffb3 	bl	801c1b4 <sniprintf>
 801224e:	2800      	cmp	r0, #0
 8012250:	db05      	blt.n	801225e <generate_type_name+0x3e>
 8012252:	4284      	cmp	r4, r0
 8012254:	bfd4      	ite	le
 8012256:	2000      	movle	r0, #0
 8012258:	2001      	movgt	r0, #1
 801225a:	b007      	add	sp, #28
 801225c:	bd30      	pop	{r4, r5, pc}
 801225e:	2000      	movs	r0, #0
 8012260:	b007      	add	sp, #28
 8012262:	bd30      	pop	{r4, r5, pc}
 8012264:	4b05      	ldr	r3, [pc, #20]	@ (801227c <generate_type_name+0x5c>)
 8012266:	4a01      	ldr	r2, [pc, #4]	@ (801226c <generate_type_name+0x4c>)
 8012268:	461d      	mov	r5, r3
 801226a:	e7e2      	b.n	8012232 <generate_type_name+0x12>
 801226c:	0801d554 	.word	0x0801d554
 8012270:	0801d56c 	.word	0x0801d56c
 8012274:	0801d568 	.word	0x0801d568
 8012278:	0801d558 	.word	0x0801d558
 801227c:	0801d89c 	.word	0x0801d89c

08012280 <generate_topic_name>:
 8012280:	b510      	push	{r4, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	4614      	mov	r4, r2
 8012286:	9000      	str	r0, [sp, #0]
 8012288:	4b08      	ldr	r3, [pc, #32]	@ (80122ac <generate_topic_name+0x2c>)
 801228a:	4a09      	ldr	r2, [pc, #36]	@ (80122b0 <generate_topic_name+0x30>)
 801228c:	4608      	mov	r0, r1
 801228e:	4621      	mov	r1, r4
 8012290:	f009 ff90 	bl	801c1b4 <sniprintf>
 8012294:	2800      	cmp	r0, #0
 8012296:	db05      	blt.n	80122a4 <generate_topic_name+0x24>
 8012298:	4284      	cmp	r4, r0
 801229a:	bfd4      	ite	le
 801229c:	2000      	movle	r0, #0
 801229e:	2001      	movgt	r0, #1
 80122a0:	b002      	add	sp, #8
 80122a2:	bd10      	pop	{r4, pc}
 80122a4:	2000      	movs	r0, #0
 80122a6:	b002      	add	sp, #8
 80122a8:	bd10      	pop	{r4, pc}
 80122aa:	bf00      	nop
 80122ac:	0801dcb4 	.word	0x0801dcb4
 80122b0:	0801d570 	.word	0x0801d570

080122b4 <is_uxrce_rmw_identifier_valid>:
 80122b4:	b510      	push	{r4, lr}
 80122b6:	4604      	mov	r4, r0
 80122b8:	b140      	cbz	r0, 80122cc <is_uxrce_rmw_identifier_valid+0x18>
 80122ba:	f006 f975 	bl	80185a8 <rmw_get_implementation_identifier>
 80122be:	4601      	mov	r1, r0
 80122c0:	4620      	mov	r0, r4
 80122c2:	f7ed ff85 	bl	80001d0 <strcmp>
 80122c6:	fab0 f080 	clz	r0, r0
 80122ca:	0940      	lsrs	r0, r0, #5
 80122cc:	bd10      	pop	{r4, pc}
 80122ce:	bf00      	nop

080122d0 <get_message_typesupport_handle>:
 80122d0:	6883      	ldr	r3, [r0, #8]
 80122d2:	4718      	bx	r3

080122d4 <get_message_typesupport_handle_function>:
 80122d4:	b510      	push	{r4, lr}
 80122d6:	4604      	mov	r4, r0
 80122d8:	6800      	ldr	r0, [r0, #0]
 80122da:	f7ed ff79 	bl	80001d0 <strcmp>
 80122de:	2800      	cmp	r0, #0
 80122e0:	bf0c      	ite	eq
 80122e2:	4620      	moveq	r0, r4
 80122e4:	2000      	movne	r0, #0
 80122e6:	bd10      	pop	{r4, pc}

080122e8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80122e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ec:	6805      	ldr	r5, [r0, #0]
 80122ee:	4604      	mov	r4, r0
 80122f0:	4628      	mov	r0, r5
 80122f2:	460e      	mov	r6, r1
 80122f4:	f7ed ff6c 	bl	80001d0 <strcmp>
 80122f8:	b1c8      	cbz	r0, 801232e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80122fa:	4b11      	ldr	r3, [pc, #68]	@ (8012340 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	429d      	cmp	r5, r3
 8012300:	d112      	bne.n	8012328 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012302:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012306:	f8d8 4000 	ldr.w	r4, [r8]
 801230a:	b16c      	cbz	r4, 8012328 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801230c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012310:	2700      	movs	r7, #0
 8012312:	3d04      	subs	r5, #4
 8012314:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012318:	4631      	mov	r1, r6
 801231a:	f7ed ff59 	bl	80001d0 <strcmp>
 801231e:	00bb      	lsls	r3, r7, #2
 8012320:	b140      	cbz	r0, 8012334 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012322:	3701      	adds	r7, #1
 8012324:	42bc      	cmp	r4, r7
 8012326:	d1f5      	bne.n	8012314 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012328:	2000      	movs	r0, #0
 801232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801232e:	4620      	mov	r0, r4
 8012330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012334:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801233c:	58d3      	ldr	r3, [r2, r3]
 801233e:	4718      	bx	r3
 8012340:	200001f0 	.word	0x200001f0

08012344 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8012344:	4b04      	ldr	r3, [pc, #16]	@ (8012358 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	b10a      	cbz	r2, 801234e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 801234a:	4803      	ldr	r0, [pc, #12]	@ (8012358 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 801234c:	4770      	bx	lr
 801234e:	4a03      	ldr	r2, [pc, #12]	@ (801235c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 8012350:	4801      	ldr	r0, [pc, #4]	@ (8012358 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 8012352:	6812      	ldr	r2, [r2, #0]
 8012354:	601a      	str	r2, [r3, #0]
 8012356:	4770      	bx	lr
 8012358:	20000200 	.word	0x20000200
 801235c:	200001f0 	.word	0x200001f0

08012360 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8012360:	4a02      	ldr	r2, [pc, #8]	@ (801236c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0xc>)
 8012362:	4b03      	ldr	r3, [pc, #12]	@ (8012370 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32+0x10>)
 8012364:	6812      	ldr	r2, [r2, #0]
 8012366:	601a      	str	r2, [r3, #0]
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	200001f0 	.word	0x200001f0
 8012370:	20000200 	.word	0x20000200

08012374 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012374:	4b04      	ldr	r3, [pc, #16]	@ (8012388 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	b10a      	cbz	r2, 801237e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801237a:	4803      	ldr	r0, [pc, #12]	@ (8012388 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801237c:	4770      	bx	lr
 801237e:	4a03      	ldr	r2, [pc, #12]	@ (801238c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8012380:	4801      	ldr	r0, [pc, #4]	@ (8012388 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012382:	6812      	ldr	r2, [r2, #0]
 8012384:	601a      	str	r2, [r3, #0]
 8012386:	4770      	bx	lr
 8012388:	20000214 	.word	0x20000214
 801238c:	200001f0 	.word	0x200001f0

08012390 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012390:	4a02      	ldr	r2, [pc, #8]	@ (801239c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8012392:	4b03      	ldr	r3, [pc, #12]	@ (80123a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8012394:	6812      	ldr	r2, [r2, #0]
 8012396:	601a      	str	r2, [r3, #0]
 8012398:	4770      	bx	lr
 801239a:	bf00      	nop
 801239c:	200001f0 	.word	0x200001f0
 80123a0:	20000214 	.word	0x20000214

080123a4 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_init_function>:
 80123a4:	f007 ba0e 	b.w	80197c4 <std_msgs__msg__Float32__init>

080123a8 <std_msgs__msg__Float32__rosidl_typesupport_introspection_c__Float32_fini_function>:
 80123a8:	f007 ba10 	b.w	80197cc <std_msgs__msg__Float32__fini>

080123ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 80123ac:	4b04      	ldr	r3, [pc, #16]	@ (80123c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 80123ae:	681a      	ldr	r2, [r3, #0]
 80123b0:	b10a      	cbz	r2, 80123b6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0xa>
 80123b2:	4803      	ldr	r0, [pc, #12]	@ (80123c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 80123b4:	4770      	bx	lr
 80123b6:	4a03      	ldr	r2, [pc, #12]	@ (80123c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x18>)
 80123b8:	4801      	ldr	r0, [pc, #4]	@ (80123c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32+0x14>)
 80123ba:	6812      	ldr	r2, [r2, #0]
 80123bc:	601a      	str	r2, [r3, #0]
 80123be:	4770      	bx	lr
 80123c0:	2000025c 	.word	0x2000025c
 80123c4:	200001f4 	.word	0x200001f4

080123c8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 80123c8:	f007 ba02 	b.w	80197d0 <std_msgs__msg__Int32__init>

080123cc <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 80123cc:	f007 ba04 	b.w	80197d8 <std_msgs__msg__Int32__fini>

080123d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80123d0:	4b04      	ldr	r3, [pc, #16]	@ (80123e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80123d2:	681a      	ldr	r2, [r3, #0]
 80123d4:	b10a      	cbz	r2, 80123da <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80123d6:	4803      	ldr	r0, [pc, #12]	@ (80123e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80123d8:	4770      	bx	lr
 80123da:	4a03      	ldr	r2, [pc, #12]	@ (80123e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80123dc:	4801      	ldr	r0, [pc, #4]	@ (80123e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80123de:	6812      	ldr	r2, [r2, #0]
 80123e0:	601a      	str	r2, [r3, #0]
 80123e2:	4770      	bx	lr
 80123e4:	200002a4 	.word	0x200002a4
 80123e8:	200001f4 	.word	0x200001f4

080123ec <_Float32__max_serialized_size>:
 80123ec:	b508      	push	{r3, lr}
 80123ee:	2104      	movs	r1, #4
 80123f0:	2000      	movs	r0, #0
 80123f2:	f7fe f8fb 	bl	80105ec <ucdr_alignment>
 80123f6:	3004      	adds	r0, #4
 80123f8:	bd08      	pop	{r3, pc}
 80123fa:	bf00      	nop

080123fc <_Float32__cdr_deserialize>:
 80123fc:	b109      	cbz	r1, 8012402 <_Float32__cdr_deserialize+0x6>
 80123fe:	f7fd be77 	b.w	80100f0 <ucdr_deserialize_float>
 8012402:	4608      	mov	r0, r1
 8012404:	4770      	bx	lr
 8012406:	bf00      	nop

08012408 <get_serialized_size_std_msgs__msg__Float32>:
 8012408:	b138      	cbz	r0, 801241a <get_serialized_size_std_msgs__msg__Float32+0x12>
 801240a:	b508      	push	{r3, lr}
 801240c:	460b      	mov	r3, r1
 801240e:	4618      	mov	r0, r3
 8012410:	2104      	movs	r1, #4
 8012412:	f7fe f8eb 	bl	80105ec <ucdr_alignment>
 8012416:	3004      	adds	r0, #4
 8012418:	bd08      	pop	{r3, pc}
 801241a:	4770      	bx	lr

0801241c <_Float32__cdr_serialize>:
 801241c:	b120      	cbz	r0, 8012428 <_Float32__cdr_serialize+0xc>
 801241e:	ed90 0a00 	vldr	s0, [r0]
 8012422:	4608      	mov	r0, r1
 8012424:	f7fd bdcc 	b.w	800ffc0 <ucdr_serialize_float>
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop

0801242c <_Float32__get_serialized_size>:
 801242c:	b130      	cbz	r0, 801243c <_Float32__get_serialized_size+0x10>
 801242e:	b508      	push	{r3, lr}
 8012430:	2104      	movs	r1, #4
 8012432:	2000      	movs	r0, #0
 8012434:	f7fe f8da 	bl	80105ec <ucdr_alignment>
 8012438:	3004      	adds	r0, #4
 801243a:	bd08      	pop	{r3, pc}
 801243c:	4770      	bx	lr
 801243e:	bf00      	nop

08012440 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32>:
 8012440:	4800      	ldr	r0, [pc, #0]	@ (8012444 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32+0x4>)
 8012442:	4770      	bx	lr
 8012444:	200002b0 	.word	0x200002b0

08012448 <_Int32__max_serialized_size>:
 8012448:	b508      	push	{r3, lr}
 801244a:	2104      	movs	r1, #4
 801244c:	2000      	movs	r0, #0
 801244e:	f7fe f8cd 	bl	80105ec <ucdr_alignment>
 8012452:	3004      	adds	r0, #4
 8012454:	bd08      	pop	{r3, pc}
 8012456:	bf00      	nop

08012458 <_Int32__cdr_deserialize>:
 8012458:	b109      	cbz	r1, 801245e <_Int32__cdr_deserialize+0x6>
 801245a:	f7fd bd21 	b.w	800fea0 <ucdr_deserialize_int32_t>
 801245e:	4608      	mov	r0, r1
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop

08012464 <get_serialized_size_std_msgs__msg__Int32>:
 8012464:	b138      	cbz	r0, 8012476 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8012466:	b508      	push	{r3, lr}
 8012468:	460b      	mov	r3, r1
 801246a:	4618      	mov	r0, r3
 801246c:	2104      	movs	r1, #4
 801246e:	f7fe f8bd 	bl	80105ec <ucdr_alignment>
 8012472:	3004      	adds	r0, #4
 8012474:	bd08      	pop	{r3, pc}
 8012476:	4770      	bx	lr

08012478 <_Int32__cdr_serialize>:
 8012478:	460a      	mov	r2, r1
 801247a:	b118      	cbz	r0, 8012484 <_Int32__cdr_serialize+0xc>
 801247c:	6801      	ldr	r1, [r0, #0]
 801247e:	4610      	mov	r0, r2
 8012480:	f7fd bc76 	b.w	800fd70 <ucdr_serialize_int32_t>
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop

08012488 <_Int32__get_serialized_size>:
 8012488:	b130      	cbz	r0, 8012498 <_Int32__get_serialized_size+0x10>
 801248a:	b508      	push	{r3, lr}
 801248c:	2104      	movs	r1, #4
 801248e:	2000      	movs	r0, #0
 8012490:	f7fe f8ac 	bl	80105ec <ucdr_alignment>
 8012494:	3004      	adds	r0, #4
 8012496:	bd08      	pop	{r3, pc}
 8012498:	4770      	bx	lr
 801249a:	bf00      	nop

0801249c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801249c:	4800      	ldr	r0, [pc, #0]	@ (80124a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801249e:	4770      	bx	lr
 80124a0:	200002d8 	.word	0x200002d8

080124a4 <geometry_msgs__msg__Twist__init>:
 80124a4:	b570      	push	{r4, r5, r6, lr}
 80124a6:	4605      	mov	r5, r0
 80124a8:	b1a8      	cbz	r0, 80124d6 <geometry_msgs__msg__Twist__init+0x32>
 80124aa:	f000 f82b 	bl	8012504 <geometry_msgs__msg__Vector3__init>
 80124ae:	4604      	mov	r4, r0
 80124b0:	b140      	cbz	r0, 80124c4 <geometry_msgs__msg__Twist__init+0x20>
 80124b2:	f105 0618 	add.w	r6, r5, #24
 80124b6:	4630      	mov	r0, r6
 80124b8:	f000 f824 	bl	8012504 <geometry_msgs__msg__Vector3__init>
 80124bc:	4604      	mov	r4, r0
 80124be:	b168      	cbz	r0, 80124dc <geometry_msgs__msg__Twist__init+0x38>
 80124c0:	4620      	mov	r0, r4
 80124c2:	bd70      	pop	{r4, r5, r6, pc}
 80124c4:	4628      	mov	r0, r5
 80124c6:	f000 f821 	bl	801250c <geometry_msgs__msg__Vector3__fini>
 80124ca:	f105 0018 	add.w	r0, r5, #24
 80124ce:	f000 f81d 	bl	801250c <geometry_msgs__msg__Vector3__fini>
 80124d2:	4620      	mov	r0, r4
 80124d4:	bd70      	pop	{r4, r5, r6, pc}
 80124d6:	4604      	mov	r4, r0
 80124d8:	4620      	mov	r0, r4
 80124da:	bd70      	pop	{r4, r5, r6, pc}
 80124dc:	4628      	mov	r0, r5
 80124de:	f000 f815 	bl	801250c <geometry_msgs__msg__Vector3__fini>
 80124e2:	4630      	mov	r0, r6
 80124e4:	f000 f812 	bl	801250c <geometry_msgs__msg__Vector3__fini>
 80124e8:	e7ea      	b.n	80124c0 <geometry_msgs__msg__Twist__init+0x1c>
 80124ea:	bf00      	nop

080124ec <geometry_msgs__msg__Twist__fini>:
 80124ec:	b148      	cbz	r0, 8012502 <geometry_msgs__msg__Twist__fini+0x16>
 80124ee:	b510      	push	{r4, lr}
 80124f0:	4604      	mov	r4, r0
 80124f2:	f000 f80b 	bl	801250c <geometry_msgs__msg__Vector3__fini>
 80124f6:	f104 0018 	add.w	r0, r4, #24
 80124fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124fe:	f000 b805 	b.w	801250c <geometry_msgs__msg__Vector3__fini>
 8012502:	4770      	bx	lr

08012504 <geometry_msgs__msg__Vector3__init>:
 8012504:	3800      	subs	r0, #0
 8012506:	bf18      	it	ne
 8012508:	2001      	movne	r0, #1
 801250a:	4770      	bx	lr

0801250c <geometry_msgs__msg__Vector3__fini>:
 801250c:	4770      	bx	lr
 801250e:	bf00      	nop

08012510 <uxr_buffer_delete_entity>:
 8012510:	b510      	push	{r4, lr}
 8012512:	2300      	movs	r3, #0
 8012514:	b08e      	sub	sp, #56	@ 0x38
 8012516:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801251a:	2303      	movs	r3, #3
 801251c:	9300      	str	r3, [sp, #0]
 801251e:	2204      	movs	r2, #4
 8012520:	ab06      	add	r3, sp, #24
 8012522:	4604      	mov	r4, r0
 8012524:	9103      	str	r1, [sp, #12]
 8012526:	f001 f951 	bl	80137cc <uxr_prepare_stream_to_write_submessage>
 801252a:	b918      	cbnz	r0, 8012534 <uxr_buffer_delete_entity+0x24>
 801252c:	4604      	mov	r4, r0
 801252e:	4620      	mov	r0, r4
 8012530:	b00e      	add	sp, #56	@ 0x38
 8012532:	bd10      	pop	{r4, pc}
 8012534:	9902      	ldr	r1, [sp, #8]
 8012536:	aa05      	add	r2, sp, #20
 8012538:	4620      	mov	r0, r4
 801253a:	f001 fa7d 	bl	8013a38 <uxr_init_base_object_request>
 801253e:	a905      	add	r1, sp, #20
 8012540:	4604      	mov	r4, r0
 8012542:	a806      	add	r0, sp, #24
 8012544:	f002 fcce 	bl	8014ee4 <uxr_serialize_DELETE_Payload>
 8012548:	4620      	mov	r0, r4
 801254a:	b00e      	add	sp, #56	@ 0x38
 801254c:	bd10      	pop	{r4, pc}
 801254e:	bf00      	nop

08012550 <uxr_common_create_entity>:
 8012550:	b510      	push	{r4, lr}
 8012552:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012556:	b08c      	sub	sp, #48	@ 0x30
 8012558:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801255c:	f1bc 0f01 	cmp.w	ip, #1
 8012560:	bf0c      	ite	eq
 8012562:	f003 0201 	andeq.w	r2, r3, #1
 8012566:	2200      	movne	r2, #0
 8012568:	330e      	adds	r3, #14
 801256a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801256e:	9101      	str	r1, [sp, #4]
 8012570:	441a      	add	r2, r3
 8012572:	2301      	movs	r3, #1
 8012574:	9300      	str	r3, [sp, #0]
 8012576:	9903      	ldr	r1, [sp, #12]
 8012578:	ab04      	add	r3, sp, #16
 801257a:	b292      	uxth	r2, r2
 801257c:	4604      	mov	r4, r0
 801257e:	f001 f925 	bl	80137cc <uxr_prepare_stream_to_write_submessage>
 8012582:	b918      	cbnz	r0, 801258c <uxr_common_create_entity+0x3c>
 8012584:	4604      	mov	r4, r0
 8012586:	4620      	mov	r0, r4
 8012588:	b00c      	add	sp, #48	@ 0x30
 801258a:	bd10      	pop	{r4, pc}
 801258c:	9902      	ldr	r1, [sp, #8]
 801258e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012590:	4620      	mov	r0, r4
 8012592:	f001 fa51 	bl	8013a38 <uxr_init_base_object_request>
 8012596:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012598:	4604      	mov	r4, r0
 801259a:	a804      	add	r0, sp, #16
 801259c:	f002 fbfe 	bl	8014d9c <uxr_serialize_CREATE_Payload>
 80125a0:	4620      	mov	r0, r4
 80125a2:	b00c      	add	sp, #48	@ 0x30
 80125a4:	bd10      	pop	{r4, pc}
 80125a6:	bf00      	nop

080125a8 <uxr_buffer_create_participant_bin>:
 80125a8:	b570      	push	{r4, r5, r6, lr}
 80125aa:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80125ae:	ac11      	add	r4, sp, #68	@ 0x44
 80125b0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80125b4:	2303      	movs	r3, #3
 80125b6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80125ba:	7223      	strb	r3, [r4, #8]
 80125bc:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80125be:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80125c2:	2201      	movs	r2, #1
 80125c4:	2100      	movs	r1, #0
 80125c6:	4605      	mov	r5, r0
 80125c8:	7122      	strb	r2, [r4, #4]
 80125ca:	f88d 1014 	strb.w	r1, [sp, #20]
 80125ce:	b1cb      	cbz	r3, 8012604 <uxr_buffer_create_participant_bin+0x5c>
 80125d0:	f88d 201c 	strb.w	r2, [sp, #28]
 80125d4:	9308      	str	r3, [sp, #32]
 80125d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125da:	a915      	add	r1, sp, #84	@ 0x54
 80125dc:	a809      	add	r0, sp, #36	@ 0x24
 80125de:	f7fe f801 	bl	80105e4 <ucdr_init_buffer>
 80125e2:	a905      	add	r1, sp, #20
 80125e4:	a809      	add	r0, sp, #36	@ 0x24
 80125e6:	f001 ffbb 	bl	8014560 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80125ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125ec:	9600      	str	r6, [sp, #0]
 80125ee:	9401      	str	r4, [sp, #4]
 80125f0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80125f4:	60e3      	str	r3, [r4, #12]
 80125f6:	4628      	mov	r0, r5
 80125f8:	b29b      	uxth	r3, r3
 80125fa:	f7ff ffa9 	bl	8012550 <uxr_common_create_entity>
 80125fe:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8012602:	bd70      	pop	{r4, r5, r6, pc}
 8012604:	f88d 301c 	strb.w	r3, [sp, #28]
 8012608:	e7e5      	b.n	80125d6 <uxr_buffer_create_participant_bin+0x2e>
 801260a:	bf00      	nop

0801260c <uxr_buffer_create_topic_bin>:
 801260c:	b570      	push	{r4, r5, r6, lr}
 801260e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8012612:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012616:	9105      	str	r1, [sp, #20]
 8012618:	4605      	mov	r5, r0
 801261a:	a997      	add	r1, sp, #604	@ 0x25c
 801261c:	4618      	mov	r0, r3
 801261e:	2302      	movs	r3, #2
 8012620:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8012624:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8012628:	f000 f996 	bl	8012958 <uxr_object_id_to_raw>
 801262c:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 801262e:	9306      	str	r3, [sp, #24]
 8012630:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8012632:	930a      	str	r3, [sp, #40]	@ 0x28
 8012634:	2303      	movs	r3, #3
 8012636:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801263a:	2301      	movs	r3, #1
 801263c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012640:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012644:	a917      	add	r1, sp, #92	@ 0x5c
 8012646:	2300      	movs	r3, #0
 8012648:	a80b      	add	r0, sp, #44	@ 0x2c
 801264a:	f88d 301c 	strb.w	r3, [sp, #28]
 801264e:	f7fd ffc9 	bl	80105e4 <ucdr_init_buffer>
 8012652:	a906      	add	r1, sp, #24
 8012654:	a80b      	add	r0, sp, #44	@ 0x2c
 8012656:	f001 ffa5 	bl	80145a4 <uxr_serialize_OBJK_Topic_Binary>
 801265a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801265c:	9316      	str	r3, [sp, #88]	@ 0x58
 801265e:	ac13      	add	r4, sp, #76	@ 0x4c
 8012660:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012664:	9600      	str	r6, [sp, #0]
 8012666:	9401      	str	r4, [sp, #4]
 8012668:	b29b      	uxth	r3, r3
 801266a:	4628      	mov	r0, r5
 801266c:	f7ff ff70 	bl	8012550 <uxr_common_create_entity>
 8012670:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012674:	bd70      	pop	{r4, r5, r6, pc}
 8012676:	bf00      	nop

08012678 <uxr_buffer_create_publisher_bin>:
 8012678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801267a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801267e:	4605      	mov	r5, r0
 8012680:	9105      	str	r1, [sp, #20]
 8012682:	4618      	mov	r0, r3
 8012684:	2603      	movs	r6, #3
 8012686:	a992      	add	r1, sp, #584	@ 0x248
 8012688:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801268c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012690:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012694:	f000 f960 	bl	8012958 <uxr_object_id_to_raw>
 8012698:	2300      	movs	r3, #0
 801269a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801269e:	a912      	add	r1, sp, #72	@ 0x48
 80126a0:	a806      	add	r0, sp, #24
 80126a2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80126a6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80126aa:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80126ae:	f7fd ff99 	bl	80105e4 <ucdr_init_buffer>
 80126b2:	a993      	add	r1, sp, #588	@ 0x24c
 80126b4:	a806      	add	r0, sp, #24
 80126b6:	f002 f829 	bl	801470c <uxr_serialize_OBJK_Publisher_Binary>
 80126ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80126be:	ac0e      	add	r4, sp, #56	@ 0x38
 80126c0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80126c4:	9700      	str	r7, [sp, #0]
 80126c6:	9401      	str	r4, [sp, #4]
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	4628      	mov	r0, r5
 80126cc:	f7ff ff40 	bl	8012550 <uxr_common_create_entity>
 80126d0:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80126d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126d6:	bf00      	nop

080126d8 <uxr_buffer_create_subscriber_bin>:
 80126d8:	b570      	push	{r4, r5, r6, lr}
 80126da:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 80126de:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80126e2:	9105      	str	r1, [sp, #20]
 80126e4:	4605      	mov	r5, r0
 80126e6:	a992      	add	r1, sp, #584	@ 0x248
 80126e8:	4618      	mov	r0, r3
 80126ea:	2304      	movs	r3, #4
 80126ec:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80126f0:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80126f4:	f000 f930 	bl	8012958 <uxr_object_id_to_raw>
 80126f8:	2300      	movs	r3, #0
 80126fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80126fe:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012702:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012706:	a912      	add	r1, sp, #72	@ 0x48
 8012708:	2303      	movs	r3, #3
 801270a:	a806      	add	r0, sp, #24
 801270c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012710:	f7fd ff68 	bl	80105e4 <ucdr_init_buffer>
 8012714:	a993      	add	r1, sp, #588	@ 0x24c
 8012716:	a806      	add	r0, sp, #24
 8012718:	f002 f8a8 	bl	801486c <uxr_serialize_OBJK_Subscriber_Binary>
 801271c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801271e:	9311      	str	r3, [sp, #68]	@ 0x44
 8012720:	ac0e      	add	r4, sp, #56	@ 0x38
 8012722:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012726:	9600      	str	r6, [sp, #0]
 8012728:	9401      	str	r4, [sp, #4]
 801272a:	b29b      	uxth	r3, r3
 801272c:	4628      	mov	r0, r5
 801272e:	f7ff ff0f 	bl	8012550 <uxr_common_create_entity>
 8012732:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8012736:	bd70      	pop	{r4, r5, r6, pc}

08012738 <uxr_buffer_create_datawriter_bin>:
 8012738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801273c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012740:	ac1d      	add	r4, sp, #116	@ 0x74
 8012742:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012746:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801274a:	9105      	str	r1, [sp, #20]
 801274c:	4606      	mov	r6, r0
 801274e:	a9a1      	add	r1, sp, #644	@ 0x284
 8012750:	4618      	mov	r0, r3
 8012752:	2305      	movs	r3, #5
 8012754:	7123      	strb	r3, [r4, #4]
 8012756:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801275a:	2703      	movs	r7, #3
 801275c:	f000 f8fc 	bl	8012958 <uxr_object_id_to_raw>
 8012760:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012762:	7227      	strb	r7, [r4, #8]
 8012764:	a90e      	add	r1, sp, #56	@ 0x38
 8012766:	f000 f8f7 	bl	8012958 <uxr_object_id_to_raw>
 801276a:	2300      	movs	r3, #0
 801276c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012770:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8012774:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012778:	3d00      	subs	r5, #0
 801277a:	bf18      	it	ne
 801277c:	2501      	movne	r5, #1
 801277e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012782:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012786:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801278a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801278e:	2301      	movs	r3, #1
 8012790:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012794:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012798:	bb8a      	cbnz	r2, 80127fe <uxr_buffer_create_datawriter_bin+0xc6>
 801279a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801279e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80127a2:	f04f 0c13 	mov.w	ip, #19
 80127a6:	250b      	movs	r5, #11
 80127a8:	2221      	movs	r2, #33	@ 0x21
 80127aa:	2111      	movs	r1, #17
 80127ac:	2009      	movs	r0, #9
 80127ae:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80127b2:	b923      	cbnz	r3, 80127be <uxr_buffer_create_datawriter_bin+0x86>
 80127b4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80127b8:	4672      	mov	r2, lr
 80127ba:	4661      	mov	r1, ip
 80127bc:	4628      	mov	r0, r5
 80127be:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d025      	beq.n	8012812 <uxr_buffer_create_datawriter_bin+0xda>
 80127c6:	2b03      	cmp	r3, #3
 80127c8:	d029      	beq.n	801281e <uxr_buffer_create_datawriter_bin+0xe6>
 80127ca:	b32b      	cbz	r3, 8012818 <uxr_buffer_create_datawriter_bin+0xe0>
 80127cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127d0:	a921      	add	r1, sp, #132	@ 0x84
 80127d2:	a806      	add	r0, sp, #24
 80127d4:	f7fd ff06 	bl	80105e4 <ucdr_init_buffer>
 80127d8:	a90e      	add	r1, sp, #56	@ 0x38
 80127da:	a806      	add	r0, sp, #24
 80127dc:	f002 f8f8 	bl	80149d0 <uxr_serialize_OBJK_DataWriter_Binary>
 80127e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127e2:	f8cd 8000 	str.w	r8, [sp]
 80127e6:	9401      	str	r4, [sp, #4]
 80127e8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80127ec:	60e3      	str	r3, [r4, #12]
 80127ee:	4630      	mov	r0, r6
 80127f0:	b29b      	uxth	r3, r3
 80127f2:	f7ff fead 	bl	8012550 <uxr_common_create_entity>
 80127f6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80127fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127fe:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8012802:	f04f 0c12 	mov.w	ip, #18
 8012806:	250a      	movs	r5, #10
 8012808:	2220      	movs	r2, #32
 801280a:	2110      	movs	r1, #16
 801280c:	2008      	movs	r0, #8
 801280e:	2702      	movs	r7, #2
 8012810:	e7cd      	b.n	80127ae <uxr_buffer_create_datawriter_bin+0x76>
 8012812:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012816:	e7d9      	b.n	80127cc <uxr_buffer_create_datawriter_bin+0x94>
 8012818:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801281c:	e7d6      	b.n	80127cc <uxr_buffer_create_datawriter_bin+0x94>
 801281e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8012822:	e7d3      	b.n	80127cc <uxr_buffer_create_datawriter_bin+0x94>

08012824 <uxr_buffer_create_datareader_bin>:
 8012824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012828:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801282c:	ac1f      	add	r4, sp, #124	@ 0x7c
 801282e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012832:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8012836:	9105      	str	r1, [sp, #20]
 8012838:	4606      	mov	r6, r0
 801283a:	a9a3      	add	r1, sp, #652	@ 0x28c
 801283c:	4618      	mov	r0, r3
 801283e:	2306      	movs	r3, #6
 8012840:	7123      	strb	r3, [r4, #4]
 8012842:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8012846:	2703      	movs	r7, #3
 8012848:	f000 f886 	bl	8012958 <uxr_object_id_to_raw>
 801284c:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801284e:	7227      	strb	r7, [r4, #8]
 8012850:	a90e      	add	r1, sp, #56	@ 0x38
 8012852:	f000 f881 	bl	8012958 <uxr_object_id_to_raw>
 8012856:	2300      	movs	r3, #0
 8012858:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801285c:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8012860:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8012864:	3d00      	subs	r5, #0
 8012866:	bf18      	it	ne
 8012868:	2501      	movne	r5, #1
 801286a:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801286e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012872:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012876:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801287a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801287e:	2301      	movs	r3, #1
 8012880:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012884:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012888:	bb8a      	cbnz	r2, 80128ee <uxr_buffer_create_datareader_bin+0xca>
 801288a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801288e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012892:	f04f 0c13 	mov.w	ip, #19
 8012896:	250b      	movs	r5, #11
 8012898:	2221      	movs	r2, #33	@ 0x21
 801289a:	2111      	movs	r1, #17
 801289c:	2009      	movs	r0, #9
 801289e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 80128a2:	b923      	cbnz	r3, 80128ae <uxr_buffer_create_datareader_bin+0x8a>
 80128a4:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80128a8:	4672      	mov	r2, lr
 80128aa:	4661      	mov	r1, ip
 80128ac:	4628      	mov	r0, r5
 80128ae:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 80128b2:	2b01      	cmp	r3, #1
 80128b4:	d025      	beq.n	8012902 <uxr_buffer_create_datareader_bin+0xde>
 80128b6:	2b03      	cmp	r3, #3
 80128b8:	d029      	beq.n	801290e <uxr_buffer_create_datareader_bin+0xea>
 80128ba:	b32b      	cbz	r3, 8012908 <uxr_buffer_create_datareader_bin+0xe4>
 80128bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80128c0:	a923      	add	r1, sp, #140	@ 0x8c
 80128c2:	a806      	add	r0, sp, #24
 80128c4:	f7fd fe8e 	bl	80105e4 <ucdr_init_buffer>
 80128c8:	a90e      	add	r1, sp, #56	@ 0x38
 80128ca:	a806      	add	r0, sp, #24
 80128cc:	f002 f844 	bl	8014958 <uxr_serialize_OBJK_DataReader_Binary>
 80128d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128d2:	f8cd 8000 	str.w	r8, [sp]
 80128d6:	9401      	str	r4, [sp, #4]
 80128d8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80128dc:	60e3      	str	r3, [r4, #12]
 80128de:	4630      	mov	r0, r6
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	f7ff fe35 	bl	8012550 <uxr_common_create_entity>
 80128e6:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80128ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128ee:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80128f2:	f04f 0c12 	mov.w	ip, #18
 80128f6:	250a      	movs	r5, #10
 80128f8:	2220      	movs	r2, #32
 80128fa:	2110      	movs	r1, #16
 80128fc:	2008      	movs	r0, #8
 80128fe:	2702      	movs	r7, #2
 8012900:	e7cd      	b.n	801289e <uxr_buffer_create_datareader_bin+0x7a>
 8012902:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012906:	e7d9      	b.n	80128bc <uxr_buffer_create_datareader_bin+0x98>
 8012908:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801290c:	e7d6      	b.n	80128bc <uxr_buffer_create_datareader_bin+0x98>
 801290e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8012912:	e7d3      	b.n	80128bc <uxr_buffer_create_datareader_bin+0x98>

08012914 <uxr_object_id>:
 8012914:	b082      	sub	sp, #8
 8012916:	2300      	movs	r3, #0
 8012918:	f88d 1006 	strb.w	r1, [sp, #6]
 801291c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012920:	f360 030f 	bfi	r3, r0, #0, #16
 8012924:	f362 431f 	bfi	r3, r2, #16, #16
 8012928:	4618      	mov	r0, r3
 801292a:	b002      	add	sp, #8
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop

08012930 <uxr_object_id_from_raw>:
 8012930:	7843      	ldrb	r3, [r0, #1]
 8012932:	7801      	ldrb	r1, [r0, #0]
 8012934:	b082      	sub	sp, #8
 8012936:	f003 020f 	and.w	r2, r3, #15
 801293a:	f88d 2006 	strb.w	r2, [sp, #6]
 801293e:	091b      	lsrs	r3, r3, #4
 8012940:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012944:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8012948:	2000      	movs	r0, #0
 801294a:	f363 000f 	bfi	r0, r3, #0, #16
 801294e:	f362 401f 	bfi	r0, r2, #16, #16
 8012952:	b002      	add	sp, #8
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop

08012958 <uxr_object_id_to_raw>:
 8012958:	4602      	mov	r2, r0
 801295a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801295e:	b082      	sub	sp, #8
 8012960:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8012964:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8012968:	f881 c000 	strb.w	ip, [r1]
 801296c:	7048      	strb	r0, [r1, #1]
 801296e:	b002      	add	sp, #8
 8012970:	4770      	bx	lr
 8012972:	bf00      	nop

08012974 <on_get_fragmentation_info>:
 8012974:	b500      	push	{lr}
 8012976:	b08b      	sub	sp, #44	@ 0x2c
 8012978:	4601      	mov	r1, r0
 801297a:	2204      	movs	r2, #4
 801297c:	a802      	add	r0, sp, #8
 801297e:	f7fd fe31 	bl	80105e4 <ucdr_init_buffer>
 8012982:	f10d 0305 	add.w	r3, sp, #5
 8012986:	f10d 0206 	add.w	r2, sp, #6
 801298a:	a901      	add	r1, sp, #4
 801298c:	a802      	add	r0, sp, #8
 801298e:	f001 f9d5 	bl	8013d3c <uxr_read_submessage_header>
 8012992:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012996:	2b0d      	cmp	r3, #13
 8012998:	d003      	beq.n	80129a2 <on_get_fragmentation_info+0x2e>
 801299a:	2000      	movs	r0, #0
 801299c:	b00b      	add	sp, #44	@ 0x2c
 801299e:	f85d fb04 	ldr.w	pc, [sp], #4
 80129a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129a6:	f013 0f02 	tst.w	r3, #2
 80129aa:	bf14      	ite	ne
 80129ac:	2002      	movne	r0, #2
 80129ae:	2001      	moveq	r0, #1
 80129b0:	b00b      	add	sp, #44	@ 0x2c
 80129b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80129b6:	bf00      	nop

080129b8 <read_submessage_get_info>:
 80129b8:	b570      	push	{r4, r5, r6, lr}
 80129ba:	2500      	movs	r5, #0
 80129bc:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80129c0:	4604      	mov	r4, r0
 80129c2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80129c6:	460e      	mov	r6, r1
 80129c8:	a810      	add	r0, sp, #64	@ 0x40
 80129ca:	4629      	mov	r1, r5
 80129cc:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80129d0:	f009 fcd0 	bl	801c374 <memset>
 80129d4:	a903      	add	r1, sp, #12
 80129d6:	4630      	mov	r0, r6
 80129d8:	f002 fa70 	bl	8014ebc <uxr_deserialize_GET_INFO_Payload>
 80129dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80129e0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80129e4:	4620      	mov	r0, r4
 80129e6:	f001 f81f 	bl	8013a28 <uxr_session_header_offset>
 80129ea:	462b      	mov	r3, r5
 80129ec:	9000      	str	r0, [sp, #0]
 80129ee:	220c      	movs	r2, #12
 80129f0:	a905      	add	r1, sp, #20
 80129f2:	a808      	add	r0, sp, #32
 80129f4:	f7fd fde4 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 80129f8:	a910      	add	r1, sp, #64	@ 0x40
 80129fa:	a808      	add	r0, sp, #32
 80129fc:	f002 fad0 	bl	8014fa0 <uxr_serialize_INFO_Payload>
 8012a00:	9b08      	ldr	r3, [sp, #32]
 8012a02:	462a      	mov	r2, r5
 8012a04:	4629      	mov	r1, r5
 8012a06:	4620      	mov	r0, r4
 8012a08:	f000 ffb8 	bl	801397c <uxr_stamp_session_header>
 8012a0c:	a808      	add	r0, sp, #32
 8012a0e:	f7fd fe15 	bl	801063c <ucdr_buffer_length>
 8012a12:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012a14:	4602      	mov	r2, r0
 8012a16:	a905      	add	r1, sp, #20
 8012a18:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012a1c:	47a0      	blx	r4
 8012a1e:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8012a22:	bd70      	pop	{r4, r5, r6, pc}

08012a24 <write_submessage_acknack.isra.0>:
 8012a24:	b570      	push	{r4, r5, r6, lr}
 8012a26:	b092      	sub	sp, #72	@ 0x48
 8012a28:	4605      	mov	r5, r0
 8012a2a:	460e      	mov	r6, r1
 8012a2c:	4614      	mov	r4, r2
 8012a2e:	f000 fffb 	bl	8013a28 <uxr_session_header_offset>
 8012a32:	a905      	add	r1, sp, #20
 8012a34:	9000      	str	r0, [sp, #0]
 8012a36:	2300      	movs	r3, #0
 8012a38:	a80a      	add	r0, sp, #40	@ 0x28
 8012a3a:	2211      	movs	r2, #17
 8012a3c:	f7fd fdc0 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 8012a40:	2218      	movs	r2, #24
 8012a42:	fb02 5404 	mla	r4, r2, r4, r5
 8012a46:	2300      	movs	r3, #0
 8012a48:	2205      	movs	r2, #5
 8012a4a:	3450      	adds	r4, #80	@ 0x50
 8012a4c:	210a      	movs	r1, #10
 8012a4e:	a80a      	add	r0, sp, #40	@ 0x28
 8012a50:	f001 f95a 	bl	8013d08 <uxr_buffer_submessage_header>
 8012a54:	a903      	add	r1, sp, #12
 8012a56:	4620      	mov	r0, r4
 8012a58:	f007 fac0 	bl	8019fdc <uxr_compute_acknack>
 8012a5c:	ba40      	rev16	r0, r0
 8012a5e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012a62:	a903      	add	r1, sp, #12
 8012a64:	a80a      	add	r0, sp, #40	@ 0x28
 8012a66:	f88d 6010 	strb.w	r6, [sp, #16]
 8012a6a:	f002 fb09 	bl	8015080 <uxr_serialize_ACKNACK_Payload>
 8012a6e:	2200      	movs	r2, #0
 8012a70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a72:	4611      	mov	r1, r2
 8012a74:	4628      	mov	r0, r5
 8012a76:	f000 ff81 	bl	801397c <uxr_stamp_session_header>
 8012a7a:	a80a      	add	r0, sp, #40	@ 0x28
 8012a7c:	f7fd fdde 	bl	801063c <ucdr_buffer_length>
 8012a80:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8012a82:	4602      	mov	r2, r0
 8012a84:	a905      	add	r1, sp, #20
 8012a86:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012a8a:	47a0      	blx	r4
 8012a8c:	b012      	add	sp, #72	@ 0x48
 8012a8e:	bd70      	pop	{r4, r5, r6, pc}

08012a90 <uxr_init_session>:
 8012a90:	b510      	push	{r4, lr}
 8012a92:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012ac8 <uxr_init_session+0x38>
 8012a96:	2300      	movs	r3, #0
 8012a98:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8012aa2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8012aa6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8012aaa:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8012aae:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8012ab2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8012ab6:	2181      	movs	r1, #129	@ 0x81
 8012ab8:	f000 fecc 	bl	8013854 <uxr_init_session_info>
 8012abc:	f104 0008 	add.w	r0, r4, #8
 8012ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ac4:	f001 b83c 	b.w	8013b40 <uxr_init_stream_storage>
	...

08012ad0 <uxr_set_status_callback>:
 8012ad0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop

08012ad8 <uxr_set_topic_callback>:
 8012ad8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop

08012ae0 <uxr_set_request_callback>:
 8012ae0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8012ae4:	4770      	bx	lr
 8012ae6:	bf00      	nop

08012ae8 <uxr_set_reply_callback>:
 8012ae8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8012aec:	4770      	bx	lr
 8012aee:	bf00      	nop

08012af0 <uxr_create_output_best_effort_stream>:
 8012af0:	b510      	push	{r4, lr}
 8012af2:	b084      	sub	sp, #16
 8012af4:	e9cd 2100 	strd	r2, r1, [sp]
 8012af8:	4604      	mov	r4, r0
 8012afa:	f000 ff95 	bl	8013a28 <uxr_session_header_offset>
 8012afe:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012b02:	4603      	mov	r3, r0
 8012b04:	f104 0008 	add.w	r0, r4, #8
 8012b08:	b004      	add	sp, #16
 8012b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b0e:	f001 b861 	b.w	8013bd4 <uxr_add_output_best_effort_buffer>
 8012b12:	bf00      	nop

08012b14 <uxr_create_output_reliable_stream>:
 8012b14:	b510      	push	{r4, lr}
 8012b16:	b088      	sub	sp, #32
 8012b18:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012b1c:	4604      	mov	r4, r0
 8012b1e:	9303      	str	r3, [sp, #12]
 8012b20:	f000 ff82 	bl	8013a28 <uxr_session_header_offset>
 8012b24:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012b28:	9000      	str	r0, [sp, #0]
 8012b2a:	9905      	ldr	r1, [sp, #20]
 8012b2c:	f104 0008 	add.w	r0, r4, #8
 8012b30:	f001 f864 	bl	8013bfc <uxr_add_output_reliable_buffer>
 8012b34:	2200      	movs	r2, #0
 8012b36:	b2c3      	uxtb	r3, r0
 8012b38:	f363 0207 	bfi	r2, r3, #0, #8
 8012b3c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012b40:	f363 220f 	bfi	r2, r3, #8, #8
 8012b44:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012b48:	f363 4217 	bfi	r2, r3, #16, #8
 8012b4c:	0e03      	lsrs	r3, r0, #24
 8012b4e:	f363 621f 	bfi	r2, r3, #24, #8
 8012b52:	4610      	mov	r0, r2
 8012b54:	b008      	add	sp, #32
 8012b56:	bd10      	pop	{r4, pc}

08012b58 <uxr_create_input_best_effort_stream>:
 8012b58:	b082      	sub	sp, #8
 8012b5a:	3008      	adds	r0, #8
 8012b5c:	b002      	add	sp, #8
 8012b5e:	f001 b867 	b.w	8013c30 <uxr_add_input_best_effort_buffer>
 8012b62:	bf00      	nop

08012b64 <uxr_create_input_reliable_stream>:
 8012b64:	b510      	push	{r4, lr}
 8012b66:	b084      	sub	sp, #16
 8012b68:	4c0b      	ldr	r4, [pc, #44]	@ (8012b98 <uxr_create_input_reliable_stream+0x34>)
 8012b6a:	9400      	str	r4, [sp, #0]
 8012b6c:	3008      	adds	r0, #8
 8012b6e:	f001 f875 	bl	8013c5c <uxr_add_input_reliable_buffer>
 8012b72:	2200      	movs	r2, #0
 8012b74:	b2c3      	uxtb	r3, r0
 8012b76:	f363 0207 	bfi	r2, r3, #0, #8
 8012b7a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012b7e:	f363 220f 	bfi	r2, r3, #8, #8
 8012b82:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012b86:	f363 4217 	bfi	r2, r3, #16, #8
 8012b8a:	0e03      	lsrs	r3, r0, #24
 8012b8c:	f363 621f 	bfi	r2, r3, #24, #8
 8012b90:	4610      	mov	r0, r2
 8012b92:	b004      	add	sp, #16
 8012b94:	bd10      	pop	{r4, pc}
 8012b96:	bf00      	nop
 8012b98:	08012975 	.word	0x08012975

08012b9c <uxr_epoch_nanos>:
 8012b9c:	b510      	push	{r4, lr}
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	f001 f912 	bl	8013dc8 <uxr_nanos>
 8012ba4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8012ba8:	1ac0      	subs	r0, r0, r3
 8012baa:	eb61 0102 	sbc.w	r1, r1, r2
 8012bae:	bd10      	pop	{r4, pc}

08012bb0 <uxr_flash_output_streams>:
 8012bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb4:	7e03      	ldrb	r3, [r0, #24]
 8012bb6:	b084      	sub	sp, #16
 8012bb8:	4604      	mov	r4, r0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d035      	beq.n	8012c2a <uxr_flash_output_streams+0x7a>
 8012bbe:	f04f 0900 	mov.w	r9, #0
 8012bc2:	4648      	mov	r0, r9
 8012bc4:	f10d 0802 	add.w	r8, sp, #2
 8012bc8:	af03      	add	r7, sp, #12
 8012bca:	ae02      	add	r6, sp, #8
 8012bcc:	e006      	b.n	8012bdc <uxr_flash_output_streams+0x2c>
 8012bce:	7e23      	ldrb	r3, [r4, #24]
 8012bd0:	f109 0901 	add.w	r9, r9, #1
 8012bd4:	fa5f f089 	uxtb.w	r0, r9
 8012bd8:	4283      	cmp	r3, r0
 8012bda:	d926      	bls.n	8012c2a <uxr_flash_output_streams+0x7a>
 8012bdc:	2201      	movs	r2, #1
 8012bde:	4611      	mov	r1, r2
 8012be0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012be4:	f000 ff58 	bl	8013a98 <uxr_stream_id>
 8012be8:	3508      	adds	r5, #8
 8012bea:	4684      	mov	ip, r0
 8012bec:	4643      	mov	r3, r8
 8012bee:	463a      	mov	r2, r7
 8012bf0:	4631      	mov	r1, r6
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	f8cd c004 	str.w	ip, [sp, #4]
 8012bf8:	f007 fa76 	bl	801a0e8 <uxr_prepare_best_effort_buffer_to_send>
 8012bfc:	2800      	cmp	r0, #0
 8012bfe:	d0e6      	beq.n	8012bce <uxr_flash_output_streams+0x1e>
 8012c00:	9b02      	ldr	r3, [sp, #8]
 8012c02:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012c06:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f000 feb6 	bl	801397c <uxr_stamp_session_header>
 8012c10:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012c12:	9a03      	ldr	r2, [sp, #12]
 8012c14:	685d      	ldr	r5, [r3, #4]
 8012c16:	6818      	ldr	r0, [r3, #0]
 8012c18:	9902      	ldr	r1, [sp, #8]
 8012c1a:	47a8      	blx	r5
 8012c1c:	f109 0901 	add.w	r9, r9, #1
 8012c20:	7e23      	ldrb	r3, [r4, #24]
 8012c22:	fa5f f089 	uxtb.w	r0, r9
 8012c26:	4283      	cmp	r3, r0
 8012c28:	d8d8      	bhi.n	8012bdc <uxr_flash_output_streams+0x2c>
 8012c2a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012c2e:	b38b      	cbz	r3, 8012c94 <uxr_flash_output_streams+0xe4>
 8012c30:	f04f 0900 	mov.w	r9, #0
 8012c34:	f10d 0802 	add.w	r8, sp, #2
 8012c38:	af03      	add	r7, sp, #12
 8012c3a:	ae02      	add	r6, sp, #8
 8012c3c:	4648      	mov	r0, r9
 8012c3e:	2201      	movs	r2, #1
 8012c40:	2102      	movs	r1, #2
 8012c42:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012c46:	f000 ff27 	bl	8013a98 <uxr_stream_id>
 8012c4a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012c4e:	3520      	adds	r5, #32
 8012c50:	9001      	str	r0, [sp, #4]
 8012c52:	e00d      	b.n	8012c70 <uxr_flash_output_streams+0xc0>
 8012c54:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012c58:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012c5c:	9b02      	ldr	r3, [sp, #8]
 8012c5e:	f000 fe8d 	bl	801397c <uxr_stamp_session_header>
 8012c62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012c64:	9a03      	ldr	r2, [sp, #12]
 8012c66:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8012c6a:	9902      	ldr	r1, [sp, #8]
 8012c6c:	6818      	ldr	r0, [r3, #0]
 8012c6e:	47d0      	blx	sl
 8012c70:	4643      	mov	r3, r8
 8012c72:	463a      	mov	r2, r7
 8012c74:	4631      	mov	r1, r6
 8012c76:	4628      	mov	r0, r5
 8012c78:	f007 fc54 	bl	801a524 <uxr_prepare_next_reliable_buffer_to_send>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	4620      	mov	r0, r4
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d1e7      	bne.n	8012c54 <uxr_flash_output_streams+0xa4>
 8012c84:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012c88:	f109 0901 	add.w	r9, r9, #1
 8012c8c:	fa5f f089 	uxtb.w	r0, r9
 8012c90:	4283      	cmp	r3, r0
 8012c92:	d8d4      	bhi.n	8012c3e <uxr_flash_output_streams+0x8e>
 8012c94:	b004      	add	sp, #16
 8012c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c9a:	bf00      	nop

08012c9c <read_submessage_info>:
 8012c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ca0:	460d      	mov	r5, r1
 8012ca2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012ca6:	4669      	mov	r1, sp
 8012ca8:	4607      	mov	r7, r0
 8012caa:	4628      	mov	r0, r5
 8012cac:	f002 f814 	bl	8014cd8 <uxr_deserialize_BaseObjectReply>
 8012cb0:	a902      	add	r1, sp, #8
 8012cb2:	4604      	mov	r4, r0
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012cba:	f7fc fa11 	bl	800f0e0 <ucdr_deserialize_bool>
 8012cbe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012cc2:	4004      	ands	r4, r0
 8012cc4:	b2e4      	uxtb	r4, r4
 8012cc6:	b95b      	cbnz	r3, 8012ce0 <read_submessage_info+0x44>
 8012cc8:	a987      	add	r1, sp, #540	@ 0x21c
 8012cca:	4628      	mov	r0, r5
 8012ccc:	f7fc fa08 	bl	800f0e0 <ucdr_deserialize_bool>
 8012cd0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8012cd4:	4606      	mov	r6, r0
 8012cd6:	b94b      	cbnz	r3, 8012cec <read_submessage_info+0x50>
 8012cd8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce0:	a903      	add	r1, sp, #12
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	f001 fea0 	bl	8014a28 <uxr_deserialize_ObjectVariant>
 8012ce8:	4004      	ands	r4, r0
 8012cea:	e7ed      	b.n	8012cc8 <read_submessage_info+0x2c>
 8012cec:	a988      	add	r1, sp, #544	@ 0x220
 8012cee:	4628      	mov	r0, r5
 8012cf0:	f7fc fa24 	bl	800f13c <ucdr_deserialize_uint8_t>
 8012cf4:	4234      	tst	r4, r6
 8012cf6:	d0ef      	beq.n	8012cd8 <read_submessage_info+0x3c>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	d0ed      	beq.n	8012cd8 <read_submessage_info+0x3c>
 8012cfc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012d00:	2b0d      	cmp	r3, #13
 8012d02:	d1e9      	bne.n	8012cd8 <read_submessage_info+0x3c>
 8012d04:	a98a      	add	r1, sp, #552	@ 0x228
 8012d06:	4628      	mov	r0, r5
 8012d08:	f7fc ffbe 	bl	800fc88 <ucdr_deserialize_int16_t>
 8012d0c:	b140      	cbz	r0, 8012d20 <read_submessage_info+0x84>
 8012d0e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	dd07      	ble.n	8012d26 <read_submessage_info+0x8a>
 8012d16:	f1b8 0f00 	cmp.w	r8, #0
 8012d1a:	bf14      	ite	ne
 8012d1c:	2001      	movne	r0, #1
 8012d1e:	2002      	moveq	r0, #2
 8012d20:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8012d24:	e7d8      	b.n	8012cd8 <read_submessage_info+0x3c>
 8012d26:	2000      	movs	r0, #0
 8012d28:	e7fa      	b.n	8012d20 <read_submessage_info+0x84>
 8012d2a:	bf00      	nop

08012d2c <read_submessage_list>:
 8012d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d30:	b097      	sub	sp, #92	@ 0x5c
 8012d32:	4ec1      	ldr	r6, [pc, #772]	@ (8013038 <read_submessage_list+0x30c>)
 8012d34:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d36:	4604      	mov	r4, r0
 8012d38:	460d      	mov	r5, r1
 8012d3a:	f04f 0801 	mov.w	r8, #1
 8012d3e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8012d42:	aa0c      	add	r2, sp, #48	@ 0x30
 8012d44:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8012d48:	4628      	mov	r0, r5
 8012d4a:	f000 fff7 	bl	8013d3c <uxr_read_submessage_header>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	f000 813e 	beq.w	8012fd0 <read_submessage_list+0x2a4>
 8012d54:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012d58:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8012d5c:	3b02      	subs	r3, #2
 8012d5e:	2b0d      	cmp	r3, #13
 8012d60:	d8ed      	bhi.n	8012d3e <read_submessage_list+0x12>
 8012d62:	a101      	add	r1, pc, #4	@ (adr r1, 8012d68 <read_submessage_list+0x3c>)
 8012d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d68:	08012fc7 	.word	0x08012fc7
 8012d6c:	08012d3f 	.word	0x08012d3f
 8012d70:	08012fb7 	.word	0x08012fb7
 8012d74:	08012f55 	.word	0x08012f55
 8012d78:	08012f4b 	.word	0x08012f4b
 8012d7c:	08012d3f 	.word	0x08012d3f
 8012d80:	08012d3f 	.word	0x08012d3f
 8012d84:	08012eab 	.word	0x08012eab
 8012d88:	08012e3b 	.word	0x08012e3b
 8012d8c:	08012dfb 	.word	0x08012dfb
 8012d90:	08012d3f 	.word	0x08012d3f
 8012d94:	08012d3f 	.word	0x08012d3f
 8012d98:	08012d3f 	.word	0x08012d3f
 8012d9c:	08012da1 	.word	0x08012da1
 8012da0:	a910      	add	r1, sp, #64	@ 0x40
 8012da2:	4628      	mov	r0, r5
 8012da4:	f002 f9bc 	bl	8015120 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012da8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8012dac:	f1b9 0f00 	cmp.w	r9, #0
 8012db0:	f000 8116 	beq.w	8012fe0 <read_submessage_list+0x2b4>
 8012db4:	f001 f808 	bl	8013dc8 <uxr_nanos>
 8012db8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8012dba:	4602      	mov	r2, r0
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8012dc0:	2100      	movs	r1, #0
 8012dc2:	468c      	mov	ip, r1
 8012dc4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8012dc8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8012dcc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8012dce:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8012dd0:	468c      	mov	ip, r1
 8012dd2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8012dd6:	46e2      	mov	sl, ip
 8012dd8:	46bc      	mov	ip, r7
 8012dda:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8012dde:	fbc0 7106 	smlal	r7, r1, r0, r6
 8012de2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8012de6:	e9cd 7100 	strd	r7, r1, [sp]
 8012dea:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8012dee:	9106      	str	r1, [sp, #24]
 8012df0:	4620      	mov	r0, r4
 8012df2:	47c8      	blx	r9
 8012df4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8012df8:	e7a1      	b.n	8012d3e <read_submessage_list+0x12>
 8012dfa:	a910      	add	r1, sp, #64	@ 0x40
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	f002 f97d 	bl	80150fc <uxr_deserialize_HEARTBEAT_Payload>
 8012e02:	2100      	movs	r1, #0
 8012e04:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012e08:	f000 fe70 	bl	8013aec <uxr_stream_id_from_raw>
 8012e0c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8012e10:	900f      	str	r0, [sp, #60]	@ 0x3c
 8012e12:	4639      	mov	r1, r7
 8012e14:	f104 0008 	add.w	r0, r4, #8
 8012e18:	f000 ff56 	bl	8013cc8 <uxr_get_input_reliable_stream>
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	d08e      	beq.n	8012d3e <read_submessage_list+0x12>
 8012e20:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8012e24:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8012e28:	f007 f8cc 	bl	8019fc4 <uxr_process_heartbeat>
 8012e2c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8012e30:	463a      	mov	r2, r7
 8012e32:	4620      	mov	r0, r4
 8012e34:	f7ff fdf6 	bl	8012a24 <write_submessage_acknack.isra.0>
 8012e38:	e781      	b.n	8012d3e <read_submessage_list+0x12>
 8012e3a:	a910      	add	r1, sp, #64	@ 0x40
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	f002 f935 	bl	80150ac <uxr_deserialize_ACKNACK_Payload>
 8012e42:	2100      	movs	r1, #0
 8012e44:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012e48:	f000 fe50 	bl	8013aec <uxr_stream_id_from_raw>
 8012e4c:	900d      	str	r0, [sp, #52]	@ 0x34
 8012e4e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8012e52:	f104 0008 	add.w	r0, r4, #8
 8012e56:	f000 ff23 	bl	8013ca0 <uxr_get_output_reliable_stream>
 8012e5a:	4607      	mov	r7, r0
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	f43f af6e 	beq.w	8012d3e <read_submessage_list+0x12>
 8012e62:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8012e66:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8012e6a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8012e6e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012e72:	b289      	uxth	r1, r1
 8012e74:	f007 fc00 	bl	801a678 <uxr_process_acknack>
 8012e78:	4638      	mov	r0, r7
 8012e7a:	f007 fbbd 	bl	801a5f8 <uxr_begin_output_nack_buffer_it>
 8012e7e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012e82:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8012e86:	e006      	b.n	8012e96 <read_submessage_list+0x16a>
 8012e88:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012e8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012e8c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8012e90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012e92:	6818      	ldr	r0, [r3, #0]
 8012e94:	47c8      	blx	r9
 8012e96:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8012e9a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8012e9c:	4651      	mov	r1, sl
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	f007 fbac 	bl	801a5fc <uxr_next_reliable_nack_buffer_to_send>
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	d1ef      	bne.n	8012e88 <read_submessage_list+0x15c>
 8012ea8:	e749      	b.n	8012d3e <read_submessage_list+0x12>
 8012eaa:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012eae:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8012eb2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012eb6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8012eba:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8012ebe:	4651      	mov	r1, sl
 8012ec0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012ec4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8012ec8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8012ecc:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8012ed6:	f001 fe49 	bl	8014b6c <uxr_deserialize_BaseObjectRequest>
 8012eda:	4650      	mov	r0, sl
 8012edc:	a90f      	add	r1, sp, #60	@ 0x3c
 8012ede:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8012ee2:	f000 fdc7 	bl	8013a74 <uxr_parse_base_object_request>
 8012ee6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8012eea:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012eec:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8012ef0:	9110      	str	r1, [sp, #64]	@ 0x40
 8012ef2:	3f04      	subs	r7, #4
 8012ef4:	f009 090e 	and.w	r9, r9, #14
 8012ef8:	b2bf      	uxth	r7, r7
 8012efa:	f1bb 0f00 	cmp.w	fp, #0
 8012efe:	d006      	beq.n	8012f0e <read_submessage_list+0x1e2>
 8012f00:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012f04:	9300      	str	r3, [sp, #0]
 8012f06:	4652      	mov	r2, sl
 8012f08:	2300      	movs	r3, #0
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	47d8      	blx	fp
 8012f0e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012f10:	b16a      	cbz	r2, 8012f2e <read_submessage_list+0x202>
 8012f12:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012f14:	2100      	movs	r1, #0
 8012f16:	3802      	subs	r0, #2
 8012f18:	e002      	b.n	8012f20 <read_submessage_list+0x1f4>
 8012f1a:	3101      	adds	r1, #1
 8012f1c:	4291      	cmp	r1, r2
 8012f1e:	d006      	beq.n	8012f2e <read_submessage_list+0x202>
 8012f20:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012f24:	4553      	cmp	r3, sl
 8012f26:	d1f8      	bne.n	8012f1a <read_submessage_list+0x1ee>
 8012f28:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	545a      	strb	r2, [r3, r1]
 8012f2e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8012f32:	9102      	str	r1, [sp, #8]
 8012f34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012f36:	9101      	str	r1, [sp, #4]
 8012f38:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012f3a:	9100      	str	r1, [sp, #0]
 8012f3c:	464b      	mov	r3, r9
 8012f3e:	463a      	mov	r2, r7
 8012f40:	4629      	mov	r1, r5
 8012f42:	4620      	mov	r0, r4
 8012f44:	f007 fc56 	bl	801a7f4 <read_submessage_format>
 8012f48:	e6f9      	b.n	8012d3e <read_submessage_list+0x12>
 8012f4a:	4629      	mov	r1, r5
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f7ff fea5 	bl	8012c9c <read_submessage_info>
 8012f52:	e6f4      	b.n	8012d3e <read_submessage_list+0x12>
 8012f54:	2a00      	cmp	r2, #0
 8012f56:	d03e      	beq.n	8012fd6 <read_submessage_list+0x2aa>
 8012f58:	a910      	add	r1, sp, #64	@ 0x40
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	f002 f802 	bl	8014f64 <uxr_deserialize_STATUS_Payload>
 8012f60:	a90e      	add	r1, sp, #56	@ 0x38
 8012f62:	aa0d      	add	r2, sp, #52	@ 0x34
 8012f64:	a810      	add	r0, sp, #64	@ 0x40
 8012f66:	f000 fd85 	bl	8013a74 <uxr_parse_base_object_request>
 8012f6a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8012f6e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012f70:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8012f74:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8012f78:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012f7a:	f1ba 0f00 	cmp.w	sl, #0
 8012f7e:	d006      	beq.n	8012f8e <read_submessage_list+0x262>
 8012f80:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012f84:	9300      	str	r3, [sp, #0]
 8012f86:	463a      	mov	r2, r7
 8012f88:	464b      	mov	r3, r9
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	47d0      	blx	sl
 8012f8e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012f90:	2a00      	cmp	r2, #0
 8012f92:	f43f aed4 	beq.w	8012d3e <read_submessage_list+0x12>
 8012f96:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012f98:	2100      	movs	r1, #0
 8012f9a:	3802      	subs	r0, #2
 8012f9c:	e003      	b.n	8012fa6 <read_submessage_list+0x27a>
 8012f9e:	3101      	adds	r1, #1
 8012fa0:	4291      	cmp	r1, r2
 8012fa2:	f43f aecc 	beq.w	8012d3e <read_submessage_list+0x12>
 8012fa6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012faa:	42bb      	cmp	r3, r7
 8012fac:	d1f7      	bne.n	8012f9e <read_submessage_list+0x272>
 8012fae:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012fb0:	f803 9001 	strb.w	r9, [r3, r1]
 8012fb4:	e6c3      	b.n	8012d3e <read_submessage_list+0x12>
 8012fb6:	2a00      	cmp	r2, #0
 8012fb8:	f47f aec1 	bne.w	8012d3e <read_submessage_list+0x12>
 8012fbc:	4629      	mov	r1, r5
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	f000 fc9e 	bl	8013900 <uxr_read_create_session_status>
 8012fc4:	e6bb      	b.n	8012d3e <read_submessage_list+0x12>
 8012fc6:	4629      	mov	r1, r5
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f7ff fcf5 	bl	80129b8 <read_submessage_get_info>
 8012fce:	e6b6      	b.n	8012d3e <read_submessage_list+0x12>
 8012fd0:	b017      	add	sp, #92	@ 0x5c
 8012fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd6:	4629      	mov	r1, r5
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f000 fc9d 	bl	8013918 <uxr_read_delete_session_status>
 8012fde:	e6ae      	b.n	8012d3e <read_submessage_list+0x12>
 8012fe0:	f000 fef2 	bl	8013dc8 <uxr_nanos>
 8012fe4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012fe6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8012fe8:	464f      	mov	r7, r9
 8012fea:	fbc3 2706 	smlal	r2, r7, r3, r6
 8012fee:	1812      	adds	r2, r2, r0
 8012ff0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012ff2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8012ff4:	eb47 0101 	adc.w	r1, r7, r1
 8012ff8:	464f      	mov	r7, r9
 8012ffa:	fbc3 0706 	smlal	r0, r7, r3, r6
 8012ffe:	463b      	mov	r3, r7
 8013000:	4684      	mov	ip, r0
 8013002:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8013006:	fbc7 0906 	smlal	r0, r9, r7, r6
 801300a:	eb1c 0c00 	adds.w	ip, ip, r0
 801300e:	464f      	mov	r7, r9
 8013010:	eb43 0307 	adc.w	r3, r3, r7
 8013014:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013018:	eb61 0303 	sbc.w	r3, r1, r3
 801301c:	0fda      	lsrs	r2, r3, #31
 801301e:	eb12 020c 	adds.w	r2, r2, ip
 8013022:	f143 0300 	adc.w	r3, r3, #0
 8013026:	0852      	lsrs	r2, r2, #1
 8013028:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801302c:	105b      	asrs	r3, r3, #1
 801302e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8013032:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8013036:	e6dd      	b.n	8012df4 <read_submessage_list+0xc8>
 8013038:	3b9aca00 	.word	0x3b9aca00

0801303c <listen_message_reliably>:
 801303c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013040:	1e0b      	subs	r3, r1, #0
 8013042:	b09d      	sub	sp, #116	@ 0x74
 8013044:	bfb8      	it	lt
 8013046:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801304a:	4680      	mov	r8, r0
 801304c:	9305      	str	r3, [sp, #20]
 801304e:	f000 fea1 	bl	8013d94 <uxr_millis>
 8013052:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8013056:	4681      	mov	r9, r0
 8013058:	2a00      	cmp	r2, #0
 801305a:	f000 80a1 	beq.w	80131a0 <listen_message_reliably+0x164>
 801305e:	2600      	movs	r6, #0
 8013060:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013064:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8013068:	9303      	str	r3, [sp, #12]
 801306a:	4630      	mov	r0, r6
 801306c:	460f      	mov	r7, r1
 801306e:	e00f      	b.n	8013090 <listen_message_reliably+0x54>
 8013070:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013074:	9903      	ldr	r1, [sp, #12]
 8013076:	455a      	cmp	r2, fp
 8013078:	f106 0601 	add.w	r6, r6, #1
 801307c:	eb73 0101 	sbcs.w	r1, r3, r1
 8013080:	b2f0      	uxtb	r0, r6
 8013082:	da01      	bge.n	8013088 <listen_message_reliably+0x4c>
 8013084:	4693      	mov	fp, r2
 8013086:	9303      	str	r3, [sp, #12]
 8013088:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801308c:	4283      	cmp	r3, r0
 801308e:	d960      	bls.n	8013152 <listen_message_reliably+0x116>
 8013090:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013094:	2102      	movs	r1, #2
 8013096:	2201      	movs	r2, #1
 8013098:	f000 fcfe 	bl	8013a98 <uxr_stream_id>
 801309c:	00e4      	lsls	r4, r4, #3
 801309e:	f104 0520 	add.w	r5, r4, #32
 80130a2:	4445      	add	r5, r8
 80130a4:	4601      	mov	r1, r0
 80130a6:	463b      	mov	r3, r7
 80130a8:	464a      	mov	r2, r9
 80130aa:	4628      	mov	r0, r5
 80130ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80130ae:	f007 fa79 	bl	801a5a4 <uxr_update_output_stream_heartbeat_timestamp>
 80130b2:	eb08 0304 	add.w	r3, r8, r4
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d0da      	beq.n	8013070 <listen_message_reliably+0x34>
 80130ba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80130be:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80130c2:	9304      	str	r3, [sp, #16]
 80130c4:	4640      	mov	r0, r8
 80130c6:	f000 fcaf 	bl	8013a28 <uxr_session_header_offset>
 80130ca:	3501      	adds	r5, #1
 80130cc:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 80130d0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80130d4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80130d8:	2300      	movs	r3, #0
 80130da:	2211      	movs	r2, #17
 80130dc:	9000      	str	r0, [sp, #0]
 80130de:	a90c      	add	r1, sp, #48	@ 0x30
 80130e0:	4650      	mov	r0, sl
 80130e2:	f7fd fa6d 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 80130e6:	2300      	movs	r3, #0
 80130e8:	2205      	movs	r2, #5
 80130ea:	210b      	movs	r1, #11
 80130ec:	4650      	mov	r0, sl
 80130ee:	f000 fe0b 	bl	8013d08 <uxr_buffer_submessage_header>
 80130f2:	8968      	ldrh	r0, [r5, #10]
 80130f4:	2101      	movs	r1, #1
 80130f6:	f007 fc47 	bl	801a988 <uxr_seq_num_add>
 80130fa:	892b      	ldrh	r3, [r5, #8]
 80130fc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013100:	4602      	mov	r2, r0
 8013102:	9b04      	ldr	r3, [sp, #16]
 8013104:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013108:	a90a      	add	r1, sp, #40	@ 0x28
 801310a:	4650      	mov	r0, sl
 801310c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013110:	f001 ffe0 	bl	80150d4 <uxr_serialize_HEARTBEAT_Payload>
 8013114:	2200      	movs	r2, #0
 8013116:	4611      	mov	r1, r2
 8013118:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801311a:	4640      	mov	r0, r8
 801311c:	f000 fc2e 	bl	801397c <uxr_stamp_session_header>
 8013120:	4650      	mov	r0, sl
 8013122:	f7fd fa8b 	bl	801063c <ucdr_buffer_length>
 8013126:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 801312a:	4602      	mov	r2, r0
 801312c:	a90c      	add	r1, sp, #48	@ 0x30
 801312e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013132:	4444      	add	r4, r8
 8013134:	47a8      	blx	r5
 8013136:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801313a:	9903      	ldr	r1, [sp, #12]
 801313c:	455a      	cmp	r2, fp
 801313e:	f106 0601 	add.w	r6, r6, #1
 8013142:	eb73 0101 	sbcs.w	r1, r3, r1
 8013146:	b2f0      	uxtb	r0, r6
 8013148:	db9c      	blt.n	8013084 <listen_message_reliably+0x48>
 801314a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 801314e:	4283      	cmp	r3, r0
 8013150:	d89e      	bhi.n	8013090 <listen_message_reliably+0x54>
 8013152:	9a03      	ldr	r2, [sp, #12]
 8013154:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013158:	429a      	cmp	r2, r3
 801315a:	bf08      	it	eq
 801315c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013160:	d01e      	beq.n	80131a0 <listen_message_reliably+0x164>
 8013162:	ebab 0309 	sub.w	r3, fp, r9
 8013166:	9905      	ldr	r1, [sp, #20]
 8013168:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 801316c:	2b00      	cmp	r3, #0
 801316e:	bf08      	it	eq
 8013170:	2301      	moveq	r3, #1
 8013172:	4299      	cmp	r1, r3
 8013174:	bfa8      	it	ge
 8013176:	4619      	movge	r1, r3
 8013178:	6894      	ldr	r4, [r2, #8]
 801317a:	6810      	ldr	r0, [r2, #0]
 801317c:	4689      	mov	r9, r1
 801317e:	460b      	mov	r3, r1
 8013180:	aa08      	add	r2, sp, #32
 8013182:	a907      	add	r1, sp, #28
 8013184:	47a0      	blx	r4
 8013186:	b968      	cbnz	r0, 80131a4 <listen_message_reliably+0x168>
 8013188:	9b05      	ldr	r3, [sp, #20]
 801318a:	eba3 0309 	sub.w	r3, r3, r9
 801318e:	2b00      	cmp	r3, #0
 8013190:	9305      	str	r3, [sp, #20]
 8013192:	f73f af5c 	bgt.w	801304e <listen_message_reliably+0x12>
 8013196:	4604      	mov	r4, r0
 8013198:	4620      	mov	r0, r4
 801319a:	b01d      	add	sp, #116	@ 0x74
 801319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a0:	9b05      	ldr	r3, [sp, #20]
 80131a2:	e7e0      	b.n	8013166 <listen_message_reliably+0x12a>
 80131a4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80131a8:	4604      	mov	r4, r0
 80131aa:	a80c      	add	r0, sp, #48	@ 0x30
 80131ac:	f7fd fa1a 	bl	80105e4 <ucdr_init_buffer>
 80131b0:	2500      	movs	r5, #0
 80131b2:	f10d 031a 	add.w	r3, sp, #26
 80131b6:	aa06      	add	r2, sp, #24
 80131b8:	a90c      	add	r1, sp, #48	@ 0x30
 80131ba:	4640      	mov	r0, r8
 80131bc:	f88d 5018 	strb.w	r5, [sp, #24]
 80131c0:	f000 fbf0 	bl	80139a4 <uxr_read_session_header>
 80131c4:	b918      	cbnz	r0, 80131ce <listen_message_reliably+0x192>
 80131c6:	4620      	mov	r0, r4
 80131c8:	b01d      	add	sp, #116	@ 0x74
 80131ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ce:	4629      	mov	r1, r5
 80131d0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80131d4:	f000 fc8a 	bl	8013aec <uxr_stream_id_from_raw>
 80131d8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80131dc:	2d01      	cmp	r5, #1
 80131de:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80131e2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80131e6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80131ea:	d04b      	beq.n	8013284 <listen_message_reliably+0x248>
 80131ec:	2d02      	cmp	r5, #2
 80131ee:	d00f      	beq.n	8013210 <listen_message_reliably+0x1d4>
 80131f0:	2d00      	cmp	r5, #0
 80131f2:	d1e8      	bne.n	80131c6 <listen_message_reliably+0x18a>
 80131f4:	4629      	mov	r1, r5
 80131f6:	4628      	mov	r0, r5
 80131f8:	f000 fc78 	bl	8013aec <uxr_stream_id_from_raw>
 80131fc:	a90c      	add	r1, sp, #48	@ 0x30
 80131fe:	4602      	mov	r2, r0
 8013200:	4640      	mov	r0, r8
 8013202:	920a      	str	r2, [sp, #40]	@ 0x28
 8013204:	f7ff fd92 	bl	8012d2c <read_submessage_list>
 8013208:	4620      	mov	r0, r4
 801320a:	b01d      	add	sp, #116	@ 0x74
 801320c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013210:	4631      	mov	r1, r6
 8013212:	f108 0008 	add.w	r0, r8, #8
 8013216:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 801321a:	f000 fd55 	bl	8013cc8 <uxr_get_input_reliable_stream>
 801321e:	4607      	mov	r7, r0
 8013220:	b338      	cbz	r0, 8013272 <listen_message_reliably+0x236>
 8013222:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013224:	9203      	str	r2, [sp, #12]
 8013226:	a80c      	add	r0, sp, #48	@ 0x30
 8013228:	f7fd fa0c 	bl	8010644 <ucdr_buffer_remaining>
 801322c:	4603      	mov	r3, r0
 801322e:	f10d 0019 	add.w	r0, sp, #25
 8013232:	9000      	str	r0, [sp, #0]
 8013234:	9a03      	ldr	r2, [sp, #12]
 8013236:	4651      	mov	r1, sl
 8013238:	4638      	mov	r0, r7
 801323a:	f006 fdc9 	bl	8019dd0 <uxr_receive_reliable_message>
 801323e:	b1c0      	cbz	r0, 8013272 <listen_message_reliably+0x236>
 8013240:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013244:	b393      	cbz	r3, 80132ac <listen_message_reliably+0x270>
 8013246:	ad14      	add	r5, sp, #80	@ 0x50
 8013248:	f04f 0a02 	mov.w	sl, #2
 801324c:	e00a      	b.n	8013264 <listen_message_reliably+0x228>
 801324e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013252:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8013256:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801325a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801325c:	4629      	mov	r1, r5
 801325e:	4640      	mov	r0, r8
 8013260:	f7ff fd64 	bl	8012d2c <read_submessage_list>
 8013264:	2204      	movs	r2, #4
 8013266:	4629      	mov	r1, r5
 8013268:	4638      	mov	r0, r7
 801326a:	f006 fe31 	bl	8019ed0 <uxr_next_input_reliable_buffer_available>
 801326e:	2800      	cmp	r0, #0
 8013270:	d1ed      	bne.n	801324e <listen_message_reliably+0x212>
 8013272:	4640      	mov	r0, r8
 8013274:	4632      	mov	r2, r6
 8013276:	4649      	mov	r1, r9
 8013278:	f7ff fbd4 	bl	8012a24 <write_submessage_acknack.isra.0>
 801327c:	4620      	mov	r0, r4
 801327e:	b01d      	add	sp, #116	@ 0x74
 8013280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013284:	4631      	mov	r1, r6
 8013286:	f108 0008 	add.w	r0, r8, #8
 801328a:	f000 fd13 	bl	8013cb4 <uxr_get_input_best_effort_stream>
 801328e:	2800      	cmp	r0, #0
 8013290:	d099      	beq.n	80131c6 <listen_message_reliably+0x18a>
 8013292:	4651      	mov	r1, sl
 8013294:	f006 fd08 	bl	8019ca8 <uxr_receive_best_effort_message>
 8013298:	2800      	cmp	r0, #0
 801329a:	d094      	beq.n	80131c6 <listen_message_reliably+0x18a>
 801329c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80132a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80132a2:	a90c      	add	r1, sp, #48	@ 0x30
 80132a4:	4640      	mov	r0, r8
 80132a6:	f7ff fd41 	bl	8012d2c <read_submessage_list>
 80132aa:	e78c      	b.n	80131c6 <listen_message_reliably+0x18a>
 80132ac:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80132b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80132b2:	a90c      	add	r1, sp, #48	@ 0x30
 80132b4:	4640      	mov	r0, r8
 80132b6:	f7ff fd39 	bl	8012d2c <read_submessage_list>
 80132ba:	e7c4      	b.n	8013246 <listen_message_reliably+0x20a>

080132bc <uxr_run_session_timeout>:
 80132bc:	b570      	push	{r4, r5, r6, lr}
 80132be:	4604      	mov	r4, r0
 80132c0:	460d      	mov	r5, r1
 80132c2:	f000 fd67 	bl	8013d94 <uxr_millis>
 80132c6:	4606      	mov	r6, r0
 80132c8:	4620      	mov	r0, r4
 80132ca:	f7ff fc71 	bl	8012bb0 <uxr_flash_output_streams>
 80132ce:	4629      	mov	r1, r5
 80132d0:	4620      	mov	r0, r4
 80132d2:	f7ff feb3 	bl	801303c <listen_message_reliably>
 80132d6:	f000 fd5d 	bl	8013d94 <uxr_millis>
 80132da:	1b83      	subs	r3, r0, r6
 80132dc:	1ae9      	subs	r1, r5, r3
 80132de:	2900      	cmp	r1, #0
 80132e0:	dcf6      	bgt.n	80132d0 <uxr_run_session_timeout+0x14>
 80132e2:	f104 0008 	add.w	r0, r4, #8
 80132e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132ea:	f000 bcf7 	b.w	8013cdc <uxr_output_streams_confirmed>
 80132ee:	bf00      	nop

080132f0 <uxr_run_session_until_data>:
 80132f0:	b570      	push	{r4, r5, r6, lr}
 80132f2:	4604      	mov	r4, r0
 80132f4:	460d      	mov	r5, r1
 80132f6:	f000 fd4d 	bl	8013d94 <uxr_millis>
 80132fa:	4606      	mov	r6, r0
 80132fc:	4620      	mov	r0, r4
 80132fe:	f7ff fc57 	bl	8012bb0 <uxr_flash_output_streams>
 8013302:	2300      	movs	r3, #0
 8013304:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8013308:	4629      	mov	r1, r5
 801330a:	e005      	b.n	8013318 <uxr_run_session_until_data+0x28>
 801330c:	f000 fd42 	bl	8013d94 <uxr_millis>
 8013310:	1b83      	subs	r3, r0, r6
 8013312:	1ae9      	subs	r1, r5, r3
 8013314:	2900      	cmp	r1, #0
 8013316:	dd07      	ble.n	8013328 <uxr_run_session_until_data+0x38>
 8013318:	4620      	mov	r0, r4
 801331a:	f7ff fe8f 	bl	801303c <listen_message_reliably>
 801331e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013322:	2800      	cmp	r0, #0
 8013324:	d0f2      	beq.n	801330c <uxr_run_session_until_data+0x1c>
 8013326:	bd70      	pop	{r4, r5, r6, pc}
 8013328:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801332c:	bd70      	pop	{r4, r5, r6, pc}
 801332e:	bf00      	nop

08013330 <uxr_run_session_until_confirm_delivery>:
 8013330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013334:	4606      	mov	r6, r0
 8013336:	460d      	mov	r5, r1
 8013338:	f000 fd2c 	bl	8013d94 <uxr_millis>
 801333c:	4607      	mov	r7, r0
 801333e:	4630      	mov	r0, r6
 8013340:	f7ff fc36 	bl	8012bb0 <uxr_flash_output_streams>
 8013344:	2d00      	cmp	r5, #0
 8013346:	f106 0808 	add.w	r8, r6, #8
 801334a:	bfa8      	it	ge
 801334c:	462c      	movge	r4, r5
 801334e:	da07      	bge.n	8013360 <uxr_run_session_until_confirm_delivery+0x30>
 8013350:	e00e      	b.n	8013370 <uxr_run_session_until_confirm_delivery+0x40>
 8013352:	f7ff fe73 	bl	801303c <listen_message_reliably>
 8013356:	f000 fd1d 	bl	8013d94 <uxr_millis>
 801335a:	1bc3      	subs	r3, r0, r7
 801335c:	1aec      	subs	r4, r5, r3
 801335e:	d407      	bmi.n	8013370 <uxr_run_session_until_confirm_delivery+0x40>
 8013360:	4640      	mov	r0, r8
 8013362:	f000 fcbb 	bl	8013cdc <uxr_output_streams_confirmed>
 8013366:	4603      	mov	r3, r0
 8013368:	4621      	mov	r1, r4
 801336a:	4630      	mov	r0, r6
 801336c:	2b00      	cmp	r3, #0
 801336e:	d0f0      	beq.n	8013352 <uxr_run_session_until_confirm_delivery+0x22>
 8013370:	4640      	mov	r0, r8
 8013372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013376:	f000 bcb1 	b.w	8013cdc <uxr_output_streams_confirmed>
 801337a:	bf00      	nop

0801337c <uxr_run_session_until_all_status>:
 801337c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013380:	9c08      	ldr	r4, [sp, #32]
 8013382:	4606      	mov	r6, r0
 8013384:	460f      	mov	r7, r1
 8013386:	4691      	mov	r9, r2
 8013388:	461d      	mov	r5, r3
 801338a:	f7ff fc11 	bl	8012bb0 <uxr_flash_output_streams>
 801338e:	b124      	cbz	r4, 801339a <uxr_run_session_until_all_status+0x1e>
 8013390:	4622      	mov	r2, r4
 8013392:	21ff      	movs	r1, #255	@ 0xff
 8013394:	4628      	mov	r0, r5
 8013396:	f008 ffed 	bl	801c374 <memset>
 801339a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 801339e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80133a0:	f000 fcf8 	bl	8013d94 <uxr_millis>
 80133a4:	3d01      	subs	r5, #1
 80133a6:	f1a9 0902 	sub.w	r9, r9, #2
 80133aa:	4680      	mov	r8, r0
 80133ac:	4639      	mov	r1, r7
 80133ae:	4630      	mov	r0, r6
 80133b0:	f7ff fe44 	bl	801303c <listen_message_reliably>
 80133b4:	f000 fcee 	bl	8013d94 <uxr_millis>
 80133b8:	eba0 0008 	sub.w	r0, r0, r8
 80133bc:	1a39      	subs	r1, r7, r0
 80133be:	b344      	cbz	r4, 8013412 <uxr_run_session_until_all_status+0x96>
 80133c0:	4628      	mov	r0, r5
 80133c2:	46ac      	mov	ip, r5
 80133c4:	2301      	movs	r3, #1
 80133c6:	e002      	b.n	80133ce <uxr_run_session_until_all_status+0x52>
 80133c8:	42a3      	cmp	r3, r4
 80133ca:	d20d      	bcs.n	80133e8 <uxr_run_session_until_all_status+0x6c>
 80133cc:	3301      	adds	r3, #1
 80133ce:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80133d2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80133d6:	d1f7      	bne.n	80133c8 <uxr_run_session_until_all_status+0x4c>
 80133d8:	42a3      	cmp	r3, r4
 80133da:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80133de:	d213      	bcs.n	8013408 <uxr_run_session_until_all_status+0x8c>
 80133e0:	2a00      	cmp	r2, #0
 80133e2:	d0f3      	beq.n	80133cc <uxr_run_session_until_all_status+0x50>
 80133e4:	2900      	cmp	r1, #0
 80133e6:	dce2      	bgt.n	80133ae <uxr_run_session_until_all_status+0x32>
 80133e8:	2300      	movs	r3, #0
 80133ea:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80133ec:	442c      	add	r4, r5
 80133ee:	e001      	b.n	80133f4 <uxr_run_session_until_all_status+0x78>
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d812      	bhi.n	801341a <uxr_run_session_until_all_status+0x9e>
 80133f4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80133f8:	4284      	cmp	r4, r0
 80133fa:	d1f9      	bne.n	80133f0 <uxr_run_session_until_all_status+0x74>
 80133fc:	2b01      	cmp	r3, #1
 80133fe:	bf8c      	ite	hi
 8013400:	2000      	movhi	r0, #0
 8013402:	2001      	movls	r0, #1
 8013404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013408:	2900      	cmp	r1, #0
 801340a:	dded      	ble.n	80133e8 <uxr_run_session_until_all_status+0x6c>
 801340c:	2a00      	cmp	r2, #0
 801340e:	d1ce      	bne.n	80133ae <uxr_run_session_until_all_status+0x32>
 8013410:	e7ea      	b.n	80133e8 <uxr_run_session_until_all_status+0x6c>
 8013412:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8013414:	2001      	movs	r0, #1
 8013416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801341a:	2000      	movs	r0, #0
 801341c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013420 <wait_session_status>:
 8013420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013424:	4604      	mov	r4, r0
 8013426:	b09d      	sub	sp, #116	@ 0x74
 8013428:	20ff      	movs	r0, #255	@ 0xff
 801342a:	7160      	strb	r0, [r4, #5]
 801342c:	9303      	str	r3, [sp, #12]
 801342e:	2b00      	cmp	r3, #0
 8013430:	f000 80b6 	beq.w	80135a0 <wait_session_status+0x180>
 8013434:	468a      	mov	sl, r1
 8013436:	4691      	mov	r9, r2
 8013438:	f04f 0b00 	mov.w	fp, #0
 801343c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801343e:	464a      	mov	r2, r9
 8013440:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013444:	4651      	mov	r1, sl
 8013446:	47a8      	blx	r5
 8013448:	f000 fca4 	bl	8013d94 <uxr_millis>
 801344c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013450:	4605      	mov	r5, r0
 8013452:	e009      	b.n	8013468 <wait_session_status+0x48>
 8013454:	f000 fc9e 	bl	8013d94 <uxr_millis>
 8013458:	1b40      	subs	r0, r0, r5
 801345a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801345e:	2b00      	cmp	r3, #0
 8013460:	dd40      	ble.n	80134e4 <wait_session_status+0xc4>
 8013462:	7960      	ldrb	r0, [r4, #5]
 8013464:	28ff      	cmp	r0, #255	@ 0xff
 8013466:	d145      	bne.n	80134f4 <wait_session_status+0xd4>
 8013468:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801346a:	a908      	add	r1, sp, #32
 801346c:	6896      	ldr	r6, [r2, #8]
 801346e:	6810      	ldr	r0, [r2, #0]
 8013470:	aa09      	add	r2, sp, #36	@ 0x24
 8013472:	47b0      	blx	r6
 8013474:	2800      	cmp	r0, #0
 8013476:	d0ed      	beq.n	8013454 <wait_session_status+0x34>
 8013478:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 801347c:	a80c      	add	r0, sp, #48	@ 0x30
 801347e:	f7fd f8b1 	bl	80105e4 <ucdr_init_buffer>
 8013482:	2600      	movs	r6, #0
 8013484:	f10d 031e 	add.w	r3, sp, #30
 8013488:	aa07      	add	r2, sp, #28
 801348a:	a90c      	add	r1, sp, #48	@ 0x30
 801348c:	4620      	mov	r0, r4
 801348e:	f88d 601c 	strb.w	r6, [sp, #28]
 8013492:	f000 fa87 	bl	80139a4 <uxr_read_session_header>
 8013496:	2800      	cmp	r0, #0
 8013498:	d0dc      	beq.n	8013454 <wait_session_status+0x34>
 801349a:	4631      	mov	r1, r6
 801349c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80134a0:	f000 fb24 	bl	8013aec <uxr_stream_id_from_raw>
 80134a4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80134a8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80134ac:	9302      	str	r3, [sp, #8]
 80134ae:	2f01      	cmp	r7, #1
 80134b0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80134b4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80134b8:	d05c      	beq.n	8013574 <wait_session_status+0x154>
 80134ba:	2f02      	cmp	r7, #2
 80134bc:	d020      	beq.n	8013500 <wait_session_status+0xe0>
 80134be:	2f00      	cmp	r7, #0
 80134c0:	d1c8      	bne.n	8013454 <wait_session_status+0x34>
 80134c2:	4639      	mov	r1, r7
 80134c4:	4638      	mov	r0, r7
 80134c6:	f000 fb11 	bl	8013aec <uxr_stream_id_from_raw>
 80134ca:	a90c      	add	r1, sp, #48	@ 0x30
 80134cc:	4602      	mov	r2, r0
 80134ce:	900b      	str	r0, [sp, #44]	@ 0x2c
 80134d0:	4620      	mov	r0, r4
 80134d2:	f7ff fc2b 	bl	8012d2c <read_submessage_list>
 80134d6:	f000 fc5d 	bl	8013d94 <uxr_millis>
 80134da:	1b40      	subs	r0, r0, r5
 80134dc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	dcbe      	bgt.n	8013462 <wait_session_status+0x42>
 80134e4:	9b03      	ldr	r3, [sp, #12]
 80134e6:	7960      	ldrb	r0, [r4, #5]
 80134e8:	f10b 0b01 	add.w	fp, fp, #1
 80134ec:	455b      	cmp	r3, fp
 80134ee:	d001      	beq.n	80134f4 <wait_session_status+0xd4>
 80134f0:	28ff      	cmp	r0, #255	@ 0xff
 80134f2:	d0a3      	beq.n	801343c <wait_session_status+0x1c>
 80134f4:	38ff      	subs	r0, #255	@ 0xff
 80134f6:	bf18      	it	ne
 80134f8:	2001      	movne	r0, #1
 80134fa:	b01d      	add	sp, #116	@ 0x74
 80134fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013500:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8013504:	9304      	str	r3, [sp, #16]
 8013506:	4631      	mov	r1, r6
 8013508:	f104 0008 	add.w	r0, r4, #8
 801350c:	f000 fbdc 	bl	8013cc8 <uxr_get_input_reliable_stream>
 8013510:	4680      	mov	r8, r0
 8013512:	b348      	cbz	r0, 8013568 <wait_session_status+0x148>
 8013514:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013516:	9205      	str	r2, [sp, #20]
 8013518:	a80c      	add	r0, sp, #48	@ 0x30
 801351a:	f7fd f893 	bl	8010644 <ucdr_buffer_remaining>
 801351e:	4603      	mov	r3, r0
 8013520:	f10d 001d 	add.w	r0, sp, #29
 8013524:	9000      	str	r0, [sp, #0]
 8013526:	9a05      	ldr	r2, [sp, #20]
 8013528:	9902      	ldr	r1, [sp, #8]
 801352a:	4640      	mov	r0, r8
 801352c:	f006 fc50 	bl	8019dd0 <uxr_receive_reliable_message>
 8013530:	b1d0      	cbz	r0, 8013568 <wait_session_status+0x148>
 8013532:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d03a      	beq.n	80135b0 <wait_session_status+0x190>
 801353a:	9f04      	ldr	r7, [sp, #16]
 801353c:	e00a      	b.n	8013554 <wait_session_status+0x134>
 801353e:	f04f 0302 	mov.w	r3, #2
 8013542:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8013546:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801354a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801354e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013550:	f7ff fbec 	bl	8012d2c <read_submessage_list>
 8013554:	a914      	add	r1, sp, #80	@ 0x50
 8013556:	2204      	movs	r2, #4
 8013558:	4640      	mov	r0, r8
 801355a:	f006 fcb9 	bl	8019ed0 <uxr_next_input_reliable_buffer_available>
 801355e:	4603      	mov	r3, r0
 8013560:	a914      	add	r1, sp, #80	@ 0x50
 8013562:	4620      	mov	r0, r4
 8013564:	2b00      	cmp	r3, #0
 8013566:	d1ea      	bne.n	801353e <wait_session_status+0x11e>
 8013568:	9904      	ldr	r1, [sp, #16]
 801356a:	4632      	mov	r2, r6
 801356c:	4620      	mov	r0, r4
 801356e:	f7ff fa59 	bl	8012a24 <write_submessage_acknack.isra.0>
 8013572:	e76f      	b.n	8013454 <wait_session_status+0x34>
 8013574:	4631      	mov	r1, r6
 8013576:	f104 0008 	add.w	r0, r4, #8
 801357a:	f000 fb9b 	bl	8013cb4 <uxr_get_input_best_effort_stream>
 801357e:	2800      	cmp	r0, #0
 8013580:	f43f af68 	beq.w	8013454 <wait_session_status+0x34>
 8013584:	9902      	ldr	r1, [sp, #8]
 8013586:	f006 fb8f 	bl	8019ca8 <uxr_receive_best_effort_message>
 801358a:	2800      	cmp	r0, #0
 801358c:	f43f af62 	beq.w	8013454 <wait_session_status+0x34>
 8013590:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013594:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013596:	a90c      	add	r1, sp, #48	@ 0x30
 8013598:	4620      	mov	r0, r4
 801359a:	f7ff fbc7 	bl	8012d2c <read_submessage_list>
 801359e:	e759      	b.n	8013454 <wait_session_status+0x34>
 80135a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80135a2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80135a6:	47a0      	blx	r4
 80135a8:	2001      	movs	r0, #1
 80135aa:	b01d      	add	sp, #116	@ 0x74
 80135ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80135b4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80135b6:	a90c      	add	r1, sp, #48	@ 0x30
 80135b8:	4620      	mov	r0, r4
 80135ba:	f7ff fbb7 	bl	8012d2c <read_submessage_list>
 80135be:	e7bc      	b.n	801353a <wait_session_status+0x11a>

080135c0 <uxr_delete_session_retries>:
 80135c0:	b530      	push	{r4, r5, lr}
 80135c2:	b08f      	sub	sp, #60	@ 0x3c
 80135c4:	4604      	mov	r4, r0
 80135c6:	460d      	mov	r5, r1
 80135c8:	f000 fa2e 	bl	8013a28 <uxr_session_header_offset>
 80135cc:	2300      	movs	r3, #0
 80135ce:	2210      	movs	r2, #16
 80135d0:	9000      	str	r0, [sp, #0]
 80135d2:	a902      	add	r1, sp, #8
 80135d4:	a806      	add	r0, sp, #24
 80135d6:	f7fc fff3 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 80135da:	a906      	add	r1, sp, #24
 80135dc:	4620      	mov	r0, r4
 80135de:	f000 f973 	bl	80138c8 <uxr_buffer_delete_session>
 80135e2:	2200      	movs	r2, #0
 80135e4:	4611      	mov	r1, r2
 80135e6:	9b06      	ldr	r3, [sp, #24]
 80135e8:	4620      	mov	r0, r4
 80135ea:	f000 f9c7 	bl	801397c <uxr_stamp_session_header>
 80135ee:	a806      	add	r0, sp, #24
 80135f0:	f7fd f824 	bl	801063c <ucdr_buffer_length>
 80135f4:	462b      	mov	r3, r5
 80135f6:	4602      	mov	r2, r0
 80135f8:	a902      	add	r1, sp, #8
 80135fa:	4620      	mov	r0, r4
 80135fc:	f7ff ff10 	bl	8013420 <wait_session_status>
 8013600:	b118      	cbz	r0, 801360a <uxr_delete_session_retries+0x4a>
 8013602:	7960      	ldrb	r0, [r4, #5]
 8013604:	fab0 f080 	clz	r0, r0
 8013608:	0940      	lsrs	r0, r0, #5
 801360a:	b00f      	add	sp, #60	@ 0x3c
 801360c:	bd30      	pop	{r4, r5, pc}
 801360e:	bf00      	nop

08013610 <uxr_create_session>:
 8013610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	f100 0b08 	add.w	fp, r0, #8
 8013618:	b0ab      	sub	sp, #172	@ 0xac
 801361a:	4604      	mov	r4, r0
 801361c:	4658      	mov	r0, fp
 801361e:	f000 fa99 	bl	8013b54 <uxr_reset_stream_storage>
 8013622:	4620      	mov	r0, r4
 8013624:	f000 fa00 	bl	8013a28 <uxr_session_header_offset>
 8013628:	2300      	movs	r3, #0
 801362a:	9000      	str	r0, [sp, #0]
 801362c:	221c      	movs	r2, #28
 801362e:	a90b      	add	r1, sp, #44	@ 0x2c
 8013630:	a812      	add	r0, sp, #72	@ 0x48
 8013632:	f7fc ffc5 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 8013636:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013638:	8a1a      	ldrh	r2, [r3, #16]
 801363a:	3a04      	subs	r2, #4
 801363c:	b292      	uxth	r2, r2
 801363e:	a912      	add	r1, sp, #72	@ 0x48
 8013640:	4620      	mov	r0, r4
 8013642:	f000 f917 	bl	8013874 <uxr_buffer_create_session>
 8013646:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013648:	4620      	mov	r0, r4
 801364a:	f000 f983 	bl	8013954 <uxr_stamp_create_session_header>
 801364e:	a812      	add	r0, sp, #72	@ 0x48
 8013650:	f7fc fff4 	bl	801063c <ucdr_buffer_length>
 8013654:	23ff      	movs	r3, #255	@ 0xff
 8013656:	7163      	strb	r3, [r4, #5]
 8013658:	230a      	movs	r3, #10
 801365a:	46da      	mov	sl, fp
 801365c:	9303      	str	r3, [sp, #12]
 801365e:	4683      	mov	fp, r0
 8013660:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013662:	465a      	mov	r2, fp
 8013664:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013668:	a90b      	add	r1, sp, #44	@ 0x2c
 801366a:	47a8      	blx	r5
 801366c:	f000 fb92 	bl	8013d94 <uxr_millis>
 8013670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013674:	4605      	mov	r5, r0
 8013676:	e009      	b.n	801368c <uxr_create_session+0x7c>
 8013678:	f000 fb8c 	bl	8013d94 <uxr_millis>
 801367c:	1b40      	subs	r0, r0, r5
 801367e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013682:	2b00      	cmp	r3, #0
 8013684:	7962      	ldrb	r2, [r4, #5]
 8013686:	dd38      	ble.n	80136fa <uxr_create_session+0xea>
 8013688:	2aff      	cmp	r2, #255	@ 0xff
 801368a:	d13c      	bne.n	8013706 <uxr_create_session+0xf6>
 801368c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801368e:	a907      	add	r1, sp, #28
 8013690:	6896      	ldr	r6, [r2, #8]
 8013692:	6810      	ldr	r0, [r2, #0]
 8013694:	aa08      	add	r2, sp, #32
 8013696:	47b0      	blx	r6
 8013698:	2800      	cmp	r0, #0
 801369a:	d0ed      	beq.n	8013678 <uxr_create_session+0x68>
 801369c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80136a0:	a81a      	add	r0, sp, #104	@ 0x68
 80136a2:	f7fc ff9f 	bl	80105e4 <ucdr_init_buffer>
 80136a6:	2600      	movs	r6, #0
 80136a8:	f10d 031a 	add.w	r3, sp, #26
 80136ac:	aa06      	add	r2, sp, #24
 80136ae:	a91a      	add	r1, sp, #104	@ 0x68
 80136b0:	4620      	mov	r0, r4
 80136b2:	f88d 6018 	strb.w	r6, [sp, #24]
 80136b6:	f000 f975 	bl	80139a4 <uxr_read_session_header>
 80136ba:	2800      	cmp	r0, #0
 80136bc:	d0dc      	beq.n	8013678 <uxr_create_session+0x68>
 80136be:	4631      	mov	r1, r6
 80136c0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80136c4:	f000 fa12 	bl	8013aec <uxr_stream_id_from_raw>
 80136c8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80136cc:	2e01      	cmp	r6, #1
 80136ce:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80136d2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80136d6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80136da:	d053      	beq.n	8013784 <uxr_create_session+0x174>
 80136dc:	2e02      	cmp	r6, #2
 80136de:	d018      	beq.n	8013712 <uxr_create_session+0x102>
 80136e0:	2e00      	cmp	r6, #0
 80136e2:	d1c9      	bne.n	8013678 <uxr_create_session+0x68>
 80136e4:	4631      	mov	r1, r6
 80136e6:	4630      	mov	r0, r6
 80136e8:	f000 fa00 	bl	8013aec <uxr_stream_id_from_raw>
 80136ec:	a91a      	add	r1, sp, #104	@ 0x68
 80136ee:	4602      	mov	r2, r0
 80136f0:	900a      	str	r0, [sp, #40]	@ 0x28
 80136f2:	4620      	mov	r0, r4
 80136f4:	f7ff fb1a 	bl	8012d2c <read_submessage_list>
 80136f8:	e7be      	b.n	8013678 <uxr_create_session+0x68>
 80136fa:	9b03      	ldr	r3, [sp, #12]
 80136fc:	3b01      	subs	r3, #1
 80136fe:	9303      	str	r3, [sp, #12]
 8013700:	d001      	beq.n	8013706 <uxr_create_session+0xf6>
 8013702:	2aff      	cmp	r2, #255	@ 0xff
 8013704:	d0ac      	beq.n	8013660 <uxr_create_session+0x50>
 8013706:	2a00      	cmp	r2, #0
 8013708:	d051      	beq.n	80137ae <uxr_create_session+0x19e>
 801370a:	2000      	movs	r0, #0
 801370c:	b02b      	add	sp, #172	@ 0xac
 801370e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013712:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013716:	9304      	str	r3, [sp, #16]
 8013718:	4639      	mov	r1, r7
 801371a:	4650      	mov	r0, sl
 801371c:	f000 fad4 	bl	8013cc8 <uxr_get_input_reliable_stream>
 8013720:	4680      	mov	r8, r0
 8013722:	b348      	cbz	r0, 8013778 <uxr_create_session+0x168>
 8013724:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013726:	9205      	str	r2, [sp, #20]
 8013728:	a81a      	add	r0, sp, #104	@ 0x68
 801372a:	f7fc ff8b 	bl	8010644 <ucdr_buffer_remaining>
 801372e:	4603      	mov	r3, r0
 8013730:	f10d 0019 	add.w	r0, sp, #25
 8013734:	9000      	str	r0, [sp, #0]
 8013736:	9a05      	ldr	r2, [sp, #20]
 8013738:	4649      	mov	r1, r9
 801373a:	4640      	mov	r0, r8
 801373c:	f006 fb48 	bl	8019dd0 <uxr_receive_reliable_message>
 8013740:	b1d0      	cbz	r0, 8013778 <uxr_create_session+0x168>
 8013742:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d038      	beq.n	80137bc <uxr_create_session+0x1ac>
 801374a:	9e04      	ldr	r6, [sp, #16]
 801374c:	e00a      	b.n	8013764 <uxr_create_session+0x154>
 801374e:	f04f 0302 	mov.w	r3, #2
 8013752:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8013756:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 801375a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801375e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013760:	f7ff fae4 	bl	8012d2c <read_submessage_list>
 8013764:	a922      	add	r1, sp, #136	@ 0x88
 8013766:	2204      	movs	r2, #4
 8013768:	4640      	mov	r0, r8
 801376a:	f006 fbb1 	bl	8019ed0 <uxr_next_input_reliable_buffer_available>
 801376e:	4603      	mov	r3, r0
 8013770:	a922      	add	r1, sp, #136	@ 0x88
 8013772:	4620      	mov	r0, r4
 8013774:	2b00      	cmp	r3, #0
 8013776:	d1ea      	bne.n	801374e <uxr_create_session+0x13e>
 8013778:	9904      	ldr	r1, [sp, #16]
 801377a:	463a      	mov	r2, r7
 801377c:	4620      	mov	r0, r4
 801377e:	f7ff f951 	bl	8012a24 <write_submessage_acknack.isra.0>
 8013782:	e779      	b.n	8013678 <uxr_create_session+0x68>
 8013784:	4639      	mov	r1, r7
 8013786:	4650      	mov	r0, sl
 8013788:	f000 fa94 	bl	8013cb4 <uxr_get_input_best_effort_stream>
 801378c:	2800      	cmp	r0, #0
 801378e:	f43f af73 	beq.w	8013678 <uxr_create_session+0x68>
 8013792:	4649      	mov	r1, r9
 8013794:	f006 fa88 	bl	8019ca8 <uxr_receive_best_effort_message>
 8013798:	2800      	cmp	r0, #0
 801379a:	f43f af6d 	beq.w	8013678 <uxr_create_session+0x68>
 801379e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80137a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80137a4:	a91a      	add	r1, sp, #104	@ 0x68
 80137a6:	4620      	mov	r0, r4
 80137a8:	f7ff fac0 	bl	8012d2c <read_submessage_list>
 80137ac:	e764      	b.n	8013678 <uxr_create_session+0x68>
 80137ae:	4650      	mov	r0, sl
 80137b0:	f000 f9d0 	bl	8013b54 <uxr_reset_stream_storage>
 80137b4:	2001      	movs	r0, #1
 80137b6:	b02b      	add	sp, #172	@ 0xac
 80137b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137bc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80137c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80137c2:	a91a      	add	r1, sp, #104	@ 0x68
 80137c4:	4620      	mov	r0, r4
 80137c6:	f7ff fab1 	bl	8012d2c <read_submessage_list>
 80137ca:	e7be      	b.n	801374a <uxr_create_session+0x13a>

080137cc <uxr_prepare_stream_to_write_submessage>:
 80137cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137d0:	b082      	sub	sp, #8
 80137d2:	4682      	mov	sl, r0
 80137d4:	4610      	mov	r0, r2
 80137d6:	4615      	mov	r5, r2
 80137d8:	461e      	mov	r6, r3
 80137da:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80137de:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80137e2:	9101      	str	r1, [sp, #4]
 80137e4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80137e8:	f000 face 	bl	8013d88 <uxr_submessage_padding>
 80137ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80137f0:	f105 0904 	add.w	r9, r5, #4
 80137f4:	2b01      	cmp	r3, #1
 80137f6:	4481      	add	r9, r0
 80137f8:	d01d      	beq.n	8013836 <uxr_prepare_stream_to_write_submessage+0x6a>
 80137fa:	2b02      	cmp	r3, #2
 80137fc:	d116      	bne.n	801382c <uxr_prepare_stream_to_write_submessage+0x60>
 80137fe:	4621      	mov	r1, r4
 8013800:	f10a 0008 	add.w	r0, sl, #8
 8013804:	f000 fa4c 	bl	8013ca0 <uxr_get_output_reliable_stream>
 8013808:	4604      	mov	r4, r0
 801380a:	b158      	cbz	r0, 8013824 <uxr_prepare_stream_to_write_submessage+0x58>
 801380c:	4649      	mov	r1, r9
 801380e:	4632      	mov	r2, r6
 8013810:	f006 fd1a 	bl	801a248 <uxr_prepare_reliable_buffer_to_write>
 8013814:	4604      	mov	r4, r0
 8013816:	b12c      	cbz	r4, 8013824 <uxr_prepare_stream_to_write_submessage+0x58>
 8013818:	4643      	mov	r3, r8
 801381a:	b2aa      	uxth	r2, r5
 801381c:	4639      	mov	r1, r7
 801381e:	4630      	mov	r0, r6
 8013820:	f000 fa72 	bl	8013d08 <uxr_buffer_submessage_header>
 8013824:	4620      	mov	r0, r4
 8013826:	b002      	add	sp, #8
 8013828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801382c:	2400      	movs	r4, #0
 801382e:	4620      	mov	r0, r4
 8013830:	b002      	add	sp, #8
 8013832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013836:	4621      	mov	r1, r4
 8013838:	f10a 0008 	add.w	r0, sl, #8
 801383c:	f000 fa28 	bl	8013c90 <uxr_get_output_best_effort_stream>
 8013840:	4604      	mov	r4, r0
 8013842:	2800      	cmp	r0, #0
 8013844:	d0ee      	beq.n	8013824 <uxr_prepare_stream_to_write_submessage+0x58>
 8013846:	4649      	mov	r1, r9
 8013848:	4632      	mov	r2, r6
 801384a:	f006 fc2d 	bl	801a0a8 <uxr_prepare_best_effort_buffer_to_write>
 801384e:	4604      	mov	r4, r0
 8013850:	e7e1      	b.n	8013816 <uxr_prepare_stream_to_write_submessage+0x4a>
 8013852:	bf00      	nop

08013854 <uxr_init_session_info>:
 8013854:	0e13      	lsrs	r3, r2, #24
 8013856:	7043      	strb	r3, [r0, #1]
 8013858:	f3c2 2307 	ubfx	r3, r2, #8, #8
 801385c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013860:	7001      	strb	r1, [r0, #0]
 8013862:	70c3      	strb	r3, [r0, #3]
 8013864:	2109      	movs	r1, #9
 8013866:	23ff      	movs	r3, #255	@ 0xff
 8013868:	f880 c002 	strb.w	ip, [r0, #2]
 801386c:	7102      	strb	r2, [r0, #4]
 801386e:	80c1      	strh	r1, [r0, #6]
 8013870:	7143      	strb	r3, [r0, #5]
 8013872:	4770      	bx	lr

08013874 <uxr_buffer_create_session>:
 8013874:	b530      	push	{r4, r5, lr}
 8013876:	b089      	sub	sp, #36	@ 0x24
 8013878:	2300      	movs	r3, #0
 801387a:	4d12      	ldr	r5, [pc, #72]	@ (80138c4 <uxr_buffer_create_session+0x50>)
 801387c:	9307      	str	r3, [sp, #28]
 801387e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013882:	2201      	movs	r2, #1
 8013884:	9301      	str	r3, [sp, #4]
 8013886:	80c2      	strh	r2, [r0, #6]
 8013888:	f88d 2004 	strb.w	r2, [sp, #4]
 801388c:	682a      	ldr	r2, [r5, #0]
 801388e:	9200      	str	r2, [sp, #0]
 8013890:	88aa      	ldrh	r2, [r5, #4]
 8013892:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013896:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801389a:	9202      	str	r2, [sp, #8]
 801389c:	460c      	mov	r4, r1
 801389e:	7802      	ldrb	r2, [r0, #0]
 80138a0:	9303      	str	r3, [sp, #12]
 80138a2:	4619      	mov	r1, r3
 80138a4:	f88d 200c 	strb.w	r2, [sp, #12]
 80138a8:	4620      	mov	r0, r4
 80138aa:	2210      	movs	r2, #16
 80138ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80138b0:	9306      	str	r3, [sp, #24]
 80138b2:	f000 fa29 	bl	8013d08 <uxr_buffer_submessage_header>
 80138b6:	4669      	mov	r1, sp
 80138b8:	4620      	mov	r0, r4
 80138ba:	f001 fa6d 	bl	8014d98 <uxr_serialize_CREATE_CLIENT_Payload>
 80138be:	b009      	add	sp, #36	@ 0x24
 80138c0:	bd30      	pop	{r4, r5, pc}
 80138c2:	bf00      	nop
 80138c4:	0801d388 	.word	0x0801d388

080138c8 <uxr_buffer_delete_session>:
 80138c8:	b510      	push	{r4, lr}
 80138ca:	4b0c      	ldr	r3, [pc, #48]	@ (80138fc <uxr_buffer_delete_session+0x34>)
 80138cc:	b082      	sub	sp, #8
 80138ce:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80138d2:	f8ad c006 	strh.w	ip, [sp, #6]
 80138d6:	460c      	mov	r4, r1
 80138d8:	2202      	movs	r2, #2
 80138da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80138de:	80c2      	strh	r2, [r0, #6]
 80138e0:	f8ad 3004 	strh.w	r3, [sp, #4]
 80138e4:	2204      	movs	r2, #4
 80138e6:	2300      	movs	r3, #0
 80138e8:	2103      	movs	r1, #3
 80138ea:	4620      	mov	r0, r4
 80138ec:	f000 fa0c 	bl	8013d08 <uxr_buffer_submessage_header>
 80138f0:	a901      	add	r1, sp, #4
 80138f2:	4620      	mov	r0, r4
 80138f4:	f001 faf6 	bl	8014ee4 <uxr_serialize_DELETE_Payload>
 80138f8:	b002      	add	sp, #8
 80138fa:	bd10      	pop	{r4, pc}
 80138fc:	0801d388 	.word	0x0801d388

08013900 <uxr_read_create_session_status>:
 8013900:	b510      	push	{r4, lr}
 8013902:	b088      	sub	sp, #32
 8013904:	4604      	mov	r4, r0
 8013906:	4608      	mov	r0, r1
 8013908:	a901      	add	r1, sp, #4
 801390a:	f001 fafb 	bl	8014f04 <uxr_deserialize_STATUS_AGENT_Payload>
 801390e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013912:	7163      	strb	r3, [r4, #5]
 8013914:	b008      	add	sp, #32
 8013916:	bd10      	pop	{r4, pc}

08013918 <uxr_read_delete_session_status>:
 8013918:	b510      	push	{r4, lr}
 801391a:	4604      	mov	r4, r0
 801391c:	b084      	sub	sp, #16
 801391e:	4608      	mov	r0, r1
 8013920:	a902      	add	r1, sp, #8
 8013922:	f001 fb1f 	bl	8014f64 <uxr_deserialize_STATUS_Payload>
 8013926:	88e3      	ldrh	r3, [r4, #6]
 8013928:	2b02      	cmp	r3, #2
 801392a:	d001      	beq.n	8013930 <uxr_read_delete_session_status+0x18>
 801392c:	b004      	add	sp, #16
 801392e:	bd10      	pop	{r4, pc}
 8013930:	f10d 000a 	add.w	r0, sp, #10
 8013934:	f7fe fffc 	bl	8012930 <uxr_object_id_from_raw>
 8013938:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801393c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013940:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013944:	b29b      	uxth	r3, r3
 8013946:	2b02      	cmp	r3, #2
 8013948:	bf04      	itt	eq
 801394a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801394e:	7163      	strbeq	r3, [r4, #5]
 8013950:	b004      	add	sp, #16
 8013952:	bd10      	pop	{r4, pc}

08013954 <uxr_stamp_create_session_header>:
 8013954:	b510      	push	{r4, lr}
 8013956:	2208      	movs	r2, #8
 8013958:	b08a      	sub	sp, #40	@ 0x28
 801395a:	4604      	mov	r4, r0
 801395c:	eb0d 0002 	add.w	r0, sp, r2
 8013960:	f7fc fe40 	bl	80105e4 <ucdr_init_buffer>
 8013964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013968:	9400      	str	r4, [sp, #0]
 801396a:	2300      	movs	r3, #0
 801396c:	461a      	mov	r2, r3
 801396e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8013972:	a802      	add	r0, sp, #8
 8013974:	f000 fbc2 	bl	80140fc <uxr_serialize_message_header>
 8013978:	b00a      	add	sp, #40	@ 0x28
 801397a:	bd10      	pop	{r4, pc}

0801397c <uxr_stamp_session_header>:
 801397c:	b530      	push	{r4, r5, lr}
 801397e:	b08d      	sub	sp, #52	@ 0x34
 8013980:	4604      	mov	r4, r0
 8013982:	460d      	mov	r5, r1
 8013984:	9203      	str	r2, [sp, #12]
 8013986:	4619      	mov	r1, r3
 8013988:	a804      	add	r0, sp, #16
 801398a:	2208      	movs	r2, #8
 801398c:	f7fc fe2a 	bl	80105e4 <ucdr_init_buffer>
 8013990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013994:	9b03      	ldr	r3, [sp, #12]
 8013996:	9400      	str	r4, [sp, #0]
 8013998:	462a      	mov	r2, r5
 801399a:	a804      	add	r0, sp, #16
 801399c:	f000 fbae 	bl	80140fc <uxr_serialize_message_header>
 80139a0:	b00d      	add	sp, #52	@ 0x34
 80139a2:	bd30      	pop	{r4, r5, pc}

080139a4 <uxr_read_session_header>:
 80139a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139a8:	4607      	mov	r7, r0
 80139aa:	b084      	sub	sp, #16
 80139ac:	4608      	mov	r0, r1
 80139ae:	460c      	mov	r4, r1
 80139b0:	4615      	mov	r5, r2
 80139b2:	461e      	mov	r6, r3
 80139b4:	f7fc fe46 	bl	8010644 <ucdr_buffer_remaining>
 80139b8:	2808      	cmp	r0, #8
 80139ba:	d803      	bhi.n	80139c4 <uxr_read_session_header+0x20>
 80139bc:	2000      	movs	r0, #0
 80139be:	b004      	add	sp, #16
 80139c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139c4:	f10d 080c 	add.w	r8, sp, #12
 80139c8:	4633      	mov	r3, r6
 80139ca:	462a      	mov	r2, r5
 80139cc:	f8cd 8000 	str.w	r8, [sp]
 80139d0:	4620      	mov	r0, r4
 80139d2:	f10d 010b 	add.w	r1, sp, #11
 80139d6:	f000 fbaf 	bl	8014138 <uxr_deserialize_message_header>
 80139da:	783a      	ldrb	r2, [r7, #0]
 80139dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d1eb      	bne.n	80139bc <uxr_read_session_header+0x18>
 80139e4:	061b      	lsls	r3, r3, #24
 80139e6:	d41c      	bmi.n	8013a22 <uxr_read_session_header+0x7e>
 80139e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80139ec:	787b      	ldrb	r3, [r7, #1]
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d003      	beq.n	80139fa <uxr_read_session_header+0x56>
 80139f2:	2001      	movs	r0, #1
 80139f4:	f080 0001 	eor.w	r0, r0, #1
 80139f8:	e7e1      	b.n	80139be <uxr_read_session_header+0x1a>
 80139fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80139fe:	78bb      	ldrb	r3, [r7, #2]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	f107 0102 	add.w	r1, r7, #2
 8013a06:	d1f4      	bne.n	80139f2 <uxr_read_session_header+0x4e>
 8013a08:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013a0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d1ee      	bne.n	80139f2 <uxr_read_session_header+0x4e>
 8013a14:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013a18:	784b      	ldrb	r3, [r1, #1]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d1e9      	bne.n	80139f2 <uxr_read_session_header+0x4e>
 8013a1e:	2000      	movs	r0, #0
 8013a20:	e7e8      	b.n	80139f4 <uxr_read_session_header+0x50>
 8013a22:	2001      	movs	r0, #1
 8013a24:	e7cb      	b.n	80139be <uxr_read_session_header+0x1a>
 8013a26:	bf00      	nop

08013a28 <uxr_session_header_offset>:
 8013a28:	f990 3000 	ldrsb.w	r3, [r0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	bfac      	ite	ge
 8013a30:	2008      	movge	r0, #8
 8013a32:	2004      	movlt	r0, #4
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop

08013a38 <uxr_init_base_object_request>:
 8013a38:	b510      	push	{r4, lr}
 8013a3a:	88c3      	ldrh	r3, [r0, #6]
 8013a3c:	b082      	sub	sp, #8
 8013a3e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8013a42:	9101      	str	r1, [sp, #4]
 8013a44:	f1a3 010a 	sub.w	r1, r3, #10
 8013a48:	b289      	uxth	r1, r1
 8013a4a:	42a1      	cmp	r1, r4
 8013a4c:	d80e      	bhi.n	8013a6c <uxr_init_base_object_request+0x34>
 8013a4e:	3301      	adds	r3, #1
 8013a50:	b29c      	uxth	r4, r3
 8013a52:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013a56:	b2db      	uxtb	r3, r3
 8013a58:	80c4      	strh	r4, [r0, #6]
 8013a5a:	9801      	ldr	r0, [sp, #4]
 8013a5c:	7011      	strb	r1, [r2, #0]
 8013a5e:	7053      	strb	r3, [r2, #1]
 8013a60:	1c91      	adds	r1, r2, #2
 8013a62:	f7fe ff79 	bl	8012958 <uxr_object_id_to_raw>
 8013a66:	4620      	mov	r0, r4
 8013a68:	b002      	add	sp, #8
 8013a6a:	bd10      	pop	{r4, pc}
 8013a6c:	230a      	movs	r3, #10
 8013a6e:	2100      	movs	r1, #0
 8013a70:	461c      	mov	r4, r3
 8013a72:	e7f1      	b.n	8013a58 <uxr_init_base_object_request+0x20>

08013a74 <uxr_parse_base_object_request>:
 8013a74:	b570      	push	{r4, r5, r6, lr}
 8013a76:	4604      	mov	r4, r0
 8013a78:	3002      	adds	r0, #2
 8013a7a:	460d      	mov	r5, r1
 8013a7c:	4616      	mov	r6, r2
 8013a7e:	f7fe ff57 	bl	8012930 <uxr_object_id_from_raw>
 8013a82:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013a86:	8028      	strh	r0, [r5, #0]
 8013a88:	806b      	strh	r3, [r5, #2]
 8013a8a:	7822      	ldrb	r2, [r4, #0]
 8013a8c:	7863      	ldrb	r3, [r4, #1]
 8013a8e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013a92:	8033      	strh	r3, [r6, #0]
 8013a94:	bd70      	pop	{r4, r5, r6, pc}
 8013a96:	bf00      	nop

08013a98 <uxr_stream_id>:
 8013a98:	2901      	cmp	r1, #1
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	d01d      	beq.n	8013ada <uxr_stream_id+0x42>
 8013a9e:	2902      	cmp	r1, #2
 8013aa0:	f04f 0c00 	mov.w	ip, #0
 8013aa4:	d01e      	beq.n	8013ae4 <uxr_stream_id+0x4c>
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	f36c 0307 	bfi	r3, ip, #0, #8
 8013aac:	f360 230f 	bfi	r3, r0, #8, #8
 8013ab0:	f361 4317 	bfi	r3, r1, #16, #8
 8013ab4:	f362 631f 	bfi	r3, r2, #24, #8
 8013ab8:	b2da      	uxtb	r2, r3
 8013aba:	2000      	movs	r0, #0
 8013abc:	f362 0007 	bfi	r0, r2, #0, #8
 8013ac0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013ac4:	f362 200f 	bfi	r0, r2, #8, #8
 8013ac8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013acc:	f362 4017 	bfi	r0, r2, #16, #8
 8013ad0:	0e1b      	lsrs	r3, r3, #24
 8013ad2:	f363 601f 	bfi	r0, r3, #24, #8
 8013ad6:	b002      	add	sp, #8
 8013ad8:	4770      	bx	lr
 8013ada:	f100 0c01 	add.w	ip, r0, #1
 8013ade:	fa5f fc8c 	uxtb.w	ip, ip
 8013ae2:	e7e0      	b.n	8013aa6 <uxr_stream_id+0xe>
 8013ae4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8013ae8:	e7dd      	b.n	8013aa6 <uxr_stream_id+0xe>
 8013aea:	bf00      	nop

08013aec <uxr_stream_id_from_raw>:
 8013aec:	b082      	sub	sp, #8
 8013aee:	b130      	cbz	r0, 8013afe <uxr_stream_id_from_raw+0x12>
 8013af0:	0603      	lsls	r3, r0, #24
 8013af2:	d420      	bmi.n	8013b36 <uxr_stream_id_from_raw+0x4a>
 8013af4:	1e42      	subs	r2, r0, #1
 8013af6:	b2d2      	uxtb	r2, r2
 8013af8:	f04f 0c01 	mov.w	ip, #1
 8013afc:	e001      	b.n	8013b02 <uxr_stream_id_from_raw+0x16>
 8013afe:	4684      	mov	ip, r0
 8013b00:	4602      	mov	r2, r0
 8013b02:	2300      	movs	r3, #0
 8013b04:	f360 0307 	bfi	r3, r0, #0, #8
 8013b08:	f362 230f 	bfi	r3, r2, #8, #8
 8013b0c:	f36c 4317 	bfi	r3, ip, #16, #8
 8013b10:	f361 631f 	bfi	r3, r1, #24, #8
 8013b14:	b2da      	uxtb	r2, r3
 8013b16:	2000      	movs	r0, #0
 8013b18:	f362 0007 	bfi	r0, r2, #0, #8
 8013b1c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013b20:	f362 200f 	bfi	r0, r2, #8, #8
 8013b24:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013b28:	f362 4017 	bfi	r0, r2, #16, #8
 8013b2c:	0e1b      	lsrs	r3, r3, #24
 8013b2e:	f363 601f 	bfi	r0, r3, #24, #8
 8013b32:	b002      	add	sp, #8
 8013b34:	4770      	bx	lr
 8013b36:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8013b3a:	f04f 0c02 	mov.w	ip, #2
 8013b3e:	e7e0      	b.n	8013b02 <uxr_stream_id_from_raw+0x16>

08013b40 <uxr_init_stream_storage>:
 8013b40:	2300      	movs	r3, #0
 8013b42:	7403      	strb	r3, [r0, #16]
 8013b44:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8013b48:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8013b4c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8013b50:	4770      	bx	lr
 8013b52:	bf00      	nop

08013b54 <uxr_reset_stream_storage>:
 8013b54:	b570      	push	{r4, r5, r6, lr}
 8013b56:	7c03      	ldrb	r3, [r0, #16]
 8013b58:	4604      	mov	r4, r0
 8013b5a:	b153      	cbz	r3, 8013b72 <uxr_reset_stream_storage+0x1e>
 8013b5c:	4606      	mov	r6, r0
 8013b5e:	2500      	movs	r5, #0
 8013b60:	4630      	mov	r0, r6
 8013b62:	f006 fa9b 	bl	801a09c <uxr_reset_output_best_effort_stream>
 8013b66:	7c23      	ldrb	r3, [r4, #16]
 8013b68:	3501      	adds	r5, #1
 8013b6a:	42ab      	cmp	r3, r5
 8013b6c:	f106 0610 	add.w	r6, r6, #16
 8013b70:	d8f6      	bhi.n	8013b60 <uxr_reset_stream_storage+0xc>
 8013b72:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013b76:	b163      	cbz	r3, 8013b92 <uxr_reset_stream_storage+0x3e>
 8013b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b7c:	2500      	movs	r5, #0
 8013b7e:	4630      	mov	r0, r6
 8013b80:	f006 f88e 	bl	8019ca0 <uxr_reset_input_best_effort_stream>
 8013b84:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013b88:	3501      	adds	r5, #1
 8013b8a:	42ab      	cmp	r3, r5
 8013b8c:	f106 0602 	add.w	r6, r6, #2
 8013b90:	d8f5      	bhi.n	8013b7e <uxr_reset_stream_storage+0x2a>
 8013b92:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013b96:	b163      	cbz	r3, 8013bb2 <uxr_reset_stream_storage+0x5e>
 8013b98:	f104 0618 	add.w	r6, r4, #24
 8013b9c:	2500      	movs	r5, #0
 8013b9e:	4630      	mov	r0, r6
 8013ba0:	f006 fb28 	bl	801a1f4 <uxr_reset_output_reliable_stream>
 8013ba4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8013ba8:	3501      	adds	r5, #1
 8013baa:	42ab      	cmp	r3, r5
 8013bac:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8013bb0:	d8f5      	bhi.n	8013b9e <uxr_reset_stream_storage+0x4a>
 8013bb2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013bb6:	b163      	cbz	r3, 8013bd2 <uxr_reset_stream_storage+0x7e>
 8013bb8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8013bbc:	2500      	movs	r5, #0
 8013bbe:	4630      	mov	r0, r6
 8013bc0:	f006 f8e2 	bl	8019d88 <uxr_reset_input_reliable_stream>
 8013bc4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8013bc8:	3501      	adds	r5, #1
 8013bca:	42ab      	cmp	r3, r5
 8013bcc:	f106 0618 	add.w	r6, r6, #24
 8013bd0:	d8f5      	bhi.n	8013bbe <uxr_reset_stream_storage+0x6a>
 8013bd2:	bd70      	pop	{r4, r5, r6, pc}

08013bd4 <uxr_add_output_best_effort_buffer>:
 8013bd4:	b510      	push	{r4, lr}
 8013bd6:	7c04      	ldrb	r4, [r0, #16]
 8013bd8:	f104 0c01 	add.w	ip, r4, #1
 8013bdc:	b082      	sub	sp, #8
 8013bde:	f880 c010 	strb.w	ip, [r0, #16]
 8013be2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013be6:	f006 fa4f 	bl	801a088 <uxr_init_output_best_effort_stream>
 8013bea:	2201      	movs	r2, #1
 8013bec:	4611      	mov	r1, r2
 8013bee:	4620      	mov	r0, r4
 8013bf0:	b002      	add	sp, #8
 8013bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bf6:	f7ff bf4f 	b.w	8013a98 <uxr_stream_id>
 8013bfa:	bf00      	nop

08013bfc <uxr_add_output_reliable_buffer>:
 8013bfc:	b510      	push	{r4, lr}
 8013bfe:	b084      	sub	sp, #16
 8013c00:	4684      	mov	ip, r0
 8013c02:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013c06:	9000      	str	r0, [sp, #0]
 8013c08:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013c0c:	2028      	movs	r0, #40	@ 0x28
 8013c0e:	fb00 c004 	mla	r0, r0, r4, ip
 8013c12:	f104 0e01 	add.w	lr, r4, #1
 8013c16:	3018      	adds	r0, #24
 8013c18:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013c1c:	f006 fab2 	bl	801a184 <uxr_init_output_reliable_stream>
 8013c20:	2201      	movs	r2, #1
 8013c22:	2102      	movs	r1, #2
 8013c24:	4620      	mov	r0, r4
 8013c26:	b004      	add	sp, #16
 8013c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c2c:	f7ff bf34 	b.w	8013a98 <uxr_stream_id>

08013c30 <uxr_add_input_best_effort_buffer>:
 8013c30:	b510      	push	{r4, lr}
 8013c32:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013c36:	4603      	mov	r3, r0
 8013c38:	1c62      	adds	r2, r4, #1
 8013c3a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8013c3e:	b082      	sub	sp, #8
 8013c40:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013c48:	f006 f826 	bl	8019c98 <uxr_init_input_best_effort_stream>
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	2101      	movs	r1, #1
 8013c50:	4620      	mov	r0, r4
 8013c52:	b002      	add	sp, #8
 8013c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c58:	f7ff bf1e 	b.w	8013a98 <uxr_stream_id>

08013c5c <uxr_add_input_reliable_buffer>:
 8013c5c:	b510      	push	{r4, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	4684      	mov	ip, r0
 8013c62:	9806      	ldr	r0, [sp, #24]
 8013c64:	9000      	str	r0, [sp, #0]
 8013c66:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8013c6a:	2018      	movs	r0, #24
 8013c6c:	fb00 c004 	mla	r0, r0, r4, ip
 8013c70:	f104 0e01 	add.w	lr, r4, #1
 8013c74:	3048      	adds	r0, #72	@ 0x48
 8013c76:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8013c7a:	f006 f859 	bl	8019d30 <uxr_init_input_reliable_stream>
 8013c7e:	2200      	movs	r2, #0
 8013c80:	2102      	movs	r1, #2
 8013c82:	4620      	mov	r0, r4
 8013c84:	b004      	add	sp, #16
 8013c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c8a:	f7ff bf05 	b.w	8013a98 <uxr_stream_id>
 8013c8e:	bf00      	nop

08013c90 <uxr_get_output_best_effort_stream>:
 8013c90:	7c03      	ldrb	r3, [r0, #16]
 8013c92:	428b      	cmp	r3, r1
 8013c94:	bf8c      	ite	hi
 8013c96:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013c9a:	2000      	movls	r0, #0
 8013c9c:	4770      	bx	lr
 8013c9e:	bf00      	nop

08013ca0 <uxr_get_output_reliable_stream>:
 8013ca0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013ca4:	428b      	cmp	r3, r1
 8013ca6:	bf83      	ittte	hi
 8013ca8:	2328      	movhi	r3, #40	@ 0x28
 8013caa:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013cae:	3018      	addhi	r0, #24
 8013cb0:	2000      	movls	r0, #0
 8013cb2:	4770      	bx	lr

08013cb4 <uxr_get_input_best_effort_stream>:
 8013cb4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013cb8:	428b      	cmp	r3, r1
 8013cba:	bf86      	itte	hi
 8013cbc:	3121      	addhi	r1, #33	@ 0x21
 8013cbe:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8013cc2:	2000      	movls	r0, #0
 8013cc4:	4770      	bx	lr
 8013cc6:	bf00      	nop

08013cc8 <uxr_get_input_reliable_stream>:
 8013cc8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8013ccc:	428b      	cmp	r3, r1
 8013cce:	bf83      	ittte	hi
 8013cd0:	2318      	movhi	r3, #24
 8013cd2:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013cd6:	3048      	addhi	r0, #72	@ 0x48
 8013cd8:	2000      	movls	r0, #0
 8013cda:	4770      	bx	lr

08013cdc <uxr_output_streams_confirmed>:
 8013cdc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013ce0:	b183      	cbz	r3, 8013d04 <uxr_output_streams_confirmed+0x28>
 8013ce2:	b570      	push	{r4, r5, r6, lr}
 8013ce4:	4606      	mov	r6, r0
 8013ce6:	f100 0518 	add.w	r5, r0, #24
 8013cea:	2400      	movs	r4, #0
 8013cec:	e001      	b.n	8013cf2 <uxr_output_streams_confirmed+0x16>
 8013cee:	3528      	adds	r5, #40	@ 0x28
 8013cf0:	b138      	cbz	r0, 8013d02 <uxr_output_streams_confirmed+0x26>
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	f006 fcee 	bl	801a6d4 <uxr_is_output_up_to_date>
 8013cf8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013cfc:	3401      	adds	r4, #1
 8013cfe:	42a3      	cmp	r3, r4
 8013d00:	d8f5      	bhi.n	8013cee <uxr_output_streams_confirmed+0x12>
 8013d02:	bd70      	pop	{r4, r5, r6, pc}
 8013d04:	2001      	movs	r0, #1
 8013d06:	4770      	bx	lr

08013d08 <uxr_buffer_submessage_header>:
 8013d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0a:	4604      	mov	r4, r0
 8013d0c:	460e      	mov	r6, r1
 8013d0e:	2104      	movs	r1, #4
 8013d10:	4615      	mov	r5, r2
 8013d12:	461f      	mov	r7, r3
 8013d14:	f7fc fc80 	bl	8010618 <ucdr_align_to>
 8013d18:	2301      	movs	r3, #1
 8013d1a:	ea47 0203 	orr.w	r2, r7, r3
 8013d1e:	4631      	mov	r1, r6
 8013d20:	7523      	strb	r3, [r4, #20]
 8013d22:	4620      	mov	r0, r4
 8013d24:	462b      	mov	r3, r5
 8013d26:	f000 fa27 	bl	8014178 <uxr_serialize_submessage_header>
 8013d2a:	4620      	mov	r0, r4
 8013d2c:	f7fc fc8a 	bl	8010644 <ucdr_buffer_remaining>
 8013d30:	42a8      	cmp	r0, r5
 8013d32:	bf34      	ite	cc
 8013d34:	2000      	movcc	r0, #0
 8013d36:	2001      	movcs	r0, #1
 8013d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d3a:	bf00      	nop

08013d3c <uxr_read_submessage_header>:
 8013d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d40:	4604      	mov	r4, r0
 8013d42:	460d      	mov	r5, r1
 8013d44:	2104      	movs	r1, #4
 8013d46:	4616      	mov	r6, r2
 8013d48:	4698      	mov	r8, r3
 8013d4a:	f7fc fc65 	bl	8010618 <ucdr_align_to>
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f7fc fc78 	bl	8010644 <ucdr_buffer_remaining>
 8013d54:	2803      	cmp	r0, #3
 8013d56:	bf8c      	ite	hi
 8013d58:	2701      	movhi	r7, #1
 8013d5a:	2700      	movls	r7, #0
 8013d5c:	d802      	bhi.n	8013d64 <uxr_read_submessage_header+0x28>
 8013d5e:	4638      	mov	r0, r7
 8013d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d64:	4633      	mov	r3, r6
 8013d66:	4642      	mov	r2, r8
 8013d68:	4620      	mov	r0, r4
 8013d6a:	4629      	mov	r1, r5
 8013d6c:	f000 fa18 	bl	80141a0 <uxr_deserialize_submessage_header>
 8013d70:	f898 3000 	ldrb.w	r3, [r8]
 8013d74:	f003 0201 	and.w	r2, r3, #1
 8013d78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013d7c:	f888 3000 	strb.w	r3, [r8]
 8013d80:	7522      	strb	r2, [r4, #20]
 8013d82:	4638      	mov	r0, r7
 8013d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d88 <uxr_submessage_padding>:
 8013d88:	f010 0003 	ands.w	r0, r0, #3
 8013d8c:	bf18      	it	ne
 8013d8e:	f1c0 0004 	rsbne	r0, r0, #4
 8013d92:	4770      	bx	lr

08013d94 <uxr_millis>:
 8013d94:	b510      	push	{r4, lr}
 8013d96:	b084      	sub	sp, #16
 8013d98:	4669      	mov	r1, sp
 8013d9a:	2001      	movs	r0, #1
 8013d9c:	f7ed fd00 	bl	80017a0 <clock_gettime>
 8013da0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8013da4:	4906      	ldr	r1, [pc, #24]	@ (8013dc0 <uxr_millis+0x2c>)
 8013da6:	fba0 0301 	umull	r0, r3, r0, r1
 8013daa:	1900      	adds	r0, r0, r4
 8013dac:	fb01 3102 	mla	r1, r1, r2, r3
 8013db0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8013db4:	4a03      	ldr	r2, [pc, #12]	@ (8013dc4 <uxr_millis+0x30>)
 8013db6:	2300      	movs	r3, #0
 8013db8:	f7ec fac2 	bl	8000340 <__aeabi_ldivmod>
 8013dbc:	b004      	add	sp, #16
 8013dbe:	bd10      	pop	{r4, pc}
 8013dc0:	3b9aca00 	.word	0x3b9aca00
 8013dc4:	000f4240 	.word	0x000f4240

08013dc8 <uxr_nanos>:
 8013dc8:	b510      	push	{r4, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	4669      	mov	r1, sp
 8013dce:	2001      	movs	r0, #1
 8013dd0:	f7ed fce6 	bl	80017a0 <clock_gettime>
 8013dd4:	4a06      	ldr	r2, [pc, #24]	@ (8013df0 <uxr_nanos+0x28>)
 8013dd6:	9800      	ldr	r0, [sp, #0]
 8013dd8:	9902      	ldr	r1, [sp, #8]
 8013dda:	9c01      	ldr	r4, [sp, #4]
 8013ddc:	fba0 0302 	umull	r0, r3, r0, r2
 8013de0:	1840      	adds	r0, r0, r1
 8013de2:	fb02 3304 	mla	r3, r2, r4, r3
 8013de6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013dea:	b004      	add	sp, #16
 8013dec:	bd10      	pop	{r4, pc}
 8013dee:	bf00      	nop
 8013df0:	3b9aca00 	.word	0x3b9aca00

08013df4 <on_full_output_buffer_fragmented>:
 8013df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df8:	460c      	mov	r4, r1
 8013dfa:	b08a      	sub	sp, #40	@ 0x28
 8013dfc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8013e00:	4606      	mov	r6, r0
 8013e02:	f104 0008 	add.w	r0, r4, #8
 8013e06:	f7ff ff4b 	bl	8013ca0 <uxr_get_output_reliable_stream>
 8013e0a:	4605      	mov	r5, r0
 8013e0c:	f006 fc6c 	bl	801a6e8 <get_available_free_slots>
 8013e10:	b968      	cbnz	r0, 8013e2e <on_full_output_buffer_fragmented+0x3a>
 8013e12:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013e16:	4620      	mov	r0, r4
 8013e18:	4798      	blx	r3
 8013e1a:	b918      	cbnz	r0, 8013e24 <on_full_output_buffer_fragmented+0x30>
 8013e1c:	2001      	movs	r0, #1
 8013e1e:	b00a      	add	sp, #40	@ 0x28
 8013e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e24:	4628      	mov	r0, r5
 8013e26:	f006 fc5f 	bl	801a6e8 <get_available_free_slots>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	d0f6      	beq.n	8013e1c <on_full_output_buffer_fragmented+0x28>
 8013e2e:	8929      	ldrh	r1, [r5, #8]
 8013e30:	89eb      	ldrh	r3, [r5, #14]
 8013e32:	7b28      	ldrb	r0, [r5, #12]
 8013e34:	686a      	ldr	r2, [r5, #4]
 8013e36:	fbb2 f8f1 	udiv	r8, r2, r1
 8013e3a:	fbb3 f2f1 	udiv	r2, r3, r1
 8013e3e:	fb01 3112 	mls	r1, r1, r2, r3
 8013e42:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013e46:	b289      	uxth	r1, r1
 8013e48:	fb08 f101 	mul.w	r1, r8, r1
 8013e4c:	30fc      	adds	r0, #252	@ 0xfc
 8013e4e:	f1a8 0804 	sub.w	r8, r8, #4
 8013e52:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013e56:	4440      	add	r0, r8
 8013e58:	b287      	uxth	r7, r0
 8013e5a:	1bdb      	subs	r3, r3, r7
 8013e5c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8013e60:	682b      	ldr	r3, [r5, #0]
 8013e62:	3104      	adds	r1, #4
 8013e64:	4419      	add	r1, r3
 8013e66:	4642      	mov	r2, r8
 8013e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e6c:	9300      	str	r3, [sp, #0]
 8013e6e:	a802      	add	r0, sp, #8
 8013e70:	2300      	movs	r3, #0
 8013e72:	f7fc fba5 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 8013e76:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013e7a:	f102 0308 	add.w	r3, r2, #8
 8013e7e:	4543      	cmp	r3, r8
 8013e80:	d928      	bls.n	8013ed4 <on_full_output_buffer_fragmented+0xe0>
 8013e82:	463a      	mov	r2, r7
 8013e84:	2300      	movs	r3, #0
 8013e86:	210d      	movs	r1, #13
 8013e88:	a802      	add	r0, sp, #8
 8013e8a:	f7ff ff3d 	bl	8013d08 <uxr_buffer_submessage_header>
 8013e8e:	8929      	ldrh	r1, [r5, #8]
 8013e90:	89eb      	ldrh	r3, [r5, #14]
 8013e92:	fbb3 f2f1 	udiv	r2, r3, r1
 8013e96:	fb01 3312 	mls	r3, r1, r2, r3
 8013e9a:	b29b      	uxth	r3, r3
 8013e9c:	686a      	ldr	r2, [r5, #4]
 8013e9e:	fbb2 f2f1 	udiv	r2, r2, r1
 8013ea2:	fb02 f303 	mul.w	r3, r2, r3
 8013ea6:	682a      	ldr	r2, [r5, #0]
 8013ea8:	f842 8003 	str.w	r8, [r2, r3]
 8013eac:	89e8      	ldrh	r0, [r5, #14]
 8013eae:	2101      	movs	r1, #1
 8013eb0:	f006 fd6a 	bl	801a988 <uxr_seq_num_add>
 8013eb4:	9904      	ldr	r1, [sp, #16]
 8013eb6:	9a03      	ldr	r2, [sp, #12]
 8013eb8:	81e8      	strh	r0, [r5, #14]
 8013eba:	1a52      	subs	r2, r2, r1
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	f7fc fb91 	bl	80105e4 <ucdr_init_buffer>
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	490f      	ldr	r1, [pc, #60]	@ (8013f04 <on_full_output_buffer_fragmented+0x110>)
 8013ec6:	4622      	mov	r2, r4
 8013ec8:	f7fc fb60 	bl	801058c <ucdr_set_on_full_buffer_callback>
 8013ecc:	2000      	movs	r0, #0
 8013ece:	b00a      	add	sp, #40	@ 0x28
 8013ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ed4:	b292      	uxth	r2, r2
 8013ed6:	2302      	movs	r3, #2
 8013ed8:	210d      	movs	r1, #13
 8013eda:	a802      	add	r0, sp, #8
 8013edc:	f7ff ff14 	bl	8013d08 <uxr_buffer_submessage_header>
 8013ee0:	8928      	ldrh	r0, [r5, #8]
 8013ee2:	89eb      	ldrh	r3, [r5, #14]
 8013ee4:	fbb3 f1f0 	udiv	r1, r3, r0
 8013ee8:	fb00 3311 	mls	r3, r0, r1, r3
 8013eec:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013ef0:	6869      	ldr	r1, [r5, #4]
 8013ef2:	fbb1 f1f0 	udiv	r1, r1, r0
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	fb01 f303 	mul.w	r3, r1, r3
 8013efc:	6829      	ldr	r1, [r5, #0]
 8013efe:	3208      	adds	r2, #8
 8013f00:	50ca      	str	r2, [r1, r3]
 8013f02:	e7d3      	b.n	8013eac <on_full_output_buffer_fragmented+0xb8>
 8013f04:	08013df5 	.word	0x08013df5

08013f08 <uxr_prepare_output_stream>:
 8013f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f0a:	b087      	sub	sp, #28
 8013f0c:	2707      	movs	r7, #7
 8013f0e:	9202      	str	r2, [sp, #8]
 8013f10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013f12:	9103      	str	r1, [sp, #12]
 8013f14:	2500      	movs	r5, #0
 8013f16:	3204      	adds	r2, #4
 8013f18:	e9cd 7500 	strd	r7, r5, [sp]
 8013f1c:	461c      	mov	r4, r3
 8013f1e:	4606      	mov	r6, r0
 8013f20:	f7ff fc54 	bl	80137cc <uxr_prepare_stream_to_write_submessage>
 8013f24:	f080 0201 	eor.w	r2, r0, #1
 8013f28:	b2d2      	uxtb	r2, r2
 8013f2a:	75a2      	strb	r2, [r4, #22]
 8013f2c:	b112      	cbz	r2, 8013f34 <uxr_prepare_output_stream+0x2c>
 8013f2e:	4628      	mov	r0, r5
 8013f30:	b007      	add	sp, #28
 8013f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f34:	aa05      	add	r2, sp, #20
 8013f36:	9902      	ldr	r1, [sp, #8]
 8013f38:	4630      	mov	r0, r6
 8013f3a:	f7ff fd7d 	bl	8013a38 <uxr_init_base_object_request>
 8013f3e:	a905      	add	r1, sp, #20
 8013f40:	4605      	mov	r5, r0
 8013f42:	4620      	mov	r0, r4
 8013f44:	f001 f88c 	bl	8015060 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013f48:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013f4c:	69a6      	ldr	r6, [r4, #24]
 8013f4e:	69e7      	ldr	r7, [r4, #28]
 8013f50:	1a52      	subs	r2, r2, r1
 8013f52:	4620      	mov	r0, r4
 8013f54:	f7fc fb46 	bl	80105e4 <ucdr_init_buffer>
 8013f58:	4620      	mov	r0, r4
 8013f5a:	463a      	mov	r2, r7
 8013f5c:	4631      	mov	r1, r6
 8013f5e:	f7fc fb15 	bl	801058c <ucdr_set_on_full_buffer_callback>
 8013f62:	4628      	mov	r0, r5
 8013f64:	b007      	add	sp, #28
 8013f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013f68 <uxr_prepare_output_stream_fragmented>:
 8013f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f6c:	b091      	sub	sp, #68	@ 0x44
 8013f6e:	4605      	mov	r5, r0
 8013f70:	9105      	str	r1, [sp, #20]
 8013f72:	3008      	adds	r0, #8
 8013f74:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013f78:	461e      	mov	r6, r3
 8013f7a:	9204      	str	r2, [sp, #16]
 8013f7c:	f7ff fe90 	bl	8013ca0 <uxr_get_output_reliable_stream>
 8013f80:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013f84:	2b01      	cmp	r3, #1
 8013f86:	f000 8091 	beq.w	80140ac <uxr_prepare_output_stream_fragmented+0x144>
 8013f8a:	4604      	mov	r4, r0
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	f000 808d 	beq.w	80140ac <uxr_prepare_output_stream_fragmented+0x144>
 8013f92:	f006 fba9 	bl	801a6e8 <get_available_free_slots>
 8013f96:	2800      	cmp	r0, #0
 8013f98:	f000 8083 	beq.w	80140a2 <uxr_prepare_output_stream_fragmented+0x13a>
 8013f9c:	8922      	ldrh	r2, [r4, #8]
 8013f9e:	89e7      	ldrh	r7, [r4, #14]
 8013fa0:	fbb7 f9f2 	udiv	r9, r7, r2
 8013fa4:	fb02 7919 	mls	r9, r2, r9, r7
 8013fa8:	fa1f f989 	uxth.w	r9, r9
 8013fac:	6863      	ldr	r3, [r4, #4]
 8013fae:	fbb3 f2f2 	udiv	r2, r3, r2
 8013fb2:	6823      	ldr	r3, [r4, #0]
 8013fb4:	9203      	str	r2, [sp, #12]
 8013fb6:	fb02 f909 	mul.w	r9, r2, r9
 8013fba:	f109 0904 	add.w	r9, r9, #4
 8013fbe:	4499      	add	r9, r3
 8013fc0:	7b23      	ldrb	r3, [r4, #12]
 8013fc2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013fc6:	4543      	cmp	r3, r8
 8013fc8:	f1a2 0b04 	sub.w	fp, r2, #4
 8013fcc:	d37a      	bcc.n	80140c4 <uxr_prepare_output_stream_fragmented+0x15c>
 8013fce:	f1ab 0a04 	sub.w	sl, fp, #4
 8013fd2:	ebaa 0a03 	sub.w	sl, sl, r3
 8013fd6:	465a      	mov	r2, fp
 8013fd8:	2300      	movs	r3, #0
 8013fda:	4649      	mov	r1, r9
 8013fdc:	a808      	add	r0, sp, #32
 8013fde:	f8cd 8000 	str.w	r8, [sp]
 8013fe2:	f7fc faed 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 8013fe6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013fe8:	fa1f fa8a 	uxth.w	sl, sl
 8013fec:	4652      	mov	r2, sl
 8013fee:	f103 0a08 	add.w	sl, r3, #8
 8013ff2:	45da      	cmp	sl, fp
 8013ff4:	bf34      	ite	cc
 8013ff6:	2302      	movcc	r3, #2
 8013ff8:	2300      	movcs	r3, #0
 8013ffa:	210d      	movs	r1, #13
 8013ffc:	a808      	add	r0, sp, #32
 8013ffe:	f7ff fe83 	bl	8013d08 <uxr_buffer_submessage_header>
 8014002:	8921      	ldrh	r1, [r4, #8]
 8014004:	fbb7 f2f1 	udiv	r2, r7, r1
 8014008:	fb01 7212 	mls	r2, r1, r2, r7
 801400c:	b292      	uxth	r2, r2
 801400e:	6863      	ldr	r3, [r4, #4]
 8014010:	fbb3 f3f1 	udiv	r3, r3, r1
 8014014:	fb02 f303 	mul.w	r3, r2, r3
 8014018:	6822      	ldr	r2, [r4, #0]
 801401a:	4638      	mov	r0, r7
 801401c:	f842 b003 	str.w	fp, [r2, r3]
 8014020:	2101      	movs	r1, #1
 8014022:	f006 fcb1 	bl	801a988 <uxr_seq_num_add>
 8014026:	9b03      	ldr	r3, [sp, #12]
 8014028:	f108 0104 	add.w	r1, r8, #4
 801402c:	f1a3 0208 	sub.w	r2, r3, #8
 8014030:	eba2 0208 	sub.w	r2, r2, r8
 8014034:	4449      	add	r1, r9
 8014036:	4607      	mov	r7, r0
 8014038:	4630      	mov	r0, r6
 801403a:	f7fc fad3 	bl	80105e4 <ucdr_init_buffer>
 801403e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8014040:	81e7      	strh	r7, [r4, #14]
 8014042:	1d1a      	adds	r2, r3, #4
 8014044:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8014048:	bf28      	it	cs
 801404a:	2200      	movcs	r2, #0
 801404c:	2300      	movs	r3, #0
 801404e:	b292      	uxth	r2, r2
 8014050:	2107      	movs	r1, #7
 8014052:	4630      	mov	r0, r6
 8014054:	f7ff fe58 	bl	8013d08 <uxr_buffer_submessage_header>
 8014058:	9904      	ldr	r1, [sp, #16]
 801405a:	aa07      	add	r2, sp, #28
 801405c:	4628      	mov	r0, r5
 801405e:	f7ff fceb 	bl	8013a38 <uxr_init_base_object_request>
 8014062:	4604      	mov	r4, r0
 8014064:	b318      	cbz	r0, 80140ae <uxr_prepare_output_stream_fragmented+0x146>
 8014066:	a907      	add	r1, sp, #28
 8014068:	4630      	mov	r0, r6
 801406a:	f000 fff9 	bl	8015060 <uxr_serialize_WRITE_DATA_Payload_Data>
 801406e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014072:	4630      	mov	r0, r6
 8014074:	1a52      	subs	r2, r2, r1
 8014076:	f7fc fab5 	bl	80105e4 <ucdr_init_buffer>
 801407a:	9b05      	ldr	r3, [sp, #20]
 801407c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8014080:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014082:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8014086:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8014088:	491b      	ldr	r1, [pc, #108]	@ (80140f8 <uxr_prepare_output_stream_fragmented+0x190>)
 801408a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801408e:	4630      	mov	r0, r6
 8014090:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8014094:	462a      	mov	r2, r5
 8014096:	f7fc fa79 	bl	801058c <ucdr_set_on_full_buffer_callback>
 801409a:	4620      	mov	r0, r4
 801409c:	b011      	add	sp, #68	@ 0x44
 801409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80140a4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80140a6:	4628      	mov	r0, r5
 80140a8:	4798      	blx	r3
 80140aa:	b920      	cbnz	r0, 80140b6 <uxr_prepare_output_stream_fragmented+0x14e>
 80140ac:	2400      	movs	r4, #0
 80140ae:	4620      	mov	r0, r4
 80140b0:	b011      	add	sp, #68	@ 0x44
 80140b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140b6:	4620      	mov	r0, r4
 80140b8:	f006 fb16 	bl	801a6e8 <get_available_free_slots>
 80140bc:	2800      	cmp	r0, #0
 80140be:	f47f af6d 	bne.w	8013f9c <uxr_prepare_output_stream_fragmented+0x34>
 80140c2:	e7f3      	b.n	80140ac <uxr_prepare_output_stream_fragmented+0x144>
 80140c4:	4638      	mov	r0, r7
 80140c6:	2101      	movs	r1, #1
 80140c8:	f006 fc5e 	bl	801a988 <uxr_seq_num_add>
 80140cc:	8921      	ldrh	r1, [r4, #8]
 80140ce:	fbb0 f2f1 	udiv	r2, r0, r1
 80140d2:	fb01 0912 	mls	r9, r1, r2, r0
 80140d6:	fa1f f289 	uxth.w	r2, r9
 80140da:	6863      	ldr	r3, [r4, #4]
 80140dc:	fbb3 f9f1 	udiv	r9, r3, r1
 80140e0:	6823      	ldr	r3, [r4, #0]
 80140e2:	fb02 f909 	mul.w	r9, r2, r9
 80140e6:	f109 0904 	add.w	r9, r9, #4
 80140ea:	4499      	add	r9, r3
 80140ec:	4607      	mov	r7, r0
 80140ee:	7b23      	ldrb	r3, [r4, #12]
 80140f0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80140f4:	e76b      	b.n	8013fce <uxr_prepare_output_stream_fragmented+0x66>
 80140f6:	bf00      	nop
 80140f8:	08013df5 	.word	0x08013df5

080140fc <uxr_serialize_message_header>:
 80140fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80140fe:	b083      	sub	sp, #12
 8014100:	4616      	mov	r6, r2
 8014102:	4604      	mov	r4, r0
 8014104:	9301      	str	r3, [sp, #4]
 8014106:	460d      	mov	r5, r1
 8014108:	9f08      	ldr	r7, [sp, #32]
 801410a:	f7fb f801 	bl	800f110 <ucdr_serialize_uint8_t>
 801410e:	4631      	mov	r1, r6
 8014110:	4620      	mov	r0, r4
 8014112:	f7fa fffd 	bl	800f110 <ucdr_serialize_uint8_t>
 8014116:	9a01      	ldr	r2, [sp, #4]
 8014118:	2101      	movs	r1, #1
 801411a:	4620      	mov	r0, r4
 801411c:	f7fb f8a4 	bl	800f268 <ucdr_serialize_endian_uint16_t>
 8014120:	062b      	lsls	r3, r5, #24
 8014122:	d501      	bpl.n	8014128 <uxr_serialize_message_header+0x2c>
 8014124:	b003      	add	sp, #12
 8014126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014128:	2204      	movs	r2, #4
 801412a:	4639      	mov	r1, r7
 801412c:	4620      	mov	r0, r4
 801412e:	b003      	add	sp, #12
 8014130:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014134:	f005 bbb6 	b.w	80198a4 <ucdr_serialize_array_uint8_t>

08014138 <uxr_deserialize_message_header>:
 8014138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801413a:	b083      	sub	sp, #12
 801413c:	4616      	mov	r6, r2
 801413e:	4604      	mov	r4, r0
 8014140:	9301      	str	r3, [sp, #4]
 8014142:	460d      	mov	r5, r1
 8014144:	9f08      	ldr	r7, [sp, #32]
 8014146:	f7fa fff9 	bl	800f13c <ucdr_deserialize_uint8_t>
 801414a:	4631      	mov	r1, r6
 801414c:	4620      	mov	r0, r4
 801414e:	f7fa fff5 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014152:	9a01      	ldr	r2, [sp, #4]
 8014154:	2101      	movs	r1, #1
 8014156:	4620      	mov	r0, r4
 8014158:	f7fb f97a 	bl	800f450 <ucdr_deserialize_endian_uint16_t>
 801415c:	f995 3000 	ldrsb.w	r3, [r5]
 8014160:	2b00      	cmp	r3, #0
 8014162:	da01      	bge.n	8014168 <uxr_deserialize_message_header+0x30>
 8014164:	b003      	add	sp, #12
 8014166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014168:	2204      	movs	r2, #4
 801416a:	4639      	mov	r1, r7
 801416c:	4620      	mov	r0, r4
 801416e:	b003      	add	sp, #12
 8014170:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014174:	f005 bbfa 	b.w	801996c <ucdr_deserialize_array_uint8_t>

08014178 <uxr_serialize_submessage_header>:
 8014178:	b530      	push	{r4, r5, lr}
 801417a:	b083      	sub	sp, #12
 801417c:	4615      	mov	r5, r2
 801417e:	4604      	mov	r4, r0
 8014180:	9301      	str	r3, [sp, #4]
 8014182:	f7fa ffc5 	bl	800f110 <ucdr_serialize_uint8_t>
 8014186:	4629      	mov	r1, r5
 8014188:	4620      	mov	r0, r4
 801418a:	f7fa ffc1 	bl	800f110 <ucdr_serialize_uint8_t>
 801418e:	9a01      	ldr	r2, [sp, #4]
 8014190:	2101      	movs	r1, #1
 8014192:	4620      	mov	r0, r4
 8014194:	b003      	add	sp, #12
 8014196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801419a:	f7fb b865 	b.w	800f268 <ucdr_serialize_endian_uint16_t>
 801419e:	bf00      	nop

080141a0 <uxr_deserialize_submessage_header>:
 80141a0:	b530      	push	{r4, r5, lr}
 80141a2:	b083      	sub	sp, #12
 80141a4:	4615      	mov	r5, r2
 80141a6:	4604      	mov	r4, r0
 80141a8:	9301      	str	r3, [sp, #4]
 80141aa:	f7fa ffc7 	bl	800f13c <ucdr_deserialize_uint8_t>
 80141ae:	4629      	mov	r1, r5
 80141b0:	4620      	mov	r0, r4
 80141b2:	f7fa ffc3 	bl	800f13c <ucdr_deserialize_uint8_t>
 80141b6:	9a01      	ldr	r2, [sp, #4]
 80141b8:	2101      	movs	r1, #1
 80141ba:	4620      	mov	r0, r4
 80141bc:	b003      	add	sp, #12
 80141be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141c2:	f7fb b945 	b.w	800f450 <ucdr_deserialize_endian_uint16_t>
 80141c6:	bf00      	nop

080141c8 <uxr_serialize_CLIENT_Representation>:
 80141c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141cc:	2204      	movs	r2, #4
 80141ce:	460e      	mov	r6, r1
 80141d0:	4605      	mov	r5, r0
 80141d2:	f005 fb67 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 80141d6:	2202      	movs	r2, #2
 80141d8:	4607      	mov	r7, r0
 80141da:	1d31      	adds	r1, r6, #4
 80141dc:	4628      	mov	r0, r5
 80141de:	f005 fb61 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 80141e2:	4038      	ands	r0, r7
 80141e4:	2202      	movs	r2, #2
 80141e6:	1db1      	adds	r1, r6, #6
 80141e8:	b2c7      	uxtb	r7, r0
 80141ea:	4628      	mov	r0, r5
 80141ec:	f005 fb5a 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 80141f0:	2204      	movs	r2, #4
 80141f2:	4007      	ands	r7, r0
 80141f4:	f106 0108 	add.w	r1, r6, #8
 80141f8:	4628      	mov	r0, r5
 80141fa:	f005 fb53 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 80141fe:	7b31      	ldrb	r1, [r6, #12]
 8014200:	4007      	ands	r7, r0
 8014202:	4628      	mov	r0, r5
 8014204:	f7fa ff84 	bl	800f110 <ucdr_serialize_uint8_t>
 8014208:	7b71      	ldrb	r1, [r6, #13]
 801420a:	4007      	ands	r7, r0
 801420c:	4628      	mov	r0, r5
 801420e:	f7fa ff51 	bl	800f0b4 <ucdr_serialize_bool>
 8014212:	7b73      	ldrb	r3, [r6, #13]
 8014214:	ea07 0800 	and.w	r8, r7, r0
 8014218:	b93b      	cbnz	r3, 801422a <uxr_serialize_CLIENT_Representation+0x62>
 801421a:	8bb1      	ldrh	r1, [r6, #28]
 801421c:	4628      	mov	r0, r5
 801421e:	f7fa ffa3 	bl	800f168 <ucdr_serialize_uint16_t>
 8014222:	ea08 0000 	and.w	r0, r8, r0
 8014226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801422a:	6931      	ldr	r1, [r6, #16]
 801422c:	4628      	mov	r0, r5
 801422e:	f7fb f985 	bl	800f53c <ucdr_serialize_uint32_t>
 8014232:	6933      	ldr	r3, [r6, #16]
 8014234:	b1e3      	cbz	r3, 8014270 <uxr_serialize_CLIENT_Representation+0xa8>
 8014236:	b1c0      	cbz	r0, 801426a <uxr_serialize_CLIENT_Representation+0xa2>
 8014238:	4637      	mov	r7, r6
 801423a:	f04f 0900 	mov.w	r9, #0
 801423e:	e001      	b.n	8014244 <uxr_serialize_CLIENT_Representation+0x7c>
 8014240:	3708      	adds	r7, #8
 8014242:	b194      	cbz	r4, 801426a <uxr_serialize_CLIENT_Representation+0xa2>
 8014244:	6979      	ldr	r1, [r7, #20]
 8014246:	4628      	mov	r0, r5
 8014248:	f005 fc4c 	bl	8019ae4 <ucdr_serialize_string>
 801424c:	69b9      	ldr	r1, [r7, #24]
 801424e:	4604      	mov	r4, r0
 8014250:	4628      	mov	r0, r5
 8014252:	f005 fc47 	bl	8019ae4 <ucdr_serialize_string>
 8014256:	6933      	ldr	r3, [r6, #16]
 8014258:	f109 0901 	add.w	r9, r9, #1
 801425c:	4004      	ands	r4, r0
 801425e:	4599      	cmp	r9, r3
 8014260:	b2e4      	uxtb	r4, r4
 8014262:	d3ed      	bcc.n	8014240 <uxr_serialize_CLIENT_Representation+0x78>
 8014264:	ea08 0804 	and.w	r8, r8, r4
 8014268:	e7d7      	b.n	801421a <uxr_serialize_CLIENT_Representation+0x52>
 801426a:	f04f 0800 	mov.w	r8, #0
 801426e:	e7d4      	b.n	801421a <uxr_serialize_CLIENT_Representation+0x52>
 8014270:	ea08 0800 	and.w	r8, r8, r0
 8014274:	e7d1      	b.n	801421a <uxr_serialize_CLIENT_Representation+0x52>
 8014276:	bf00      	nop

08014278 <uxr_deserialize_CLIENT_Representation>:
 8014278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801427c:	2204      	movs	r2, #4
 801427e:	460c      	mov	r4, r1
 8014280:	4605      	mov	r5, r0
 8014282:	f005 fb73 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014286:	2202      	movs	r2, #2
 8014288:	4607      	mov	r7, r0
 801428a:	1d21      	adds	r1, r4, #4
 801428c:	4628      	mov	r0, r5
 801428e:	f005 fb6d 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014292:	4038      	ands	r0, r7
 8014294:	2202      	movs	r2, #2
 8014296:	1da1      	adds	r1, r4, #6
 8014298:	b2c6      	uxtb	r6, r0
 801429a:	4628      	mov	r0, r5
 801429c:	f005 fb66 	bl	801996c <ucdr_deserialize_array_uint8_t>
 80142a0:	2204      	movs	r2, #4
 80142a2:	4006      	ands	r6, r0
 80142a4:	f104 0108 	add.w	r1, r4, #8
 80142a8:	4628      	mov	r0, r5
 80142aa:	f005 fb5f 	bl	801996c <ucdr_deserialize_array_uint8_t>
 80142ae:	f104 010c 	add.w	r1, r4, #12
 80142b2:	4006      	ands	r6, r0
 80142b4:	4628      	mov	r0, r5
 80142b6:	f7fa ff41 	bl	800f13c <ucdr_deserialize_uint8_t>
 80142ba:	f104 010d 	add.w	r1, r4, #13
 80142be:	ea06 0700 	and.w	r7, r6, r0
 80142c2:	4628      	mov	r0, r5
 80142c4:	f7fa ff0c 	bl	800f0e0 <ucdr_deserialize_bool>
 80142c8:	7b63      	ldrb	r3, [r4, #13]
 80142ca:	4007      	ands	r7, r0
 80142cc:	b93b      	cbnz	r3, 80142de <uxr_deserialize_CLIENT_Representation+0x66>
 80142ce:	f104 011c 	add.w	r1, r4, #28
 80142d2:	4628      	mov	r0, r5
 80142d4:	f7fb f848 	bl	800f368 <ucdr_deserialize_uint16_t>
 80142d8:	4038      	ands	r0, r7
 80142da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142de:	f104 0110 	add.w	r1, r4, #16
 80142e2:	4628      	mov	r0, r5
 80142e4:	f7fb fa5a 	bl	800f79c <ucdr_deserialize_uint32_t>
 80142e8:	6923      	ldr	r3, [r4, #16]
 80142ea:	2b01      	cmp	r3, #1
 80142ec:	d903      	bls.n	80142f6 <uxr_deserialize_CLIENT_Representation+0x7e>
 80142ee:	2301      	movs	r3, #1
 80142f0:	75ab      	strb	r3, [r5, #22]
 80142f2:	2700      	movs	r7, #0
 80142f4:	e7eb      	b.n	80142ce <uxr_deserialize_CLIENT_Representation+0x56>
 80142f6:	b30b      	cbz	r3, 801433c <uxr_deserialize_CLIENT_Representation+0xc4>
 80142f8:	2800      	cmp	r0, #0
 80142fa:	d0fa      	beq.n	80142f2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80142fc:	46a0      	mov	r8, r4
 80142fe:	f04f 0900 	mov.w	r9, #0
 8014302:	e001      	b.n	8014308 <uxr_deserialize_CLIENT_Representation+0x90>
 8014304:	2e00      	cmp	r6, #0
 8014306:	d0f4      	beq.n	80142f2 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014308:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801430c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014310:	4628      	mov	r0, r5
 8014312:	f005 fbf7 	bl	8019b04 <ucdr_deserialize_string>
 8014316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801431a:	4606      	mov	r6, r0
 801431c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014320:	4628      	mov	r0, r5
 8014322:	f005 fbef 	bl	8019b04 <ucdr_deserialize_string>
 8014326:	6923      	ldr	r3, [r4, #16]
 8014328:	f109 0901 	add.w	r9, r9, #1
 801432c:	4006      	ands	r6, r0
 801432e:	4599      	cmp	r9, r3
 8014330:	f108 0808 	add.w	r8, r8, #8
 8014334:	b2f6      	uxtb	r6, r6
 8014336:	d3e5      	bcc.n	8014304 <uxr_deserialize_CLIENT_Representation+0x8c>
 8014338:	4037      	ands	r7, r6
 801433a:	e7c8      	b.n	80142ce <uxr_deserialize_CLIENT_Representation+0x56>
 801433c:	4007      	ands	r7, r0
 801433e:	e7c6      	b.n	80142ce <uxr_deserialize_CLIENT_Representation+0x56>

08014340 <uxr_serialize_AGENT_Representation>:
 8014340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014344:	2204      	movs	r2, #4
 8014346:	460f      	mov	r7, r1
 8014348:	4605      	mov	r5, r0
 801434a:	f005 faab 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 801434e:	2202      	movs	r2, #2
 8014350:	4604      	mov	r4, r0
 8014352:	1d39      	adds	r1, r7, #4
 8014354:	4628      	mov	r0, r5
 8014356:	f005 faa5 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 801435a:	4020      	ands	r0, r4
 801435c:	2202      	movs	r2, #2
 801435e:	1db9      	adds	r1, r7, #6
 8014360:	b2c4      	uxtb	r4, r0
 8014362:	4628      	mov	r0, r5
 8014364:	f005 fa9e 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014368:	7a39      	ldrb	r1, [r7, #8]
 801436a:	4004      	ands	r4, r0
 801436c:	4628      	mov	r0, r5
 801436e:	f7fa fea1 	bl	800f0b4 <ucdr_serialize_bool>
 8014372:	7a3b      	ldrb	r3, [r7, #8]
 8014374:	ea00 0804 	and.w	r8, r0, r4
 8014378:	b913      	cbnz	r3, 8014380 <uxr_serialize_AGENT_Representation+0x40>
 801437a:	4640      	mov	r0, r8
 801437c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014380:	68f9      	ldr	r1, [r7, #12]
 8014382:	4628      	mov	r0, r5
 8014384:	f7fb f8da 	bl	800f53c <ucdr_serialize_uint32_t>
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	b303      	cbz	r3, 80143ce <uxr_serialize_AGENT_Representation+0x8e>
 801438c:	b1d0      	cbz	r0, 80143c4 <uxr_serialize_AGENT_Representation+0x84>
 801438e:	463e      	mov	r6, r7
 8014390:	f04f 0900 	mov.w	r9, #0
 8014394:	e001      	b.n	801439a <uxr_serialize_AGENT_Representation+0x5a>
 8014396:	3608      	adds	r6, #8
 8014398:	b1a4      	cbz	r4, 80143c4 <uxr_serialize_AGENT_Representation+0x84>
 801439a:	6931      	ldr	r1, [r6, #16]
 801439c:	4628      	mov	r0, r5
 801439e:	f005 fba1 	bl	8019ae4 <ucdr_serialize_string>
 80143a2:	6971      	ldr	r1, [r6, #20]
 80143a4:	4604      	mov	r4, r0
 80143a6:	4628      	mov	r0, r5
 80143a8:	f005 fb9c 	bl	8019ae4 <ucdr_serialize_string>
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	f109 0901 	add.w	r9, r9, #1
 80143b2:	4004      	ands	r4, r0
 80143b4:	4599      	cmp	r9, r3
 80143b6:	b2e4      	uxtb	r4, r4
 80143b8:	d3ed      	bcc.n	8014396 <uxr_serialize_AGENT_Representation+0x56>
 80143ba:	ea08 0804 	and.w	r8, r8, r4
 80143be:	4640      	mov	r0, r8
 80143c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143c4:	f04f 0800 	mov.w	r8, #0
 80143c8:	4640      	mov	r0, r8
 80143ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143ce:	ea08 0800 	and.w	r8, r8, r0
 80143d2:	e7d2      	b.n	801437a <uxr_serialize_AGENT_Representation+0x3a>

080143d4 <uxr_serialize_DATAWRITER_Representation>:
 80143d4:	b570      	push	{r4, r5, r6, lr}
 80143d6:	460d      	mov	r5, r1
 80143d8:	7809      	ldrb	r1, [r1, #0]
 80143da:	4606      	mov	r6, r0
 80143dc:	f7fa fe98 	bl	800f110 <ucdr_serialize_uint8_t>
 80143e0:	4604      	mov	r4, r0
 80143e2:	b130      	cbz	r0, 80143f2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80143e4:	782b      	ldrb	r3, [r5, #0]
 80143e6:	2b02      	cmp	r3, #2
 80143e8:	d00c      	beq.n	8014404 <uxr_serialize_DATAWRITER_Representation+0x30>
 80143ea:	2b03      	cmp	r3, #3
 80143ec:	d010      	beq.n	8014410 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80143ee:	2b01      	cmp	r3, #1
 80143f0:	d008      	beq.n	8014404 <uxr_serialize_DATAWRITER_Representation+0x30>
 80143f2:	2202      	movs	r2, #2
 80143f4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80143f8:	4630      	mov	r0, r6
 80143fa:	f005 fa53 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 80143fe:	4020      	ands	r0, r4
 8014400:	b2c0      	uxtb	r0, r0
 8014402:	bd70      	pop	{r4, r5, r6, pc}
 8014404:	6869      	ldr	r1, [r5, #4]
 8014406:	4630      	mov	r0, r6
 8014408:	f005 fb6c 	bl	8019ae4 <ucdr_serialize_string>
 801440c:	4604      	mov	r4, r0
 801440e:	e7f0      	b.n	80143f2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014410:	4629      	mov	r1, r5
 8014412:	4630      	mov	r0, r6
 8014414:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8014418:	3104      	adds	r1, #4
 801441a:	f005 fb37 	bl	8019a8c <ucdr_serialize_sequence_uint8_t>
 801441e:	4604      	mov	r4, r0
 8014420:	e7e7      	b.n	80143f2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014422:	bf00      	nop

08014424 <uxr_serialize_ObjectVariant.part.0>:
 8014424:	b570      	push	{r4, r5, r6, lr}
 8014426:	780b      	ldrb	r3, [r1, #0]
 8014428:	3b01      	subs	r3, #1
 801442a:	460c      	mov	r4, r1
 801442c:	4605      	mov	r5, r0
 801442e:	2b0d      	cmp	r3, #13
 8014430:	d854      	bhi.n	80144dc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014432:	e8df f003 	tbb	[pc, r3]
 8014436:	0730      	.short	0x0730
 8014438:	07071b1b 	.word	0x07071b1b
 801443c:	0c530707 	.word	0x0c530707
 8014440:	494e0c0c 	.word	0x494e0c0c
 8014444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014448:	3104      	adds	r1, #4
 801444a:	f7ff bfc3 	b.w	80143d4 <uxr_serialize_DATAWRITER_Representation>
 801444e:	7909      	ldrb	r1, [r1, #4]
 8014450:	f7fa fe5e 	bl	800f110 <ucdr_serialize_uint8_t>
 8014454:	b1e8      	cbz	r0, 8014492 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8014456:	7923      	ldrb	r3, [r4, #4]
 8014458:	2b01      	cmp	r3, #1
 801445a:	d001      	beq.n	8014460 <uxr_serialize_ObjectVariant.part.0+0x3c>
 801445c:	2b02      	cmp	r3, #2
 801445e:	d13d      	bne.n	80144dc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014460:	68a1      	ldr	r1, [r4, #8]
 8014462:	4628      	mov	r0, r5
 8014464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014468:	f005 bb3c 	b.w	8019ae4 <ucdr_serialize_string>
 801446c:	7909      	ldrb	r1, [r1, #4]
 801446e:	f7fa fe4f 	bl	800f110 <ucdr_serialize_uint8_t>
 8014472:	4606      	mov	r6, r0
 8014474:	b120      	cbz	r0, 8014480 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014476:	7923      	ldrb	r3, [r4, #4]
 8014478:	2b02      	cmp	r3, #2
 801447a:	d039      	beq.n	80144f0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 801447c:	2b03      	cmp	r3, #3
 801447e:	d02f      	beq.n	80144e0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8014480:	2202      	movs	r2, #2
 8014482:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8014486:	4628      	mov	r0, r5
 8014488:	f005 fa0c 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 801448c:	4030      	ands	r0, r6
 801448e:	b2c0      	uxtb	r0, r0
 8014490:	bd70      	pop	{r4, r5, r6, pc}
 8014492:	2000      	movs	r0, #0
 8014494:	bd70      	pop	{r4, r5, r6, pc}
 8014496:	7909      	ldrb	r1, [r1, #4]
 8014498:	f7fa fe3a 	bl	800f110 <ucdr_serialize_uint8_t>
 801449c:	4606      	mov	r6, r0
 801449e:	b158      	cbz	r0, 80144b8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80144a0:	7923      	ldrb	r3, [r4, #4]
 80144a2:	2b02      	cmp	r3, #2
 80144a4:	d003      	beq.n	80144ae <uxr_serialize_ObjectVariant.part.0+0x8a>
 80144a6:	2b03      	cmp	r3, #3
 80144a8:	d028      	beq.n	80144fc <uxr_serialize_ObjectVariant.part.0+0xd8>
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d104      	bne.n	80144b8 <uxr_serialize_ObjectVariant.part.0+0x94>
 80144ae:	68a1      	ldr	r1, [r4, #8]
 80144b0:	4628      	mov	r0, r5
 80144b2:	f005 fb17 	bl	8019ae4 <ucdr_serialize_string>
 80144b6:	4606      	mov	r6, r0
 80144b8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80144bc:	4628      	mov	r0, r5
 80144be:	f7fb fb63 	bl	800fb88 <ucdr_serialize_int16_t>
 80144c2:	4030      	ands	r0, r6
 80144c4:	b2c0      	uxtb	r0, r0
 80144c6:	bd70      	pop	{r4, r5, r6, pc}
 80144c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144cc:	3104      	adds	r1, #4
 80144ce:	f7ff be7b 	b.w	80141c8 <uxr_serialize_CLIENT_Representation>
 80144d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144d6:	3104      	adds	r1, #4
 80144d8:	f7ff bf32 	b.w	8014340 <uxr_serialize_AGENT_Representation>
 80144dc:	2001      	movs	r0, #1
 80144de:	bd70      	pop	{r4, r5, r6, pc}
 80144e0:	68a2      	ldr	r2, [r4, #8]
 80144e2:	f104 010c 	add.w	r1, r4, #12
 80144e6:	4628      	mov	r0, r5
 80144e8:	f005 fad0 	bl	8019a8c <ucdr_serialize_sequence_uint8_t>
 80144ec:	4606      	mov	r6, r0
 80144ee:	e7c7      	b.n	8014480 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80144f0:	68a1      	ldr	r1, [r4, #8]
 80144f2:	4628      	mov	r0, r5
 80144f4:	f005 faf6 	bl	8019ae4 <ucdr_serialize_string>
 80144f8:	4606      	mov	r6, r0
 80144fa:	e7c1      	b.n	8014480 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80144fc:	68a2      	ldr	r2, [r4, #8]
 80144fe:	f104 010c 	add.w	r1, r4, #12
 8014502:	4628      	mov	r0, r5
 8014504:	f005 fac2 	bl	8019a8c <ucdr_serialize_sequence_uint8_t>
 8014508:	4606      	mov	r6, r0
 801450a:	e7d5      	b.n	80144b8 <uxr_serialize_ObjectVariant.part.0+0x94>

0801450c <uxr_deserialize_DATAWRITER_Representation>:
 801450c:	b570      	push	{r4, r5, r6, lr}
 801450e:	4606      	mov	r6, r0
 8014510:	460d      	mov	r5, r1
 8014512:	f7fa fe13 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014516:	4604      	mov	r4, r0
 8014518:	b130      	cbz	r0, 8014528 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801451a:	782b      	ldrb	r3, [r5, #0]
 801451c:	2b02      	cmp	r3, #2
 801451e:	d00c      	beq.n	801453a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014520:	2b03      	cmp	r3, #3
 8014522:	d012      	beq.n	801454a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014524:	2b01      	cmp	r3, #1
 8014526:	d008      	beq.n	801453a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014528:	2202      	movs	r2, #2
 801452a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801452e:	4630      	mov	r0, r6
 8014530:	f005 fa1c 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014534:	4020      	ands	r0, r4
 8014536:	b2c0      	uxtb	r0, r0
 8014538:	bd70      	pop	{r4, r5, r6, pc}
 801453a:	6869      	ldr	r1, [r5, #4]
 801453c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014540:	4630      	mov	r0, r6
 8014542:	f005 fadf 	bl	8019b04 <ucdr_deserialize_string>
 8014546:	4604      	mov	r4, r0
 8014548:	e7ee      	b.n	8014528 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801454a:	1d2b      	adds	r3, r5, #4
 801454c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014550:	f105 0108 	add.w	r1, r5, #8
 8014554:	4630      	mov	r0, r6
 8014556:	f005 faab 	bl	8019ab0 <ucdr_deserialize_sequence_uint8_t>
 801455a:	4604      	mov	r4, r0
 801455c:	e7e4      	b.n	8014528 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801455e:	bf00      	nop

08014560 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014560:	b570      	push	{r4, r5, r6, lr}
 8014562:	460d      	mov	r5, r1
 8014564:	7809      	ldrb	r1, [r1, #0]
 8014566:	4606      	mov	r6, r0
 8014568:	f7fa fda4 	bl	800f0b4 <ucdr_serialize_bool>
 801456c:	782b      	ldrb	r3, [r5, #0]
 801456e:	4604      	mov	r4, r0
 8014570:	b94b      	cbnz	r3, 8014586 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014572:	7a29      	ldrb	r1, [r5, #8]
 8014574:	4630      	mov	r0, r6
 8014576:	f7fa fd9d 	bl	800f0b4 <ucdr_serialize_bool>
 801457a:	7a2b      	ldrb	r3, [r5, #8]
 801457c:	4004      	ands	r4, r0
 801457e:	b2e4      	uxtb	r4, r4
 8014580:	b943      	cbnz	r3, 8014594 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014582:	4620      	mov	r0, r4
 8014584:	bd70      	pop	{r4, r5, r6, pc}
 8014586:	6869      	ldr	r1, [r5, #4]
 8014588:	4630      	mov	r0, r6
 801458a:	f005 faab 	bl	8019ae4 <ucdr_serialize_string>
 801458e:	4004      	ands	r4, r0
 8014590:	b2e4      	uxtb	r4, r4
 8014592:	e7ee      	b.n	8014572 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014594:	68e9      	ldr	r1, [r5, #12]
 8014596:	4630      	mov	r0, r6
 8014598:	f005 faa4 	bl	8019ae4 <ucdr_serialize_string>
 801459c:	4004      	ands	r4, r0
 801459e:	4620      	mov	r0, r4
 80145a0:	bd70      	pop	{r4, r5, r6, pc}
 80145a2:	bf00      	nop

080145a4 <uxr_serialize_OBJK_Topic_Binary>:
 80145a4:	b570      	push	{r4, r5, r6, lr}
 80145a6:	460d      	mov	r5, r1
 80145a8:	6809      	ldr	r1, [r1, #0]
 80145aa:	4606      	mov	r6, r0
 80145ac:	f005 fa9a 	bl	8019ae4 <ucdr_serialize_string>
 80145b0:	7929      	ldrb	r1, [r5, #4]
 80145b2:	4604      	mov	r4, r0
 80145b4:	4630      	mov	r0, r6
 80145b6:	f7fa fd7d 	bl	800f0b4 <ucdr_serialize_bool>
 80145ba:	792b      	ldrb	r3, [r5, #4]
 80145bc:	4004      	ands	r4, r0
 80145be:	b2e4      	uxtb	r4, r4
 80145c0:	b943      	cbnz	r3, 80145d4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80145c2:	7b29      	ldrb	r1, [r5, #12]
 80145c4:	4630      	mov	r0, r6
 80145c6:	f7fa fd75 	bl	800f0b4 <ucdr_serialize_bool>
 80145ca:	7b2b      	ldrb	r3, [r5, #12]
 80145cc:	4004      	ands	r4, r0
 80145ce:	b93b      	cbnz	r3, 80145e0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80145d0:	4620      	mov	r0, r4
 80145d2:	bd70      	pop	{r4, r5, r6, pc}
 80145d4:	68a9      	ldr	r1, [r5, #8]
 80145d6:	4630      	mov	r0, r6
 80145d8:	f005 fa84 	bl	8019ae4 <ucdr_serialize_string>
 80145dc:	4004      	ands	r4, r0
 80145de:	e7f0      	b.n	80145c2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80145e0:	6929      	ldr	r1, [r5, #16]
 80145e2:	4630      	mov	r0, r6
 80145e4:	f005 fa7e 	bl	8019ae4 <ucdr_serialize_string>
 80145e8:	4004      	ands	r4, r0
 80145ea:	b2e4      	uxtb	r4, r4
 80145ec:	4620      	mov	r0, r4
 80145ee:	bd70      	pop	{r4, r5, r6, pc}

080145f0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80145f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f4:	460c      	mov	r4, r1
 80145f6:	7809      	ldrb	r1, [r1, #0]
 80145f8:	4606      	mov	r6, r0
 80145fa:	f7fa fd5b 	bl	800f0b4 <ucdr_serialize_bool>
 80145fe:	7823      	ldrb	r3, [r4, #0]
 8014600:	4605      	mov	r5, r0
 8014602:	b96b      	cbnz	r3, 8014620 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014604:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014608:	4630      	mov	r0, r6
 801460a:	f7fa fd53 	bl	800f0b4 <ucdr_serialize_bool>
 801460e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014612:	4005      	ands	r5, r0
 8014614:	b2ed      	uxtb	r5, r5
 8014616:	2b00      	cmp	r3, #0
 8014618:	d169      	bne.n	80146ee <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801461a:	4628      	mov	r0, r5
 801461c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014620:	6861      	ldr	r1, [r4, #4]
 8014622:	4630      	mov	r0, r6
 8014624:	f7fa ff8a 	bl	800f53c <ucdr_serialize_uint32_t>
 8014628:	6863      	ldr	r3, [r4, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d06b      	beq.n	8014706 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801462e:	2800      	cmp	r0, #0
 8014630:	d067      	beq.n	8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014632:	68a1      	ldr	r1, [r4, #8]
 8014634:	4630      	mov	r0, r6
 8014636:	f005 fa55 	bl	8019ae4 <ucdr_serialize_string>
 801463a:	6863      	ldr	r3, [r4, #4]
 801463c:	2b01      	cmp	r3, #1
 801463e:	d953      	bls.n	80146e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014640:	2800      	cmp	r0, #0
 8014642:	d05e      	beq.n	8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014644:	68e1      	ldr	r1, [r4, #12]
 8014646:	4630      	mov	r0, r6
 8014648:	f005 fa4c 	bl	8019ae4 <ucdr_serialize_string>
 801464c:	6863      	ldr	r3, [r4, #4]
 801464e:	2b02      	cmp	r3, #2
 8014650:	d94a      	bls.n	80146e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014652:	2800      	cmp	r0, #0
 8014654:	d055      	beq.n	8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014656:	6921      	ldr	r1, [r4, #16]
 8014658:	4630      	mov	r0, r6
 801465a:	f005 fa43 	bl	8019ae4 <ucdr_serialize_string>
 801465e:	6863      	ldr	r3, [r4, #4]
 8014660:	2b03      	cmp	r3, #3
 8014662:	d941      	bls.n	80146e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014664:	2800      	cmp	r0, #0
 8014666:	d04c      	beq.n	8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014668:	6961      	ldr	r1, [r4, #20]
 801466a:	4630      	mov	r0, r6
 801466c:	f005 fa3a 	bl	8019ae4 <ucdr_serialize_string>
 8014670:	6863      	ldr	r3, [r4, #4]
 8014672:	2b04      	cmp	r3, #4
 8014674:	d938      	bls.n	80146e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014676:	2800      	cmp	r0, #0
 8014678:	d043      	beq.n	8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801467a:	69a1      	ldr	r1, [r4, #24]
 801467c:	4630      	mov	r0, r6
 801467e:	f005 fa31 	bl	8019ae4 <ucdr_serialize_string>
 8014682:	6863      	ldr	r3, [r4, #4]
 8014684:	2b05      	cmp	r3, #5
 8014686:	d92f      	bls.n	80146e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014688:	2800      	cmp	r0, #0
 801468a:	d03a      	beq.n	8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801468c:	69e1      	ldr	r1, [r4, #28]
 801468e:	4630      	mov	r0, r6
 8014690:	f005 fa28 	bl	8019ae4 <ucdr_serialize_string>
 8014694:	6863      	ldr	r3, [r4, #4]
 8014696:	2b06      	cmp	r3, #6
 8014698:	d926      	bls.n	80146e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801469a:	b390      	cbz	r0, 8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801469c:	6a21      	ldr	r1, [r4, #32]
 801469e:	4630      	mov	r0, r6
 80146a0:	f005 fa20 	bl	8019ae4 <ucdr_serialize_string>
 80146a4:	6863      	ldr	r3, [r4, #4]
 80146a6:	2b07      	cmp	r3, #7
 80146a8:	d91e      	bls.n	80146e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80146aa:	b350      	cbz	r0, 8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80146ac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80146ae:	4630      	mov	r0, r6
 80146b0:	f005 fa18 	bl	8019ae4 <ucdr_serialize_string>
 80146b4:	6863      	ldr	r3, [r4, #4]
 80146b6:	2b08      	cmp	r3, #8
 80146b8:	d916      	bls.n	80146e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80146ba:	b310      	cbz	r0, 8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80146bc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80146be:	4630      	mov	r0, r6
 80146c0:	f005 fa10 	bl	8019ae4 <ucdr_serialize_string>
 80146c4:	6863      	ldr	r3, [r4, #4]
 80146c6:	2b09      	cmp	r3, #9
 80146c8:	d90e      	bls.n	80146e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80146ca:	b1d0      	cbz	r0, 8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80146cc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80146d0:	2709      	movs	r7, #9
 80146d2:	e000      	b.n	80146d6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80146d4:	b1a8      	cbz	r0, 8014702 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80146d6:	f858 1b04 	ldr.w	r1, [r8], #4
 80146da:	4630      	mov	r0, r6
 80146dc:	f005 fa02 	bl	8019ae4 <ucdr_serialize_string>
 80146e0:	6862      	ldr	r2, [r4, #4]
 80146e2:	3701      	adds	r7, #1
 80146e4:	4297      	cmp	r7, r2
 80146e6:	d3f5      	bcc.n	80146d4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80146e8:	4005      	ands	r5, r0
 80146ea:	b2ed      	uxtb	r5, r5
 80146ec:	e78a      	b.n	8014604 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80146ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80146f0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80146f4:	4630      	mov	r0, r6
 80146f6:	f005 f9c9 	bl	8019a8c <ucdr_serialize_sequence_uint8_t>
 80146fa:	4005      	ands	r5, r0
 80146fc:	4628      	mov	r0, r5
 80146fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014702:	2500      	movs	r5, #0
 8014704:	e77e      	b.n	8014604 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014706:	4028      	ands	r0, r5
 8014708:	b2c5      	uxtb	r5, r0
 801470a:	e77b      	b.n	8014604 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801470c <uxr_serialize_OBJK_Publisher_Binary>:
 801470c:	b570      	push	{r4, r5, r6, lr}
 801470e:	460d      	mov	r5, r1
 8014710:	7809      	ldrb	r1, [r1, #0]
 8014712:	4606      	mov	r6, r0
 8014714:	f7fa fcce 	bl	800f0b4 <ucdr_serialize_bool>
 8014718:	782b      	ldrb	r3, [r5, #0]
 801471a:	4604      	mov	r4, r0
 801471c:	b94b      	cbnz	r3, 8014732 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801471e:	7a29      	ldrb	r1, [r5, #8]
 8014720:	4630      	mov	r0, r6
 8014722:	f7fa fcc7 	bl	800f0b4 <ucdr_serialize_bool>
 8014726:	7a2b      	ldrb	r3, [r5, #8]
 8014728:	4004      	ands	r4, r0
 801472a:	b2e4      	uxtb	r4, r4
 801472c:	b943      	cbnz	r3, 8014740 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801472e:	4620      	mov	r0, r4
 8014730:	bd70      	pop	{r4, r5, r6, pc}
 8014732:	6869      	ldr	r1, [r5, #4]
 8014734:	4630      	mov	r0, r6
 8014736:	f005 f9d5 	bl	8019ae4 <ucdr_serialize_string>
 801473a:	4004      	ands	r4, r0
 801473c:	b2e4      	uxtb	r4, r4
 801473e:	e7ee      	b.n	801471e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014740:	f105 010c 	add.w	r1, r5, #12
 8014744:	4630      	mov	r0, r6
 8014746:	f7ff ff53 	bl	80145f0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801474a:	4004      	ands	r4, r0
 801474c:	4620      	mov	r0, r4
 801474e:	bd70      	pop	{r4, r5, r6, pc}

08014750 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8014750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014754:	460c      	mov	r4, r1
 8014756:	7809      	ldrb	r1, [r1, #0]
 8014758:	4606      	mov	r6, r0
 801475a:	f7fa fcab 	bl	800f0b4 <ucdr_serialize_bool>
 801475e:	7823      	ldrb	r3, [r4, #0]
 8014760:	4605      	mov	r5, r0
 8014762:	b96b      	cbnz	r3, 8014780 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8014764:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014768:	4630      	mov	r0, r6
 801476a:	f7fa fca3 	bl	800f0b4 <ucdr_serialize_bool>
 801476e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014772:	4005      	ands	r5, r0
 8014774:	b2ed      	uxtb	r5, r5
 8014776:	2b00      	cmp	r3, #0
 8014778:	d169      	bne.n	801484e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801477a:	4628      	mov	r0, r5
 801477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014780:	6861      	ldr	r1, [r4, #4]
 8014782:	4630      	mov	r0, r6
 8014784:	f7fa feda 	bl	800f53c <ucdr_serialize_uint32_t>
 8014788:	6863      	ldr	r3, [r4, #4]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d06b      	beq.n	8014866 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801478e:	2800      	cmp	r0, #0
 8014790:	d067      	beq.n	8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014792:	68a1      	ldr	r1, [r4, #8]
 8014794:	4630      	mov	r0, r6
 8014796:	f005 f9a5 	bl	8019ae4 <ucdr_serialize_string>
 801479a:	6863      	ldr	r3, [r4, #4]
 801479c:	2b01      	cmp	r3, #1
 801479e:	d953      	bls.n	8014848 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147a0:	2800      	cmp	r0, #0
 80147a2:	d05e      	beq.n	8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147a4:	68e1      	ldr	r1, [r4, #12]
 80147a6:	4630      	mov	r0, r6
 80147a8:	f005 f99c 	bl	8019ae4 <ucdr_serialize_string>
 80147ac:	6863      	ldr	r3, [r4, #4]
 80147ae:	2b02      	cmp	r3, #2
 80147b0:	d94a      	bls.n	8014848 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147b2:	2800      	cmp	r0, #0
 80147b4:	d055      	beq.n	8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147b6:	6921      	ldr	r1, [r4, #16]
 80147b8:	4630      	mov	r0, r6
 80147ba:	f005 f993 	bl	8019ae4 <ucdr_serialize_string>
 80147be:	6863      	ldr	r3, [r4, #4]
 80147c0:	2b03      	cmp	r3, #3
 80147c2:	d941      	bls.n	8014848 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147c4:	2800      	cmp	r0, #0
 80147c6:	d04c      	beq.n	8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147c8:	6961      	ldr	r1, [r4, #20]
 80147ca:	4630      	mov	r0, r6
 80147cc:	f005 f98a 	bl	8019ae4 <ucdr_serialize_string>
 80147d0:	6863      	ldr	r3, [r4, #4]
 80147d2:	2b04      	cmp	r3, #4
 80147d4:	d938      	bls.n	8014848 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d043      	beq.n	8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147da:	69a1      	ldr	r1, [r4, #24]
 80147dc:	4630      	mov	r0, r6
 80147de:	f005 f981 	bl	8019ae4 <ucdr_serialize_string>
 80147e2:	6863      	ldr	r3, [r4, #4]
 80147e4:	2b05      	cmp	r3, #5
 80147e6:	d92f      	bls.n	8014848 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147e8:	2800      	cmp	r0, #0
 80147ea:	d03a      	beq.n	8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147ec:	69e1      	ldr	r1, [r4, #28]
 80147ee:	4630      	mov	r0, r6
 80147f0:	f005 f978 	bl	8019ae4 <ucdr_serialize_string>
 80147f4:	6863      	ldr	r3, [r4, #4]
 80147f6:	2b06      	cmp	r3, #6
 80147f8:	d926      	bls.n	8014848 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80147fa:	b390      	cbz	r0, 8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80147fc:	6a21      	ldr	r1, [r4, #32]
 80147fe:	4630      	mov	r0, r6
 8014800:	f005 f970 	bl	8019ae4 <ucdr_serialize_string>
 8014804:	6863      	ldr	r3, [r4, #4]
 8014806:	2b07      	cmp	r3, #7
 8014808:	d91e      	bls.n	8014848 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801480a:	b350      	cbz	r0, 8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801480c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801480e:	4630      	mov	r0, r6
 8014810:	f005 f968 	bl	8019ae4 <ucdr_serialize_string>
 8014814:	6863      	ldr	r3, [r4, #4]
 8014816:	2b08      	cmp	r3, #8
 8014818:	d916      	bls.n	8014848 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801481a:	b310      	cbz	r0, 8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801481c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801481e:	4630      	mov	r0, r6
 8014820:	f005 f960 	bl	8019ae4 <ucdr_serialize_string>
 8014824:	6863      	ldr	r3, [r4, #4]
 8014826:	2b09      	cmp	r3, #9
 8014828:	d90e      	bls.n	8014848 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801482a:	b1d0      	cbz	r0, 8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801482c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014830:	2709      	movs	r7, #9
 8014832:	e000      	b.n	8014836 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8014834:	b1a8      	cbz	r0, 8014862 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8014836:	f858 1b04 	ldr.w	r1, [r8], #4
 801483a:	4630      	mov	r0, r6
 801483c:	f005 f952 	bl	8019ae4 <ucdr_serialize_string>
 8014840:	6862      	ldr	r2, [r4, #4]
 8014842:	3701      	adds	r7, #1
 8014844:	4297      	cmp	r7, r2
 8014846:	d3f5      	bcc.n	8014834 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8014848:	4005      	ands	r5, r0
 801484a:	b2ed      	uxtb	r5, r5
 801484c:	e78a      	b.n	8014764 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801484e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014850:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014854:	4630      	mov	r0, r6
 8014856:	f005 f919 	bl	8019a8c <ucdr_serialize_sequence_uint8_t>
 801485a:	4005      	ands	r5, r0
 801485c:	4628      	mov	r0, r5
 801485e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014862:	2500      	movs	r5, #0
 8014864:	e77e      	b.n	8014764 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8014866:	4028      	ands	r0, r5
 8014868:	b2c5      	uxtb	r5, r0
 801486a:	e77b      	b.n	8014764 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801486c <uxr_serialize_OBJK_Subscriber_Binary>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	460d      	mov	r5, r1
 8014870:	7809      	ldrb	r1, [r1, #0]
 8014872:	4606      	mov	r6, r0
 8014874:	f7fa fc1e 	bl	800f0b4 <ucdr_serialize_bool>
 8014878:	782b      	ldrb	r3, [r5, #0]
 801487a:	4604      	mov	r4, r0
 801487c:	b94b      	cbnz	r3, 8014892 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801487e:	7a29      	ldrb	r1, [r5, #8]
 8014880:	4630      	mov	r0, r6
 8014882:	f7fa fc17 	bl	800f0b4 <ucdr_serialize_bool>
 8014886:	7a2b      	ldrb	r3, [r5, #8]
 8014888:	4004      	ands	r4, r0
 801488a:	b2e4      	uxtb	r4, r4
 801488c:	b943      	cbnz	r3, 80148a0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801488e:	4620      	mov	r0, r4
 8014890:	bd70      	pop	{r4, r5, r6, pc}
 8014892:	6869      	ldr	r1, [r5, #4]
 8014894:	4630      	mov	r0, r6
 8014896:	f005 f925 	bl	8019ae4 <ucdr_serialize_string>
 801489a:	4004      	ands	r4, r0
 801489c:	b2e4      	uxtb	r4, r4
 801489e:	e7ee      	b.n	801487e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80148a0:	f105 010c 	add.w	r1, r5, #12
 80148a4:	4630      	mov	r0, r6
 80148a6:	f7ff ff53 	bl	8014750 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80148aa:	4004      	ands	r4, r0
 80148ac:	4620      	mov	r0, r4
 80148ae:	bd70      	pop	{r4, r5, r6, pc}

080148b0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80148b0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80148b4:	4688      	mov	r8, r1
 80148b6:	8809      	ldrh	r1, [r1, #0]
 80148b8:	4681      	mov	r9, r0
 80148ba:	f7fa fc55 	bl	800f168 <ucdr_serialize_uint16_t>
 80148be:	f898 1002 	ldrb.w	r1, [r8, #2]
 80148c2:	4606      	mov	r6, r0
 80148c4:	4648      	mov	r0, r9
 80148c6:	f7fa fbf5 	bl	800f0b4 <ucdr_serialize_bool>
 80148ca:	f898 3002 	ldrb.w	r3, [r8, #2]
 80148ce:	4006      	ands	r6, r0
 80148d0:	b2f5      	uxtb	r5, r6
 80148d2:	b9eb      	cbnz	r3, 8014910 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80148d4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80148d8:	4648      	mov	r0, r9
 80148da:	f7fa fbeb 	bl	800f0b4 <ucdr_serialize_bool>
 80148de:	f898 3006 	ldrb.w	r3, [r8, #6]
 80148e2:	4005      	ands	r5, r0
 80148e4:	bb7b      	cbnz	r3, 8014946 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80148e6:	f898 100c 	ldrb.w	r1, [r8, #12]
 80148ea:	4648      	mov	r0, r9
 80148ec:	f7fa fbe2 	bl	800f0b4 <ucdr_serialize_bool>
 80148f0:	f898 300c 	ldrb.w	r3, [r8, #12]
 80148f4:	4005      	ands	r5, r0
 80148f6:	b9f3      	cbnz	r3, 8014936 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80148f8:	f898 1014 	ldrb.w	r1, [r8, #20]
 80148fc:	4648      	mov	r0, r9
 80148fe:	f7fa fbd9 	bl	800f0b4 <ucdr_serialize_bool>
 8014902:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014906:	4005      	ands	r5, r0
 8014908:	b94b      	cbnz	r3, 801491e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801490a:	4628      	mov	r0, r5
 801490c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014910:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014914:	4648      	mov	r0, r9
 8014916:	f7fa fc27 	bl	800f168 <ucdr_serialize_uint16_t>
 801491a:	4005      	ands	r5, r0
 801491c:	e7da      	b.n	80148d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801491e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014922:	f108 011c 	add.w	r1, r8, #28
 8014926:	4648      	mov	r0, r9
 8014928:	f005 f8b0 	bl	8019a8c <ucdr_serialize_sequence_uint8_t>
 801492c:	4028      	ands	r0, r5
 801492e:	b2c5      	uxtb	r5, r0
 8014930:	4628      	mov	r0, r5
 8014932:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014936:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801493a:	4648      	mov	r0, r9
 801493c:	f7fa fdfe 	bl	800f53c <ucdr_serialize_uint32_t>
 8014940:	4028      	ands	r0, r5
 8014942:	b2c5      	uxtb	r5, r0
 8014944:	e7d8      	b.n	80148f8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014946:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801494a:	4648      	mov	r0, r9
 801494c:	f7fa fdf6 	bl	800f53c <ucdr_serialize_uint32_t>
 8014950:	4028      	ands	r0, r5
 8014952:	b2c5      	uxtb	r5, r0
 8014954:	e7c7      	b.n	80148e6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014956:	bf00      	nop

08014958 <uxr_serialize_OBJK_DataReader_Binary>:
 8014958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801495a:	2202      	movs	r2, #2
 801495c:	460c      	mov	r4, r1
 801495e:	4606      	mov	r6, r0
 8014960:	f004 ffa0 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014964:	78a1      	ldrb	r1, [r4, #2]
 8014966:	4605      	mov	r5, r0
 8014968:	4630      	mov	r0, r6
 801496a:	f7fa fba3 	bl	800f0b4 <ucdr_serialize_bool>
 801496e:	78a3      	ldrb	r3, [r4, #2]
 8014970:	4005      	ands	r5, r0
 8014972:	b2ed      	uxtb	r5, r5
 8014974:	b90b      	cbnz	r3, 801497a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014976:	4628      	mov	r0, r5
 8014978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801497a:	f104 0108 	add.w	r1, r4, #8
 801497e:	4630      	mov	r0, r6
 8014980:	f7ff ff96 	bl	80148b0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014984:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014988:	4607      	mov	r7, r0
 801498a:	4630      	mov	r0, r6
 801498c:	f7fa fb92 	bl	800f0b4 <ucdr_serialize_bool>
 8014990:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014994:	4038      	ands	r0, r7
 8014996:	b2c7      	uxtb	r7, r0
 8014998:	b95b      	cbnz	r3, 80149b2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801499a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801499e:	4630      	mov	r0, r6
 80149a0:	f7fa fb88 	bl	800f0b4 <ucdr_serialize_bool>
 80149a4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80149a8:	4007      	ands	r7, r0
 80149aa:	b94b      	cbnz	r3, 80149c0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80149ac:	403d      	ands	r5, r7
 80149ae:	4628      	mov	r0, r5
 80149b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149b2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80149b6:	4630      	mov	r0, r6
 80149b8:	f7fb f816 	bl	800f9e8 <ucdr_serialize_uint64_t>
 80149bc:	4007      	ands	r7, r0
 80149be:	e7ec      	b.n	801499a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80149c0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80149c2:	4630      	mov	r0, r6
 80149c4:	f005 f88e 	bl	8019ae4 <ucdr_serialize_string>
 80149c8:	4007      	ands	r7, r0
 80149ca:	b2ff      	uxtb	r7, r7
 80149cc:	e7ee      	b.n	80149ac <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80149ce:	bf00      	nop

080149d0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80149d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149d2:	2202      	movs	r2, #2
 80149d4:	460d      	mov	r5, r1
 80149d6:	4606      	mov	r6, r0
 80149d8:	f004 ff64 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 80149dc:	78a9      	ldrb	r1, [r5, #2]
 80149de:	4604      	mov	r4, r0
 80149e0:	4630      	mov	r0, r6
 80149e2:	f7fa fb67 	bl	800f0b4 <ucdr_serialize_bool>
 80149e6:	78ab      	ldrb	r3, [r5, #2]
 80149e8:	4004      	ands	r4, r0
 80149ea:	b2e4      	uxtb	r4, r4
 80149ec:	b90b      	cbnz	r3, 80149f2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80149ee:	4620      	mov	r0, r4
 80149f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149f2:	f105 0108 	add.w	r1, r5, #8
 80149f6:	4630      	mov	r0, r6
 80149f8:	f7ff ff5a 	bl	80148b0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80149fc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8014a00:	4607      	mov	r7, r0
 8014a02:	4630      	mov	r0, r6
 8014a04:	f7fa fb56 	bl	800f0b4 <ucdr_serialize_bool>
 8014a08:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8014a0c:	4038      	ands	r0, r7
 8014a0e:	b2c7      	uxtb	r7, r0
 8014a10:	b913      	cbnz	r3, 8014a18 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014a12:	403c      	ands	r4, r7
 8014a14:	4620      	mov	r0, r4
 8014a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a18:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8014a1c:	4630      	mov	r0, r6
 8014a1e:	f7fa ffe3 	bl	800f9e8 <ucdr_serialize_uint64_t>
 8014a22:	4007      	ands	r7, r0
 8014a24:	e7f5      	b.n	8014a12 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014a26:	bf00      	nop

08014a28 <uxr_deserialize_ObjectVariant>:
 8014a28:	b570      	push	{r4, r5, r6, lr}
 8014a2a:	4605      	mov	r5, r0
 8014a2c:	460e      	mov	r6, r1
 8014a2e:	f7fa fb85 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014a32:	b168      	cbz	r0, 8014a50 <uxr_deserialize_ObjectVariant+0x28>
 8014a34:	7833      	ldrb	r3, [r6, #0]
 8014a36:	3b01      	subs	r3, #1
 8014a38:	4604      	mov	r4, r0
 8014a3a:	2b0d      	cmp	r3, #13
 8014a3c:	d809      	bhi.n	8014a52 <uxr_deserialize_ObjectVariant+0x2a>
 8014a3e:	e8df f003 	tbb	[pc, r3]
 8014a42:	0a41      	.short	0x0a41
 8014a44:	0a0a2323 	.word	0x0a0a2323
 8014a48:	10080a0a 	.word	0x10080a0a
 8014a4c:	565c1010 	.word	0x565c1010
 8014a50:	2400      	movs	r4, #0
 8014a52:	4620      	mov	r0, r4
 8014a54:	bd70      	pop	{r4, r5, r6, pc}
 8014a56:	1d31      	adds	r1, r6, #4
 8014a58:	4628      	mov	r0, r5
 8014a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a5e:	f7ff bd55 	b.w	801450c <uxr_deserialize_DATAWRITER_Representation>
 8014a62:	1d31      	adds	r1, r6, #4
 8014a64:	4628      	mov	r0, r5
 8014a66:	f7fa fb69 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	d0f0      	beq.n	8014a50 <uxr_deserialize_ObjectVariant+0x28>
 8014a6e:	7933      	ldrb	r3, [r6, #4]
 8014a70:	2b01      	cmp	r3, #1
 8014a72:	d001      	beq.n	8014a78 <uxr_deserialize_ObjectVariant+0x50>
 8014a74:	2b02      	cmp	r3, #2
 8014a76:	d1ec      	bne.n	8014a52 <uxr_deserialize_ObjectVariant+0x2a>
 8014a78:	68b1      	ldr	r1, [r6, #8]
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014a84:	f005 b83e 	b.w	8019b04 <ucdr_deserialize_string>
 8014a88:	1d31      	adds	r1, r6, #4
 8014a8a:	4628      	mov	r0, r5
 8014a8c:	f7fa fb56 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014a90:	4604      	mov	r4, r0
 8014a92:	b170      	cbz	r0, 8014ab2 <uxr_deserialize_ObjectVariant+0x8a>
 8014a94:	7933      	ldrb	r3, [r6, #4]
 8014a96:	2b02      	cmp	r3, #2
 8014a98:	d04c      	beq.n	8014b34 <uxr_deserialize_ObjectVariant+0x10c>
 8014a9a:	2b03      	cmp	r3, #3
 8014a9c:	d109      	bne.n	8014ab2 <uxr_deserialize_ObjectVariant+0x8a>
 8014a9e:	f106 0308 	add.w	r3, r6, #8
 8014aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014aa6:	f106 010c 	add.w	r1, r6, #12
 8014aaa:	4628      	mov	r0, r5
 8014aac:	f005 f800 	bl	8019ab0 <ucdr_deserialize_sequence_uint8_t>
 8014ab0:	4604      	mov	r4, r0
 8014ab2:	2202      	movs	r2, #2
 8014ab4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014ab8:	4628      	mov	r0, r5
 8014aba:	f004 ff57 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014abe:	4020      	ands	r0, r4
 8014ac0:	b2c4      	uxtb	r4, r0
 8014ac2:	e7c6      	b.n	8014a52 <uxr_deserialize_ObjectVariant+0x2a>
 8014ac4:	1d31      	adds	r1, r6, #4
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	f7fa fb38 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014acc:	4604      	mov	r4, r0
 8014ace:	b130      	cbz	r0, 8014ade <uxr_deserialize_ObjectVariant+0xb6>
 8014ad0:	7933      	ldrb	r3, [r6, #4]
 8014ad2:	2b02      	cmp	r3, #2
 8014ad4:	d036      	beq.n	8014b44 <uxr_deserialize_ObjectVariant+0x11c>
 8014ad6:	2b03      	cmp	r3, #3
 8014ad8:	d03c      	beq.n	8014b54 <uxr_deserialize_ObjectVariant+0x12c>
 8014ada:	2b01      	cmp	r3, #1
 8014adc:	d032      	beq.n	8014b44 <uxr_deserialize_ObjectVariant+0x11c>
 8014ade:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	f7fb f8d0 	bl	800fc88 <ucdr_deserialize_int16_t>
 8014ae8:	4020      	ands	r0, r4
 8014aea:	b2c4      	uxtb	r4, r0
 8014aec:	e7b1      	b.n	8014a52 <uxr_deserialize_ObjectVariant+0x2a>
 8014aee:	1d31      	adds	r1, r6, #4
 8014af0:	4628      	mov	r0, r5
 8014af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014af6:	f7ff bbbf 	b.w	8014278 <uxr_deserialize_CLIENT_Representation>
 8014afa:	2204      	movs	r2, #4
 8014afc:	18b1      	adds	r1, r6, r2
 8014afe:	4628      	mov	r0, r5
 8014b00:	f004 ff34 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014b04:	2202      	movs	r2, #2
 8014b06:	f106 0108 	add.w	r1, r6, #8
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	4628      	mov	r0, r5
 8014b0e:	f004 ff2d 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014b12:	2202      	movs	r2, #2
 8014b14:	4004      	ands	r4, r0
 8014b16:	f106 010a 	add.w	r1, r6, #10
 8014b1a:	4628      	mov	r0, r5
 8014b1c:	f004 ff26 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014b20:	b2e4      	uxtb	r4, r4
 8014b22:	4603      	mov	r3, r0
 8014b24:	f106 010c 	add.w	r1, r6, #12
 8014b28:	4628      	mov	r0, r5
 8014b2a:	401c      	ands	r4, r3
 8014b2c:	f7fa fad8 	bl	800f0e0 <ucdr_deserialize_bool>
 8014b30:	4004      	ands	r4, r0
 8014b32:	e78e      	b.n	8014a52 <uxr_deserialize_ObjectVariant+0x2a>
 8014b34:	68b1      	ldr	r1, [r6, #8]
 8014b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b3a:	4628      	mov	r0, r5
 8014b3c:	f004 ffe2 	bl	8019b04 <ucdr_deserialize_string>
 8014b40:	4604      	mov	r4, r0
 8014b42:	e7b6      	b.n	8014ab2 <uxr_deserialize_ObjectVariant+0x8a>
 8014b44:	68b1      	ldr	r1, [r6, #8]
 8014b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b4a:	4628      	mov	r0, r5
 8014b4c:	f004 ffda 	bl	8019b04 <ucdr_deserialize_string>
 8014b50:	4604      	mov	r4, r0
 8014b52:	e7c4      	b.n	8014ade <uxr_deserialize_ObjectVariant+0xb6>
 8014b54:	f106 0308 	add.w	r3, r6, #8
 8014b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b5c:	f106 010c 	add.w	r1, r6, #12
 8014b60:	4628      	mov	r0, r5
 8014b62:	f004 ffa5 	bl	8019ab0 <ucdr_deserialize_sequence_uint8_t>
 8014b66:	4604      	mov	r4, r0
 8014b68:	e7b9      	b.n	8014ade <uxr_deserialize_ObjectVariant+0xb6>
 8014b6a:	bf00      	nop

08014b6c <uxr_deserialize_BaseObjectRequest>:
 8014b6c:	b570      	push	{r4, r5, r6, lr}
 8014b6e:	2202      	movs	r2, #2
 8014b70:	4605      	mov	r5, r0
 8014b72:	460e      	mov	r6, r1
 8014b74:	f004 fefa 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014b78:	2202      	movs	r2, #2
 8014b7a:	4604      	mov	r4, r0
 8014b7c:	18b1      	adds	r1, r6, r2
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f004 fef4 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014b84:	4020      	ands	r0, r4
 8014b86:	b2c0      	uxtb	r0, r0
 8014b88:	bd70      	pop	{r4, r5, r6, pc}
 8014b8a:	bf00      	nop

08014b8c <uxr_serialize_ActivityInfoVariant>:
 8014b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b90:	460d      	mov	r5, r1
 8014b92:	7809      	ldrb	r1, [r1, #0]
 8014b94:	4607      	mov	r7, r0
 8014b96:	f7fa fabb 	bl	800f110 <ucdr_serialize_uint8_t>
 8014b9a:	4681      	mov	r9, r0
 8014b9c:	b138      	cbz	r0, 8014bae <uxr_serialize_ActivityInfoVariant+0x22>
 8014b9e:	782b      	ldrb	r3, [r5, #0]
 8014ba0:	2b06      	cmp	r3, #6
 8014ba2:	f000 8082 	beq.w	8014caa <uxr_serialize_ActivityInfoVariant+0x11e>
 8014ba6:	2b0d      	cmp	r3, #13
 8014ba8:	d016      	beq.n	8014bd8 <uxr_serialize_ActivityInfoVariant+0x4c>
 8014baa:	2b05      	cmp	r3, #5
 8014bac:	d002      	beq.n	8014bb4 <uxr_serialize_ActivityInfoVariant+0x28>
 8014bae:	4648      	mov	r0, r9
 8014bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bb4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014bb8:	4638      	mov	r0, r7
 8014bba:	f7fa ffe5 	bl	800fb88 <ucdr_serialize_int16_t>
 8014bbe:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014bc2:	4681      	mov	r9, r0
 8014bc4:	4638      	mov	r0, r7
 8014bc6:	f7fa ff0f 	bl	800f9e8 <ucdr_serialize_uint64_t>
 8014bca:	ea09 0000 	and.w	r0, r9, r0
 8014bce:	fa5f f980 	uxtb.w	r9, r0
 8014bd2:	4648      	mov	r0, r9
 8014bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bd8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014bdc:	4638      	mov	r0, r7
 8014bde:	f7fa ffd3 	bl	800fb88 <ucdr_serialize_int16_t>
 8014be2:	68e9      	ldr	r1, [r5, #12]
 8014be4:	4681      	mov	r9, r0
 8014be6:	4638      	mov	r0, r7
 8014be8:	f7fa fca8 	bl	800f53c <ucdr_serialize_uint32_t>
 8014bec:	68eb      	ldr	r3, [r5, #12]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d0eb      	beq.n	8014bca <uxr_serialize_ActivityInfoVariant+0x3e>
 8014bf2:	b320      	cbz	r0, 8014c3e <uxr_serialize_ActivityInfoVariant+0xb2>
 8014bf4:	f105 080c 	add.w	r8, r5, #12
 8014bf8:	2600      	movs	r6, #0
 8014bfa:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8014bfe:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8014c02:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8014c06:	4638      	mov	r0, r7
 8014c08:	f7fa fa82 	bl	800f110 <ucdr_serialize_uint8_t>
 8014c0c:	2800      	cmp	r0, #0
 8014c0e:	d053      	beq.n	8014cb8 <uxr_serialize_ActivityInfoVariant+0x12c>
 8014c10:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8014c14:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014c18:	0074      	lsls	r4, r6, #1
 8014c1a:	00c9      	lsls	r1, r1, #3
 8014c1c:	2b03      	cmp	r3, #3
 8014c1e:	d854      	bhi.n	8014cca <uxr_serialize_ActivityInfoVariant+0x13e>
 8014c20:	e8df f003 	tbb	[pc, r3]
 8014c24:	02102132 	.word	0x02102132
 8014c28:	4441      	add	r1, r8
 8014c2a:	4638      	mov	r0, r7
 8014c2c:	6889      	ldr	r1, [r1, #8]
 8014c2e:	f004 ff59 	bl	8019ae4 <ucdr_serialize_string>
 8014c32:	68ea      	ldr	r2, [r5, #12]
 8014c34:	3601      	adds	r6, #1
 8014c36:	4296      	cmp	r6, r2
 8014c38:	d242      	bcs.n	8014cc0 <uxr_serialize_ActivityInfoVariant+0x134>
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	d1dd      	bne.n	8014bfa <uxr_serialize_ActivityInfoVariant+0x6e>
 8014c3e:	f04f 0900 	mov.w	r9, #0
 8014c42:	e7b4      	b.n	8014bae <uxr_serialize_ActivityInfoVariant+0x22>
 8014c44:	3108      	adds	r1, #8
 8014c46:	4441      	add	r1, r8
 8014c48:	2210      	movs	r2, #16
 8014c4a:	4638      	mov	r0, r7
 8014c4c:	f004 fe2a 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014c50:	4434      	add	r4, r6
 8014c52:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014c56:	4604      	mov	r4, r0
 8014c58:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014c5a:	4638      	mov	r0, r7
 8014c5c:	f7fa fc6e 	bl	800f53c <ucdr_serialize_uint32_t>
 8014c60:	4020      	ands	r0, r4
 8014c62:	b2c0      	uxtb	r0, r0
 8014c64:	e7e5      	b.n	8014c32 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014c66:	3108      	adds	r1, #8
 8014c68:	4441      	add	r1, r8
 8014c6a:	2204      	movs	r2, #4
 8014c6c:	4638      	mov	r0, r7
 8014c6e:	f004 fe19 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014c72:	4434      	add	r4, r6
 8014c74:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014c78:	4604      	mov	r4, r0
 8014c7a:	8b19      	ldrh	r1, [r3, #24]
 8014c7c:	4638      	mov	r0, r7
 8014c7e:	f7fa fa73 	bl	800f168 <ucdr_serialize_uint16_t>
 8014c82:	4020      	ands	r0, r4
 8014c84:	b2c0      	uxtb	r0, r0
 8014c86:	e7d4      	b.n	8014c32 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014c88:	3108      	adds	r1, #8
 8014c8a:	4441      	add	r1, r8
 8014c8c:	2202      	movs	r2, #2
 8014c8e:	4638      	mov	r0, r7
 8014c90:	f004 fe08 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014c94:	4434      	add	r4, r6
 8014c96:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014c9a:	4604      	mov	r4, r0
 8014c9c:	7d99      	ldrb	r1, [r3, #22]
 8014c9e:	4638      	mov	r0, r7
 8014ca0:	f7fa fa36 	bl	800f110 <ucdr_serialize_uint8_t>
 8014ca4:	4020      	ands	r0, r4
 8014ca6:	b2c0      	uxtb	r0, r0
 8014ca8:	e7c3      	b.n	8014c32 <uxr_serialize_ActivityInfoVariant+0xa6>
 8014caa:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014cae:	4638      	mov	r0, r7
 8014cb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cb4:	f7fa bf68 	b.w	800fb88 <ucdr_serialize_int16_t>
 8014cb8:	68ea      	ldr	r2, [r5, #12]
 8014cba:	3601      	adds	r6, #1
 8014cbc:	42b2      	cmp	r2, r6
 8014cbe:	d8be      	bhi.n	8014c3e <uxr_serialize_ActivityInfoVariant+0xb2>
 8014cc0:	ea09 0900 	and.w	r9, r9, r0
 8014cc4:	fa5f f989 	uxtb.w	r9, r9
 8014cc8:	e771      	b.n	8014bae <uxr_serialize_ActivityInfoVariant+0x22>
 8014cca:	68eb      	ldr	r3, [r5, #12]
 8014ccc:	3601      	adds	r6, #1
 8014cce:	429e      	cmp	r6, r3
 8014cd0:	f10a 0a18 	add.w	sl, sl, #24
 8014cd4:	d395      	bcc.n	8014c02 <uxr_serialize_ActivityInfoVariant+0x76>
 8014cd6:	e76a      	b.n	8014bae <uxr_serialize_ActivityInfoVariant+0x22>

08014cd8 <uxr_deserialize_BaseObjectReply>:
 8014cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cdc:	2202      	movs	r2, #2
 8014cde:	4606      	mov	r6, r0
 8014ce0:	460f      	mov	r7, r1
 8014ce2:	f004 fe43 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014ce6:	2202      	movs	r2, #2
 8014ce8:	18b9      	adds	r1, r7, r2
 8014cea:	4605      	mov	r5, r0
 8014cec:	4630      	mov	r0, r6
 8014cee:	f004 fe3d 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014cf2:	1d39      	adds	r1, r7, #4
 8014cf4:	4680      	mov	r8, r0
 8014cf6:	4630      	mov	r0, r6
 8014cf8:	f7fa fa20 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014cfc:	1d79      	adds	r1, r7, #5
 8014cfe:	4604      	mov	r4, r0
 8014d00:	4630      	mov	r0, r6
 8014d02:	f7fa fa1b 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014d06:	ea05 0508 	and.w	r5, r5, r8
 8014d0a:	402c      	ands	r4, r5
 8014d0c:	4020      	ands	r0, r4
 8014d0e:	b2c0      	uxtb	r0, r0
 8014d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014d14 <uxr_serialize_ReadSpecification>:
 8014d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d18:	460e      	mov	r6, r1
 8014d1a:	7809      	ldrb	r1, [r1, #0]
 8014d1c:	4607      	mov	r7, r0
 8014d1e:	f7fa f9f7 	bl	800f110 <ucdr_serialize_uint8_t>
 8014d22:	7871      	ldrb	r1, [r6, #1]
 8014d24:	4604      	mov	r4, r0
 8014d26:	4638      	mov	r0, r7
 8014d28:	f7fa f9f2 	bl	800f110 <ucdr_serialize_uint8_t>
 8014d2c:	78b1      	ldrb	r1, [r6, #2]
 8014d2e:	4004      	ands	r4, r0
 8014d30:	4638      	mov	r0, r7
 8014d32:	f7fa f9bf 	bl	800f0b4 <ucdr_serialize_bool>
 8014d36:	78b3      	ldrb	r3, [r6, #2]
 8014d38:	b2e4      	uxtb	r4, r4
 8014d3a:	4004      	ands	r4, r0
 8014d3c:	b94b      	cbnz	r3, 8014d52 <uxr_serialize_ReadSpecification+0x3e>
 8014d3e:	7a31      	ldrb	r1, [r6, #8]
 8014d40:	4638      	mov	r0, r7
 8014d42:	f7fa f9b7 	bl	800f0b4 <ucdr_serialize_bool>
 8014d46:	7a33      	ldrb	r3, [r6, #8]
 8014d48:	4004      	ands	r4, r0
 8014d4a:	b943      	cbnz	r3, 8014d5e <uxr_serialize_ReadSpecification+0x4a>
 8014d4c:	4620      	mov	r0, r4
 8014d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d52:	6871      	ldr	r1, [r6, #4]
 8014d54:	4638      	mov	r0, r7
 8014d56:	f004 fec5 	bl	8019ae4 <ucdr_serialize_string>
 8014d5a:	4004      	ands	r4, r0
 8014d5c:	e7ef      	b.n	8014d3e <uxr_serialize_ReadSpecification+0x2a>
 8014d5e:	8971      	ldrh	r1, [r6, #10]
 8014d60:	4638      	mov	r0, r7
 8014d62:	f7fa fa01 	bl	800f168 <ucdr_serialize_uint16_t>
 8014d66:	89b1      	ldrh	r1, [r6, #12]
 8014d68:	4605      	mov	r5, r0
 8014d6a:	4638      	mov	r0, r7
 8014d6c:	f7fa f9fc 	bl	800f168 <ucdr_serialize_uint16_t>
 8014d70:	89f1      	ldrh	r1, [r6, #14]
 8014d72:	4005      	ands	r5, r0
 8014d74:	4638      	mov	r0, r7
 8014d76:	f7fa f9f7 	bl	800f168 <ucdr_serialize_uint16_t>
 8014d7a:	8a31      	ldrh	r1, [r6, #16]
 8014d7c:	4680      	mov	r8, r0
 8014d7e:	4638      	mov	r0, r7
 8014d80:	f7fa f9f2 	bl	800f168 <ucdr_serialize_uint16_t>
 8014d84:	b2ed      	uxtb	r5, r5
 8014d86:	4025      	ands	r5, r4
 8014d88:	ea08 0505 	and.w	r5, r8, r5
 8014d8c:	ea00 0405 	and.w	r4, r0, r5
 8014d90:	4620      	mov	r0, r4
 8014d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d96:	bf00      	nop

08014d98 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014d98:	f7ff ba16 	b.w	80141c8 <uxr_serialize_CLIENT_Representation>

08014d9c <uxr_serialize_CREATE_Payload>:
 8014d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d9e:	2202      	movs	r2, #2
 8014da0:	4607      	mov	r7, r0
 8014da2:	460e      	mov	r6, r1
 8014da4:	f004 fd7e 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014da8:	2202      	movs	r2, #2
 8014daa:	18b1      	adds	r1, r6, r2
 8014dac:	4605      	mov	r5, r0
 8014dae:	4638      	mov	r0, r7
 8014db0:	f004 fd78 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014db4:	7931      	ldrb	r1, [r6, #4]
 8014db6:	4604      	mov	r4, r0
 8014db8:	4638      	mov	r0, r7
 8014dba:	f7fa f9a9 	bl	800f110 <ucdr_serialize_uint8_t>
 8014dbe:	b170      	cbz	r0, 8014dde <uxr_serialize_CREATE_Payload+0x42>
 8014dc0:	7933      	ldrb	r3, [r6, #4]
 8014dc2:	402c      	ands	r4, r5
 8014dc4:	3b01      	subs	r3, #1
 8014dc6:	b2e4      	uxtb	r4, r4
 8014dc8:	2b0d      	cmp	r3, #13
 8014dca:	d809      	bhi.n	8014de0 <uxr_serialize_CREATE_Payload+0x44>
 8014dcc:	e8df f003 	tbb	[pc, r3]
 8014dd0:	23230a4c 	.word	0x23230a4c
 8014dd4:	0a0a0a0a 	.word	0x0a0a0a0a
 8014dd8:	12121208 	.word	0x12121208
 8014ddc:	3e45      	.short	0x3e45
 8014dde:	2400      	movs	r4, #0
 8014de0:	4620      	mov	r0, r4
 8014de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014de4:	f106 0108 	add.w	r1, r6, #8
 8014de8:	4638      	mov	r0, r7
 8014dea:	f7ff faf3 	bl	80143d4 <uxr_serialize_DATAWRITER_Representation>
 8014dee:	4004      	ands	r4, r0
 8014df0:	4620      	mov	r0, r4
 8014df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014df4:	7a31      	ldrb	r1, [r6, #8]
 8014df6:	4638      	mov	r0, r7
 8014df8:	f7fa f98a 	bl	800f110 <ucdr_serialize_uint8_t>
 8014dfc:	2800      	cmp	r0, #0
 8014dfe:	d0ee      	beq.n	8014dde <uxr_serialize_CREATE_Payload+0x42>
 8014e00:	7a33      	ldrb	r3, [r6, #8]
 8014e02:	2b01      	cmp	r3, #1
 8014e04:	d001      	beq.n	8014e0a <uxr_serialize_CREATE_Payload+0x6e>
 8014e06:	2b02      	cmp	r3, #2
 8014e08:	d1ea      	bne.n	8014de0 <uxr_serialize_CREATE_Payload+0x44>
 8014e0a:	68f1      	ldr	r1, [r6, #12]
 8014e0c:	4638      	mov	r0, r7
 8014e0e:	f004 fe69 	bl	8019ae4 <ucdr_serialize_string>
 8014e12:	4004      	ands	r4, r0
 8014e14:	e7e4      	b.n	8014de0 <uxr_serialize_CREATE_Payload+0x44>
 8014e16:	7a31      	ldrb	r1, [r6, #8]
 8014e18:	4638      	mov	r0, r7
 8014e1a:	f7fa f979 	bl	800f110 <ucdr_serialize_uint8_t>
 8014e1e:	4605      	mov	r5, r0
 8014e20:	b158      	cbz	r0, 8014e3a <uxr_serialize_CREATE_Payload+0x9e>
 8014e22:	7a33      	ldrb	r3, [r6, #8]
 8014e24:	2b02      	cmp	r3, #2
 8014e26:	d034      	beq.n	8014e92 <uxr_serialize_CREATE_Payload+0xf6>
 8014e28:	2b03      	cmp	r3, #3
 8014e2a:	d106      	bne.n	8014e3a <uxr_serialize_CREATE_Payload+0x9e>
 8014e2c:	68f2      	ldr	r2, [r6, #12]
 8014e2e:	f106 0110 	add.w	r1, r6, #16
 8014e32:	4638      	mov	r0, r7
 8014e34:	f004 fe2a 	bl	8019a8c <ucdr_serialize_sequence_uint8_t>
 8014e38:	4605      	mov	r5, r0
 8014e3a:	2202      	movs	r2, #2
 8014e3c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014e40:	4638      	mov	r0, r7
 8014e42:	f004 fd2f 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014e46:	4028      	ands	r0, r5
 8014e48:	4004      	ands	r4, r0
 8014e4a:	e7c9      	b.n	8014de0 <uxr_serialize_CREATE_Payload+0x44>
 8014e4c:	f106 0108 	add.w	r1, r6, #8
 8014e50:	4638      	mov	r0, r7
 8014e52:	f7ff f9b9 	bl	80141c8 <uxr_serialize_CLIENT_Representation>
 8014e56:	4004      	ands	r4, r0
 8014e58:	e7c2      	b.n	8014de0 <uxr_serialize_CREATE_Payload+0x44>
 8014e5a:	f106 0108 	add.w	r1, r6, #8
 8014e5e:	4638      	mov	r0, r7
 8014e60:	f7ff fa6e 	bl	8014340 <uxr_serialize_AGENT_Representation>
 8014e64:	4004      	ands	r4, r0
 8014e66:	e7bb      	b.n	8014de0 <uxr_serialize_CREATE_Payload+0x44>
 8014e68:	7a31      	ldrb	r1, [r6, #8]
 8014e6a:	4638      	mov	r0, r7
 8014e6c:	f7fa f950 	bl	800f110 <ucdr_serialize_uint8_t>
 8014e70:	4605      	mov	r5, r0
 8014e72:	b130      	cbz	r0, 8014e82 <uxr_serialize_CREATE_Payload+0xe6>
 8014e74:	7a33      	ldrb	r3, [r6, #8]
 8014e76:	2b02      	cmp	r3, #2
 8014e78:	d011      	beq.n	8014e9e <uxr_serialize_CREATE_Payload+0x102>
 8014e7a:	2b03      	cmp	r3, #3
 8014e7c:	d015      	beq.n	8014eaa <uxr_serialize_CREATE_Payload+0x10e>
 8014e7e:	2b01      	cmp	r3, #1
 8014e80:	d00d      	beq.n	8014e9e <uxr_serialize_CREATE_Payload+0x102>
 8014e82:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8014e86:	4638      	mov	r0, r7
 8014e88:	f7fa fe7e 	bl	800fb88 <ucdr_serialize_int16_t>
 8014e8c:	4028      	ands	r0, r5
 8014e8e:	4004      	ands	r4, r0
 8014e90:	e7a6      	b.n	8014de0 <uxr_serialize_CREATE_Payload+0x44>
 8014e92:	68f1      	ldr	r1, [r6, #12]
 8014e94:	4638      	mov	r0, r7
 8014e96:	f004 fe25 	bl	8019ae4 <ucdr_serialize_string>
 8014e9a:	4605      	mov	r5, r0
 8014e9c:	e7cd      	b.n	8014e3a <uxr_serialize_CREATE_Payload+0x9e>
 8014e9e:	68f1      	ldr	r1, [r6, #12]
 8014ea0:	4638      	mov	r0, r7
 8014ea2:	f004 fe1f 	bl	8019ae4 <ucdr_serialize_string>
 8014ea6:	4605      	mov	r5, r0
 8014ea8:	e7eb      	b.n	8014e82 <uxr_serialize_CREATE_Payload+0xe6>
 8014eaa:	68f2      	ldr	r2, [r6, #12]
 8014eac:	f106 0110 	add.w	r1, r6, #16
 8014eb0:	4638      	mov	r0, r7
 8014eb2:	f004 fdeb 	bl	8019a8c <ucdr_serialize_sequence_uint8_t>
 8014eb6:	4605      	mov	r5, r0
 8014eb8:	e7e3      	b.n	8014e82 <uxr_serialize_CREATE_Payload+0xe6>
 8014eba:	bf00      	nop

08014ebc <uxr_deserialize_GET_INFO_Payload>:
 8014ebc:	b570      	push	{r4, r5, r6, lr}
 8014ebe:	2202      	movs	r2, #2
 8014ec0:	4605      	mov	r5, r0
 8014ec2:	460e      	mov	r6, r1
 8014ec4:	f004 fd52 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014ec8:	2202      	movs	r2, #2
 8014eca:	18b1      	adds	r1, r6, r2
 8014ecc:	4604      	mov	r4, r0
 8014ece:	4628      	mov	r0, r5
 8014ed0:	f004 fd4c 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014ed4:	1d31      	adds	r1, r6, #4
 8014ed6:	4004      	ands	r4, r0
 8014ed8:	4628      	mov	r0, r5
 8014eda:	f7fa fc5f 	bl	800f79c <ucdr_deserialize_uint32_t>
 8014ede:	b2e4      	uxtb	r4, r4
 8014ee0:	4020      	ands	r0, r4
 8014ee2:	bd70      	pop	{r4, r5, r6, pc}

08014ee4 <uxr_serialize_DELETE_Payload>:
 8014ee4:	b570      	push	{r4, r5, r6, lr}
 8014ee6:	2202      	movs	r2, #2
 8014ee8:	4605      	mov	r5, r0
 8014eea:	460e      	mov	r6, r1
 8014eec:	f004 fcda 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014ef0:	2202      	movs	r2, #2
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	18b1      	adds	r1, r6, r2
 8014ef6:	4628      	mov	r0, r5
 8014ef8:	f004 fcd4 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014efc:	4020      	ands	r0, r4
 8014efe:	b2c0      	uxtb	r0, r0
 8014f00:	bd70      	pop	{r4, r5, r6, pc}
 8014f02:	bf00      	nop

08014f04 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f08:	4605      	mov	r5, r0
 8014f0a:	460e      	mov	r6, r1
 8014f0c:	f7fa f916 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014f10:	1c71      	adds	r1, r6, #1
 8014f12:	4604      	mov	r4, r0
 8014f14:	4628      	mov	r0, r5
 8014f16:	f7fa f911 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014f1a:	2204      	movs	r2, #4
 8014f1c:	18b1      	adds	r1, r6, r2
 8014f1e:	4680      	mov	r8, r0
 8014f20:	4628      	mov	r0, r5
 8014f22:	f004 fd23 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014f26:	f106 0108 	add.w	r1, r6, #8
 8014f2a:	4607      	mov	r7, r0
 8014f2c:	2202      	movs	r2, #2
 8014f2e:	4628      	mov	r0, r5
 8014f30:	f004 fd1c 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014f34:	ea04 0308 	and.w	r3, r4, r8
 8014f38:	b2db      	uxtb	r3, r3
 8014f3a:	ea03 0407 	and.w	r4, r3, r7
 8014f3e:	2202      	movs	r2, #2
 8014f40:	4607      	mov	r7, r0
 8014f42:	f106 010a 	add.w	r1, r6, #10
 8014f46:	4628      	mov	r0, r5
 8014f48:	f004 fd10 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014f4c:	f106 010c 	add.w	r1, r6, #12
 8014f50:	4603      	mov	r3, r0
 8014f52:	4628      	mov	r0, r5
 8014f54:	461d      	mov	r5, r3
 8014f56:	f7fa f8c3 	bl	800f0e0 <ucdr_deserialize_bool>
 8014f5a:	403c      	ands	r4, r7
 8014f5c:	4025      	ands	r5, r4
 8014f5e:	4028      	ands	r0, r5
 8014f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f64 <uxr_deserialize_STATUS_Payload>:
 8014f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f68:	2202      	movs	r2, #2
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	460f      	mov	r7, r1
 8014f6e:	f004 fcfd 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014f72:	2202      	movs	r2, #2
 8014f74:	18b9      	adds	r1, r7, r2
 8014f76:	4605      	mov	r5, r0
 8014f78:	4630      	mov	r0, r6
 8014f7a:	f004 fcf7 	bl	801996c <ucdr_deserialize_array_uint8_t>
 8014f7e:	1d39      	adds	r1, r7, #4
 8014f80:	4680      	mov	r8, r0
 8014f82:	4630      	mov	r0, r6
 8014f84:	f7fa f8da 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014f88:	1d79      	adds	r1, r7, #5
 8014f8a:	4604      	mov	r4, r0
 8014f8c:	4630      	mov	r0, r6
 8014f8e:	f7fa f8d5 	bl	800f13c <ucdr_deserialize_uint8_t>
 8014f92:	ea05 0508 	and.w	r5, r5, r8
 8014f96:	402c      	ands	r4, r5
 8014f98:	4020      	ands	r0, r4
 8014f9a:	b2c0      	uxtb	r0, r0
 8014f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014fa0 <uxr_serialize_INFO_Payload>:
 8014fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fa4:	2202      	movs	r2, #2
 8014fa6:	460c      	mov	r4, r1
 8014fa8:	4605      	mov	r5, r0
 8014faa:	f004 fc7b 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014fae:	2202      	movs	r2, #2
 8014fb0:	18a1      	adds	r1, r4, r2
 8014fb2:	4680      	mov	r8, r0
 8014fb4:	4628      	mov	r0, r5
 8014fb6:	f004 fc75 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8014fba:	7921      	ldrb	r1, [r4, #4]
 8014fbc:	4607      	mov	r7, r0
 8014fbe:	4628      	mov	r0, r5
 8014fc0:	f7fa f8a6 	bl	800f110 <ucdr_serialize_uint8_t>
 8014fc4:	7961      	ldrb	r1, [r4, #5]
 8014fc6:	4606      	mov	r6, r0
 8014fc8:	4628      	mov	r0, r5
 8014fca:	f7fa f8a1 	bl	800f110 <ucdr_serialize_uint8_t>
 8014fce:	ea08 0807 	and.w	r8, r8, r7
 8014fd2:	ea06 0608 	and.w	r6, r6, r8
 8014fd6:	4006      	ands	r6, r0
 8014fd8:	7a21      	ldrb	r1, [r4, #8]
 8014fda:	4628      	mov	r0, r5
 8014fdc:	f7fa f86a 	bl	800f0b4 <ucdr_serialize_bool>
 8014fe0:	7a23      	ldrb	r3, [r4, #8]
 8014fe2:	b2f7      	uxtb	r7, r6
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	b96b      	cbnz	r3, 8015004 <uxr_serialize_INFO_Payload+0x64>
 8014fe8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014fec:	4628      	mov	r0, r5
 8014fee:	f7fa f861 	bl	800f0b4 <ucdr_serialize_bool>
 8014ff2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8014ff6:	4030      	ands	r0, r6
 8014ff8:	b2c6      	uxtb	r6, r0
 8014ffa:	b983      	cbnz	r3, 801501e <uxr_serialize_INFO_Payload+0x7e>
 8014ffc:	ea06 0007 	and.w	r0, r6, r7
 8015000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015004:	7b21      	ldrb	r1, [r4, #12]
 8015006:	4628      	mov	r0, r5
 8015008:	f7fa f882 	bl	800f110 <ucdr_serialize_uint8_t>
 801500c:	b188      	cbz	r0, 8015032 <uxr_serialize_INFO_Payload+0x92>
 801500e:	f104 010c 	add.w	r1, r4, #12
 8015012:	4628      	mov	r0, r5
 8015014:	f7ff fa06 	bl	8014424 <uxr_serialize_ObjectVariant.part.0>
 8015018:	4030      	ands	r0, r6
 801501a:	b2c6      	uxtb	r6, r0
 801501c:	e7e4      	b.n	8014fe8 <uxr_serialize_INFO_Payload+0x48>
 801501e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8015022:	4628      	mov	r0, r5
 8015024:	f7ff fdb2 	bl	8014b8c <uxr_serialize_ActivityInfoVariant>
 8015028:	4006      	ands	r6, r0
 801502a:	ea06 0007 	and.w	r0, r6, r7
 801502e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015032:	4606      	mov	r6, r0
 8015034:	e7d8      	b.n	8014fe8 <uxr_serialize_INFO_Payload+0x48>
 8015036:	bf00      	nop

08015038 <uxr_serialize_READ_DATA_Payload>:
 8015038:	b570      	push	{r4, r5, r6, lr}
 801503a:	2202      	movs	r2, #2
 801503c:	4605      	mov	r5, r0
 801503e:	460e      	mov	r6, r1
 8015040:	f004 fc30 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8015044:	2202      	movs	r2, #2
 8015046:	18b1      	adds	r1, r6, r2
 8015048:	4604      	mov	r4, r0
 801504a:	4628      	mov	r0, r5
 801504c:	f004 fc2a 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8015050:	1d31      	adds	r1, r6, #4
 8015052:	4004      	ands	r4, r0
 8015054:	4628      	mov	r0, r5
 8015056:	f7ff fe5d 	bl	8014d14 <uxr_serialize_ReadSpecification>
 801505a:	b2e4      	uxtb	r4, r4
 801505c:	4020      	ands	r0, r4
 801505e:	bd70      	pop	{r4, r5, r6, pc}

08015060 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015060:	b570      	push	{r4, r5, r6, lr}
 8015062:	2202      	movs	r2, #2
 8015064:	4605      	mov	r5, r0
 8015066:	460e      	mov	r6, r1
 8015068:	f004 fc1c 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 801506c:	2202      	movs	r2, #2
 801506e:	4604      	mov	r4, r0
 8015070:	18b1      	adds	r1, r6, r2
 8015072:	4628      	mov	r0, r5
 8015074:	f004 fc16 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8015078:	4020      	ands	r0, r4
 801507a:	b2c0      	uxtb	r0, r0
 801507c:	bd70      	pop	{r4, r5, r6, pc}
 801507e:	bf00      	nop

08015080 <uxr_serialize_ACKNACK_Payload>:
 8015080:	b570      	push	{r4, r5, r6, lr}
 8015082:	460c      	mov	r4, r1
 8015084:	460e      	mov	r6, r1
 8015086:	f834 1b02 	ldrh.w	r1, [r4], #2
 801508a:	4605      	mov	r5, r0
 801508c:	f7fa f86c 	bl	800f168 <ucdr_serialize_uint16_t>
 8015090:	2202      	movs	r2, #2
 8015092:	4621      	mov	r1, r4
 8015094:	4604      	mov	r4, r0
 8015096:	4628      	mov	r0, r5
 8015098:	f004 fc04 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 801509c:	7931      	ldrb	r1, [r6, #4]
 801509e:	4004      	ands	r4, r0
 80150a0:	4628      	mov	r0, r5
 80150a2:	f7fa f835 	bl	800f110 <ucdr_serialize_uint8_t>
 80150a6:	b2e4      	uxtb	r4, r4
 80150a8:	4020      	ands	r0, r4
 80150aa:	bd70      	pop	{r4, r5, r6, pc}

080150ac <uxr_deserialize_ACKNACK_Payload>:
 80150ac:	b570      	push	{r4, r5, r6, lr}
 80150ae:	4605      	mov	r5, r0
 80150b0:	460e      	mov	r6, r1
 80150b2:	f7fa f959 	bl	800f368 <ucdr_deserialize_uint16_t>
 80150b6:	2202      	movs	r2, #2
 80150b8:	18b1      	adds	r1, r6, r2
 80150ba:	4604      	mov	r4, r0
 80150bc:	4628      	mov	r0, r5
 80150be:	f004 fc55 	bl	801996c <ucdr_deserialize_array_uint8_t>
 80150c2:	1d31      	adds	r1, r6, #4
 80150c4:	4004      	ands	r4, r0
 80150c6:	4628      	mov	r0, r5
 80150c8:	f7fa f838 	bl	800f13c <ucdr_deserialize_uint8_t>
 80150cc:	b2e4      	uxtb	r4, r4
 80150ce:	4020      	ands	r0, r4
 80150d0:	bd70      	pop	{r4, r5, r6, pc}
 80150d2:	bf00      	nop

080150d4 <uxr_serialize_HEARTBEAT_Payload>:
 80150d4:	b570      	push	{r4, r5, r6, lr}
 80150d6:	460d      	mov	r5, r1
 80150d8:	8809      	ldrh	r1, [r1, #0]
 80150da:	4606      	mov	r6, r0
 80150dc:	f7fa f844 	bl	800f168 <ucdr_serialize_uint16_t>
 80150e0:	8869      	ldrh	r1, [r5, #2]
 80150e2:	4604      	mov	r4, r0
 80150e4:	4630      	mov	r0, r6
 80150e6:	f7fa f83f 	bl	800f168 <ucdr_serialize_uint16_t>
 80150ea:	7929      	ldrb	r1, [r5, #4]
 80150ec:	4004      	ands	r4, r0
 80150ee:	4630      	mov	r0, r6
 80150f0:	f7fa f80e 	bl	800f110 <ucdr_serialize_uint8_t>
 80150f4:	b2e4      	uxtb	r4, r4
 80150f6:	4020      	ands	r0, r4
 80150f8:	bd70      	pop	{r4, r5, r6, pc}
 80150fa:	bf00      	nop

080150fc <uxr_deserialize_HEARTBEAT_Payload>:
 80150fc:	b570      	push	{r4, r5, r6, lr}
 80150fe:	4605      	mov	r5, r0
 8015100:	460e      	mov	r6, r1
 8015102:	f7fa f931 	bl	800f368 <ucdr_deserialize_uint16_t>
 8015106:	1cb1      	adds	r1, r6, #2
 8015108:	4604      	mov	r4, r0
 801510a:	4628      	mov	r0, r5
 801510c:	f7fa f92c 	bl	800f368 <ucdr_deserialize_uint16_t>
 8015110:	1d31      	adds	r1, r6, #4
 8015112:	4004      	ands	r4, r0
 8015114:	4628      	mov	r0, r5
 8015116:	f7fa f811 	bl	800f13c <ucdr_deserialize_uint8_t>
 801511a:	b2e4      	uxtb	r4, r4
 801511c:	4020      	ands	r0, r4
 801511e:	bd70      	pop	{r4, r5, r6, pc}

08015120 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015124:	4605      	mov	r5, r0
 8015126:	460e      	mov	r6, r1
 8015128:	f7fa feba 	bl	800fea0 <ucdr_deserialize_int32_t>
 801512c:	1d31      	adds	r1, r6, #4
 801512e:	4607      	mov	r7, r0
 8015130:	4628      	mov	r0, r5
 8015132:	f7fa fb33 	bl	800f79c <ucdr_deserialize_uint32_t>
 8015136:	f106 0108 	add.w	r1, r6, #8
 801513a:	4680      	mov	r8, r0
 801513c:	4628      	mov	r0, r5
 801513e:	f7fa feaf 	bl	800fea0 <ucdr_deserialize_int32_t>
 8015142:	f106 010c 	add.w	r1, r6, #12
 8015146:	4604      	mov	r4, r0
 8015148:	4628      	mov	r0, r5
 801514a:	f7fa fb27 	bl	800f79c <ucdr_deserialize_uint32_t>
 801514e:	ea07 0708 	and.w	r7, r7, r8
 8015152:	403c      	ands	r4, r7
 8015154:	f106 0110 	add.w	r1, r6, #16
 8015158:	4004      	ands	r4, r0
 801515a:	4628      	mov	r0, r5
 801515c:	f7fa fea0 	bl	800fea0 <ucdr_deserialize_int32_t>
 8015160:	f106 0114 	add.w	r1, r6, #20
 8015164:	4607      	mov	r7, r0
 8015166:	4628      	mov	r0, r5
 8015168:	f7fa fb18 	bl	800f79c <ucdr_deserialize_uint32_t>
 801516c:	b2e4      	uxtb	r4, r4
 801516e:	403c      	ands	r4, r7
 8015170:	4020      	ands	r0, r4
 8015172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015176:	bf00      	nop

08015178 <uxr_serialize_SampleIdentity>:
 8015178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801517c:	220c      	movs	r2, #12
 801517e:	4604      	mov	r4, r0
 8015180:	460d      	mov	r5, r1
 8015182:	f004 fb8f 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8015186:	2203      	movs	r2, #3
 8015188:	f105 010c 	add.w	r1, r5, #12
 801518c:	4607      	mov	r7, r0
 801518e:	4620      	mov	r0, r4
 8015190:	f004 fb88 	bl	80198a4 <ucdr_serialize_array_uint8_t>
 8015194:	7be9      	ldrb	r1, [r5, #15]
 8015196:	4680      	mov	r8, r0
 8015198:	4620      	mov	r0, r4
 801519a:	f7f9 ffb9 	bl	800f110 <ucdr_serialize_uint8_t>
 801519e:	6929      	ldr	r1, [r5, #16]
 80151a0:	4606      	mov	r6, r0
 80151a2:	4620      	mov	r0, r4
 80151a4:	f7fa fde4 	bl	800fd70 <ucdr_serialize_int32_t>
 80151a8:	6969      	ldr	r1, [r5, #20]
 80151aa:	4603      	mov	r3, r0
 80151ac:	4620      	mov	r0, r4
 80151ae:	ea07 0708 	and.w	r7, r7, r8
 80151b2:	461c      	mov	r4, r3
 80151b4:	f7fa f9c2 	bl	800f53c <ucdr_serialize_uint32_t>
 80151b8:	403e      	ands	r6, r7
 80151ba:	4034      	ands	r4, r6
 80151bc:	4020      	ands	r0, r4
 80151be:	b2c0      	uxtb	r0, r0
 80151c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080151c4 <uxr_deserialize_SampleIdentity>:
 80151c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151c8:	220c      	movs	r2, #12
 80151ca:	4604      	mov	r4, r0
 80151cc:	460d      	mov	r5, r1
 80151ce:	f004 fbcd 	bl	801996c <ucdr_deserialize_array_uint8_t>
 80151d2:	2203      	movs	r2, #3
 80151d4:	f105 010c 	add.w	r1, r5, #12
 80151d8:	4607      	mov	r7, r0
 80151da:	4620      	mov	r0, r4
 80151dc:	f004 fbc6 	bl	801996c <ucdr_deserialize_array_uint8_t>
 80151e0:	f105 010f 	add.w	r1, r5, #15
 80151e4:	4680      	mov	r8, r0
 80151e6:	4620      	mov	r0, r4
 80151e8:	f7f9 ffa8 	bl	800f13c <ucdr_deserialize_uint8_t>
 80151ec:	f105 0110 	add.w	r1, r5, #16
 80151f0:	4606      	mov	r6, r0
 80151f2:	4620      	mov	r0, r4
 80151f4:	f7fa fe54 	bl	800fea0 <ucdr_deserialize_int32_t>
 80151f8:	f105 0114 	add.w	r1, r5, #20
 80151fc:	4603      	mov	r3, r0
 80151fe:	4620      	mov	r0, r4
 8015200:	ea07 0708 	and.w	r7, r7, r8
 8015204:	461c      	mov	r4, r3
 8015206:	f7fa fac9 	bl	800f79c <ucdr_deserialize_uint32_t>
 801520a:	403e      	ands	r6, r7
 801520c:	4034      	ands	r4, r6
 801520e:	4020      	ands	r0, r4
 8015210:	b2c0      	uxtb	r0, r0
 8015212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015216:	bf00      	nop

08015218 <rcl_client_get_rmw_handle>:
 8015218:	b118      	cbz	r0, 8015222 <rcl_client_get_rmw_handle+0xa>
 801521a:	6800      	ldr	r0, [r0, #0]
 801521c:	b108      	cbz	r0, 8015222 <rcl_client_get_rmw_handle+0xa>
 801521e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015222:	4770      	bx	lr

08015224 <rcl_send_request>:
 8015224:	b570      	push	{r4, r5, r6, lr}
 8015226:	b082      	sub	sp, #8
 8015228:	b1e8      	cbz	r0, 8015266 <rcl_send_request+0x42>
 801522a:	4604      	mov	r4, r0
 801522c:	6800      	ldr	r0, [r0, #0]
 801522e:	b1d0      	cbz	r0, 8015266 <rcl_send_request+0x42>
 8015230:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015234:	b1bb      	cbz	r3, 8015266 <rcl_send_request+0x42>
 8015236:	460e      	mov	r6, r1
 8015238:	b1d1      	cbz	r1, 8015270 <rcl_send_request+0x4c>
 801523a:	4615      	mov	r5, r2
 801523c:	b1c2      	cbz	r2, 8015270 <rcl_send_request+0x4c>
 801523e:	2105      	movs	r1, #5
 8015240:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015244:	f002 fbf8 	bl	8017a38 <__atomic_load_8>
 8015248:	6823      	ldr	r3, [r4, #0]
 801524a:	e9c5 0100 	strd	r0, r1, [r5]
 801524e:	462a      	mov	r2, r5
 8015250:	4631      	mov	r1, r6
 8015252:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015256:	f003 fdbd 	bl	8018dd4 <rmw_send_request>
 801525a:	4606      	mov	r6, r0
 801525c:	b160      	cbz	r0, 8015278 <rcl_send_request+0x54>
 801525e:	2601      	movs	r6, #1
 8015260:	4630      	mov	r0, r6
 8015262:	b002      	add	sp, #8
 8015264:	bd70      	pop	{r4, r5, r6, pc}
 8015266:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801526a:	4630      	mov	r0, r6
 801526c:	b002      	add	sp, #8
 801526e:	bd70      	pop	{r4, r5, r6, pc}
 8015270:	260b      	movs	r6, #11
 8015272:	4630      	mov	r0, r6
 8015274:	b002      	add	sp, #8
 8015276:	bd70      	pop	{r4, r5, r6, pc}
 8015278:	6820      	ldr	r0, [r4, #0]
 801527a:	2105      	movs	r1, #5
 801527c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015280:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015284:	9100      	str	r1, [sp, #0]
 8015286:	f002 fc43 	bl	8017b10 <__atomic_exchange_8>
 801528a:	4630      	mov	r0, r6
 801528c:	b002      	add	sp, #8
 801528e:	bd70      	pop	{r4, r5, r6, pc}

08015290 <rcl_take_response>:
 8015290:	b570      	push	{r4, r5, r6, lr}
 8015292:	468e      	mov	lr, r1
 8015294:	460c      	mov	r4, r1
 8015296:	4616      	mov	r6, r2
 8015298:	4605      	mov	r5, r0
 801529a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801529e:	b08c      	sub	sp, #48	@ 0x30
 80152a0:	f10d 0c18 	add.w	ip, sp, #24
 80152a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80152ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80152b0:	b35d      	cbz	r5, 801530a <rcl_take_response+0x7a>
 80152b2:	682b      	ldr	r3, [r5, #0]
 80152b4:	b34b      	cbz	r3, 801530a <rcl_take_response+0x7a>
 80152b6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80152ba:	b330      	cbz	r0, 801530a <rcl_take_response+0x7a>
 80152bc:	b346      	cbz	r6, 8015310 <rcl_take_response+0x80>
 80152be:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8015318 <rcl_take_response+0x88>
 80152c2:	2300      	movs	r3, #0
 80152c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80152c8:	4632      	mov	r2, r6
 80152ca:	f10d 0307 	add.w	r3, sp, #7
 80152ce:	a902      	add	r1, sp, #8
 80152d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80152d8:	f003 fe84 	bl	8018fe4 <rmw_take_response>
 80152dc:	4605      	mov	r5, r0
 80152de:	b9c8      	cbnz	r0, 8015314 <rcl_take_response+0x84>
 80152e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80152e4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80152e8:	2a00      	cmp	r2, #0
 80152ea:	bf08      	it	eq
 80152ec:	461d      	moveq	r5, r3
 80152ee:	f10d 0e18 	add.w	lr, sp, #24
 80152f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152f6:	46a4      	mov	ip, r4
 80152f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015300:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015304:	4628      	mov	r0, r5
 8015306:	b00c      	add	sp, #48	@ 0x30
 8015308:	bd70      	pop	{r4, r5, r6, pc}
 801530a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801530e:	e7ee      	b.n	80152ee <rcl_take_response+0x5e>
 8015310:	250b      	movs	r5, #11
 8015312:	e7ec      	b.n	80152ee <rcl_take_response+0x5e>
 8015314:	2501      	movs	r5, #1
 8015316:	e7ea      	b.n	80152ee <rcl_take_response+0x5e>
	...

08015320 <rcl_client_is_valid>:
 8015320:	b130      	cbz	r0, 8015330 <rcl_client_is_valid+0x10>
 8015322:	6800      	ldr	r0, [r0, #0]
 8015324:	b120      	cbz	r0, 8015330 <rcl_client_is_valid+0x10>
 8015326:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801532a:	3800      	subs	r0, #0
 801532c:	bf18      	it	ne
 801532e:	2001      	movne	r0, #1
 8015330:	4770      	bx	lr
 8015332:	bf00      	nop

08015334 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015334:	280b      	cmp	r0, #11
 8015336:	dc0d      	bgt.n	8015354 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015338:	2800      	cmp	r0, #0
 801533a:	db09      	blt.n	8015350 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801533c:	280b      	cmp	r0, #11
 801533e:	d807      	bhi.n	8015350 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015340:	e8df f000 	tbb	[pc, r0]
 8015344:	07060607 	.word	0x07060607
 8015348:	06060606 	.word	0x06060606
 801534c:	07070606 	.word	0x07070606
 8015350:	2001      	movs	r0, #1
 8015352:	4770      	bx	lr
 8015354:	28cb      	cmp	r0, #203	@ 0xcb
 8015356:	bf18      	it	ne
 8015358:	2001      	movne	r0, #1
 801535a:	4770      	bx	lr

0801535c <rcl_get_zero_initialized_context>:
 801535c:	4a03      	ldr	r2, [pc, #12]	@ (801536c <rcl_get_zero_initialized_context+0x10>)
 801535e:	4603      	mov	r3, r0
 8015360:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015364:	e883 0003 	stmia.w	r3, {r0, r1}
 8015368:	4618      	mov	r0, r3
 801536a:	4770      	bx	lr
 801536c:	0801dd38 	.word	0x0801dd38

08015370 <rcl_context_is_valid>:
 8015370:	b118      	cbz	r0, 801537a <rcl_context_is_valid+0xa>
 8015372:	6840      	ldr	r0, [r0, #4]
 8015374:	3800      	subs	r0, #0
 8015376:	bf18      	it	ne
 8015378:	2001      	movne	r0, #1
 801537a:	4770      	bx	lr

0801537c <__cleanup_context>:
 801537c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015380:	4606      	mov	r6, r0
 8015382:	6800      	ldr	r0, [r0, #0]
 8015384:	2300      	movs	r3, #0
 8015386:	6073      	str	r3, [r6, #4]
 8015388:	2800      	cmp	r0, #0
 801538a:	d049      	beq.n	8015420 <__cleanup_context+0xa4>
 801538c:	6947      	ldr	r7, [r0, #20]
 801538e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015392:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015396:	b137      	cbz	r7, 80153a6 <__cleanup_context+0x2a>
 8015398:	3014      	adds	r0, #20
 801539a:	f000 f9a5 	bl	80156e8 <rcl_init_options_fini>
 801539e:	4607      	mov	r7, r0
 80153a0:	2800      	cmp	r0, #0
 80153a2:	d144      	bne.n	801542e <__cleanup_context+0xb2>
 80153a4:	6830      	ldr	r0, [r6, #0]
 80153a6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80153a8:	b143      	cbz	r3, 80153bc <__cleanup_context+0x40>
 80153aa:	3028      	adds	r0, #40	@ 0x28
 80153ac:	f003 fb5a 	bl	8018a64 <rmw_context_fini>
 80153b0:	b118      	cbz	r0, 80153ba <__cleanup_context+0x3e>
 80153b2:	2f00      	cmp	r7, #0
 80153b4:	d03e      	beq.n	8015434 <__cleanup_context+0xb8>
 80153b6:	f7fc f9fb 	bl	80117b0 <rcutils_reset_error>
 80153ba:	6830      	ldr	r0, [r6, #0]
 80153bc:	6a03      	ldr	r3, [r0, #32]
 80153be:	b1db      	cbz	r3, 80153f8 <__cleanup_context+0x7c>
 80153c0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80153c4:	2a01      	cmp	r2, #1
 80153c6:	f17c 0100 	sbcs.w	r1, ip, #0
 80153ca:	db11      	blt.n	80153f0 <__cleanup_context+0x74>
 80153cc:	2400      	movs	r4, #0
 80153ce:	4625      	mov	r5, r4
 80153d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80153d4:	4649      	mov	r1, r9
 80153d6:	b1b8      	cbz	r0, 8015408 <__cleanup_context+0x8c>
 80153d8:	47c0      	blx	r8
 80153da:	6833      	ldr	r3, [r6, #0]
 80153dc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80153e0:	3401      	adds	r4, #1
 80153e2:	f145 0500 	adc.w	r5, r5, #0
 80153e6:	4294      	cmp	r4, r2
 80153e8:	eb75 010c 	sbcs.w	r1, r5, ip
 80153ec:	6a1b      	ldr	r3, [r3, #32]
 80153ee:	dbef      	blt.n	80153d0 <__cleanup_context+0x54>
 80153f0:	4618      	mov	r0, r3
 80153f2:	4649      	mov	r1, r9
 80153f4:	47c0      	blx	r8
 80153f6:	6830      	ldr	r0, [r6, #0]
 80153f8:	4649      	mov	r1, r9
 80153fa:	47c0      	blx	r8
 80153fc:	2300      	movs	r3, #0
 80153fe:	e9c6 3300 	strd	r3, r3, [r6]
 8015402:	4638      	mov	r0, r7
 8015404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015408:	3401      	adds	r4, #1
 801540a:	f145 0500 	adc.w	r5, r5, #0
 801540e:	4294      	cmp	r4, r2
 8015410:	eb75 010c 	sbcs.w	r1, r5, ip
 8015414:	dbdc      	blt.n	80153d0 <__cleanup_context+0x54>
 8015416:	4618      	mov	r0, r3
 8015418:	4649      	mov	r1, r9
 801541a:	47c0      	blx	r8
 801541c:	6830      	ldr	r0, [r6, #0]
 801541e:	e7eb      	b.n	80153f8 <__cleanup_context+0x7c>
 8015420:	4607      	mov	r7, r0
 8015422:	2300      	movs	r3, #0
 8015424:	e9c6 3300 	strd	r3, r3, [r6]
 8015428:	4638      	mov	r0, r7
 801542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801542e:	f7fc f9bf 	bl	80117b0 <rcutils_reset_error>
 8015432:	e7b7      	b.n	80153a4 <__cleanup_context+0x28>
 8015434:	f7ff ff7e 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8015438:	4607      	mov	r7, r0
 801543a:	e7bc      	b.n	80153b6 <__cleanup_context+0x3a>

0801543c <rcl_init>:
 801543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015440:	1e05      	subs	r5, r0, #0
 8015442:	b09c      	sub	sp, #112	@ 0x70
 8015444:	460e      	mov	r6, r1
 8015446:	4690      	mov	r8, r2
 8015448:	461f      	mov	r7, r3
 801544a:	f340 8099 	ble.w	8015580 <rcl_init+0x144>
 801544e:	2900      	cmp	r1, #0
 8015450:	f000 8099 	beq.w	8015586 <rcl_init+0x14a>
 8015454:	f1a1 0e04 	sub.w	lr, r1, #4
 8015458:	f04f 0c00 	mov.w	ip, #0
 801545c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015460:	f10c 0c01 	add.w	ip, ip, #1
 8015464:	2c00      	cmp	r4, #0
 8015466:	f000 808e 	beq.w	8015586 <rcl_init+0x14a>
 801546a:	4565      	cmp	r5, ip
 801546c:	d1f6      	bne.n	801545c <rcl_init+0x20>
 801546e:	f1b8 0f00 	cmp.w	r8, #0
 8015472:	f000 8088 	beq.w	8015586 <rcl_init+0x14a>
 8015476:	f8d8 4000 	ldr.w	r4, [r8]
 801547a:	2c00      	cmp	r4, #0
 801547c:	f000 8083 	beq.w	8015586 <rcl_init+0x14a>
 8015480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015482:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8015486:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801548a:	6823      	ldr	r3, [r4, #0]
 801548c:	f8cc 3000 	str.w	r3, [ip]
 8015490:	a817      	add	r0, sp, #92	@ 0x5c
 8015492:	f7fc f969 	bl	8011768 <rcutils_allocator_is_valid>
 8015496:	2800      	cmp	r0, #0
 8015498:	d075      	beq.n	8015586 <rcl_init+0x14a>
 801549a:	2f00      	cmp	r7, #0
 801549c:	d073      	beq.n	8015586 <rcl_init+0x14a>
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d175      	bne.n	8015590 <rcl_init+0x154>
 80154a4:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 80154a8:	2178      	movs	r1, #120	@ 0x78
 80154aa:	2001      	movs	r0, #1
 80154ac:	4798      	blx	r3
 80154ae:	4604      	mov	r4, r0
 80154b0:	6038      	str	r0, [r7, #0]
 80154b2:	2800      	cmp	r0, #0
 80154b4:	f000 80a0 	beq.w	80155f8 <rcl_init+0x1bc>
 80154b8:	a802      	add	r0, sp, #8
 80154ba:	f002 fdfd 	bl	80180b8 <rmw_get_zero_initialized_context>
 80154be:	a902      	add	r1, sp, #8
 80154c0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80154c4:	2250      	movs	r2, #80	@ 0x50
 80154c6:	ac17      	add	r4, sp, #92	@ 0x5c
 80154c8:	f007 f81d 	bl	801c506 <memcpy>
 80154cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80154ce:	f8d7 e000 	ldr.w	lr, [r7]
 80154d2:	46f4      	mov	ip, lr
 80154d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154d8:	6823      	ldr	r3, [r4, #0]
 80154da:	f8cc 3000 	str.w	r3, [ip]
 80154de:	f10e 0114 	add.w	r1, lr, #20
 80154e2:	4640      	mov	r0, r8
 80154e4:	f000 f92a 	bl	801573c <rcl_init_options_copy>
 80154e8:	4604      	mov	r4, r0
 80154ea:	2800      	cmp	r0, #0
 80154ec:	d144      	bne.n	8015578 <rcl_init+0x13c>
 80154ee:	f8d7 9000 	ldr.w	r9, [r7]
 80154f2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80154f6:	f8c9 0020 	str.w	r0, [r9, #32]
 80154fa:	f8c9 5018 	str.w	r5, [r9, #24]
 80154fe:	f8c9 801c 	str.w	r8, [r9, #28]
 8015502:	2d00      	cmp	r5, #0
 8015504:	d04b      	beq.n	801559e <rcl_init+0x162>
 8015506:	2e00      	cmp	r6, #0
 8015508:	d049      	beq.n	801559e <rcl_init+0x162>
 801550a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801550e:	2104      	movs	r1, #4
 8015510:	4628      	mov	r0, r5
 8015512:	4798      	blx	r3
 8015514:	f8c9 0020 	str.w	r0, [r9, #32]
 8015518:	f8d7 9000 	ldr.w	r9, [r7]
 801551c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015520:	46ca      	mov	sl, r9
 8015522:	b343      	cbz	r3, 8015576 <rcl_init+0x13a>
 8015524:	2d01      	cmp	r5, #1
 8015526:	f178 0300 	sbcs.w	r3, r8, #0
 801552a:	db38      	blt.n	801559e <rcl_init+0x162>
 801552c:	2400      	movs	r4, #0
 801552e:	3e04      	subs	r6, #4
 8015530:	46a1      	mov	r9, r4
 8015532:	e00b      	b.n	801554c <rcl_init+0x110>
 8015534:	6831      	ldr	r1, [r6, #0]
 8015536:	f006 ffe6 	bl	801c506 <memcpy>
 801553a:	3401      	adds	r4, #1
 801553c:	f149 0900 	adc.w	r9, r9, #0
 8015540:	45c8      	cmp	r8, r9
 8015542:	bf08      	it	eq
 8015544:	42a5      	cmpeq	r5, r4
 8015546:	d028      	beq.n	801559a <rcl_init+0x15e>
 8015548:	f8d7 a000 	ldr.w	sl, [r7]
 801554c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015550:	f7ea fe48 	bl	80001e4 <strlen>
 8015554:	1c42      	adds	r2, r0, #1
 8015556:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015558:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801555a:	f8da a020 	ldr.w	sl, [sl, #32]
 801555e:	9201      	str	r2, [sp, #4]
 8015560:	4610      	mov	r0, r2
 8015562:	4798      	blx	r3
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801556a:	6a1b      	ldr	r3, [r3, #32]
 801556c:	9a01      	ldr	r2, [sp, #4]
 801556e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015572:	2800      	cmp	r0, #0
 8015574:	d1de      	bne.n	8015534 <rcl_init+0xf8>
 8015576:	240a      	movs	r4, #10
 8015578:	4638      	mov	r0, r7
 801557a:	f7ff feff 	bl	801537c <__cleanup_context>
 801557e:	e003      	b.n	8015588 <rcl_init+0x14c>
 8015580:	2900      	cmp	r1, #0
 8015582:	f43f af74 	beq.w	801546e <rcl_init+0x32>
 8015586:	240b      	movs	r4, #11
 8015588:	4620      	mov	r0, r4
 801558a:	b01c      	add	sp, #112	@ 0x70
 801558c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015590:	2464      	movs	r4, #100	@ 0x64
 8015592:	4620      	mov	r0, r4
 8015594:	b01c      	add	sp, #112	@ 0x70
 8015596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801559a:	f8d7 9000 	ldr.w	r9, [r7]
 801559e:	491d      	ldr	r1, [pc, #116]	@ (8015614 <rcl_init+0x1d8>)
 80155a0:	680b      	ldr	r3, [r1, #0]
 80155a2:	3301      	adds	r3, #1
 80155a4:	d023      	beq.n	80155ee <rcl_init+0x1b2>
 80155a6:	600b      	str	r3, [r1, #0]
 80155a8:	461a      	mov	r2, r3
 80155aa:	2400      	movs	r4, #0
 80155ac:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80155b0:	607b      	str	r3, [r7, #4]
 80155b2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80155b4:	6182      	str	r2, [r0, #24]
 80155b6:	3301      	adds	r3, #1
 80155b8:	61c4      	str	r4, [r0, #28]
 80155ba:	d01f      	beq.n	80155fc <rcl_init+0x1c0>
 80155bc:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80155c0:	b94b      	cbnz	r3, 80155d6 <rcl_init+0x19a>
 80155c2:	3030      	adds	r0, #48	@ 0x30
 80155c4:	f000 f926 	bl	8015814 <rcl_get_localhost_only>
 80155c8:	4604      	mov	r4, r0
 80155ca:	2800      	cmp	r0, #0
 80155cc:	d1d4      	bne.n	8015578 <rcl_init+0x13c>
 80155ce:	f8d7 9000 	ldr.w	r9, [r7]
 80155d2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80155d6:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 80155da:	3018      	adds	r0, #24
 80155dc:	f003 f90c 	bl	80187f8 <rmw_init>
 80155e0:	4604      	mov	r4, r0
 80155e2:	2800      	cmp	r0, #0
 80155e4:	d0d0      	beq.n	8015588 <rcl_init+0x14c>
 80155e6:	f7ff fea5 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 80155ea:	4604      	mov	r4, r0
 80155ec:	e7c4      	b.n	8015578 <rcl_init+0x13c>
 80155ee:	2201      	movs	r2, #1
 80155f0:	461c      	mov	r4, r3
 80155f2:	600a      	str	r2, [r1, #0]
 80155f4:	4613      	mov	r3, r2
 80155f6:	e7d9      	b.n	80155ac <rcl_init+0x170>
 80155f8:	240a      	movs	r4, #10
 80155fa:	e7c5      	b.n	8015588 <rcl_init+0x14c>
 80155fc:	3024      	adds	r0, #36	@ 0x24
 80155fe:	f005 fe75 	bl	801b2ec <rcl_get_default_domain_id>
 8015602:	4604      	mov	r4, r0
 8015604:	2800      	cmp	r0, #0
 8015606:	d1b7      	bne.n	8015578 <rcl_init+0x13c>
 8015608:	f8d7 9000 	ldr.w	r9, [r7]
 801560c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015610:	e7d4      	b.n	80155bc <rcl_init+0x180>
 8015612:	bf00      	nop
 8015614:	2000e594 	.word	0x2000e594

08015618 <rcl_get_zero_initialized_init_options>:
 8015618:	2000      	movs	r0, #0
 801561a:	4770      	bx	lr

0801561c <rcl_init_options_init>:
 801561c:	b084      	sub	sp, #16
 801561e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015620:	b097      	sub	sp, #92	@ 0x5c
 8015622:	ae1d      	add	r6, sp, #116	@ 0x74
 8015624:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8015628:	2800      	cmp	r0, #0
 801562a:	d058      	beq.n	80156de <rcl_init_options_init+0xc2>
 801562c:	6803      	ldr	r3, [r0, #0]
 801562e:	4605      	mov	r5, r0
 8015630:	b133      	cbz	r3, 8015640 <rcl_init_options_init+0x24>
 8015632:	2464      	movs	r4, #100	@ 0x64
 8015634:	4620      	mov	r0, r4
 8015636:	b017      	add	sp, #92	@ 0x5c
 8015638:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801563c:	b004      	add	sp, #16
 801563e:	4770      	bx	lr
 8015640:	4630      	mov	r0, r6
 8015642:	f7fc f891 	bl	8011768 <rcutils_allocator_is_valid>
 8015646:	2800      	cmp	r0, #0
 8015648:	d049      	beq.n	80156de <rcl_init_options_init+0xc2>
 801564a:	46b4      	mov	ip, r6
 801564c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015650:	ac11      	add	r4, sp, #68	@ 0x44
 8015652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015654:	f8dc 3000 	ldr.w	r3, [ip]
 8015658:	6023      	str	r3, [r4, #0]
 801565a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801565c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801565e:	2050      	movs	r0, #80	@ 0x50
 8015660:	4798      	blx	r3
 8015662:	4604      	mov	r4, r0
 8015664:	6028      	str	r0, [r5, #0]
 8015666:	2800      	cmp	r0, #0
 8015668:	d03b      	beq.n	80156e2 <rcl_init_options_init+0xc6>
 801566a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801566e:	4686      	mov	lr, r0
 8015670:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015674:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015678:	f8dc 3000 	ldr.w	r3, [ip]
 801567c:	f8ce 3000 	str.w	r3, [lr]
 8015680:	a802      	add	r0, sp, #8
 8015682:	f002 fd29 	bl	80180d8 <rmw_get_zero_initialized_init_options>
 8015686:	f10d 0e08 	add.w	lr, sp, #8
 801568a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801568e:	f104 0c18 	add.w	ip, r4, #24
 8015692:	682f      	ldr	r7, [r5, #0]
 8015694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015698:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801569c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80156a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80156a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80156ac:	ac20      	add	r4, sp, #128	@ 0x80
 80156ae:	e88c 0003 	stmia.w	ip, {r0, r1}
 80156b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80156b6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80156ba:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80156be:	f107 0018 	add.w	r0, r7, #24
 80156c2:	f002 ff77 	bl	80185b4 <rmw_init_options_init>
 80156c6:	4604      	mov	r4, r0
 80156c8:	2800      	cmp	r0, #0
 80156ca:	d0b3      	beq.n	8015634 <rcl_init_options_init+0x18>
 80156cc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 80156ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80156d0:	6828      	ldr	r0, [r5, #0]
 80156d2:	4798      	blx	r3
 80156d4:	4620      	mov	r0, r4
 80156d6:	f7ff fe2d 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 80156da:	4604      	mov	r4, r0
 80156dc:	e7aa      	b.n	8015634 <rcl_init_options_init+0x18>
 80156de:	240b      	movs	r4, #11
 80156e0:	e7a8      	b.n	8015634 <rcl_init_options_init+0x18>
 80156e2:	240a      	movs	r4, #10
 80156e4:	e7a6      	b.n	8015634 <rcl_init_options_init+0x18>
 80156e6:	bf00      	nop

080156e8 <rcl_init_options_fini>:
 80156e8:	b530      	push	{r4, r5, lr}
 80156ea:	b087      	sub	sp, #28
 80156ec:	b1f0      	cbz	r0, 801572c <rcl_init_options_fini+0x44>
 80156ee:	6803      	ldr	r3, [r0, #0]
 80156f0:	4604      	mov	r4, r0
 80156f2:	b1db      	cbz	r3, 801572c <rcl_init_options_fini+0x44>
 80156f4:	469c      	mov	ip, r3
 80156f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80156fa:	f10d 0e04 	add.w	lr, sp, #4
 80156fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015702:	f8dc 3000 	ldr.w	r3, [ip]
 8015706:	f8ce 3000 	str.w	r3, [lr]
 801570a:	a801      	add	r0, sp, #4
 801570c:	f7fc f82c 	bl	8011768 <rcutils_allocator_is_valid>
 8015710:	b160      	cbz	r0, 801572c <rcl_init_options_fini+0x44>
 8015712:	6820      	ldr	r0, [r4, #0]
 8015714:	3018      	adds	r0, #24
 8015716:	f003 f823 	bl	8018760 <rmw_init_options_fini>
 801571a:	4605      	mov	r5, r0
 801571c:	b950      	cbnz	r0, 8015734 <rcl_init_options_fini+0x4c>
 801571e:	6820      	ldr	r0, [r4, #0]
 8015720:	9b02      	ldr	r3, [sp, #8]
 8015722:	9905      	ldr	r1, [sp, #20]
 8015724:	4798      	blx	r3
 8015726:	4628      	mov	r0, r5
 8015728:	b007      	add	sp, #28
 801572a:	bd30      	pop	{r4, r5, pc}
 801572c:	250b      	movs	r5, #11
 801572e:	4628      	mov	r0, r5
 8015730:	b007      	add	sp, #28
 8015732:	bd30      	pop	{r4, r5, pc}
 8015734:	f7ff fdfe 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8015738:	4605      	mov	r5, r0
 801573a:	e7f8      	b.n	801572e <rcl_init_options_fini+0x46>

0801573c <rcl_init_options_copy>:
 801573c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015740:	b094      	sub	sp, #80	@ 0x50
 8015742:	2800      	cmp	r0, #0
 8015744:	d058      	beq.n	80157f8 <rcl_init_options_copy+0xbc>
 8015746:	4604      	mov	r4, r0
 8015748:	6800      	ldr	r0, [r0, #0]
 801574a:	2800      	cmp	r0, #0
 801574c:	d054      	beq.n	80157f8 <rcl_init_options_copy+0xbc>
 801574e:	460e      	mov	r6, r1
 8015750:	f7fc f80a 	bl	8011768 <rcutils_allocator_is_valid>
 8015754:	2800      	cmp	r0, #0
 8015756:	d04f      	beq.n	80157f8 <rcl_init_options_copy+0xbc>
 8015758:	2e00      	cmp	r6, #0
 801575a:	d04d      	beq.n	80157f8 <rcl_init_options_copy+0xbc>
 801575c:	6833      	ldr	r3, [r6, #0]
 801575e:	b123      	cbz	r3, 801576a <rcl_init_options_copy+0x2e>
 8015760:	2464      	movs	r4, #100	@ 0x64
 8015762:	4620      	mov	r0, r4
 8015764:	b014      	add	sp, #80	@ 0x50
 8015766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801576a:	6827      	ldr	r7, [r4, #0]
 801576c:	46bc      	mov	ip, r7
 801576e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015772:	ad0f      	add	r5, sp, #60	@ 0x3c
 8015774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015776:	f8dc 3000 	ldr.w	r3, [ip]
 801577a:	f8d7 8000 	ldr.w	r8, [r7]
 801577e:	602b      	str	r3, [r5, #0]
 8015780:	4619      	mov	r1, r3
 8015782:	2050      	movs	r0, #80	@ 0x50
 8015784:	47c0      	blx	r8
 8015786:	4605      	mov	r5, r0
 8015788:	6030      	str	r0, [r6, #0]
 801578a:	b3d0      	cbz	r0, 8015802 <rcl_init_options_copy+0xc6>
 801578c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 8015790:	4686      	mov	lr, r0
 8015792:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015796:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801579a:	f8dc 3000 	ldr.w	r3, [ip]
 801579e:	f8ce 3000 	str.w	r3, [lr]
 80157a2:	4668      	mov	r0, sp
 80157a4:	f002 fc98 	bl	80180d8 <rmw_get_zero_initialized_init_options>
 80157a8:	46ee      	mov	lr, sp
 80157aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157ae:	f105 0c18 	add.w	ip, r5, #24
 80157b2:	6824      	ldr	r4, [r4, #0]
 80157b4:	6835      	ldr	r5, [r6, #0]
 80157b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157ca:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80157ce:	e88c 0003 	stmia.w	ip, {r0, r1}
 80157d2:	f104 0018 	add.w	r0, r4, #24
 80157d6:	f105 0118 	add.w	r1, r5, #24
 80157da:	f002 ff4d 	bl	8018678 <rmw_init_options_copy>
 80157de:	4604      	mov	r4, r0
 80157e0:	2800      	cmp	r0, #0
 80157e2:	d0be      	beq.n	8015762 <rcl_init_options_copy+0x26>
 80157e4:	f7fb ffce 	bl	8011784 <rcutils_get_error_string>
 80157e8:	f7fb ffe2 	bl	80117b0 <rcutils_reset_error>
 80157ec:	4630      	mov	r0, r6
 80157ee:	f7ff ff7b 	bl	80156e8 <rcl_init_options_fini>
 80157f2:	b140      	cbz	r0, 8015806 <rcl_init_options_copy+0xca>
 80157f4:	4604      	mov	r4, r0
 80157f6:	e7b4      	b.n	8015762 <rcl_init_options_copy+0x26>
 80157f8:	240b      	movs	r4, #11
 80157fa:	4620      	mov	r0, r4
 80157fc:	b014      	add	sp, #80	@ 0x50
 80157fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015802:	240a      	movs	r4, #10
 8015804:	e7ad      	b.n	8015762 <rcl_init_options_copy+0x26>
 8015806:	4620      	mov	r0, r4
 8015808:	b014      	add	sp, #80	@ 0x50
 801580a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801580e:	f7ff bd91 	b.w	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8015812:	bf00      	nop

08015814 <rcl_get_localhost_only>:
 8015814:	b510      	push	{r4, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	2300      	movs	r3, #0
 801581a:	9301      	str	r3, [sp, #4]
 801581c:	b1b8      	cbz	r0, 801584e <rcl_get_localhost_only+0x3a>
 801581e:	4604      	mov	r4, r0
 8015820:	a901      	add	r1, sp, #4
 8015822:	480c      	ldr	r0, [pc, #48]	@ (8015854 <rcl_get_localhost_only+0x40>)
 8015824:	f002 f9ac 	bl	8017b80 <rcutils_get_env>
 8015828:	b110      	cbz	r0, 8015830 <rcl_get_localhost_only+0x1c>
 801582a:	2001      	movs	r0, #1
 801582c:	b002      	add	sp, #8
 801582e:	bd10      	pop	{r4, pc}
 8015830:	9b01      	ldr	r3, [sp, #4]
 8015832:	b113      	cbz	r3, 801583a <rcl_get_localhost_only+0x26>
 8015834:	781a      	ldrb	r2, [r3, #0]
 8015836:	2a31      	cmp	r2, #49	@ 0x31
 8015838:	d004      	beq.n	8015844 <rcl_get_localhost_only+0x30>
 801583a:	2302      	movs	r3, #2
 801583c:	2000      	movs	r0, #0
 801583e:	7023      	strb	r3, [r4, #0]
 8015840:	b002      	add	sp, #8
 8015842:	bd10      	pop	{r4, pc}
 8015844:	785b      	ldrb	r3, [r3, #1]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d1f7      	bne.n	801583a <rcl_get_localhost_only+0x26>
 801584a:	2301      	movs	r3, #1
 801584c:	e7f6      	b.n	801583c <rcl_get_localhost_only+0x28>
 801584e:	200b      	movs	r0, #11
 8015850:	b002      	add	sp, #8
 8015852:	bd10      	pop	{r4, pc}
 8015854:	0801d734 	.word	0x0801d734

08015858 <rcl_get_zero_initialized_node>:
 8015858:	4a03      	ldr	r2, [pc, #12]	@ (8015868 <rcl_get_zero_initialized_node+0x10>)
 801585a:	4603      	mov	r3, r0
 801585c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015860:	e883 0003 	stmia.w	r3, {r0, r1}
 8015864:	4618      	mov	r0, r3
 8015866:	4770      	bx	lr
 8015868:	0801dd40 	.word	0x0801dd40

0801586c <rcl_node_init>:
 801586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015870:	b0a9      	sub	sp, #164	@ 0xa4
 8015872:	4604      	mov	r4, r0
 8015874:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8015878:	a823      	add	r0, sp, #140	@ 0x8c
 801587a:	460e      	mov	r6, r1
 801587c:	4615      	mov	r5, r2
 801587e:	461f      	mov	r7, r3
 8015880:	f005 ff5c 	bl	801b73c <rcl_guard_condition_get_default_options>
 8015884:	f1b8 0f00 	cmp.w	r8, #0
 8015888:	f000 80e6 	beq.w	8015a58 <rcl_node_init+0x1ec>
 801588c:	4640      	mov	r0, r8
 801588e:	f7fb ff6b 	bl	8011768 <rcutils_allocator_is_valid>
 8015892:	2800      	cmp	r0, #0
 8015894:	f000 80e0 	beq.w	8015a58 <rcl_node_init+0x1ec>
 8015898:	2e00      	cmp	r6, #0
 801589a:	f000 80dd 	beq.w	8015a58 <rcl_node_init+0x1ec>
 801589e:	2d00      	cmp	r5, #0
 80158a0:	f000 80da 	beq.w	8015a58 <rcl_node_init+0x1ec>
 80158a4:	2c00      	cmp	r4, #0
 80158a6:	f000 80d7 	beq.w	8015a58 <rcl_node_init+0x1ec>
 80158aa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80158ae:	f1b9 0f00 	cmp.w	r9, #0
 80158b2:	f040 80fd 	bne.w	8015ab0 <rcl_node_init+0x244>
 80158b6:	2f00      	cmp	r7, #0
 80158b8:	f000 80ce 	beq.w	8015a58 <rcl_node_init+0x1ec>
 80158bc:	4638      	mov	r0, r7
 80158be:	f7ff fd57 	bl	8015370 <rcl_context_is_valid>
 80158c2:	4682      	mov	sl, r0
 80158c4:	2800      	cmp	r0, #0
 80158c6:	f000 80cd 	beq.w	8015a64 <rcl_node_init+0x1f8>
 80158ca:	464a      	mov	r2, r9
 80158cc:	a922      	add	r1, sp, #136	@ 0x88
 80158ce:	4630      	mov	r0, r6
 80158d0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80158d4:	f002 fda2 	bl	801841c <rmw_validate_node_name>
 80158d8:	4681      	mov	r9, r0
 80158da:	2800      	cmp	r0, #0
 80158dc:	f040 80be 	bne.w	8015a5c <rcl_node_init+0x1f0>
 80158e0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80158e2:	2800      	cmp	r0, #0
 80158e4:	f040 80f0 	bne.w	8015ac8 <rcl_node_init+0x25c>
 80158e8:	4628      	mov	r0, r5
 80158ea:	f7ea fc7b 	bl	80001e4 <strlen>
 80158ee:	2800      	cmp	r0, #0
 80158f0:	f040 80bb 	bne.w	8015a6a <rcl_node_init+0x1fe>
 80158f4:	4d7c      	ldr	r5, [pc, #496]	@ (8015ae8 <rcl_node_init+0x27c>)
 80158f6:	a922      	add	r1, sp, #136	@ 0x88
 80158f8:	2200      	movs	r2, #0
 80158fa:	4628      	mov	r0, r5
 80158fc:	f002 fd70 	bl	80183e0 <rmw_validate_namespace>
 8015900:	4681      	mov	r9, r0
 8015902:	2800      	cmp	r0, #0
 8015904:	f040 80aa 	bne.w	8015a5c <rcl_node_init+0x1f0>
 8015908:	4682      	mov	sl, r0
 801590a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801590c:	2800      	cmp	r0, #0
 801590e:	f040 80e0 	bne.w	8015ad2 <rcl_node_init+0x266>
 8015912:	f8d8 3000 	ldr.w	r3, [r8]
 8015916:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801591a:	2078      	movs	r0, #120	@ 0x78
 801591c:	4798      	blx	r3
 801591e:	4681      	mov	r9, r0
 8015920:	6060      	str	r0, [r4, #4]
 8015922:	2800      	cmp	r0, #0
 8015924:	f000 80ca 	beq.w	8015abc <rcl_node_init+0x250>
 8015928:	2200      	movs	r2, #0
 801592a:	2300      	movs	r3, #0
 801592c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8015930:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8015934:	a808      	add	r0, sp, #32
 8015936:	f000 f907 	bl	8015b48 <rcl_node_get_default_options>
 801593a:	a908      	add	r1, sp, #32
 801593c:	4648      	mov	r0, r9
 801593e:	2268      	movs	r2, #104	@ 0x68
 8015940:	f006 fde1 	bl	801c506 <memcpy>
 8015944:	6861      	ldr	r1, [r4, #4]
 8015946:	6027      	str	r7, [r4, #0]
 8015948:	4640      	mov	r0, r8
 801594a:	f000 f90b 	bl	8015b64 <rcl_node_options_copy>
 801594e:	2800      	cmp	r0, #0
 8015950:	d158      	bne.n	8015a04 <rcl_node_init+0x198>
 8015952:	4628      	mov	r0, r5
 8015954:	f7ea fc46 	bl	80001e4 <strlen>
 8015958:	4428      	add	r0, r5
 801595a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801595e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8015962:	2b2f      	cmp	r3, #47	@ 0x2f
 8015964:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015968:	9300      	str	r3, [sp, #0]
 801596a:	bf0c      	ite	eq
 801596c:	4b5f      	ldreq	r3, [pc, #380]	@ (8015aec <rcl_node_init+0x280>)
 801596e:	4b60      	ldrne	r3, [pc, #384]	@ (8015af0 <rcl_node_init+0x284>)
 8015970:	9302      	str	r3, [sp, #8]
 8015972:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015976:	9301      	str	r3, [sp, #4]
 8015978:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801597c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015980:	f002 f916 	bl	8017bb0 <rcutils_format_string_limit>
 8015984:	6823      	ldr	r3, [r4, #0]
 8015986:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801598a:	6818      	ldr	r0, [r3, #0]
 801598c:	4631      	mov	r1, r6
 801598e:	3028      	adds	r0, #40	@ 0x28
 8015990:	462a      	mov	r2, r5
 8015992:	6866      	ldr	r6, [r4, #4]
 8015994:	f003 f984 	bl	8018ca0 <rmw_create_node>
 8015998:	6863      	ldr	r3, [r4, #4]
 801599a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801599c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801599e:	2800      	cmp	r0, #0
 80159a0:	d032      	beq.n	8015a08 <rcl_node_init+0x19c>
 80159a2:	f003 fa11 	bl	8018dc8 <rmw_node_get_graph_guard_condition>
 80159a6:	4681      	mov	r9, r0
 80159a8:	b360      	cbz	r0, 8015a04 <rcl_node_init+0x198>
 80159aa:	f8d8 3000 	ldr.w	r3, [r8]
 80159ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80159b2:	6866      	ldr	r6, [r4, #4]
 80159b4:	2008      	movs	r0, #8
 80159b6:	4798      	blx	r3
 80159b8:	6863      	ldr	r3, [r4, #4]
 80159ba:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80159bc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80159c0:	f1bb 0f00 	cmp.w	fp, #0
 80159c4:	d020      	beq.n	8015a08 <rcl_node_init+0x19c>
 80159c6:	a806      	add	r0, sp, #24
 80159c8:	f005 fe28 	bl	801b61c <rcl_get_zero_initialized_guard_condition>
 80159cc:	a806      	add	r0, sp, #24
 80159ce:	c803      	ldmia	r0, {r0, r1}
 80159d0:	6863      	ldr	r3, [r4, #4]
 80159d2:	46c4      	mov	ip, r8
 80159d4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80159d8:	e88b 0003 	stmia.w	fp, {r0, r1}
 80159dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159e0:	ae23      	add	r6, sp, #140	@ 0x8c
 80159e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80159e4:	f8dc 3000 	ldr.w	r3, [ip]
 80159e8:	6033      	str	r3, [r6, #0]
 80159ea:	ab28      	add	r3, sp, #160	@ 0xa0
 80159ec:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80159f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80159f4:	4649      	mov	r1, r9
 80159f6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80159f8:	463a      	mov	r2, r7
 80159fa:	4670      	mov	r0, lr
 80159fc:	f005 fe18 	bl	801b630 <rcl_guard_condition_init_from_rmw>
 8015a00:	4681      	mov	r9, r0
 8015a02:	b328      	cbz	r0, 8015a50 <rcl_node_init+0x1e4>
 8015a04:	6863      	ldr	r3, [r4, #4]
 8015a06:	b1f3      	cbz	r3, 8015a46 <rcl_node_init+0x1da>
 8015a08:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015a0a:	b128      	cbz	r0, 8015a18 <rcl_node_init+0x1ac>
 8015a0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a10:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a14:	4798      	blx	r3
 8015a16:	6863      	ldr	r3, [r4, #4]
 8015a18:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015a1a:	b110      	cbz	r0, 8015a22 <rcl_node_init+0x1b6>
 8015a1c:	f003 f958 	bl	8018cd0 <rmw_destroy_node>
 8015a20:	6863      	ldr	r3, [r4, #4]
 8015a22:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015a24:	b148      	cbz	r0, 8015a3a <rcl_node_init+0x1ce>
 8015a26:	f005 fe63 	bl	801b6f0 <rcl_guard_condition_fini>
 8015a2a:	6863      	ldr	r3, [r4, #4]
 8015a2c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a30:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015a32:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a36:	4798      	blx	r3
 8015a38:	6863      	ldr	r3, [r4, #4]
 8015a3a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a44:	4798      	blx	r3
 8015a46:	2300      	movs	r3, #0
 8015a48:	e9c4 3300 	strd	r3, r3, [r4]
 8015a4c:	f04f 0901 	mov.w	r9, #1
 8015a50:	f1ba 0f00 	cmp.w	sl, #0
 8015a54:	d125      	bne.n	8015aa2 <rcl_node_init+0x236>
 8015a56:	e001      	b.n	8015a5c <rcl_node_init+0x1f0>
 8015a58:	f04f 090b 	mov.w	r9, #11
 8015a5c:	4648      	mov	r0, r9
 8015a5e:	b029      	add	sp, #164	@ 0xa4
 8015a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a64:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8015a68:	e7f8      	b.n	8015a5c <rcl_node_init+0x1f0>
 8015a6a:	782b      	ldrb	r3, [r5, #0]
 8015a6c:	2b2f      	cmp	r3, #47	@ 0x2f
 8015a6e:	f43f af42 	beq.w	80158f6 <rcl_node_init+0x8a>
 8015a72:	9503      	str	r5, [sp, #12]
 8015a74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8015af4 <rcl_node_init+0x288>)
 8015a7c:	9302      	str	r3, [sp, #8]
 8015a7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015a82:	9301      	str	r3, [sp, #4]
 8015a84:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015a88:	f002 f892 	bl	8017bb0 <rcutils_format_string_limit>
 8015a8c:	4605      	mov	r5, r0
 8015a8e:	b340      	cbz	r0, 8015ae2 <rcl_node_init+0x276>
 8015a90:	2200      	movs	r2, #0
 8015a92:	a922      	add	r1, sp, #136	@ 0x88
 8015a94:	9222      	str	r2, [sp, #136]	@ 0x88
 8015a96:	f002 fca3 	bl	80183e0 <rmw_validate_namespace>
 8015a9a:	4681      	mov	r9, r0
 8015a9c:	2800      	cmp	r0, #0
 8015a9e:	f43f af34 	beq.w	801590a <rcl_node_init+0x9e>
 8015aa2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015aa6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015aaa:	4628      	mov	r0, r5
 8015aac:	4798      	blx	r3
 8015aae:	e7d5      	b.n	8015a5c <rcl_node_init+0x1f0>
 8015ab0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8015ab4:	4648      	mov	r0, r9
 8015ab6:	b029      	add	sp, #164	@ 0xa4
 8015ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015abc:	f04f 090a 	mov.w	r9, #10
 8015ac0:	f1ba 0f00 	cmp.w	sl, #0
 8015ac4:	d1ed      	bne.n	8015aa2 <rcl_node_init+0x236>
 8015ac6:	e7c9      	b.n	8015a5c <rcl_node_init+0x1f0>
 8015ac8:	f002 fcfa 	bl	80184c0 <rmw_node_name_validation_result_string>
 8015acc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8015ad0:	e7c4      	b.n	8015a5c <rcl_node_init+0x1f0>
 8015ad2:	f002 fc97 	bl	8018404 <rmw_namespace_validation_result_string>
 8015ad6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8015ada:	f1ba 0f00 	cmp.w	sl, #0
 8015ade:	d1e0      	bne.n	8015aa2 <rcl_node_init+0x236>
 8015ae0:	e7bc      	b.n	8015a5c <rcl_node_init+0x1f0>
 8015ae2:	f04f 090a 	mov.w	r9, #10
 8015ae6:	e7b9      	b.n	8015a5c <rcl_node_init+0x1f0>
 8015ae8:	0801d74c 	.word	0x0801d74c
 8015aec:	0801d570 	.word	0x0801d570
 8015af0:	0801d754 	.word	0x0801d754
 8015af4:	0801d750 	.word	0x0801d750

08015af8 <rcl_node_is_valid>:
 8015af8:	b130      	cbz	r0, 8015b08 <rcl_node_is_valid+0x10>
 8015afa:	6843      	ldr	r3, [r0, #4]
 8015afc:	b123      	cbz	r3, 8015b08 <rcl_node_is_valid+0x10>
 8015afe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b00:	b113      	cbz	r3, 8015b08 <rcl_node_is_valid+0x10>
 8015b02:	6800      	ldr	r0, [r0, #0]
 8015b04:	f7ff bc34 	b.w	8015370 <rcl_context_is_valid>
 8015b08:	2000      	movs	r0, #0
 8015b0a:	4770      	bx	lr

08015b0c <rcl_node_get_name>:
 8015b0c:	b120      	cbz	r0, 8015b18 <rcl_node_get_name+0xc>
 8015b0e:	6840      	ldr	r0, [r0, #4]
 8015b10:	b110      	cbz	r0, 8015b18 <rcl_node_get_name+0xc>
 8015b12:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015b14:	b100      	cbz	r0, 8015b18 <rcl_node_get_name+0xc>
 8015b16:	6880      	ldr	r0, [r0, #8]
 8015b18:	4770      	bx	lr
 8015b1a:	bf00      	nop

08015b1c <rcl_node_get_namespace>:
 8015b1c:	b120      	cbz	r0, 8015b28 <rcl_node_get_namespace+0xc>
 8015b1e:	6840      	ldr	r0, [r0, #4]
 8015b20:	b110      	cbz	r0, 8015b28 <rcl_node_get_namespace+0xc>
 8015b22:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015b24:	b100      	cbz	r0, 8015b28 <rcl_node_get_namespace+0xc>
 8015b26:	68c0      	ldr	r0, [r0, #12]
 8015b28:	4770      	bx	lr
 8015b2a:	bf00      	nop

08015b2c <rcl_node_get_options>:
 8015b2c:	b128      	cbz	r0, 8015b3a <rcl_node_get_options+0xe>
 8015b2e:	6840      	ldr	r0, [r0, #4]
 8015b30:	b118      	cbz	r0, 8015b3a <rcl_node_get_options+0xe>
 8015b32:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	bf08      	it	eq
 8015b38:	2000      	moveq	r0, #0
 8015b3a:	4770      	bx	lr

08015b3c <rcl_node_get_rmw_handle>:
 8015b3c:	b110      	cbz	r0, 8015b44 <rcl_node_get_rmw_handle+0x8>
 8015b3e:	6840      	ldr	r0, [r0, #4]
 8015b40:	b100      	cbz	r0, 8015b44 <rcl_node_get_rmw_handle+0x8>
 8015b42:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015b44:	4770      	bx	lr
 8015b46:	bf00      	nop

08015b48 <rcl_node_get_default_options>:
 8015b48:	b510      	push	{r4, lr}
 8015b4a:	2268      	movs	r2, #104	@ 0x68
 8015b4c:	4604      	mov	r4, r0
 8015b4e:	2100      	movs	r1, #0
 8015b50:	f006 fc10 	bl	801c374 <memset>
 8015b54:	4620      	mov	r0, r4
 8015b56:	f7fb fdf9 	bl	801174c <rcutils_get_default_allocator>
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	7523      	strb	r3, [r4, #20]
 8015b5e:	4620      	mov	r0, r4
 8015b60:	bd10      	pop	{r4, pc}
 8015b62:	bf00      	nop

08015b64 <rcl_node_options_copy>:
 8015b64:	b1d0      	cbz	r0, 8015b9c <rcl_node_options_copy+0x38>
 8015b66:	b570      	push	{r4, r5, r6, lr}
 8015b68:	460c      	mov	r4, r1
 8015b6a:	b1a9      	cbz	r1, 8015b98 <rcl_node_options_copy+0x34>
 8015b6c:	4288      	cmp	r0, r1
 8015b6e:	4684      	mov	ip, r0
 8015b70:	d012      	beq.n	8015b98 <rcl_node_options_copy+0x34>
 8015b72:	4605      	mov	r5, r0
 8015b74:	8a86      	ldrh	r6, [r0, #20]
 8015b76:	468e      	mov	lr, r1
 8015b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015b7a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b7e:	682b      	ldr	r3, [r5, #0]
 8015b80:	f8ce 3000 	str.w	r3, [lr]
 8015b84:	f10c 0118 	add.w	r1, ip, #24
 8015b88:	2250      	movs	r2, #80	@ 0x50
 8015b8a:	82a6      	strh	r6, [r4, #20]
 8015b8c:	f104 0018 	add.w	r0, r4, #24
 8015b90:	f006 fcb9 	bl	801c506 <memcpy>
 8015b94:	2000      	movs	r0, #0
 8015b96:	bd70      	pop	{r4, r5, r6, pc}
 8015b98:	200b      	movs	r0, #11
 8015b9a:	bd70      	pop	{r4, r5, r6, pc}
 8015b9c:	200b      	movs	r0, #11
 8015b9e:	4770      	bx	lr

08015ba0 <rcl_node_resolve_name>:
 8015ba0:	b082      	sub	sp, #8
 8015ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ba6:	b091      	sub	sp, #68	@ 0x44
 8015ba8:	ac1a      	add	r4, sp, #104	@ 0x68
 8015baa:	e884 000c 	stmia.w	r4, {r2, r3}
 8015bae:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8015bb2:	2800      	cmp	r0, #0
 8015bb4:	d03b      	beq.n	8015c2e <rcl_node_resolve_name+0x8e>
 8015bb6:	460c      	mov	r4, r1
 8015bb8:	4605      	mov	r5, r0
 8015bba:	f7ff ffb7 	bl	8015b2c <rcl_node_get_options>
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	d037      	beq.n	8015c32 <rcl_node_resolve_name+0x92>
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f7ff ffa2 	bl	8015b0c <rcl_node_get_name>
 8015bc8:	4606      	mov	r6, r0
 8015bca:	4628      	mov	r0, r5
 8015bcc:	f7ff ffa6 	bl	8015b1c <rcl_node_get_namespace>
 8015bd0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8015bd4:	4681      	mov	r9, r0
 8015bd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015bda:	ad0b      	add	r5, sp, #44	@ 0x2c
 8015bdc:	46ac      	mov	ip, r5
 8015bde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015be2:	f8de 3000 	ldr.w	r3, [lr]
 8015be6:	f8cc 3000 	str.w	r3, [ip]
 8015bea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015bec:	b1fb      	cbz	r3, 8015c2e <rcl_node_resolve_name+0x8e>
 8015bee:	468a      	mov	sl, r1
 8015bf0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8015bf4:	f002 f934 	bl	8017e60 <rcutils_get_zero_initialized_string_map>
 8015bf8:	ab10      	add	r3, sp, #64	@ 0x40
 8015bfa:	9008      	str	r0, [sp, #32]
 8015bfc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015c00:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015c04:	2100      	movs	r1, #0
 8015c06:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015c0a:	a808      	add	r0, sp, #32
 8015c0c:	f002 f9a0 	bl	8017f50 <rcutils_string_map_init>
 8015c10:	4607      	mov	r7, r0
 8015c12:	b180      	cbz	r0, 8015c36 <rcl_node_resolve_name+0x96>
 8015c14:	f7fb fdb6 	bl	8011784 <rcutils_get_error_string>
 8015c18:	f7fb fdca 	bl	80117b0 <rcutils_reset_error>
 8015c1c:	2f0a      	cmp	r7, #10
 8015c1e:	bf18      	it	ne
 8015c20:	2701      	movne	r7, #1
 8015c22:	4638      	mov	r0, r7
 8015c24:	b011      	add	sp, #68	@ 0x44
 8015c26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c2a:	b002      	add	sp, #8
 8015c2c:	4770      	bx	lr
 8015c2e:	270b      	movs	r7, #11
 8015c30:	e7f7      	b.n	8015c22 <rcl_node_resolve_name+0x82>
 8015c32:	2701      	movs	r7, #1
 8015c34:	e7f5      	b.n	8015c22 <rcl_node_resolve_name+0x82>
 8015c36:	9009      	str	r0, [sp, #36]	@ 0x24
 8015c38:	9007      	str	r0, [sp, #28]
 8015c3a:	a808      	add	r0, sp, #32
 8015c3c:	f005 fce8 	bl	801b610 <rcl_get_default_topic_name_substitutions>
 8015c40:	4607      	mov	r7, r0
 8015c42:	b1a8      	cbz	r0, 8015c70 <rcl_node_resolve_name+0xd0>
 8015c44:	280a      	cmp	r0, #10
 8015c46:	9c07      	ldr	r4, [sp, #28]
 8015c48:	d000      	beq.n	8015c4c <rcl_node_resolve_name+0xac>
 8015c4a:	2701      	movs	r7, #1
 8015c4c:	a808      	add	r0, sp, #32
 8015c4e:	f002 f9bf 	bl	8017fd0 <rcutils_string_map_fini>
 8015c52:	2800      	cmp	r0, #0
 8015c54:	d13d      	bne.n	8015cd2 <rcl_node_resolve_name+0x132>
 8015c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c58:	4659      	mov	r1, fp
 8015c5a:	47d0      	blx	sl
 8015c5c:	4659      	mov	r1, fp
 8015c5e:	4620      	mov	r0, r4
 8015c60:	47d0      	blx	sl
 8015c62:	f1b8 0f00 	cmp.w	r8, #0
 8015c66:	d0dc      	beq.n	8015c22 <rcl_node_resolve_name+0x82>
 8015c68:	2f67      	cmp	r7, #103	@ 0x67
 8015c6a:	bf08      	it	eq
 8015c6c:	2768      	moveq	r7, #104	@ 0x68
 8015c6e:	e7d8      	b.n	8015c22 <rcl_node_resolve_name+0x82>
 8015c70:	ab09      	add	r3, sp, #36	@ 0x24
 8015c72:	9305      	str	r3, [sp, #20]
 8015c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c76:	46ec      	mov	ip, sp
 8015c78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c7c:	682b      	ldr	r3, [r5, #0]
 8015c7e:	f8cc 3000 	str.w	r3, [ip]
 8015c82:	464a      	mov	r2, r9
 8015c84:	4631      	mov	r1, r6
 8015c86:	4620      	mov	r0, r4
 8015c88:	ab08      	add	r3, sp, #32
 8015c8a:	f005 fb63 	bl	801b354 <rcl_expand_topic_name>
 8015c8e:	4607      	mov	r7, r0
 8015c90:	b9b8      	cbnz	r0, 8015cc2 <rcl_node_resolve_name+0x122>
 8015c92:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8015c94:	9009      	str	r0, [sp, #36]	@ 0x24
 8015c96:	4602      	mov	r2, r0
 8015c98:	a90a      	add	r1, sp, #40	@ 0x28
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	f002 fadc 	bl	8018258 <rmw_validate_full_topic_name>
 8015ca0:	b988      	cbnz	r0, 8015cc6 <rcl_node_resolve_name+0x126>
 8015ca2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8015ca4:	b9d5      	cbnz	r5, 8015cdc <rcl_node_resolve_name+0x13c>
 8015ca6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015ca8:	a808      	add	r0, sp, #32
 8015caa:	601c      	str	r4, [r3, #0]
 8015cac:	f002 f990 	bl	8017fd0 <rcutils_string_map_fini>
 8015cb0:	4607      	mov	r7, r0
 8015cb2:	b1a8      	cbz	r0, 8015ce0 <rcl_node_resolve_name+0x140>
 8015cb4:	f7fb fd66 	bl	8011784 <rcutils_get_error_string>
 8015cb8:	462c      	mov	r4, r5
 8015cba:	f7fb fd79 	bl	80117b0 <rcutils_reset_error>
 8015cbe:	2701      	movs	r7, #1
 8015cc0:	e7c9      	b.n	8015c56 <rcl_node_resolve_name+0xb6>
 8015cc2:	9c07      	ldr	r4, [sp, #28]
 8015cc4:	e7c2      	b.n	8015c4c <rcl_node_resolve_name+0xac>
 8015cc6:	f7fb fd5d 	bl	8011784 <rcutils_get_error_string>
 8015cca:	2701      	movs	r7, #1
 8015ccc:	f7fb fd70 	bl	80117b0 <rcutils_reset_error>
 8015cd0:	e7bc      	b.n	8015c4c <rcl_node_resolve_name+0xac>
 8015cd2:	f7fb fd57 	bl	8011784 <rcutils_get_error_string>
 8015cd6:	f7fb fd6b 	bl	80117b0 <rcutils_reset_error>
 8015cda:	e7bc      	b.n	8015c56 <rcl_node_resolve_name+0xb6>
 8015cdc:	2767      	movs	r7, #103	@ 0x67
 8015cde:	e7b5      	b.n	8015c4c <rcl_node_resolve_name+0xac>
 8015ce0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015ce2:	4659      	mov	r1, fp
 8015ce4:	47d0      	blx	sl
 8015ce6:	4659      	mov	r1, fp
 8015ce8:	4638      	mov	r0, r7
 8015cea:	47d0      	blx	sl
 8015cec:	e799      	b.n	8015c22 <rcl_node_resolve_name+0x82>
 8015cee:	bf00      	nop

08015cf0 <rcl_service_get_rmw_handle>:
 8015cf0:	b118      	cbz	r0, 8015cfa <rcl_service_get_rmw_handle+0xa>
 8015cf2:	6800      	ldr	r0, [r0, #0]
 8015cf4:	b108      	cbz	r0, 8015cfa <rcl_service_get_rmw_handle+0xa>
 8015cf6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015cfa:	4770      	bx	lr

08015cfc <rcl_take_request>:
 8015cfc:	b570      	push	{r4, r5, r6, lr}
 8015cfe:	468e      	mov	lr, r1
 8015d00:	460c      	mov	r4, r1
 8015d02:	4616      	mov	r6, r2
 8015d04:	4605      	mov	r5, r0
 8015d06:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d0a:	b08c      	sub	sp, #48	@ 0x30
 8015d0c:	f10d 0c18 	add.w	ip, sp, #24
 8015d10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d14:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015d18:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015d1c:	b30d      	cbz	r5, 8015d62 <rcl_take_request+0x66>
 8015d1e:	682b      	ldr	r3, [r5, #0]
 8015d20:	b1fb      	cbz	r3, 8015d62 <rcl_take_request+0x66>
 8015d22:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8015d26:	b1e0      	cbz	r0, 8015d62 <rcl_take_request+0x66>
 8015d28:	b336      	cbz	r6, 8015d78 <rcl_take_request+0x7c>
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	f88d 3007 	strb.w	r3, [sp, #7]
 8015d30:	4632      	mov	r2, r6
 8015d32:	f10d 0307 	add.w	r3, sp, #7
 8015d36:	a902      	add	r1, sp, #8
 8015d38:	f003 f89a 	bl	8018e70 <rmw_take_request>
 8015d3c:	4605      	mov	r5, r0
 8015d3e:	b198      	cbz	r0, 8015d68 <rcl_take_request+0x6c>
 8015d40:	280a      	cmp	r0, #10
 8015d42:	bf18      	it	ne
 8015d44:	2501      	movne	r5, #1
 8015d46:	f10d 0e18 	add.w	lr, sp, #24
 8015d4a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015d4e:	46a4      	mov	ip, r4
 8015d50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d54:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015d58:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015d5c:	4628      	mov	r0, r5
 8015d5e:	b00c      	add	sp, #48	@ 0x30
 8015d60:	bd70      	pop	{r4, r5, r6, pc}
 8015d62:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8015d66:	e7ee      	b.n	8015d46 <rcl_take_request+0x4a>
 8015d68:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015d6c:	f240 2359 	movw	r3, #601	@ 0x259
 8015d70:	2a00      	cmp	r2, #0
 8015d72:	bf08      	it	eq
 8015d74:	461d      	moveq	r5, r3
 8015d76:	e7e6      	b.n	8015d46 <rcl_take_request+0x4a>
 8015d78:	250b      	movs	r5, #11
 8015d7a:	e7e4      	b.n	8015d46 <rcl_take_request+0x4a>

08015d7c <rcl_send_response>:
 8015d7c:	b170      	cbz	r0, 8015d9c <rcl_send_response+0x20>
 8015d7e:	6800      	ldr	r0, [r0, #0]
 8015d80:	b160      	cbz	r0, 8015d9c <rcl_send_response+0x20>
 8015d82:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015d86:	b148      	cbz	r0, 8015d9c <rcl_send_response+0x20>
 8015d88:	b159      	cbz	r1, 8015da2 <rcl_send_response+0x26>
 8015d8a:	b510      	push	{r4, lr}
 8015d8c:	b15a      	cbz	r2, 8015da6 <rcl_send_response+0x2a>
 8015d8e:	f003 f8cd 	bl	8018f2c <rmw_send_response>
 8015d92:	b110      	cbz	r0, 8015d9a <rcl_send_response+0x1e>
 8015d94:	2802      	cmp	r0, #2
 8015d96:	bf18      	it	ne
 8015d98:	2001      	movne	r0, #1
 8015d9a:	bd10      	pop	{r4, pc}
 8015d9c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8015da0:	4770      	bx	lr
 8015da2:	200b      	movs	r0, #11
 8015da4:	4770      	bx	lr
 8015da6:	200b      	movs	r0, #11
 8015da8:	bd10      	pop	{r4, pc}
 8015daa:	bf00      	nop

08015dac <rcl_service_is_valid>:
 8015dac:	b130      	cbz	r0, 8015dbc <rcl_service_is_valid+0x10>
 8015dae:	6800      	ldr	r0, [r0, #0]
 8015db0:	b120      	cbz	r0, 8015dbc <rcl_service_is_valid+0x10>
 8015db2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8015db6:	3800      	subs	r0, #0
 8015db8:	bf18      	it	ne
 8015dba:	2001      	movne	r0, #1
 8015dbc:	4770      	bx	lr
 8015dbe:	bf00      	nop

08015dc0 <rcl_get_zero_initialized_subscription>:
 8015dc0:	4b01      	ldr	r3, [pc, #4]	@ (8015dc8 <rcl_get_zero_initialized_subscription+0x8>)
 8015dc2:	6818      	ldr	r0, [r3, #0]
 8015dc4:	4770      	bx	lr
 8015dc6:	bf00      	nop
 8015dc8:	0801dd48 	.word	0x0801dd48

08015dcc <rcl_subscription_init>:
 8015dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015dd0:	b089      	sub	sp, #36	@ 0x24
 8015dd2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015dd4:	b1d6      	cbz	r6, 8015e0c <rcl_subscription_init+0x40>
 8015dd6:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8015dda:	4604      	mov	r4, r0
 8015ddc:	4648      	mov	r0, r9
 8015dde:	460d      	mov	r5, r1
 8015de0:	4690      	mov	r8, r2
 8015de2:	461f      	mov	r7, r3
 8015de4:	f7fb fcc0 	bl	8011768 <rcutils_allocator_is_valid>
 8015de8:	b180      	cbz	r0, 8015e0c <rcl_subscription_init+0x40>
 8015dea:	b17c      	cbz	r4, 8015e0c <rcl_subscription_init+0x40>
 8015dec:	4628      	mov	r0, r5
 8015dee:	f7ff fe83 	bl	8015af8 <rcl_node_is_valid>
 8015df2:	2800      	cmp	r0, #0
 8015df4:	d054      	beq.n	8015ea0 <rcl_subscription_init+0xd4>
 8015df6:	f1b8 0f00 	cmp.w	r8, #0
 8015dfa:	d007      	beq.n	8015e0c <rcl_subscription_init+0x40>
 8015dfc:	b137      	cbz	r7, 8015e0c <rcl_subscription_init+0x40>
 8015dfe:	6823      	ldr	r3, [r4, #0]
 8015e00:	b14b      	cbz	r3, 8015e16 <rcl_subscription_init+0x4a>
 8015e02:	2764      	movs	r7, #100	@ 0x64
 8015e04:	4638      	mov	r0, r7
 8015e06:	b009      	add	sp, #36	@ 0x24
 8015e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e0c:	270b      	movs	r7, #11
 8015e0e:	4638      	mov	r0, r7
 8015e10:	b009      	add	sp, #36	@ 0x24
 8015e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e16:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8015e1a:	aa07      	add	r2, sp, #28
 8015e1c:	9205      	str	r2, [sp, #20]
 8015e1e:	9307      	str	r3, [sp, #28]
 8015e20:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8015e24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015e28:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015e2c:	4639      	mov	r1, r7
 8015e2e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015e32:	4628      	mov	r0, r5
 8015e34:	f7ff feb4 	bl	8015ba0 <rcl_node_resolve_name>
 8015e38:	4607      	mov	r7, r0
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	d15f      	bne.n	8015efe <rcl_subscription_init+0x132>
 8015e3e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8015e42:	21c8      	movs	r1, #200	@ 0xc8
 8015e44:	2001      	movs	r0, #1
 8015e46:	4798      	blx	r3
 8015e48:	6020      	str	r0, [r4, #0]
 8015e4a:	2800      	cmp	r0, #0
 8015e4c:	d05d      	beq.n	8015f0a <rcl_subscription_init+0x13e>
 8015e4e:	4628      	mov	r0, r5
 8015e50:	f7ff fe74 	bl	8015b3c <rcl_node_get_rmw_handle>
 8015e54:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8015e58:	9300      	str	r3, [sp, #0]
 8015e5a:	9a07      	ldr	r2, [sp, #28]
 8015e5c:	6827      	ldr	r7, [r4, #0]
 8015e5e:	4641      	mov	r1, r8
 8015e60:	4633      	mov	r3, r6
 8015e62:	f003 f94d 	bl	8019100 <rmw_create_subscription>
 8015e66:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8015e6a:	6827      	ldr	r7, [r4, #0]
 8015e6c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8015e70:	b348      	cbz	r0, 8015ec6 <rcl_subscription_init+0xfa>
 8015e72:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8015e76:	f003 fa25 	bl	80192c4 <rmw_subscription_get_actual_qos>
 8015e7a:	4607      	mov	r7, r0
 8015e7c:	b9a8      	cbnz	r0, 8015eaa <rcl_subscription_init+0xde>
 8015e7e:	6820      	ldr	r0, [r4, #0]
 8015e80:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8015e84:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8015e88:	2270      	movs	r2, #112	@ 0x70
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	f006 fb3b 	bl	801c506 <memcpy>
 8015e90:	9807      	ldr	r0, [sp, #28]
 8015e92:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015e94:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015e96:	4798      	blx	r3
 8015e98:	4638      	mov	r0, r7
 8015e9a:	b009      	add	sp, #36	@ 0x24
 8015e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ea0:	27c8      	movs	r7, #200	@ 0xc8
 8015ea2:	4638      	mov	r0, r7
 8015ea4:	b009      	add	sp, #36	@ 0x24
 8015ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015eaa:	6827      	ldr	r7, [r4, #0]
 8015eac:	b32f      	cbz	r7, 8015efa <rcl_subscription_init+0x12e>
 8015eae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8015eb2:	b14b      	cbz	r3, 8015ec8 <rcl_subscription_init+0xfc>
 8015eb4:	4628      	mov	r0, r5
 8015eb6:	f7ff fe41 	bl	8015b3c <rcl_node_get_rmw_handle>
 8015eba:	6823      	ldr	r3, [r4, #0]
 8015ebc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8015ec0:	f003 fa10 	bl	80192e4 <rmw_destroy_subscription>
 8015ec4:	6827      	ldr	r7, [r4, #0]
 8015ec6:	b197      	cbz	r7, 8015eee <rcl_subscription_init+0x122>
 8015ec8:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8015ecc:	4628      	mov	r0, r5
 8015ece:	f7fb fc4b 	bl	8011768 <rcutils_allocator_is_valid>
 8015ed2:	b158      	cbz	r0, 8015eec <rcl_subscription_init+0x120>
 8015ed4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015ed6:	b148      	cbz	r0, 8015eec <rcl_subscription_init+0x120>
 8015ed8:	4629      	mov	r1, r5
 8015eda:	f002 f911 	bl	8018100 <rmw_subscription_content_filter_options_fini>
 8015ede:	4605      	mov	r5, r0
 8015ee0:	b9b8      	cbnz	r0, 8015f12 <rcl_subscription_init+0x146>
 8015ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ee4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015ee6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015ee8:	4798      	blx	r3
 8015eea:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8015eec:	6827      	ldr	r7, [r4, #0]
 8015eee:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015ef0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015ef2:	4638      	mov	r0, r7
 8015ef4:	4798      	blx	r3
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	6023      	str	r3, [r4, #0]
 8015efa:	2701      	movs	r7, #1
 8015efc:	e7c8      	b.n	8015e90 <rcl_subscription_init+0xc4>
 8015efe:	2867      	cmp	r0, #103	@ 0x67
 8015f00:	d0c6      	beq.n	8015e90 <rcl_subscription_init+0xc4>
 8015f02:	2869      	cmp	r0, #105	@ 0x69
 8015f04:	d003      	beq.n	8015f0e <rcl_subscription_init+0x142>
 8015f06:	280a      	cmp	r0, #10
 8015f08:	d1f7      	bne.n	8015efa <rcl_subscription_init+0x12e>
 8015f0a:	270a      	movs	r7, #10
 8015f0c:	e7c0      	b.n	8015e90 <rcl_subscription_init+0xc4>
 8015f0e:	2767      	movs	r7, #103	@ 0x67
 8015f10:	e7be      	b.n	8015e90 <rcl_subscription_init+0xc4>
 8015f12:	f7ff fa0f 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8015f16:	6827      	ldr	r7, [r4, #0]
 8015f18:	e7e9      	b.n	8015eee <rcl_subscription_init+0x122>
 8015f1a:	bf00      	nop

08015f1c <rcl_subscription_get_default_options>:
 8015f1c:	b570      	push	{r4, r5, r6, lr}
 8015f1e:	4d14      	ldr	r5, [pc, #80]	@ (8015f70 <rcl_subscription_get_default_options+0x54>)
 8015f20:	4914      	ldr	r1, [pc, #80]	@ (8015f74 <rcl_subscription_get_default_options+0x58>)
 8015f22:	b08a      	sub	sp, #40	@ 0x28
 8015f24:	4604      	mov	r4, r0
 8015f26:	2250      	movs	r2, #80	@ 0x50
 8015f28:	4628      	mov	r0, r5
 8015f2a:	f006 faec 	bl	801c506 <memcpy>
 8015f2e:	a804      	add	r0, sp, #16
 8015f30:	f7fb fc0c 	bl	801174c <rcutils_get_default_allocator>
 8015f34:	f10d 0c10 	add.w	ip, sp, #16
 8015f38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f3c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8015f40:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015f44:	466e      	mov	r6, sp
 8015f46:	f8dc 3000 	ldr.w	r3, [ip]
 8015f4a:	f8ce 3000 	str.w	r3, [lr]
 8015f4e:	4630      	mov	r0, r6
 8015f50:	f002 f8f0 	bl	8018134 <rmw_get_default_subscription_options>
 8015f54:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015f58:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8015f5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015f60:	2270      	movs	r2, #112	@ 0x70
 8015f62:	4629      	mov	r1, r5
 8015f64:	4620      	mov	r0, r4
 8015f66:	f006 face 	bl	801c506 <memcpy>
 8015f6a:	4620      	mov	r0, r4
 8015f6c:	b00a      	add	sp, #40	@ 0x28
 8015f6e:	bd70      	pop	{r4, r5, r6, pc}
 8015f70:	2000e598 	.word	0x2000e598
 8015f74:	0801dd50 	.word	0x0801dd50

08015f78 <rcl_take>:
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d04a      	beq.n	8016012 <rcl_take+0x9a>
 8015f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f80:	4604      	mov	r4, r0
 8015f82:	6800      	ldr	r0, [r0, #0]
 8015f84:	b0a4      	sub	sp, #144	@ 0x90
 8015f86:	2800      	cmp	r0, #0
 8015f88:	d03b      	beq.n	8016002 <rcl_take+0x8a>
 8015f8a:	461f      	mov	r7, r3
 8015f8c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d036      	beq.n	8016002 <rcl_take+0x8a>
 8015f94:	460e      	mov	r6, r1
 8015f96:	2900      	cmp	r1, #0
 8015f98:	d039      	beq.n	801600e <rcl_take+0x96>
 8015f9a:	4615      	mov	r5, r2
 8015f9c:	2a00      	cmp	r2, #0
 8015f9e:	d03c      	beq.n	801601a <rcl_take+0xa2>
 8015fa0:	a802      	add	r0, sp, #8
 8015fa2:	f002 f951 	bl	8018248 <rmw_get_zero_initialized_message_info>
 8015fa6:	f10d 0c08 	add.w	ip, sp, #8
 8015faa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015fae:	46ae      	mov	lr, r5
 8015fb0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015fb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015fb8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015fbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015fc0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015fc4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8015fc8:	f04f 0800 	mov.w	r8, #0
 8015fcc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8015fd0:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8015fd4:	6822      	ldr	r2, [r4, #0]
 8015fd6:	462b      	mov	r3, r5
 8015fd8:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8015fdc:	9700      	str	r7, [sp, #0]
 8015fde:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8015fe2:	4631      	mov	r1, r6
 8015fe4:	f003 f9de 	bl	80193a4 <rmw_take_with_info>
 8015fe8:	4603      	mov	r3, r0
 8015fea:	b9c0      	cbnz	r0, 801601e <rcl_take+0xa6>
 8015fec:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8015ff0:	f240 1291 	movw	r2, #401	@ 0x191
 8015ff4:	2900      	cmp	r1, #0
 8015ff6:	bf08      	it	eq
 8015ff8:	4613      	moveq	r3, r2
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	b024      	add	sp, #144	@ 0x90
 8015ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016002:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016006:	4618      	mov	r0, r3
 8016008:	b024      	add	sp, #144	@ 0x90
 801600a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801600e:	230b      	movs	r3, #11
 8016010:	e7f3      	b.n	8015ffa <rcl_take+0x82>
 8016012:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016016:	4618      	mov	r0, r3
 8016018:	4770      	bx	lr
 801601a:	ad14      	add	r5, sp, #80	@ 0x50
 801601c:	e7c0      	b.n	8015fa0 <rcl_take+0x28>
 801601e:	f7ff f989 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 8016022:	4603      	mov	r3, r0
 8016024:	e7e9      	b.n	8015ffa <rcl_take+0x82>
 8016026:	bf00      	nop

08016028 <rcl_subscription_get_rmw_handle>:
 8016028:	b118      	cbz	r0, 8016032 <rcl_subscription_get_rmw_handle+0xa>
 801602a:	6800      	ldr	r0, [r0, #0]
 801602c:	b108      	cbz	r0, 8016032 <rcl_subscription_get_rmw_handle+0xa>
 801602e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016032:	4770      	bx	lr

08016034 <rcl_subscription_is_valid>:
 8016034:	b130      	cbz	r0, 8016044 <rcl_subscription_is_valid+0x10>
 8016036:	6800      	ldr	r0, [r0, #0]
 8016038:	b120      	cbz	r0, 8016044 <rcl_subscription_is_valid+0x10>
 801603a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801603e:	3800      	subs	r0, #0
 8016040:	bf18      	it	ne
 8016042:	2001      	movne	r0, #1
 8016044:	4770      	bx	lr
 8016046:	bf00      	nop

08016048 <rcl_get_system_time>:
 8016048:	4608      	mov	r0, r1
 801604a:	f7fb bbcd 	b.w	80117e8 <rcutils_system_time_now>
 801604e:	bf00      	nop

08016050 <rcl_get_steady_time>:
 8016050:	4608      	mov	r0, r1
 8016052:	f7fb bbf1 	b.w	8011838 <rcutils_steady_time_now>
 8016056:	bf00      	nop

08016058 <rcl_get_ros_time>:
 8016058:	7a03      	ldrb	r3, [r0, #8]
 801605a:	b510      	push	{r4, lr}
 801605c:	460c      	mov	r4, r1
 801605e:	b133      	cbz	r3, 801606e <rcl_get_ros_time+0x16>
 8016060:	2105      	movs	r1, #5
 8016062:	f001 fce9 	bl	8017a38 <__atomic_load_8>
 8016066:	e9c4 0100 	strd	r0, r1, [r4]
 801606a:	2000      	movs	r0, #0
 801606c:	bd10      	pop	{r4, pc}
 801606e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016072:	4608      	mov	r0, r1
 8016074:	f7fb bbb8 	b.w	80117e8 <rcutils_system_time_now>

08016078 <rcl_clock_init>:
 8016078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801607a:	4605      	mov	r5, r0
 801607c:	4610      	mov	r0, r2
 801607e:	4614      	mov	r4, r2
 8016080:	460e      	mov	r6, r1
 8016082:	f7fb fb71 	bl	8011768 <rcutils_allocator_is_valid>
 8016086:	b128      	cbz	r0, 8016094 <rcl_clock_init+0x1c>
 8016088:	2d03      	cmp	r5, #3
 801608a:	d803      	bhi.n	8016094 <rcl_clock_init+0x1c>
 801608c:	e8df f005 	tbb	[pc, r5]
 8016090:	06532e1d 	.word	0x06532e1d
 8016094:	f04f 0c0b 	mov.w	ip, #11
 8016098:	4660      	mov	r0, ip
 801609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801609c:	2e00      	cmp	r6, #0
 801609e:	d0f9      	beq.n	8016094 <rcl_clock_init+0x1c>
 80160a0:	2c00      	cmp	r4, #0
 80160a2:	d0f7      	beq.n	8016094 <rcl_clock_init+0x1c>
 80160a4:	2300      	movs	r3, #0
 80160a6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80160aa:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8016160 <rcl_clock_init+0xe8>
 80160ae:	6133      	str	r3, [r6, #16]
 80160b0:	f106 0514 	add.w	r5, r6, #20
 80160b4:	469c      	mov	ip, r3
 80160b6:	2703      	movs	r7, #3
 80160b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80160bc:	6823      	ldr	r3, [r4, #0]
 80160be:	602b      	str	r3, [r5, #0]
 80160c0:	7037      	strb	r7, [r6, #0]
 80160c2:	f8c6 e00c 	str.w	lr, [r6, #12]
 80160c6:	4660      	mov	r0, ip
 80160c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ca:	2e00      	cmp	r6, #0
 80160cc:	d0e2      	beq.n	8016094 <rcl_clock_init+0x1c>
 80160ce:	2300      	movs	r3, #0
 80160d0:	7033      	strb	r3, [r6, #0]
 80160d2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80160d6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80160da:	469c      	mov	ip, r3
 80160dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160de:	f106 0514 	add.w	r5, r6, #20
 80160e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80160e4:	6823      	ldr	r3, [r4, #0]
 80160e6:	602b      	str	r3, [r5, #0]
 80160e8:	4660      	mov	r0, ip
 80160ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ec:	2e00      	cmp	r6, #0
 80160ee:	d0d1      	beq.n	8016094 <rcl_clock_init+0x1c>
 80160f0:	2c00      	cmp	r4, #0
 80160f2:	d0cf      	beq.n	8016094 <rcl_clock_init+0x1c>
 80160f4:	2700      	movs	r7, #0
 80160f6:	7037      	strb	r7, [r6, #0]
 80160f8:	46a4      	mov	ip, r4
 80160fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80160fe:	f106 0514 	add.w	r5, r6, #20
 8016102:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8016106:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801610a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801610c:	f8dc 3000 	ldr.w	r3, [ip]
 8016110:	602b      	str	r3, [r5, #0]
 8016112:	6921      	ldr	r1, [r4, #16]
 8016114:	6823      	ldr	r3, [r4, #0]
 8016116:	2010      	movs	r0, #16
 8016118:	4798      	blx	r3
 801611a:	6130      	str	r0, [r6, #16]
 801611c:	b1d0      	cbz	r0, 8016154 <rcl_clock_init+0xdc>
 801611e:	2200      	movs	r2, #0
 8016120:	2300      	movs	r3, #0
 8016122:	e9c0 2300 	strd	r2, r3, [r0]
 8016126:	2301      	movs	r3, #1
 8016128:	7207      	strb	r7, [r0, #8]
 801612a:	4a0c      	ldr	r2, [pc, #48]	@ (801615c <rcl_clock_init+0xe4>)
 801612c:	7033      	strb	r3, [r6, #0]
 801612e:	46bc      	mov	ip, r7
 8016130:	60f2      	str	r2, [r6, #12]
 8016132:	4660      	mov	r0, ip
 8016134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016136:	2e00      	cmp	r6, #0
 8016138:	d0ac      	beq.n	8016094 <rcl_clock_init+0x1c>
 801613a:	2c00      	cmp	r4, #0
 801613c:	d0aa      	beq.n	8016094 <rcl_clock_init+0x1c>
 801613e:	2300      	movs	r3, #0
 8016140:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016144:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8016164 <rcl_clock_init+0xec>
 8016148:	6133      	str	r3, [r6, #16]
 801614a:	f106 0514 	add.w	r5, r6, #20
 801614e:	469c      	mov	ip, r3
 8016150:	2702      	movs	r7, #2
 8016152:	e7b1      	b.n	80160b8 <rcl_clock_init+0x40>
 8016154:	f04f 0c0a 	mov.w	ip, #10
 8016158:	e79e      	b.n	8016098 <rcl_clock_init+0x20>
 801615a:	bf00      	nop
 801615c:	08016059 	.word	0x08016059
 8016160:	08016051 	.word	0x08016051
 8016164:	08016049 	.word	0x08016049

08016168 <rcl_clock_get_now>:
 8016168:	b140      	cbz	r0, 801617c <rcl_clock_get_now+0x14>
 801616a:	b139      	cbz	r1, 801617c <rcl_clock_get_now+0x14>
 801616c:	7803      	ldrb	r3, [r0, #0]
 801616e:	b11b      	cbz	r3, 8016178 <rcl_clock_get_now+0x10>
 8016170:	68c3      	ldr	r3, [r0, #12]
 8016172:	b10b      	cbz	r3, 8016178 <rcl_clock_get_now+0x10>
 8016174:	6900      	ldr	r0, [r0, #16]
 8016176:	4718      	bx	r3
 8016178:	2001      	movs	r0, #1
 801617a:	4770      	bx	lr
 801617c:	200b      	movs	r0, #11
 801617e:	4770      	bx	lr

08016180 <rcl_timer_call>:
 8016180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016184:	b087      	sub	sp, #28
 8016186:	2800      	cmp	r0, #0
 8016188:	d06d      	beq.n	8016266 <rcl_timer_call+0xe6>
 801618a:	6803      	ldr	r3, [r0, #0]
 801618c:	4604      	mov	r4, r0
 801618e:	2b00      	cmp	r3, #0
 8016190:	d063      	beq.n	801625a <rcl_timer_call+0xda>
 8016192:	f3bf 8f5b 	dmb	ish
 8016196:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801619a:	f3bf 8f5b 	dmb	ish
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d150      	bne.n	8016244 <rcl_timer_call+0xc4>
 80161a2:	6803      	ldr	r3, [r0, #0]
 80161a4:	a904      	add	r1, sp, #16
 80161a6:	6818      	ldr	r0, [r3, #0]
 80161a8:	f7ff ffde 	bl	8016168 <rcl_clock_get_now>
 80161ac:	4605      	mov	r5, r0
 80161ae:	2800      	cmp	r0, #0
 80161b0:	d14a      	bne.n	8016248 <rcl_timer_call+0xc8>
 80161b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	db4a      	blt.n	8016250 <rcl_timer_call+0xd0>
 80161ba:	6820      	ldr	r0, [r4, #0]
 80161bc:	f04f 0a05 	mov.w	sl, #5
 80161c0:	f8cd a000 	str.w	sl, [sp]
 80161c4:	3020      	adds	r0, #32
 80161c6:	f001 fca3 	bl	8017b10 <__atomic_exchange_8>
 80161ca:	6823      	ldr	r3, [r4, #0]
 80161cc:	f3bf 8f5b 	dmb	ish
 80161d0:	4680      	mov	r8, r0
 80161d2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80161d6:	f3bf 8f5b 	dmb	ish
 80161da:	6820      	ldr	r0, [r4, #0]
 80161dc:	4689      	mov	r9, r1
 80161de:	3028      	adds	r0, #40	@ 0x28
 80161e0:	4651      	mov	r1, sl
 80161e2:	f001 fc29 	bl	8017a38 <__atomic_load_8>
 80161e6:	4606      	mov	r6, r0
 80161e8:	6820      	ldr	r0, [r4, #0]
 80161ea:	460f      	mov	r7, r1
 80161ec:	3018      	adds	r0, #24
 80161ee:	4651      	mov	r1, sl
 80161f0:	f001 fc22 	bl	8017a38 <__atomic_load_8>
 80161f4:	1836      	adds	r6, r6, r0
 80161f6:	4602      	mov	r2, r0
 80161f8:	4682      	mov	sl, r0
 80161fa:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80161fe:	eb47 0701 	adc.w	r7, r7, r1
 8016202:	4286      	cmp	r6, r0
 8016204:	460b      	mov	r3, r1
 8016206:	eb77 010c 	sbcs.w	r1, r7, ip
 801620a:	da04      	bge.n	8016216 <rcl_timer_call+0x96>
 801620c:	ea53 0102 	orrs.w	r1, r3, r2
 8016210:	d12e      	bne.n	8016270 <rcl_timer_call+0xf0>
 8016212:	4606      	mov	r6, r0
 8016214:	4667      	mov	r7, ip
 8016216:	6820      	ldr	r0, [r4, #0]
 8016218:	2105      	movs	r1, #5
 801621a:	4632      	mov	r2, r6
 801621c:	463b      	mov	r3, r7
 801621e:	3028      	adds	r0, #40	@ 0x28
 8016220:	9100      	str	r1, [sp, #0]
 8016222:	f001 fc3f 	bl	8017aa4 <__atomic_store_8>
 8016226:	f1bb 0f00 	cmp.w	fp, #0
 801622a:	d00d      	beq.n	8016248 <rcl_timer_call+0xc8>
 801622c:	9a04      	ldr	r2, [sp, #16]
 801622e:	9b05      	ldr	r3, [sp, #20]
 8016230:	ebb2 0208 	subs.w	r2, r2, r8
 8016234:	4620      	mov	r0, r4
 8016236:	eb63 0309 	sbc.w	r3, r3, r9
 801623a:	47d8      	blx	fp
 801623c:	4628      	mov	r0, r5
 801623e:	b007      	add	sp, #28
 8016240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016244:	f240 3521 	movw	r5, #801	@ 0x321
 8016248:	4628      	mov	r0, r5
 801624a:	b007      	add	sp, #28
 801624c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016250:	2501      	movs	r5, #1
 8016252:	4628      	mov	r0, r5
 8016254:	b007      	add	sp, #28
 8016256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801625a:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801625e:	4628      	mov	r0, r5
 8016260:	b007      	add	sp, #28
 8016262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016266:	250b      	movs	r5, #11
 8016268:	4628      	mov	r0, r5
 801626a:	b007      	add	sp, #28
 801626c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016270:	1b80      	subs	r0, r0, r6
 8016272:	eb6c 0107 	sbc.w	r1, ip, r7
 8016276:	3801      	subs	r0, #1
 8016278:	f161 0100 	sbc.w	r1, r1, #0
 801627c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016280:	f7ea f85e 	bl	8000340 <__aeabi_ldivmod>
 8016284:	9b02      	ldr	r3, [sp, #8]
 8016286:	3001      	adds	r0, #1
 8016288:	f141 0100 	adc.w	r1, r1, #0
 801628c:	fb00 f303 	mul.w	r3, r0, r3
 8016290:	fb01 330a 	mla	r3, r1, sl, r3
 8016294:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016298:	1986      	adds	r6, r0, r6
 801629a:	4453      	add	r3, sl
 801629c:	eb43 0707 	adc.w	r7, r3, r7
 80162a0:	e7b9      	b.n	8016216 <rcl_timer_call+0x96>
 80162a2:	bf00      	nop

080162a4 <rcl_timer_is_ready>:
 80162a4:	b570      	push	{r4, r5, r6, lr}
 80162a6:	b082      	sub	sp, #8
 80162a8:	b378      	cbz	r0, 801630a <rcl_timer_is_ready+0x66>
 80162aa:	6803      	ldr	r3, [r0, #0]
 80162ac:	4604      	mov	r4, r0
 80162ae:	b383      	cbz	r3, 8016312 <rcl_timer_is_ready+0x6e>
 80162b0:	460d      	mov	r5, r1
 80162b2:	b351      	cbz	r1, 801630a <rcl_timer_is_ready+0x66>
 80162b4:	f3bf 8f5b 	dmb	ish
 80162b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80162bc:	f3bf 8f5b 	dmb	ish
 80162c0:	b953      	cbnz	r3, 80162d8 <rcl_timer_is_ready+0x34>
 80162c2:	6803      	ldr	r3, [r0, #0]
 80162c4:	4669      	mov	r1, sp
 80162c6:	6818      	ldr	r0, [r3, #0]
 80162c8:	f7ff ff4e 	bl	8016168 <rcl_clock_get_now>
 80162cc:	4606      	mov	r6, r0
 80162ce:	b140      	cbz	r0, 80162e2 <rcl_timer_is_ready+0x3e>
 80162d0:	f240 3321 	movw	r3, #801	@ 0x321
 80162d4:	4298      	cmp	r0, r3
 80162d6:	d101      	bne.n	80162dc <rcl_timer_is_ready+0x38>
 80162d8:	2600      	movs	r6, #0
 80162da:	702e      	strb	r6, [r5, #0]
 80162dc:	4630      	mov	r0, r6
 80162de:	b002      	add	sp, #8
 80162e0:	bd70      	pop	{r4, r5, r6, pc}
 80162e2:	6820      	ldr	r0, [r4, #0]
 80162e4:	2105      	movs	r1, #5
 80162e6:	3028      	adds	r0, #40	@ 0x28
 80162e8:	f001 fba6 	bl	8017a38 <__atomic_load_8>
 80162ec:	9b00      	ldr	r3, [sp, #0]
 80162ee:	1ac0      	subs	r0, r0, r3
 80162f0:	9b01      	ldr	r3, [sp, #4]
 80162f2:	eb61 0103 	sbc.w	r1, r1, r3
 80162f6:	2801      	cmp	r0, #1
 80162f8:	f171 0300 	sbcs.w	r3, r1, #0
 80162fc:	bfb4      	ite	lt
 80162fe:	2301      	movlt	r3, #1
 8016300:	2300      	movge	r3, #0
 8016302:	4630      	mov	r0, r6
 8016304:	702b      	strb	r3, [r5, #0]
 8016306:	b002      	add	sp, #8
 8016308:	bd70      	pop	{r4, r5, r6, pc}
 801630a:	260b      	movs	r6, #11
 801630c:	4630      	mov	r0, r6
 801630e:	b002      	add	sp, #8
 8016310:	bd70      	pop	{r4, r5, r6, pc}
 8016312:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016316:	e7e1      	b.n	80162dc <rcl_timer_is_ready+0x38>

08016318 <rcl_timer_get_time_until_next_call>:
 8016318:	b570      	push	{r4, r5, r6, lr}
 801631a:	b082      	sub	sp, #8
 801631c:	b330      	cbz	r0, 801636c <rcl_timer_get_time_until_next_call+0x54>
 801631e:	6803      	ldr	r3, [r0, #0]
 8016320:	4604      	mov	r4, r0
 8016322:	b33b      	cbz	r3, 8016374 <rcl_timer_get_time_until_next_call+0x5c>
 8016324:	460d      	mov	r5, r1
 8016326:	b309      	cbz	r1, 801636c <rcl_timer_get_time_until_next_call+0x54>
 8016328:	f3bf 8f5b 	dmb	ish
 801632c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016330:	f3bf 8f5b 	dmb	ish
 8016334:	b9ab      	cbnz	r3, 8016362 <rcl_timer_get_time_until_next_call+0x4a>
 8016336:	6803      	ldr	r3, [r0, #0]
 8016338:	4669      	mov	r1, sp
 801633a:	6818      	ldr	r0, [r3, #0]
 801633c:	f7ff ff14 	bl	8016168 <rcl_clock_get_now>
 8016340:	4606      	mov	r6, r0
 8016342:	b958      	cbnz	r0, 801635c <rcl_timer_get_time_until_next_call+0x44>
 8016344:	6820      	ldr	r0, [r4, #0]
 8016346:	2105      	movs	r1, #5
 8016348:	3028      	adds	r0, #40	@ 0x28
 801634a:	f001 fb75 	bl	8017a38 <__atomic_load_8>
 801634e:	9b00      	ldr	r3, [sp, #0]
 8016350:	1ac0      	subs	r0, r0, r3
 8016352:	9b01      	ldr	r3, [sp, #4]
 8016354:	6028      	str	r0, [r5, #0]
 8016356:	eb61 0103 	sbc.w	r1, r1, r3
 801635a:	6069      	str	r1, [r5, #4]
 801635c:	4630      	mov	r0, r6
 801635e:	b002      	add	sp, #8
 8016360:	bd70      	pop	{r4, r5, r6, pc}
 8016362:	f240 3621 	movw	r6, #801	@ 0x321
 8016366:	4630      	mov	r0, r6
 8016368:	b002      	add	sp, #8
 801636a:	bd70      	pop	{r4, r5, r6, pc}
 801636c:	260b      	movs	r6, #11
 801636e:	4630      	mov	r0, r6
 8016370:	b002      	add	sp, #8
 8016372:	bd70      	pop	{r4, r5, r6, pc}
 8016374:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016378:	e7f0      	b.n	801635c <rcl_timer_get_time_until_next_call+0x44>
 801637a:	bf00      	nop

0801637c <rcl_timer_get_guard_condition>:
 801637c:	b130      	cbz	r0, 801638c <rcl_timer_get_guard_condition+0x10>
 801637e:	6800      	ldr	r0, [r0, #0]
 8016380:	b120      	cbz	r0, 801638c <rcl_timer_get_guard_condition+0x10>
 8016382:	68c3      	ldr	r3, [r0, #12]
 8016384:	b10b      	cbz	r3, 801638a <rcl_timer_get_guard_condition+0xe>
 8016386:	3008      	adds	r0, #8
 8016388:	4770      	bx	lr
 801638a:	4618      	mov	r0, r3
 801638c:	4770      	bx	lr
 801638e:	bf00      	nop

08016390 <rcl_get_zero_initialized_wait_set>:
 8016390:	b510      	push	{r4, lr}
 8016392:	4c08      	ldr	r4, [pc, #32]	@ (80163b4 <rcl_get_zero_initialized_wait_set+0x24>)
 8016394:	4686      	mov	lr, r0
 8016396:	4684      	mov	ip, r0
 8016398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801639a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801639e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80163a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80163a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163aa:	6823      	ldr	r3, [r4, #0]
 80163ac:	f8cc 3000 	str.w	r3, [ip]
 80163b0:	4670      	mov	r0, lr
 80163b2:	bd10      	pop	{r4, pc}
 80163b4:	0801dda0 	.word	0x0801dda0

080163b8 <rcl_wait_set_is_valid>:
 80163b8:	b118      	cbz	r0, 80163c2 <rcl_wait_set_is_valid+0xa>
 80163ba:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80163bc:	3800      	subs	r0, #0
 80163be:	bf18      	it	ne
 80163c0:	2001      	movne	r0, #1
 80163c2:	4770      	bx	lr

080163c4 <rcl_wait_set_fini>:
 80163c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163c8:	b082      	sub	sp, #8
 80163ca:	2800      	cmp	r0, #0
 80163cc:	f000 8095 	beq.w	80164fa <rcl_wait_set_fini+0x136>
 80163d0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80163d2:	4604      	mov	r4, r0
 80163d4:	2e00      	cmp	r6, #0
 80163d6:	f000 808c 	beq.w	80164f2 <rcl_wait_set_fini+0x12e>
 80163da:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80163dc:	f003 f9d0 	bl	8019780 <rmw_destroy_wait_set>
 80163e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80163e2:	1e06      	subs	r6, r0, #0
 80163e4:	bf18      	it	ne
 80163e6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80163ea:	2d00      	cmp	r5, #0
 80163ec:	f000 8081 	beq.w	80164f2 <rcl_wait_set_fini+0x12e>
 80163f0:	6820      	ldr	r0, [r4, #0]
 80163f2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80163f6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80163f8:	2700      	movs	r7, #0
 80163fa:	6067      	str	r7, [r4, #4]
 80163fc:	602f      	str	r7, [r5, #0]
 80163fe:	b120      	cbz	r0, 801640a <rcl_wait_set_fini+0x46>
 8016400:	9101      	str	r1, [sp, #4]
 8016402:	47c0      	blx	r8
 8016404:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016406:	9901      	ldr	r1, [sp, #4]
 8016408:	6027      	str	r7, [r4, #0]
 801640a:	68a8      	ldr	r0, [r5, #8]
 801640c:	b120      	cbz	r0, 8016418 <rcl_wait_set_fini+0x54>
 801640e:	47c0      	blx	r8
 8016410:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016412:	2300      	movs	r3, #0
 8016414:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016418:	68a0      	ldr	r0, [r4, #8]
 801641a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801641c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801641e:	f04f 0800 	mov.w	r8, #0
 8016422:	f8c4 800c 	str.w	r8, [r4, #12]
 8016426:	f8c5 800c 	str.w	r8, [r5, #12]
 801642a:	b128      	cbz	r0, 8016438 <rcl_wait_set_fini+0x74>
 801642c:	47b8      	blx	r7
 801642e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016430:	f8c4 8008 	str.w	r8, [r4, #8]
 8016434:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016436:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016438:	6968      	ldr	r0, [r5, #20]
 801643a:	f04f 0800 	mov.w	r8, #0
 801643e:	f8c5 8010 	str.w	r8, [r5, #16]
 8016442:	b128      	cbz	r0, 8016450 <rcl_wait_set_fini+0x8c>
 8016444:	47b8      	blx	r7
 8016446:	f8c5 8014 	str.w	r8, [r5, #20]
 801644a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801644c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801644e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016450:	6920      	ldr	r0, [r4, #16]
 8016452:	f04f 0800 	mov.w	r8, #0
 8016456:	f8c4 8014 	str.w	r8, [r4, #20]
 801645a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801645e:	b128      	cbz	r0, 801646c <rcl_wait_set_fini+0xa8>
 8016460:	47b8      	blx	r7
 8016462:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016464:	f8c4 8010 	str.w	r8, [r4, #16]
 8016468:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801646a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801646c:	69a0      	ldr	r0, [r4, #24]
 801646e:	f04f 0800 	mov.w	r8, #0
 8016472:	f8c4 801c 	str.w	r8, [r4, #28]
 8016476:	f8c5 8018 	str.w	r8, [r5, #24]
 801647a:	b128      	cbz	r0, 8016488 <rcl_wait_set_fini+0xc4>
 801647c:	9101      	str	r1, [sp, #4]
 801647e:	47b8      	blx	r7
 8016480:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016482:	9901      	ldr	r1, [sp, #4]
 8016484:	f8c4 8018 	str.w	r8, [r4, #24]
 8016488:	6a28      	ldr	r0, [r5, #32]
 801648a:	b120      	cbz	r0, 8016496 <rcl_wait_set_fini+0xd2>
 801648c:	47b8      	blx	r7
 801648e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016490:	2300      	movs	r3, #0
 8016492:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016496:	6a20      	ldr	r0, [r4, #32]
 8016498:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801649c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801649e:	2700      	movs	r7, #0
 80164a0:	6267      	str	r7, [r4, #36]	@ 0x24
 80164a2:	626f      	str	r7, [r5, #36]	@ 0x24
 80164a4:	b120      	cbz	r0, 80164b0 <rcl_wait_set_fini+0xec>
 80164a6:	9101      	str	r1, [sp, #4]
 80164a8:	47c0      	blx	r8
 80164aa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164ac:	9901      	ldr	r1, [sp, #4]
 80164ae:	6227      	str	r7, [r4, #32]
 80164b0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80164b2:	b120      	cbz	r0, 80164be <rcl_wait_set_fini+0xfa>
 80164b4:	47c0      	blx	r8
 80164b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164b8:	2300      	movs	r3, #0
 80164ba:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80164be:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80164c0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80164c4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80164c6:	2700      	movs	r7, #0
 80164c8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80164ca:	632f      	str	r7, [r5, #48]	@ 0x30
 80164cc:	b120      	cbz	r0, 80164d8 <rcl_wait_set_fini+0x114>
 80164ce:	9101      	str	r1, [sp, #4]
 80164d0:	47c0      	blx	r8
 80164d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164d4:	9901      	ldr	r1, [sp, #4]
 80164d6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80164d8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80164da:	b120      	cbz	r0, 80164e6 <rcl_wait_set_fini+0x122>
 80164dc:	47c0      	blx	r8
 80164de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80164e0:	2300      	movs	r3, #0
 80164e2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80164e6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80164e8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80164ea:	4628      	mov	r0, r5
 80164ec:	4798      	blx	r3
 80164ee:	2300      	movs	r3, #0
 80164f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80164f2:	4630      	mov	r0, r6
 80164f4:	b002      	add	sp, #8
 80164f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80164fa:	260b      	movs	r6, #11
 80164fc:	4630      	mov	r0, r6
 80164fe:	b002      	add	sp, #8
 8016500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016504 <rcl_wait_set_add_subscription>:
 8016504:	b318      	cbz	r0, 801654e <rcl_wait_set_add_subscription+0x4a>
 8016506:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016508:	b570      	push	{r4, r5, r6, lr}
 801650a:	4604      	mov	r4, r0
 801650c:	b30b      	cbz	r3, 8016552 <rcl_wait_set_add_subscription+0x4e>
 801650e:	b319      	cbz	r1, 8016558 <rcl_wait_set_add_subscription+0x54>
 8016510:	681d      	ldr	r5, [r3, #0]
 8016512:	6840      	ldr	r0, [r0, #4]
 8016514:	4285      	cmp	r5, r0
 8016516:	d217      	bcs.n	8016548 <rcl_wait_set_add_subscription+0x44>
 8016518:	6820      	ldr	r0, [r4, #0]
 801651a:	1c6e      	adds	r6, r5, #1
 801651c:	601e      	str	r6, [r3, #0]
 801651e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016522:	b102      	cbz	r2, 8016526 <rcl_wait_set_add_subscription+0x22>
 8016524:	6015      	str	r5, [r2, #0]
 8016526:	4608      	mov	r0, r1
 8016528:	f7ff fd7e 	bl	8016028 <rcl_subscription_get_rmw_handle>
 801652c:	b150      	cbz	r0, 8016544 <rcl_wait_set_add_subscription+0x40>
 801652e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016530:	6842      	ldr	r2, [r0, #4]
 8016532:	689b      	ldr	r3, [r3, #8]
 8016534:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016538:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801653a:	6853      	ldr	r3, [r2, #4]
 801653c:	3301      	adds	r3, #1
 801653e:	2000      	movs	r0, #0
 8016540:	6053      	str	r3, [r2, #4]
 8016542:	bd70      	pop	{r4, r5, r6, pc}
 8016544:	2001      	movs	r0, #1
 8016546:	bd70      	pop	{r4, r5, r6, pc}
 8016548:	f240 3086 	movw	r0, #902	@ 0x386
 801654c:	bd70      	pop	{r4, r5, r6, pc}
 801654e:	200b      	movs	r0, #11
 8016550:	4770      	bx	lr
 8016552:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016556:	bd70      	pop	{r4, r5, r6, pc}
 8016558:	200b      	movs	r0, #11
 801655a:	bd70      	pop	{r4, r5, r6, pc}

0801655c <rcl_wait_set_clear>:
 801655c:	2800      	cmp	r0, #0
 801655e:	d073      	beq.n	8016648 <rcl_wait_set_clear+0xec>
 8016560:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016562:	b510      	push	{r4, lr}
 8016564:	4604      	mov	r4, r0
 8016566:	2b00      	cmp	r3, #0
 8016568:	d070      	beq.n	801664c <rcl_wait_set_clear+0xf0>
 801656a:	6800      	ldr	r0, [r0, #0]
 801656c:	b138      	cbz	r0, 801657e <rcl_wait_set_clear+0x22>
 801656e:	6862      	ldr	r2, [r4, #4]
 8016570:	2100      	movs	r1, #0
 8016572:	0092      	lsls	r2, r2, #2
 8016574:	f005 fefe 	bl	801c374 <memset>
 8016578:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801657a:	2200      	movs	r2, #0
 801657c:	601a      	str	r2, [r3, #0]
 801657e:	68a0      	ldr	r0, [r4, #8]
 8016580:	b138      	cbz	r0, 8016592 <rcl_wait_set_clear+0x36>
 8016582:	68e2      	ldr	r2, [r4, #12]
 8016584:	2100      	movs	r1, #0
 8016586:	0092      	lsls	r2, r2, #2
 8016588:	f005 fef4 	bl	801c374 <memset>
 801658c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801658e:	2200      	movs	r2, #0
 8016590:	60da      	str	r2, [r3, #12]
 8016592:	69a0      	ldr	r0, [r4, #24]
 8016594:	b138      	cbz	r0, 80165a6 <rcl_wait_set_clear+0x4a>
 8016596:	69e2      	ldr	r2, [r4, #28]
 8016598:	2100      	movs	r1, #0
 801659a:	0092      	lsls	r2, r2, #2
 801659c:	f005 feea 	bl	801c374 <memset>
 80165a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165a2:	2200      	movs	r2, #0
 80165a4:	619a      	str	r2, [r3, #24]
 80165a6:	6a20      	ldr	r0, [r4, #32]
 80165a8:	b138      	cbz	r0, 80165ba <rcl_wait_set_clear+0x5e>
 80165aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80165ac:	2100      	movs	r1, #0
 80165ae:	0092      	lsls	r2, r2, #2
 80165b0:	f005 fee0 	bl	801c374 <memset>
 80165b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165b6:	2200      	movs	r2, #0
 80165b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80165ba:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80165bc:	b138      	cbz	r0, 80165ce <rcl_wait_set_clear+0x72>
 80165be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80165c0:	2100      	movs	r1, #0
 80165c2:	0092      	lsls	r2, r2, #2
 80165c4:	f005 fed6 	bl	801c374 <memset>
 80165c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165ca:	2200      	movs	r2, #0
 80165cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80165ce:	6920      	ldr	r0, [r4, #16]
 80165d0:	b138      	cbz	r0, 80165e2 <rcl_wait_set_clear+0x86>
 80165d2:	6962      	ldr	r2, [r4, #20]
 80165d4:	2100      	movs	r1, #0
 80165d6:	0092      	lsls	r2, r2, #2
 80165d8:	f005 fecc 	bl	801c374 <memset>
 80165dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165de:	2200      	movs	r2, #0
 80165e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80165e2:	6898      	ldr	r0, [r3, #8]
 80165e4:	b138      	cbz	r0, 80165f6 <rcl_wait_set_clear+0x9a>
 80165e6:	685a      	ldr	r2, [r3, #4]
 80165e8:	2100      	movs	r1, #0
 80165ea:	0092      	lsls	r2, r2, #2
 80165ec:	f005 fec2 	bl	801c374 <memset>
 80165f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165f2:	2200      	movs	r2, #0
 80165f4:	605a      	str	r2, [r3, #4]
 80165f6:	6958      	ldr	r0, [r3, #20]
 80165f8:	b138      	cbz	r0, 801660a <rcl_wait_set_clear+0xae>
 80165fa:	691a      	ldr	r2, [r3, #16]
 80165fc:	2100      	movs	r1, #0
 80165fe:	0092      	lsls	r2, r2, #2
 8016600:	f005 feb8 	bl	801c374 <memset>
 8016604:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016606:	2200      	movs	r2, #0
 8016608:	611a      	str	r2, [r3, #16]
 801660a:	6a18      	ldr	r0, [r3, #32]
 801660c:	b138      	cbz	r0, 801661e <rcl_wait_set_clear+0xc2>
 801660e:	69da      	ldr	r2, [r3, #28]
 8016610:	2100      	movs	r1, #0
 8016612:	0092      	lsls	r2, r2, #2
 8016614:	f005 feae 	bl	801c374 <memset>
 8016618:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801661a:	2200      	movs	r2, #0
 801661c:	61da      	str	r2, [r3, #28]
 801661e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8016620:	b138      	cbz	r0, 8016632 <rcl_wait_set_clear+0xd6>
 8016622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016624:	2100      	movs	r1, #0
 8016626:	0092      	lsls	r2, r2, #2
 8016628:	f005 fea4 	bl	801c374 <memset>
 801662c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801662e:	2200      	movs	r2, #0
 8016630:	629a      	str	r2, [r3, #40]	@ 0x28
 8016632:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016634:	b138      	cbz	r0, 8016646 <rcl_wait_set_clear+0xea>
 8016636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016638:	2100      	movs	r1, #0
 801663a:	0092      	lsls	r2, r2, #2
 801663c:	f005 fe9a 	bl	801c374 <memset>
 8016640:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016642:	2000      	movs	r0, #0
 8016644:	6358      	str	r0, [r3, #52]	@ 0x34
 8016646:	bd10      	pop	{r4, pc}
 8016648:	200b      	movs	r0, #11
 801664a:	4770      	bx	lr
 801664c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016650:	bd10      	pop	{r4, pc}
 8016652:	bf00      	nop

08016654 <rcl_wait_set_resize>:
 8016654:	2800      	cmp	r0, #0
 8016656:	f000 8185 	beq.w	8016964 <rcl_wait_set_resize+0x310>
 801665a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801665e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8016660:	b083      	sub	sp, #12
 8016662:	4605      	mov	r5, r0
 8016664:	2c00      	cmp	r4, #0
 8016666:	f000 817f 	beq.w	8016968 <rcl_wait_set_resize+0x314>
 801666a:	f04f 0900 	mov.w	r9, #0
 801666e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8016672:	461f      	mov	r7, r3
 8016674:	4688      	mov	r8, r1
 8016676:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801667a:	4616      	mov	r6, r2
 801667c:	f8c0 9004 	str.w	r9, [r0, #4]
 8016680:	f8c4 9000 	str.w	r9, [r4]
 8016684:	2900      	cmp	r1, #0
 8016686:	f000 80bd 	beq.w	8016804 <rcl_wait_set_resize+0x1b0>
 801668a:	008c      	lsls	r4, r1, #2
 801668c:	6800      	ldr	r0, [r0, #0]
 801668e:	9301      	str	r3, [sp, #4]
 8016690:	4652      	mov	r2, sl
 8016692:	4621      	mov	r1, r4
 8016694:	4798      	blx	r3
 8016696:	9b01      	ldr	r3, [sp, #4]
 8016698:	6028      	str	r0, [r5, #0]
 801669a:	2800      	cmp	r0, #0
 801669c:	f000 80cb 	beq.w	8016836 <rcl_wait_set_resize+0x1e2>
 80166a0:	4622      	mov	r2, r4
 80166a2:	4649      	mov	r1, r9
 80166a4:	9301      	str	r3, [sp, #4]
 80166a6:	f005 fe65 	bl	801c374 <memset>
 80166aa:	f8c5 8004 	str.w	r8, [r5, #4]
 80166ae:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80166b2:	9b01      	ldr	r3, [sp, #4]
 80166b4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80166b8:	f8c8 9004 	str.w	r9, [r8, #4]
 80166bc:	4652      	mov	r2, sl
 80166be:	4621      	mov	r1, r4
 80166c0:	4798      	blx	r3
 80166c2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80166c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80166c8:	689b      	ldr	r3, [r3, #8]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	f000 80ac 	beq.w	8016828 <rcl_wait_set_resize+0x1d4>
 80166d0:	4622      	mov	r2, r4
 80166d2:	4649      	mov	r1, r9
 80166d4:	4618      	mov	r0, r3
 80166d6:	f005 fe4d 	bl	801c374 <memset>
 80166da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80166dc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80166e0:	f04f 0800 	mov.w	r8, #0
 80166e4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80166e8:	f8c5 800c 	str.w	r8, [r5, #12]
 80166ec:	f8c4 800c 	str.w	r8, [r4, #12]
 80166f0:	2e00      	cmp	r6, #0
 80166f2:	f040 80a4 	bne.w	801683e <rcl_wait_set_resize+0x1ea>
 80166f6:	68a8      	ldr	r0, [r5, #8]
 80166f8:	b128      	cbz	r0, 8016706 <rcl_wait_set_resize+0xb2>
 80166fa:	4649      	mov	r1, r9
 80166fc:	4790      	blx	r2
 80166fe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016700:	60ae      	str	r6, [r5, #8]
 8016702:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016706:	f04f 0800 	mov.w	r8, #0
 801670a:	19f6      	adds	r6, r6, r7
 801670c:	f8c4 8010 	str.w	r8, [r4, #16]
 8016710:	f040 80ac 	bne.w	801686c <rcl_wait_set_resize+0x218>
 8016714:	6960      	ldr	r0, [r4, #20]
 8016716:	b130      	cbz	r0, 8016726 <rcl_wait_set_resize+0xd2>
 8016718:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801671a:	4649      	mov	r1, r9
 801671c:	4798      	blx	r3
 801671e:	6166      	str	r6, [r4, #20]
 8016720:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016722:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016726:	2600      	movs	r6, #0
 8016728:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801672c:	616e      	str	r6, [r5, #20]
 801672e:	6426      	str	r6, [r4, #64]	@ 0x40
 8016730:	2f00      	cmp	r7, #0
 8016732:	f040 80ad 	bne.w	8016890 <rcl_wait_set_resize+0x23c>
 8016736:	6928      	ldr	r0, [r5, #16]
 8016738:	b138      	cbz	r0, 801674a <rcl_wait_set_resize+0xf6>
 801673a:	4649      	mov	r1, r9
 801673c:	47d0      	blx	sl
 801673e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016740:	612f      	str	r7, [r5, #16]
 8016742:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8016746:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801674a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801674c:	2600      	movs	r6, #0
 801674e:	61ee      	str	r6, [r5, #28]
 8016750:	61a6      	str	r6, [r4, #24]
 8016752:	2b00      	cmp	r3, #0
 8016754:	f040 80af 	bne.w	80168b6 <rcl_wait_set_resize+0x262>
 8016758:	69a8      	ldr	r0, [r5, #24]
 801675a:	b120      	cbz	r0, 8016766 <rcl_wait_set_resize+0x112>
 801675c:	4649      	mov	r1, r9
 801675e:	47d0      	blx	sl
 8016760:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016762:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016764:	61ab      	str	r3, [r5, #24]
 8016766:	6a20      	ldr	r0, [r4, #32]
 8016768:	b128      	cbz	r0, 8016776 <rcl_wait_set_resize+0x122>
 801676a:	4649      	mov	r1, r9
 801676c:	47d0      	blx	sl
 801676e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016770:	2300      	movs	r3, #0
 8016772:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8016776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016778:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801677a:	2600      	movs	r6, #0
 801677c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8016780:	626e      	str	r6, [r5, #36]	@ 0x24
 8016782:	6266      	str	r6, [r4, #36]	@ 0x24
 8016784:	2b00      	cmp	r3, #0
 8016786:	f000 80b6 	beq.w	80168f6 <rcl_wait_set_resize+0x2a2>
 801678a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801678e:	6a28      	ldr	r0, [r5, #32]
 8016790:	463a      	mov	r2, r7
 8016792:	4651      	mov	r1, sl
 8016794:	47c8      	blx	r9
 8016796:	6228      	str	r0, [r5, #32]
 8016798:	2800      	cmp	r0, #0
 801679a:	d04c      	beq.n	8016836 <rcl_wait_set_resize+0x1e2>
 801679c:	4652      	mov	r2, sl
 801679e:	4631      	mov	r1, r6
 80167a0:	f005 fde8 	bl	801c374 <memset>
 80167a4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80167a8:	626b      	str	r3, [r5, #36]	@ 0x24
 80167aa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80167ac:	62a6      	str	r6, [r4, #40]	@ 0x28
 80167ae:	463a      	mov	r2, r7
 80167b0:	4651      	mov	r1, sl
 80167b2:	47c8      	blx	r9
 80167b4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80167b6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80167b8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80167ba:	2c00      	cmp	r4, #0
 80167bc:	f000 80f0 	beq.w	80169a0 <rcl_wait_set_resize+0x34c>
 80167c0:	4620      	mov	r0, r4
 80167c2:	4652      	mov	r2, sl
 80167c4:	4631      	mov	r1, r6
 80167c6:	f005 fdd5 	bl	801c374 <memset>
 80167ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167ce:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80167d0:	2600      	movs	r6, #0
 80167d2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80167d6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80167d8:	6326      	str	r6, [r4, #48]	@ 0x30
 80167da:	2b00      	cmp	r3, #0
 80167dc:	f040 809d 	bne.w	801691a <rcl_wait_set_resize+0x2c6>
 80167e0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80167e2:	b120      	cbz	r0, 80167ee <rcl_wait_set_resize+0x19a>
 80167e4:	4639      	mov	r1, r7
 80167e6:	47c0      	blx	r8
 80167e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80167ec:	62ab      	str	r3, [r5, #40]	@ 0x28
 80167ee:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80167f0:	b310      	cbz	r0, 8016838 <rcl_wait_set_resize+0x1e4>
 80167f2:	4639      	mov	r1, r7
 80167f4:	47c0      	blx	r8
 80167f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80167f8:	2000      	movs	r0, #0
 80167fa:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80167fe:	b003      	add	sp, #12
 8016800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016804:	6800      	ldr	r0, [r0, #0]
 8016806:	b120      	cbz	r0, 8016812 <rcl_wait_set_resize+0x1be>
 8016808:	4651      	mov	r1, sl
 801680a:	47d8      	blx	fp
 801680c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801680e:	f8c5 8000 	str.w	r8, [r5]
 8016812:	68a0      	ldr	r0, [r4, #8]
 8016814:	2800      	cmp	r0, #0
 8016816:	f43f af61 	beq.w	80166dc <rcl_wait_set_resize+0x88>
 801681a:	4651      	mov	r1, sl
 801681c:	47d8      	blx	fp
 801681e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016820:	2300      	movs	r3, #0
 8016822:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8016826:	e759      	b.n	80166dc <rcl_wait_set_resize+0x88>
 8016828:	6828      	ldr	r0, [r5, #0]
 801682a:	9301      	str	r3, [sp, #4]
 801682c:	4651      	mov	r1, sl
 801682e:	47d8      	blx	fp
 8016830:	9b01      	ldr	r3, [sp, #4]
 8016832:	e9c5 3300 	strd	r3, r3, [r5]
 8016836:	200a      	movs	r0, #10
 8016838:	b003      	add	sp, #12
 801683a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801683e:	00b4      	lsls	r4, r6, #2
 8016840:	68a8      	ldr	r0, [r5, #8]
 8016842:	464a      	mov	r2, r9
 8016844:	4621      	mov	r1, r4
 8016846:	4798      	blx	r3
 8016848:	60a8      	str	r0, [r5, #8]
 801684a:	2800      	cmp	r0, #0
 801684c:	d0f3      	beq.n	8016836 <rcl_wait_set_resize+0x1e2>
 801684e:	4622      	mov	r2, r4
 8016850:	4641      	mov	r1, r8
 8016852:	f005 fd8f 	bl	801c374 <memset>
 8016856:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016858:	60ee      	str	r6, [r5, #12]
 801685a:	f04f 0800 	mov.w	r8, #0
 801685e:	19f6      	adds	r6, r6, r7
 8016860:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8016864:	f8c4 8010 	str.w	r8, [r4, #16]
 8016868:	f43f af54 	beq.w	8016714 <rcl_wait_set_resize+0xc0>
 801686c:	00b6      	lsls	r6, r6, #2
 801686e:	464a      	mov	r2, r9
 8016870:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8016872:	6960      	ldr	r0, [r4, #20]
 8016874:	4631      	mov	r1, r6
 8016876:	4798      	blx	r3
 8016878:	4681      	mov	r9, r0
 801687a:	6160      	str	r0, [r4, #20]
 801687c:	2800      	cmp	r0, #0
 801687e:	d076      	beq.n	801696e <rcl_wait_set_resize+0x31a>
 8016880:	4632      	mov	r2, r6
 8016882:	4641      	mov	r1, r8
 8016884:	f005 fd76 	bl	801c374 <memset>
 8016888:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801688a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801688e:	e74a      	b.n	8016726 <rcl_wait_set_resize+0xd2>
 8016890:	00bc      	lsls	r4, r7, #2
 8016892:	6928      	ldr	r0, [r5, #16]
 8016894:	464a      	mov	r2, r9
 8016896:	4621      	mov	r1, r4
 8016898:	47c0      	blx	r8
 801689a:	6128      	str	r0, [r5, #16]
 801689c:	2800      	cmp	r0, #0
 801689e:	d0ca      	beq.n	8016836 <rcl_wait_set_resize+0x1e2>
 80168a0:	4622      	mov	r2, r4
 80168a2:	4631      	mov	r1, r6
 80168a4:	f005 fd66 	bl	801c374 <memset>
 80168a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80168aa:	616f      	str	r7, [r5, #20]
 80168ac:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80168b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80168b4:	e749      	b.n	801674a <rcl_wait_set_resize+0xf6>
 80168b6:	009c      	lsls	r4, r3, #2
 80168b8:	69a8      	ldr	r0, [r5, #24]
 80168ba:	464a      	mov	r2, r9
 80168bc:	4621      	mov	r1, r4
 80168be:	47c0      	blx	r8
 80168c0:	61a8      	str	r0, [r5, #24]
 80168c2:	2800      	cmp	r0, #0
 80168c4:	d0b7      	beq.n	8016836 <rcl_wait_set_resize+0x1e2>
 80168c6:	4622      	mov	r2, r4
 80168c8:	4631      	mov	r1, r6
 80168ca:	f005 fd53 	bl	801c374 <memset>
 80168ce:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80168d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80168d2:	61eb      	str	r3, [r5, #28]
 80168d4:	6a38      	ldr	r0, [r7, #32]
 80168d6:	61fe      	str	r6, [r7, #28]
 80168d8:	464a      	mov	r2, r9
 80168da:	4621      	mov	r1, r4
 80168dc:	47c0      	blx	r8
 80168de:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80168e0:	6238      	str	r0, [r7, #32]
 80168e2:	6a1f      	ldr	r7, [r3, #32]
 80168e4:	2f00      	cmp	r7, #0
 80168e6:	d054      	beq.n	8016992 <rcl_wait_set_resize+0x33e>
 80168e8:	4622      	mov	r2, r4
 80168ea:	4631      	mov	r1, r6
 80168ec:	4638      	mov	r0, r7
 80168ee:	f005 fd41 	bl	801c374 <memset>
 80168f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80168f4:	e73f      	b.n	8016776 <rcl_wait_set_resize+0x122>
 80168f6:	6a28      	ldr	r0, [r5, #32]
 80168f8:	b120      	cbz	r0, 8016904 <rcl_wait_set_resize+0x2b0>
 80168fa:	4639      	mov	r1, r7
 80168fc:	47c0      	blx	r8
 80168fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016900:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016902:	622b      	str	r3, [r5, #32]
 8016904:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8016906:	2800      	cmp	r0, #0
 8016908:	f43f af60 	beq.w	80167cc <rcl_wait_set_resize+0x178>
 801690c:	4639      	mov	r1, r7
 801690e:	47c0      	blx	r8
 8016910:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8016912:	2300      	movs	r3, #0
 8016914:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8016918:	e758      	b.n	80167cc <rcl_wait_set_resize+0x178>
 801691a:	009c      	lsls	r4, r3, #2
 801691c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801691e:	463a      	mov	r2, r7
 8016920:	4621      	mov	r1, r4
 8016922:	47c8      	blx	r9
 8016924:	62a8      	str	r0, [r5, #40]	@ 0x28
 8016926:	2800      	cmp	r0, #0
 8016928:	d085      	beq.n	8016836 <rcl_wait_set_resize+0x1e2>
 801692a:	4622      	mov	r2, r4
 801692c:	4631      	mov	r1, r6
 801692e:	f005 fd21 	bl	801c374 <memset>
 8016932:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8016936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016938:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801693a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801693e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8016942:	463a      	mov	r2, r7
 8016944:	4621      	mov	r1, r4
 8016946:	47c8      	blx	r9
 8016948:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801694a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801694e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016950:	b36b      	cbz	r3, 80169ae <rcl_wait_set_resize+0x35a>
 8016952:	4622      	mov	r2, r4
 8016954:	4631      	mov	r1, r6
 8016956:	4618      	mov	r0, r3
 8016958:	f005 fd0c 	bl	801c374 <memset>
 801695c:	4630      	mov	r0, r6
 801695e:	b003      	add	sp, #12
 8016960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016964:	200b      	movs	r0, #11
 8016966:	4770      	bx	lr
 8016968:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801696c:	e764      	b.n	8016838 <rcl_wait_set_resize+0x1e4>
 801696e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016970:	68a8      	ldr	r0, [r5, #8]
 8016972:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016976:	4798      	blx	r3
 8016978:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801697a:	6928      	ldr	r0, [r5, #16]
 801697c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801697e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016980:	f8c5 900c 	str.w	r9, [r5, #12]
 8016984:	f8c5 9008 	str.w	r9, [r5, #8]
 8016988:	4790      	blx	r2
 801698a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801698e:	200a      	movs	r0, #10
 8016990:	e752      	b.n	8016838 <rcl_wait_set_resize+0x1e4>
 8016992:	69a8      	ldr	r0, [r5, #24]
 8016994:	4649      	mov	r1, r9
 8016996:	47d0      	blx	sl
 8016998:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801699c:	200a      	movs	r0, #10
 801699e:	e74b      	b.n	8016838 <rcl_wait_set_resize+0x1e4>
 80169a0:	6a28      	ldr	r0, [r5, #32]
 80169a2:	4639      	mov	r1, r7
 80169a4:	47c0      	blx	r8
 80169a6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80169aa:	200a      	movs	r0, #10
 80169ac:	e744      	b.n	8016838 <rcl_wait_set_resize+0x1e4>
 80169ae:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80169b0:	9301      	str	r3, [sp, #4]
 80169b2:	4639      	mov	r1, r7
 80169b4:	47c0      	blx	r8
 80169b6:	9b01      	ldr	r3, [sp, #4]
 80169b8:	200a      	movs	r0, #10
 80169ba:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80169be:	e73b      	b.n	8016838 <rcl_wait_set_resize+0x1e4>

080169c0 <rcl_wait_set_init>:
 80169c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169c4:	b084      	sub	sp, #16
 80169c6:	4604      	mov	r4, r0
 80169c8:	a810      	add	r0, sp, #64	@ 0x40
 80169ca:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80169ce:	460f      	mov	r7, r1
 80169d0:	4690      	mov	r8, r2
 80169d2:	4699      	mov	r9, r3
 80169d4:	f7fa fec8 	bl	8011768 <rcutils_allocator_is_valid>
 80169d8:	2800      	cmp	r0, #0
 80169da:	d06b      	beq.n	8016ab4 <rcl_wait_set_init+0xf4>
 80169dc:	2c00      	cmp	r4, #0
 80169de:	d069      	beq.n	8016ab4 <rcl_wait_set_init+0xf4>
 80169e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80169e2:	b125      	cbz	r5, 80169ee <rcl_wait_set_init+0x2e>
 80169e4:	2564      	movs	r5, #100	@ 0x64
 80169e6:	4628      	mov	r0, r5
 80169e8:	b004      	add	sp, #16
 80169ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169ee:	f1ba 0f00 	cmp.w	sl, #0
 80169f2:	d05f      	beq.n	8016ab4 <rcl_wait_set_init+0xf4>
 80169f4:	4650      	mov	r0, sl
 80169f6:	f7fe fcbb 	bl	8015370 <rcl_context_is_valid>
 80169fa:	2800      	cmp	r0, #0
 80169fc:	d067      	beq.n	8016ace <rcl_wait_set_init+0x10e>
 80169fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016a00:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8016a02:	205c      	movs	r0, #92	@ 0x5c
 8016a04:	4798      	blx	r3
 8016a06:	6320      	str	r0, [r4, #48]	@ 0x30
 8016a08:	2800      	cmp	r0, #0
 8016a0a:	d062      	beq.n	8016ad2 <rcl_wait_set_init+0x112>
 8016a0c:	4629      	mov	r1, r5
 8016a0e:	225c      	movs	r2, #92	@ 0x5c
 8016a10:	f005 fcb0 	bl	801c374 <memset>
 8016a14:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8016a18:	eb03 0e02 	add.w	lr, r3, r2
 8016a1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a1e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8016a20:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8016a24:	449e      	add	lr, r3
 8016a26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016a2a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016a2e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8016a32:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8016a36:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8016a3a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8016a3e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8016a42:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8016a46:	f8da a000 	ldr.w	sl, [sl]
 8016a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016a4c:	44c6      	add	lr, r8
 8016a4e:	f8dc 3000 	ldr.w	r3, [ip]
 8016a52:	602b      	str	r3, [r5, #0]
 8016a54:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8016a58:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8016a5c:	f002 fe86 	bl	801976c <rmw_create_wait_set>
 8016a60:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016a62:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8016a64:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016a66:	b350      	cbz	r0, 8016abe <rcl_wait_set_init+0xfe>
 8016a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a6a:	9302      	str	r3, [sp, #8]
 8016a6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016a6e:	9301      	str	r3, [sp, #4]
 8016a70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a72:	9300      	str	r3, [sp, #0]
 8016a74:	4642      	mov	r2, r8
 8016a76:	464b      	mov	r3, r9
 8016a78:	4639      	mov	r1, r7
 8016a7a:	4620      	mov	r0, r4
 8016a7c:	f7ff fdea 	bl	8016654 <rcl_wait_set_resize>
 8016a80:	4605      	mov	r5, r0
 8016a82:	2800      	cmp	r0, #0
 8016a84:	d0af      	beq.n	80169e6 <rcl_wait_set_init+0x26>
 8016a86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016a88:	bb2b      	cbnz	r3, 8016ad6 <rcl_wait_set_init+0x116>
 8016a8a:	2600      	movs	r6, #0
 8016a8c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016a90:	9600      	str	r6, [sp, #0]
 8016a92:	4633      	mov	r3, r6
 8016a94:	4632      	mov	r2, r6
 8016a96:	4631      	mov	r1, r6
 8016a98:	4620      	mov	r0, r4
 8016a9a:	f7ff fddb 	bl	8016654 <rcl_wait_set_resize>
 8016a9e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016aa0:	2800      	cmp	r0, #0
 8016aa2:	d0a0      	beq.n	80169e6 <rcl_wait_set_init+0x26>
 8016aa4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8016aa6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016aa8:	4798      	blx	r3
 8016aaa:	4628      	mov	r0, r5
 8016aac:	6326      	str	r6, [r4, #48]	@ 0x30
 8016aae:	b004      	add	sp, #16
 8016ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ab4:	250b      	movs	r5, #11
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	b004      	add	sp, #16
 8016aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016abe:	2501      	movs	r5, #1
 8016ac0:	f002 fe5e 	bl	8019780 <rmw_destroy_wait_set>
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	bf18      	it	ne
 8016ac8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8016acc:	e7dd      	b.n	8016a8a <rcl_wait_set_init+0xca>
 8016ace:	2565      	movs	r5, #101	@ 0x65
 8016ad0:	e789      	b.n	80169e6 <rcl_wait_set_init+0x26>
 8016ad2:	250a      	movs	r5, #10
 8016ad4:	e787      	b.n	80169e6 <rcl_wait_set_init+0x26>
 8016ad6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016ad8:	e7f2      	b.n	8016ac0 <rcl_wait_set_init+0x100>
 8016ada:	bf00      	nop

08016adc <rcl_wait_set_add_guard_condition>:
 8016adc:	b318      	cbz	r0, 8016b26 <rcl_wait_set_add_guard_condition+0x4a>
 8016ade:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016ae0:	b570      	push	{r4, r5, r6, lr}
 8016ae2:	4604      	mov	r4, r0
 8016ae4:	b30b      	cbz	r3, 8016b2a <rcl_wait_set_add_guard_condition+0x4e>
 8016ae6:	b319      	cbz	r1, 8016b30 <rcl_wait_set_add_guard_condition+0x54>
 8016ae8:	68dd      	ldr	r5, [r3, #12]
 8016aea:	68c0      	ldr	r0, [r0, #12]
 8016aec:	4285      	cmp	r5, r0
 8016aee:	d217      	bcs.n	8016b20 <rcl_wait_set_add_guard_condition+0x44>
 8016af0:	68a0      	ldr	r0, [r4, #8]
 8016af2:	1c6e      	adds	r6, r5, #1
 8016af4:	60de      	str	r6, [r3, #12]
 8016af6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016afa:	b102      	cbz	r2, 8016afe <rcl_wait_set_add_guard_condition+0x22>
 8016afc:	6015      	str	r5, [r2, #0]
 8016afe:	4608      	mov	r0, r1
 8016b00:	f004 fe38 	bl	801b774 <rcl_guard_condition_get_rmw_handle>
 8016b04:	b150      	cbz	r0, 8016b1c <rcl_wait_set_add_guard_condition+0x40>
 8016b06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b08:	6842      	ldr	r2, [r0, #4]
 8016b0a:	695b      	ldr	r3, [r3, #20]
 8016b0c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016b10:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016b12:	6913      	ldr	r3, [r2, #16]
 8016b14:	3301      	adds	r3, #1
 8016b16:	2000      	movs	r0, #0
 8016b18:	6113      	str	r3, [r2, #16]
 8016b1a:	bd70      	pop	{r4, r5, r6, pc}
 8016b1c:	2001      	movs	r0, #1
 8016b1e:	bd70      	pop	{r4, r5, r6, pc}
 8016b20:	f240 3086 	movw	r0, #902	@ 0x386
 8016b24:	bd70      	pop	{r4, r5, r6, pc}
 8016b26:	200b      	movs	r0, #11
 8016b28:	4770      	bx	lr
 8016b2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016b2e:	bd70      	pop	{r4, r5, r6, pc}
 8016b30:	200b      	movs	r0, #11
 8016b32:	bd70      	pop	{r4, r5, r6, pc}

08016b34 <rcl_wait_set_add_timer>:
 8016b34:	b328      	cbz	r0, 8016b82 <rcl_wait_set_add_timer+0x4e>
 8016b36:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016b38:	b570      	push	{r4, r5, r6, lr}
 8016b3a:	4604      	mov	r4, r0
 8016b3c:	b31b      	cbz	r3, 8016b86 <rcl_wait_set_add_timer+0x52>
 8016b3e:	b329      	cbz	r1, 8016b8c <rcl_wait_set_add_timer+0x58>
 8016b40:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8016b42:	6965      	ldr	r5, [r4, #20]
 8016b44:	42a8      	cmp	r0, r5
 8016b46:	d219      	bcs.n	8016b7c <rcl_wait_set_add_timer+0x48>
 8016b48:	6925      	ldr	r5, [r4, #16]
 8016b4a:	1c46      	adds	r6, r0, #1
 8016b4c:	641e      	str	r6, [r3, #64]	@ 0x40
 8016b4e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8016b52:	b102      	cbz	r2, 8016b56 <rcl_wait_set_add_timer+0x22>
 8016b54:	6010      	str	r0, [r2, #0]
 8016b56:	4608      	mov	r0, r1
 8016b58:	f7ff fc10 	bl	801637c <rcl_timer_get_guard_condition>
 8016b5c:	b168      	cbz	r0, 8016b7a <rcl_wait_set_add_timer+0x46>
 8016b5e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016b60:	68e3      	ldr	r3, [r4, #12]
 8016b62:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8016b64:	3b01      	subs	r3, #1
 8016b66:	441d      	add	r5, r3
 8016b68:	f004 fe04 	bl	801b774 <rcl_guard_condition_get_rmw_handle>
 8016b6c:	b180      	cbz	r0, 8016b90 <rcl_wait_set_add_timer+0x5c>
 8016b6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016b70:	6842      	ldr	r2, [r0, #4]
 8016b72:	695b      	ldr	r3, [r3, #20]
 8016b74:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016b78:	2000      	movs	r0, #0
 8016b7a:	bd70      	pop	{r4, r5, r6, pc}
 8016b7c:	f240 3086 	movw	r0, #902	@ 0x386
 8016b80:	bd70      	pop	{r4, r5, r6, pc}
 8016b82:	200b      	movs	r0, #11
 8016b84:	4770      	bx	lr
 8016b86:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016b8a:	bd70      	pop	{r4, r5, r6, pc}
 8016b8c:	200b      	movs	r0, #11
 8016b8e:	bd70      	pop	{r4, r5, r6, pc}
 8016b90:	2001      	movs	r0, #1
 8016b92:	bd70      	pop	{r4, r5, r6, pc}

08016b94 <rcl_wait_set_add_client>:
 8016b94:	b318      	cbz	r0, 8016bde <rcl_wait_set_add_client+0x4a>
 8016b96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016b98:	b570      	push	{r4, r5, r6, lr}
 8016b9a:	4604      	mov	r4, r0
 8016b9c:	b30b      	cbz	r3, 8016be2 <rcl_wait_set_add_client+0x4e>
 8016b9e:	b319      	cbz	r1, 8016be8 <rcl_wait_set_add_client+0x54>
 8016ba0:	699d      	ldr	r5, [r3, #24]
 8016ba2:	69c0      	ldr	r0, [r0, #28]
 8016ba4:	4285      	cmp	r5, r0
 8016ba6:	d217      	bcs.n	8016bd8 <rcl_wait_set_add_client+0x44>
 8016ba8:	69a0      	ldr	r0, [r4, #24]
 8016baa:	1c6e      	adds	r6, r5, #1
 8016bac:	619e      	str	r6, [r3, #24]
 8016bae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016bb2:	b102      	cbz	r2, 8016bb6 <rcl_wait_set_add_client+0x22>
 8016bb4:	6015      	str	r5, [r2, #0]
 8016bb6:	4608      	mov	r0, r1
 8016bb8:	f7fe fb2e 	bl	8015218 <rcl_client_get_rmw_handle>
 8016bbc:	b150      	cbz	r0, 8016bd4 <rcl_wait_set_add_client+0x40>
 8016bbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016bc0:	6842      	ldr	r2, [r0, #4]
 8016bc2:	6a1b      	ldr	r3, [r3, #32]
 8016bc4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016bc8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016bca:	69d3      	ldr	r3, [r2, #28]
 8016bcc:	3301      	adds	r3, #1
 8016bce:	2000      	movs	r0, #0
 8016bd0:	61d3      	str	r3, [r2, #28]
 8016bd2:	bd70      	pop	{r4, r5, r6, pc}
 8016bd4:	2001      	movs	r0, #1
 8016bd6:	bd70      	pop	{r4, r5, r6, pc}
 8016bd8:	f240 3086 	movw	r0, #902	@ 0x386
 8016bdc:	bd70      	pop	{r4, r5, r6, pc}
 8016bde:	200b      	movs	r0, #11
 8016be0:	4770      	bx	lr
 8016be2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016be6:	bd70      	pop	{r4, r5, r6, pc}
 8016be8:	200b      	movs	r0, #11
 8016bea:	bd70      	pop	{r4, r5, r6, pc}

08016bec <rcl_wait_set_add_service>:
 8016bec:	b318      	cbz	r0, 8016c36 <rcl_wait_set_add_service+0x4a>
 8016bee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016bf0:	b570      	push	{r4, r5, r6, lr}
 8016bf2:	4604      	mov	r4, r0
 8016bf4:	b30b      	cbz	r3, 8016c3a <rcl_wait_set_add_service+0x4e>
 8016bf6:	b319      	cbz	r1, 8016c40 <rcl_wait_set_add_service+0x54>
 8016bf8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8016bfa:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8016bfc:	4285      	cmp	r5, r0
 8016bfe:	d217      	bcs.n	8016c30 <rcl_wait_set_add_service+0x44>
 8016c00:	6a20      	ldr	r0, [r4, #32]
 8016c02:	1c6e      	adds	r6, r5, #1
 8016c04:	625e      	str	r6, [r3, #36]	@ 0x24
 8016c06:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8016c0a:	b102      	cbz	r2, 8016c0e <rcl_wait_set_add_service+0x22>
 8016c0c:	6015      	str	r5, [r2, #0]
 8016c0e:	4608      	mov	r0, r1
 8016c10:	f7ff f86e 	bl	8015cf0 <rcl_service_get_rmw_handle>
 8016c14:	b150      	cbz	r0, 8016c2c <rcl_wait_set_add_service+0x40>
 8016c16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016c18:	6842      	ldr	r2, [r0, #4]
 8016c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016c1c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016c20:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016c22:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016c24:	3301      	adds	r3, #1
 8016c26:	2000      	movs	r0, #0
 8016c28:	6293      	str	r3, [r2, #40]	@ 0x28
 8016c2a:	bd70      	pop	{r4, r5, r6, pc}
 8016c2c:	2001      	movs	r0, #1
 8016c2e:	bd70      	pop	{r4, r5, r6, pc}
 8016c30:	f240 3086 	movw	r0, #902	@ 0x386
 8016c34:	bd70      	pop	{r4, r5, r6, pc}
 8016c36:	200b      	movs	r0, #11
 8016c38:	4770      	bx	lr
 8016c3a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016c3e:	bd70      	pop	{r4, r5, r6, pc}
 8016c40:	200b      	movs	r0, #11
 8016c42:	bd70      	pop	{r4, r5, r6, pc}
 8016c44:	0000      	movs	r0, r0
	...

08016c48 <rcl_wait>:
 8016c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c4c:	ed2d 8b02 	vpush	{d8}
 8016c50:	b08d      	sub	sp, #52	@ 0x34
 8016c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016c56:	2800      	cmp	r0, #0
 8016c58:	f000 8143 	beq.w	8016ee2 <rcl_wait+0x29a>
 8016c5c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016c5e:	4605      	mov	r5, r0
 8016c60:	2e00      	cmp	r6, #0
 8016c62:	f000 8112 	beq.w	8016e8a <rcl_wait+0x242>
 8016c66:	6843      	ldr	r3, [r0, #4]
 8016c68:	b983      	cbnz	r3, 8016c8c <rcl_wait+0x44>
 8016c6a:	68eb      	ldr	r3, [r5, #12]
 8016c6c:	b973      	cbnz	r3, 8016c8c <rcl_wait+0x44>
 8016c6e:	696b      	ldr	r3, [r5, #20]
 8016c70:	b963      	cbnz	r3, 8016c8c <rcl_wait+0x44>
 8016c72:	69eb      	ldr	r3, [r5, #28]
 8016c74:	b953      	cbnz	r3, 8016c8c <rcl_wait+0x44>
 8016c76:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8016c78:	b943      	cbnz	r3, 8016c8c <rcl_wait+0x44>
 8016c7a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8016c7c:	b933      	cbnz	r3, 8016c8c <rcl_wait+0x44>
 8016c7e:	f240 3085 	movw	r0, #901	@ 0x385
 8016c82:	b00d      	add	sp, #52	@ 0x34
 8016c84:	ecbd 8b02 	vpop	{d8}
 8016c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c8c:	9b04      	ldr	r3, [sp, #16]
 8016c8e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8016c90:	2b01      	cmp	r3, #1
 8016c92:	9b05      	ldr	r3, [sp, #20]
 8016c94:	f173 0300 	sbcs.w	r3, r3, #0
 8016c98:	f2c0 80f0 	blt.w	8016e7c <rcl_wait+0x234>
 8016c9c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016ca0:	4643      	mov	r3, r8
 8016ca2:	2a00      	cmp	r2, #0
 8016ca4:	f000 8133 	beq.w	8016f0e <rcl_wait+0x2c6>
 8016ca8:	2400      	movs	r4, #0
 8016caa:	4613      	mov	r3, r2
 8016cac:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8016f20 <rcl_wait+0x2d8>
 8016cb0:	46a2      	mov	sl, r4
 8016cb2:	46a3      	mov	fp, r4
 8016cb4:	f240 3921 	movw	r9, #801	@ 0x321
 8016cb8:	4632      	mov	r2, r6
 8016cba:	e014      	b.n	8016ce6 <rcl_wait+0x9e>
 8016cbc:	2800      	cmp	r0, #0
 8016cbe:	d1e0      	bne.n	8016c82 <rcl_wait+0x3a>
 8016cc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016cc4:	4542      	cmp	r2, r8
 8016cc6:	eb73 0107 	sbcs.w	r1, r3, r7
 8016cca:	da03      	bge.n	8016cd4 <rcl_wait+0x8c>
 8016ccc:	4690      	mov	r8, r2
 8016cce:	461f      	mov	r7, r3
 8016cd0:	f04f 0b01 	mov.w	fp, #1
 8016cd4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016cd6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016cd8:	3401      	adds	r4, #1
 8016cda:	f14a 0a00 	adc.w	sl, sl, #0
 8016cde:	429c      	cmp	r4, r3
 8016ce0:	f17a 0100 	sbcs.w	r1, sl, #0
 8016ce4:	d228      	bcs.n	8016d38 <rcl_wait+0xf0>
 8016ce6:	6928      	ldr	r0, [r5, #16]
 8016ce8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016cec:	a908      	add	r1, sp, #32
 8016cee:	00a6      	lsls	r6, r4, #2
 8016cf0:	2800      	cmp	r0, #0
 8016cf2:	d0f1      	beq.n	8016cd8 <rcl_wait+0x90>
 8016cf4:	68eb      	ldr	r3, [r5, #12]
 8016cf6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016cfa:	4423      	add	r3, r4
 8016cfc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016d00:	f1be 0f00 	cmp.w	lr, #0
 8016d04:	d006      	beq.n	8016d14 <rcl_wait+0xcc>
 8016d06:	6913      	ldr	r3, [r2, #16]
 8016d08:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	6113      	str	r3, [r2, #16]
 8016d10:	692b      	ldr	r3, [r5, #16]
 8016d12:	5998      	ldr	r0, [r3, r6]
 8016d14:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016d18:	f7ff fafe 	bl	8016318 <rcl_timer_get_time_until_next_call>
 8016d1c:	4548      	cmp	r0, r9
 8016d1e:	d1cd      	bne.n	8016cbc <rcl_wait+0x74>
 8016d20:	692b      	ldr	r3, [r5, #16]
 8016d22:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016d24:	2100      	movs	r1, #0
 8016d26:	5199      	str	r1, [r3, r6]
 8016d28:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8016d2a:	3401      	adds	r4, #1
 8016d2c:	f14a 0a00 	adc.w	sl, sl, #0
 8016d30:	429c      	cmp	r4, r3
 8016d32:	f17a 0100 	sbcs.w	r1, sl, #0
 8016d36:	d3d6      	bcc.n	8016ce6 <rcl_wait+0x9e>
 8016d38:	4616      	mov	r6, r2
 8016d3a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016d3e:	4313      	orrs	r3, r2
 8016d40:	46d9      	mov	r9, fp
 8016d42:	f040 80a9 	bne.w	8016e98 <rcl_wait+0x250>
 8016d46:	2300      	movs	r3, #0
 8016d48:	2200      	movs	r2, #0
 8016d4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016d4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016d52:	ab08      	add	r3, sp, #32
 8016d54:	9302      	str	r3, [sp, #8]
 8016d56:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8016d58:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8016d5c:	e9cd 3200 	strd	r3, r2, [sp]
 8016d60:	f106 0110 	add.w	r1, r6, #16
 8016d64:	f106 031c 	add.w	r3, r6, #28
 8016d68:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8016d6c:	1d30      	adds	r0, r6, #4
 8016d6e:	f002 fb85 	bl	801947c <rmw_wait>
 8016d72:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016d74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016d76:	4680      	mov	r8, r0
 8016d78:	b1ca      	cbz	r2, 8016dae <rcl_wait+0x166>
 8016d7a:	2400      	movs	r4, #0
 8016d7c:	4627      	mov	r7, r4
 8016d7e:	692a      	ldr	r2, [r5, #16]
 8016d80:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8016d84:	f10d 011f 	add.w	r1, sp, #31
 8016d88:	00a6      	lsls	r6, r4, #2
 8016d8a:	b160      	cbz	r0, 8016da6 <rcl_wait+0x15e>
 8016d8c:	f88d 701f 	strb.w	r7, [sp, #31]
 8016d90:	f7ff fa88 	bl	80162a4 <rcl_timer_is_ready>
 8016d94:	2800      	cmp	r0, #0
 8016d96:	f47f af74 	bne.w	8016c82 <rcl_wait+0x3a>
 8016d9a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016d9e:	b90b      	cbnz	r3, 8016da4 <rcl_wait+0x15c>
 8016da0:	692a      	ldr	r2, [r5, #16]
 8016da2:	5193      	str	r3, [r2, r6]
 8016da4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016da6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016da8:	3401      	adds	r4, #1
 8016daa:	42a2      	cmp	r2, r4
 8016dac:	d8e7      	bhi.n	8016d7e <rcl_wait+0x136>
 8016dae:	f038 0002 	bics.w	r0, r8, #2
 8016db2:	f040 8090 	bne.w	8016ed6 <rcl_wait+0x28e>
 8016db6:	686e      	ldr	r6, [r5, #4]
 8016db8:	4602      	mov	r2, r0
 8016dba:	b91e      	cbnz	r6, 8016dc4 <rcl_wait+0x17c>
 8016dbc:	e00d      	b.n	8016dda <rcl_wait+0x192>
 8016dbe:	3201      	adds	r2, #1
 8016dc0:	42b2      	cmp	r2, r6
 8016dc2:	d00a      	beq.n	8016dda <rcl_wait+0x192>
 8016dc4:	6899      	ldr	r1, [r3, #8]
 8016dc6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016dca:	2900      	cmp	r1, #0
 8016dcc:	d1f7      	bne.n	8016dbe <rcl_wait+0x176>
 8016dce:	682c      	ldr	r4, [r5, #0]
 8016dd0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016dd4:	3201      	adds	r2, #1
 8016dd6:	42b2      	cmp	r2, r6
 8016dd8:	d1f4      	bne.n	8016dc4 <rcl_wait+0x17c>
 8016dda:	68ee      	ldr	r6, [r5, #12]
 8016ddc:	2200      	movs	r2, #0
 8016dde:	b91e      	cbnz	r6, 8016de8 <rcl_wait+0x1a0>
 8016de0:	e00d      	b.n	8016dfe <rcl_wait+0x1b6>
 8016de2:	3201      	adds	r2, #1
 8016de4:	42b2      	cmp	r2, r6
 8016de6:	d00a      	beq.n	8016dfe <rcl_wait+0x1b6>
 8016de8:	6959      	ldr	r1, [r3, #20]
 8016dea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016dee:	2900      	cmp	r1, #0
 8016df0:	d1f7      	bne.n	8016de2 <rcl_wait+0x19a>
 8016df2:	68ac      	ldr	r4, [r5, #8]
 8016df4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016df8:	3201      	adds	r2, #1
 8016dfa:	42b2      	cmp	r2, r6
 8016dfc:	d1f4      	bne.n	8016de8 <rcl_wait+0x1a0>
 8016dfe:	69ee      	ldr	r6, [r5, #28]
 8016e00:	2200      	movs	r2, #0
 8016e02:	b91e      	cbnz	r6, 8016e0c <rcl_wait+0x1c4>
 8016e04:	e00d      	b.n	8016e22 <rcl_wait+0x1da>
 8016e06:	3201      	adds	r2, #1
 8016e08:	42b2      	cmp	r2, r6
 8016e0a:	d00a      	beq.n	8016e22 <rcl_wait+0x1da>
 8016e0c:	6a19      	ldr	r1, [r3, #32]
 8016e0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e12:	2900      	cmp	r1, #0
 8016e14:	d1f7      	bne.n	8016e06 <rcl_wait+0x1be>
 8016e16:	69ac      	ldr	r4, [r5, #24]
 8016e18:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016e1c:	3201      	adds	r2, #1
 8016e1e:	42b2      	cmp	r2, r6
 8016e20:	d1f4      	bne.n	8016e0c <rcl_wait+0x1c4>
 8016e22:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8016e24:	2200      	movs	r2, #0
 8016e26:	b91e      	cbnz	r6, 8016e30 <rcl_wait+0x1e8>
 8016e28:	e00d      	b.n	8016e46 <rcl_wait+0x1fe>
 8016e2a:	3201      	adds	r2, #1
 8016e2c:	4296      	cmp	r6, r2
 8016e2e:	d00a      	beq.n	8016e46 <rcl_wait+0x1fe>
 8016e30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016e32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e36:	2900      	cmp	r1, #0
 8016e38:	d1f7      	bne.n	8016e2a <rcl_wait+0x1e2>
 8016e3a:	6a2c      	ldr	r4, [r5, #32]
 8016e3c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016e40:	3201      	adds	r2, #1
 8016e42:	4296      	cmp	r6, r2
 8016e44:	d1f4      	bne.n	8016e30 <rcl_wait+0x1e8>
 8016e46:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8016e48:	2200      	movs	r2, #0
 8016e4a:	b91e      	cbnz	r6, 8016e54 <rcl_wait+0x20c>
 8016e4c:	e00d      	b.n	8016e6a <rcl_wait+0x222>
 8016e4e:	3201      	adds	r2, #1
 8016e50:	42b2      	cmp	r2, r6
 8016e52:	d00a      	beq.n	8016e6a <rcl_wait+0x222>
 8016e54:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016e56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016e5a:	2900      	cmp	r1, #0
 8016e5c:	d1f7      	bne.n	8016e4e <rcl_wait+0x206>
 8016e5e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8016e60:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016e64:	3201      	adds	r2, #1
 8016e66:	42b2      	cmp	r2, r6
 8016e68:	d1f4      	bne.n	8016e54 <rcl_wait+0x20c>
 8016e6a:	f1b8 0f02 	cmp.w	r8, #2
 8016e6e:	f47f af08 	bne.w	8016c82 <rcl_wait+0x3a>
 8016e72:	464b      	mov	r3, r9
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	bf08      	it	eq
 8016e78:	2002      	moveq	r0, #2
 8016e7a:	e702      	b.n	8016c82 <rcl_wait+0x3a>
 8016e7c:	2a00      	cmp	r2, #0
 8016e7e:	d03a      	beq.n	8016ef6 <rcl_wait+0x2ae>
 8016e80:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016e84:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016e88:	e70e      	b.n	8016ca8 <rcl_wait+0x60>
 8016e8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016e8e:	b00d      	add	sp, #52	@ 0x34
 8016e90:	ecbd 8b02 	vpop	{d8}
 8016e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e98:	9b04      	ldr	r3, [sp, #16]
 8016e9a:	2b01      	cmp	r3, #1
 8016e9c:	9b05      	ldr	r3, [sp, #20]
 8016e9e:	f173 0300 	sbcs.w	r3, r3, #0
 8016ea2:	db24      	blt.n	8016eee <rcl_wait+0x2a6>
 8016ea4:	2f00      	cmp	r7, #0
 8016ea6:	bfbc      	itt	lt
 8016ea8:	f04f 0800 	movlt.w	r8, #0
 8016eac:	4647      	movlt	r7, r8
 8016eae:	a31e      	add	r3, pc, #120	@ (adr r3, 8016f28 <rcl_wait+0x2e0>)
 8016eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb4:	4640      	mov	r0, r8
 8016eb6:	4639      	mov	r1, r7
 8016eb8:	f7e9 fa42 	bl	8000340 <__aeabi_ldivmod>
 8016ebc:	a31a      	add	r3, pc, #104	@ (adr r3, 8016f28 <rcl_wait+0x2e0>)
 8016ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016ec6:	4640      	mov	r0, r8
 8016ec8:	4639      	mov	r1, r7
 8016eca:	f7e9 fa39 	bl	8000340 <__aeabi_ldivmod>
 8016ece:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016ed2:	ab08      	add	r3, sp, #32
 8016ed4:	e73e      	b.n	8016d54 <rcl_wait+0x10c>
 8016ed6:	2001      	movs	r0, #1
 8016ed8:	b00d      	add	sp, #52	@ 0x34
 8016eda:	ecbd 8b02 	vpop	{d8}
 8016ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ee2:	200b      	movs	r0, #11
 8016ee4:	b00d      	add	sp, #52	@ 0x34
 8016ee6:	ecbd 8b02 	vpop	{d8}
 8016eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eee:	465b      	mov	r3, fp
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d1d7      	bne.n	8016ea4 <rcl_wait+0x25c>
 8016ef4:	e72e      	b.n	8016d54 <rcl_wait+0x10c>
 8016ef6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016efa:	430b      	orrs	r3, r1
 8016efc:	bf08      	it	eq
 8016efe:	4691      	moveq	r9, r2
 8016f00:	f43f af21 	beq.w	8016d46 <rcl_wait+0xfe>
 8016f04:	9b04      	ldr	r3, [sp, #16]
 8016f06:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016f0a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016f0e:	2b01      	cmp	r3, #1
 8016f10:	9b05      	ldr	r3, [sp, #20]
 8016f12:	f173 0300 	sbcs.w	r3, r3, #0
 8016f16:	f04f 0300 	mov.w	r3, #0
 8016f1a:	4699      	mov	r9, r3
 8016f1c:	dac2      	bge.n	8016ea4 <rcl_wait+0x25c>
 8016f1e:	e719      	b.n	8016d54 <rcl_wait+0x10c>
 8016f20:	ffffffff 	.word	0xffffffff
 8016f24:	7fffffff 	.word	0x7fffffff
 8016f28:	3b9aca00 	.word	0x3b9aca00
 8016f2c:	00000000 	.word	0x00000000

08016f30 <rcl_action_take_goal_response>:
 8016f30:	2800      	cmp	r0, #0
 8016f32:	d039      	beq.n	8016fa8 <rcl_action_take_goal_response+0x78>
 8016f34:	b570      	push	{r4, r5, r6, lr}
 8016f36:	4604      	mov	r4, r0
 8016f38:	6800      	ldr	r0, [r0, #0]
 8016f3a:	b380      	cbz	r0, 8016f9e <rcl_action_take_goal_response+0x6e>
 8016f3c:	460d      	mov	r5, r1
 8016f3e:	4616      	mov	r6, r2
 8016f40:	f7fe f9ee 	bl	8015320 <rcl_client_is_valid>
 8016f44:	b330      	cbz	r0, 8016f94 <rcl_action_take_goal_response+0x64>
 8016f46:	6820      	ldr	r0, [r4, #0]
 8016f48:	3004      	adds	r0, #4
 8016f4a:	f7fe f9e9 	bl	8015320 <rcl_client_is_valid>
 8016f4e:	b308      	cbz	r0, 8016f94 <rcl_action_take_goal_response+0x64>
 8016f50:	6820      	ldr	r0, [r4, #0]
 8016f52:	3008      	adds	r0, #8
 8016f54:	f7fe f9e4 	bl	8015320 <rcl_client_is_valid>
 8016f58:	b1e0      	cbz	r0, 8016f94 <rcl_action_take_goal_response+0x64>
 8016f5a:	6820      	ldr	r0, [r4, #0]
 8016f5c:	300c      	adds	r0, #12
 8016f5e:	f7ff f869 	bl	8016034 <rcl_subscription_is_valid>
 8016f62:	b1b8      	cbz	r0, 8016f94 <rcl_action_take_goal_response+0x64>
 8016f64:	6820      	ldr	r0, [r4, #0]
 8016f66:	3010      	adds	r0, #16
 8016f68:	f7ff f864 	bl	8016034 <rcl_subscription_is_valid>
 8016f6c:	b190      	cbz	r0, 8016f94 <rcl_action_take_goal_response+0x64>
 8016f6e:	b1cd      	cbz	r5, 8016fa4 <rcl_action_take_goal_response+0x74>
 8016f70:	b1c6      	cbz	r6, 8016fa4 <rcl_action_take_goal_response+0x74>
 8016f72:	6820      	ldr	r0, [r4, #0]
 8016f74:	4632      	mov	r2, r6
 8016f76:	4629      	mov	r1, r5
 8016f78:	f7fe f98a 	bl	8015290 <rcl_take_response>
 8016f7c:	b148      	cbz	r0, 8016f92 <rcl_action_take_goal_response+0x62>
 8016f7e:	280a      	cmp	r0, #10
 8016f80:	d007      	beq.n	8016f92 <rcl_action_take_goal_response+0x62>
 8016f82:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016f86:	f640 0337 	movw	r3, #2103	@ 0x837
 8016f8a:	4290      	cmp	r0, r2
 8016f8c:	bf0c      	ite	eq
 8016f8e:	4618      	moveq	r0, r3
 8016f90:	2001      	movne	r0, #1
 8016f92:	bd70      	pop	{r4, r5, r6, pc}
 8016f94:	f7fa fc0c 	bl	80117b0 <rcutils_reset_error>
 8016f98:	f640 0036 	movw	r0, #2102	@ 0x836
 8016f9c:	bd70      	pop	{r4, r5, r6, pc}
 8016f9e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016fa2:	bd70      	pop	{r4, r5, r6, pc}
 8016fa4:	200b      	movs	r0, #11
 8016fa6:	bd70      	pop	{r4, r5, r6, pc}
 8016fa8:	f640 0036 	movw	r0, #2102	@ 0x836
 8016fac:	4770      	bx	lr
 8016fae:	bf00      	nop

08016fb0 <rcl_action_send_result_request>:
 8016fb0:	b390      	cbz	r0, 8017018 <rcl_action_send_result_request+0x68>
 8016fb2:	b570      	push	{r4, r5, r6, lr}
 8016fb4:	4604      	mov	r4, r0
 8016fb6:	6800      	ldr	r0, [r0, #0]
 8016fb8:	b348      	cbz	r0, 801700e <rcl_action_send_result_request+0x5e>
 8016fba:	460d      	mov	r5, r1
 8016fbc:	4616      	mov	r6, r2
 8016fbe:	f7fe f9af 	bl	8015320 <rcl_client_is_valid>
 8016fc2:	b1f8      	cbz	r0, 8017004 <rcl_action_send_result_request+0x54>
 8016fc4:	6820      	ldr	r0, [r4, #0]
 8016fc6:	3004      	adds	r0, #4
 8016fc8:	f7fe f9aa 	bl	8015320 <rcl_client_is_valid>
 8016fcc:	b1d0      	cbz	r0, 8017004 <rcl_action_send_result_request+0x54>
 8016fce:	6820      	ldr	r0, [r4, #0]
 8016fd0:	3008      	adds	r0, #8
 8016fd2:	f7fe f9a5 	bl	8015320 <rcl_client_is_valid>
 8016fd6:	b1a8      	cbz	r0, 8017004 <rcl_action_send_result_request+0x54>
 8016fd8:	6820      	ldr	r0, [r4, #0]
 8016fda:	300c      	adds	r0, #12
 8016fdc:	f7ff f82a 	bl	8016034 <rcl_subscription_is_valid>
 8016fe0:	b180      	cbz	r0, 8017004 <rcl_action_send_result_request+0x54>
 8016fe2:	6820      	ldr	r0, [r4, #0]
 8016fe4:	3010      	adds	r0, #16
 8016fe6:	f7ff f825 	bl	8016034 <rcl_subscription_is_valid>
 8016fea:	b158      	cbz	r0, 8017004 <rcl_action_send_result_request+0x54>
 8016fec:	b195      	cbz	r5, 8017014 <rcl_action_send_result_request+0x64>
 8016fee:	b18e      	cbz	r6, 8017014 <rcl_action_send_result_request+0x64>
 8016ff0:	6820      	ldr	r0, [r4, #0]
 8016ff2:	4632      	mov	r2, r6
 8016ff4:	4629      	mov	r1, r5
 8016ff6:	3008      	adds	r0, #8
 8016ff8:	f7fe f914 	bl	8015224 <rcl_send_request>
 8016ffc:	3800      	subs	r0, #0
 8016ffe:	bf18      	it	ne
 8017000:	2001      	movne	r0, #1
 8017002:	bd70      	pop	{r4, r5, r6, pc}
 8017004:	f7fa fbd4 	bl	80117b0 <rcutils_reset_error>
 8017008:	f640 0036 	movw	r0, #2102	@ 0x836
 801700c:	bd70      	pop	{r4, r5, r6, pc}
 801700e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017012:	bd70      	pop	{r4, r5, r6, pc}
 8017014:	200b      	movs	r0, #11
 8017016:	bd70      	pop	{r4, r5, r6, pc}
 8017018:	f640 0036 	movw	r0, #2102	@ 0x836
 801701c:	4770      	bx	lr
 801701e:	bf00      	nop

08017020 <rcl_action_take_result_response>:
 8017020:	2800      	cmp	r0, #0
 8017022:	d03a      	beq.n	801709a <rcl_action_take_result_response+0x7a>
 8017024:	b570      	push	{r4, r5, r6, lr}
 8017026:	4604      	mov	r4, r0
 8017028:	6800      	ldr	r0, [r0, #0]
 801702a:	b388      	cbz	r0, 8017090 <rcl_action_take_result_response+0x70>
 801702c:	460d      	mov	r5, r1
 801702e:	4616      	mov	r6, r2
 8017030:	f7fe f976 	bl	8015320 <rcl_client_is_valid>
 8017034:	b338      	cbz	r0, 8017086 <rcl_action_take_result_response+0x66>
 8017036:	6820      	ldr	r0, [r4, #0]
 8017038:	3004      	adds	r0, #4
 801703a:	f7fe f971 	bl	8015320 <rcl_client_is_valid>
 801703e:	b310      	cbz	r0, 8017086 <rcl_action_take_result_response+0x66>
 8017040:	6820      	ldr	r0, [r4, #0]
 8017042:	3008      	adds	r0, #8
 8017044:	f7fe f96c 	bl	8015320 <rcl_client_is_valid>
 8017048:	b1e8      	cbz	r0, 8017086 <rcl_action_take_result_response+0x66>
 801704a:	6820      	ldr	r0, [r4, #0]
 801704c:	300c      	adds	r0, #12
 801704e:	f7fe fff1 	bl	8016034 <rcl_subscription_is_valid>
 8017052:	b1c0      	cbz	r0, 8017086 <rcl_action_take_result_response+0x66>
 8017054:	6820      	ldr	r0, [r4, #0]
 8017056:	3010      	adds	r0, #16
 8017058:	f7fe ffec 	bl	8016034 <rcl_subscription_is_valid>
 801705c:	b198      	cbz	r0, 8017086 <rcl_action_take_result_response+0x66>
 801705e:	b1d5      	cbz	r5, 8017096 <rcl_action_take_result_response+0x76>
 8017060:	b1ce      	cbz	r6, 8017096 <rcl_action_take_result_response+0x76>
 8017062:	6820      	ldr	r0, [r4, #0]
 8017064:	4632      	mov	r2, r6
 8017066:	4629      	mov	r1, r5
 8017068:	3008      	adds	r0, #8
 801706a:	f7fe f911 	bl	8015290 <rcl_take_response>
 801706e:	b148      	cbz	r0, 8017084 <rcl_action_take_result_response+0x64>
 8017070:	280a      	cmp	r0, #10
 8017072:	d007      	beq.n	8017084 <rcl_action_take_result_response+0x64>
 8017074:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017078:	f640 0337 	movw	r3, #2103	@ 0x837
 801707c:	4290      	cmp	r0, r2
 801707e:	bf0c      	ite	eq
 8017080:	4618      	moveq	r0, r3
 8017082:	2001      	movne	r0, #1
 8017084:	bd70      	pop	{r4, r5, r6, pc}
 8017086:	f7fa fb93 	bl	80117b0 <rcutils_reset_error>
 801708a:	f640 0036 	movw	r0, #2102	@ 0x836
 801708e:	bd70      	pop	{r4, r5, r6, pc}
 8017090:	f640 0036 	movw	r0, #2102	@ 0x836
 8017094:	bd70      	pop	{r4, r5, r6, pc}
 8017096:	200b      	movs	r0, #11
 8017098:	bd70      	pop	{r4, r5, r6, pc}
 801709a:	f640 0036 	movw	r0, #2102	@ 0x836
 801709e:	4770      	bx	lr

080170a0 <rcl_action_take_cancel_response>:
 80170a0:	2800      	cmp	r0, #0
 80170a2:	d03a      	beq.n	801711a <rcl_action_take_cancel_response+0x7a>
 80170a4:	b570      	push	{r4, r5, r6, lr}
 80170a6:	4604      	mov	r4, r0
 80170a8:	6800      	ldr	r0, [r0, #0]
 80170aa:	b388      	cbz	r0, 8017110 <rcl_action_take_cancel_response+0x70>
 80170ac:	460d      	mov	r5, r1
 80170ae:	4616      	mov	r6, r2
 80170b0:	f7fe f936 	bl	8015320 <rcl_client_is_valid>
 80170b4:	b338      	cbz	r0, 8017106 <rcl_action_take_cancel_response+0x66>
 80170b6:	6820      	ldr	r0, [r4, #0]
 80170b8:	3004      	adds	r0, #4
 80170ba:	f7fe f931 	bl	8015320 <rcl_client_is_valid>
 80170be:	b310      	cbz	r0, 8017106 <rcl_action_take_cancel_response+0x66>
 80170c0:	6820      	ldr	r0, [r4, #0]
 80170c2:	3008      	adds	r0, #8
 80170c4:	f7fe f92c 	bl	8015320 <rcl_client_is_valid>
 80170c8:	b1e8      	cbz	r0, 8017106 <rcl_action_take_cancel_response+0x66>
 80170ca:	6820      	ldr	r0, [r4, #0]
 80170cc:	300c      	adds	r0, #12
 80170ce:	f7fe ffb1 	bl	8016034 <rcl_subscription_is_valid>
 80170d2:	b1c0      	cbz	r0, 8017106 <rcl_action_take_cancel_response+0x66>
 80170d4:	6820      	ldr	r0, [r4, #0]
 80170d6:	3010      	adds	r0, #16
 80170d8:	f7fe ffac 	bl	8016034 <rcl_subscription_is_valid>
 80170dc:	b198      	cbz	r0, 8017106 <rcl_action_take_cancel_response+0x66>
 80170de:	b1d5      	cbz	r5, 8017116 <rcl_action_take_cancel_response+0x76>
 80170e0:	b1ce      	cbz	r6, 8017116 <rcl_action_take_cancel_response+0x76>
 80170e2:	6820      	ldr	r0, [r4, #0]
 80170e4:	4632      	mov	r2, r6
 80170e6:	4629      	mov	r1, r5
 80170e8:	3004      	adds	r0, #4
 80170ea:	f7fe f8d1 	bl	8015290 <rcl_take_response>
 80170ee:	b148      	cbz	r0, 8017104 <rcl_action_take_cancel_response+0x64>
 80170f0:	280a      	cmp	r0, #10
 80170f2:	d007      	beq.n	8017104 <rcl_action_take_cancel_response+0x64>
 80170f4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80170f8:	f640 0337 	movw	r3, #2103	@ 0x837
 80170fc:	4290      	cmp	r0, r2
 80170fe:	bf0c      	ite	eq
 8017100:	4618      	moveq	r0, r3
 8017102:	2001      	movne	r0, #1
 8017104:	bd70      	pop	{r4, r5, r6, pc}
 8017106:	f7fa fb53 	bl	80117b0 <rcutils_reset_error>
 801710a:	f640 0036 	movw	r0, #2102	@ 0x836
 801710e:	bd70      	pop	{r4, r5, r6, pc}
 8017110:	f640 0036 	movw	r0, #2102	@ 0x836
 8017114:	bd70      	pop	{r4, r5, r6, pc}
 8017116:	200b      	movs	r0, #11
 8017118:	bd70      	pop	{r4, r5, r6, pc}
 801711a:	f640 0036 	movw	r0, #2102	@ 0x836
 801711e:	4770      	bx	lr

08017120 <rcl_action_take_feedback>:
 8017120:	2800      	cmp	r0, #0
 8017122:	d038      	beq.n	8017196 <rcl_action_take_feedback+0x76>
 8017124:	b530      	push	{r4, r5, lr}
 8017126:	4604      	mov	r4, r0
 8017128:	6800      	ldr	r0, [r0, #0]
 801712a:	b091      	sub	sp, #68	@ 0x44
 801712c:	b378      	cbz	r0, 801718e <rcl_action_take_feedback+0x6e>
 801712e:	460d      	mov	r5, r1
 8017130:	f7fe f8f6 	bl	8015320 <rcl_client_is_valid>
 8017134:	b328      	cbz	r0, 8017182 <rcl_action_take_feedback+0x62>
 8017136:	6820      	ldr	r0, [r4, #0]
 8017138:	3004      	adds	r0, #4
 801713a:	f7fe f8f1 	bl	8015320 <rcl_client_is_valid>
 801713e:	b300      	cbz	r0, 8017182 <rcl_action_take_feedback+0x62>
 8017140:	6820      	ldr	r0, [r4, #0]
 8017142:	3008      	adds	r0, #8
 8017144:	f7fe f8ec 	bl	8015320 <rcl_client_is_valid>
 8017148:	b1d8      	cbz	r0, 8017182 <rcl_action_take_feedback+0x62>
 801714a:	6820      	ldr	r0, [r4, #0]
 801714c:	300c      	adds	r0, #12
 801714e:	f7fe ff71 	bl	8016034 <rcl_subscription_is_valid>
 8017152:	b1b0      	cbz	r0, 8017182 <rcl_action_take_feedback+0x62>
 8017154:	6820      	ldr	r0, [r4, #0]
 8017156:	3010      	adds	r0, #16
 8017158:	f7fe ff6c 	bl	8016034 <rcl_subscription_is_valid>
 801715c:	b188      	cbz	r0, 8017182 <rcl_action_take_feedback+0x62>
 801715e:	b1ed      	cbz	r5, 801719c <rcl_action_take_feedback+0x7c>
 8017160:	6820      	ldr	r0, [r4, #0]
 8017162:	2300      	movs	r3, #0
 8017164:	466a      	mov	r2, sp
 8017166:	4629      	mov	r1, r5
 8017168:	300c      	adds	r0, #12
 801716a:	f7fe ff05 	bl	8015f78 <rcl_take>
 801716e:	b160      	cbz	r0, 801718a <rcl_action_take_feedback+0x6a>
 8017170:	f240 1391 	movw	r3, #401	@ 0x191
 8017174:	4298      	cmp	r0, r3
 8017176:	d014      	beq.n	80171a2 <rcl_action_take_feedback+0x82>
 8017178:	280a      	cmp	r0, #10
 801717a:	bf18      	it	ne
 801717c:	2001      	movne	r0, #1
 801717e:	b011      	add	sp, #68	@ 0x44
 8017180:	bd30      	pop	{r4, r5, pc}
 8017182:	f7fa fb15 	bl	80117b0 <rcutils_reset_error>
 8017186:	f640 0036 	movw	r0, #2102	@ 0x836
 801718a:	b011      	add	sp, #68	@ 0x44
 801718c:	bd30      	pop	{r4, r5, pc}
 801718e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017192:	b011      	add	sp, #68	@ 0x44
 8017194:	bd30      	pop	{r4, r5, pc}
 8017196:	f640 0036 	movw	r0, #2102	@ 0x836
 801719a:	4770      	bx	lr
 801719c:	200b      	movs	r0, #11
 801719e:	b011      	add	sp, #68	@ 0x44
 80171a0:	bd30      	pop	{r4, r5, pc}
 80171a2:	f640 0037 	movw	r0, #2103	@ 0x837
 80171a6:	e7f0      	b.n	801718a <rcl_action_take_feedback+0x6a>

080171a8 <rcl_action_wait_set_add_action_client>:
 80171a8:	2800      	cmp	r0, #0
 80171aa:	d048      	beq.n	801723e <rcl_action_wait_set_add_action_client+0x96>
 80171ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ae:	460c      	mov	r4, r1
 80171b0:	2900      	cmp	r1, #0
 80171b2:	d03c      	beq.n	801722e <rcl_action_wait_set_add_action_client+0x86>
 80171b4:	4605      	mov	r5, r0
 80171b6:	6808      	ldr	r0, [r1, #0]
 80171b8:	2800      	cmp	r0, #0
 80171ba:	d038      	beq.n	801722e <rcl_action_wait_set_add_action_client+0x86>
 80171bc:	4617      	mov	r7, r2
 80171be:	461e      	mov	r6, r3
 80171c0:	f7fe f8ae 	bl	8015320 <rcl_client_is_valid>
 80171c4:	b3b0      	cbz	r0, 8017234 <rcl_action_wait_set_add_action_client+0x8c>
 80171c6:	6820      	ldr	r0, [r4, #0]
 80171c8:	3004      	adds	r0, #4
 80171ca:	f7fe f8a9 	bl	8015320 <rcl_client_is_valid>
 80171ce:	b388      	cbz	r0, 8017234 <rcl_action_wait_set_add_action_client+0x8c>
 80171d0:	6820      	ldr	r0, [r4, #0]
 80171d2:	3008      	adds	r0, #8
 80171d4:	f7fe f8a4 	bl	8015320 <rcl_client_is_valid>
 80171d8:	b360      	cbz	r0, 8017234 <rcl_action_wait_set_add_action_client+0x8c>
 80171da:	6820      	ldr	r0, [r4, #0]
 80171dc:	300c      	adds	r0, #12
 80171de:	f7fe ff29 	bl	8016034 <rcl_subscription_is_valid>
 80171e2:	b338      	cbz	r0, 8017234 <rcl_action_wait_set_add_action_client+0x8c>
 80171e4:	6820      	ldr	r0, [r4, #0]
 80171e6:	3010      	adds	r0, #16
 80171e8:	f7fe ff24 	bl	8016034 <rcl_subscription_is_valid>
 80171ec:	b310      	cbz	r0, 8017234 <rcl_action_wait_set_add_action_client+0x8c>
 80171ee:	6821      	ldr	r1, [r4, #0]
 80171f0:	4628      	mov	r0, r5
 80171f2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80171f6:	f7ff fccd 	bl	8016b94 <rcl_wait_set_add_client>
 80171fa:	b9b8      	cbnz	r0, 801722c <rcl_action_wait_set_add_action_client+0x84>
 80171fc:	6821      	ldr	r1, [r4, #0]
 80171fe:	4628      	mov	r0, r5
 8017200:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8017204:	3104      	adds	r1, #4
 8017206:	f7ff fcc5 	bl	8016b94 <rcl_wait_set_add_client>
 801720a:	b978      	cbnz	r0, 801722c <rcl_action_wait_set_add_action_client+0x84>
 801720c:	6821      	ldr	r1, [r4, #0]
 801720e:	4628      	mov	r0, r5
 8017210:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8017214:	3108      	adds	r1, #8
 8017216:	f7ff fcbd 	bl	8016b94 <rcl_wait_set_add_client>
 801721a:	b938      	cbnz	r0, 801722c <rcl_action_wait_set_add_action_client+0x84>
 801721c:	6821      	ldr	r1, [r4, #0]
 801721e:	4628      	mov	r0, r5
 8017220:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8017224:	310c      	adds	r1, #12
 8017226:	f7ff f96d 	bl	8016504 <rcl_wait_set_add_subscription>
 801722a:	b158      	cbz	r0, 8017244 <rcl_action_wait_set_add_action_client+0x9c>
 801722c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801722e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017234:	f7fa fabc 	bl	80117b0 <rcutils_reset_error>
 8017238:	f640 0036 	movw	r0, #2102	@ 0x836
 801723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801723e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017242:	4770      	bx	lr
 8017244:	6821      	ldr	r1, [r4, #0]
 8017246:	4628      	mov	r0, r5
 8017248:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801724c:	3110      	adds	r1, #16
 801724e:	f7ff f959 	bl	8016504 <rcl_wait_set_add_subscription>
 8017252:	2800      	cmp	r0, #0
 8017254:	d1ea      	bne.n	801722c <rcl_action_wait_set_add_action_client+0x84>
 8017256:	b11f      	cbz	r7, 8017260 <rcl_action_wait_set_add_action_client+0xb8>
 8017258:	6823      	ldr	r3, [r4, #0]
 801725a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801725e:	603b      	str	r3, [r7, #0]
 8017260:	2e00      	cmp	r6, #0
 8017262:	d0e3      	beq.n	801722c <rcl_action_wait_set_add_action_client+0x84>
 8017264:	6823      	ldr	r3, [r4, #0]
 8017266:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801726a:	6033      	str	r3, [r6, #0]
 801726c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801726e:	bf00      	nop

08017270 <rcl_action_client_wait_set_get_entities_ready>:
 8017270:	2800      	cmp	r0, #0
 8017272:	f000 808d 	beq.w	8017390 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8017276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727a:	460c      	mov	r4, r1
 801727c:	2900      	cmp	r1, #0
 801727e:	d077      	beq.n	8017370 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8017280:	4605      	mov	r5, r0
 8017282:	6808      	ldr	r0, [r1, #0]
 8017284:	2800      	cmp	r0, #0
 8017286:	d073      	beq.n	8017370 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8017288:	4616      	mov	r6, r2
 801728a:	461f      	mov	r7, r3
 801728c:	f7fe f848 	bl	8015320 <rcl_client_is_valid>
 8017290:	2800      	cmp	r0, #0
 8017292:	d071      	beq.n	8017378 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8017294:	6820      	ldr	r0, [r4, #0]
 8017296:	3004      	adds	r0, #4
 8017298:	f7fe f842 	bl	8015320 <rcl_client_is_valid>
 801729c:	2800      	cmp	r0, #0
 801729e:	d06b      	beq.n	8017378 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80172a0:	6820      	ldr	r0, [r4, #0]
 80172a2:	3008      	adds	r0, #8
 80172a4:	f7fe f83c 	bl	8015320 <rcl_client_is_valid>
 80172a8:	2800      	cmp	r0, #0
 80172aa:	d065      	beq.n	8017378 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80172ac:	6820      	ldr	r0, [r4, #0]
 80172ae:	300c      	adds	r0, #12
 80172b0:	f7fe fec0 	bl	8016034 <rcl_subscription_is_valid>
 80172b4:	2800      	cmp	r0, #0
 80172b6:	d05f      	beq.n	8017378 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80172b8:	6820      	ldr	r0, [r4, #0]
 80172ba:	3010      	adds	r0, #16
 80172bc:	f7fe feba 	bl	8016034 <rcl_subscription_is_valid>
 80172c0:	2800      	cmp	r0, #0
 80172c2:	d059      	beq.n	8017378 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80172c4:	2e00      	cmp	r6, #0
 80172c6:	d060      	beq.n	801738a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80172c8:	2f00      	cmp	r7, #0
 80172ca:	d05e      	beq.n	801738a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80172cc:	9b06      	ldr	r3, [sp, #24]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d05b      	beq.n	801738a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80172d2:	9b07      	ldr	r3, [sp, #28]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d058      	beq.n	801738a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80172d8:	9b08      	ldr	r3, [sp, #32]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d055      	beq.n	801738a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	686a      	ldr	r2, [r5, #4]
 80172e2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80172e6:	428a      	cmp	r2, r1
 80172e8:	d94c      	bls.n	8017384 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80172ea:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80172ee:	4282      	cmp	r2, r0
 80172f0:	d948      	bls.n	8017384 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80172f2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80172f6:	69ea      	ldr	r2, [r5, #28]
 80172f8:	42a2      	cmp	r2, r4
 80172fa:	d943      	bls.n	8017384 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80172fc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8017300:	4562      	cmp	r2, ip
 8017302:	d93f      	bls.n	8017384 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8017304:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8017308:	4572      	cmp	r2, lr
 801730a:	d93b      	bls.n	8017384 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801730c:	69aa      	ldr	r2, [r5, #24]
 801730e:	682d      	ldr	r5, [r5, #0]
 8017310:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8017314:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8017318:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801731c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8017320:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8017324:	f103 0c0c 	add.w	ip, r3, #12
 8017328:	eba5 050c 	sub.w	r5, r5, ip
 801732c:	fab5 f585 	clz	r5, r5
 8017330:	096d      	lsrs	r5, r5, #5
 8017332:	7035      	strb	r5, [r6, #0]
 8017334:	f103 0510 	add.w	r5, r3, #16
 8017338:	1b64      	subs	r4, r4, r5
 801733a:	fab4 f484 	clz	r4, r4
 801733e:	0964      	lsrs	r4, r4, #5
 8017340:	703c      	strb	r4, [r7, #0]
 8017342:	eba3 0008 	sub.w	r0, r3, r8
 8017346:	1d1c      	adds	r4, r3, #4
 8017348:	3308      	adds	r3, #8
 801734a:	1ad3      	subs	r3, r2, r3
 801734c:	fab0 f080 	clz	r0, r0
 8017350:	9a06      	ldr	r2, [sp, #24]
 8017352:	0940      	lsrs	r0, r0, #5
 8017354:	1b09      	subs	r1, r1, r4
 8017356:	7010      	strb	r0, [r2, #0]
 8017358:	fab1 f181 	clz	r1, r1
 801735c:	9a07      	ldr	r2, [sp, #28]
 801735e:	0949      	lsrs	r1, r1, #5
 8017360:	7011      	strb	r1, [r2, #0]
 8017362:	fab3 f383 	clz	r3, r3
 8017366:	9a08      	ldr	r2, [sp, #32]
 8017368:	095b      	lsrs	r3, r3, #5
 801736a:	2000      	movs	r0, #0
 801736c:	7013      	strb	r3, [r2, #0]
 801736e:	e001      	b.n	8017374 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8017370:	f640 0036 	movw	r0, #2102	@ 0x836
 8017374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017378:	f7fa fa1a 	bl	80117b0 <rcutils_reset_error>
 801737c:	f640 0036 	movw	r0, #2102	@ 0x836
 8017380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017384:	2001      	movs	r0, #1
 8017386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801738a:	200b      	movs	r0, #11
 801738c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017390:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017394:	4770      	bx	lr
 8017396:	bf00      	nop

08017398 <rcl_action_take_goal_request>:
 8017398:	2800      	cmp	r0, #0
 801739a:	d039      	beq.n	8017410 <rcl_action_take_goal_request+0x78>
 801739c:	b570      	push	{r4, r5, r6, lr}
 801739e:	4604      	mov	r4, r0
 80173a0:	6800      	ldr	r0, [r0, #0]
 80173a2:	b380      	cbz	r0, 8017406 <rcl_action_take_goal_request+0x6e>
 80173a4:	460d      	mov	r5, r1
 80173a6:	4616      	mov	r6, r2
 80173a8:	f7fe fd00 	bl	8015dac <rcl_service_is_valid>
 80173ac:	b330      	cbz	r0, 80173fc <rcl_action_take_goal_request+0x64>
 80173ae:	6820      	ldr	r0, [r4, #0]
 80173b0:	3004      	adds	r0, #4
 80173b2:	f7fe fcfb 	bl	8015dac <rcl_service_is_valid>
 80173b6:	b308      	cbz	r0, 80173fc <rcl_action_take_goal_request+0x64>
 80173b8:	6820      	ldr	r0, [r4, #0]
 80173ba:	3008      	adds	r0, #8
 80173bc:	f7fe fcf6 	bl	8015dac <rcl_service_is_valid>
 80173c0:	b1e0      	cbz	r0, 80173fc <rcl_action_take_goal_request+0x64>
 80173c2:	6820      	ldr	r0, [r4, #0]
 80173c4:	300c      	adds	r0, #12
 80173c6:	f7f9 fa6b 	bl	80108a0 <rcl_publisher_is_valid>
 80173ca:	b1b8      	cbz	r0, 80173fc <rcl_action_take_goal_request+0x64>
 80173cc:	6820      	ldr	r0, [r4, #0]
 80173ce:	3010      	adds	r0, #16
 80173d0:	f7f9 fa66 	bl	80108a0 <rcl_publisher_is_valid>
 80173d4:	b190      	cbz	r0, 80173fc <rcl_action_take_goal_request+0x64>
 80173d6:	b1cd      	cbz	r5, 801740c <rcl_action_take_goal_request+0x74>
 80173d8:	b1c6      	cbz	r6, 801740c <rcl_action_take_goal_request+0x74>
 80173da:	6820      	ldr	r0, [r4, #0]
 80173dc:	4632      	mov	r2, r6
 80173de:	4629      	mov	r1, r5
 80173e0:	f7fe fc8c 	bl	8015cfc <rcl_take_request>
 80173e4:	b148      	cbz	r0, 80173fa <rcl_action_take_goal_request+0x62>
 80173e6:	280a      	cmp	r0, #10
 80173e8:	d007      	beq.n	80173fa <rcl_action_take_goal_request+0x62>
 80173ea:	f240 2259 	movw	r2, #601	@ 0x259
 80173ee:	f640 0399 	movw	r3, #2201	@ 0x899
 80173f2:	4290      	cmp	r0, r2
 80173f4:	bf0c      	ite	eq
 80173f6:	4618      	moveq	r0, r3
 80173f8:	2001      	movne	r0, #1
 80173fa:	bd70      	pop	{r4, r5, r6, pc}
 80173fc:	f7fa f9d8 	bl	80117b0 <rcutils_reset_error>
 8017400:	f640 0098 	movw	r0, #2200	@ 0x898
 8017404:	bd70      	pop	{r4, r5, r6, pc}
 8017406:	f640 0098 	movw	r0, #2200	@ 0x898
 801740a:	bd70      	pop	{r4, r5, r6, pc}
 801740c:	200b      	movs	r0, #11
 801740e:	bd70      	pop	{r4, r5, r6, pc}
 8017410:	f640 0098 	movw	r0, #2200	@ 0x898
 8017414:	4770      	bx	lr
 8017416:	bf00      	nop

08017418 <rcl_action_send_goal_response>:
 8017418:	b390      	cbz	r0, 8017480 <rcl_action_send_goal_response+0x68>
 801741a:	b570      	push	{r4, r5, r6, lr}
 801741c:	4604      	mov	r4, r0
 801741e:	6800      	ldr	r0, [r0, #0]
 8017420:	b348      	cbz	r0, 8017476 <rcl_action_send_goal_response+0x5e>
 8017422:	460d      	mov	r5, r1
 8017424:	4616      	mov	r6, r2
 8017426:	f7fe fcc1 	bl	8015dac <rcl_service_is_valid>
 801742a:	b1f8      	cbz	r0, 801746c <rcl_action_send_goal_response+0x54>
 801742c:	6820      	ldr	r0, [r4, #0]
 801742e:	3004      	adds	r0, #4
 8017430:	f7fe fcbc 	bl	8015dac <rcl_service_is_valid>
 8017434:	b1d0      	cbz	r0, 801746c <rcl_action_send_goal_response+0x54>
 8017436:	6820      	ldr	r0, [r4, #0]
 8017438:	3008      	adds	r0, #8
 801743a:	f7fe fcb7 	bl	8015dac <rcl_service_is_valid>
 801743e:	b1a8      	cbz	r0, 801746c <rcl_action_send_goal_response+0x54>
 8017440:	6820      	ldr	r0, [r4, #0]
 8017442:	300c      	adds	r0, #12
 8017444:	f7f9 fa2c 	bl	80108a0 <rcl_publisher_is_valid>
 8017448:	b180      	cbz	r0, 801746c <rcl_action_send_goal_response+0x54>
 801744a:	6820      	ldr	r0, [r4, #0]
 801744c:	3010      	adds	r0, #16
 801744e:	f7f9 fa27 	bl	80108a0 <rcl_publisher_is_valid>
 8017452:	b158      	cbz	r0, 801746c <rcl_action_send_goal_response+0x54>
 8017454:	b195      	cbz	r5, 801747c <rcl_action_send_goal_response+0x64>
 8017456:	b18e      	cbz	r6, 801747c <rcl_action_send_goal_response+0x64>
 8017458:	6820      	ldr	r0, [r4, #0]
 801745a:	4632      	mov	r2, r6
 801745c:	4629      	mov	r1, r5
 801745e:	f7fe fc8d 	bl	8015d7c <rcl_send_response>
 8017462:	b110      	cbz	r0, 801746a <rcl_action_send_goal_response+0x52>
 8017464:	2802      	cmp	r0, #2
 8017466:	bf18      	it	ne
 8017468:	2001      	movne	r0, #1
 801746a:	bd70      	pop	{r4, r5, r6, pc}
 801746c:	f7fa f9a0 	bl	80117b0 <rcutils_reset_error>
 8017470:	f640 0098 	movw	r0, #2200	@ 0x898
 8017474:	bd70      	pop	{r4, r5, r6, pc}
 8017476:	f640 0098 	movw	r0, #2200	@ 0x898
 801747a:	bd70      	pop	{r4, r5, r6, pc}
 801747c:	200b      	movs	r0, #11
 801747e:	bd70      	pop	{r4, r5, r6, pc}
 8017480:	f640 0098 	movw	r0, #2200	@ 0x898
 8017484:	4770      	bx	lr
 8017486:	bf00      	nop

08017488 <rcl_action_take_result_request>:
 8017488:	2800      	cmp	r0, #0
 801748a:	d03a      	beq.n	8017502 <rcl_action_take_result_request+0x7a>
 801748c:	b570      	push	{r4, r5, r6, lr}
 801748e:	4604      	mov	r4, r0
 8017490:	6800      	ldr	r0, [r0, #0]
 8017492:	b388      	cbz	r0, 80174f8 <rcl_action_take_result_request+0x70>
 8017494:	460d      	mov	r5, r1
 8017496:	4616      	mov	r6, r2
 8017498:	f7fe fc88 	bl	8015dac <rcl_service_is_valid>
 801749c:	b338      	cbz	r0, 80174ee <rcl_action_take_result_request+0x66>
 801749e:	6820      	ldr	r0, [r4, #0]
 80174a0:	3004      	adds	r0, #4
 80174a2:	f7fe fc83 	bl	8015dac <rcl_service_is_valid>
 80174a6:	b310      	cbz	r0, 80174ee <rcl_action_take_result_request+0x66>
 80174a8:	6820      	ldr	r0, [r4, #0]
 80174aa:	3008      	adds	r0, #8
 80174ac:	f7fe fc7e 	bl	8015dac <rcl_service_is_valid>
 80174b0:	b1e8      	cbz	r0, 80174ee <rcl_action_take_result_request+0x66>
 80174b2:	6820      	ldr	r0, [r4, #0]
 80174b4:	300c      	adds	r0, #12
 80174b6:	f7f9 f9f3 	bl	80108a0 <rcl_publisher_is_valid>
 80174ba:	b1c0      	cbz	r0, 80174ee <rcl_action_take_result_request+0x66>
 80174bc:	6820      	ldr	r0, [r4, #0]
 80174be:	3010      	adds	r0, #16
 80174c0:	f7f9 f9ee 	bl	80108a0 <rcl_publisher_is_valid>
 80174c4:	b198      	cbz	r0, 80174ee <rcl_action_take_result_request+0x66>
 80174c6:	b1d5      	cbz	r5, 80174fe <rcl_action_take_result_request+0x76>
 80174c8:	b1ce      	cbz	r6, 80174fe <rcl_action_take_result_request+0x76>
 80174ca:	6820      	ldr	r0, [r4, #0]
 80174cc:	4632      	mov	r2, r6
 80174ce:	4629      	mov	r1, r5
 80174d0:	3008      	adds	r0, #8
 80174d2:	f7fe fc13 	bl	8015cfc <rcl_take_request>
 80174d6:	b148      	cbz	r0, 80174ec <rcl_action_take_result_request+0x64>
 80174d8:	280a      	cmp	r0, #10
 80174da:	d007      	beq.n	80174ec <rcl_action_take_result_request+0x64>
 80174dc:	f240 2259 	movw	r2, #601	@ 0x259
 80174e0:	f640 0399 	movw	r3, #2201	@ 0x899
 80174e4:	4290      	cmp	r0, r2
 80174e6:	bf0c      	ite	eq
 80174e8:	4618      	moveq	r0, r3
 80174ea:	2001      	movne	r0, #1
 80174ec:	bd70      	pop	{r4, r5, r6, pc}
 80174ee:	f7fa f95f 	bl	80117b0 <rcutils_reset_error>
 80174f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80174f6:	bd70      	pop	{r4, r5, r6, pc}
 80174f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80174fc:	bd70      	pop	{r4, r5, r6, pc}
 80174fe:	200b      	movs	r0, #11
 8017500:	bd70      	pop	{r4, r5, r6, pc}
 8017502:	f640 0098 	movw	r0, #2200	@ 0x898
 8017506:	4770      	bx	lr

08017508 <rcl_action_take_cancel_request>:
 8017508:	2800      	cmp	r0, #0
 801750a:	d03a      	beq.n	8017582 <rcl_action_take_cancel_request+0x7a>
 801750c:	b570      	push	{r4, r5, r6, lr}
 801750e:	4604      	mov	r4, r0
 8017510:	6800      	ldr	r0, [r0, #0]
 8017512:	b388      	cbz	r0, 8017578 <rcl_action_take_cancel_request+0x70>
 8017514:	460d      	mov	r5, r1
 8017516:	4616      	mov	r6, r2
 8017518:	f7fe fc48 	bl	8015dac <rcl_service_is_valid>
 801751c:	b338      	cbz	r0, 801756e <rcl_action_take_cancel_request+0x66>
 801751e:	6820      	ldr	r0, [r4, #0]
 8017520:	3004      	adds	r0, #4
 8017522:	f7fe fc43 	bl	8015dac <rcl_service_is_valid>
 8017526:	b310      	cbz	r0, 801756e <rcl_action_take_cancel_request+0x66>
 8017528:	6820      	ldr	r0, [r4, #0]
 801752a:	3008      	adds	r0, #8
 801752c:	f7fe fc3e 	bl	8015dac <rcl_service_is_valid>
 8017530:	b1e8      	cbz	r0, 801756e <rcl_action_take_cancel_request+0x66>
 8017532:	6820      	ldr	r0, [r4, #0]
 8017534:	300c      	adds	r0, #12
 8017536:	f7f9 f9b3 	bl	80108a0 <rcl_publisher_is_valid>
 801753a:	b1c0      	cbz	r0, 801756e <rcl_action_take_cancel_request+0x66>
 801753c:	6820      	ldr	r0, [r4, #0]
 801753e:	3010      	adds	r0, #16
 8017540:	f7f9 f9ae 	bl	80108a0 <rcl_publisher_is_valid>
 8017544:	b198      	cbz	r0, 801756e <rcl_action_take_cancel_request+0x66>
 8017546:	b1d5      	cbz	r5, 801757e <rcl_action_take_cancel_request+0x76>
 8017548:	b1ce      	cbz	r6, 801757e <rcl_action_take_cancel_request+0x76>
 801754a:	6820      	ldr	r0, [r4, #0]
 801754c:	4632      	mov	r2, r6
 801754e:	4629      	mov	r1, r5
 8017550:	3004      	adds	r0, #4
 8017552:	f7fe fbd3 	bl	8015cfc <rcl_take_request>
 8017556:	b148      	cbz	r0, 801756c <rcl_action_take_cancel_request+0x64>
 8017558:	280a      	cmp	r0, #10
 801755a:	d007      	beq.n	801756c <rcl_action_take_cancel_request+0x64>
 801755c:	f240 2259 	movw	r2, #601	@ 0x259
 8017560:	f640 0399 	movw	r3, #2201	@ 0x899
 8017564:	4290      	cmp	r0, r2
 8017566:	bf0c      	ite	eq
 8017568:	4618      	moveq	r0, r3
 801756a:	2001      	movne	r0, #1
 801756c:	bd70      	pop	{r4, r5, r6, pc}
 801756e:	f7fa f91f 	bl	80117b0 <rcutils_reset_error>
 8017572:	f640 0098 	movw	r0, #2200	@ 0x898
 8017576:	bd70      	pop	{r4, r5, r6, pc}
 8017578:	f640 0098 	movw	r0, #2200	@ 0x898
 801757c:	bd70      	pop	{r4, r5, r6, pc}
 801757e:	200b      	movs	r0, #11
 8017580:	bd70      	pop	{r4, r5, r6, pc}
 8017582:	f640 0098 	movw	r0, #2200	@ 0x898
 8017586:	4770      	bx	lr

08017588 <rcl_action_send_cancel_response>:
 8017588:	b398      	cbz	r0, 80175f2 <rcl_action_send_cancel_response+0x6a>
 801758a:	b570      	push	{r4, r5, r6, lr}
 801758c:	4604      	mov	r4, r0
 801758e:	6800      	ldr	r0, [r0, #0]
 8017590:	b350      	cbz	r0, 80175e8 <rcl_action_send_cancel_response+0x60>
 8017592:	460d      	mov	r5, r1
 8017594:	4616      	mov	r6, r2
 8017596:	f7fe fc09 	bl	8015dac <rcl_service_is_valid>
 801759a:	b300      	cbz	r0, 80175de <rcl_action_send_cancel_response+0x56>
 801759c:	6820      	ldr	r0, [r4, #0]
 801759e:	3004      	adds	r0, #4
 80175a0:	f7fe fc04 	bl	8015dac <rcl_service_is_valid>
 80175a4:	b1d8      	cbz	r0, 80175de <rcl_action_send_cancel_response+0x56>
 80175a6:	6820      	ldr	r0, [r4, #0]
 80175a8:	3008      	adds	r0, #8
 80175aa:	f7fe fbff 	bl	8015dac <rcl_service_is_valid>
 80175ae:	b1b0      	cbz	r0, 80175de <rcl_action_send_cancel_response+0x56>
 80175b0:	6820      	ldr	r0, [r4, #0]
 80175b2:	300c      	adds	r0, #12
 80175b4:	f7f9 f974 	bl	80108a0 <rcl_publisher_is_valid>
 80175b8:	b188      	cbz	r0, 80175de <rcl_action_send_cancel_response+0x56>
 80175ba:	6820      	ldr	r0, [r4, #0]
 80175bc:	3010      	adds	r0, #16
 80175be:	f7f9 f96f 	bl	80108a0 <rcl_publisher_is_valid>
 80175c2:	b160      	cbz	r0, 80175de <rcl_action_send_cancel_response+0x56>
 80175c4:	b19d      	cbz	r5, 80175ee <rcl_action_send_cancel_response+0x66>
 80175c6:	b196      	cbz	r6, 80175ee <rcl_action_send_cancel_response+0x66>
 80175c8:	6820      	ldr	r0, [r4, #0]
 80175ca:	4632      	mov	r2, r6
 80175cc:	4629      	mov	r1, r5
 80175ce:	3004      	adds	r0, #4
 80175d0:	f7fe fbd4 	bl	8015d7c <rcl_send_response>
 80175d4:	b110      	cbz	r0, 80175dc <rcl_action_send_cancel_response+0x54>
 80175d6:	2802      	cmp	r0, #2
 80175d8:	bf18      	it	ne
 80175da:	2001      	movne	r0, #1
 80175dc:	bd70      	pop	{r4, r5, r6, pc}
 80175de:	f7fa f8e7 	bl	80117b0 <rcutils_reset_error>
 80175e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80175e6:	bd70      	pop	{r4, r5, r6, pc}
 80175e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80175ec:	bd70      	pop	{r4, r5, r6, pc}
 80175ee:	200b      	movs	r0, #11
 80175f0:	bd70      	pop	{r4, r5, r6, pc}
 80175f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80175f6:	4770      	bx	lr

080175f8 <rcl_action_wait_set_add_action_server>:
 80175f8:	2800      	cmp	r0, #0
 80175fa:	d04d      	beq.n	8017698 <rcl_action_wait_set_add_action_server+0xa0>
 80175fc:	b570      	push	{r4, r5, r6, lr}
 80175fe:	460c      	mov	r4, r1
 8017600:	b159      	cbz	r1, 801761a <rcl_action_wait_set_add_action_server+0x22>
 8017602:	4605      	mov	r5, r0
 8017604:	6808      	ldr	r0, [r1, #0]
 8017606:	b140      	cbz	r0, 801761a <rcl_action_wait_set_add_action_server+0x22>
 8017608:	4616      	mov	r6, r2
 801760a:	f7fe fbcf 	bl	8015dac <rcl_service_is_valid>
 801760e:	b120      	cbz	r0, 801761a <rcl_action_wait_set_add_action_server+0x22>
 8017610:	6820      	ldr	r0, [r4, #0]
 8017612:	3004      	adds	r0, #4
 8017614:	f7fe fbca 	bl	8015dac <rcl_service_is_valid>
 8017618:	b910      	cbnz	r0, 8017620 <rcl_action_wait_set_add_action_server+0x28>
 801761a:	f640 0098 	movw	r0, #2200	@ 0x898
 801761e:	bd70      	pop	{r4, r5, r6, pc}
 8017620:	6820      	ldr	r0, [r4, #0]
 8017622:	3008      	adds	r0, #8
 8017624:	f7fe fbc2 	bl	8015dac <rcl_service_is_valid>
 8017628:	2800      	cmp	r0, #0
 801762a:	d0f6      	beq.n	801761a <rcl_action_wait_set_add_action_server+0x22>
 801762c:	6820      	ldr	r0, [r4, #0]
 801762e:	300c      	adds	r0, #12
 8017630:	f7f9 f94e 	bl	80108d0 <rcl_publisher_is_valid_except_context>
 8017634:	2800      	cmp	r0, #0
 8017636:	d0f0      	beq.n	801761a <rcl_action_wait_set_add_action_server+0x22>
 8017638:	6820      	ldr	r0, [r4, #0]
 801763a:	3010      	adds	r0, #16
 801763c:	f7f9 f948 	bl	80108d0 <rcl_publisher_is_valid_except_context>
 8017640:	2800      	cmp	r0, #0
 8017642:	d0ea      	beq.n	801761a <rcl_action_wait_set_add_action_server+0x22>
 8017644:	6821      	ldr	r1, [r4, #0]
 8017646:	4628      	mov	r0, r5
 8017648:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801764c:	f7ff face 	bl	8016bec <rcl_wait_set_add_service>
 8017650:	2800      	cmp	r0, #0
 8017652:	d1e4      	bne.n	801761e <rcl_action_wait_set_add_action_server+0x26>
 8017654:	6821      	ldr	r1, [r4, #0]
 8017656:	4628      	mov	r0, r5
 8017658:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801765c:	3104      	adds	r1, #4
 801765e:	f7ff fac5 	bl	8016bec <rcl_wait_set_add_service>
 8017662:	2800      	cmp	r0, #0
 8017664:	d1db      	bne.n	801761e <rcl_action_wait_set_add_action_server+0x26>
 8017666:	6821      	ldr	r1, [r4, #0]
 8017668:	4628      	mov	r0, r5
 801766a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801766e:	3108      	adds	r1, #8
 8017670:	f7ff fabc 	bl	8016bec <rcl_wait_set_add_service>
 8017674:	2800      	cmp	r0, #0
 8017676:	d1d2      	bne.n	801761e <rcl_action_wait_set_add_action_server+0x26>
 8017678:	6821      	ldr	r1, [r4, #0]
 801767a:	4628      	mov	r0, r5
 801767c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8017680:	3114      	adds	r1, #20
 8017682:	f7ff fa57 	bl	8016b34 <rcl_wait_set_add_timer>
 8017686:	2800      	cmp	r0, #0
 8017688:	d1c9      	bne.n	801761e <rcl_action_wait_set_add_action_server+0x26>
 801768a:	2e00      	cmp	r6, #0
 801768c:	d0c7      	beq.n	801761e <rcl_action_wait_set_add_action_server+0x26>
 801768e:	6823      	ldr	r3, [r4, #0]
 8017690:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8017694:	6033      	str	r3, [r6, #0]
 8017696:	bd70      	pop	{r4, r5, r6, pc}
 8017698:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801769c:	4770      	bx	lr
 801769e:	bf00      	nop

080176a0 <rcl_action_server_wait_set_get_entities_ready>:
 80176a0:	2800      	cmp	r0, #0
 80176a2:	d05a      	beq.n	801775a <rcl_action_server_wait_set_get_entities_ready+0xba>
 80176a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176a6:	460c      	mov	r4, r1
 80176a8:	b161      	cbz	r1, 80176c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80176aa:	4605      	mov	r5, r0
 80176ac:	6808      	ldr	r0, [r1, #0]
 80176ae:	b148      	cbz	r0, 80176c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80176b0:	4616      	mov	r6, r2
 80176b2:	461f      	mov	r7, r3
 80176b4:	f7fe fb7a 	bl	8015dac <rcl_service_is_valid>
 80176b8:	b120      	cbz	r0, 80176c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80176ba:	6820      	ldr	r0, [r4, #0]
 80176bc:	3004      	adds	r0, #4
 80176be:	f7fe fb75 	bl	8015dac <rcl_service_is_valid>
 80176c2:	b910      	cbnz	r0, 80176ca <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80176c4:	f640 0098 	movw	r0, #2200	@ 0x898
 80176c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176ca:	6820      	ldr	r0, [r4, #0]
 80176cc:	3008      	adds	r0, #8
 80176ce:	f7fe fb6d 	bl	8015dac <rcl_service_is_valid>
 80176d2:	2800      	cmp	r0, #0
 80176d4:	d0f6      	beq.n	80176c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80176d6:	6820      	ldr	r0, [r4, #0]
 80176d8:	300c      	adds	r0, #12
 80176da:	f7f9 f8f9 	bl	80108d0 <rcl_publisher_is_valid_except_context>
 80176de:	2800      	cmp	r0, #0
 80176e0:	d0f0      	beq.n	80176c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80176e2:	6820      	ldr	r0, [r4, #0]
 80176e4:	3010      	adds	r0, #16
 80176e6:	f7f9 f8f3 	bl	80108d0 <rcl_publisher_is_valid_except_context>
 80176ea:	2800      	cmp	r0, #0
 80176ec:	d0ea      	beq.n	80176c4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80176ee:	b3be      	cbz	r6, 8017760 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80176f0:	b3b7      	cbz	r7, 8017760 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80176f2:	9b06      	ldr	r3, [sp, #24]
 80176f4:	b3a3      	cbz	r3, 8017760 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80176f6:	9b07      	ldr	r3, [sp, #28]
 80176f8:	b393      	cbz	r3, 8017760 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80176fa:	6821      	ldr	r1, [r4, #0]
 80176fc:	692a      	ldr	r2, [r5, #16]
 80176fe:	6a2c      	ldr	r4, [r5, #32]
 8017700:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8017704:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8017708:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801770c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8017710:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8017714:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8017718:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801771c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8017720:	1a64      	subs	r4, r4, r1
 8017722:	fab4 f484 	clz	r4, r4
 8017726:	0964      	lsrs	r4, r4, #5
 8017728:	7034      	strb	r4, [r6, #0]
 801772a:	1d0c      	adds	r4, r1, #4
 801772c:	1b1b      	subs	r3, r3, r4
 801772e:	fab3 f383 	clz	r3, r3
 8017732:	095b      	lsrs	r3, r3, #5
 8017734:	f101 0408 	add.w	r4, r1, #8
 8017738:	703b      	strb	r3, [r7, #0]
 801773a:	f101 0314 	add.w	r3, r1, #20
 801773e:	1b01      	subs	r1, r0, r4
 8017740:	1ad3      	subs	r3, r2, r3
 8017742:	fab1 f181 	clz	r1, r1
 8017746:	9a06      	ldr	r2, [sp, #24]
 8017748:	0949      	lsrs	r1, r1, #5
 801774a:	7011      	strb	r1, [r2, #0]
 801774c:	fab3 f383 	clz	r3, r3
 8017750:	9a07      	ldr	r2, [sp, #28]
 8017752:	095b      	lsrs	r3, r3, #5
 8017754:	2000      	movs	r0, #0
 8017756:	7013      	strb	r3, [r2, #0]
 8017758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801775a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801775e:	4770      	bx	lr
 8017760:	200b      	movs	r0, #11
 8017762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017764 <_execute_event_handler>:
 8017764:	2002      	movs	r0, #2
 8017766:	4770      	bx	lr

08017768 <_cancel_goal_event_handler>:
 8017768:	2003      	movs	r0, #3
 801776a:	4770      	bx	lr

0801776c <_succeed_event_handler>:
 801776c:	2004      	movs	r0, #4
 801776e:	4770      	bx	lr

08017770 <_abort_event_handler>:
 8017770:	2006      	movs	r0, #6
 8017772:	4770      	bx	lr

08017774 <_canceled_event_handler>:
 8017774:	2005      	movs	r0, #5
 8017776:	4770      	bx	lr

08017778 <rcl_action_transition_goal_state>:
 8017778:	b2c2      	uxtb	r2, r0
 801777a:	2a06      	cmp	r2, #6
 801777c:	d80c      	bhi.n	8017798 <rcl_action_transition_goal_state+0x20>
 801777e:	2904      	cmp	r1, #4
 8017780:	d80a      	bhi.n	8017798 <rcl_action_transition_goal_state+0x20>
 8017782:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8017786:	b410      	push	{r4}
 8017788:	1853      	adds	r3, r2, r1
 801778a:	4c06      	ldr	r4, [pc, #24]	@ (80177a4 <rcl_action_transition_goal_state+0x2c>)
 801778c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017790:	b123      	cbz	r3, 801779c <rcl_action_transition_goal_state+0x24>
 8017792:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017796:	4718      	bx	r3
 8017798:	2000      	movs	r0, #0
 801779a:	4770      	bx	lr
 801779c:	2000      	movs	r0, #0
 801779e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177a2:	4770      	bx	lr
 80177a4:	0801ddd4 	.word	0x0801ddd4

080177a8 <rcl_action_get_zero_initialized_cancel_response>:
 80177a8:	b510      	push	{r4, lr}
 80177aa:	4c07      	ldr	r4, [pc, #28]	@ (80177c8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80177ac:	4686      	mov	lr, r0
 80177ae:	4684      	mov	ip, r0
 80177b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80177b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80177bc:	6823      	ldr	r3, [r4, #0]
 80177be:	f8cc 3000 	str.w	r3, [ip]
 80177c2:	4670      	mov	r0, lr
 80177c4:	bd10      	pop	{r4, pc}
 80177c6:	bf00      	nop
 80177c8:	0801de60 	.word	0x0801de60

080177cc <rclc_action_send_result_request>:
 80177cc:	b1d0      	cbz	r0, 8017804 <rclc_action_send_result_request+0x38>
 80177ce:	b500      	push	{lr}
 80177d0:	4684      	mov	ip, r0
 80177d2:	b087      	sub	sp, #28
 80177d4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80177d8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80177dc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80177e0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80177e4:	f10d 0e08 	add.w	lr, sp, #8
 80177e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80177ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80177f0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80177f4:	a902      	add	r1, sp, #8
 80177f6:	3010      	adds	r0, #16
 80177f8:	f7ff fbda 	bl	8016fb0 <rcl_action_send_result_request>
 80177fc:	b920      	cbnz	r0, 8017808 <rclc_action_send_result_request+0x3c>
 80177fe:	b007      	add	sp, #28
 8017800:	f85d fb04 	ldr.w	pc, [sp], #4
 8017804:	200b      	movs	r0, #11
 8017806:	4770      	bx	lr
 8017808:	9001      	str	r0, [sp, #4]
 801780a:	f7f9 ffd1 	bl	80117b0 <rcutils_reset_error>
 801780e:	9801      	ldr	r0, [sp, #4]
 8017810:	b007      	add	sp, #28
 8017812:	f85d fb04 	ldr.w	pc, [sp], #4
 8017816:	bf00      	nop

08017818 <rclc_action_take_goal_handle>:
 8017818:	b160      	cbz	r0, 8017834 <rclc_action_take_goal_handle+0x1c>
 801781a:	6883      	ldr	r3, [r0, #8]
 801781c:	b143      	cbz	r3, 8017830 <rclc_action_take_goal_handle+0x18>
 801781e:	6819      	ldr	r1, [r3, #0]
 8017820:	6081      	str	r1, [r0, #8]
 8017822:	2200      	movs	r2, #0
 8017824:	721a      	strb	r2, [r3, #8]
 8017826:	68c1      	ldr	r1, [r0, #12]
 8017828:	6019      	str	r1, [r3, #0]
 801782a:	621a      	str	r2, [r3, #32]
 801782c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801782e:	60c3      	str	r3, [r0, #12]
 8017830:	4618      	mov	r0, r3
 8017832:	4770      	bx	lr
 8017834:	4603      	mov	r3, r0
 8017836:	e7fb      	b.n	8017830 <rclc_action_take_goal_handle+0x18>

08017838 <rclc_action_remove_used_goal_handle>:
 8017838:	b180      	cbz	r0, 801785c <rclc_action_remove_used_goal_handle+0x24>
 801783a:	b179      	cbz	r1, 801785c <rclc_action_remove_used_goal_handle+0x24>
 801783c:	68c3      	ldr	r3, [r0, #12]
 801783e:	4299      	cmp	r1, r3
 8017840:	d00d      	beq.n	801785e <rclc_action_remove_used_goal_handle+0x26>
 8017842:	b12b      	cbz	r3, 8017850 <rclc_action_remove_used_goal_handle+0x18>
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	4291      	cmp	r1, r2
 8017848:	d003      	beq.n	8017852 <rclc_action_remove_used_goal_handle+0x1a>
 801784a:	4613      	mov	r3, r2
 801784c:	2b00      	cmp	r3, #0
 801784e:	d1f9      	bne.n	8017844 <rclc_action_remove_used_goal_handle+0xc>
 8017850:	4770      	bx	lr
 8017852:	680a      	ldr	r2, [r1, #0]
 8017854:	601a      	str	r2, [r3, #0]
 8017856:	6883      	ldr	r3, [r0, #8]
 8017858:	600b      	str	r3, [r1, #0]
 801785a:	6081      	str	r1, [r0, #8]
 801785c:	4770      	bx	lr
 801785e:	680b      	ldr	r3, [r1, #0]
 8017860:	60c3      	str	r3, [r0, #12]
 8017862:	e7f8      	b.n	8017856 <rclc_action_remove_used_goal_handle+0x1e>

08017864 <rclc_action_find_goal_handle_by_uuid>:
 8017864:	b538      	push	{r3, r4, r5, lr}
 8017866:	b180      	cbz	r0, 801788a <rclc_action_find_goal_handle_by_uuid+0x26>
 8017868:	460d      	mov	r5, r1
 801786a:	b181      	cbz	r1, 801788e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801786c:	68c4      	ldr	r4, [r0, #12]
 801786e:	b914      	cbnz	r4, 8017876 <rclc_action_find_goal_handle_by_uuid+0x12>
 8017870:	e009      	b.n	8017886 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017872:	6824      	ldr	r4, [r4, #0]
 8017874:	b13c      	cbz	r4, 8017886 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017876:	f104 0009 	add.w	r0, r4, #9
 801787a:	2210      	movs	r2, #16
 801787c:	4629      	mov	r1, r5
 801787e:	f004 fd4f 	bl	801c320 <memcmp>
 8017882:	2800      	cmp	r0, #0
 8017884:	d1f5      	bne.n	8017872 <rclc_action_find_goal_handle_by_uuid+0xe>
 8017886:	4620      	mov	r0, r4
 8017888:	bd38      	pop	{r3, r4, r5, pc}
 801788a:	4604      	mov	r4, r0
 801788c:	e7fb      	b.n	8017886 <rclc_action_find_goal_handle_by_uuid+0x22>
 801788e:	460c      	mov	r4, r1
 8017890:	e7f9      	b.n	8017886 <rclc_action_find_goal_handle_by_uuid+0x22>
 8017892:	bf00      	nop

08017894 <rclc_action_find_first_handle_by_status>:
 8017894:	b140      	cbz	r0, 80178a8 <rclc_action_find_first_handle_by_status+0x14>
 8017896:	68c0      	ldr	r0, [r0, #12]
 8017898:	b910      	cbnz	r0, 80178a0 <rclc_action_find_first_handle_by_status+0xc>
 801789a:	e005      	b.n	80178a8 <rclc_action_find_first_handle_by_status+0x14>
 801789c:	6800      	ldr	r0, [r0, #0]
 801789e:	b118      	cbz	r0, 80178a8 <rclc_action_find_first_handle_by_status+0x14>
 80178a0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80178a4:	428b      	cmp	r3, r1
 80178a6:	d1f9      	bne.n	801789c <rclc_action_find_first_handle_by_status+0x8>
 80178a8:	4770      	bx	lr
 80178aa:	bf00      	nop

080178ac <rclc_action_find_first_terminated_handle>:
 80178ac:	b140      	cbz	r0, 80178c0 <rclc_action_find_first_terminated_handle+0x14>
 80178ae:	68c0      	ldr	r0, [r0, #12]
 80178b0:	b910      	cbnz	r0, 80178b8 <rclc_action_find_first_terminated_handle+0xc>
 80178b2:	e005      	b.n	80178c0 <rclc_action_find_first_terminated_handle+0x14>
 80178b4:	6800      	ldr	r0, [r0, #0]
 80178b6:	b118      	cbz	r0, 80178c0 <rclc_action_find_first_terminated_handle+0x14>
 80178b8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80178bc:	2b03      	cmp	r3, #3
 80178be:	ddf9      	ble.n	80178b4 <rclc_action_find_first_terminated_handle+0x8>
 80178c0:	4770      	bx	lr
 80178c2:	bf00      	nop

080178c4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80178c4:	b170      	cbz	r0, 80178e4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80178c6:	68c0      	ldr	r0, [r0, #12]
 80178c8:	b160      	cbz	r0, 80178e4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80178ca:	b410      	push	{r4}
 80178cc:	e001      	b.n	80178d2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80178ce:	6800      	ldr	r0, [r0, #0]
 80178d0:	b128      	cbz	r0, 80178de <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80178d2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80178d6:	4299      	cmp	r1, r3
 80178d8:	bf08      	it	eq
 80178da:	4294      	cmpeq	r4, r2
 80178dc:	d1f7      	bne.n	80178ce <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80178de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80178e2:	4770      	bx	lr
 80178e4:	4770      	bx	lr
 80178e6:	bf00      	nop

080178e8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80178e8:	b170      	cbz	r0, 8017908 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80178ea:	68c0      	ldr	r0, [r0, #12]
 80178ec:	b160      	cbz	r0, 8017908 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80178ee:	b410      	push	{r4}
 80178f0:	e001      	b.n	80178f6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80178f2:	6800      	ldr	r0, [r0, #0]
 80178f4:	b128      	cbz	r0, 8017902 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80178f6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80178fa:	4299      	cmp	r1, r3
 80178fc:	bf08      	it	eq
 80178fe:	4294      	cmpeq	r4, r2
 8017900:	d1f7      	bne.n	80178f2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8017902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017906:	4770      	bx	lr
 8017908:	4770      	bx	lr
 801790a:	bf00      	nop

0801790c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801790c:	b170      	cbz	r0, 801792c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801790e:	68c0      	ldr	r0, [r0, #12]
 8017910:	b160      	cbz	r0, 801792c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017912:	b410      	push	{r4}
 8017914:	e001      	b.n	801791a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8017916:	6800      	ldr	r0, [r0, #0]
 8017918:	b128      	cbz	r0, 8017926 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801791a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801791e:	4299      	cmp	r1, r3
 8017920:	bf08      	it	eq
 8017922:	4294      	cmpeq	r4, r2
 8017924:	d1f7      	bne.n	8017916 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8017926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801792a:	4770      	bx	lr
 801792c:	4770      	bx	lr
 801792e:	bf00      	nop

08017930 <rclc_action_find_first_handle_with_goal_response>:
 8017930:	b140      	cbz	r0, 8017944 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017932:	68c0      	ldr	r0, [r0, #12]
 8017934:	b910      	cbnz	r0, 801793c <rclc_action_find_first_handle_with_goal_response+0xc>
 8017936:	e005      	b.n	8017944 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017938:	6800      	ldr	r0, [r0, #0]
 801793a:	b118      	cbz	r0, 8017944 <rclc_action_find_first_handle_with_goal_response+0x14>
 801793c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017940:	2b00      	cmp	r3, #0
 8017942:	d0f9      	beq.n	8017938 <rclc_action_find_first_handle_with_goal_response+0x8>
 8017944:	4770      	bx	lr
 8017946:	bf00      	nop

08017948 <rclc_action_find_first_handle_with_result_response>:
 8017948:	b140      	cbz	r0, 801795c <rclc_action_find_first_handle_with_result_response+0x14>
 801794a:	68c0      	ldr	r0, [r0, #12]
 801794c:	b910      	cbnz	r0, 8017954 <rclc_action_find_first_handle_with_result_response+0xc>
 801794e:	e005      	b.n	801795c <rclc_action_find_first_handle_with_result_response+0x14>
 8017950:	6800      	ldr	r0, [r0, #0]
 8017952:	b118      	cbz	r0, 801795c <rclc_action_find_first_handle_with_result_response+0x14>
 8017954:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8017958:	2b00      	cmp	r3, #0
 801795a:	d0f9      	beq.n	8017950 <rclc_action_find_first_handle_with_result_response+0x8>
 801795c:	4770      	bx	lr
 801795e:	bf00      	nop

08017960 <rclc_action_server_response_goal_request>:
 8017960:	b198      	cbz	r0, 801798a <rclc_action_server_response_goal_request+0x2a>
 8017962:	b510      	push	{r4, lr}
 8017964:	6844      	ldr	r4, [r0, #4]
 8017966:	b086      	sub	sp, #24
 8017968:	2200      	movs	r2, #0
 801796a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801796e:	460b      	mov	r3, r1
 8017970:	9205      	str	r2, [sp, #20]
 8017972:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8017976:	aa03      	add	r2, sp, #12
 8017978:	f104 0010 	add.w	r0, r4, #16
 801797c:	f88d 300c 	strb.w	r3, [sp, #12]
 8017980:	f7ff fd4a 	bl	8017418 <rcl_action_send_goal_response>
 8017984:	b918      	cbnz	r0, 801798e <rclc_action_server_response_goal_request+0x2e>
 8017986:	b006      	add	sp, #24
 8017988:	bd10      	pop	{r4, pc}
 801798a:	200b      	movs	r0, #11
 801798c:	4770      	bx	lr
 801798e:	9001      	str	r0, [sp, #4]
 8017990:	f7f9 ff0e 	bl	80117b0 <rcutils_reset_error>
 8017994:	9801      	ldr	r0, [sp, #4]
 8017996:	b006      	add	sp, #24
 8017998:	bd10      	pop	{r4, pc}
 801799a:	bf00      	nop
 801799c:	0000      	movs	r0, r0
	...

080179a0 <rclc_action_server_goal_cancel_accept>:
 80179a0:	b310      	cbz	r0, 80179e8 <rclc_action_server_goal_cancel_accept+0x48>
 80179a2:	b510      	push	{r4, lr}
 80179a4:	b090      	sub	sp, #64	@ 0x40
 80179a6:	4604      	mov	r4, r0
 80179a8:	a806      	add	r0, sp, #24
 80179aa:	f7ff fefd 	bl	80177a8 <rcl_action_get_zero_initialized_cancel_response>
 80179ae:	2300      	movs	r3, #0
 80179b0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80179b4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80179b8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80179bc:	f88d 3018 	strb.w	r3, [sp, #24]
 80179c0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80179c4:	f8cd d01c 	str.w	sp, [sp, #28]
 80179c8:	46ec      	mov	ip, sp
 80179ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179ce:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80179f0 <rclc_action_server_goal_cancel_accept+0x50>
 80179d2:	6860      	ldr	r0, [r4, #4]
 80179d4:	aa06      	add	r2, sp, #24
 80179d6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80179da:	3010      	adds	r0, #16
 80179dc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80179e0:	f7ff fdd2 	bl	8017588 <rcl_action_send_cancel_response>
 80179e4:	b010      	add	sp, #64	@ 0x40
 80179e6:	bd10      	pop	{r4, pc}
 80179e8:	200b      	movs	r0, #11
 80179ea:	4770      	bx	lr
 80179ec:	f3af 8000 	nop.w
 80179f0:	00000001 	.word	0x00000001
 80179f4:	00000001 	.word	0x00000001

080179f8 <rclc_action_server_goal_cancel_reject>:
 80179f8:	b082      	sub	sp, #8
 80179fa:	b530      	push	{r4, r5, lr}
 80179fc:	b08b      	sub	sp, #44	@ 0x2c
 80179fe:	ac0e      	add	r4, sp, #56	@ 0x38
 8017a00:	e884 000c 	stmia.w	r4, {r2, r3}
 8017a04:	b188      	cbz	r0, 8017a2a <rclc_action_server_goal_cancel_reject+0x32>
 8017a06:	4604      	mov	r4, r0
 8017a08:	a801      	add	r0, sp, #4
 8017a0a:	460d      	mov	r5, r1
 8017a0c:	f7ff fecc 	bl	80177a8 <rcl_action_get_zero_initialized_cancel_response>
 8017a10:	aa01      	add	r2, sp, #4
 8017a12:	a90e      	add	r1, sp, #56	@ 0x38
 8017a14:	f104 0010 	add.w	r0, r4, #16
 8017a18:	f88d 5004 	strb.w	r5, [sp, #4]
 8017a1c:	f7ff fdb4 	bl	8017588 <rcl_action_send_cancel_response>
 8017a20:	b00b      	add	sp, #44	@ 0x2c
 8017a22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a26:	b002      	add	sp, #8
 8017a28:	4770      	bx	lr
 8017a2a:	200b      	movs	r0, #11
 8017a2c:	b00b      	add	sp, #44	@ 0x2c
 8017a2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a32:	b002      	add	sp, #8
 8017a34:	4770      	bx	lr
 8017a36:	bf00      	nop

08017a38 <__atomic_load_8>:
 8017a38:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017a3c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017a40:	4a15      	ldr	r2, [pc, #84]	@ (8017a98 <__atomic_load_8+0x60>)
 8017a42:	4b16      	ldr	r3, [pc, #88]	@ (8017a9c <__atomic_load_8+0x64>)
 8017a44:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017a48:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017a4c:	fb02 f101 	mul.w	r1, r2, r1
 8017a50:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017a54:	fba3 2301 	umull	r2, r3, r3, r1
 8017a58:	091b      	lsrs	r3, r3, #4
 8017a5a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017a5e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8017a62:	b4d0      	push	{r4, r6, r7}
 8017a64:	4c0e      	ldr	r4, [pc, #56]	@ (8017aa0 <__atomic_load_8+0x68>)
 8017a66:	1ac9      	subs	r1, r1, r3
 8017a68:	1862      	adds	r2, r4, r1
 8017a6a:	f04f 0c01 	mov.w	ip, #1
 8017a6e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8017a72:	e8c2 cf46 	strexb	r6, ip, [r2]
 8017a76:	2e00      	cmp	r6, #0
 8017a78:	d1f9      	bne.n	8017a6e <__atomic_load_8+0x36>
 8017a7a:	f3bf 8f5b 	dmb	ish
 8017a7e:	b2db      	uxtb	r3, r3
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d1f4      	bne.n	8017a6e <__atomic_load_8+0x36>
 8017a84:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017a88:	f3bf 8f5b 	dmb	ish
 8017a8c:	5463      	strb	r3, [r4, r1]
 8017a8e:	4630      	mov	r0, r6
 8017a90:	4639      	mov	r1, r7
 8017a92:	bcd0      	pop	{r4, r6, r7}
 8017a94:	4770      	bx	lr
 8017a96:	bf00      	nop
 8017a98:	27d4eb2d 	.word	0x27d4eb2d
 8017a9c:	b21642c9 	.word	0xb21642c9
 8017aa0:	2000e608 	.word	0x2000e608

08017aa4 <__atomic_store_8>:
 8017aa4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017aa8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017aac:	b570      	push	{r4, r5, r6, lr}
 8017aae:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017ab2:	4c14      	ldr	r4, [pc, #80]	@ (8017b04 <__atomic_store_8+0x60>)
 8017ab4:	4d14      	ldr	r5, [pc, #80]	@ (8017b08 <__atomic_store_8+0x64>)
 8017ab6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017aba:	fb04 f101 	mul.w	r1, r4, r1
 8017abe:	4c13      	ldr	r4, [pc, #76]	@ (8017b0c <__atomic_store_8+0x68>)
 8017ac0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017ac4:	fba4 4e01 	umull	r4, lr, r4, r1
 8017ac8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8017acc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8017ad0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8017ad4:	eba1 0e0e 	sub.w	lr, r1, lr
 8017ad8:	eb05 0c0e 	add.w	ip, r5, lr
 8017adc:	f04f 0401 	mov.w	r4, #1
 8017ae0:	e8dc 1f4f 	ldrexb	r1, [ip]
 8017ae4:	e8cc 4f46 	strexb	r6, r4, [ip]
 8017ae8:	2e00      	cmp	r6, #0
 8017aea:	d1f9      	bne.n	8017ae0 <__atomic_store_8+0x3c>
 8017aec:	f3bf 8f5b 	dmb	ish
 8017af0:	b2c9      	uxtb	r1, r1
 8017af2:	2900      	cmp	r1, #0
 8017af4:	d1f4      	bne.n	8017ae0 <__atomic_store_8+0x3c>
 8017af6:	e9c0 2300 	strd	r2, r3, [r0]
 8017afa:	f3bf 8f5b 	dmb	ish
 8017afe:	f805 100e 	strb.w	r1, [r5, lr]
 8017b02:	bd70      	pop	{r4, r5, r6, pc}
 8017b04:	27d4eb2d 	.word	0x27d4eb2d
 8017b08:	2000e608 	.word	0x2000e608
 8017b0c:	b21642c9 	.word	0xb21642c9

08017b10 <__atomic_exchange_8>:
 8017b10:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8017b14:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8017b18:	4916      	ldr	r1, [pc, #88]	@ (8017b74 <__atomic_exchange_8+0x64>)
 8017b1a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8017b1e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8017b22:	fb01 fc0c 	mul.w	ip, r1, ip
 8017b26:	4914      	ldr	r1, [pc, #80]	@ (8017b78 <__atomic_exchange_8+0x68>)
 8017b28:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8017b2c:	b570      	push	{r4, r5, r6, lr}
 8017b2e:	4605      	mov	r5, r0
 8017b30:	fba1 010c 	umull	r0, r1, r1, ip
 8017b34:	0909      	lsrs	r1, r1, #4
 8017b36:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8017b3a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8017b3e:	4e0f      	ldr	r6, [pc, #60]	@ (8017b7c <__atomic_exchange_8+0x6c>)
 8017b40:	ebac 0c01 	sub.w	ip, ip, r1
 8017b44:	eb06 010c 	add.w	r1, r6, ip
 8017b48:	f04f 0e01 	mov.w	lr, #1
 8017b4c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8017b50:	e8c1 ef40 	strexb	r0, lr, [r1]
 8017b54:	2800      	cmp	r0, #0
 8017b56:	d1f9      	bne.n	8017b4c <__atomic_exchange_8+0x3c>
 8017b58:	f3bf 8f5b 	dmb	ish
 8017b5c:	b2e4      	uxtb	r4, r4
 8017b5e:	2c00      	cmp	r4, #0
 8017b60:	d1f4      	bne.n	8017b4c <__atomic_exchange_8+0x3c>
 8017b62:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017b66:	e9c5 2300 	strd	r2, r3, [r5]
 8017b6a:	f3bf 8f5b 	dmb	ish
 8017b6e:	f806 400c 	strb.w	r4, [r6, ip]
 8017b72:	bd70      	pop	{r4, r5, r6, pc}
 8017b74:	27d4eb2d 	.word	0x27d4eb2d
 8017b78:	b21642c9 	.word	0xb21642c9
 8017b7c:	2000e608 	.word	0x2000e608

08017b80 <rcutils_get_env>:
 8017b80:	b168      	cbz	r0, 8017b9e <rcutils_get_env+0x1e>
 8017b82:	b510      	push	{r4, lr}
 8017b84:	460c      	mov	r4, r1
 8017b86:	b129      	cbz	r1, 8017b94 <rcutils_get_env+0x14>
 8017b88:	f004 f820 	bl	801bbcc <getenv>
 8017b8c:	b120      	cbz	r0, 8017b98 <rcutils_get_env+0x18>
 8017b8e:	6020      	str	r0, [r4, #0]
 8017b90:	2000      	movs	r0, #0
 8017b92:	bd10      	pop	{r4, pc}
 8017b94:	4803      	ldr	r0, [pc, #12]	@ (8017ba4 <rcutils_get_env+0x24>)
 8017b96:	bd10      	pop	{r4, pc}
 8017b98:	4b03      	ldr	r3, [pc, #12]	@ (8017ba8 <rcutils_get_env+0x28>)
 8017b9a:	6023      	str	r3, [r4, #0]
 8017b9c:	bd10      	pop	{r4, pc}
 8017b9e:	4803      	ldr	r0, [pc, #12]	@ (8017bac <rcutils_get_env+0x2c>)
 8017ba0:	4770      	bx	lr
 8017ba2:	bf00      	nop
 8017ba4:	0801d778 	.word	0x0801d778
 8017ba8:	0801d89c 	.word	0x0801d89c
 8017bac:	0801d75c 	.word	0x0801d75c

08017bb0 <rcutils_format_string_limit>:
 8017bb0:	b40f      	push	{r0, r1, r2, r3}
 8017bb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bb4:	b083      	sub	sp, #12
 8017bb6:	ac08      	add	r4, sp, #32
 8017bb8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8017bba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017bbe:	b34e      	cbz	r6, 8017c14 <rcutils_format_string_limit+0x64>
 8017bc0:	a808      	add	r0, sp, #32
 8017bc2:	f7f9 fdd1 	bl	8011768 <rcutils_allocator_is_valid>
 8017bc6:	b328      	cbz	r0, 8017c14 <rcutils_format_string_limit+0x64>
 8017bc8:	2100      	movs	r1, #0
 8017bca:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017bcc:	4632      	mov	r2, r6
 8017bce:	4608      	mov	r0, r1
 8017bd0:	e9cd 3300 	strd	r3, r3, [sp]
 8017bd4:	f000 f8f4 	bl	8017dc0 <rcutils_vsnprintf>
 8017bd8:	1c43      	adds	r3, r0, #1
 8017bda:	4605      	mov	r5, r0
 8017bdc:	d01a      	beq.n	8017c14 <rcutils_format_string_limit+0x64>
 8017bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017be0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017be2:	1c47      	adds	r7, r0, #1
 8017be4:	429f      	cmp	r7, r3
 8017be6:	bf84      	itt	hi
 8017be8:	461f      	movhi	r7, r3
 8017bea:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8017bee:	4638      	mov	r0, r7
 8017bf0:	9b08      	ldr	r3, [sp, #32]
 8017bf2:	4798      	blx	r3
 8017bf4:	4604      	mov	r4, r0
 8017bf6:	b168      	cbz	r0, 8017c14 <rcutils_format_string_limit+0x64>
 8017bf8:	9b01      	ldr	r3, [sp, #4]
 8017bfa:	4632      	mov	r2, r6
 8017bfc:	4639      	mov	r1, r7
 8017bfe:	f000 f8df 	bl	8017dc0 <rcutils_vsnprintf>
 8017c02:	2800      	cmp	r0, #0
 8017c04:	db02      	blt.n	8017c0c <rcutils_format_string_limit+0x5c>
 8017c06:	2300      	movs	r3, #0
 8017c08:	5563      	strb	r3, [r4, r5]
 8017c0a:	e004      	b.n	8017c16 <rcutils_format_string_limit+0x66>
 8017c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c0e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017c10:	4620      	mov	r0, r4
 8017c12:	4798      	blx	r3
 8017c14:	2400      	movs	r4, #0
 8017c16:	4620      	mov	r0, r4
 8017c18:	b003      	add	sp, #12
 8017c1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017c1e:	b004      	add	sp, #16
 8017c20:	4770      	bx	lr
 8017c22:	bf00      	nop

08017c24 <rcutils_repl_str>:
 8017c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c28:	ed2d 8b02 	vpush	{d8}
 8017c2c:	b087      	sub	sp, #28
 8017c2e:	4680      	mov	r8, r0
 8017c30:	4608      	mov	r0, r1
 8017c32:	f8cd 8004 	str.w	r8, [sp, #4]
 8017c36:	ee08 2a10 	vmov	s16, r2
 8017c3a:	468a      	mov	sl, r1
 8017c3c:	4699      	mov	r9, r3
 8017c3e:	f7e8 fad1 	bl	80001e4 <strlen>
 8017c42:	2600      	movs	r6, #0
 8017c44:	4647      	mov	r7, r8
 8017c46:	9002      	str	r0, [sp, #8]
 8017c48:	46b3      	mov	fp, r6
 8017c4a:	2510      	movs	r5, #16
 8017c4c:	46b0      	mov	r8, r6
 8017c4e:	e01d      	b.n	8017c8c <rcutils_repl_str+0x68>
 8017c50:	f10b 0b01 	add.w	fp, fp, #1
 8017c54:	455e      	cmp	r6, fp
 8017c56:	d211      	bcs.n	8017c7c <rcutils_repl_str+0x58>
 8017c58:	442e      	add	r6, r5
 8017c5a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017c5e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017c62:	00b1      	lsls	r1, r6, #2
 8017c64:	4798      	blx	r3
 8017c66:	2800      	cmp	r0, #0
 8017c68:	f000 8088 	beq.w	8017d7c <rcutils_repl_str+0x158>
 8017c6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c70:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8017c74:	4680      	mov	r8, r0
 8017c76:	bf28      	it	cs
 8017c78:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8017c7c:	9a01      	ldr	r2, [sp, #4]
 8017c7e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8017c82:	1aa2      	subs	r2, r4, r2
 8017c84:	f843 2c04 	str.w	r2, [r3, #-4]
 8017c88:	9b02      	ldr	r3, [sp, #8]
 8017c8a:	18e7      	adds	r7, r4, r3
 8017c8c:	4651      	mov	r1, sl
 8017c8e:	4638      	mov	r0, r7
 8017c90:	f004 fb97 	bl	801c3c2 <strstr>
 8017c94:	4604      	mov	r4, r0
 8017c96:	4640      	mov	r0, r8
 8017c98:	2c00      	cmp	r4, #0
 8017c9a:	d1d9      	bne.n	8017c50 <rcutils_repl_str+0x2c>
 8017c9c:	46b8      	mov	r8, r7
 8017c9e:	4607      	mov	r7, r0
 8017ca0:	4640      	mov	r0, r8
 8017ca2:	f7e8 fa9f 	bl	80001e4 <strlen>
 8017ca6:	9b01      	ldr	r3, [sp, #4]
 8017ca8:	eba8 0303 	sub.w	r3, r8, r3
 8017cac:	181c      	adds	r4, r3, r0
 8017cae:	9404      	str	r4, [sp, #16]
 8017cb0:	f1bb 0f00 	cmp.w	fp, #0
 8017cb4:	d04a      	beq.n	8017d4c <rcutils_repl_str+0x128>
 8017cb6:	ee18 0a10 	vmov	r0, s16
 8017cba:	f7e8 fa93 	bl	80001e4 <strlen>
 8017cbe:	9b02      	ldr	r3, [sp, #8]
 8017cc0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017cc4:	1ac3      	subs	r3, r0, r3
 8017cc6:	fb0b 4303 	mla	r3, fp, r3, r4
 8017cca:	461a      	mov	r2, r3
 8017ccc:	9305      	str	r3, [sp, #20]
 8017cce:	4606      	mov	r6, r0
 8017cd0:	f8d9 3000 	ldr.w	r3, [r9]
 8017cd4:	1c50      	adds	r0, r2, #1
 8017cd6:	4798      	blx	r3
 8017cd8:	9003      	str	r0, [sp, #12]
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	d04f      	beq.n	8017d7e <rcutils_repl_str+0x15a>
 8017cde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017ce2:	683a      	ldr	r2, [r7, #0]
 8017ce4:	4641      	mov	r1, r8
 8017ce6:	f004 fc0e 	bl	801c506 <memcpy>
 8017cea:	683d      	ldr	r5, [r7, #0]
 8017cec:	9b03      	ldr	r3, [sp, #12]
 8017cee:	9701      	str	r7, [sp, #4]
 8017cf0:	46ba      	mov	sl, r7
 8017cf2:	441d      	add	r5, r3
 8017cf4:	9f02      	ldr	r7, [sp, #8]
 8017cf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8017cfa:	2401      	movs	r4, #1
 8017cfc:	46d1      	mov	r9, sl
 8017cfe:	ee18 aa10 	vmov	sl, s16
 8017d02:	e00a      	b.n	8017d1a <rcutils_repl_str+0xf6>
 8017d04:	f8d9 5000 	ldr.w	r5, [r9]
 8017d08:	1aaa      	subs	r2, r5, r2
 8017d0a:	1885      	adds	r5, r0, r2
 8017d0c:	f004 fbfb 	bl	801c506 <memcpy>
 8017d10:	45a3      	cmp	fp, r4
 8017d12:	f104 0201 	add.w	r2, r4, #1
 8017d16:	d935      	bls.n	8017d84 <rcutils_repl_str+0x160>
 8017d18:	4614      	mov	r4, r2
 8017d1a:	4632      	mov	r2, r6
 8017d1c:	4651      	mov	r1, sl
 8017d1e:	4628      	mov	r0, r5
 8017d20:	f004 fbf1 	bl	801c506 <memcpy>
 8017d24:	f859 2b04 	ldr.w	r2, [r9], #4
 8017d28:	45a3      	cmp	fp, r4
 8017d2a:	443a      	add	r2, r7
 8017d2c:	eb05 0006 	add.w	r0, r5, r6
 8017d30:	eb08 0102 	add.w	r1, r8, r2
 8017d34:	d1e6      	bne.n	8017d04 <rcutils_repl_str+0xe0>
 8017d36:	9b04      	ldr	r3, [sp, #16]
 8017d38:	1a9a      	subs	r2, r3, r2
 8017d3a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017d3e:	f004 fbe2 	bl	801c506 <memcpy>
 8017d42:	9a03      	ldr	r2, [sp, #12]
 8017d44:	9905      	ldr	r1, [sp, #20]
 8017d46:	2300      	movs	r3, #0
 8017d48:	5453      	strb	r3, [r2, r1]
 8017d4a:	e00b      	b.n	8017d64 <rcutils_repl_str+0x140>
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	f8d9 3000 	ldr.w	r3, [r9]
 8017d52:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017d56:	3001      	adds	r0, #1
 8017d58:	4798      	blx	r3
 8017d5a:	9003      	str	r0, [sp, #12]
 8017d5c:	b110      	cbz	r0, 8017d64 <rcutils_repl_str+0x140>
 8017d5e:	9901      	ldr	r1, [sp, #4]
 8017d60:	f004 fbc9 	bl	801c4f6 <strcpy>
 8017d64:	4638      	mov	r0, r7
 8017d66:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017d6a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017d6e:	4798      	blx	r3
 8017d70:	9803      	ldr	r0, [sp, #12]
 8017d72:	b007      	add	sp, #28
 8017d74:	ecbd 8b02 	vpop	{d8}
 8017d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d7c:	4647      	mov	r7, r8
 8017d7e:	2300      	movs	r3, #0
 8017d80:	9303      	str	r3, [sp, #12]
 8017d82:	e7ef      	b.n	8017d64 <rcutils_repl_str+0x140>
 8017d84:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017d88:	e7db      	b.n	8017d42 <rcutils_repl_str+0x11e>
 8017d8a:	bf00      	nop

08017d8c <rcutils_snprintf>:
 8017d8c:	b40c      	push	{r2, r3}
 8017d8e:	b530      	push	{r4, r5, lr}
 8017d90:	b083      	sub	sp, #12
 8017d92:	ab06      	add	r3, sp, #24
 8017d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d98:	9301      	str	r3, [sp, #4]
 8017d9a:	b152      	cbz	r2, 8017db2 <rcutils_snprintf+0x26>
 8017d9c:	b138      	cbz	r0, 8017dae <rcutils_snprintf+0x22>
 8017d9e:	b141      	cbz	r1, 8017db2 <rcutils_snprintf+0x26>
 8017da0:	f004 fab0 	bl	801c304 <vsniprintf>
 8017da4:	b003      	add	sp, #12
 8017da6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017daa:	b002      	add	sp, #8
 8017dac:	4770      	bx	lr
 8017dae:	2900      	cmp	r1, #0
 8017db0:	d0f6      	beq.n	8017da0 <rcutils_snprintf+0x14>
 8017db2:	f004 fb73 	bl	801c49c <__errno>
 8017db6:	2316      	movs	r3, #22
 8017db8:	6003      	str	r3, [r0, #0]
 8017dba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017dbe:	e7f1      	b.n	8017da4 <rcutils_snprintf+0x18>

08017dc0 <rcutils_vsnprintf>:
 8017dc0:	b570      	push	{r4, r5, r6, lr}
 8017dc2:	b13a      	cbz	r2, 8017dd4 <rcutils_vsnprintf+0x14>
 8017dc4:	b120      	cbz	r0, 8017dd0 <rcutils_vsnprintf+0x10>
 8017dc6:	b129      	cbz	r1, 8017dd4 <rcutils_vsnprintf+0x14>
 8017dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dcc:	f004 ba9a 	b.w	801c304 <vsniprintf>
 8017dd0:	2900      	cmp	r1, #0
 8017dd2:	d0f9      	beq.n	8017dc8 <rcutils_vsnprintf+0x8>
 8017dd4:	f004 fb62 	bl	801c49c <__errno>
 8017dd8:	2316      	movs	r3, #22
 8017dda:	6003      	str	r3, [r0, #0]
 8017ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017de0:	bd70      	pop	{r4, r5, r6, pc}
 8017de2:	bf00      	nop

08017de4 <rcutils_strdup>:
 8017de4:	b084      	sub	sp, #16
 8017de6:	b570      	push	{r4, r5, r6, lr}
 8017de8:	b082      	sub	sp, #8
 8017dea:	ac07      	add	r4, sp, #28
 8017dec:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017df0:	4605      	mov	r5, r0
 8017df2:	b1b0      	cbz	r0, 8017e22 <rcutils_strdup+0x3e>
 8017df4:	f7e8 f9f6 	bl	80001e4 <strlen>
 8017df8:	1c42      	adds	r2, r0, #1
 8017dfa:	9b07      	ldr	r3, [sp, #28]
 8017dfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017dfe:	9201      	str	r2, [sp, #4]
 8017e00:	4606      	mov	r6, r0
 8017e02:	4610      	mov	r0, r2
 8017e04:	4798      	blx	r3
 8017e06:	4604      	mov	r4, r0
 8017e08:	b128      	cbz	r0, 8017e16 <rcutils_strdup+0x32>
 8017e0a:	9a01      	ldr	r2, [sp, #4]
 8017e0c:	4629      	mov	r1, r5
 8017e0e:	f004 fb7a 	bl	801c506 <memcpy>
 8017e12:	2300      	movs	r3, #0
 8017e14:	55a3      	strb	r3, [r4, r6]
 8017e16:	4620      	mov	r0, r4
 8017e18:	b002      	add	sp, #8
 8017e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e1e:	b004      	add	sp, #16
 8017e20:	4770      	bx	lr
 8017e22:	4604      	mov	r4, r0
 8017e24:	e7f7      	b.n	8017e16 <rcutils_strdup+0x32>
 8017e26:	bf00      	nop

08017e28 <rcutils_strndup>:
 8017e28:	b082      	sub	sp, #8
 8017e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e2c:	ac06      	add	r4, sp, #24
 8017e2e:	e884 000c 	stmia.w	r4, {r2, r3}
 8017e32:	4605      	mov	r5, r0
 8017e34:	b188      	cbz	r0, 8017e5a <rcutils_strndup+0x32>
 8017e36:	1c4f      	adds	r7, r1, #1
 8017e38:	460e      	mov	r6, r1
 8017e3a:	4638      	mov	r0, r7
 8017e3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e3e:	4790      	blx	r2
 8017e40:	4604      	mov	r4, r0
 8017e42:	b128      	cbz	r0, 8017e50 <rcutils_strndup+0x28>
 8017e44:	463a      	mov	r2, r7
 8017e46:	4629      	mov	r1, r5
 8017e48:	f004 fb5d 	bl	801c506 <memcpy>
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	55a3      	strb	r3, [r4, r6]
 8017e50:	4620      	mov	r0, r4
 8017e52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017e56:	b002      	add	sp, #8
 8017e58:	4770      	bx	lr
 8017e5a:	4604      	mov	r4, r0
 8017e5c:	e7f8      	b.n	8017e50 <rcutils_strndup+0x28>
 8017e5e:	bf00      	nop

08017e60 <rcutils_get_zero_initialized_string_map>:
 8017e60:	4b01      	ldr	r3, [pc, #4]	@ (8017e68 <rcutils_get_zero_initialized_string_map+0x8>)
 8017e62:	2000      	movs	r0, #0
 8017e64:	6018      	str	r0, [r3, #0]
 8017e66:	4770      	bx	lr
 8017e68:	2000e620 	.word	0x2000e620

08017e6c <rcutils_string_map_reserve>:
 8017e6c:	2800      	cmp	r0, #0
 8017e6e:	d05f      	beq.n	8017f30 <rcutils_string_map_reserve+0xc4>
 8017e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e74:	460c      	mov	r4, r1
 8017e76:	6801      	ldr	r1, [r0, #0]
 8017e78:	b082      	sub	sp, #8
 8017e7a:	4605      	mov	r5, r0
 8017e7c:	b129      	cbz	r1, 8017e8a <rcutils_string_map_reserve+0x1e>
 8017e7e:	68cb      	ldr	r3, [r1, #12]
 8017e80:	42a3      	cmp	r3, r4
 8017e82:	d906      	bls.n	8017e92 <rcutils_string_map_reserve+0x26>
 8017e84:	461c      	mov	r4, r3
 8017e86:	2900      	cmp	r1, #0
 8017e88:	d1f9      	bne.n	8017e7e <rcutils_string_map_reserve+0x12>
 8017e8a:	201f      	movs	r0, #31
 8017e8c:	b002      	add	sp, #8
 8017e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e92:	688b      	ldr	r3, [r1, #8]
 8017e94:	42a3      	cmp	r3, r4
 8017e96:	d047      	beq.n	8017f28 <rcutils_string_map_reserve+0xbc>
 8017e98:	6a0e      	ldr	r6, [r1, #32]
 8017e9a:	2c00      	cmp	r4, #0
 8017e9c:	d034      	beq.n	8017f08 <rcutils_string_map_reserve+0x9c>
 8017e9e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8017ea2:	d243      	bcs.n	8017f2c <rcutils_string_map_reserve+0xc0>
 8017ea4:	00a7      	lsls	r7, r4, #2
 8017ea6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8017eaa:	6808      	ldr	r0, [r1, #0]
 8017eac:	4632      	mov	r2, r6
 8017eae:	4639      	mov	r1, r7
 8017eb0:	47c0      	blx	r8
 8017eb2:	2800      	cmp	r0, #0
 8017eb4:	d03a      	beq.n	8017f2c <rcutils_string_map_reserve+0xc0>
 8017eb6:	682b      	ldr	r3, [r5, #0]
 8017eb8:	4632      	mov	r2, r6
 8017eba:	6018      	str	r0, [r3, #0]
 8017ebc:	4639      	mov	r1, r7
 8017ebe:	6858      	ldr	r0, [r3, #4]
 8017ec0:	47c0      	blx	r8
 8017ec2:	2800      	cmp	r0, #0
 8017ec4:	d032      	beq.n	8017f2c <rcutils_string_map_reserve+0xc0>
 8017ec6:	682d      	ldr	r5, [r5, #0]
 8017ec8:	68ab      	ldr	r3, [r5, #8]
 8017eca:	6068      	str	r0, [r5, #4]
 8017ecc:	42a3      	cmp	r3, r4
 8017ece:	d226      	bcs.n	8017f1e <rcutils_string_map_reserve+0xb2>
 8017ed0:	682a      	ldr	r2, [r5, #0]
 8017ed2:	eb00 0c07 	add.w	ip, r0, r7
 8017ed6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8017eda:	45e6      	cmp	lr, ip
 8017edc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8017ee0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8017ee4:	d203      	bcs.n	8017eee <rcutils_string_map_reserve+0x82>
 8017ee6:	eb02 0c07 	add.w	ip, r2, r7
 8017eea:	4566      	cmp	r6, ip
 8017eec:	d322      	bcc.n	8017f34 <rcutils_string_map_reserve+0xc8>
 8017eee:	1ae3      	subs	r3, r4, r3
 8017ef0:	009a      	lsls	r2, r3, #2
 8017ef2:	4670      	mov	r0, lr
 8017ef4:	2100      	movs	r1, #0
 8017ef6:	9201      	str	r2, [sp, #4]
 8017ef8:	f004 fa3c 	bl	801c374 <memset>
 8017efc:	9a01      	ldr	r2, [sp, #4]
 8017efe:	2100      	movs	r1, #0
 8017f00:	4630      	mov	r0, r6
 8017f02:	f004 fa37 	bl	801c374 <memset>
 8017f06:	e00a      	b.n	8017f1e <rcutils_string_map_reserve+0xb2>
 8017f08:	694f      	ldr	r7, [r1, #20]
 8017f0a:	6808      	ldr	r0, [r1, #0]
 8017f0c:	4631      	mov	r1, r6
 8017f0e:	47b8      	blx	r7
 8017f10:	682b      	ldr	r3, [r5, #0]
 8017f12:	4631      	mov	r1, r6
 8017f14:	6858      	ldr	r0, [r3, #4]
 8017f16:	601c      	str	r4, [r3, #0]
 8017f18:	47b8      	blx	r7
 8017f1a:	682d      	ldr	r5, [r5, #0]
 8017f1c:	606c      	str	r4, [r5, #4]
 8017f1e:	2000      	movs	r0, #0
 8017f20:	60ac      	str	r4, [r5, #8]
 8017f22:	b002      	add	sp, #8
 8017f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f28:	2000      	movs	r0, #0
 8017f2a:	e7af      	b.n	8017e8c <rcutils_string_map_reserve+0x20>
 8017f2c:	200a      	movs	r0, #10
 8017f2e:	e7ad      	b.n	8017e8c <rcutils_string_map_reserve+0x20>
 8017f30:	200b      	movs	r0, #11
 8017f32:	4770      	bx	lr
 8017f34:	1f0b      	subs	r3, r1, #4
 8017f36:	4418      	add	r0, r3
 8017f38:	4413      	add	r3, r2
 8017f3a:	3a04      	subs	r2, #4
 8017f3c:	4417      	add	r7, r2
 8017f3e:	2200      	movs	r2, #0
 8017f40:	f843 2f04 	str.w	r2, [r3, #4]!
 8017f44:	42bb      	cmp	r3, r7
 8017f46:	f840 2f04 	str.w	r2, [r0, #4]!
 8017f4a:	d1f9      	bne.n	8017f40 <rcutils_string_map_reserve+0xd4>
 8017f4c:	e7e7      	b.n	8017f1e <rcutils_string_map_reserve+0xb2>
 8017f4e:	bf00      	nop

08017f50 <rcutils_string_map_init>:
 8017f50:	b082      	sub	sp, #8
 8017f52:	b570      	push	{r4, r5, r6, lr}
 8017f54:	ac04      	add	r4, sp, #16
 8017f56:	e884 000c 	stmia.w	r4, {r2, r3}
 8017f5a:	b380      	cbz	r0, 8017fbe <rcutils_string_map_init+0x6e>
 8017f5c:	6806      	ldr	r6, [r0, #0]
 8017f5e:	4604      	mov	r4, r0
 8017f60:	b12e      	cbz	r6, 8017f6e <rcutils_string_map_init+0x1e>
 8017f62:	251e      	movs	r5, #30
 8017f64:	4628      	mov	r0, r5
 8017f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017f6a:	b002      	add	sp, #8
 8017f6c:	4770      	bx	lr
 8017f6e:	a804      	add	r0, sp, #16
 8017f70:	460d      	mov	r5, r1
 8017f72:	f7f9 fbf9 	bl	8011768 <rcutils_allocator_is_valid>
 8017f76:	b310      	cbz	r0, 8017fbe <rcutils_string_map_init+0x6e>
 8017f78:	9b04      	ldr	r3, [sp, #16]
 8017f7a:	9908      	ldr	r1, [sp, #32]
 8017f7c:	2024      	movs	r0, #36	@ 0x24
 8017f7e:	4798      	blx	r3
 8017f80:	6020      	str	r0, [r4, #0]
 8017f82:	b310      	cbz	r0, 8017fca <rcutils_string_map_init+0x7a>
 8017f84:	f10d 0e10 	add.w	lr, sp, #16
 8017f88:	e9c0 6600 	strd	r6, r6, [r0]
 8017f8c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017f90:	f100 0c10 	add.w	ip, r0, #16
 8017f94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017f98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f9c:	f8de 3000 	ldr.w	r3, [lr]
 8017fa0:	f8cc 3000 	str.w	r3, [ip]
 8017fa4:	4629      	mov	r1, r5
 8017fa6:	4620      	mov	r0, r4
 8017fa8:	f7ff ff60 	bl	8017e6c <rcutils_string_map_reserve>
 8017fac:	4605      	mov	r5, r0
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d0d8      	beq.n	8017f64 <rcutils_string_map_init+0x14>
 8017fb2:	9b05      	ldr	r3, [sp, #20]
 8017fb4:	9908      	ldr	r1, [sp, #32]
 8017fb6:	6820      	ldr	r0, [r4, #0]
 8017fb8:	4798      	blx	r3
 8017fba:	6026      	str	r6, [r4, #0]
 8017fbc:	e7d2      	b.n	8017f64 <rcutils_string_map_init+0x14>
 8017fbe:	250b      	movs	r5, #11
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fc6:	b002      	add	sp, #8
 8017fc8:	4770      	bx	lr
 8017fca:	250a      	movs	r5, #10
 8017fcc:	e7ca      	b.n	8017f64 <rcutils_string_map_init+0x14>
 8017fce:	bf00      	nop

08017fd0 <rcutils_string_map_fini>:
 8017fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fd4:	b082      	sub	sp, #8
 8017fd6:	2800      	cmp	r0, #0
 8017fd8:	d03a      	beq.n	8018050 <rcutils_string_map_fini+0x80>
 8017fda:	6804      	ldr	r4, [r0, #0]
 8017fdc:	4606      	mov	r6, r0
 8017fde:	2c00      	cmp	r4, #0
 8017fe0:	d032      	beq.n	8018048 <rcutils_string_map_fini+0x78>
 8017fe2:	68a3      	ldr	r3, [r4, #8]
 8017fe4:	b32b      	cbz	r3, 8018032 <rcutils_string_map_fini+0x62>
 8017fe6:	2500      	movs	r5, #0
 8017fe8:	6822      	ldr	r2, [r4, #0]
 8017fea:	462f      	mov	r7, r5
 8017fec:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017ff0:	b1e0      	cbz	r0, 801802c <rcutils_string_map_fini+0x5c>
 8017ff2:	6a21      	ldr	r1, [r4, #32]
 8017ff4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8017ff8:	9101      	str	r1, [sp, #4]
 8017ffa:	47c0      	blx	r8
 8017ffc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018000:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018004:	9901      	ldr	r1, [sp, #4]
 8018006:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801800a:	47c0      	blx	r8
 801800c:	68e3      	ldr	r3, [r4, #12]
 801800e:	6862      	ldr	r2, [r4, #4]
 8018010:	3b01      	subs	r3, #1
 8018012:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018016:	60e3      	str	r3, [r4, #12]
 8018018:	6834      	ldr	r4, [r6, #0]
 801801a:	68a3      	ldr	r3, [r4, #8]
 801801c:	3501      	adds	r5, #1
 801801e:	429d      	cmp	r5, r3
 8018020:	d207      	bcs.n	8018032 <rcutils_string_map_fini+0x62>
 8018022:	6822      	ldr	r2, [r4, #0]
 8018024:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018028:	2800      	cmp	r0, #0
 801802a:	d1e2      	bne.n	8017ff2 <rcutils_string_map_fini+0x22>
 801802c:	3501      	adds	r5, #1
 801802e:	429d      	cmp	r5, r3
 8018030:	d3dc      	bcc.n	8017fec <rcutils_string_map_fini+0x1c>
 8018032:	2100      	movs	r1, #0
 8018034:	4630      	mov	r0, r6
 8018036:	f7ff ff19 	bl	8017e6c <rcutils_string_map_reserve>
 801803a:	4604      	mov	r4, r0
 801803c:	b920      	cbnz	r0, 8018048 <rcutils_string_map_fini+0x78>
 801803e:	6830      	ldr	r0, [r6, #0]
 8018040:	6943      	ldr	r3, [r0, #20]
 8018042:	6a01      	ldr	r1, [r0, #32]
 8018044:	4798      	blx	r3
 8018046:	6034      	str	r4, [r6, #0]
 8018048:	4620      	mov	r0, r4
 801804a:	b002      	add	sp, #8
 801804c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018050:	240b      	movs	r4, #11
 8018052:	4620      	mov	r0, r4
 8018054:	b002      	add	sp, #8
 8018056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801805a:	bf00      	nop

0801805c <rcutils_string_map_getn>:
 801805c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018060:	b300      	cbz	r0, 80180a4 <rcutils_string_map_getn+0x48>
 8018062:	6807      	ldr	r7, [r0, #0]
 8018064:	b1ff      	cbz	r7, 80180a6 <rcutils_string_map_getn+0x4a>
 8018066:	4688      	mov	r8, r1
 8018068:	b1e1      	cbz	r1, 80180a4 <rcutils_string_map_getn+0x48>
 801806a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801806e:	683e      	ldr	r6, [r7, #0]
 8018070:	f1ba 0f00 	cmp.w	sl, #0
 8018074:	d016      	beq.n	80180a4 <rcutils_string_map_getn+0x48>
 8018076:	4691      	mov	r9, r2
 8018078:	3e04      	subs	r6, #4
 801807a:	2400      	movs	r4, #0
 801807c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8018080:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018084:	4628      	mov	r0, r5
 8018086:	3401      	adds	r4, #1
 8018088:	b155      	cbz	r5, 80180a0 <rcutils_string_map_getn+0x44>
 801808a:	f7e8 f8ab 	bl	80001e4 <strlen>
 801808e:	4548      	cmp	r0, r9
 8018090:	4602      	mov	r2, r0
 8018092:	4629      	mov	r1, r5
 8018094:	bf38      	it	cc
 8018096:	464a      	movcc	r2, r9
 8018098:	4640      	mov	r0, r8
 801809a:	f004 f980 	bl	801c39e <strncmp>
 801809e:	b128      	cbz	r0, 80180ac <rcutils_string_map_getn+0x50>
 80180a0:	45a2      	cmp	sl, r4
 80180a2:	d1eb      	bne.n	801807c <rcutils_string_map_getn+0x20>
 80180a4:	2700      	movs	r7, #0
 80180a6:	4638      	mov	r0, r7
 80180a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	f853 700b 	ldr.w	r7, [r3, fp]
 80180b2:	4638      	mov	r0, r7
 80180b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180b8 <rmw_get_zero_initialized_context>:
 80180b8:	b510      	push	{r4, lr}
 80180ba:	4604      	mov	r4, r0
 80180bc:	3010      	adds	r0, #16
 80180be:	f000 f80b 	bl	80180d8 <rmw_get_zero_initialized_init_options>
 80180c2:	2300      	movs	r3, #0
 80180c4:	2000      	movs	r0, #0
 80180c6:	2100      	movs	r1, #0
 80180c8:	e9c4 0100 	strd	r0, r1, [r4]
 80180cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80180d0:	60a3      	str	r3, [r4, #8]
 80180d2:	4620      	mov	r0, r4
 80180d4:	bd10      	pop	{r4, pc}
 80180d6:	bf00      	nop

080180d8 <rmw_get_zero_initialized_init_options>:
 80180d8:	b510      	push	{r4, lr}
 80180da:	2238      	movs	r2, #56	@ 0x38
 80180dc:	4604      	mov	r4, r0
 80180de:	2100      	movs	r1, #0
 80180e0:	f004 f948 	bl	801c374 <memset>
 80180e4:	f104 0010 	add.w	r0, r4, #16
 80180e8:	f000 f806 	bl	80180f8 <rmw_get_default_security_options>
 80180ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80180f0:	60e3      	str	r3, [r4, #12]
 80180f2:	4620      	mov	r0, r4
 80180f4:	bd10      	pop	{r4, pc}
 80180f6:	bf00      	nop

080180f8 <rmw_get_default_security_options>:
 80180f8:	2200      	movs	r2, #0
 80180fa:	7002      	strb	r2, [r0, #0]
 80180fc:	6042      	str	r2, [r0, #4]
 80180fe:	4770      	bx	lr

08018100 <rmw_subscription_content_filter_options_fini>:
 8018100:	b1b0      	cbz	r0, 8018130 <rmw_subscription_content_filter_options_fini+0x30>
 8018102:	b538      	push	{r3, r4, r5, lr}
 8018104:	4604      	mov	r4, r0
 8018106:	4608      	mov	r0, r1
 8018108:	460d      	mov	r5, r1
 801810a:	f7f9 fb2d 	bl	8011768 <rcutils_allocator_is_valid>
 801810e:	b168      	cbz	r0, 801812c <rmw_subscription_content_filter_options_fini+0x2c>
 8018110:	6820      	ldr	r0, [r4, #0]
 8018112:	b120      	cbz	r0, 801811e <rmw_subscription_content_filter_options_fini+0x1e>
 8018114:	686b      	ldr	r3, [r5, #4]
 8018116:	6929      	ldr	r1, [r5, #16]
 8018118:	4798      	blx	r3
 801811a:	2300      	movs	r3, #0
 801811c:	6023      	str	r3, [r4, #0]
 801811e:	1d20      	adds	r0, r4, #4
 8018120:	f003 fc00 	bl	801b924 <rcutils_string_array_fini>
 8018124:	3800      	subs	r0, #0
 8018126:	bf18      	it	ne
 8018128:	2001      	movne	r0, #1
 801812a:	bd38      	pop	{r3, r4, r5, pc}
 801812c:	200b      	movs	r0, #11
 801812e:	bd38      	pop	{r3, r4, r5, pc}
 8018130:	200b      	movs	r0, #11
 8018132:	4770      	bx	lr

08018134 <rmw_get_default_subscription_options>:
 8018134:	2200      	movs	r2, #0
 8018136:	e9c0 2200 	strd	r2, r2, [r0]
 801813a:	6082      	str	r2, [r0, #8]
 801813c:	4770      	bx	lr
 801813e:	bf00      	nop

08018140 <rmw_time_equal>:
 8018140:	b4f0      	push	{r4, r5, r6, r7}
 8018142:	b084      	sub	sp, #16
 8018144:	ac04      	add	r4, sp, #16
 8018146:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801814a:	4603      	mov	r3, r0
 801814c:	4924      	ldr	r1, [pc, #144]	@ (80181e0 <rmw_time_equal+0xa0>)
 801814e:	9e03      	ldr	r6, [sp, #12]
 8018150:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8018154:	2202      	movs	r2, #2
 8018156:	4299      	cmp	r1, r3
 8018158:	41aa      	sbcs	r2, r5
 801815a:	d330      	bcc.n	80181be <rmw_time_equal+0x7e>
 801815c:	4c21      	ldr	r4, [pc, #132]	@ (80181e4 <rmw_time_equal+0xa4>)
 801815e:	fba3 3204 	umull	r3, r2, r3, r4
 8018162:	fb04 2205 	mla	r2, r4, r5, r2
 8018166:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801816a:	43dd      	mvns	r5, r3
 801816c:	1a8c      	subs	r4, r1, r2
 801816e:	4285      	cmp	r5, r0
 8018170:	41b4      	sbcs	r4, r6
 8018172:	d332      	bcc.n	80181da <rmw_time_equal+0x9a>
 8018174:	eb10 0c03 	adds.w	ip, r0, r3
 8018178:	eb42 0106 	adc.w	r1, r2, r6
 801817c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8018180:	4817      	ldr	r0, [pc, #92]	@ (80181e0 <rmw_time_equal+0xa0>)
 8018182:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018184:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018186:	2202      	movs	r2, #2
 8018188:	4298      	cmp	r0, r3
 801818a:	41b2      	sbcs	r2, r6
 801818c:	d31c      	bcc.n	80181c8 <rmw_time_equal+0x88>
 801818e:	4c15      	ldr	r4, [pc, #84]	@ (80181e4 <rmw_time_equal+0xa4>)
 8018190:	fba3 3204 	umull	r3, r2, r3, r4
 8018194:	fb04 2206 	mla	r2, r4, r6, r2
 8018198:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801819c:	43de      	mvns	r6, r3
 801819e:	1a84      	subs	r4, r0, r2
 80181a0:	42ae      	cmp	r6, r5
 80181a2:	41bc      	sbcs	r4, r7
 80181a4:	d315      	bcc.n	80181d2 <rmw_time_equal+0x92>
 80181a6:	195b      	adds	r3, r3, r5
 80181a8:	eb42 0207 	adc.w	r2, r2, r7
 80181ac:	428a      	cmp	r2, r1
 80181ae:	bf08      	it	eq
 80181b0:	4563      	cmpeq	r3, ip
 80181b2:	bf0c      	ite	eq
 80181b4:	2001      	moveq	r0, #1
 80181b6:	2000      	movne	r0, #0
 80181b8:	b004      	add	sp, #16
 80181ba:	bcf0      	pop	{r4, r5, r6, r7}
 80181bc:	4770      	bx	lr
 80181be:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80181c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80181c6:	e7d9      	b.n	801817c <rmw_time_equal+0x3c>
 80181c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80181cc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80181d0:	e7ec      	b.n	80181ac <rmw_time_equal+0x6c>
 80181d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80181d6:	4602      	mov	r2, r0
 80181d8:	e7e8      	b.n	80181ac <rmw_time_equal+0x6c>
 80181da:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80181de:	e7cd      	b.n	801817c <rmw_time_equal+0x3c>
 80181e0:	25c17d04 	.word	0x25c17d04
 80181e4:	3b9aca00 	.word	0x3b9aca00

080181e8 <rmw_time_total_nsec>:
 80181e8:	b470      	push	{r4, r5, r6}
 80181ea:	b085      	sub	sp, #20
 80181ec:	ac04      	add	r4, sp, #16
 80181ee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80181f2:	4603      	mov	r3, r0
 80181f4:	4912      	ldr	r1, [pc, #72]	@ (8018240 <rmw_time_total_nsec+0x58>)
 80181f6:	9e03      	ldr	r6, [sp, #12]
 80181f8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80181fc:	2202      	movs	r2, #2
 80181fe:	4299      	cmp	r1, r3
 8018200:	41aa      	sbcs	r2, r5
 8018202:	d311      	bcc.n	8018228 <rmw_time_total_nsec+0x40>
 8018204:	4c0f      	ldr	r4, [pc, #60]	@ (8018244 <rmw_time_total_nsec+0x5c>)
 8018206:	fba3 3204 	umull	r3, r2, r3, r4
 801820a:	fb04 2205 	mla	r2, r4, r5, r2
 801820e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018212:	43dd      	mvns	r5, r3
 8018214:	1a8c      	subs	r4, r1, r2
 8018216:	4285      	cmp	r5, r0
 8018218:	41b4      	sbcs	r4, r6
 801821a:	d30c      	bcc.n	8018236 <rmw_time_total_nsec+0x4e>
 801821c:	1818      	adds	r0, r3, r0
 801821e:	eb42 0106 	adc.w	r1, r2, r6
 8018222:	b005      	add	sp, #20
 8018224:	bc70      	pop	{r4, r5, r6}
 8018226:	4770      	bx	lr
 8018228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801822c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018230:	b005      	add	sp, #20
 8018232:	bc70      	pop	{r4, r5, r6}
 8018234:	4770      	bx	lr
 8018236:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801823a:	b005      	add	sp, #20
 801823c:	bc70      	pop	{r4, r5, r6}
 801823e:	4770      	bx	lr
 8018240:	25c17d04 	.word	0x25c17d04
 8018244:	3b9aca00 	.word	0x3b9aca00

08018248 <rmw_get_zero_initialized_message_info>:
 8018248:	b510      	push	{r4, lr}
 801824a:	2240      	movs	r2, #64	@ 0x40
 801824c:	4604      	mov	r4, r0
 801824e:	2100      	movs	r1, #0
 8018250:	f004 f890 	bl	801c374 <memset>
 8018254:	4620      	mov	r0, r4
 8018256:	bd10      	pop	{r4, pc}

08018258 <rmw_validate_full_topic_name>:
 8018258:	2800      	cmp	r0, #0
 801825a:	d057      	beq.n	801830c <rmw_validate_full_topic_name+0xb4>
 801825c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018260:	460d      	mov	r5, r1
 8018262:	2900      	cmp	r1, #0
 8018264:	d054      	beq.n	8018310 <rmw_validate_full_topic_name+0xb8>
 8018266:	4616      	mov	r6, r2
 8018268:	4604      	mov	r4, r0
 801826a:	f7e7 ffbb 	bl	80001e4 <strlen>
 801826e:	b148      	cbz	r0, 8018284 <rmw_validate_full_topic_name+0x2c>
 8018270:	7823      	ldrb	r3, [r4, #0]
 8018272:	2b2f      	cmp	r3, #47	@ 0x2f
 8018274:	d00d      	beq.n	8018292 <rmw_validate_full_topic_name+0x3a>
 8018276:	2302      	movs	r3, #2
 8018278:	602b      	str	r3, [r5, #0]
 801827a:	b13e      	cbz	r6, 801828c <rmw_validate_full_topic_name+0x34>
 801827c:	2000      	movs	r0, #0
 801827e:	6030      	str	r0, [r6, #0]
 8018280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018284:	2301      	movs	r3, #1
 8018286:	602b      	str	r3, [r5, #0]
 8018288:	2e00      	cmp	r6, #0
 801828a:	d1f7      	bne.n	801827c <rmw_validate_full_topic_name+0x24>
 801828c:	2000      	movs	r0, #0
 801828e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018292:	1e43      	subs	r3, r0, #1
 8018294:	5ce2      	ldrb	r2, [r4, r3]
 8018296:	2a2f      	cmp	r2, #47	@ 0x2f
 8018298:	d03c      	beq.n	8018314 <rmw_validate_full_topic_name+0xbc>
 801829a:	1e63      	subs	r3, r4, #1
 801829c:	eb03 0800 	add.w	r8, r3, r0
 80182a0:	f1c4 0e01 	rsb	lr, r4, #1
 80182a4:	eb0e 0703 	add.w	r7, lr, r3
 80182a8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80182ac:	f021 0220 	bic.w	r2, r1, #32
 80182b0:	3a41      	subs	r2, #65	@ 0x41
 80182b2:	2a19      	cmp	r2, #25
 80182b4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80182b8:	d90b      	bls.n	80182d2 <rmw_validate_full_topic_name+0x7a>
 80182ba:	295f      	cmp	r1, #95	@ 0x5f
 80182bc:	d009      	beq.n	80182d2 <rmw_validate_full_topic_name+0x7a>
 80182be:	f1bc 0f0a 	cmp.w	ip, #10
 80182c2:	d906      	bls.n	80182d2 <rmw_validate_full_topic_name+0x7a>
 80182c4:	2304      	movs	r3, #4
 80182c6:	602b      	str	r3, [r5, #0]
 80182c8:	2e00      	cmp	r6, #0
 80182ca:	d0df      	beq.n	801828c <rmw_validate_full_topic_name+0x34>
 80182cc:	6037      	str	r7, [r6, #0]
 80182ce:	2000      	movs	r0, #0
 80182d0:	e7d6      	b.n	8018280 <rmw_validate_full_topic_name+0x28>
 80182d2:	4543      	cmp	r3, r8
 80182d4:	d1e6      	bne.n	80182a4 <rmw_validate_full_topic_name+0x4c>
 80182d6:	4f1a      	ldr	r7, [pc, #104]	@ (8018340 <rmw_validate_full_topic_name+0xe8>)
 80182d8:	2301      	movs	r3, #1
 80182da:	e004      	b.n	80182e6 <rmw_validate_full_topic_name+0x8e>
 80182dc:	4298      	cmp	r0, r3
 80182de:	f104 0401 	add.w	r4, r4, #1
 80182e2:	d91c      	bls.n	801831e <rmw_validate_full_topic_name+0xc6>
 80182e4:	4613      	mov	r3, r2
 80182e6:	4298      	cmp	r0, r3
 80182e8:	f103 0201 	add.w	r2, r3, #1
 80182ec:	d0f6      	beq.n	80182dc <rmw_validate_full_topic_name+0x84>
 80182ee:	7821      	ldrb	r1, [r4, #0]
 80182f0:	292f      	cmp	r1, #47	@ 0x2f
 80182f2:	d1f3      	bne.n	80182dc <rmw_validate_full_topic_name+0x84>
 80182f4:	7861      	ldrb	r1, [r4, #1]
 80182f6:	292f      	cmp	r1, #47	@ 0x2f
 80182f8:	d01c      	beq.n	8018334 <rmw_validate_full_topic_name+0xdc>
 80182fa:	5dc9      	ldrb	r1, [r1, r7]
 80182fc:	0749      	lsls	r1, r1, #29
 80182fe:	d5ed      	bpl.n	80182dc <rmw_validate_full_topic_name+0x84>
 8018300:	2206      	movs	r2, #6
 8018302:	602a      	str	r2, [r5, #0]
 8018304:	2e00      	cmp	r6, #0
 8018306:	d0c1      	beq.n	801828c <rmw_validate_full_topic_name+0x34>
 8018308:	6033      	str	r3, [r6, #0]
 801830a:	e7bf      	b.n	801828c <rmw_validate_full_topic_name+0x34>
 801830c:	200b      	movs	r0, #11
 801830e:	4770      	bx	lr
 8018310:	200b      	movs	r0, #11
 8018312:	e7b5      	b.n	8018280 <rmw_validate_full_topic_name+0x28>
 8018314:	2203      	movs	r2, #3
 8018316:	602a      	str	r2, [r5, #0]
 8018318:	2e00      	cmp	r6, #0
 801831a:	d1f5      	bne.n	8018308 <rmw_validate_full_topic_name+0xb0>
 801831c:	e7b6      	b.n	801828c <rmw_validate_full_topic_name+0x34>
 801831e:	28f7      	cmp	r0, #247	@ 0xf7
 8018320:	d802      	bhi.n	8018328 <rmw_validate_full_topic_name+0xd0>
 8018322:	2000      	movs	r0, #0
 8018324:	6028      	str	r0, [r5, #0]
 8018326:	e7ab      	b.n	8018280 <rmw_validate_full_topic_name+0x28>
 8018328:	2307      	movs	r3, #7
 801832a:	602b      	str	r3, [r5, #0]
 801832c:	2e00      	cmp	r6, #0
 801832e:	d0ad      	beq.n	801828c <rmw_validate_full_topic_name+0x34>
 8018330:	23f6      	movs	r3, #246	@ 0xf6
 8018332:	e7e9      	b.n	8018308 <rmw_validate_full_topic_name+0xb0>
 8018334:	2205      	movs	r2, #5
 8018336:	602a      	str	r2, [r5, #0]
 8018338:	2e00      	cmp	r6, #0
 801833a:	d1e5      	bne.n	8018308 <rmw_validate_full_topic_name+0xb0>
 801833c:	e7a6      	b.n	801828c <rmw_validate_full_topic_name+0x34>
 801833e:	bf00      	nop
 8018340:	0801e1a3 	.word	0x0801e1a3

08018344 <rmw_validate_namespace_with_size>:
 8018344:	b340      	cbz	r0, 8018398 <rmw_validate_namespace_with_size+0x54>
 8018346:	b570      	push	{r4, r5, r6, lr}
 8018348:	4614      	mov	r4, r2
 801834a:	b0c2      	sub	sp, #264	@ 0x108
 801834c:	b332      	cbz	r2, 801839c <rmw_validate_namespace_with_size+0x58>
 801834e:	2901      	cmp	r1, #1
 8018350:	460d      	mov	r5, r1
 8018352:	461e      	mov	r6, r3
 8018354:	d102      	bne.n	801835c <rmw_validate_namespace_with_size+0x18>
 8018356:	7803      	ldrb	r3, [r0, #0]
 8018358:	2b2f      	cmp	r3, #47	@ 0x2f
 801835a:	d012      	beq.n	8018382 <rmw_validate_namespace_with_size+0x3e>
 801835c:	aa01      	add	r2, sp, #4
 801835e:	4669      	mov	r1, sp
 8018360:	f7ff ff7a 	bl	8018258 <rmw_validate_full_topic_name>
 8018364:	b978      	cbnz	r0, 8018386 <rmw_validate_namespace_with_size+0x42>
 8018366:	9b00      	ldr	r3, [sp, #0]
 8018368:	b14b      	cbz	r3, 801837e <rmw_validate_namespace_with_size+0x3a>
 801836a:	2b07      	cmp	r3, #7
 801836c:	d007      	beq.n	801837e <rmw_validate_namespace_with_size+0x3a>
 801836e:	1e5a      	subs	r2, r3, #1
 8018370:	2a05      	cmp	r2, #5
 8018372:	d82b      	bhi.n	80183cc <rmw_validate_namespace_with_size+0x88>
 8018374:	e8df f002 	tbb	[pc, r2]
 8018378:	1e212427 	.word	0x1e212427
 801837c:	141b      	.short	0x141b
 801837e:	2df5      	cmp	r5, #245	@ 0xf5
 8018380:	d803      	bhi.n	801838a <rmw_validate_namespace_with_size+0x46>
 8018382:	2000      	movs	r0, #0
 8018384:	6020      	str	r0, [r4, #0]
 8018386:	b042      	add	sp, #264	@ 0x108
 8018388:	bd70      	pop	{r4, r5, r6, pc}
 801838a:	2307      	movs	r3, #7
 801838c:	6023      	str	r3, [r4, #0]
 801838e:	2e00      	cmp	r6, #0
 8018390:	d0f9      	beq.n	8018386 <rmw_validate_namespace_with_size+0x42>
 8018392:	23f4      	movs	r3, #244	@ 0xf4
 8018394:	6033      	str	r3, [r6, #0]
 8018396:	e7f6      	b.n	8018386 <rmw_validate_namespace_with_size+0x42>
 8018398:	200b      	movs	r0, #11
 801839a:	4770      	bx	lr
 801839c:	200b      	movs	r0, #11
 801839e:	e7f2      	b.n	8018386 <rmw_validate_namespace_with_size+0x42>
 80183a0:	2306      	movs	r3, #6
 80183a2:	6023      	str	r3, [r4, #0]
 80183a4:	2e00      	cmp	r6, #0
 80183a6:	d0ee      	beq.n	8018386 <rmw_validate_namespace_with_size+0x42>
 80183a8:	9b01      	ldr	r3, [sp, #4]
 80183aa:	6033      	str	r3, [r6, #0]
 80183ac:	e7eb      	b.n	8018386 <rmw_validate_namespace_with_size+0x42>
 80183ae:	2305      	movs	r3, #5
 80183b0:	6023      	str	r3, [r4, #0]
 80183b2:	e7f7      	b.n	80183a4 <rmw_validate_namespace_with_size+0x60>
 80183b4:	2304      	movs	r3, #4
 80183b6:	6023      	str	r3, [r4, #0]
 80183b8:	e7f4      	b.n	80183a4 <rmw_validate_namespace_with_size+0x60>
 80183ba:	2303      	movs	r3, #3
 80183bc:	6023      	str	r3, [r4, #0]
 80183be:	e7f1      	b.n	80183a4 <rmw_validate_namespace_with_size+0x60>
 80183c0:	2302      	movs	r3, #2
 80183c2:	6023      	str	r3, [r4, #0]
 80183c4:	e7ee      	b.n	80183a4 <rmw_validate_namespace_with_size+0x60>
 80183c6:	2301      	movs	r3, #1
 80183c8:	6023      	str	r3, [r4, #0]
 80183ca:	e7eb      	b.n	80183a4 <rmw_validate_namespace_with_size+0x60>
 80183cc:	4a03      	ldr	r2, [pc, #12]	@ (80183dc <rmw_validate_namespace_with_size+0x98>)
 80183ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80183d2:	a802      	add	r0, sp, #8
 80183d4:	f7ff fcda 	bl	8017d8c <rcutils_snprintf>
 80183d8:	2001      	movs	r0, #1
 80183da:	e7d4      	b.n	8018386 <rmw_validate_namespace_with_size+0x42>
 80183dc:	0801d794 	.word	0x0801d794

080183e0 <rmw_validate_namespace>:
 80183e0:	b168      	cbz	r0, 80183fe <rmw_validate_namespace+0x1e>
 80183e2:	b570      	push	{r4, r5, r6, lr}
 80183e4:	460d      	mov	r5, r1
 80183e6:	4616      	mov	r6, r2
 80183e8:	4604      	mov	r4, r0
 80183ea:	f7e7 fefb 	bl	80001e4 <strlen>
 80183ee:	4633      	mov	r3, r6
 80183f0:	4601      	mov	r1, r0
 80183f2:	462a      	mov	r2, r5
 80183f4:	4620      	mov	r0, r4
 80183f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183fa:	f7ff bfa3 	b.w	8018344 <rmw_validate_namespace_with_size>
 80183fe:	200b      	movs	r0, #11
 8018400:	4770      	bx	lr
 8018402:	bf00      	nop

08018404 <rmw_namespace_validation_result_string>:
 8018404:	2807      	cmp	r0, #7
 8018406:	bf9a      	itte	ls
 8018408:	4b02      	ldrls	r3, [pc, #8]	@ (8018414 <rmw_namespace_validation_result_string+0x10>)
 801840a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801840e:	4802      	ldrhi	r0, [pc, #8]	@ (8018418 <rmw_namespace_validation_result_string+0x14>)
 8018410:	4770      	bx	lr
 8018412:	bf00      	nop
 8018414:	0801de84 	.word	0x0801de84
 8018418:	0801d7e4 	.word	0x0801d7e4

0801841c <rmw_validate_node_name>:
 801841c:	2800      	cmp	r0, #0
 801841e:	d03b      	beq.n	8018498 <rmw_validate_node_name+0x7c>
 8018420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018424:	460d      	mov	r5, r1
 8018426:	2900      	cmp	r1, #0
 8018428:	d038      	beq.n	801849c <rmw_validate_node_name+0x80>
 801842a:	4616      	mov	r6, r2
 801842c:	4604      	mov	r4, r0
 801842e:	f7e7 fed9 	bl	80001e4 <strlen>
 8018432:	b1e0      	cbz	r0, 801846e <rmw_validate_node_name+0x52>
 8018434:	1e63      	subs	r3, r4, #1
 8018436:	eb03 0800 	add.w	r8, r3, r0
 801843a:	f1c4 0101 	rsb	r1, r4, #1
 801843e:	18cf      	adds	r7, r1, r3
 8018440:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8018444:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8018448:	f02e 0c20 	bic.w	ip, lr, #32
 801844c:	2a09      	cmp	r2, #9
 801844e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8018452:	d914      	bls.n	801847e <rmw_validate_node_name+0x62>
 8018454:	f1bc 0f19 	cmp.w	ip, #25
 8018458:	d911      	bls.n	801847e <rmw_validate_node_name+0x62>
 801845a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801845e:	d00e      	beq.n	801847e <rmw_validate_node_name+0x62>
 8018460:	2302      	movs	r3, #2
 8018462:	602b      	str	r3, [r5, #0]
 8018464:	b106      	cbz	r6, 8018468 <rmw_validate_node_name+0x4c>
 8018466:	6037      	str	r7, [r6, #0]
 8018468:	2000      	movs	r0, #0
 801846a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801846e:	2301      	movs	r3, #1
 8018470:	602b      	str	r3, [r5, #0]
 8018472:	2e00      	cmp	r6, #0
 8018474:	d0f8      	beq.n	8018468 <rmw_validate_node_name+0x4c>
 8018476:	2000      	movs	r0, #0
 8018478:	6030      	str	r0, [r6, #0]
 801847a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801847e:	4543      	cmp	r3, r8
 8018480:	d1dd      	bne.n	801843e <rmw_validate_node_name+0x22>
 8018482:	7822      	ldrb	r2, [r4, #0]
 8018484:	4b0d      	ldr	r3, [pc, #52]	@ (80184bc <rmw_validate_node_name+0xa0>)
 8018486:	5cd3      	ldrb	r3, [r2, r3]
 8018488:	f013 0304 	ands.w	r3, r3, #4
 801848c:	d110      	bne.n	80184b0 <rmw_validate_node_name+0x94>
 801848e:	28ff      	cmp	r0, #255	@ 0xff
 8018490:	d806      	bhi.n	80184a0 <rmw_validate_node_name+0x84>
 8018492:	602b      	str	r3, [r5, #0]
 8018494:	4618      	mov	r0, r3
 8018496:	e7e8      	b.n	801846a <rmw_validate_node_name+0x4e>
 8018498:	200b      	movs	r0, #11
 801849a:	4770      	bx	lr
 801849c:	200b      	movs	r0, #11
 801849e:	e7e4      	b.n	801846a <rmw_validate_node_name+0x4e>
 80184a0:	2204      	movs	r2, #4
 80184a2:	602a      	str	r2, [r5, #0]
 80184a4:	2e00      	cmp	r6, #0
 80184a6:	d0df      	beq.n	8018468 <rmw_validate_node_name+0x4c>
 80184a8:	22fe      	movs	r2, #254	@ 0xfe
 80184aa:	6032      	str	r2, [r6, #0]
 80184ac:	4618      	mov	r0, r3
 80184ae:	e7dc      	b.n	801846a <rmw_validate_node_name+0x4e>
 80184b0:	2303      	movs	r3, #3
 80184b2:	602b      	str	r3, [r5, #0]
 80184b4:	2e00      	cmp	r6, #0
 80184b6:	d1de      	bne.n	8018476 <rmw_validate_node_name+0x5a>
 80184b8:	e7d6      	b.n	8018468 <rmw_validate_node_name+0x4c>
 80184ba:	bf00      	nop
 80184bc:	0801e1a3 	.word	0x0801e1a3

080184c0 <rmw_node_name_validation_result_string>:
 80184c0:	2804      	cmp	r0, #4
 80184c2:	bf9a      	itte	ls
 80184c4:	4b02      	ldrls	r3, [pc, #8]	@ (80184d0 <rmw_node_name_validation_result_string+0x10>)
 80184c6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80184ca:	4802      	ldrhi	r0, [pc, #8]	@ (80184d4 <rmw_node_name_validation_result_string+0x14>)
 80184cc:	4770      	bx	lr
 80184ce:	bf00      	nop
 80184d0:	0801dea4 	.word	0x0801dea4
 80184d4:	0801d98c 	.word	0x0801d98c

080184d8 <get_memory>:
 80184d8:	4603      	mov	r3, r0
 80184da:	6840      	ldr	r0, [r0, #4]
 80184dc:	b158      	cbz	r0, 80184f6 <get_memory+0x1e>
 80184de:	6842      	ldr	r2, [r0, #4]
 80184e0:	605a      	str	r2, [r3, #4]
 80184e2:	b10a      	cbz	r2, 80184e8 <get_memory+0x10>
 80184e4:	2100      	movs	r1, #0
 80184e6:	6011      	str	r1, [r2, #0]
 80184e8:	681a      	ldr	r2, [r3, #0]
 80184ea:	6042      	str	r2, [r0, #4]
 80184ec:	b102      	cbz	r2, 80184f0 <get_memory+0x18>
 80184ee:	6010      	str	r0, [r2, #0]
 80184f0:	2200      	movs	r2, #0
 80184f2:	6002      	str	r2, [r0, #0]
 80184f4:	6018      	str	r0, [r3, #0]
 80184f6:	4770      	bx	lr

080184f8 <put_memory>:
 80184f8:	680b      	ldr	r3, [r1, #0]
 80184fa:	b10b      	cbz	r3, 8018500 <put_memory+0x8>
 80184fc:	684a      	ldr	r2, [r1, #4]
 80184fe:	605a      	str	r2, [r3, #4]
 8018500:	684a      	ldr	r2, [r1, #4]
 8018502:	b102      	cbz	r2, 8018506 <put_memory+0xe>
 8018504:	6013      	str	r3, [r2, #0]
 8018506:	6803      	ldr	r3, [r0, #0]
 8018508:	428b      	cmp	r3, r1
 801850a:	6843      	ldr	r3, [r0, #4]
 801850c:	bf08      	it	eq
 801850e:	6002      	streq	r2, [r0, #0]
 8018510:	604b      	str	r3, [r1, #4]
 8018512:	b103      	cbz	r3, 8018516 <put_memory+0x1e>
 8018514:	6019      	str	r1, [r3, #0]
 8018516:	2300      	movs	r3, #0
 8018518:	600b      	str	r3, [r1, #0]
 801851a:	6041      	str	r1, [r0, #4]
 801851c:	4770      	bx	lr
 801851e:	bf00      	nop

08018520 <rmw_destroy_client>:
 8018520:	b570      	push	{r4, r5, r6, lr}
 8018522:	b128      	cbz	r0, 8018530 <rmw_destroy_client+0x10>
 8018524:	4604      	mov	r4, r0
 8018526:	6800      	ldr	r0, [r0, #0]
 8018528:	460d      	mov	r5, r1
 801852a:	f7f9 fec3 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 801852e:	b910      	cbnz	r0, 8018536 <rmw_destroy_client+0x16>
 8018530:	2401      	movs	r4, #1
 8018532:	4620      	mov	r0, r4
 8018534:	bd70      	pop	{r4, r5, r6, pc}
 8018536:	6863      	ldr	r3, [r4, #4]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d0f9      	beq.n	8018530 <rmw_destroy_client+0x10>
 801853c:	2d00      	cmp	r5, #0
 801853e:	d0f7      	beq.n	8018530 <rmw_destroy_client+0x10>
 8018540:	6828      	ldr	r0, [r5, #0]
 8018542:	f7f9 feb7 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 8018546:	2800      	cmp	r0, #0
 8018548:	d0f2      	beq.n	8018530 <rmw_destroy_client+0x10>
 801854a:	686e      	ldr	r6, [r5, #4]
 801854c:	2e00      	cmp	r6, #0
 801854e:	d0ef      	beq.n	8018530 <rmw_destroy_client+0x10>
 8018550:	6864      	ldr	r4, [r4, #4]
 8018552:	6932      	ldr	r2, [r6, #16]
 8018554:	6920      	ldr	r0, [r4, #16]
 8018556:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801855a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801855e:	6819      	ldr	r1, [r3, #0]
 8018560:	f002 f91c 	bl	801a79c <uxr_buffer_cancel_data>
 8018564:	4602      	mov	r2, r0
 8018566:	6920      	ldr	r0, [r4, #16]
 8018568:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801856c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018570:	f7f9 fe20 	bl	80121b4 <run_xrce_session>
 8018574:	6920      	ldr	r0, [r4, #16]
 8018576:	6932      	ldr	r2, [r6, #16]
 8018578:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801857c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018580:	6819      	ldr	r1, [r3, #0]
 8018582:	f7f9 ffc5 	bl	8012510 <uxr_buffer_delete_entity>
 8018586:	4602      	mov	r2, r0
 8018588:	6920      	ldr	r0, [r4, #16]
 801858a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801858e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018592:	f7f9 fe0f 	bl	80121b4 <run_xrce_session>
 8018596:	2800      	cmp	r0, #0
 8018598:	4628      	mov	r0, r5
 801859a:	bf14      	ite	ne
 801859c:	2400      	movne	r4, #0
 801859e:	2402      	moveq	r4, #2
 80185a0:	f7f9 fcf0 	bl	8011f84 <rmw_uxrce_fini_client_memory>
 80185a4:	e7c5      	b.n	8018532 <rmw_destroy_client+0x12>
 80185a6:	bf00      	nop

080185a8 <rmw_get_implementation_identifier>:
 80185a8:	4b01      	ldr	r3, [pc, #4]	@ (80185b0 <rmw_get_implementation_identifier+0x8>)
 80185aa:	6818      	ldr	r0, [r3, #0]
 80185ac:	4770      	bx	lr
 80185ae:	bf00      	nop
 80185b0:	0801deb8 	.word	0x0801deb8

080185b4 <rmw_init_options_init>:
 80185b4:	b084      	sub	sp, #16
 80185b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185b8:	b083      	sub	sp, #12
 80185ba:	ad09      	add	r5, sp, #36	@ 0x24
 80185bc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80185c0:	b130      	cbz	r0, 80185d0 <rmw_init_options_init+0x1c>
 80185c2:	4604      	mov	r4, r0
 80185c4:	4628      	mov	r0, r5
 80185c6:	f7f9 f8cf 	bl	8011768 <rcutils_allocator_is_valid>
 80185ca:	b108      	cbz	r0, 80185d0 <rmw_init_options_init+0x1c>
 80185cc:	68a6      	ldr	r6, [r4, #8]
 80185ce:	b12e      	cbz	r6, 80185dc <rmw_init_options_init+0x28>
 80185d0:	200b      	movs	r0, #11
 80185d2:	b003      	add	sp, #12
 80185d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80185d8:	b004      	add	sp, #16
 80185da:	4770      	bx	lr
 80185dc:	2200      	movs	r2, #0
 80185de:	2300      	movs	r3, #0
 80185e0:	e9c4 2300 	strd	r2, r3, [r4]
 80185e4:	4b20      	ldr	r3, [pc, #128]	@ (8018668 <rmw_init_options_init+0xb4>)
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	60a3      	str	r3, [r4, #8]
 80185ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185ec:	f104 0c20 	add.w	ip, r4, #32
 80185f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80185f4:	466f      	mov	r7, sp
 80185f6:	682b      	ldr	r3, [r5, #0]
 80185f8:	f8cc 3000 	str.w	r3, [ip]
 80185fc:	4638      	mov	r0, r7
 80185fe:	61e6      	str	r6, [r4, #28]
 8018600:	60e6      	str	r6, [r4, #12]
 8018602:	f7ff fd79 	bl	80180f8 <rmw_get_default_security_options>
 8018606:	e897 0003 	ldmia.w	r7, {r0, r1}
 801860a:	f104 0310 	add.w	r3, r4, #16
 801860e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018612:	2203      	movs	r2, #3
 8018614:	4815      	ldr	r0, [pc, #84]	@ (801866c <rmw_init_options_init+0xb8>)
 8018616:	4916      	ldr	r1, [pc, #88]	@ (8018670 <rmw_init_options_init+0xbc>)
 8018618:	7626      	strb	r6, [r4, #24]
 801861a:	f7f9 fbf3 	bl	8011e04 <rmw_uxrce_init_init_options_impl_memory>
 801861e:	4813      	ldr	r0, [pc, #76]	@ (801866c <rmw_init_options_init+0xb8>)
 8018620:	f7ff ff5a 	bl	80184d8 <get_memory>
 8018624:	b1f0      	cbz	r0, 8018664 <rmw_init_options_init+0xb0>
 8018626:	4a13      	ldr	r2, [pc, #76]	@ (8018674 <rmw_init_options_init+0xc0>)
 8018628:	6883      	ldr	r3, [r0, #8]
 801862a:	6851      	ldr	r1, [r2, #4]
 801862c:	7810      	ldrb	r0, [r2, #0]
 801862e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018630:	7418      	strb	r0, [r3, #16]
 8018632:	6159      	str	r1, [r3, #20]
 8018634:	68d1      	ldr	r1, [r2, #12]
 8018636:	61d9      	str	r1, [r3, #28]
 8018638:	6911      	ldr	r1, [r2, #16]
 801863a:	6219      	str	r1, [r3, #32]
 801863c:	6951      	ldr	r1, [r2, #20]
 801863e:	6892      	ldr	r2, [r2, #8]
 8018640:	619a      	str	r2, [r3, #24]
 8018642:	6259      	str	r1, [r3, #36]	@ 0x24
 8018644:	f7fb fbc0 	bl	8013dc8 <uxr_nanos>
 8018648:	f003 fbc6 	bl	801bdd8 <srand>
 801864c:	f003 fbf2 	bl	801be34 <rand>
 8018650:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018652:	6298      	str	r0, [r3, #40]	@ 0x28
 8018654:	2800      	cmp	r0, #0
 8018656:	d0f9      	beq.n	801864c <rmw_init_options_init+0x98>
 8018658:	2000      	movs	r0, #0
 801865a:	b003      	add	sp, #12
 801865c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018660:	b004      	add	sp, #16
 8018662:	4770      	bx	lr
 8018664:	2001      	movs	r0, #1
 8018666:	e7b4      	b.n	80185d2 <rmw_init_options_init+0x1e>
 8018668:	0801deb8 	.word	0x0801deb8
 801866c:	2000e504 	.word	0x2000e504
 8018670:	20009da0 	.word	0x20009da0
 8018674:	20009c2c 	.word	0x20009c2c

08018678 <rmw_init_options_copy>:
 8018678:	b570      	push	{r4, r5, r6, lr}
 801867a:	b088      	sub	sp, #32
 801867c:	b160      	cbz	r0, 8018698 <rmw_init_options_copy+0x20>
 801867e:	460d      	mov	r5, r1
 8018680:	b151      	cbz	r1, 8018698 <rmw_init_options_copy+0x20>
 8018682:	4604      	mov	r4, r0
 8018684:	6880      	ldr	r0, [r0, #8]
 8018686:	b128      	cbz	r0, 8018694 <rmw_init_options_copy+0x1c>
 8018688:	4b33      	ldr	r3, [pc, #204]	@ (8018758 <rmw_init_options_copy+0xe0>)
 801868a:	6819      	ldr	r1, [r3, #0]
 801868c:	f7e7 fda0 	bl	80001d0 <strcmp>
 8018690:	2800      	cmp	r0, #0
 8018692:	d154      	bne.n	801873e <rmw_init_options_copy+0xc6>
 8018694:	68ab      	ldr	r3, [r5, #8]
 8018696:	b11b      	cbz	r3, 80186a0 <rmw_init_options_copy+0x28>
 8018698:	240b      	movs	r4, #11
 801869a:	4620      	mov	r0, r4
 801869c:	b008      	add	sp, #32
 801869e:	bd70      	pop	{r4, r5, r6, pc}
 80186a0:	4623      	mov	r3, r4
 80186a2:	462a      	mov	r2, r5
 80186a4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80186a8:	f8d3 c000 	ldr.w	ip, [r3]
 80186ac:	6858      	ldr	r0, [r3, #4]
 80186ae:	6899      	ldr	r1, [r3, #8]
 80186b0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80186b4:	f8c2 e00c 	str.w	lr, [r2, #12]
 80186b8:	3310      	adds	r3, #16
 80186ba:	42b3      	cmp	r3, r6
 80186bc:	f8c2 c000 	str.w	ip, [r2]
 80186c0:	6050      	str	r0, [r2, #4]
 80186c2:	6091      	str	r1, [r2, #8]
 80186c4:	f102 0210 	add.w	r2, r2, #16
 80186c8:	d1ee      	bne.n	80186a8 <rmw_init_options_copy+0x30>
 80186ca:	6819      	ldr	r1, [r3, #0]
 80186cc:	685b      	ldr	r3, [r3, #4]
 80186ce:	6053      	str	r3, [r2, #4]
 80186d0:	6011      	str	r1, [r2, #0]
 80186d2:	f104 0e20 	add.w	lr, r4, #32
 80186d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80186da:	f10d 0c0c 	add.w	ip, sp, #12
 80186de:	4666      	mov	r6, ip
 80186e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186e4:	f8de 3000 	ldr.w	r3, [lr]
 80186e8:	f8cc 3000 	str.w	r3, [ip]
 80186ec:	4630      	mov	r0, r6
 80186ee:	f7f9 f83b 	bl	8011768 <rcutils_allocator_is_valid>
 80186f2:	2800      	cmp	r0, #0
 80186f4:	d0d0      	beq.n	8018698 <rmw_init_options_copy+0x20>
 80186f6:	ab08      	add	r3, sp, #32
 80186f8:	e913 0003 	ldmdb	r3, {r0, r1}
 80186fc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018700:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8018704:	69e0      	ldr	r0, [r4, #28]
 8018706:	f7ff fb6d 	bl	8017de4 <rcutils_strdup>
 801870a:	61e8      	str	r0, [r5, #28]
 801870c:	69e3      	ldr	r3, [r4, #28]
 801870e:	b103      	cbz	r3, 8018712 <rmw_init_options_copy+0x9a>
 8018710:	b1f8      	cbz	r0, 8018752 <rmw_init_options_copy+0xda>
 8018712:	4812      	ldr	r0, [pc, #72]	@ (801875c <rmw_init_options_copy+0xe4>)
 8018714:	f7ff fee0 	bl	80184d8 <get_memory>
 8018718:	b1a8      	cbz	r0, 8018746 <rmw_init_options_copy+0xce>
 801871a:	6883      	ldr	r3, [r0, #8]
 801871c:	636b      	str	r3, [r5, #52]	@ 0x34
 801871e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8018720:	f102 0c10 	add.w	ip, r2, #16
 8018724:	f103 0510 	add.w	r5, r3, #16
 8018728:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801872c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801872e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8018732:	2400      	movs	r4, #0
 8018734:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018738:	4620      	mov	r0, r4
 801873a:	b008      	add	sp, #32
 801873c:	bd70      	pop	{r4, r5, r6, pc}
 801873e:	240c      	movs	r4, #12
 8018740:	4620      	mov	r0, r4
 8018742:	b008      	add	sp, #32
 8018744:	bd70      	pop	{r4, r5, r6, pc}
 8018746:	9b04      	ldr	r3, [sp, #16]
 8018748:	9907      	ldr	r1, [sp, #28]
 801874a:	69e8      	ldr	r0, [r5, #28]
 801874c:	4798      	blx	r3
 801874e:	2401      	movs	r4, #1
 8018750:	e7a3      	b.n	801869a <rmw_init_options_copy+0x22>
 8018752:	240a      	movs	r4, #10
 8018754:	e7a1      	b.n	801869a <rmw_init_options_copy+0x22>
 8018756:	bf00      	nop
 8018758:	0801deb8 	.word	0x0801deb8
 801875c:	2000e504 	.word	0x2000e504

08018760 <rmw_init_options_fini>:
 8018760:	2800      	cmp	r0, #0
 8018762:	d041      	beq.n	80187e8 <rmw_init_options_fini+0x88>
 8018764:	b510      	push	{r4, lr}
 8018766:	4604      	mov	r4, r0
 8018768:	b08e      	sub	sp, #56	@ 0x38
 801876a:	3020      	adds	r0, #32
 801876c:	f7f8 fffc 	bl	8011768 <rcutils_allocator_is_valid>
 8018770:	b380      	cbz	r0, 80187d4 <rmw_init_options_fini+0x74>
 8018772:	68a0      	ldr	r0, [r4, #8]
 8018774:	b120      	cbz	r0, 8018780 <rmw_init_options_fini+0x20>
 8018776:	4b1e      	ldr	r3, [pc, #120]	@ (80187f0 <rmw_init_options_fini+0x90>)
 8018778:	6819      	ldr	r1, [r3, #0]
 801877a:	f7e7 fd29 	bl	80001d0 <strcmp>
 801877e:	bb88      	cbnz	r0, 80187e4 <rmw_init_options_fini+0x84>
 8018780:	4b1c      	ldr	r3, [pc, #112]	@ (80187f4 <rmw_init_options_fini+0x94>)
 8018782:	6819      	ldr	r1, [r3, #0]
 8018784:	b351      	cbz	r1, 80187dc <rmw_init_options_fini+0x7c>
 8018786:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8018788:	e001      	b.n	801878e <rmw_init_options_fini+0x2e>
 801878a:	6849      	ldr	r1, [r1, #4]
 801878c:	b331      	cbz	r1, 80187dc <rmw_init_options_fini+0x7c>
 801878e:	688b      	ldr	r3, [r1, #8]
 8018790:	429a      	cmp	r2, r3
 8018792:	d1fa      	bne.n	801878a <rmw_init_options_fini+0x2a>
 8018794:	4817      	ldr	r0, [pc, #92]	@ (80187f4 <rmw_init_options_fini+0x94>)
 8018796:	f7ff feaf 	bl	80184f8 <put_memory>
 801879a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801879c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801879e:	69e0      	ldr	r0, [r4, #28]
 80187a0:	4798      	blx	r3
 80187a2:	4668      	mov	r0, sp
 80187a4:	f7ff fc98 	bl	80180d8 <rmw_get_zero_initialized_init_options>
 80187a8:	46ee      	mov	lr, sp
 80187aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80187ae:	46a4      	mov	ip, r4
 80187b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80187b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80187c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80187c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80187cc:	2300      	movs	r3, #0
 80187ce:	4618      	mov	r0, r3
 80187d0:	b00e      	add	sp, #56	@ 0x38
 80187d2:	bd10      	pop	{r4, pc}
 80187d4:	230b      	movs	r3, #11
 80187d6:	4618      	mov	r0, r3
 80187d8:	b00e      	add	sp, #56	@ 0x38
 80187da:	bd10      	pop	{r4, pc}
 80187dc:	2301      	movs	r3, #1
 80187de:	4618      	mov	r0, r3
 80187e0:	b00e      	add	sp, #56	@ 0x38
 80187e2:	bd10      	pop	{r4, pc}
 80187e4:	230c      	movs	r3, #12
 80187e6:	e7f2      	b.n	80187ce <rmw_init_options_fini+0x6e>
 80187e8:	230b      	movs	r3, #11
 80187ea:	4618      	mov	r0, r3
 80187ec:	4770      	bx	lr
 80187ee:	bf00      	nop
 80187f0:	0801deb8 	.word	0x0801deb8
 80187f4:	2000e504 	.word	0x2000e504

080187f8 <rmw_init>:
 80187f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187fc:	b083      	sub	sp, #12
 80187fe:	2800      	cmp	r0, #0
 8018800:	f000 80d3 	beq.w	80189aa <rmw_init+0x1b2>
 8018804:	460e      	mov	r6, r1
 8018806:	2900      	cmp	r1, #0
 8018808:	f000 80cf 	beq.w	80189aa <rmw_init+0x1b2>
 801880c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801880e:	4605      	mov	r5, r0
 8018810:	2b00      	cmp	r3, #0
 8018812:	f000 80ca 	beq.w	80189aa <rmw_init+0x1b2>
 8018816:	4b78      	ldr	r3, [pc, #480]	@ (80189f8 <rmw_init+0x200>)
 8018818:	6880      	ldr	r0, [r0, #8]
 801881a:	681f      	ldr	r7, [r3, #0]
 801881c:	b128      	cbz	r0, 801882a <rmw_init+0x32>
 801881e:	4639      	mov	r1, r7
 8018820:	f7e7 fcd6 	bl	80001d0 <strcmp>
 8018824:	2800      	cmp	r0, #0
 8018826:	f040 80ca 	bne.w	80189be <rmw_init+0x1c6>
 801882a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801882e:	4c73      	ldr	r4, [pc, #460]	@ (80189fc <rmw_init+0x204>)
 8018830:	4973      	ldr	r1, [pc, #460]	@ (8018a00 <rmw_init+0x208>)
 8018832:	4874      	ldr	r0, [pc, #464]	@ (8018a04 <rmw_init+0x20c>)
 8018834:	60b7      	str	r7, [r6, #8]
 8018836:	e9c6 2300 	strd	r2, r3, [r6]
 801883a:	68eb      	ldr	r3, [r5, #12]
 801883c:	64b3      	str	r3, [r6, #72]	@ 0x48
 801883e:	2201      	movs	r2, #1
 8018840:	f7f9 fa80 	bl	8011d44 <rmw_uxrce_init_session_memory>
 8018844:	4620      	mov	r0, r4
 8018846:	4970      	ldr	r1, [pc, #448]	@ (8018a08 <rmw_init+0x210>)
 8018848:	2204      	movs	r2, #4
 801884a:	f7f9 fabb 	bl	8011dc4 <rmw_uxrce_init_static_input_buffer_memory>
 801884e:	f04f 0800 	mov.w	r8, #0
 8018852:	486c      	ldr	r0, [pc, #432]	@ (8018a04 <rmw_init+0x20c>)
 8018854:	f884 800d 	strb.w	r8, [r4, #13]
 8018858:	f7ff fe3e 	bl	80184d8 <get_memory>
 801885c:	2800      	cmp	r0, #0
 801885e:	f000 80a9 	beq.w	80189b4 <rmw_init+0x1bc>
 8018862:	6884      	ldr	r4, [r0, #8]
 8018864:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8018866:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018868:	f890 c010 	ldrb.w	ip, [r0, #16]
 801886c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018870:	9101      	str	r1, [sp, #4]
 8018872:	6a00      	ldr	r0, [r0, #32]
 8018874:	9000      	str	r0, [sp, #0]
 8018876:	f104 0910 	add.w	r9, r4, #16
 801887a:	4661      	mov	r1, ip
 801887c:	4648      	mov	r0, r9
 801887e:	f001 f9c5 	bl	8019c0c <uxr_set_custom_transport_callbacks>
 8018882:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8018886:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801888a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801888e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8018892:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8018896:	495d      	ldr	r1, [pc, #372]	@ (8018a0c <rmw_init+0x214>)
 8018898:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801889c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80188a0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80188a4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80188a8:	4859      	ldr	r0, [pc, #356]	@ (8018a10 <rmw_init+0x218>)
 80188aa:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80188ae:	2201      	movs	r2, #1
 80188b0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80188b2:	f7f9 fa27 	bl	8011d04 <rmw_uxrce_init_node_memory>
 80188b6:	4957      	ldr	r1, [pc, #348]	@ (8018a14 <rmw_init+0x21c>)
 80188b8:	4857      	ldr	r0, [pc, #348]	@ (8018a18 <rmw_init+0x220>)
 80188ba:	2205      	movs	r2, #5
 80188bc:	f7f9 fa02 	bl	8011cc4 <rmw_uxrce_init_subscription_memory>
 80188c0:	4956      	ldr	r1, [pc, #344]	@ (8018a1c <rmw_init+0x224>)
 80188c2:	4857      	ldr	r0, [pc, #348]	@ (8018a20 <rmw_init+0x228>)
 80188c4:	220a      	movs	r2, #10
 80188c6:	f7f9 f9dd 	bl	8011c84 <rmw_uxrce_init_publisher_memory>
 80188ca:	4956      	ldr	r1, [pc, #344]	@ (8018a24 <rmw_init+0x22c>)
 80188cc:	4856      	ldr	r0, [pc, #344]	@ (8018a28 <rmw_init+0x230>)
 80188ce:	2201      	movs	r2, #1
 80188d0:	f7f9 f998 	bl	8011c04 <rmw_uxrce_init_service_memory>
 80188d4:	4955      	ldr	r1, [pc, #340]	@ (8018a2c <rmw_init+0x234>)
 80188d6:	4856      	ldr	r0, [pc, #344]	@ (8018a30 <rmw_init+0x238>)
 80188d8:	2201      	movs	r2, #1
 80188da:	f7f9 f9b3 	bl	8011c44 <rmw_uxrce_init_client_memory>
 80188de:	4955      	ldr	r1, [pc, #340]	@ (8018a34 <rmw_init+0x23c>)
 80188e0:	4855      	ldr	r0, [pc, #340]	@ (8018a38 <rmw_init+0x240>)
 80188e2:	220f      	movs	r2, #15
 80188e4:	f7f9 fa4e 	bl	8011d84 <rmw_uxrce_init_topic_memory>
 80188e8:	4954      	ldr	r1, [pc, #336]	@ (8018a3c <rmw_init+0x244>)
 80188ea:	4855      	ldr	r0, [pc, #340]	@ (8018a40 <rmw_init+0x248>)
 80188ec:	2203      	movs	r2, #3
 80188ee:	f7f9 fa89 	bl	8011e04 <rmw_uxrce_init_init_options_impl_memory>
 80188f2:	4954      	ldr	r1, [pc, #336]	@ (8018a44 <rmw_init+0x24c>)
 80188f4:	4854      	ldr	r0, [pc, #336]	@ (8018a48 <rmw_init+0x250>)
 80188f6:	2204      	movs	r2, #4
 80188f8:	f7f9 faa4 	bl	8011e44 <rmw_uxrce_init_wait_set_memory>
 80188fc:	4953      	ldr	r1, [pc, #332]	@ (8018a4c <rmw_init+0x254>)
 80188fe:	4854      	ldr	r0, [pc, #336]	@ (8018a50 <rmw_init+0x258>)
 8018900:	2204      	movs	r2, #4
 8018902:	f7f9 fabf 	bl	8011e84 <rmw_uxrce_init_guard_condition_memory>
 8018906:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8018908:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801890a:	4642      	mov	r2, r8
 801890c:	f000 fd9e 	bl	801944c <rmw_uxrce_transport_init>
 8018910:	4607      	mov	r7, r0
 8018912:	2800      	cmp	r0, #0
 8018914:	d158      	bne.n	80189c8 <rmw_init+0x1d0>
 8018916:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8018918:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801891c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801891e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8018922:	4628      	mov	r0, r5
 8018924:	f7fa f8b4 	bl	8012a90 <uxr_init_session>
 8018928:	494a      	ldr	r1, [pc, #296]	@ (8018a54 <rmw_init+0x25c>)
 801892a:	4622      	mov	r2, r4
 801892c:	4628      	mov	r0, r5
 801892e:	f7fa f8d3 	bl	8012ad8 <uxr_set_topic_callback>
 8018932:	4949      	ldr	r1, [pc, #292]	@ (8018a58 <rmw_init+0x260>)
 8018934:	463a      	mov	r2, r7
 8018936:	4628      	mov	r0, r5
 8018938:	f7fa f8ca 	bl	8012ad0 <uxr_set_status_callback>
 801893c:	4947      	ldr	r1, [pc, #284]	@ (8018a5c <rmw_init+0x264>)
 801893e:	463a      	mov	r2, r7
 8018940:	4628      	mov	r0, r5
 8018942:	f7fa f8cd 	bl	8012ae0 <uxr_set_request_callback>
 8018946:	4946      	ldr	r1, [pc, #280]	@ (8018a60 <rmw_init+0x268>)
 8018948:	463a      	mov	r2, r7
 801894a:	4628      	mov	r0, r5
 801894c:	f7fa f8cc 	bl	8012ae8 <uxr_set_reply_callback>
 8018950:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018954:	2304      	movs	r3, #4
 8018956:	0092      	lsls	r2, r2, #2
 8018958:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801895c:	4628      	mov	r0, r5
 801895e:	f7fa f901 	bl	8012b64 <uxr_create_input_reliable_stream>
 8018962:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018966:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801896a:	0092      	lsls	r2, r2, #2
 801896c:	2304      	movs	r3, #4
 801896e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8018972:	4628      	mov	r0, r5
 8018974:	f7fa f8ce 	bl	8012b14 <uxr_create_output_reliable_stream>
 8018978:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801897c:	4628      	mov	r0, r5
 801897e:	f7fa f8eb 	bl	8012b58 <uxr_create_input_best_effort_stream>
 8018982:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8018986:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801898a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801898e:	3114      	adds	r1, #20
 8018990:	4628      	mov	r0, r5
 8018992:	f7fa f8ad 	bl	8012af0 <uxr_create_output_best_effort_stream>
 8018996:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801899a:	4628      	mov	r0, r5
 801899c:	f7fa fe38 	bl	8013610 <uxr_create_session>
 80189a0:	b1f8      	cbz	r0, 80189e2 <rmw_init+0x1ea>
 80189a2:	4638      	mov	r0, r7
 80189a4:	b003      	add	sp, #12
 80189a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189aa:	270b      	movs	r7, #11
 80189ac:	4638      	mov	r0, r7
 80189ae:	b003      	add	sp, #12
 80189b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189b4:	2701      	movs	r7, #1
 80189b6:	4638      	mov	r0, r7
 80189b8:	b003      	add	sp, #12
 80189ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189be:	270c      	movs	r7, #12
 80189c0:	4638      	mov	r0, r7
 80189c2:	b003      	add	sp, #12
 80189c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189c8:	4648      	mov	r0, r9
 80189ca:	f001 f961 	bl	8019c90 <uxr_close_custom_transport>
 80189ce:	480d      	ldr	r0, [pc, #52]	@ (8018a04 <rmw_init+0x20c>)
 80189d0:	4621      	mov	r1, r4
 80189d2:	f7ff fd91 	bl	80184f8 <put_memory>
 80189d6:	4638      	mov	r0, r7
 80189d8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80189dc:	b003      	add	sp, #12
 80189de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189e2:	4648      	mov	r0, r9
 80189e4:	f001 f954 	bl	8019c90 <uxr_close_custom_transport>
 80189e8:	4806      	ldr	r0, [pc, #24]	@ (8018a04 <rmw_init+0x20c>)
 80189ea:	4621      	mov	r1, r4
 80189ec:	f7ff fd84 	bl	80184f8 <put_memory>
 80189f0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80189f2:	2701      	movs	r7, #1
 80189f4:	e7d5      	b.n	80189a2 <rmw_init+0x1aa>
 80189f6:	bf00      	nop
 80189f8:	0801deb8 	.word	0x0801deb8
 80189fc:	2000e554 	.word	0x2000e554
 8018a00:	2000a800 	.word	0x2000a800
 8018a04:	2000e544 	.word	0x2000e544
 8018a08:	2000bda8 	.word	0x2000bda8
 8018a0c:	20009e24 	.word	0x20009e24
 8018a10:	2000e514 	.word	0x2000e514
 8018a14:	2000dea8 	.word	0x2000dea8
 8018a18:	2000e564 	.word	0x2000e564
 8018a1c:	20009ec8 	.word	0x20009ec8
 8018a20:	2000e524 	.word	0x2000e524
 8018a24:	2000a738 	.word	0x2000a738
 8018a28:	2000e534 	.word	0x2000e534
 8018a2c:	20009c58 	.word	0x20009c58
 8018a30:	20009c48 	.word	0x20009c48
 8018a34:	2000e2e0 	.word	0x2000e2e0
 8018a38:	2000e574 	.word	0x2000e574
 8018a3c:	20009da0 	.word	0x20009da0
 8018a40:	2000e504 	.word	0x2000e504
 8018a44:	2000e484 	.word	0x2000e484
 8018a48:	2000e584 	.word	0x2000e584
 8018a4c:	20009d20 	.word	0x20009d20
 8018a50:	2000e4f4 	.word	0x2000e4f4
 8018a54:	0801b97d 	.word	0x0801b97d
 8018a58:	0801b975 	.word	0x0801b975
 8018a5c:	0801ba15 	.word	0x0801ba15
 8018a60:	0801bab1 	.word	0x0801bab1

08018a64 <rmw_context_fini>:
 8018a64:	4b17      	ldr	r3, [pc, #92]	@ (8018ac4 <rmw_context_fini+0x60>)
 8018a66:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8018a68:	b570      	push	{r4, r5, r6, lr}
 8018a6a:	681c      	ldr	r4, [r3, #0]
 8018a6c:	4605      	mov	r5, r0
 8018a6e:	b334      	cbz	r4, 8018abe <rmw_context_fini+0x5a>
 8018a70:	2600      	movs	r6, #0
 8018a72:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8018a76:	6902      	ldr	r2, [r0, #16]
 8018a78:	428a      	cmp	r2, r1
 8018a7a:	d018      	beq.n	8018aae <rmw_context_fini+0x4a>
 8018a7c:	2c00      	cmp	r4, #0
 8018a7e:	d1f8      	bne.n	8018a72 <rmw_context_fini+0xe>
 8018a80:	b189      	cbz	r1, 8018aa6 <rmw_context_fini+0x42>
 8018a82:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8018a86:	789b      	ldrb	r3, [r3, #2]
 8018a88:	2b01      	cmp	r3, #1
 8018a8a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8018a8e:	bf14      	ite	ne
 8018a90:	210a      	movne	r1, #10
 8018a92:	2100      	moveq	r1, #0
 8018a94:	f7fa fd94 	bl	80135c0 <uxr_delete_session_retries>
 8018a98:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8018a9a:	f7f9 fa13 	bl	8011ec4 <rmw_uxrce_fini_session_memory>
 8018a9e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8018aa0:	3010      	adds	r0, #16
 8018aa2:	f001 f8f5 	bl	8019c90 <uxr_close_custom_transport>
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8018aaa:	4630      	mov	r0, r6
 8018aac:	bd70      	pop	{r4, r5, r6, pc}
 8018aae:	3018      	adds	r0, #24
 8018ab0:	f000 f90e 	bl	8018cd0 <rmw_destroy_node>
 8018ab4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8018ab6:	4606      	mov	r6, r0
 8018ab8:	2c00      	cmp	r4, #0
 8018aba:	d1da      	bne.n	8018a72 <rmw_context_fini+0xe>
 8018abc:	e7e0      	b.n	8018a80 <rmw_context_fini+0x1c>
 8018abe:	4626      	mov	r6, r4
 8018ac0:	e7de      	b.n	8018a80 <rmw_context_fini+0x1c>
 8018ac2:	bf00      	nop
 8018ac4:	2000e514 	.word	0x2000e514

08018ac8 <create_topic>:
 8018ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018acc:	4605      	mov	r5, r0
 8018ace:	b084      	sub	sp, #16
 8018ad0:	4822      	ldr	r0, [pc, #136]	@ (8018b5c <create_topic+0x94>)
 8018ad2:	460f      	mov	r7, r1
 8018ad4:	4616      	mov	r6, r2
 8018ad6:	f7ff fcff 	bl	80184d8 <get_memory>
 8018ada:	4604      	mov	r4, r0
 8018adc:	2800      	cmp	r0, #0
 8018ade:	d039      	beq.n	8018b54 <create_topic+0x8c>
 8018ae0:	692b      	ldr	r3, [r5, #16]
 8018ae2:	6884      	ldr	r4, [r0, #8]
 8018ae4:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8018b64 <create_topic+0x9c>
 8018ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018aec:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8018af0:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8018af4:	1c42      	adds	r2, r0, #1
 8018af6:	2102      	movs	r1, #2
 8018af8:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8018afc:	f7f9 ff0a 	bl	8012914 <uxr_object_id>
 8018b00:	223c      	movs	r2, #60	@ 0x3c
 8018b02:	6120      	str	r0, [r4, #16]
 8018b04:	4641      	mov	r1, r8
 8018b06:	4638      	mov	r0, r7
 8018b08:	f7f9 fbba 	bl	8012280 <generate_topic_name>
 8018b0c:	b1f0      	cbz	r0, 8018b4c <create_topic+0x84>
 8018b0e:	4f14      	ldr	r7, [pc, #80]	@ (8018b60 <create_topic+0x98>)
 8018b10:	4630      	mov	r0, r6
 8018b12:	2264      	movs	r2, #100	@ 0x64
 8018b14:	4639      	mov	r1, r7
 8018b16:	f7f9 fb83 	bl	8012220 <generate_type_name>
 8018b1a:	b1b8      	cbz	r0, 8018b4c <create_topic+0x84>
 8018b1c:	6928      	ldr	r0, [r5, #16]
 8018b1e:	2306      	movs	r3, #6
 8018b20:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018b24:	f8cd 8000 	str.w	r8, [sp]
 8018b28:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8018b2c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b30:	6811      	ldr	r1, [r2, #0]
 8018b32:	696b      	ldr	r3, [r5, #20]
 8018b34:	6922      	ldr	r2, [r4, #16]
 8018b36:	f7f9 fd69 	bl	801260c <uxr_buffer_create_topic_bin>
 8018b3a:	4602      	mov	r2, r0
 8018b3c:	6928      	ldr	r0, [r5, #16]
 8018b3e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018b42:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018b46:	f7f9 fb35 	bl	80121b4 <run_xrce_session>
 8018b4a:	b918      	cbnz	r0, 8018b54 <create_topic+0x8c>
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	f7f9 fa2f 	bl	8011fb0 <rmw_uxrce_fini_topic_memory>
 8018b52:	2400      	movs	r4, #0
 8018b54:	4620      	mov	r0, r4
 8018b56:	b004      	add	sp, #16
 8018b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b5c:	2000e574 	.word	0x2000e574
 8018b60:	2000e660 	.word	0x2000e660
 8018b64:	2000e624 	.word	0x2000e624

08018b68 <destroy_topic>:
 8018b68:	b538      	push	{r3, r4, r5, lr}
 8018b6a:	6985      	ldr	r5, [r0, #24]
 8018b6c:	b1d5      	cbz	r5, 8018ba4 <destroy_topic+0x3c>
 8018b6e:	4604      	mov	r4, r0
 8018b70:	6928      	ldr	r0, [r5, #16]
 8018b72:	6922      	ldr	r2, [r4, #16]
 8018b74:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018b78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b7c:	6819      	ldr	r1, [r3, #0]
 8018b7e:	f7f9 fcc7 	bl	8012510 <uxr_buffer_delete_entity>
 8018b82:	4602      	mov	r2, r0
 8018b84:	6928      	ldr	r0, [r5, #16]
 8018b86:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018b8a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018b8e:	f7f9 fb11 	bl	80121b4 <run_xrce_session>
 8018b92:	2800      	cmp	r0, #0
 8018b94:	4620      	mov	r0, r4
 8018b96:	bf14      	ite	ne
 8018b98:	2400      	movne	r4, #0
 8018b9a:	2402      	moveq	r4, #2
 8018b9c:	f7f9 fa08 	bl	8011fb0 <rmw_uxrce_fini_topic_memory>
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	bd38      	pop	{r3, r4, r5, pc}
 8018ba4:	2401      	movs	r4, #1
 8018ba6:	4620      	mov	r0, r4
 8018ba8:	bd38      	pop	{r3, r4, r5, pc}
 8018baa:	bf00      	nop

08018bac <create_node>:
 8018bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bb0:	b083      	sub	sp, #12
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d05f      	beq.n	8018c76 <create_node+0xca>
 8018bb6:	4606      	mov	r6, r0
 8018bb8:	4835      	ldr	r0, [pc, #212]	@ (8018c90 <create_node+0xe4>)
 8018bba:	460f      	mov	r7, r1
 8018bbc:	4690      	mov	r8, r2
 8018bbe:	461d      	mov	r5, r3
 8018bc0:	f7ff fc8a 	bl	80184d8 <get_memory>
 8018bc4:	2800      	cmp	r0, #0
 8018bc6:	d056      	beq.n	8018c76 <create_node+0xca>
 8018bc8:	6884      	ldr	r4, [r0, #8]
 8018bca:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8018bcc:	6123      	str	r3, [r4, #16]
 8018bce:	f7ff fceb 	bl	80185a8 <rmw_get_implementation_identifier>
 8018bd2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8018bd6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8018bda:	f8c4 9020 	str.w	r9, [r4, #32]
 8018bde:	4630      	mov	r0, r6
 8018be0:	f7e7 fb00 	bl	80001e4 <strlen>
 8018be4:	1c42      	adds	r2, r0, #1
 8018be6:	2a3c      	cmp	r2, #60	@ 0x3c
 8018be8:	f104 0518 	add.w	r5, r4, #24
 8018bec:	d840      	bhi.n	8018c70 <create_node+0xc4>
 8018bee:	4648      	mov	r0, r9
 8018bf0:	4631      	mov	r1, r6
 8018bf2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8018bf6:	f003 fc86 	bl	801c506 <memcpy>
 8018bfa:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8018bfe:	4638      	mov	r0, r7
 8018c00:	f7e7 faf0 	bl	80001e4 <strlen>
 8018c04:	1c42      	adds	r2, r0, #1
 8018c06:	2a3c      	cmp	r2, #60	@ 0x3c
 8018c08:	d832      	bhi.n	8018c70 <create_node+0xc4>
 8018c0a:	4639      	mov	r1, r7
 8018c0c:	4648      	mov	r0, r9
 8018c0e:	f003 fc7a 	bl	801c506 <memcpy>
 8018c12:	6923      	ldr	r3, [r4, #16]
 8018c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018c18:	2101      	movs	r1, #1
 8018c1a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8018c1e:	1842      	adds	r2, r0, r1
 8018c20:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8018c24:	f7f9 fe76 	bl	8012914 <uxr_object_id>
 8018c28:	6160      	str	r0, [r4, #20]
 8018c2a:	783b      	ldrb	r3, [r7, #0]
 8018c2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8018c2e:	d127      	bne.n	8018c80 <create_node+0xd4>
 8018c30:	787b      	ldrb	r3, [r7, #1]
 8018c32:	bb2b      	cbnz	r3, 8018c80 <create_node+0xd4>
 8018c34:	4a17      	ldr	r2, [pc, #92]	@ (8018c94 <create_node+0xe8>)
 8018c36:	4818      	ldr	r0, [pc, #96]	@ (8018c98 <create_node+0xec>)
 8018c38:	4633      	mov	r3, r6
 8018c3a:	213c      	movs	r1, #60	@ 0x3c
 8018c3c:	f003 faba 	bl	801c1b4 <sniprintf>
 8018c40:	6920      	ldr	r0, [r4, #16]
 8018c42:	4915      	ldr	r1, [pc, #84]	@ (8018c98 <create_node+0xec>)
 8018c44:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018c48:	9100      	str	r1, [sp, #0]
 8018c4a:	2106      	movs	r1, #6
 8018c4c:	9101      	str	r1, [sp, #4]
 8018c4e:	6811      	ldr	r1, [r2, #0]
 8018c50:	6962      	ldr	r2, [r4, #20]
 8018c52:	fa1f f388 	uxth.w	r3, r8
 8018c56:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018c5a:	f7f9 fca5 	bl	80125a8 <uxr_buffer_create_participant_bin>
 8018c5e:	4602      	mov	r2, r0
 8018c60:	6920      	ldr	r0, [r4, #16]
 8018c62:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018c66:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018c6a:	f7f9 faa3 	bl	80121b4 <run_xrce_session>
 8018c6e:	b918      	cbnz	r0, 8018c78 <create_node+0xcc>
 8018c70:	4628      	mov	r0, r5
 8018c72:	f7f9 f92d 	bl	8011ed0 <rmw_uxrce_fini_node_memory>
 8018c76:	2500      	movs	r5, #0
 8018c78:	4628      	mov	r0, r5
 8018c7a:	b003      	add	sp, #12
 8018c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c80:	4a06      	ldr	r2, [pc, #24]	@ (8018c9c <create_node+0xf0>)
 8018c82:	9600      	str	r6, [sp, #0]
 8018c84:	463b      	mov	r3, r7
 8018c86:	213c      	movs	r1, #60	@ 0x3c
 8018c88:	4803      	ldr	r0, [pc, #12]	@ (8018c98 <create_node+0xec>)
 8018c8a:	f003 fa93 	bl	801c1b4 <sniprintf>
 8018c8e:	e7d7      	b.n	8018c40 <create_node+0x94>
 8018c90:	2000e514 	.word	0x2000e514
 8018c94:	0801d564 	.word	0x0801d564
 8018c98:	2000e6c4 	.word	0x2000e6c4
 8018c9c:	0801d754 	.word	0x0801d754

08018ca0 <rmw_create_node>:
 8018ca0:	b199      	cbz	r1, 8018cca <rmw_create_node+0x2a>
 8018ca2:	780b      	ldrb	r3, [r1, #0]
 8018ca4:	468c      	mov	ip, r1
 8018ca6:	b183      	cbz	r3, 8018cca <rmw_create_node+0x2a>
 8018ca8:	b410      	push	{r4}
 8018caa:	4614      	mov	r4, r2
 8018cac:	b14a      	cbz	r2, 8018cc2 <rmw_create_node+0x22>
 8018cae:	7813      	ldrb	r3, [r2, #0]
 8018cb0:	b13b      	cbz	r3, 8018cc2 <rmw_create_node+0x22>
 8018cb2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	4621      	mov	r1, r4
 8018cb8:	4660      	mov	r0, ip
 8018cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cbe:	f7ff bf75 	b.w	8018bac <create_node>
 8018cc2:	2000      	movs	r0, #0
 8018cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cc8:	4770      	bx	lr
 8018cca:	2000      	movs	r0, #0
 8018ccc:	4770      	bx	lr
 8018cce:	bf00      	nop

08018cd0 <rmw_destroy_node>:
 8018cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cd2:	b328      	cbz	r0, 8018d20 <rmw_destroy_node+0x50>
 8018cd4:	4607      	mov	r7, r0
 8018cd6:	6800      	ldr	r0, [r0, #0]
 8018cd8:	b120      	cbz	r0, 8018ce4 <rmw_destroy_node+0x14>
 8018cda:	4b36      	ldr	r3, [pc, #216]	@ (8018db4 <rmw_destroy_node+0xe4>)
 8018cdc:	6819      	ldr	r1, [r3, #0]
 8018cde:	f7e7 fa77 	bl	80001d0 <strcmp>
 8018ce2:	b9e8      	cbnz	r0, 8018d20 <rmw_destroy_node+0x50>
 8018ce4:	687d      	ldr	r5, [r7, #4]
 8018ce6:	b1dd      	cbz	r5, 8018d20 <rmw_destroy_node+0x50>
 8018ce8:	4b33      	ldr	r3, [pc, #204]	@ (8018db8 <rmw_destroy_node+0xe8>)
 8018cea:	681c      	ldr	r4, [r3, #0]
 8018cec:	2c00      	cmp	r4, #0
 8018cee:	d05f      	beq.n	8018db0 <rmw_destroy_node+0xe0>
 8018cf0:	2600      	movs	r6, #0
 8018cf2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018cf6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8018cfa:	429d      	cmp	r5, r3
 8018cfc:	d013      	beq.n	8018d26 <rmw_destroy_node+0x56>
 8018cfe:	2c00      	cmp	r4, #0
 8018d00:	d1f7      	bne.n	8018cf2 <rmw_destroy_node+0x22>
 8018d02:	4b2e      	ldr	r3, [pc, #184]	@ (8018dbc <rmw_destroy_node+0xec>)
 8018d04:	681c      	ldr	r4, [r3, #0]
 8018d06:	b1c4      	cbz	r4, 8018d3a <rmw_destroy_node+0x6a>
 8018d08:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018d0c:	6a0b      	ldr	r3, [r1, #32]
 8018d0e:	429d      	cmp	r5, r3
 8018d10:	d1f9      	bne.n	8018d06 <rmw_destroy_node+0x36>
 8018d12:	317c      	adds	r1, #124	@ 0x7c
 8018d14:	4638      	mov	r0, r7
 8018d16:	f000 fae5 	bl	80192e4 <rmw_destroy_subscription>
 8018d1a:	2801      	cmp	r0, #1
 8018d1c:	4606      	mov	r6, r0
 8018d1e:	d1f2      	bne.n	8018d06 <rmw_destroy_node+0x36>
 8018d20:	2601      	movs	r6, #1
 8018d22:	4630      	mov	r0, r6
 8018d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d26:	3184      	adds	r1, #132	@ 0x84
 8018d28:	4638      	mov	r0, r7
 8018d2a:	f7f8 ff19 	bl	8011b60 <rmw_destroy_publisher>
 8018d2e:	2801      	cmp	r0, #1
 8018d30:	4606      	mov	r6, r0
 8018d32:	d0f5      	beq.n	8018d20 <rmw_destroy_node+0x50>
 8018d34:	2c00      	cmp	r4, #0
 8018d36:	d1dc      	bne.n	8018cf2 <rmw_destroy_node+0x22>
 8018d38:	e7e3      	b.n	8018d02 <rmw_destroy_node+0x32>
 8018d3a:	4b21      	ldr	r3, [pc, #132]	@ (8018dc0 <rmw_destroy_node+0xf0>)
 8018d3c:	681c      	ldr	r4, [r3, #0]
 8018d3e:	b16c      	cbz	r4, 8018d5c <rmw_destroy_node+0x8c>
 8018d40:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018d44:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018d46:	429d      	cmp	r5, r3
 8018d48:	d1f9      	bne.n	8018d3e <rmw_destroy_node+0x6e>
 8018d4a:	317c      	adds	r1, #124	@ 0x7c
 8018d4c:	4638      	mov	r0, r7
 8018d4e:	f000 f993 	bl	8019078 <rmw_destroy_service>
 8018d52:	2801      	cmp	r0, #1
 8018d54:	4606      	mov	r6, r0
 8018d56:	d0e3      	beq.n	8018d20 <rmw_destroy_node+0x50>
 8018d58:	2c00      	cmp	r4, #0
 8018d5a:	d1f1      	bne.n	8018d40 <rmw_destroy_node+0x70>
 8018d5c:	4b19      	ldr	r3, [pc, #100]	@ (8018dc4 <rmw_destroy_node+0xf4>)
 8018d5e:	681c      	ldr	r4, [r3, #0]
 8018d60:	b16c      	cbz	r4, 8018d7e <rmw_destroy_node+0xae>
 8018d62:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018d66:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018d68:	429d      	cmp	r5, r3
 8018d6a:	d1f9      	bne.n	8018d60 <rmw_destroy_node+0x90>
 8018d6c:	317c      	adds	r1, #124	@ 0x7c
 8018d6e:	4638      	mov	r0, r7
 8018d70:	f7ff fbd6 	bl	8018520 <rmw_destroy_client>
 8018d74:	2801      	cmp	r0, #1
 8018d76:	4606      	mov	r6, r0
 8018d78:	d0d2      	beq.n	8018d20 <rmw_destroy_node+0x50>
 8018d7a:	2c00      	cmp	r4, #0
 8018d7c:	d1f1      	bne.n	8018d62 <rmw_destroy_node+0x92>
 8018d7e:	6928      	ldr	r0, [r5, #16]
 8018d80:	696a      	ldr	r2, [r5, #20]
 8018d82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018d86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018d8a:	6819      	ldr	r1, [r3, #0]
 8018d8c:	f7f9 fbc0 	bl	8012510 <uxr_buffer_delete_entity>
 8018d90:	4602      	mov	r2, r0
 8018d92:	6928      	ldr	r0, [r5, #16]
 8018d94:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018d98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018d9c:	f7f9 fa0a 	bl	80121b4 <run_xrce_session>
 8018da0:	2800      	cmp	r0, #0
 8018da2:	bf08      	it	eq
 8018da4:	2602      	moveq	r6, #2
 8018da6:	4638      	mov	r0, r7
 8018da8:	f7f9 f892 	bl	8011ed0 <rmw_uxrce_fini_node_memory>
 8018dac:	4630      	mov	r0, r6
 8018dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018db0:	4626      	mov	r6, r4
 8018db2:	e7a6      	b.n	8018d02 <rmw_destroy_node+0x32>
 8018db4:	0801deb8 	.word	0x0801deb8
 8018db8:	2000e524 	.word	0x2000e524
 8018dbc:	2000e564 	.word	0x2000e564
 8018dc0:	2000e534 	.word	0x2000e534
 8018dc4:	20009c48 	.word	0x20009c48

08018dc8 <rmw_node_get_graph_guard_condition>:
 8018dc8:	6843      	ldr	r3, [r0, #4]
 8018dca:	6918      	ldr	r0, [r3, #16]
 8018dcc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8018dd0:	4770      	bx	lr
 8018dd2:	bf00      	nop

08018dd4 <rmw_send_request>:
 8018dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018dd8:	4604      	mov	r4, r0
 8018dda:	6800      	ldr	r0, [r0, #0]
 8018ddc:	b08b      	sub	sp, #44	@ 0x2c
 8018dde:	460e      	mov	r6, r1
 8018de0:	4615      	mov	r5, r2
 8018de2:	b128      	cbz	r0, 8018df0 <rmw_send_request+0x1c>
 8018de4:	4b21      	ldr	r3, [pc, #132]	@ (8018e6c <rmw_send_request+0x98>)
 8018de6:	6819      	ldr	r1, [r3, #0]
 8018de8:	f7e7 f9f2 	bl	80001d0 <strcmp>
 8018dec:	2800      	cmp	r0, #0
 8018dee:	d139      	bne.n	8018e64 <rmw_send_request+0x90>
 8018df0:	6864      	ldr	r4, [r4, #4]
 8018df2:	6963      	ldr	r3, [r4, #20]
 8018df4:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8018df8:	689b      	ldr	r3, [r3, #8]
 8018dfa:	4798      	blx	r3
 8018dfc:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8018e00:	4630      	mov	r0, r6
 8018e02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e06:	4798      	blx	r3
 8018e08:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018e0c:	9000      	str	r0, [sp, #0]
 8018e0e:	6922      	ldr	r2, [r4, #16]
 8018e10:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8018e12:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8018e16:	ab02      	add	r3, sp, #8
 8018e18:	f7fb f876 	bl	8013f08 <uxr_prepare_output_stream>
 8018e1c:	2700      	movs	r7, #0
 8018e1e:	6028      	str	r0, [r5, #0]
 8018e20:	606f      	str	r7, [r5, #4]
 8018e22:	b198      	cbz	r0, 8018e4c <rmw_send_request+0x78>
 8018e24:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018e28:	a902      	add	r1, sp, #8
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	4798      	blx	r3
 8018e2e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8018e32:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018e36:	2b01      	cmp	r3, #1
 8018e38:	d00c      	beq.n	8018e54 <rmw_send_request+0x80>
 8018e3a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018e3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e40:	f7fa fa76 	bl	8013330 <uxr_run_session_until_confirm_delivery>
 8018e44:	4638      	mov	r0, r7
 8018e46:	b00b      	add	sp, #44	@ 0x2c
 8018e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e4c:	2001      	movs	r0, #1
 8018e4e:	b00b      	add	sp, #44	@ 0x2c
 8018e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e58:	f7f9 feaa 	bl	8012bb0 <uxr_flash_output_streams>
 8018e5c:	4638      	mov	r0, r7
 8018e5e:	b00b      	add	sp, #44	@ 0x2c
 8018e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e64:	200c      	movs	r0, #12
 8018e66:	b00b      	add	sp, #44	@ 0x2c
 8018e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e6c:	0801deb8 	.word	0x0801deb8

08018e70 <rmw_take_request>:
 8018e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e74:	4605      	mov	r5, r0
 8018e76:	6800      	ldr	r0, [r0, #0]
 8018e78:	b089      	sub	sp, #36	@ 0x24
 8018e7a:	460c      	mov	r4, r1
 8018e7c:	4690      	mov	r8, r2
 8018e7e:	461e      	mov	r6, r3
 8018e80:	b128      	cbz	r0, 8018e8e <rmw_take_request+0x1e>
 8018e82:	4b28      	ldr	r3, [pc, #160]	@ (8018f24 <rmw_take_request+0xb4>)
 8018e84:	6819      	ldr	r1, [r3, #0]
 8018e86:	f7e7 f9a3 	bl	80001d0 <strcmp>
 8018e8a:	2800      	cmp	r0, #0
 8018e8c:	d146      	bne.n	8018f1c <rmw_take_request+0xac>
 8018e8e:	b10e      	cbz	r6, 8018e94 <rmw_take_request+0x24>
 8018e90:	2300      	movs	r3, #0
 8018e92:	7033      	strb	r3, [r6, #0]
 8018e94:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018e98:	f7f9 f90e 	bl	80120b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018e9c:	4648      	mov	r0, r9
 8018e9e:	f7f9 f8e3 	bl	8012068 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018ea2:	4607      	mov	r7, r0
 8018ea4:	b3b0      	cbz	r0, 8018f14 <rmw_take_request+0xa4>
 8018ea6:	6885      	ldr	r5, [r0, #8]
 8018ea8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8018eac:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8018eb0:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8018eb4:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8018eb8:	7423      	strb	r3, [r4, #16]
 8018eba:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8018ebe:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8018ec2:	74e2      	strb	r2, [r4, #19]
 8018ec4:	f8a4 3011 	strh.w	r3, [r4, #17]
 8018ec8:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8018ecc:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8018ed0:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8018ed4:	61e1      	str	r1, [r4, #28]
 8018ed6:	6162      	str	r2, [r4, #20]
 8018ed8:	61a3      	str	r3, [r4, #24]
 8018eda:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018ede:	689b      	ldr	r3, [r3, #8]
 8018ee0:	4798      	blx	r3
 8018ee2:	6844      	ldr	r4, [r0, #4]
 8018ee4:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8018ee8:	f105 0110 	add.w	r1, r5, #16
 8018eec:	4668      	mov	r0, sp
 8018eee:	f7f7 fb79 	bl	80105e4 <ucdr_init_buffer>
 8018ef2:	68e3      	ldr	r3, [r4, #12]
 8018ef4:	4641      	mov	r1, r8
 8018ef6:	4668      	mov	r0, sp
 8018ef8:	4798      	blx	r3
 8018efa:	4639      	mov	r1, r7
 8018efc:	4604      	mov	r4, r0
 8018efe:	480a      	ldr	r0, [pc, #40]	@ (8018f28 <rmw_take_request+0xb8>)
 8018f00:	f7ff fafa 	bl	80184f8 <put_memory>
 8018f04:	b106      	cbz	r6, 8018f08 <rmw_take_request+0x98>
 8018f06:	7034      	strb	r4, [r6, #0]
 8018f08:	f084 0001 	eor.w	r0, r4, #1
 8018f0c:	b2c0      	uxtb	r0, r0
 8018f0e:	b009      	add	sp, #36	@ 0x24
 8018f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f14:	2001      	movs	r0, #1
 8018f16:	b009      	add	sp, #36	@ 0x24
 8018f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f1c:	200c      	movs	r0, #12
 8018f1e:	b009      	add	sp, #36	@ 0x24
 8018f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f24:	0801deb8 	.word	0x0801deb8
 8018f28:	2000e554 	.word	0x2000e554

08018f2c <rmw_send_response>:
 8018f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f2e:	4605      	mov	r5, r0
 8018f30:	6800      	ldr	r0, [r0, #0]
 8018f32:	b091      	sub	sp, #68	@ 0x44
 8018f34:	460c      	mov	r4, r1
 8018f36:	4616      	mov	r6, r2
 8018f38:	b128      	cbz	r0, 8018f46 <rmw_send_response+0x1a>
 8018f3a:	4b29      	ldr	r3, [pc, #164]	@ (8018fe0 <rmw_send_response+0xb4>)
 8018f3c:	6819      	ldr	r1, [r3, #0]
 8018f3e:	f7e7 f947 	bl	80001d0 <strcmp>
 8018f42:	2800      	cmp	r0, #0
 8018f44:	d141      	bne.n	8018fca <rmw_send_response+0x9e>
 8018f46:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8018f4a:	9306      	str	r3, [sp, #24]
 8018f4c:	4623      	mov	r3, r4
 8018f4e:	9207      	str	r2, [sp, #28]
 8018f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f54:	686d      	ldr	r5, [r5, #4]
 8018f56:	789b      	ldrb	r3, [r3, #2]
 8018f58:	68a1      	ldr	r1, [r4, #8]
 8018f5a:	f88d 2017 	strb.w	r2, [sp, #23]
 8018f5e:	f88d 3016 	strb.w	r3, [sp, #22]
 8018f62:	68e2      	ldr	r2, [r4, #12]
 8018f64:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018f68:	6860      	ldr	r0, [r4, #4]
 8018f6a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018f6e:	ab02      	add	r3, sp, #8
 8018f70:	c307      	stmia	r3!, {r0, r1, r2}
 8018f72:	696b      	ldr	r3, [r5, #20]
 8018f74:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8018f76:	68db      	ldr	r3, [r3, #12]
 8018f78:	4798      	blx	r3
 8018f7a:	6844      	ldr	r4, [r0, #4]
 8018f7c:	4630      	mov	r0, r6
 8018f7e:	6923      	ldr	r3, [r4, #16]
 8018f80:	4798      	blx	r3
 8018f82:	f100 0318 	add.w	r3, r0, #24
 8018f86:	6938      	ldr	r0, [r7, #16]
 8018f88:	9300      	str	r3, [sp, #0]
 8018f8a:	692a      	ldr	r2, [r5, #16]
 8018f8c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8018f8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018f92:	ab08      	add	r3, sp, #32
 8018f94:	f7fa ffb8 	bl	8013f08 <uxr_prepare_output_stream>
 8018f98:	b910      	cbnz	r0, 8018fa0 <rmw_send_response+0x74>
 8018f9a:	2001      	movs	r0, #1
 8018f9c:	b011      	add	sp, #68	@ 0x44
 8018f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fa0:	a902      	add	r1, sp, #8
 8018fa2:	a808      	add	r0, sp, #32
 8018fa4:	f7fc f8e8 	bl	8015178 <uxr_serialize_SampleIdentity>
 8018fa8:	68a3      	ldr	r3, [r4, #8]
 8018faa:	a908      	add	r1, sp, #32
 8018fac:	4630      	mov	r0, r6
 8018fae:	4798      	blx	r3
 8018fb0:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8018fb4:	6938      	ldr	r0, [r7, #16]
 8018fb6:	2b01      	cmp	r3, #1
 8018fb8:	d00a      	beq.n	8018fd0 <rmw_send_response+0xa4>
 8018fba:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8018fbc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018fc0:	f7fa f9b6 	bl	8013330 <uxr_run_session_until_confirm_delivery>
 8018fc4:	2000      	movs	r0, #0
 8018fc6:	b011      	add	sp, #68	@ 0x44
 8018fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fca:	200c      	movs	r0, #12
 8018fcc:	b011      	add	sp, #68	@ 0x44
 8018fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fd0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018fd4:	f7f9 fdec 	bl	8012bb0 <uxr_flash_output_streams>
 8018fd8:	2000      	movs	r0, #0
 8018fda:	b011      	add	sp, #68	@ 0x44
 8018fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fde:	bf00      	nop
 8018fe0:	0801deb8 	.word	0x0801deb8

08018fe4 <rmw_take_response>:
 8018fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fe8:	4604      	mov	r4, r0
 8018fea:	6800      	ldr	r0, [r0, #0]
 8018fec:	b088      	sub	sp, #32
 8018fee:	4688      	mov	r8, r1
 8018ff0:	4617      	mov	r7, r2
 8018ff2:	461d      	mov	r5, r3
 8018ff4:	b120      	cbz	r0, 8019000 <rmw_take_response+0x1c>
 8018ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8019070 <rmw_take_response+0x8c>)
 8018ff8:	6819      	ldr	r1, [r3, #0]
 8018ffa:	f7e7 f8e9 	bl	80001d0 <strcmp>
 8018ffe:	bb78      	cbnz	r0, 8019060 <rmw_take_response+0x7c>
 8019000:	b10d      	cbz	r5, 8019006 <rmw_take_response+0x22>
 8019002:	2300      	movs	r3, #0
 8019004:	702b      	strb	r3, [r5, #0]
 8019006:	6864      	ldr	r4, [r4, #4]
 8019008:	f7f9 f856 	bl	80120b8 <rmw_uxrce_clean_expired_static_input_buffer>
 801900c:	4620      	mov	r0, r4
 801900e:	f7f9 f82b 	bl	8012068 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019012:	4606      	mov	r6, r0
 8019014:	b340      	cbz	r0, 8019068 <rmw_take_response+0x84>
 8019016:	6963      	ldr	r3, [r4, #20]
 8019018:	6884      	ldr	r4, [r0, #8]
 801901a:	68db      	ldr	r3, [r3, #12]
 801901c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019020:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8019024:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8019028:	4798      	blx	r3
 801902a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801902e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019032:	f104 0110 	add.w	r1, r4, #16
 8019036:	4668      	mov	r0, sp
 8019038:	f7f7 fad4 	bl	80105e4 <ucdr_init_buffer>
 801903c:	4639      	mov	r1, r7
 801903e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019042:	4668      	mov	r0, sp
 8019044:	4798      	blx	r3
 8019046:	4631      	mov	r1, r6
 8019048:	4604      	mov	r4, r0
 801904a:	480a      	ldr	r0, [pc, #40]	@ (8019074 <rmw_take_response+0x90>)
 801904c:	f7ff fa54 	bl	80184f8 <put_memory>
 8019050:	b105      	cbz	r5, 8019054 <rmw_take_response+0x70>
 8019052:	702c      	strb	r4, [r5, #0]
 8019054:	f084 0001 	eor.w	r0, r4, #1
 8019058:	b2c0      	uxtb	r0, r0
 801905a:	b008      	add	sp, #32
 801905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019060:	200c      	movs	r0, #12
 8019062:	b008      	add	sp, #32
 8019064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019068:	2001      	movs	r0, #1
 801906a:	b008      	add	sp, #32
 801906c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019070:	0801deb8 	.word	0x0801deb8
 8019074:	2000e554 	.word	0x2000e554

08019078 <rmw_destroy_service>:
 8019078:	b570      	push	{r4, r5, r6, lr}
 801907a:	b128      	cbz	r0, 8019088 <rmw_destroy_service+0x10>
 801907c:	4604      	mov	r4, r0
 801907e:	6800      	ldr	r0, [r0, #0]
 8019080:	460d      	mov	r5, r1
 8019082:	f7f9 f917 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 8019086:	b910      	cbnz	r0, 801908e <rmw_destroy_service+0x16>
 8019088:	2401      	movs	r4, #1
 801908a:	4620      	mov	r0, r4
 801908c:	bd70      	pop	{r4, r5, r6, pc}
 801908e:	6863      	ldr	r3, [r4, #4]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d0f9      	beq.n	8019088 <rmw_destroy_service+0x10>
 8019094:	2d00      	cmp	r5, #0
 8019096:	d0f7      	beq.n	8019088 <rmw_destroy_service+0x10>
 8019098:	6828      	ldr	r0, [r5, #0]
 801909a:	f7f9 f90b 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 801909e:	2800      	cmp	r0, #0
 80190a0:	d0f2      	beq.n	8019088 <rmw_destroy_service+0x10>
 80190a2:	686e      	ldr	r6, [r5, #4]
 80190a4:	2e00      	cmp	r6, #0
 80190a6:	d0ef      	beq.n	8019088 <rmw_destroy_service+0x10>
 80190a8:	6864      	ldr	r4, [r4, #4]
 80190aa:	6932      	ldr	r2, [r6, #16]
 80190ac:	6920      	ldr	r0, [r4, #16]
 80190ae:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80190b2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80190b6:	6819      	ldr	r1, [r3, #0]
 80190b8:	f001 fb70 	bl	801a79c <uxr_buffer_cancel_data>
 80190bc:	4602      	mov	r2, r0
 80190be:	6920      	ldr	r0, [r4, #16]
 80190c0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80190c4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80190c8:	f7f9 f874 	bl	80121b4 <run_xrce_session>
 80190cc:	6920      	ldr	r0, [r4, #16]
 80190ce:	6932      	ldr	r2, [r6, #16]
 80190d0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80190d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80190d8:	6819      	ldr	r1, [r3, #0]
 80190da:	f7f9 fa19 	bl	8012510 <uxr_buffer_delete_entity>
 80190de:	4602      	mov	r2, r0
 80190e0:	6920      	ldr	r0, [r4, #16]
 80190e2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80190e6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80190ea:	f7f9 f863 	bl	80121b4 <run_xrce_session>
 80190ee:	2800      	cmp	r0, #0
 80190f0:	4628      	mov	r0, r5
 80190f2:	bf14      	ite	ne
 80190f4:	2400      	movne	r4, #0
 80190f6:	2402      	moveq	r4, #2
 80190f8:	f7f8 ff2e 	bl	8011f58 <rmw_uxrce_fini_service_memory>
 80190fc:	e7c5      	b.n	801908a <rmw_destroy_service+0x12>
 80190fe:	bf00      	nop

08019100 <rmw_create_subscription>:
 8019100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019104:	b08d      	sub	sp, #52	@ 0x34
 8019106:	2800      	cmp	r0, #0
 8019108:	f000 80d1 	beq.w	80192ae <rmw_create_subscription+0x1ae>
 801910c:	460e      	mov	r6, r1
 801910e:	2900      	cmp	r1, #0
 8019110:	f000 80cd 	beq.w	80192ae <rmw_create_subscription+0x1ae>
 8019114:	4604      	mov	r4, r0
 8019116:	6800      	ldr	r0, [r0, #0]
 8019118:	4615      	mov	r5, r2
 801911a:	4698      	mov	r8, r3
 801911c:	f7f9 f8ca 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 8019120:	2800      	cmp	r0, #0
 8019122:	f000 80c4 	beq.w	80192ae <rmw_create_subscription+0x1ae>
 8019126:	2d00      	cmp	r5, #0
 8019128:	f000 80c1 	beq.w	80192ae <rmw_create_subscription+0x1ae>
 801912c:	782b      	ldrb	r3, [r5, #0]
 801912e:	2b00      	cmp	r3, #0
 8019130:	f000 80bd 	beq.w	80192ae <rmw_create_subscription+0x1ae>
 8019134:	f1b8 0f00 	cmp.w	r8, #0
 8019138:	f000 80b9 	beq.w	80192ae <rmw_create_subscription+0x1ae>
 801913c:	485e      	ldr	r0, [pc, #376]	@ (80192b8 <rmw_create_subscription+0x1b8>)
 801913e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8019142:	f7ff f9c9 	bl	80184d8 <get_memory>
 8019146:	4604      	mov	r4, r0
 8019148:	2800      	cmp	r0, #0
 801914a:	f000 80b1 	beq.w	80192b0 <rmw_create_subscription+0x1b0>
 801914e:	6887      	ldr	r7, [r0, #8]
 8019150:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8019154:	f7ff fa28 	bl	80185a8 <rmw_get_implementation_identifier>
 8019158:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 801915c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801915e:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8019162:	4628      	mov	r0, r5
 8019164:	f7e7 f83e 	bl	80001e4 <strlen>
 8019168:	3001      	adds	r0, #1
 801916a:	283c      	cmp	r0, #60	@ 0x3c
 801916c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8019170:	f200 8096 	bhi.w	80192a0 <rmw_create_subscription+0x1a0>
 8019174:	4a51      	ldr	r2, [pc, #324]	@ (80192bc <rmw_create_subscription+0x1bc>)
 8019176:	462b      	mov	r3, r5
 8019178:	213c      	movs	r1, #60	@ 0x3c
 801917a:	4650      	mov	r0, sl
 801917c:	f003 f81a 	bl	801c1b4 <sniprintf>
 8019180:	4641      	mov	r1, r8
 8019182:	f8c7 9020 	str.w	r9, [r7, #32]
 8019186:	2250      	movs	r2, #80	@ 0x50
 8019188:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801918c:	f003 f9bb 	bl	801c506 <memcpy>
 8019190:	494b      	ldr	r1, [pc, #300]	@ (80192c0 <rmw_create_subscription+0x1c0>)
 8019192:	4630      	mov	r0, r6
 8019194:	f7f9 f89c 	bl	80122d0 <get_message_typesupport_handle>
 8019198:	2800      	cmp	r0, #0
 801919a:	f000 8081 	beq.w	80192a0 <rmw_create_subscription+0x1a0>
 801919e:	6842      	ldr	r2, [r0, #4]
 80191a0:	61ba      	str	r2, [r7, #24]
 80191a2:	2a00      	cmp	r2, #0
 80191a4:	d07c      	beq.n	80192a0 <rmw_create_subscription+0x1a0>
 80191a6:	4629      	mov	r1, r5
 80191a8:	4643      	mov	r3, r8
 80191aa:	4648      	mov	r0, r9
 80191ac:	f7ff fc8c 	bl	8018ac8 <create_topic>
 80191b0:	61f8      	str	r0, [r7, #28]
 80191b2:	2800      	cmp	r0, #0
 80191b4:	d078      	beq.n	80192a8 <rmw_create_subscription+0x1a8>
 80191b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80191ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191be:	2104      	movs	r1, #4
 80191c0:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80191c4:	1c42      	adds	r2, r0, #1
 80191c6:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80191ca:	f7f9 fba3 	bl	8012914 <uxr_object_id>
 80191ce:	6138      	str	r0, [r7, #16]
 80191d0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80191d4:	2506      	movs	r5, #6
 80191d6:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80191da:	9500      	str	r5, [sp, #0]
 80191dc:	6819      	ldr	r1, [r3, #0]
 80191de:	693a      	ldr	r2, [r7, #16]
 80191e0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80191e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80191e8:	f7f9 fa76 	bl	80126d8 <uxr_buffer_create_subscriber_bin>
 80191ec:	4602      	mov	r2, r0
 80191ee:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80191f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80191f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80191fa:	f7f8 ffdb 	bl	80121b4 <run_xrce_session>
 80191fe:	2800      	cmp	r0, #0
 8019200:	d04e      	beq.n	80192a0 <rmw_create_subscription+0x1a0>
 8019202:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801920a:	4629      	mov	r1, r5
 801920c:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8019210:	1c42      	adds	r2, r0, #1
 8019212:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8019216:	f7f9 fb7d 	bl	8012914 <uxr_object_id>
 801921a:	ae08      	add	r6, sp, #32
 801921c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019220:	69fb      	ldr	r3, [r7, #28]
 8019222:	6178      	str	r0, [r7, #20]
 8019224:	4641      	mov	r1, r8
 8019226:	4630      	mov	r0, r6
 8019228:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801922c:	9305      	str	r3, [sp, #20]
 801922e:	f7f8 ffdd 	bl	80121ec <convert_qos_profile>
 8019232:	9503      	str	r5, [sp, #12]
 8019234:	e896 0003 	ldmia.w	r6, {r0, r1}
 8019238:	9b05      	ldr	r3, [sp, #20]
 801923a:	9001      	str	r0, [sp, #4]
 801923c:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019240:	691b      	ldr	r3, [r3, #16]
 8019242:	9300      	str	r3, [sp, #0]
 8019244:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8019248:	f8db 1000 	ldr.w	r1, [fp]
 801924c:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8019250:	f7f9 fae8 	bl	8012824 <uxr_buffer_create_datareader_bin>
 8019254:	4602      	mov	r2, r0
 8019256:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801925a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801925e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8019262:	f7f8 ffa7 	bl	80121b4 <run_xrce_session>
 8019266:	b1d8      	cbz	r0, 80192a0 <rmw_create_subscription+0x1a0>
 8019268:	f898 3008 	ldrb.w	r3, [r8, #8]
 801926c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019270:	2b02      	cmp	r3, #2
 8019272:	bf0c      	ite	eq
 8019274:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8019278:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 801927c:	9307      	str	r3, [sp, #28]
 801927e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8019282:	2200      	movs	r2, #0
 8019284:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8019288:	ab0a      	add	r3, sp, #40	@ 0x28
 801928a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801928e:	9300      	str	r3, [sp, #0]
 8019290:	697a      	ldr	r2, [r7, #20]
 8019292:	9b07      	ldr	r3, [sp, #28]
 8019294:	6809      	ldr	r1, [r1, #0]
 8019296:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801929a:	f001 fa45 	bl	801a728 <uxr_buffer_request_data>
 801929e:	e007      	b.n	80192b0 <rmw_create_subscription+0x1b0>
 80192a0:	69f8      	ldr	r0, [r7, #28]
 80192a2:	b108      	cbz	r0, 80192a8 <rmw_create_subscription+0x1a8>
 80192a4:	f7f8 fe84 	bl	8011fb0 <rmw_uxrce_fini_topic_memory>
 80192a8:	4620      	mov	r0, r4
 80192aa:	f7f8 fe3f 	bl	8011f2c <rmw_uxrce_fini_subscription_memory>
 80192ae:	2400      	movs	r4, #0
 80192b0:	4620      	mov	r0, r4
 80192b2:	b00d      	add	sp, #52	@ 0x34
 80192b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192b8:	2000e564 	.word	0x2000e564
 80192bc:	0801d564 	.word	0x0801d564
 80192c0:	0801d4e0 	.word	0x0801d4e0

080192c4 <rmw_subscription_get_actual_qos>:
 80192c4:	b150      	cbz	r0, 80192dc <rmw_subscription_get_actual_qos+0x18>
 80192c6:	b508      	push	{r3, lr}
 80192c8:	460b      	mov	r3, r1
 80192ca:	b149      	cbz	r1, 80192e0 <rmw_subscription_get_actual_qos+0x1c>
 80192cc:	6841      	ldr	r1, [r0, #4]
 80192ce:	2250      	movs	r2, #80	@ 0x50
 80192d0:	3128      	adds	r1, #40	@ 0x28
 80192d2:	4618      	mov	r0, r3
 80192d4:	f003 f917 	bl	801c506 <memcpy>
 80192d8:	2000      	movs	r0, #0
 80192da:	bd08      	pop	{r3, pc}
 80192dc:	200b      	movs	r0, #11
 80192de:	4770      	bx	lr
 80192e0:	200b      	movs	r0, #11
 80192e2:	bd08      	pop	{r3, pc}

080192e4 <rmw_destroy_subscription>:
 80192e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192e6:	b128      	cbz	r0, 80192f4 <rmw_destroy_subscription+0x10>
 80192e8:	4604      	mov	r4, r0
 80192ea:	6800      	ldr	r0, [r0, #0]
 80192ec:	460d      	mov	r5, r1
 80192ee:	f7f8 ffe1 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 80192f2:	b910      	cbnz	r0, 80192fa <rmw_destroy_subscription+0x16>
 80192f4:	2401      	movs	r4, #1
 80192f6:	4620      	mov	r0, r4
 80192f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80192fa:	6863      	ldr	r3, [r4, #4]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d0f9      	beq.n	80192f4 <rmw_destroy_subscription+0x10>
 8019300:	2d00      	cmp	r5, #0
 8019302:	d0f7      	beq.n	80192f4 <rmw_destroy_subscription+0x10>
 8019304:	6828      	ldr	r0, [r5, #0]
 8019306:	f7f8 ffd5 	bl	80122b4 <is_uxrce_rmw_identifier_valid>
 801930a:	2800      	cmp	r0, #0
 801930c:	d0f2      	beq.n	80192f4 <rmw_destroy_subscription+0x10>
 801930e:	686c      	ldr	r4, [r5, #4]
 8019310:	2c00      	cmp	r4, #0
 8019312:	d0ef      	beq.n	80192f4 <rmw_destroy_subscription+0x10>
 8019314:	6a26      	ldr	r6, [r4, #32]
 8019316:	6962      	ldr	r2, [r4, #20]
 8019318:	6930      	ldr	r0, [r6, #16]
 801931a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801931e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019322:	6819      	ldr	r1, [r3, #0]
 8019324:	f001 fa3a 	bl	801a79c <uxr_buffer_cancel_data>
 8019328:	4602      	mov	r2, r0
 801932a:	6930      	ldr	r0, [r6, #16]
 801932c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019330:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019334:	f7f8 ff3e 	bl	80121b4 <run_xrce_session>
 8019338:	69e0      	ldr	r0, [r4, #28]
 801933a:	f7ff fc15 	bl	8018b68 <destroy_topic>
 801933e:	6a23      	ldr	r3, [r4, #32]
 8019340:	6962      	ldr	r2, [r4, #20]
 8019342:	6918      	ldr	r0, [r3, #16]
 8019344:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019348:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801934c:	6819      	ldr	r1, [r3, #0]
 801934e:	f7f9 f8df 	bl	8012510 <uxr_buffer_delete_entity>
 8019352:	6a23      	ldr	r3, [r4, #32]
 8019354:	6922      	ldr	r2, [r4, #16]
 8019356:	691b      	ldr	r3, [r3, #16]
 8019358:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 801935c:	4604      	mov	r4, r0
 801935e:	6809      	ldr	r1, [r1, #0]
 8019360:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019364:	f7f9 f8d4 	bl	8012510 <uxr_buffer_delete_entity>
 8019368:	6937      	ldr	r7, [r6, #16]
 801936a:	4622      	mov	r2, r4
 801936c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019370:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8019374:	4604      	mov	r4, r0
 8019376:	4638      	mov	r0, r7
 8019378:	f7f8 ff1c 	bl	80121b4 <run_xrce_session>
 801937c:	6936      	ldr	r6, [r6, #16]
 801937e:	4622      	mov	r2, r4
 8019380:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8019384:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8019388:	4604      	mov	r4, r0
 801938a:	4630      	mov	r0, r6
 801938c:	f7f8 ff12 	bl	80121b4 <run_xrce_session>
 8019390:	b12c      	cbz	r4, 801939e <rmw_destroy_subscription+0xba>
 8019392:	b120      	cbz	r0, 801939e <rmw_destroy_subscription+0xba>
 8019394:	2400      	movs	r4, #0
 8019396:	4628      	mov	r0, r5
 8019398:	f7f8 fdc8 	bl	8011f2c <rmw_uxrce_fini_subscription_memory>
 801939c:	e7ab      	b.n	80192f6 <rmw_destroy_subscription+0x12>
 801939e:	2402      	movs	r4, #2
 80193a0:	e7f9      	b.n	8019396 <rmw_destroy_subscription+0xb2>
 80193a2:	bf00      	nop

080193a4 <rmw_take_with_info>:
 80193a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193a6:	4604      	mov	r4, r0
 80193a8:	6800      	ldr	r0, [r0, #0]
 80193aa:	b089      	sub	sp, #36	@ 0x24
 80193ac:	460f      	mov	r7, r1
 80193ae:	4615      	mov	r5, r2
 80193b0:	b128      	cbz	r0, 80193be <rmw_take_with_info+0x1a>
 80193b2:	4b24      	ldr	r3, [pc, #144]	@ (8019444 <rmw_take_with_info+0xa0>)
 80193b4:	6819      	ldr	r1, [r3, #0]
 80193b6:	f7e6 ff0b 	bl	80001d0 <strcmp>
 80193ba:	2800      	cmp	r0, #0
 80193bc:	d13e      	bne.n	801943c <rmw_take_with_info+0x98>
 80193be:	b305      	cbz	r5, 8019402 <rmw_take_with_info+0x5e>
 80193c0:	6864      	ldr	r4, [r4, #4]
 80193c2:	2300      	movs	r3, #0
 80193c4:	702b      	strb	r3, [r5, #0]
 80193c6:	f7f8 fe77 	bl	80120b8 <rmw_uxrce_clean_expired_static_input_buffer>
 80193ca:	4620      	mov	r0, r4
 80193cc:	f7f8 fe4c 	bl	8012068 <rmw_uxrce_find_static_input_buffer_by_owner>
 80193d0:	4606      	mov	r6, r0
 80193d2:	b1f0      	cbz	r0, 8019412 <rmw_take_with_info+0x6e>
 80193d4:	6881      	ldr	r1, [r0, #8]
 80193d6:	4668      	mov	r0, sp
 80193d8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80193dc:	3110      	adds	r1, #16
 80193de:	f7f7 f901 	bl	80105e4 <ucdr_init_buffer>
 80193e2:	69a3      	ldr	r3, [r4, #24]
 80193e4:	4639      	mov	r1, r7
 80193e6:	68db      	ldr	r3, [r3, #12]
 80193e8:	4668      	mov	r0, sp
 80193ea:	4798      	blx	r3
 80193ec:	4631      	mov	r1, r6
 80193ee:	4604      	mov	r4, r0
 80193f0:	4815      	ldr	r0, [pc, #84]	@ (8019448 <rmw_take_with_info+0xa4>)
 80193f2:	f7ff f881 	bl	80184f8 <put_memory>
 80193f6:	702c      	strb	r4, [r5, #0]
 80193f8:	f084 0001 	eor.w	r0, r4, #1
 80193fc:	b2c0      	uxtb	r0, r0
 80193fe:	b009      	add	sp, #36	@ 0x24
 8019400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019402:	6864      	ldr	r4, [r4, #4]
 8019404:	f7f8 fe58 	bl	80120b8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019408:	4620      	mov	r0, r4
 801940a:	f7f8 fe2d 	bl	8012068 <rmw_uxrce_find_static_input_buffer_by_owner>
 801940e:	4605      	mov	r5, r0
 8019410:	b910      	cbnz	r0, 8019418 <rmw_take_with_info+0x74>
 8019412:	2001      	movs	r0, #1
 8019414:	b009      	add	sp, #36	@ 0x24
 8019416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019418:	68a9      	ldr	r1, [r5, #8]
 801941a:	4668      	mov	r0, sp
 801941c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019420:	3110      	adds	r1, #16
 8019422:	f7f7 f8df 	bl	80105e4 <ucdr_init_buffer>
 8019426:	69a3      	ldr	r3, [r4, #24]
 8019428:	4639      	mov	r1, r7
 801942a:	68db      	ldr	r3, [r3, #12]
 801942c:	4668      	mov	r0, sp
 801942e:	4798      	blx	r3
 8019430:	4629      	mov	r1, r5
 8019432:	4604      	mov	r4, r0
 8019434:	4804      	ldr	r0, [pc, #16]	@ (8019448 <rmw_take_with_info+0xa4>)
 8019436:	f7ff f85f 	bl	80184f8 <put_memory>
 801943a:	e7dd      	b.n	80193f8 <rmw_take_with_info+0x54>
 801943c:	200c      	movs	r0, #12
 801943e:	b009      	add	sp, #36	@ 0x24
 8019440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019442:	bf00      	nop
 8019444:	0801deb8 	.word	0x0801deb8
 8019448:	2000e554 	.word	0x2000e554

0801944c <rmw_uxrce_transport_init>:
 801944c:	b508      	push	{r3, lr}
 801944e:	b108      	cbz	r0, 8019454 <rmw_uxrce_transport_init+0x8>
 8019450:	f100 0210 	add.w	r2, r0, #16
 8019454:	b139      	cbz	r1, 8019466 <rmw_uxrce_transport_init+0x1a>
 8019456:	6949      	ldr	r1, [r1, #20]
 8019458:	4610      	mov	r0, r2
 801945a:	f000 fbe5 	bl	8019c28 <uxr_init_custom_transport>
 801945e:	f080 0001 	eor.w	r0, r0, #1
 8019462:	b2c0      	uxtb	r0, r0
 8019464:	bd08      	pop	{r3, pc}
 8019466:	4b04      	ldr	r3, [pc, #16]	@ (8019478 <rmw_uxrce_transport_init+0x2c>)
 8019468:	4610      	mov	r0, r2
 801946a:	6859      	ldr	r1, [r3, #4]
 801946c:	f000 fbdc 	bl	8019c28 <uxr_init_custom_transport>
 8019470:	f080 0001 	eor.w	r0, r0, #1
 8019474:	b2c0      	uxtb	r0, r0
 8019476:	bd08      	pop	{r3, pc}
 8019478:	20009c2c 	.word	0x20009c2c

0801947c <rmw_wait>:
 801947c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019480:	b089      	sub	sp, #36	@ 0x24
 8019482:	4605      	mov	r5, r0
 8019484:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019486:	460e      	mov	r6, r1
 8019488:	4698      	mov	r8, r3
 801948a:	4691      	mov	r9, r2
 801948c:	2a00      	cmp	r2, #0
 801948e:	f000 810a 	beq.w	80196a6 <rmw_wait+0x22a>
 8019492:	b16c      	cbz	r4, 80194b0 <rmw_wait+0x34>
 8019494:	4bae      	ldr	r3, [pc, #696]	@ (8019750 <rmw_wait+0x2d4>)
 8019496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019498:	af04      	add	r7, sp, #16
 801949a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801949e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80194a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80194a6:	f7fe fe4b 	bl	8018140 <rmw_time_equal>
 80194aa:	2800      	cmp	r0, #0
 80194ac:	f000 8127 	beq.w	80196fe <rmw_wait+0x282>
 80194b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80194b4:	f7f8 fe00 	bl	80120b8 <rmw_uxrce_clean_expired_static_input_buffer>
 80194b8:	4ba6      	ldr	r3, [pc, #664]	@ (8019754 <rmw_wait+0x2d8>)
 80194ba:	681c      	ldr	r4, [r3, #0]
 80194bc:	b14c      	cbz	r4, 80194d2 <rmw_wait+0x56>
 80194be:	4623      	mov	r3, r4
 80194c0:	2100      	movs	r1, #0
 80194c2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80194c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80194ca:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d1f7      	bne.n	80194c2 <rmw_wait+0x46>
 80194d2:	f1b9 0f00 	cmp.w	r9, #0
 80194d6:	d011      	beq.n	80194fc <rmw_wait+0x80>
 80194d8:	f8d9 1000 	ldr.w	r1, [r9]
 80194dc:	b171      	cbz	r1, 80194fc <rmw_wait+0x80>
 80194de:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80194e2:	2300      	movs	r3, #0
 80194e4:	2001      	movs	r0, #1
 80194e6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80194ea:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80194ec:	6912      	ldr	r2, [r2, #16]
 80194ee:	3301      	adds	r3, #1
 80194f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80194f4:	4299      	cmp	r1, r3
 80194f6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80194fa:	d1f4      	bne.n	80194e6 <rmw_wait+0x6a>
 80194fc:	f1b8 0f00 	cmp.w	r8, #0
 8019500:	d011      	beq.n	8019526 <rmw_wait+0xaa>
 8019502:	f8d8 1000 	ldr.w	r1, [r8]
 8019506:	b171      	cbz	r1, 8019526 <rmw_wait+0xaa>
 8019508:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801950c:	2300      	movs	r3, #0
 801950e:	2001      	movs	r0, #1
 8019510:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019514:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019516:	6912      	ldr	r2, [r2, #16]
 8019518:	3301      	adds	r3, #1
 801951a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801951e:	4299      	cmp	r1, r3
 8019520:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019524:	d1f4      	bne.n	8019510 <rmw_wait+0x94>
 8019526:	b185      	cbz	r5, 801954a <rmw_wait+0xce>
 8019528:	6829      	ldr	r1, [r5, #0]
 801952a:	b171      	cbz	r1, 801954a <rmw_wait+0xce>
 801952c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019530:	2300      	movs	r3, #0
 8019532:	2001      	movs	r0, #1
 8019534:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019538:	6a12      	ldr	r2, [r2, #32]
 801953a:	6912      	ldr	r2, [r2, #16]
 801953c:	3301      	adds	r3, #1
 801953e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019542:	4299      	cmp	r1, r3
 8019544:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019548:	d1f4      	bne.n	8019534 <rmw_wait+0xb8>
 801954a:	b34c      	cbz	r4, 80195a0 <rmw_wait+0x124>
 801954c:	4622      	mov	r2, r4
 801954e:	2300      	movs	r3, #0
 8019550:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019554:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019558:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801955c:	440b      	add	r3, r1
 801955e:	b2db      	uxtb	r3, r3
 8019560:	2a00      	cmp	r2, #0
 8019562:	d1f5      	bne.n	8019550 <rmw_wait+0xd4>
 8019564:	2b00      	cmp	r3, #0
 8019566:	f000 8084 	beq.w	8019672 <rmw_wait+0x1f6>
 801956a:	1c7a      	adds	r2, r7, #1
 801956c:	d00d      	beq.n	801958a <rmw_wait+0x10e>
 801956e:	ee07 7a90 	vmov	s15, r7
 8019572:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019576:	ee07 3a90 	vmov	s15, r3
 801957a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801957e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019582:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019586:	ee17 7a90 	vmov	r7, s15
 801958a:	68a0      	ldr	r0, [r4, #8]
 801958c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019590:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019594:	2b00      	cmp	r3, #0
 8019596:	f040 8090 	bne.w	80196ba <rmw_wait+0x23e>
 801959a:	6864      	ldr	r4, [r4, #4]
 801959c:	2c00      	cmp	r4, #0
 801959e:	d1f4      	bne.n	801958a <rmw_wait+0x10e>
 80195a0:	f1b9 0f00 	cmp.w	r9, #0
 80195a4:	f000 80bc 	beq.w	8019720 <rmw_wait+0x2a4>
 80195a8:	f8d9 7000 	ldr.w	r7, [r9]
 80195ac:	2f00      	cmp	r7, #0
 80195ae:	f000 808e 	beq.w	80196ce <rmw_wait+0x252>
 80195b2:	2400      	movs	r4, #0
 80195b4:	4627      	mov	r7, r4
 80195b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80195ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80195be:	f7f8 fd53 	bl	8012068 <rmw_uxrce_find_static_input_buffer_by_owner>
 80195c2:	2800      	cmp	r0, #0
 80195c4:	d05f      	beq.n	8019686 <rmw_wait+0x20a>
 80195c6:	f8d9 3000 	ldr.w	r3, [r9]
 80195ca:	3401      	adds	r4, #1
 80195cc:	42a3      	cmp	r3, r4
 80195ce:	f04f 0701 	mov.w	r7, #1
 80195d2:	d8f0      	bhi.n	80195b6 <rmw_wait+0x13a>
 80195d4:	f1b8 0f00 	cmp.w	r8, #0
 80195d8:	d012      	beq.n	8019600 <rmw_wait+0x184>
 80195da:	f8d8 3000 	ldr.w	r3, [r8]
 80195de:	b17b      	cbz	r3, 8019600 <rmw_wait+0x184>
 80195e0:	2400      	movs	r4, #0
 80195e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80195e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80195ea:	f7f8 fd3d 	bl	8012068 <rmw_uxrce_find_static_input_buffer_by_owner>
 80195ee:	2800      	cmp	r0, #0
 80195f0:	d051      	beq.n	8019696 <rmw_wait+0x21a>
 80195f2:	f8d8 3000 	ldr.w	r3, [r8]
 80195f6:	3401      	adds	r4, #1
 80195f8:	42a3      	cmp	r3, r4
 80195fa:	f04f 0701 	mov.w	r7, #1
 80195fe:	d8f0      	bhi.n	80195e2 <rmw_wait+0x166>
 8019600:	b1dd      	cbz	r5, 801963a <rmw_wait+0x1be>
 8019602:	682b      	ldr	r3, [r5, #0]
 8019604:	b1cb      	cbz	r3, 801963a <rmw_wait+0x1be>
 8019606:	2400      	movs	r4, #0
 8019608:	686b      	ldr	r3, [r5, #4]
 801960a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801960e:	f7f8 fd2b 	bl	8012068 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019612:	b158      	cbz	r0, 801962c <rmw_wait+0x1b0>
 8019614:	682b      	ldr	r3, [r5, #0]
 8019616:	3401      	adds	r4, #1
 8019618:	42a3      	cmp	r3, r4
 801961a:	d969      	bls.n	80196f0 <rmw_wait+0x274>
 801961c:	686b      	ldr	r3, [r5, #4]
 801961e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019622:	2701      	movs	r7, #1
 8019624:	f7f8 fd20 	bl	8012068 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019628:	2800      	cmp	r0, #0
 801962a:	d1f3      	bne.n	8019614 <rmw_wait+0x198>
 801962c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019630:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019634:	3401      	adds	r4, #1
 8019636:	42a3      	cmp	r3, r4
 8019638:	d8e6      	bhi.n	8019608 <rmw_wait+0x18c>
 801963a:	b1a6      	cbz	r6, 8019666 <rmw_wait+0x1ea>
 801963c:	6834      	ldr	r4, [r6, #0]
 801963e:	b194      	cbz	r4, 8019666 <rmw_wait+0x1ea>
 8019640:	2300      	movs	r3, #0
 8019642:	461d      	mov	r5, r3
 8019644:	e004      	b.n	8019650 <rmw_wait+0x1d4>
 8019646:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801964a:	3301      	adds	r3, #1
 801964c:	42a3      	cmp	r3, r4
 801964e:	d00a      	beq.n	8019666 <rmw_wait+0x1ea>
 8019650:	6870      	ldr	r0, [r6, #4]
 8019652:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019656:	7c0a      	ldrb	r2, [r1, #16]
 8019658:	2a00      	cmp	r2, #0
 801965a:	d0f4      	beq.n	8019646 <rmw_wait+0x1ca>
 801965c:	3301      	adds	r3, #1
 801965e:	42a3      	cmp	r3, r4
 8019660:	740d      	strb	r5, [r1, #16]
 8019662:	4617      	mov	r7, r2
 8019664:	d1f4      	bne.n	8019650 <rmw_wait+0x1d4>
 8019666:	2f00      	cmp	r7, #0
 8019668:	d03e      	beq.n	80196e8 <rmw_wait+0x26c>
 801966a:	2000      	movs	r0, #0
 801966c:	b009      	add	sp, #36	@ 0x24
 801966e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019672:	68a0      	ldr	r0, [r4, #8]
 8019674:	2100      	movs	r1, #0
 8019676:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801967a:	f7f9 fe1f 	bl	80132bc <uxr_run_session_timeout>
 801967e:	6864      	ldr	r4, [r4, #4]
 8019680:	2c00      	cmp	r4, #0
 8019682:	d1f6      	bne.n	8019672 <rmw_wait+0x1f6>
 8019684:	e78c      	b.n	80195a0 <rmw_wait+0x124>
 8019686:	e9d9 3200 	ldrd	r3, r2, [r9]
 801968a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801968e:	3401      	adds	r4, #1
 8019690:	42a3      	cmp	r3, r4
 8019692:	d890      	bhi.n	80195b6 <rmw_wait+0x13a>
 8019694:	e79e      	b.n	80195d4 <rmw_wait+0x158>
 8019696:	e9d8 3200 	ldrd	r3, r2, [r8]
 801969a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801969e:	3401      	adds	r4, #1
 80196a0:	429c      	cmp	r4, r3
 80196a2:	d39e      	bcc.n	80195e2 <rmw_wait+0x166>
 80196a4:	e7ac      	b.n	8019600 <rmw_wait+0x184>
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	f47f aef3 	bne.w	8019492 <rmw_wait+0x16>
 80196ac:	2800      	cmp	r0, #0
 80196ae:	f47f aef0 	bne.w	8019492 <rmw_wait+0x16>
 80196b2:	2900      	cmp	r1, #0
 80196b4:	f47f aeed 	bne.w	8019492 <rmw_wait+0x16>
 80196b8:	e7d7      	b.n	801966a <rmw_wait+0x1ee>
 80196ba:	4639      	mov	r1, r7
 80196bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80196c0:	f7f9 fe16 	bl	80132f0 <uxr_run_session_until_data>
 80196c4:	6864      	ldr	r4, [r4, #4]
 80196c6:	2c00      	cmp	r4, #0
 80196c8:	f47f af5f 	bne.w	801958a <rmw_wait+0x10e>
 80196cc:	e768      	b.n	80195a0 <rmw_wait+0x124>
 80196ce:	f1b8 0f00 	cmp.w	r8, #0
 80196d2:	d032      	beq.n	801973a <rmw_wait+0x2be>
 80196d4:	f8d8 3000 	ldr.w	r3, [r8]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d181      	bne.n	80195e0 <rmw_wait+0x164>
 80196dc:	461f      	mov	r7, r3
 80196de:	2d00      	cmp	r5, #0
 80196e0:	d18f      	bne.n	8019602 <rmw_wait+0x186>
 80196e2:	462f      	mov	r7, r5
 80196e4:	2e00      	cmp	r6, #0
 80196e6:	d1a9      	bne.n	801963c <rmw_wait+0x1c0>
 80196e8:	2002      	movs	r0, #2
 80196ea:	b009      	add	sp, #36	@ 0x24
 80196ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196f0:	2e00      	cmp	r6, #0
 80196f2:	d0ba      	beq.n	801966a <rmw_wait+0x1ee>
 80196f4:	6834      	ldr	r4, [r6, #0]
 80196f6:	2701      	movs	r7, #1
 80196f8:	2c00      	cmp	r4, #0
 80196fa:	d1a1      	bne.n	8019640 <rmw_wait+0x1c4>
 80196fc:	e7b5      	b.n	801966a <rmw_wait+0x1ee>
 80196fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019702:	f7fe fd71 	bl	80181e8 <rmw_time_total_nsec>
 8019706:	2300      	movs	r3, #0
 8019708:	4a13      	ldr	r2, [pc, #76]	@ (8019758 <rmw_wait+0x2dc>)
 801970a:	f7e6 fe69 	bl	80003e0 <__aeabi_uldivmod>
 801970e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8019712:	f171 0300 	sbcs.w	r3, r1, #0
 8019716:	4607      	mov	r7, r0
 8019718:	bfa8      	it	ge
 801971a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801971e:	e6c9      	b.n	80194b4 <rmw_wait+0x38>
 8019720:	f1b8 0f00 	cmp.w	r8, #0
 8019724:	d009      	beq.n	801973a <rmw_wait+0x2be>
 8019726:	f8d8 3000 	ldr.w	r3, [r8]
 801972a:	464f      	mov	r7, r9
 801972c:	2b00      	cmp	r3, #0
 801972e:	f47f af57 	bne.w	80195e0 <rmw_wait+0x164>
 8019732:	2d00      	cmp	r5, #0
 8019734:	f47f af65 	bne.w	8019602 <rmw_wait+0x186>
 8019738:	e7d3      	b.n	80196e2 <rmw_wait+0x266>
 801973a:	b17d      	cbz	r5, 801975c <rmw_wait+0x2e0>
 801973c:	682b      	ldr	r3, [r5, #0]
 801973e:	4647      	mov	r7, r8
 8019740:	2b00      	cmp	r3, #0
 8019742:	f47f af60 	bne.w	8019606 <rmw_wait+0x18a>
 8019746:	2e00      	cmp	r6, #0
 8019748:	f47f af78 	bne.w	801963c <rmw_wait+0x1c0>
 801974c:	e7cc      	b.n	80196e8 <rmw_wait+0x26c>
 801974e:	bf00      	nop
 8019750:	0801d398 	.word	0x0801d398
 8019754:	2000e544 	.word	0x2000e544
 8019758:	000f4240 	.word	0x000f4240
 801975c:	2e00      	cmp	r6, #0
 801975e:	d0c3      	beq.n	80196e8 <rmw_wait+0x26c>
 8019760:	6834      	ldr	r4, [r6, #0]
 8019762:	462f      	mov	r7, r5
 8019764:	2c00      	cmp	r4, #0
 8019766:	f47f af6b 	bne.w	8019640 <rmw_wait+0x1c4>
 801976a:	e7bd      	b.n	80196e8 <rmw_wait+0x26c>

0801976c <rmw_create_wait_set>:
 801976c:	b508      	push	{r3, lr}
 801976e:	4803      	ldr	r0, [pc, #12]	@ (801977c <rmw_create_wait_set+0x10>)
 8019770:	f7fe feb2 	bl	80184d8 <get_memory>
 8019774:	b108      	cbz	r0, 801977a <rmw_create_wait_set+0xe>
 8019776:	6880      	ldr	r0, [r0, #8]
 8019778:	3010      	adds	r0, #16
 801977a:	bd08      	pop	{r3, pc}
 801977c:	2000e584 	.word	0x2000e584

08019780 <rmw_destroy_wait_set>:
 8019780:	b508      	push	{r3, lr}
 8019782:	4b08      	ldr	r3, [pc, #32]	@ (80197a4 <rmw_destroy_wait_set+0x24>)
 8019784:	6819      	ldr	r1, [r3, #0]
 8019786:	b911      	cbnz	r1, 801978e <rmw_destroy_wait_set+0xe>
 8019788:	e00a      	b.n	80197a0 <rmw_destroy_wait_set+0x20>
 801978a:	6849      	ldr	r1, [r1, #4]
 801978c:	b141      	cbz	r1, 80197a0 <rmw_destroy_wait_set+0x20>
 801978e:	688b      	ldr	r3, [r1, #8]
 8019790:	3310      	adds	r3, #16
 8019792:	4298      	cmp	r0, r3
 8019794:	d1f9      	bne.n	801978a <rmw_destroy_wait_set+0xa>
 8019796:	4803      	ldr	r0, [pc, #12]	@ (80197a4 <rmw_destroy_wait_set+0x24>)
 8019798:	f7fe feae 	bl	80184f8 <put_memory>
 801979c:	2000      	movs	r0, #0
 801979e:	bd08      	pop	{r3, pc}
 80197a0:	2001      	movs	r0, #1
 80197a2:	bd08      	pop	{r3, pc}
 80197a4:	2000e584 	.word	0x2000e584

080197a8 <rmw_uros_epoch_nanos>:
 80197a8:	4b05      	ldr	r3, [pc, #20]	@ (80197c0 <rmw_uros_epoch_nanos+0x18>)
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	b123      	cbz	r3, 80197b8 <rmw_uros_epoch_nanos+0x10>
 80197ae:	6898      	ldr	r0, [r3, #8]
 80197b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80197b4:	f7f9 b9f2 	b.w	8012b9c <uxr_epoch_nanos>
 80197b8:	2000      	movs	r0, #0
 80197ba:	2100      	movs	r1, #0
 80197bc:	4770      	bx	lr
 80197be:	bf00      	nop
 80197c0:	2000e544 	.word	0x2000e544

080197c4 <std_msgs__msg__Float32__init>:
 80197c4:	3800      	subs	r0, #0
 80197c6:	bf18      	it	ne
 80197c8:	2001      	movne	r0, #1
 80197ca:	4770      	bx	lr

080197cc <std_msgs__msg__Float32__fini>:
 80197cc:	4770      	bx	lr
 80197ce:	bf00      	nop

080197d0 <std_msgs__msg__Int32__init>:
 80197d0:	3800      	subs	r0, #0
 80197d2:	bf18      	it	ne
 80197d4:	2001      	movne	r0, #1
 80197d6:	4770      	bx	lr

080197d8 <std_msgs__msg__Int32__fini>:
 80197d8:	4770      	bx	lr
 80197da:	bf00      	nop

080197dc <ucdr_serialize_endian_array_char>:
 80197dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197e0:	4619      	mov	r1, r3
 80197e2:	461f      	mov	r7, r3
 80197e4:	4605      	mov	r5, r0
 80197e6:	4690      	mov	r8, r2
 80197e8:	f7f6 fea8 	bl	801053c <ucdr_check_buffer_available_for>
 80197ec:	b9e0      	cbnz	r0, 8019828 <ucdr_serialize_endian_array_char+0x4c>
 80197ee:	463e      	mov	r6, r7
 80197f0:	e009      	b.n	8019806 <ucdr_serialize_endian_array_char+0x2a>
 80197f2:	68a8      	ldr	r0, [r5, #8]
 80197f4:	f002 fe87 	bl	801c506 <memcpy>
 80197f8:	68ab      	ldr	r3, [r5, #8]
 80197fa:	6928      	ldr	r0, [r5, #16]
 80197fc:	4423      	add	r3, r4
 80197fe:	4420      	add	r0, r4
 8019800:	1b36      	subs	r6, r6, r4
 8019802:	60ab      	str	r3, [r5, #8]
 8019804:	6128      	str	r0, [r5, #16]
 8019806:	4631      	mov	r1, r6
 8019808:	2201      	movs	r2, #1
 801980a:	4628      	mov	r0, r5
 801980c:	f7f6 ff1e 	bl	801064c <ucdr_check_final_buffer_behavior_array>
 8019810:	1bb9      	subs	r1, r7, r6
 8019812:	4441      	add	r1, r8
 8019814:	4604      	mov	r4, r0
 8019816:	4602      	mov	r2, r0
 8019818:	2800      	cmp	r0, #0
 801981a:	d1ea      	bne.n	80197f2 <ucdr_serialize_endian_array_char+0x16>
 801981c:	2301      	movs	r3, #1
 801981e:	7da8      	ldrb	r0, [r5, #22]
 8019820:	756b      	strb	r3, [r5, #21]
 8019822:	4058      	eors	r0, r3
 8019824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019828:	463a      	mov	r2, r7
 801982a:	68a8      	ldr	r0, [r5, #8]
 801982c:	4641      	mov	r1, r8
 801982e:	f002 fe6a 	bl	801c506 <memcpy>
 8019832:	68aa      	ldr	r2, [r5, #8]
 8019834:	692b      	ldr	r3, [r5, #16]
 8019836:	443a      	add	r2, r7
 8019838:	443b      	add	r3, r7
 801983a:	60aa      	str	r2, [r5, #8]
 801983c:	612b      	str	r3, [r5, #16]
 801983e:	e7ed      	b.n	801981c <ucdr_serialize_endian_array_char+0x40>

08019840 <ucdr_deserialize_endian_array_char>:
 8019840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019844:	4619      	mov	r1, r3
 8019846:	461f      	mov	r7, r3
 8019848:	4605      	mov	r5, r0
 801984a:	4690      	mov	r8, r2
 801984c:	f7f6 fe76 	bl	801053c <ucdr_check_buffer_available_for>
 8019850:	b9e0      	cbnz	r0, 801988c <ucdr_deserialize_endian_array_char+0x4c>
 8019852:	463e      	mov	r6, r7
 8019854:	e009      	b.n	801986a <ucdr_deserialize_endian_array_char+0x2a>
 8019856:	68a9      	ldr	r1, [r5, #8]
 8019858:	f002 fe55 	bl	801c506 <memcpy>
 801985c:	68ab      	ldr	r3, [r5, #8]
 801985e:	6928      	ldr	r0, [r5, #16]
 8019860:	4423      	add	r3, r4
 8019862:	4420      	add	r0, r4
 8019864:	1b36      	subs	r6, r6, r4
 8019866:	60ab      	str	r3, [r5, #8]
 8019868:	6128      	str	r0, [r5, #16]
 801986a:	2201      	movs	r2, #1
 801986c:	4631      	mov	r1, r6
 801986e:	4628      	mov	r0, r5
 8019870:	f7f6 feec 	bl	801064c <ucdr_check_final_buffer_behavior_array>
 8019874:	4604      	mov	r4, r0
 8019876:	1bb8      	subs	r0, r7, r6
 8019878:	4440      	add	r0, r8
 801987a:	4622      	mov	r2, r4
 801987c:	2c00      	cmp	r4, #0
 801987e:	d1ea      	bne.n	8019856 <ucdr_deserialize_endian_array_char+0x16>
 8019880:	2301      	movs	r3, #1
 8019882:	7da8      	ldrb	r0, [r5, #22]
 8019884:	756b      	strb	r3, [r5, #21]
 8019886:	4058      	eors	r0, r3
 8019888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801988c:	463a      	mov	r2, r7
 801988e:	68a9      	ldr	r1, [r5, #8]
 8019890:	4640      	mov	r0, r8
 8019892:	f002 fe38 	bl	801c506 <memcpy>
 8019896:	68aa      	ldr	r2, [r5, #8]
 8019898:	692b      	ldr	r3, [r5, #16]
 801989a:	443a      	add	r2, r7
 801989c:	443b      	add	r3, r7
 801989e:	60aa      	str	r2, [r5, #8]
 80198a0:	612b      	str	r3, [r5, #16]
 80198a2:	e7ed      	b.n	8019880 <ucdr_deserialize_endian_array_char+0x40>

080198a4 <ucdr_serialize_array_uint8_t>:
 80198a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198a8:	4688      	mov	r8, r1
 80198aa:	4611      	mov	r1, r2
 80198ac:	4617      	mov	r7, r2
 80198ae:	4605      	mov	r5, r0
 80198b0:	f7f6 fe44 	bl	801053c <ucdr_check_buffer_available_for>
 80198b4:	b9e0      	cbnz	r0, 80198f0 <ucdr_serialize_array_uint8_t+0x4c>
 80198b6:	463e      	mov	r6, r7
 80198b8:	e009      	b.n	80198ce <ucdr_serialize_array_uint8_t+0x2a>
 80198ba:	68a8      	ldr	r0, [r5, #8]
 80198bc:	f002 fe23 	bl	801c506 <memcpy>
 80198c0:	68aa      	ldr	r2, [r5, #8]
 80198c2:	692b      	ldr	r3, [r5, #16]
 80198c4:	4422      	add	r2, r4
 80198c6:	4423      	add	r3, r4
 80198c8:	1b36      	subs	r6, r6, r4
 80198ca:	60aa      	str	r2, [r5, #8]
 80198cc:	612b      	str	r3, [r5, #16]
 80198ce:	4631      	mov	r1, r6
 80198d0:	2201      	movs	r2, #1
 80198d2:	4628      	mov	r0, r5
 80198d4:	f7f6 feba 	bl	801064c <ucdr_check_final_buffer_behavior_array>
 80198d8:	1bb9      	subs	r1, r7, r6
 80198da:	4441      	add	r1, r8
 80198dc:	4604      	mov	r4, r0
 80198de:	4602      	mov	r2, r0
 80198e0:	2800      	cmp	r0, #0
 80198e2:	d1ea      	bne.n	80198ba <ucdr_serialize_array_uint8_t+0x16>
 80198e4:	2301      	movs	r3, #1
 80198e6:	7da8      	ldrb	r0, [r5, #22]
 80198e8:	756b      	strb	r3, [r5, #21]
 80198ea:	4058      	eors	r0, r3
 80198ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198f0:	463a      	mov	r2, r7
 80198f2:	68a8      	ldr	r0, [r5, #8]
 80198f4:	4641      	mov	r1, r8
 80198f6:	f002 fe06 	bl	801c506 <memcpy>
 80198fa:	68aa      	ldr	r2, [r5, #8]
 80198fc:	692b      	ldr	r3, [r5, #16]
 80198fe:	443a      	add	r2, r7
 8019900:	443b      	add	r3, r7
 8019902:	60aa      	str	r2, [r5, #8]
 8019904:	612b      	str	r3, [r5, #16]
 8019906:	e7ed      	b.n	80198e4 <ucdr_serialize_array_uint8_t+0x40>

08019908 <ucdr_serialize_endian_array_uint8_t>:
 8019908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801990c:	4619      	mov	r1, r3
 801990e:	461f      	mov	r7, r3
 8019910:	4605      	mov	r5, r0
 8019912:	4690      	mov	r8, r2
 8019914:	f7f6 fe12 	bl	801053c <ucdr_check_buffer_available_for>
 8019918:	b9e0      	cbnz	r0, 8019954 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801991a:	463e      	mov	r6, r7
 801991c:	e009      	b.n	8019932 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801991e:	68a8      	ldr	r0, [r5, #8]
 8019920:	f002 fdf1 	bl	801c506 <memcpy>
 8019924:	68ab      	ldr	r3, [r5, #8]
 8019926:	6928      	ldr	r0, [r5, #16]
 8019928:	4423      	add	r3, r4
 801992a:	4420      	add	r0, r4
 801992c:	1b36      	subs	r6, r6, r4
 801992e:	60ab      	str	r3, [r5, #8]
 8019930:	6128      	str	r0, [r5, #16]
 8019932:	4631      	mov	r1, r6
 8019934:	2201      	movs	r2, #1
 8019936:	4628      	mov	r0, r5
 8019938:	f7f6 fe88 	bl	801064c <ucdr_check_final_buffer_behavior_array>
 801993c:	1bb9      	subs	r1, r7, r6
 801993e:	4441      	add	r1, r8
 8019940:	4604      	mov	r4, r0
 8019942:	4602      	mov	r2, r0
 8019944:	2800      	cmp	r0, #0
 8019946:	d1ea      	bne.n	801991e <ucdr_serialize_endian_array_uint8_t+0x16>
 8019948:	2301      	movs	r3, #1
 801994a:	7da8      	ldrb	r0, [r5, #22]
 801994c:	756b      	strb	r3, [r5, #21]
 801994e:	4058      	eors	r0, r3
 8019950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019954:	463a      	mov	r2, r7
 8019956:	68a8      	ldr	r0, [r5, #8]
 8019958:	4641      	mov	r1, r8
 801995a:	f002 fdd4 	bl	801c506 <memcpy>
 801995e:	68aa      	ldr	r2, [r5, #8]
 8019960:	692b      	ldr	r3, [r5, #16]
 8019962:	443a      	add	r2, r7
 8019964:	443b      	add	r3, r7
 8019966:	60aa      	str	r2, [r5, #8]
 8019968:	612b      	str	r3, [r5, #16]
 801996a:	e7ed      	b.n	8019948 <ucdr_serialize_endian_array_uint8_t+0x40>

0801996c <ucdr_deserialize_array_uint8_t>:
 801996c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019970:	4688      	mov	r8, r1
 8019972:	4611      	mov	r1, r2
 8019974:	4617      	mov	r7, r2
 8019976:	4605      	mov	r5, r0
 8019978:	f7f6 fde0 	bl	801053c <ucdr_check_buffer_available_for>
 801997c:	b9e0      	cbnz	r0, 80199b8 <ucdr_deserialize_array_uint8_t+0x4c>
 801997e:	463e      	mov	r6, r7
 8019980:	e009      	b.n	8019996 <ucdr_deserialize_array_uint8_t+0x2a>
 8019982:	68a9      	ldr	r1, [r5, #8]
 8019984:	f002 fdbf 	bl	801c506 <memcpy>
 8019988:	68aa      	ldr	r2, [r5, #8]
 801998a:	692b      	ldr	r3, [r5, #16]
 801998c:	4422      	add	r2, r4
 801998e:	4423      	add	r3, r4
 8019990:	1b36      	subs	r6, r6, r4
 8019992:	60aa      	str	r2, [r5, #8]
 8019994:	612b      	str	r3, [r5, #16]
 8019996:	2201      	movs	r2, #1
 8019998:	4631      	mov	r1, r6
 801999a:	4628      	mov	r0, r5
 801999c:	f7f6 fe56 	bl	801064c <ucdr_check_final_buffer_behavior_array>
 80199a0:	4604      	mov	r4, r0
 80199a2:	1bb8      	subs	r0, r7, r6
 80199a4:	4440      	add	r0, r8
 80199a6:	4622      	mov	r2, r4
 80199a8:	2c00      	cmp	r4, #0
 80199aa:	d1ea      	bne.n	8019982 <ucdr_deserialize_array_uint8_t+0x16>
 80199ac:	2301      	movs	r3, #1
 80199ae:	7da8      	ldrb	r0, [r5, #22]
 80199b0:	756b      	strb	r3, [r5, #21]
 80199b2:	4058      	eors	r0, r3
 80199b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199b8:	463a      	mov	r2, r7
 80199ba:	68a9      	ldr	r1, [r5, #8]
 80199bc:	4640      	mov	r0, r8
 80199be:	f002 fda2 	bl	801c506 <memcpy>
 80199c2:	68aa      	ldr	r2, [r5, #8]
 80199c4:	692b      	ldr	r3, [r5, #16]
 80199c6:	443a      	add	r2, r7
 80199c8:	443b      	add	r3, r7
 80199ca:	60aa      	str	r2, [r5, #8]
 80199cc:	612b      	str	r3, [r5, #16]
 80199ce:	e7ed      	b.n	80199ac <ucdr_deserialize_array_uint8_t+0x40>

080199d0 <ucdr_deserialize_endian_array_uint8_t>:
 80199d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199d4:	4619      	mov	r1, r3
 80199d6:	461f      	mov	r7, r3
 80199d8:	4605      	mov	r5, r0
 80199da:	4690      	mov	r8, r2
 80199dc:	f7f6 fdae 	bl	801053c <ucdr_check_buffer_available_for>
 80199e0:	b9e0      	cbnz	r0, 8019a1c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80199e2:	463e      	mov	r6, r7
 80199e4:	e009      	b.n	80199fa <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80199e6:	68a9      	ldr	r1, [r5, #8]
 80199e8:	f002 fd8d 	bl	801c506 <memcpy>
 80199ec:	68ab      	ldr	r3, [r5, #8]
 80199ee:	6928      	ldr	r0, [r5, #16]
 80199f0:	4423      	add	r3, r4
 80199f2:	4420      	add	r0, r4
 80199f4:	1b36      	subs	r6, r6, r4
 80199f6:	60ab      	str	r3, [r5, #8]
 80199f8:	6128      	str	r0, [r5, #16]
 80199fa:	2201      	movs	r2, #1
 80199fc:	4631      	mov	r1, r6
 80199fe:	4628      	mov	r0, r5
 8019a00:	f7f6 fe24 	bl	801064c <ucdr_check_final_buffer_behavior_array>
 8019a04:	4604      	mov	r4, r0
 8019a06:	1bb8      	subs	r0, r7, r6
 8019a08:	4440      	add	r0, r8
 8019a0a:	4622      	mov	r2, r4
 8019a0c:	2c00      	cmp	r4, #0
 8019a0e:	d1ea      	bne.n	80199e6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8019a10:	2301      	movs	r3, #1
 8019a12:	7da8      	ldrb	r0, [r5, #22]
 8019a14:	756b      	strb	r3, [r5, #21]
 8019a16:	4058      	eors	r0, r3
 8019a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a1c:	463a      	mov	r2, r7
 8019a1e:	68a9      	ldr	r1, [r5, #8]
 8019a20:	4640      	mov	r0, r8
 8019a22:	f002 fd70 	bl	801c506 <memcpy>
 8019a26:	68aa      	ldr	r2, [r5, #8]
 8019a28:	692b      	ldr	r3, [r5, #16]
 8019a2a:	443a      	add	r2, r7
 8019a2c:	443b      	add	r3, r7
 8019a2e:	60aa      	str	r2, [r5, #8]
 8019a30:	612b      	str	r3, [r5, #16]
 8019a32:	e7ed      	b.n	8019a10 <ucdr_deserialize_endian_array_uint8_t+0x40>

08019a34 <ucdr_serialize_sequence_char>:
 8019a34:	b570      	push	{r4, r5, r6, lr}
 8019a36:	4615      	mov	r5, r2
 8019a38:	460e      	mov	r6, r1
 8019a3a:	7d01      	ldrb	r1, [r0, #20]
 8019a3c:	4604      	mov	r4, r0
 8019a3e:	f7f5 fe15 	bl	800f66c <ucdr_serialize_endian_uint32_t>
 8019a42:	b90d      	cbnz	r5, 8019a48 <ucdr_serialize_sequence_char+0x14>
 8019a44:	2001      	movs	r0, #1
 8019a46:	bd70      	pop	{r4, r5, r6, pc}
 8019a48:	7d21      	ldrb	r1, [r4, #20]
 8019a4a:	462b      	mov	r3, r5
 8019a4c:	4632      	mov	r2, r6
 8019a4e:	4620      	mov	r0, r4
 8019a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a54:	f7ff bec2 	b.w	80197dc <ucdr_serialize_endian_array_char>

08019a58 <ucdr_deserialize_sequence_char>:
 8019a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a5c:	461d      	mov	r5, r3
 8019a5e:	4616      	mov	r6, r2
 8019a60:	460f      	mov	r7, r1
 8019a62:	461a      	mov	r2, r3
 8019a64:	7d01      	ldrb	r1, [r0, #20]
 8019a66:	4604      	mov	r4, r0
 8019a68:	f7f5 ff28 	bl	800f8bc <ucdr_deserialize_endian_uint32_t>
 8019a6c:	682b      	ldr	r3, [r5, #0]
 8019a6e:	429e      	cmp	r6, r3
 8019a70:	bf3c      	itt	cc
 8019a72:	2201      	movcc	r2, #1
 8019a74:	75a2      	strbcc	r2, [r4, #22]
 8019a76:	b913      	cbnz	r3, 8019a7e <ucdr_deserialize_sequence_char+0x26>
 8019a78:	2001      	movs	r0, #1
 8019a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a7e:	7d21      	ldrb	r1, [r4, #20]
 8019a80:	463a      	mov	r2, r7
 8019a82:	4620      	mov	r0, r4
 8019a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a88:	f7ff beda 	b.w	8019840 <ucdr_deserialize_endian_array_char>

08019a8c <ucdr_serialize_sequence_uint8_t>:
 8019a8c:	b570      	push	{r4, r5, r6, lr}
 8019a8e:	4615      	mov	r5, r2
 8019a90:	460e      	mov	r6, r1
 8019a92:	7d01      	ldrb	r1, [r0, #20]
 8019a94:	4604      	mov	r4, r0
 8019a96:	f7f5 fde9 	bl	800f66c <ucdr_serialize_endian_uint32_t>
 8019a9a:	b90d      	cbnz	r5, 8019aa0 <ucdr_serialize_sequence_uint8_t+0x14>
 8019a9c:	2001      	movs	r0, #1
 8019a9e:	bd70      	pop	{r4, r5, r6, pc}
 8019aa0:	7d21      	ldrb	r1, [r4, #20]
 8019aa2:	462b      	mov	r3, r5
 8019aa4:	4632      	mov	r2, r6
 8019aa6:	4620      	mov	r0, r4
 8019aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019aac:	f7ff bf2c 	b.w	8019908 <ucdr_serialize_endian_array_uint8_t>

08019ab0 <ucdr_deserialize_sequence_uint8_t>:
 8019ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ab4:	461d      	mov	r5, r3
 8019ab6:	4616      	mov	r6, r2
 8019ab8:	460f      	mov	r7, r1
 8019aba:	461a      	mov	r2, r3
 8019abc:	7d01      	ldrb	r1, [r0, #20]
 8019abe:	4604      	mov	r4, r0
 8019ac0:	f7f5 fefc 	bl	800f8bc <ucdr_deserialize_endian_uint32_t>
 8019ac4:	682b      	ldr	r3, [r5, #0]
 8019ac6:	429e      	cmp	r6, r3
 8019ac8:	bf3c      	itt	cc
 8019aca:	2201      	movcc	r2, #1
 8019acc:	75a2      	strbcc	r2, [r4, #22]
 8019ace:	b913      	cbnz	r3, 8019ad6 <ucdr_deserialize_sequence_uint8_t+0x26>
 8019ad0:	2001      	movs	r0, #1
 8019ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ad6:	7d21      	ldrb	r1, [r4, #20]
 8019ad8:	463a      	mov	r2, r7
 8019ada:	4620      	mov	r0, r4
 8019adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ae0:	f7ff bf76 	b.w	80199d0 <ucdr_deserialize_endian_array_uint8_t>

08019ae4 <ucdr_serialize_string>:
 8019ae4:	b510      	push	{r4, lr}
 8019ae6:	b082      	sub	sp, #8
 8019ae8:	4604      	mov	r4, r0
 8019aea:	4608      	mov	r0, r1
 8019aec:	9101      	str	r1, [sp, #4]
 8019aee:	f7e6 fb79 	bl	80001e4 <strlen>
 8019af2:	9901      	ldr	r1, [sp, #4]
 8019af4:	1c42      	adds	r2, r0, #1
 8019af6:	4620      	mov	r0, r4
 8019af8:	b002      	add	sp, #8
 8019afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019afe:	f7ff bf99 	b.w	8019a34 <ucdr_serialize_sequence_char>
 8019b02:	bf00      	nop

08019b04 <ucdr_deserialize_string>:
 8019b04:	b500      	push	{lr}
 8019b06:	b083      	sub	sp, #12
 8019b08:	ab01      	add	r3, sp, #4
 8019b0a:	f7ff ffa5 	bl	8019a58 <ucdr_deserialize_sequence_char>
 8019b0e:	b003      	add	sp, #12
 8019b10:	f85d fb04 	ldr.w	pc, [sp], #4

08019b14 <get_custom_error>:
 8019b14:	4b01      	ldr	r3, [pc, #4]	@ (8019b1c <get_custom_error+0x8>)
 8019b16:	7818      	ldrb	r0, [r3, #0]
 8019b18:	4770      	bx	lr
 8019b1a:	bf00      	nop
 8019b1c:	2000e700 	.word	0x2000e700

08019b20 <recv_custom_msg>:
 8019b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b24:	4693      	mov	fp, r2
 8019b26:	b089      	sub	sp, #36	@ 0x24
 8019b28:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8019b2c:	9305      	str	r3, [sp, #20]
 8019b2e:	468a      	mov	sl, r1
 8019b30:	2100      	movs	r1, #0
 8019b32:	4604      	mov	r4, r0
 8019b34:	f88d 101e 	strb.w	r1, [sp, #30]
 8019b38:	b322      	cbz	r2, 8019b84 <recv_custom_msg+0x64>
 8019b3a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8019b3e:	f10d 081f 	add.w	r8, sp, #31
 8019b42:	af05      	add	r7, sp, #20
 8019b44:	f10d 061e 	add.w	r6, sp, #30
 8019b48:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8019b4c:	e002      	b.n	8019b54 <recv_custom_msg+0x34>
 8019b4e:	9b05      	ldr	r3, [sp, #20]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	dd0f      	ble.n	8019b74 <recv_custom_msg+0x54>
 8019b54:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8019b58:	4623      	mov	r3, r4
 8019b5a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8019b5e:	e9cd 5600 	strd	r5, r6, [sp]
 8019b62:	4622      	mov	r2, r4
 8019b64:	4648      	mov	r0, r9
 8019b66:	f001 f92d 	bl	801adc4 <uxr_read_framed_msg>
 8019b6a:	2800      	cmp	r0, #0
 8019b6c:	d0ef      	beq.n	8019b4e <recv_custom_msg+0x2e>
 8019b6e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019b72:	b1b3      	cbz	r3, 8019ba2 <recv_custom_msg+0x82>
 8019b74:	4b0f      	ldr	r3, [pc, #60]	@ (8019bb4 <recv_custom_msg+0x94>)
 8019b76:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8019b7a:	701a      	strb	r2, [r3, #0]
 8019b7c:	2000      	movs	r0, #0
 8019b7e:	b009      	add	sp, #36	@ 0x24
 8019b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b84:	f10d 021f 	add.w	r2, sp, #31
 8019b88:	9200      	str	r2, [sp, #0]
 8019b8a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8019b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019b92:	4601      	mov	r1, r0
 8019b94:	47a8      	blx	r5
 8019b96:	2800      	cmp	r0, #0
 8019b98:	d0ec      	beq.n	8019b74 <recv_custom_msg+0x54>
 8019b9a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d1e8      	bne.n	8019b74 <recv_custom_msg+0x54>
 8019ba2:	f8cb 0000 	str.w	r0, [fp]
 8019ba6:	2001      	movs	r0, #1
 8019ba8:	f8ca 4000 	str.w	r4, [sl]
 8019bac:	b009      	add	sp, #36	@ 0x24
 8019bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb2:	bf00      	nop
 8019bb4:	2000e700 	.word	0x2000e700

08019bb8 <send_custom_msg>:
 8019bb8:	b530      	push	{r4, r5, lr}
 8019bba:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8019bbe:	b087      	sub	sp, #28
 8019bc0:	4615      	mov	r5, r2
 8019bc2:	b974      	cbnz	r4, 8019be2 <send_custom_msg+0x2a>
 8019bc4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8019bc8:	f10d 0317 	add.w	r3, sp, #23
 8019bcc:	47a0      	blx	r4
 8019bce:	b108      	cbz	r0, 8019bd4 <send_custom_msg+0x1c>
 8019bd0:	42a8      	cmp	r0, r5
 8019bd2:	d015      	beq.n	8019c00 <send_custom_msg+0x48>
 8019bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8019c08 <send_custom_msg+0x50>)
 8019bd6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8019bda:	701a      	strb	r2, [r3, #0]
 8019bdc:	2000      	movs	r0, #0
 8019bde:	b007      	add	sp, #28
 8019be0:	bd30      	pop	{r4, r5, pc}
 8019be2:	460b      	mov	r3, r1
 8019be4:	2200      	movs	r2, #0
 8019be6:	f10d 0117 	add.w	r1, sp, #23
 8019bea:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8019bee:	4602      	mov	r2, r0
 8019bf0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8019bf4:	9500      	str	r5, [sp, #0]
 8019bf6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8019bfa:	f000 feeb 	bl	801a9d4 <uxr_write_framed_msg>
 8019bfe:	e7e6      	b.n	8019bce <send_custom_msg+0x16>
 8019c00:	2001      	movs	r0, #1
 8019c02:	b007      	add	sp, #28
 8019c04:	bd30      	pop	{r4, r5, pc}
 8019c06:	bf00      	nop
 8019c08:	2000e700 	.word	0x2000e700

08019c0c <uxr_set_custom_transport_callbacks>:
 8019c0c:	b410      	push	{r4}
 8019c0e:	9c01      	ldr	r4, [sp, #4]
 8019c10:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8019c14:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8019c18:	9b02      	ldr	r3, [sp, #8]
 8019c1a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8019c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c22:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8019c26:	4770      	bx	lr

08019c28 <uxr_init_custom_transport>:
 8019c28:	b538      	push	{r3, r4, r5, lr}
 8019c2a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8019c2e:	b303      	cbz	r3, 8019c72 <uxr_init_custom_transport+0x4a>
 8019c30:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8019c34:	4604      	mov	r4, r0
 8019c36:	b1e2      	cbz	r2, 8019c72 <uxr_init_custom_transport+0x4a>
 8019c38:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8019c3c:	b1ca      	cbz	r2, 8019c72 <uxr_init_custom_transport+0x4a>
 8019c3e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8019c42:	b1b2      	cbz	r2, 8019c72 <uxr_init_custom_transport+0x4a>
 8019c44:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8019c48:	4798      	blx	r3
 8019c4a:	4605      	mov	r5, r0
 8019c4c:	b188      	cbz	r0, 8019c72 <uxr_init_custom_transport+0x4a>
 8019c4e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8019c52:	b98b      	cbnz	r3, 8019c78 <uxr_init_custom_transport+0x50>
 8019c54:	490b      	ldr	r1, [pc, #44]	@ (8019c84 <uxr_init_custom_transport+0x5c>)
 8019c56:	4b0c      	ldr	r3, [pc, #48]	@ (8019c88 <uxr_init_custom_transport+0x60>)
 8019c58:	4a0c      	ldr	r2, [pc, #48]	@ (8019c8c <uxr_init_custom_transport+0x64>)
 8019c5a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8019c5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8019c62:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8019c66:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8019c6a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8019c6e:	4628      	mov	r0, r5
 8019c70:	bd38      	pop	{r3, r4, r5, pc}
 8019c72:	2500      	movs	r5, #0
 8019c74:	4628      	mov	r0, r5
 8019c76:	bd38      	pop	{r3, r4, r5, pc}
 8019c78:	2100      	movs	r1, #0
 8019c7a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8019c7e:	f000 fea3 	bl	801a9c8 <uxr_init_framing_io>
 8019c82:	e7e7      	b.n	8019c54 <uxr_init_custom_transport+0x2c>
 8019c84:	08019bb9 	.word	0x08019bb9
 8019c88:	08019b21 	.word	0x08019b21
 8019c8c:	08019b15 	.word	0x08019b15

08019c90 <uxr_close_custom_transport>:
 8019c90:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8019c94:	4718      	bx	r3
 8019c96:	bf00      	nop

08019c98 <uxr_init_input_best_effort_stream>:
 8019c98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019c9c:	8003      	strh	r3, [r0, #0]
 8019c9e:	4770      	bx	lr

08019ca0 <uxr_reset_input_best_effort_stream>:
 8019ca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ca4:	8003      	strh	r3, [r0, #0]
 8019ca6:	4770      	bx	lr

08019ca8 <uxr_receive_best_effort_message>:
 8019ca8:	b538      	push	{r3, r4, r5, lr}
 8019caa:	4604      	mov	r4, r0
 8019cac:	8800      	ldrh	r0, [r0, #0]
 8019cae:	460d      	mov	r5, r1
 8019cb0:	f000 fe72 	bl	801a998 <uxr_seq_num_cmp>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019cbc:	bfb8      	it	lt
 8019cbe:	8025      	strhlt	r5, [r4, #0]
 8019cc0:	bd38      	pop	{r3, r4, r5, pc}
 8019cc2:	bf00      	nop

08019cc4 <on_full_input_buffer>:
 8019cc4:	b570      	push	{r4, r5, r6, lr}
 8019cc6:	4605      	mov	r5, r0
 8019cc8:	460c      	mov	r4, r1
 8019cca:	682b      	ldr	r3, [r5, #0]
 8019ccc:	6809      	ldr	r1, [r1, #0]
 8019cce:	8920      	ldrh	r0, [r4, #8]
 8019cd0:	6862      	ldr	r2, [r4, #4]
 8019cd2:	fbb2 f2f0 	udiv	r2, r2, r0
 8019cd6:	eba3 0c01 	sub.w	ip, r3, r1
 8019cda:	fbbc fcf2 	udiv	ip, ip, r2
 8019cde:	f10c 0c01 	add.w	ip, ip, #1
 8019ce2:	fa1f f38c 	uxth.w	r3, ip
 8019ce6:	fbb3 f6f0 	udiv	r6, r3, r0
 8019cea:	fb00 3316 	mls	r3, r0, r6, r3
 8019cee:	b29b      	uxth	r3, r3
 8019cf0:	fb02 f303 	mul.w	r3, r2, r3
 8019cf4:	1d18      	adds	r0, r3, #4
 8019cf6:	4408      	add	r0, r1
 8019cf8:	7d26      	ldrb	r6, [r4, #20]
 8019cfa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019cfe:	b116      	cbz	r6, 8019d06 <on_full_input_buffer+0x42>
 8019d00:	2600      	movs	r6, #0
 8019d02:	f840 6c04 	str.w	r6, [r0, #-4]
 8019d06:	2a03      	cmp	r2, #3
 8019d08:	d801      	bhi.n	8019d0e <on_full_input_buffer+0x4a>
 8019d0a:	2001      	movs	r0, #1
 8019d0c:	bd70      	pop	{r4, r5, r6, pc}
 8019d0e:	3308      	adds	r3, #8
 8019d10:	4419      	add	r1, r3
 8019d12:	4628      	mov	r0, r5
 8019d14:	692b      	ldr	r3, [r5, #16]
 8019d16:	3a04      	subs	r2, #4
 8019d18:	f7f6 fc5c 	bl	80105d4 <ucdr_init_buffer_origin>
 8019d1c:	4628      	mov	r0, r5
 8019d1e:	4903      	ldr	r1, [pc, #12]	@ (8019d2c <on_full_input_buffer+0x68>)
 8019d20:	4622      	mov	r2, r4
 8019d22:	f7f6 fc33 	bl	801058c <ucdr_set_on_full_buffer_callback>
 8019d26:	2000      	movs	r0, #0
 8019d28:	bd70      	pop	{r4, r5, r6, pc}
 8019d2a:	bf00      	nop
 8019d2c:	08019cc5 	.word	0x08019cc5

08019d30 <uxr_init_input_reliable_stream>:
 8019d30:	b500      	push	{lr}
 8019d32:	e9c0 1200 	strd	r1, r2, [r0]
 8019d36:	f04f 0e00 	mov.w	lr, #0
 8019d3a:	9a01      	ldr	r2, [sp, #4]
 8019d3c:	8103      	strh	r3, [r0, #8]
 8019d3e:	6102      	str	r2, [r0, #16]
 8019d40:	f880 e014 	strb.w	lr, [r0, #20]
 8019d44:	b1d3      	cbz	r3, 8019d7c <uxr_init_input_reliable_stream+0x4c>
 8019d46:	f8c1 e000 	str.w	lr, [r1]
 8019d4a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019d4e:	f1bc 0f01 	cmp.w	ip, #1
 8019d52:	d913      	bls.n	8019d7c <uxr_init_input_reliable_stream+0x4c>
 8019d54:	2301      	movs	r3, #1
 8019d56:	fbb3 f1fc 	udiv	r1, r3, ip
 8019d5a:	fb0c 3111 	mls	r1, ip, r1, r3
 8019d5e:	b289      	uxth	r1, r1
 8019d60:	6842      	ldr	r2, [r0, #4]
 8019d62:	fbb2 f2fc 	udiv	r2, r2, ip
 8019d66:	fb01 f202 	mul.w	r2, r1, r2
 8019d6a:	6801      	ldr	r1, [r0, #0]
 8019d6c:	f841 e002 	str.w	lr, [r1, r2]
 8019d70:	3301      	adds	r3, #1
 8019d72:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	459c      	cmp	ip, r3
 8019d7a:	d8ec      	bhi.n	8019d56 <uxr_init_input_reliable_stream+0x26>
 8019d7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019d80:	60c3      	str	r3, [r0, #12]
 8019d82:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d86:	bf00      	nop

08019d88 <uxr_reset_input_reliable_stream>:
 8019d88:	8901      	ldrh	r1, [r0, #8]
 8019d8a:	b1e9      	cbz	r1, 8019dc8 <uxr_reset_input_reliable_stream+0x40>
 8019d8c:	f04f 0c00 	mov.w	ip, #0
 8019d90:	b500      	push	{lr}
 8019d92:	4663      	mov	r3, ip
 8019d94:	46e6      	mov	lr, ip
 8019d96:	fbb3 f2f1 	udiv	r2, r3, r1
 8019d9a:	fb01 3312 	mls	r3, r1, r2, r3
 8019d9e:	b29b      	uxth	r3, r3
 8019da0:	6842      	ldr	r2, [r0, #4]
 8019da2:	fbb2 f2f1 	udiv	r2, r2, r1
 8019da6:	fb02 f303 	mul.w	r3, r2, r3
 8019daa:	6802      	ldr	r2, [r0, #0]
 8019dac:	f842 e003 	str.w	lr, [r2, r3]
 8019db0:	f10c 0c01 	add.w	ip, ip, #1
 8019db4:	8901      	ldrh	r1, [r0, #8]
 8019db6:	fa1f f38c 	uxth.w	r3, ip
 8019dba:	4299      	cmp	r1, r3
 8019dbc:	d8eb      	bhi.n	8019d96 <uxr_reset_input_reliable_stream+0xe>
 8019dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019dc2:	60c3      	str	r3, [r0, #12]
 8019dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019dcc:	60c3      	str	r3, [r0, #12]
 8019dce:	4770      	bx	lr

08019dd0 <uxr_receive_reliable_message>:
 8019dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019dd4:	4604      	mov	r4, r0
 8019dd6:	460d      	mov	r5, r1
 8019dd8:	8901      	ldrh	r1, [r0, #8]
 8019dda:	8980      	ldrh	r0, [r0, #12]
 8019ddc:	4690      	mov	r8, r2
 8019dde:	461f      	mov	r7, r3
 8019de0:	f000 fdd2 	bl	801a988 <uxr_seq_num_add>
 8019de4:	4629      	mov	r1, r5
 8019de6:	4606      	mov	r6, r0
 8019de8:	89a0      	ldrh	r0, [r4, #12]
 8019dea:	f000 fdd5 	bl	801a998 <uxr_seq_num_cmp>
 8019dee:	2800      	cmp	r0, #0
 8019df0:	db0a      	blt.n	8019e08 <uxr_receive_reliable_message+0x38>
 8019df2:	2600      	movs	r6, #0
 8019df4:	89e0      	ldrh	r0, [r4, #14]
 8019df6:	4629      	mov	r1, r5
 8019df8:	f000 fdce 	bl	801a998 <uxr_seq_num_cmp>
 8019dfc:	2800      	cmp	r0, #0
 8019dfe:	da00      	bge.n	8019e02 <uxr_receive_reliable_message+0x32>
 8019e00:	81e5      	strh	r5, [r4, #14]
 8019e02:	4630      	mov	r0, r6
 8019e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e08:	4630      	mov	r0, r6
 8019e0a:	4629      	mov	r1, r5
 8019e0c:	f000 fdc4 	bl	801a998 <uxr_seq_num_cmp>
 8019e10:	2800      	cmp	r0, #0
 8019e12:	dbee      	blt.n	8019df2 <uxr_receive_reliable_message+0x22>
 8019e14:	6923      	ldr	r3, [r4, #16]
 8019e16:	4640      	mov	r0, r8
 8019e18:	4798      	blx	r3
 8019e1a:	2101      	movs	r1, #1
 8019e1c:	4681      	mov	r9, r0
 8019e1e:	89a0      	ldrh	r0, [r4, #12]
 8019e20:	f000 fdb2 	bl	801a988 <uxr_seq_num_add>
 8019e24:	f1b9 0f00 	cmp.w	r9, #0
 8019e28:	d101      	bne.n	8019e2e <uxr_receive_reliable_message+0x5e>
 8019e2a:	4285      	cmp	r5, r0
 8019e2c:	d047      	beq.n	8019ebe <uxr_receive_reliable_message+0xee>
 8019e2e:	8922      	ldrh	r2, [r4, #8]
 8019e30:	fbb5 f0f2 	udiv	r0, r5, r2
 8019e34:	fb02 5010 	mls	r0, r2, r0, r5
 8019e38:	b280      	uxth	r0, r0
 8019e3a:	6863      	ldr	r3, [r4, #4]
 8019e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e40:	fb00 f303 	mul.w	r3, r0, r3
 8019e44:	6820      	ldr	r0, [r4, #0]
 8019e46:	3304      	adds	r3, #4
 8019e48:	4418      	add	r0, r3
 8019e4a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d1cf      	bne.n	8019df2 <uxr_receive_reliable_message+0x22>
 8019e52:	4641      	mov	r1, r8
 8019e54:	463a      	mov	r2, r7
 8019e56:	f002 fb56 	bl	801c506 <memcpy>
 8019e5a:	8921      	ldrh	r1, [r4, #8]
 8019e5c:	fbb5 f2f1 	udiv	r2, r5, r1
 8019e60:	fb01 5212 	mls	r2, r1, r2, r5
 8019e64:	b292      	uxth	r2, r2
 8019e66:	6863      	ldr	r3, [r4, #4]
 8019e68:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e6c:	fb02 f303 	mul.w	r3, r2, r3
 8019e70:	6822      	ldr	r2, [r4, #0]
 8019e72:	50d7      	str	r7, [r2, r3]
 8019e74:	9a08      	ldr	r2, [sp, #32]
 8019e76:	2301      	movs	r3, #1
 8019e78:	7013      	strb	r3, [r2, #0]
 8019e7a:	f1b9 0f00 	cmp.w	r9, #0
 8019e7e:	d0b8      	beq.n	8019df2 <uxr_receive_reliable_message+0x22>
 8019e80:	89a6      	ldrh	r6, [r4, #12]
 8019e82:	4630      	mov	r0, r6
 8019e84:	2101      	movs	r1, #1
 8019e86:	f000 fd7f 	bl	801a988 <uxr_seq_num_add>
 8019e8a:	8922      	ldrh	r2, [r4, #8]
 8019e8c:	6863      	ldr	r3, [r4, #4]
 8019e8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8019e92:	4606      	mov	r6, r0
 8019e94:	fbb0 f0f2 	udiv	r0, r0, r2
 8019e98:	fb02 6010 	mls	r0, r2, r0, r6
 8019e9c:	b280      	uxth	r0, r0
 8019e9e:	fb00 f303 	mul.w	r3, r0, r3
 8019ea2:	6820      	ldr	r0, [r4, #0]
 8019ea4:	3304      	adds	r3, #4
 8019ea6:	4418      	add	r0, r3
 8019ea8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d0a0      	beq.n	8019df2 <uxr_receive_reliable_message+0x22>
 8019eb0:	6923      	ldr	r3, [r4, #16]
 8019eb2:	4798      	blx	r3
 8019eb4:	2802      	cmp	r0, #2
 8019eb6:	d008      	beq.n	8019eca <uxr_receive_reliable_message+0xfa>
 8019eb8:	2801      	cmp	r0, #1
 8019eba:	d0e2      	beq.n	8019e82 <uxr_receive_reliable_message+0xb2>
 8019ebc:	e799      	b.n	8019df2 <uxr_receive_reliable_message+0x22>
 8019ebe:	9b08      	ldr	r3, [sp, #32]
 8019ec0:	81a5      	strh	r5, [r4, #12]
 8019ec2:	2601      	movs	r6, #1
 8019ec4:	f883 9000 	strb.w	r9, [r3]
 8019ec8:	e794      	b.n	8019df4 <uxr_receive_reliable_message+0x24>
 8019eca:	2601      	movs	r6, #1
 8019ecc:	e792      	b.n	8019df4 <uxr_receive_reliable_message+0x24>
 8019ece:	bf00      	nop

08019ed0 <uxr_next_input_reliable_buffer_available>:
 8019ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ed4:	4604      	mov	r4, r0
 8019ed6:	460f      	mov	r7, r1
 8019ed8:	8980      	ldrh	r0, [r0, #12]
 8019eda:	2101      	movs	r1, #1
 8019edc:	4690      	mov	r8, r2
 8019ede:	f000 fd53 	bl	801a988 <uxr_seq_num_add>
 8019ee2:	8922      	ldrh	r2, [r4, #8]
 8019ee4:	fbb0 f6f2 	udiv	r6, r0, r2
 8019ee8:	fb02 0616 	mls	r6, r2, r6, r0
 8019eec:	b2b6      	uxth	r6, r6
 8019eee:	6863      	ldr	r3, [r4, #4]
 8019ef0:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ef4:	fb06 f303 	mul.w	r3, r6, r3
 8019ef8:	6826      	ldr	r6, [r4, #0]
 8019efa:	3304      	adds	r3, #4
 8019efc:	441e      	add	r6, r3
 8019efe:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8019f02:	f1b9 0f00 	cmp.w	r9, #0
 8019f06:	d023      	beq.n	8019f50 <uxr_next_input_reliable_buffer_available+0x80>
 8019f08:	6923      	ldr	r3, [r4, #16]
 8019f0a:	4605      	mov	r5, r0
 8019f0c:	4630      	mov	r0, r6
 8019f0e:	4798      	blx	r3
 8019f10:	4682      	mov	sl, r0
 8019f12:	b300      	cbz	r0, 8019f56 <uxr_next_input_reliable_buffer_available+0x86>
 8019f14:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019f18:	2101      	movs	r1, #1
 8019f1a:	4650      	mov	r0, sl
 8019f1c:	f000 fd34 	bl	801a988 <uxr_seq_num_add>
 8019f20:	8921      	ldrh	r1, [r4, #8]
 8019f22:	fbb0 f2f1 	udiv	r2, r0, r1
 8019f26:	4682      	mov	sl, r0
 8019f28:	fb01 0212 	mls	r2, r1, r2, r0
 8019f2c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8019f30:	b292      	uxth	r2, r2
 8019f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8019f36:	fb02 f303 	mul.w	r3, r2, r3
 8019f3a:	3304      	adds	r3, #4
 8019f3c:	4418      	add	r0, r3
 8019f3e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019f42:	b12b      	cbz	r3, 8019f50 <uxr_next_input_reliable_buffer_available+0x80>
 8019f44:	6923      	ldr	r3, [r4, #16]
 8019f46:	4798      	blx	r3
 8019f48:	2802      	cmp	r0, #2
 8019f4a:	d01b      	beq.n	8019f84 <uxr_next_input_reliable_buffer_available+0xb4>
 8019f4c:	2801      	cmp	r0, #1
 8019f4e:	d0e3      	beq.n	8019f18 <uxr_next_input_reliable_buffer_available+0x48>
 8019f50:	2000      	movs	r0, #0
 8019f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f56:	464a      	mov	r2, r9
 8019f58:	4631      	mov	r1, r6
 8019f5a:	4638      	mov	r0, r7
 8019f5c:	f7f6 fb42 	bl	80105e4 <ucdr_init_buffer>
 8019f60:	8921      	ldrh	r1, [r4, #8]
 8019f62:	fbb5 f2f1 	udiv	r2, r5, r1
 8019f66:	fb01 5212 	mls	r2, r1, r2, r5
 8019f6a:	b292      	uxth	r2, r2
 8019f6c:	6863      	ldr	r3, [r4, #4]
 8019f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019f72:	fb02 f303 	mul.w	r3, r2, r3
 8019f76:	6822      	ldr	r2, [r4, #0]
 8019f78:	f842 a003 	str.w	sl, [r2, r3]
 8019f7c:	2001      	movs	r0, #1
 8019f7e:	81a5      	strh	r5, [r4, #12]
 8019f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f84:	8920      	ldrh	r0, [r4, #8]
 8019f86:	fbb5 f3f0 	udiv	r3, r5, r0
 8019f8a:	fb00 5513 	mls	r5, r0, r3, r5
 8019f8e:	b2ad      	uxth	r5, r5
 8019f90:	6863      	ldr	r3, [r4, #4]
 8019f92:	fbb3 f3f0 	udiv	r3, r3, r0
 8019f96:	fb03 f505 	mul.w	r5, r3, r5
 8019f9a:	6823      	ldr	r3, [r4, #0]
 8019f9c:	2000      	movs	r0, #0
 8019f9e:	5158      	str	r0, [r3, r5]
 8019fa0:	eb06 0108 	add.w	r1, r6, r8
 8019fa4:	eba9 0208 	sub.w	r2, r9, r8
 8019fa8:	4638      	mov	r0, r7
 8019faa:	f7f6 fb1b 	bl	80105e4 <ucdr_init_buffer>
 8019fae:	4638      	mov	r0, r7
 8019fb0:	4903      	ldr	r1, [pc, #12]	@ (8019fc0 <uxr_next_input_reliable_buffer_available+0xf0>)
 8019fb2:	4622      	mov	r2, r4
 8019fb4:	f7f6 faea 	bl	801058c <ucdr_set_on_full_buffer_callback>
 8019fb8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019fbc:	2001      	movs	r0, #1
 8019fbe:	e7c8      	b.n	8019f52 <uxr_next_input_reliable_buffer_available+0x82>
 8019fc0:	08019cc5 	.word	0x08019cc5

08019fc4 <uxr_process_heartbeat>:
 8019fc4:	b538      	push	{r3, r4, r5, lr}
 8019fc6:	4611      	mov	r1, r2
 8019fc8:	4604      	mov	r4, r0
 8019fca:	89c0      	ldrh	r0, [r0, #14]
 8019fcc:	4615      	mov	r5, r2
 8019fce:	f000 fce3 	bl	801a998 <uxr_seq_num_cmp>
 8019fd2:	2800      	cmp	r0, #0
 8019fd4:	bfb8      	it	lt
 8019fd6:	81e5      	strhlt	r5, [r4, #14]
 8019fd8:	bd38      	pop	{r3, r4, r5, pc}
 8019fda:	bf00      	nop

08019fdc <uxr_compute_acknack>:
 8019fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fe0:	8903      	ldrh	r3, [r0, #8]
 8019fe2:	8985      	ldrh	r5, [r0, #12]
 8019fe4:	4604      	mov	r4, r0
 8019fe6:	460e      	mov	r6, r1
 8019fe8:	b1d3      	cbz	r3, 801a020 <uxr_compute_acknack+0x44>
 8019fea:	4628      	mov	r0, r5
 8019fec:	2701      	movs	r7, #1
 8019fee:	e003      	b.n	8019ff8 <uxr_compute_acknack+0x1c>
 8019ff0:	4567      	cmp	r7, ip
 8019ff2:	d215      	bcs.n	801a020 <uxr_compute_acknack+0x44>
 8019ff4:	89a0      	ldrh	r0, [r4, #12]
 8019ff6:	3701      	adds	r7, #1
 8019ff8:	b2b9      	uxth	r1, r7
 8019ffa:	f000 fcc5 	bl	801a988 <uxr_seq_num_add>
 8019ffe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a002:	fbb0 f3fc 	udiv	r3, r0, ip
 801a006:	fb0c 0313 	mls	r3, ip, r3, r0
 801a00a:	b29a      	uxth	r2, r3
 801a00c:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a010:	fbb3 f3fc 	udiv	r3, r3, ip
 801a014:	fb02 f303 	mul.w	r3, r2, r3
 801a018:	58cb      	ldr	r3, [r1, r3]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d1e8      	bne.n	8019ff0 <uxr_compute_acknack+0x14>
 801a01e:	4605      	mov	r5, r0
 801a020:	8035      	strh	r5, [r6, #0]
 801a022:	2101      	movs	r1, #1
 801a024:	4628      	mov	r0, r5
 801a026:	89e7      	ldrh	r7, [r4, #14]
 801a028:	f000 fcb2 	bl	801a990 <uxr_seq_num_sub>
 801a02c:	4601      	mov	r1, r0
 801a02e:	4638      	mov	r0, r7
 801a030:	f000 fcae 	bl	801a990 <uxr_seq_num_sub>
 801a034:	4605      	mov	r5, r0
 801a036:	b318      	cbz	r0, 801a080 <uxr_compute_acknack+0xa4>
 801a038:	f04f 0900 	mov.w	r9, #0
 801a03c:	464f      	mov	r7, r9
 801a03e:	f04f 0801 	mov.w	r8, #1
 801a042:	fa1f f189 	uxth.w	r1, r9
 801a046:	8830      	ldrh	r0, [r6, #0]
 801a048:	f000 fc9e 	bl	801a988 <uxr_seq_num_add>
 801a04c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a050:	fbb0 f3fc 	udiv	r3, r0, ip
 801a054:	e9d4 1200 	ldrd	r1, r2, [r4]
 801a058:	fb03 001c 	mls	r0, r3, ip, r0
 801a05c:	b283      	uxth	r3, r0
 801a05e:	fbb2 f2fc 	udiv	r2, r2, ip
 801a062:	fb02 f303 	mul.w	r3, r2, r3
 801a066:	fa08 f209 	lsl.w	r2, r8, r9
 801a06a:	58cb      	ldr	r3, [r1, r3]
 801a06c:	f109 0901 	add.w	r9, r9, #1
 801a070:	b90b      	cbnz	r3, 801a076 <uxr_compute_acknack+0x9a>
 801a072:	4317      	orrs	r7, r2
 801a074:	b2bf      	uxth	r7, r7
 801a076:	454d      	cmp	r5, r9
 801a078:	d1e3      	bne.n	801a042 <uxr_compute_acknack+0x66>
 801a07a:	4638      	mov	r0, r7
 801a07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a080:	4607      	mov	r7, r0
 801a082:	4638      	mov	r0, r7
 801a084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a088 <uxr_init_output_best_effort_stream>:
 801a088:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a08c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a090:	6001      	str	r1, [r0, #0]
 801a092:	7303      	strb	r3, [r0, #12]
 801a094:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a098:	4770      	bx	lr
 801a09a:	bf00      	nop

0801a09c <uxr_reset_output_best_effort_stream>:
 801a09c:	7b02      	ldrb	r2, [r0, #12]
 801a09e:	6042      	str	r2, [r0, #4]
 801a0a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a0a4:	81c3      	strh	r3, [r0, #14]
 801a0a6:	4770      	bx	lr

0801a0a8 <uxr_prepare_best_effort_buffer_to_write>:
 801a0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0aa:	4604      	mov	r4, r0
 801a0ac:	b083      	sub	sp, #12
 801a0ae:	6840      	ldr	r0, [r0, #4]
 801a0b0:	460d      	mov	r5, r1
 801a0b2:	4616      	mov	r6, r2
 801a0b4:	f7f9 fe68 	bl	8013d88 <uxr_submessage_padding>
 801a0b8:	6863      	ldr	r3, [r4, #4]
 801a0ba:	4418      	add	r0, r3
 801a0bc:	68a3      	ldr	r3, [r4, #8]
 801a0be:	1942      	adds	r2, r0, r5
 801a0c0:	4293      	cmp	r3, r2
 801a0c2:	bf2c      	ite	cs
 801a0c4:	2701      	movcs	r7, #1
 801a0c6:	2700      	movcc	r7, #0
 801a0c8:	d202      	bcs.n	801a0d0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a0ca:	4638      	mov	r0, r7
 801a0cc:	b003      	add	sp, #12
 801a0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0d0:	9000      	str	r0, [sp, #0]
 801a0d2:	6821      	ldr	r1, [r4, #0]
 801a0d4:	4630      	mov	r0, r6
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	f7f6 fa72 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 801a0dc:	6861      	ldr	r1, [r4, #4]
 801a0de:	4638      	mov	r0, r7
 801a0e0:	4429      	add	r1, r5
 801a0e2:	6061      	str	r1, [r4, #4]
 801a0e4:	b003      	add	sp, #12
 801a0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a0e8 <uxr_prepare_best_effort_buffer_to_send>:
 801a0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0ec:	4604      	mov	r4, r0
 801a0ee:	461d      	mov	r5, r3
 801a0f0:	6840      	ldr	r0, [r0, #4]
 801a0f2:	7b23      	ldrb	r3, [r4, #12]
 801a0f4:	4298      	cmp	r0, r3
 801a0f6:	bf8c      	ite	hi
 801a0f8:	2601      	movhi	r6, #1
 801a0fa:	2600      	movls	r6, #0
 801a0fc:	d802      	bhi.n	801a104 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a0fe:	4630      	mov	r0, r6
 801a100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a104:	4688      	mov	r8, r1
 801a106:	89e0      	ldrh	r0, [r4, #14]
 801a108:	2101      	movs	r1, #1
 801a10a:	4617      	mov	r7, r2
 801a10c:	f000 fc3c 	bl	801a988 <uxr_seq_num_add>
 801a110:	6823      	ldr	r3, [r4, #0]
 801a112:	81e0      	strh	r0, [r4, #14]
 801a114:	8028      	strh	r0, [r5, #0]
 801a116:	f8c8 3000 	str.w	r3, [r8]
 801a11a:	6863      	ldr	r3, [r4, #4]
 801a11c:	603b      	str	r3, [r7, #0]
 801a11e:	7b23      	ldrb	r3, [r4, #12]
 801a120:	6063      	str	r3, [r4, #4]
 801a122:	4630      	mov	r0, r6
 801a124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a128 <on_full_output_buffer>:
 801a128:	b538      	push	{r3, r4, r5, lr}
 801a12a:	6802      	ldr	r2, [r0, #0]
 801a12c:	460c      	mov	r4, r1
 801a12e:	6809      	ldr	r1, [r1, #0]
 801a130:	8923      	ldrh	r3, [r4, #8]
 801a132:	eba2 0c01 	sub.w	ip, r2, r1
 801a136:	6862      	ldr	r2, [r4, #4]
 801a138:	fbb2 f2f3 	udiv	r2, r2, r3
 801a13c:	fbbc fcf2 	udiv	ip, ip, r2
 801a140:	f10c 0c01 	add.w	ip, ip, #1
 801a144:	fa1f fc8c 	uxth.w	ip, ip
 801a148:	fbbc fef3 	udiv	lr, ip, r3
 801a14c:	fb03 c31e 	mls	r3, r3, lr, ip
 801a150:	b29b      	uxth	r3, r3
 801a152:	fb02 f303 	mul.w	r3, r2, r3
 801a156:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a15a:	58ca      	ldr	r2, [r1, r3]
 801a15c:	4463      	add	r3, ip
 801a15e:	eba2 020c 	sub.w	r2, r2, ip
 801a162:	3308      	adds	r3, #8
 801a164:	4605      	mov	r5, r0
 801a166:	4419      	add	r1, r3
 801a168:	3a04      	subs	r2, #4
 801a16a:	6903      	ldr	r3, [r0, #16]
 801a16c:	f7f6 fa32 	bl	80105d4 <ucdr_init_buffer_origin>
 801a170:	4628      	mov	r0, r5
 801a172:	4903      	ldr	r1, [pc, #12]	@ (801a180 <on_full_output_buffer+0x58>)
 801a174:	4622      	mov	r2, r4
 801a176:	f7f6 fa09 	bl	801058c <ucdr_set_on_full_buffer_callback>
 801a17a:	2000      	movs	r0, #0
 801a17c:	bd38      	pop	{r3, r4, r5, pc}
 801a17e:	bf00      	nop
 801a180:	0801a129 	.word	0x0801a129

0801a184 <uxr_init_output_reliable_stream>:
 801a184:	b410      	push	{r4}
 801a186:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a18a:	8103      	strh	r3, [r0, #8]
 801a18c:	e9c0 1200 	strd	r1, r2, [r0]
 801a190:	f880 c00c 	strb.w	ip, [r0, #12]
 801a194:	b1d3      	cbz	r3, 801a1cc <uxr_init_output_reliable_stream+0x48>
 801a196:	f8c1 c000 	str.w	ip, [r1]
 801a19a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a19e:	f1bc 0f01 	cmp.w	ip, #1
 801a1a2:	d913      	bls.n	801a1cc <uxr_init_output_reliable_stream+0x48>
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	fbb3 f1fc 	udiv	r1, r3, ip
 801a1aa:	fb0c 3111 	mls	r1, ip, r1, r3
 801a1ae:	b289      	uxth	r1, r1
 801a1b0:	6842      	ldr	r2, [r0, #4]
 801a1b2:	6804      	ldr	r4, [r0, #0]
 801a1b4:	fbb2 f2fc 	udiv	r2, r2, ip
 801a1b8:	fb01 f202 	mul.w	r2, r1, r2
 801a1bc:	7b01      	ldrb	r1, [r0, #12]
 801a1be:	50a1      	str	r1, [r4, r2]
 801a1c0:	3301      	adds	r3, #1
 801a1c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a1c6:	b29b      	uxth	r3, r3
 801a1c8:	459c      	cmp	ip, r3
 801a1ca:	d8ec      	bhi.n	801a1a6 <uxr_init_output_reliable_stream+0x22>
 801a1cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a1d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a1d4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a1d8:	4905      	ldr	r1, [pc, #20]	@ (801a1f0 <uxr_init_output_reliable_stream+0x6c>)
 801a1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1de:	f8c0 100e 	str.w	r1, [r0, #14]
 801a1e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a1e6:	2300      	movs	r3, #0
 801a1e8:	8242      	strh	r2, [r0, #18]
 801a1ea:	8403      	strh	r3, [r0, #32]
 801a1ec:	4770      	bx	lr
 801a1ee:	bf00      	nop
 801a1f0:	ffff0000 	.word	0xffff0000

0801a1f4 <uxr_reset_output_reliable_stream>:
 801a1f4:	8901      	ldrh	r1, [r0, #8]
 801a1f6:	b1b1      	cbz	r1, 801a226 <uxr_reset_output_reliable_stream+0x32>
 801a1f8:	f04f 0c00 	mov.w	ip, #0
 801a1fc:	4663      	mov	r3, ip
 801a1fe:	fbb3 f2f1 	udiv	r2, r3, r1
 801a202:	fb01 3312 	mls	r3, r1, r2, r3
 801a206:	b29b      	uxth	r3, r3
 801a208:	6842      	ldr	r2, [r0, #4]
 801a20a:	fbb2 f2f1 	udiv	r2, r2, r1
 801a20e:	6801      	ldr	r1, [r0, #0]
 801a210:	fb02 f303 	mul.w	r3, r2, r3
 801a214:	7b02      	ldrb	r2, [r0, #12]
 801a216:	50ca      	str	r2, [r1, r3]
 801a218:	f10c 0c01 	add.w	ip, ip, #1
 801a21c:	8901      	ldrh	r1, [r0, #8]
 801a21e:	fa1f f38c 	uxth.w	r3, ip
 801a222:	4299      	cmp	r1, r3
 801a224:	d8eb      	bhi.n	801a1fe <uxr_reset_output_reliable_stream+0xa>
 801a226:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a22a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a22e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a232:	4904      	ldr	r1, [pc, #16]	@ (801a244 <uxr_reset_output_reliable_stream+0x50>)
 801a234:	f8c0 100e 	str.w	r1, [r0, #14]
 801a238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a23c:	2300      	movs	r3, #0
 801a23e:	8242      	strh	r2, [r0, #18]
 801a240:	8403      	strh	r3, [r0, #32]
 801a242:	4770      	bx	lr
 801a244:	ffff0000 	.word	0xffff0000

0801a248 <uxr_prepare_reliable_buffer_to_write>:
 801a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a24c:	4604      	mov	r4, r0
 801a24e:	b091      	sub	sp, #68	@ 0x44
 801a250:	8900      	ldrh	r0, [r0, #8]
 801a252:	89e6      	ldrh	r6, [r4, #14]
 801a254:	6823      	ldr	r3, [r4, #0]
 801a256:	9204      	str	r2, [sp, #16]
 801a258:	fbb6 f2f0 	udiv	r2, r6, r0
 801a25c:	fb00 6212 	mls	r2, r0, r2, r6
 801a260:	b292      	uxth	r2, r2
 801a262:	6865      	ldr	r5, [r4, #4]
 801a264:	fbb5 f5f0 	udiv	r5, r5, r0
 801a268:	fb05 3202 	mla	r2, r5, r2, r3
 801a26c:	3204      	adds	r2, #4
 801a26e:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801a272:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a276:	9203      	str	r2, [sp, #12]
 801a278:	468b      	mov	fp, r1
 801a27a:	1f2f      	subs	r7, r5, #4
 801a27c:	2800      	cmp	r0, #0
 801a27e:	f000 814c 	beq.w	801a51a <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a282:	f04f 0c00 	mov.w	ip, #0
 801a286:	46e2      	mov	sl, ip
 801a288:	4661      	mov	r1, ip
 801a28a:	fbb1 f2f0 	udiv	r2, r1, r0
 801a28e:	fb00 1212 	mls	r2, r0, r2, r1
 801a292:	b292      	uxth	r2, r2
 801a294:	fb05 f202 	mul.w	r2, r5, r2
 801a298:	f10c 0c01 	add.w	ip, ip, #1
 801a29c:	589a      	ldr	r2, [r3, r2]
 801a29e:	454a      	cmp	r2, r9
 801a2a0:	bf08      	it	eq
 801a2a2:	f10a 0a01 	addeq.w	sl, sl, #1
 801a2a6:	fa1f f18c 	uxth.w	r1, ip
 801a2aa:	bf08      	it	eq
 801a2ac:	fa1f fa8a 	uxtheq.w	sl, sl
 801a2b0:	4281      	cmp	r1, r0
 801a2b2:	d3ea      	bcc.n	801a28a <uxr_prepare_reliable_buffer_to_write+0x42>
 801a2b4:	4640      	mov	r0, r8
 801a2b6:	2104      	movs	r1, #4
 801a2b8:	f8cd a014 	str.w	sl, [sp, #20]
 801a2bc:	f7f6 f996 	bl	80105ec <ucdr_alignment>
 801a2c0:	4480      	add	r8, r0
 801a2c2:	eb08 020b 	add.w	r2, r8, fp
 801a2c6:	42ba      	cmp	r2, r7
 801a2c8:	f240 80cd 	bls.w	801a466 <uxr_prepare_reliable_buffer_to_write+0x21e>
 801a2cc:	7b22      	ldrb	r2, [r4, #12]
 801a2ce:	445a      	add	r2, fp
 801a2d0:	42ba      	cmp	r2, r7
 801a2d2:	f240 80b5 	bls.w	801a440 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801a2d6:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801a2da:	33fc      	adds	r3, #252	@ 0xfc
 801a2dc:	b2ba      	uxth	r2, r7
 801a2de:	4413      	add	r3, r2
 801a2e0:	b29b      	uxth	r3, r3
 801a2e2:	fb0a f903 	mul.w	r9, sl, r3
 801a2e6:	45d9      	cmp	r9, fp
 801a2e8:	9305      	str	r3, [sp, #20]
 801a2ea:	9306      	str	r3, [sp, #24]
 801a2ec:	f0c0 80b7 	bcc.w	801a45e <uxr_prepare_reliable_buffer_to_write+0x216>
 801a2f0:	f108 0304 	add.w	r3, r8, #4
 801a2f4:	42bb      	cmp	r3, r7
 801a2f6:	f080 80db 	bcs.w	801a4b0 <uxr_prepare_reliable_buffer_to_write+0x268>
 801a2fa:	f1a2 0904 	sub.w	r9, r2, #4
 801a2fe:	eba9 0908 	sub.w	r9, r9, r8
 801a302:	9b05      	ldr	r3, [sp, #20]
 801a304:	fa1f f989 	uxth.w	r9, r9
 801a308:	ebab 0b09 	sub.w	fp, fp, r9
 801a30c:	fbbb f2f3 	udiv	r2, fp, r3
 801a310:	fb03 b312 	mls	r3, r3, r2, fp
 801a314:	2b00      	cmp	r3, #0
 801a316:	f000 80c8 	beq.w	801a4aa <uxr_prepare_reliable_buffer_to_write+0x262>
 801a31a:	3201      	adds	r2, #1
 801a31c:	b292      	uxth	r2, r2
 801a31e:	9306      	str	r3, [sp, #24]
 801a320:	4552      	cmp	r2, sl
 801a322:	f200 809c 	bhi.w	801a45e <uxr_prepare_reliable_buffer_to_write+0x216>
 801a326:	f10d 0b20 	add.w	fp, sp, #32
 801a32a:	2a00      	cmp	r2, #0
 801a32c:	d042      	beq.n	801a3b4 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801a32e:	f8cd 801c 	str.w	r8, [sp, #28]
 801a332:	f04f 0a00 	mov.w	sl, #0
 801a336:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a33a:	9505      	str	r5, [sp, #20]
 801a33c:	f10d 0b20 	add.w	fp, sp, #32
 801a340:	4615      	mov	r5, r2
 801a342:	e000      	b.n	801a346 <uxr_prepare_reliable_buffer_to_write+0xfe>
 801a344:	46c1      	mov	r9, r8
 801a346:	8920      	ldrh	r0, [r4, #8]
 801a348:	fbb6 f2f0 	udiv	r2, r6, r0
 801a34c:	fb00 6112 	mls	r1, r0, r2, r6
 801a350:	b28a      	uxth	r2, r1
 801a352:	6863      	ldr	r3, [r4, #4]
 801a354:	fbb3 f1f0 	udiv	r1, r3, r0
 801a358:	6823      	ldr	r3, [r4, #0]
 801a35a:	fb02 f101 	mul.w	r1, r2, r1
 801a35e:	3104      	adds	r1, #4
 801a360:	4419      	add	r1, r3
 801a362:	4658      	mov	r0, fp
 801a364:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a368:	9200      	str	r2, [sp, #0]
 801a36a:	2300      	movs	r3, #0
 801a36c:	463a      	mov	r2, r7
 801a36e:	f7f6 f927 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 801a372:	464a      	mov	r2, r9
 801a374:	2300      	movs	r3, #0
 801a376:	210d      	movs	r1, #13
 801a378:	4658      	mov	r0, fp
 801a37a:	f7f9 fcc5 	bl	8013d08 <uxr_buffer_submessage_header>
 801a37e:	8921      	ldrh	r1, [r4, #8]
 801a380:	fbb6 f2f1 	udiv	r2, r6, r1
 801a384:	fb01 6212 	mls	r2, r1, r2, r6
 801a388:	b292      	uxth	r2, r2
 801a38a:	6863      	ldr	r3, [r4, #4]
 801a38c:	fbb3 f3f1 	udiv	r3, r3, r1
 801a390:	fb02 f303 	mul.w	r3, r2, r3
 801a394:	6822      	ldr	r2, [r4, #0]
 801a396:	4630      	mov	r0, r6
 801a398:	50d7      	str	r7, [r2, r3]
 801a39a:	2101      	movs	r1, #1
 801a39c:	f000 faf4 	bl	801a988 <uxr_seq_num_add>
 801a3a0:	f10a 0a01 	add.w	sl, sl, #1
 801a3a4:	fa1f f38a 	uxth.w	r3, sl
 801a3a8:	429d      	cmp	r5, r3
 801a3aa:	4606      	mov	r6, r0
 801a3ac:	d8ca      	bhi.n	801a344 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801a3ae:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a3b2:	9d05      	ldr	r5, [sp, #20]
 801a3b4:	8920      	ldrh	r0, [r4, #8]
 801a3b6:	fbb6 f3f0 	udiv	r3, r6, r0
 801a3ba:	fb00 6313 	mls	r3, r0, r3, r6
 801a3be:	b299      	uxth	r1, r3
 801a3c0:	6863      	ldr	r3, [r4, #4]
 801a3c2:	fbb3 f3f0 	udiv	r3, r3, r0
 801a3c6:	fb01 f303 	mul.w	r3, r1, r3
 801a3ca:	6821      	ldr	r1, [r4, #0]
 801a3cc:	3304      	adds	r3, #4
 801a3ce:	4419      	add	r1, r3
 801a3d0:	463a      	mov	r2, r7
 801a3d2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a3d6:	9000      	str	r0, [sp, #0]
 801a3d8:	2300      	movs	r3, #0
 801a3da:	4658      	mov	r0, fp
 801a3dc:	f7f6 f8f0 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 801a3e0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801a3e4:	4658      	mov	r0, fp
 801a3e6:	fa1f f289 	uxth.w	r2, r9
 801a3ea:	2302      	movs	r3, #2
 801a3ec:	210d      	movs	r1, #13
 801a3ee:	f7f9 fc8b 	bl	8013d08 <uxr_buffer_submessage_header>
 801a3f2:	9b03      	ldr	r3, [sp, #12]
 801a3f4:	8927      	ldrh	r7, [r4, #8]
 801a3f6:	7b20      	ldrb	r0, [r4, #12]
 801a3f8:	f108 0104 	add.w	r1, r8, #4
 801a3fc:	440b      	add	r3, r1
 801a3fe:	4619      	mov	r1, r3
 801a400:	fbb6 f3f7 	udiv	r3, r6, r7
 801a404:	fb07 6313 	mls	r3, r7, r3, r6
 801a408:	f1a5 0208 	sub.w	r2, r5, #8
 801a40c:	b29d      	uxth	r5, r3
 801a40e:	3004      	adds	r0, #4
 801a410:	6863      	ldr	r3, [r4, #4]
 801a412:	fbb3 f3f7 	udiv	r3, r3, r7
 801a416:	fb05 f303 	mul.w	r3, r5, r3
 801a41a:	6825      	ldr	r5, [r4, #0]
 801a41c:	4448      	add	r0, r9
 801a41e:	50e8      	str	r0, [r5, r3]
 801a420:	9d04      	ldr	r5, [sp, #16]
 801a422:	eba2 0208 	sub.w	r2, r2, r8
 801a426:	4628      	mov	r0, r5
 801a428:	f7f6 f8dc 	bl	80105e4 <ucdr_init_buffer>
 801a42c:	4628      	mov	r0, r5
 801a42e:	493c      	ldr	r1, [pc, #240]	@ (801a520 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a430:	4622      	mov	r2, r4
 801a432:	f7f6 f8ab 	bl	801058c <ucdr_set_on_full_buffer_callback>
 801a436:	2001      	movs	r0, #1
 801a438:	81e6      	strh	r6, [r4, #14]
 801a43a:	b011      	add	sp, #68	@ 0x44
 801a43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a440:	2101      	movs	r1, #1
 801a442:	89e0      	ldrh	r0, [r4, #14]
 801a444:	f000 faa0 	bl	801a988 <uxr_seq_num_add>
 801a448:	8921      	ldrh	r1, [r4, #8]
 801a44a:	4605      	mov	r5, r0
 801a44c:	8a60      	ldrh	r0, [r4, #18]
 801a44e:	f000 fa9b 	bl	801a988 <uxr_seq_num_add>
 801a452:	4601      	mov	r1, r0
 801a454:	4628      	mov	r0, r5
 801a456:	f000 fa9f 	bl	801a998 <uxr_seq_num_cmp>
 801a45a:	2800      	cmp	r0, #0
 801a45c:	dd42      	ble.n	801a4e4 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801a45e:	2000      	movs	r0, #0
 801a460:	b011      	add	sp, #68	@ 0x44
 801a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a466:	8921      	ldrh	r1, [r4, #8]
 801a468:	8a60      	ldrh	r0, [r4, #18]
 801a46a:	9205      	str	r2, [sp, #20]
 801a46c:	f000 fa8c 	bl	801a988 <uxr_seq_num_add>
 801a470:	4601      	mov	r1, r0
 801a472:	4630      	mov	r0, r6
 801a474:	f000 fa90 	bl	801a998 <uxr_seq_num_cmp>
 801a478:	2800      	cmp	r0, #0
 801a47a:	9a05      	ldr	r2, [sp, #20]
 801a47c:	dcef      	bgt.n	801a45e <uxr_prepare_reliable_buffer_to_write+0x216>
 801a47e:	8927      	ldrh	r7, [r4, #8]
 801a480:	fbb6 f3f7 	udiv	r3, r6, r7
 801a484:	fb07 6313 	mls	r3, r7, r3, r6
 801a488:	b29d      	uxth	r5, r3
 801a48a:	6863      	ldr	r3, [r4, #4]
 801a48c:	6824      	ldr	r4, [r4, #0]
 801a48e:	fbb3 f3f7 	udiv	r3, r3, r7
 801a492:	fb05 f303 	mul.w	r3, r5, r3
 801a496:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a49a:	50e2      	str	r2, [r4, r3]
 801a49c:	2300      	movs	r3, #0
 801a49e:	f8cd 8000 	str.w	r8, [sp]
 801a4a2:	f7f6 f88d 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 801a4a6:	2001      	movs	r0, #1
 801a4a8:	e7da      	b.n	801a460 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a4aa:	b293      	uxth	r3, r2
 801a4ac:	461a      	mov	r2, r3
 801a4ae:	e737      	b.n	801a320 <uxr_prepare_reliable_buffer_to_write+0xd8>
 801a4b0:	4630      	mov	r0, r6
 801a4b2:	2101      	movs	r1, #1
 801a4b4:	9207      	str	r2, [sp, #28]
 801a4b6:	f000 fa67 	bl	801a988 <uxr_seq_num_add>
 801a4ba:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a4be:	fbb0 f1fc 	udiv	r1, r0, ip
 801a4c2:	fb0c 0111 	mls	r1, ip, r1, r0
 801a4c6:	4606      	mov	r6, r0
 801a4c8:	b288      	uxth	r0, r1
 801a4ca:	6863      	ldr	r3, [r4, #4]
 801a4cc:	fbb3 f1fc 	udiv	r1, r3, ip
 801a4d0:	6823      	ldr	r3, [r4, #0]
 801a4d2:	9a07      	ldr	r2, [sp, #28]
 801a4d4:	fb00 f101 	mul.w	r1, r0, r1
 801a4d8:	3104      	adds	r1, #4
 801a4da:	440b      	add	r3, r1
 801a4dc:	9303      	str	r3, [sp, #12]
 801a4de:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a4e2:	e70a      	b.n	801a2fa <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a4e4:	8921      	ldrh	r1, [r4, #8]
 801a4e6:	fbb5 f3f1 	udiv	r3, r5, r1
 801a4ea:	fb01 5313 	mls	r3, r1, r3, r5
 801a4ee:	b29a      	uxth	r2, r3
 801a4f0:	6863      	ldr	r3, [r4, #4]
 801a4f2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a4f6:	6821      	ldr	r1, [r4, #0]
 801a4f8:	9804      	ldr	r0, [sp, #16]
 801a4fa:	fb02 f303 	mul.w	r3, r2, r3
 801a4fe:	3304      	adds	r3, #4
 801a500:	7b22      	ldrb	r2, [r4, #12]
 801a502:	4419      	add	r1, r3
 801a504:	445a      	add	r2, fp
 801a506:	f841 2c04 	str.w	r2, [r1, #-4]
 801a50a:	7b23      	ldrb	r3, [r4, #12]
 801a50c:	9300      	str	r3, [sp, #0]
 801a50e:	2300      	movs	r3, #0
 801a510:	f7f6 f856 	bl	80105c0 <ucdr_init_buffer_origin_offset>
 801a514:	81e5      	strh	r5, [r4, #14]
 801a516:	2001      	movs	r0, #1
 801a518:	e7a2      	b.n	801a460 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a51a:	4682      	mov	sl, r0
 801a51c:	e6ca      	b.n	801a2b4 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801a51e:	bf00      	nop
 801a520:	0801a129 	.word	0x0801a129

0801a524 <uxr_prepare_next_reliable_buffer_to_send>:
 801a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a526:	4604      	mov	r4, r0
 801a528:	460f      	mov	r7, r1
 801a52a:	8a00      	ldrh	r0, [r0, #16]
 801a52c:	2101      	movs	r1, #1
 801a52e:	4616      	mov	r6, r2
 801a530:	461d      	mov	r5, r3
 801a532:	f000 fa29 	bl	801a988 <uxr_seq_num_add>
 801a536:	8028      	strh	r0, [r5, #0]
 801a538:	8922      	ldrh	r2, [r4, #8]
 801a53a:	fbb0 f3f2 	udiv	r3, r0, r2
 801a53e:	fb02 0c13 	mls	ip, r2, r3, r0
 801a542:	fa1f fc8c 	uxth.w	ip, ip
 801a546:	6863      	ldr	r3, [r4, #4]
 801a548:	fbb3 f3f2 	udiv	r3, r3, r2
 801a54c:	fb0c fc03 	mul.w	ip, ip, r3
 801a550:	6823      	ldr	r3, [r4, #0]
 801a552:	89e1      	ldrh	r1, [r4, #14]
 801a554:	f10c 0c04 	add.w	ip, ip, #4
 801a558:	4463      	add	r3, ip
 801a55a:	603b      	str	r3, [r7, #0]
 801a55c:	6823      	ldr	r3, [r4, #0]
 801a55e:	449c      	add	ip, r3
 801a560:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a564:	6033      	str	r3, [r6, #0]
 801a566:	f000 fa17 	bl	801a998 <uxr_seq_num_cmp>
 801a56a:	2800      	cmp	r0, #0
 801a56c:	dd01      	ble.n	801a572 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a56e:	2000      	movs	r0, #0
 801a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a572:	7b23      	ldrb	r3, [r4, #12]
 801a574:	6832      	ldr	r2, [r6, #0]
 801a576:	429a      	cmp	r2, r3
 801a578:	d9f9      	bls.n	801a56e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a57a:	8a61      	ldrh	r1, [r4, #18]
 801a57c:	8a20      	ldrh	r0, [r4, #16]
 801a57e:	f000 fa07 	bl	801a990 <uxr_seq_num_sub>
 801a582:	8923      	ldrh	r3, [r4, #8]
 801a584:	4283      	cmp	r3, r0
 801a586:	d0f2      	beq.n	801a56e <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a588:	8828      	ldrh	r0, [r5, #0]
 801a58a:	89e3      	ldrh	r3, [r4, #14]
 801a58c:	8220      	strh	r0, [r4, #16]
 801a58e:	4298      	cmp	r0, r3
 801a590:	d001      	beq.n	801a596 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a592:	2001      	movs	r0, #1
 801a594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a596:	2101      	movs	r1, #1
 801a598:	f000 f9f6 	bl	801a988 <uxr_seq_num_add>
 801a59c:	81e0      	strh	r0, [r4, #14]
 801a59e:	2001      	movs	r0, #1
 801a5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5a2:	bf00      	nop

0801a5a4 <uxr_update_output_stream_heartbeat_timestamp>:
 801a5a4:	b570      	push	{r4, r5, r6, lr}
 801a5a6:	8a01      	ldrh	r1, [r0, #16]
 801a5a8:	4604      	mov	r4, r0
 801a5aa:	8a40      	ldrh	r0, [r0, #18]
 801a5ac:	4615      	mov	r5, r2
 801a5ae:	461e      	mov	r6, r3
 801a5b0:	f000 f9f2 	bl	801a998 <uxr_seq_num_cmp>
 801a5b4:	2800      	cmp	r0, #0
 801a5b6:	db07      	blt.n	801a5c8 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a5b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a5bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a5c0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a5c4:	2000      	movs	r0, #0
 801a5c6:	bd70      	pop	{r4, r5, r6, pc}
 801a5c8:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a5cc:	b940      	cbnz	r0, 801a5e0 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a5ce:	2301      	movs	r3, #1
 801a5d0:	f884 3020 	strb.w	r3, [r4, #32]
 801a5d4:	3564      	adds	r5, #100	@ 0x64
 801a5d6:	f146 0600 	adc.w	r6, r6, #0
 801a5da:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a5de:	bd70      	pop	{r4, r5, r6, pc}
 801a5e0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a5e4:	4295      	cmp	r5, r2
 801a5e6:	eb76 0303 	sbcs.w	r3, r6, r3
 801a5ea:	bfa5      	ittet	ge
 801a5ec:	3001      	addge	r0, #1
 801a5ee:	f884 0020 	strbge.w	r0, [r4, #32]
 801a5f2:	2000      	movlt	r0, #0
 801a5f4:	2001      	movge	r0, #1
 801a5f6:	e7ed      	b.n	801a5d4 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801a5f8 <uxr_begin_output_nack_buffer_it>:
 801a5f8:	8a40      	ldrh	r0, [r0, #18]
 801a5fa:	4770      	bx	lr

0801a5fc <uxr_next_reliable_nack_buffer_to_send>:
 801a5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a600:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801a604:	b082      	sub	sp, #8
 801a606:	f1b8 0f00 	cmp.w	r8, #0
 801a60a:	d011      	beq.n	801a630 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801a60c:	4604      	mov	r4, r0
 801a60e:	8818      	ldrh	r0, [r3, #0]
 801a610:	460e      	mov	r6, r1
 801a612:	4617      	mov	r7, r2
 801a614:	461d      	mov	r5, r3
 801a616:	2101      	movs	r1, #1
 801a618:	f000 f9b6 	bl	801a988 <uxr_seq_num_add>
 801a61c:	8028      	strh	r0, [r5, #0]
 801a61e:	8a21      	ldrh	r1, [r4, #16]
 801a620:	f000 f9ba 	bl	801a998 <uxr_seq_num_cmp>
 801a624:	2800      	cmp	r0, #0
 801a626:	dd07      	ble.n	801a638 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801a628:	f04f 0800 	mov.w	r8, #0
 801a62c:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801a630:	4640      	mov	r0, r8
 801a632:	b002      	add	sp, #8
 801a634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a638:	8921      	ldrh	r1, [r4, #8]
 801a63a:	8828      	ldrh	r0, [r5, #0]
 801a63c:	6823      	ldr	r3, [r4, #0]
 801a63e:	fbb0 f2f1 	udiv	r2, r0, r1
 801a642:	fb01 0c12 	mls	ip, r1, r2, r0
 801a646:	fa1f f28c 	uxth.w	r2, ip
 801a64a:	9301      	str	r3, [sp, #4]
 801a64c:	6863      	ldr	r3, [r4, #4]
 801a64e:	fbb3 fcf1 	udiv	ip, r3, r1
 801a652:	9b01      	ldr	r3, [sp, #4]
 801a654:	fb02 fc0c 	mul.w	ip, r2, ip
 801a658:	f10c 0c04 	add.w	ip, ip, #4
 801a65c:	4463      	add	r3, ip
 801a65e:	6033      	str	r3, [r6, #0]
 801a660:	6823      	ldr	r3, [r4, #0]
 801a662:	4463      	add	r3, ip
 801a664:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a668:	603b      	str	r3, [r7, #0]
 801a66a:	7b22      	ldrb	r2, [r4, #12]
 801a66c:	429a      	cmp	r2, r3
 801a66e:	d0d2      	beq.n	801a616 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801a670:	4640      	mov	r0, r8
 801a672:	b002      	add	sp, #8
 801a674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a678 <uxr_process_acknack>:
 801a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a67a:	4604      	mov	r4, r0
 801a67c:	460e      	mov	r6, r1
 801a67e:	4610      	mov	r0, r2
 801a680:	2101      	movs	r1, #1
 801a682:	f000 f985 	bl	801a990 <uxr_seq_num_sub>
 801a686:	8a61      	ldrh	r1, [r4, #18]
 801a688:	f000 f982 	bl	801a990 <uxr_seq_num_sub>
 801a68c:	b1c0      	cbz	r0, 801a6c0 <uxr_process_acknack+0x48>
 801a68e:	4605      	mov	r5, r0
 801a690:	2700      	movs	r7, #0
 801a692:	2101      	movs	r1, #1
 801a694:	8a60      	ldrh	r0, [r4, #18]
 801a696:	f000 f977 	bl	801a988 <uxr_seq_num_add>
 801a69a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a69e:	fbb0 f1fc 	udiv	r1, r0, ip
 801a6a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a6a6:	fb0c 0111 	mls	r1, ip, r1, r0
 801a6aa:	b289      	uxth	r1, r1
 801a6ac:	3701      	adds	r7, #1
 801a6ae:	fbb3 f3fc 	udiv	r3, r3, ip
 801a6b2:	fb01 f303 	mul.w	r3, r1, r3
 801a6b6:	42bd      	cmp	r5, r7
 801a6b8:	7b21      	ldrb	r1, [r4, #12]
 801a6ba:	8260      	strh	r0, [r4, #18]
 801a6bc:	50d1      	str	r1, [r2, r3]
 801a6be:	d1e8      	bne.n	801a692 <uxr_process_acknack+0x1a>
 801a6c0:	3e00      	subs	r6, #0
 801a6c2:	f04f 0300 	mov.w	r3, #0
 801a6c6:	bf18      	it	ne
 801a6c8:	2601      	movne	r6, #1
 801a6ca:	f884 3020 	strb.w	r3, [r4, #32]
 801a6ce:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a6d4 <uxr_is_output_up_to_date>:
 801a6d4:	8a01      	ldrh	r1, [r0, #16]
 801a6d6:	8a40      	ldrh	r0, [r0, #18]
 801a6d8:	b508      	push	{r3, lr}
 801a6da:	f000 f95d 	bl	801a998 <uxr_seq_num_cmp>
 801a6de:	fab0 f080 	clz	r0, r0
 801a6e2:	0940      	lsrs	r0, r0, #5
 801a6e4:	bd08      	pop	{r3, pc}
 801a6e6:	bf00      	nop

0801a6e8 <get_available_free_slots>:
 801a6e8:	8902      	ldrh	r2, [r0, #8]
 801a6ea:	b1da      	cbz	r2, 801a724 <get_available_free_slots+0x3c>
 801a6ec:	b530      	push	{r4, r5, lr}
 801a6ee:	2100      	movs	r1, #0
 801a6f0:	6843      	ldr	r3, [r0, #4]
 801a6f2:	6805      	ldr	r5, [r0, #0]
 801a6f4:	7b04      	ldrb	r4, [r0, #12]
 801a6f6:	fbb3 fef2 	udiv	lr, r3, r2
 801a6fa:	4608      	mov	r0, r1
 801a6fc:	460b      	mov	r3, r1
 801a6fe:	fbb3 fcf2 	udiv	ip, r3, r2
 801a702:	fb02 331c 	mls	r3, r2, ip, r3
 801a706:	b29b      	uxth	r3, r3
 801a708:	fb0e f303 	mul.w	r3, lr, r3
 801a70c:	3101      	adds	r1, #1
 801a70e:	f855 c003 	ldr.w	ip, [r5, r3]
 801a712:	4564      	cmp	r4, ip
 801a714:	bf08      	it	eq
 801a716:	3001      	addeq	r0, #1
 801a718:	b28b      	uxth	r3, r1
 801a71a:	bf08      	it	eq
 801a71c:	b280      	uxtheq	r0, r0
 801a71e:	4293      	cmp	r3, r2
 801a720:	d3ed      	bcc.n	801a6fe <get_available_free_slots+0x16>
 801a722:	bd30      	pop	{r4, r5, pc}
 801a724:	4610      	mov	r0, r2
 801a726:	4770      	bx	lr

0801a728 <uxr_buffer_request_data>:
 801a728:	b530      	push	{r4, r5, lr}
 801a72a:	b095      	sub	sp, #84	@ 0x54
 801a72c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801a730:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801a732:	9303      	str	r3, [sp, #12]
 801a734:	2200      	movs	r2, #0
 801a736:	2d00      	cmp	r5, #0
 801a738:	bf14      	ite	ne
 801a73a:	2101      	movne	r1, #1
 801a73c:	4611      	moveq	r1, r2
 801a73e:	4604      	mov	r4, r0
 801a740:	f88d 301c 	strb.w	r3, [sp, #28]
 801a744:	f88d 201d 	strb.w	r2, [sp, #29]
 801a748:	f88d 201e 	strb.w	r2, [sp, #30]
 801a74c:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a750:	d021      	beq.n	801a796 <uxr_buffer_request_data+0x6e>
 801a752:	682a      	ldr	r2, [r5, #0]
 801a754:	686b      	ldr	r3, [r5, #4]
 801a756:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801a75a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801a75e:	2210      	movs	r2, #16
 801a760:	2308      	movs	r3, #8
 801a762:	2100      	movs	r1, #0
 801a764:	e9cd 3100 	strd	r3, r1, [sp]
 801a768:	4620      	mov	r0, r4
 801a76a:	9905      	ldr	r1, [sp, #20]
 801a76c:	ab0c      	add	r3, sp, #48	@ 0x30
 801a76e:	f7f9 f82d 	bl	80137cc <uxr_prepare_stream_to_write_submessage>
 801a772:	b918      	cbnz	r0, 801a77c <uxr_buffer_request_data+0x54>
 801a774:	4604      	mov	r4, r0
 801a776:	4620      	mov	r0, r4
 801a778:	b015      	add	sp, #84	@ 0x54
 801a77a:	bd30      	pop	{r4, r5, pc}
 801a77c:	9904      	ldr	r1, [sp, #16]
 801a77e:	aa06      	add	r2, sp, #24
 801a780:	4620      	mov	r0, r4
 801a782:	f7f9 f959 	bl	8013a38 <uxr_init_base_object_request>
 801a786:	a906      	add	r1, sp, #24
 801a788:	4604      	mov	r4, r0
 801a78a:	a80c      	add	r0, sp, #48	@ 0x30
 801a78c:	f7fa fc54 	bl	8015038 <uxr_serialize_READ_DATA_Payload>
 801a790:	4620      	mov	r0, r4
 801a792:	b015      	add	sp, #84	@ 0x54
 801a794:	bd30      	pop	{r4, r5, pc}
 801a796:	2208      	movs	r2, #8
 801a798:	e7e2      	b.n	801a760 <uxr_buffer_request_data+0x38>
 801a79a:	bf00      	nop

0801a79c <uxr_buffer_cancel_data>:
 801a79c:	b510      	push	{r4, lr}
 801a79e:	b094      	sub	sp, #80	@ 0x50
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	9202      	str	r2, [sp, #8]
 801a7a4:	9205      	str	r2, [sp, #20]
 801a7a6:	9301      	str	r3, [sp, #4]
 801a7a8:	2201      	movs	r2, #1
 801a7aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a7ae:	f88d 301e 	strb.w	r3, [sp, #30]
 801a7b2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801a7b6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801a7ba:	2308      	movs	r3, #8
 801a7bc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801a7c0:	9300      	str	r3, [sp, #0]
 801a7c2:	2210      	movs	r2, #16
 801a7c4:	ab0c      	add	r3, sp, #48	@ 0x30
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	9103      	str	r1, [sp, #12]
 801a7ca:	f7f8 ffff 	bl	80137cc <uxr_prepare_stream_to_write_submessage>
 801a7ce:	b918      	cbnz	r0, 801a7d8 <uxr_buffer_cancel_data+0x3c>
 801a7d0:	4604      	mov	r4, r0
 801a7d2:	4620      	mov	r0, r4
 801a7d4:	b014      	add	sp, #80	@ 0x50
 801a7d6:	bd10      	pop	{r4, pc}
 801a7d8:	9905      	ldr	r1, [sp, #20]
 801a7da:	aa06      	add	r2, sp, #24
 801a7dc:	4620      	mov	r0, r4
 801a7de:	f7f9 f92b 	bl	8013a38 <uxr_init_base_object_request>
 801a7e2:	a906      	add	r1, sp, #24
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	a80c      	add	r0, sp, #48	@ 0x30
 801a7e8:	f7fa fc26 	bl	8015038 <uxr_serialize_READ_DATA_Payload>
 801a7ec:	4620      	mov	r0, r4
 801a7ee:	b014      	add	sp, #80	@ 0x50
 801a7f0:	bd10      	pop	{r4, pc}
 801a7f2:	bf00      	nop

0801a7f4 <read_submessage_format>:
 801a7f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a7f8:	b095      	sub	sp, #84	@ 0x54
 801a7fa:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801a7fe:	b113      	cbz	r3, 801a806 <read_submessage_format+0x12>
 801a800:	b015      	add	sp, #84	@ 0x54
 801a802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a806:	460c      	mov	r4, r1
 801a808:	4615      	mov	r5, r2
 801a80a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801a80e:	4607      	mov	r7, r0
 801a810:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801a812:	9004      	str	r0, [sp, #16]
 801a814:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801a816:	9005      	str	r0, [sp, #20]
 801a818:	1a52      	subs	r2, r2, r1
 801a81a:	a80c      	add	r0, sp, #48	@ 0x30
 801a81c:	4699      	mov	r9, r3
 801a81e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801a822:	f7f5 fedf 	bl	80105e4 <ucdr_init_buffer>
 801a826:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a82a:	a80c      	add	r0, sp, #48	@ 0x30
 801a82c:	f7f5 feae 	bl	801058c <ucdr_set_on_full_buffer_callback>
 801a830:	69e2      	ldr	r2, [r4, #28]
 801a832:	b19a      	cbz	r2, 801a85c <read_submessage_format+0x68>
 801a834:	f1b8 0f07 	cmp.w	r8, #7
 801a838:	f882 9014 	strb.w	r9, [r2, #20]
 801a83c:	d040      	beq.n	801a8c0 <read_submessage_format+0xcc>
 801a83e:	f1b8 0f08 	cmp.w	r8, #8
 801a842:	d02e      	beq.n	801a8a2 <read_submessage_format+0xae>
 801a844:	f1b8 0f06 	cmp.w	r8, #6
 801a848:	d011      	beq.n	801a86e <read_submessage_format+0x7a>
 801a84a:	2301      	movs	r3, #1
 801a84c:	7513      	strb	r3, [r2, #20]
 801a84e:	4629      	mov	r1, r5
 801a850:	4620      	mov	r0, r4
 801a852:	f7f5 ff17 	bl	8010684 <ucdr_advance_buffer>
 801a856:	b015      	add	sp, #84	@ 0x54
 801a858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a85c:	f1b8 0f07 	cmp.w	r8, #7
 801a860:	d02e      	beq.n	801a8c0 <read_submessage_format+0xcc>
 801a862:	f1b8 0f08 	cmp.w	r8, #8
 801a866:	d01c      	beq.n	801a8a2 <read_submessage_format+0xae>
 801a868:	f1b8 0f06 	cmp.w	r8, #6
 801a86c:	d1ef      	bne.n	801a84e <read_submessage_format+0x5a>
 801a86e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801a872:	f1b8 0f00 	cmp.w	r8, #0
 801a876:	d011      	beq.n	801a89c <read_submessage_format+0xa8>
 801a878:	ab0c      	add	r3, sp, #48	@ 0x30
 801a87a:	e9cd 3500 	strd	r3, r5, [sp]
 801a87e:	2306      	movs	r3, #6
 801a880:	f88d 3016 	strb.w	r3, [sp, #22]
 801a884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a888:	9302      	str	r3, [sp, #8]
 801a88a:	4632      	mov	r2, r6
 801a88c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801a890:	4638      	mov	r0, r7
 801a892:	47c0      	blx	r8
 801a894:	2301      	movs	r3, #1
 801a896:	69e2      	ldr	r2, [r4, #28]
 801a898:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801a89c:	2a00      	cmp	r2, #0
 801a89e:	d1d4      	bne.n	801a84a <read_submessage_format+0x56>
 801a8a0:	e7d5      	b.n	801a84e <read_submessage_format+0x5a>
 801a8a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d0f8      	beq.n	801a89c <read_submessage_format+0xa8>
 801a8aa:	a906      	add	r1, sp, #24
 801a8ac:	a80c      	add	r0, sp, #48	@ 0x30
 801a8ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801a8b2:	f7fa fc87 	bl	80151c4 <uxr_deserialize_SampleIdentity>
 801a8b6:	b9a0      	cbnz	r0, 801a8e2 <read_submessage_format+0xee>
 801a8b8:	69e2      	ldr	r2, [r4, #28]
 801a8ba:	2a00      	cmp	r2, #0
 801a8bc:	d1c5      	bne.n	801a84a <read_submessage_format+0x56>
 801a8be:	e7c6      	b.n	801a84e <read_submessage_format+0x5a>
 801a8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a8c4:	b13b      	cbz	r3, 801a8d6 <read_submessage_format+0xe2>
 801a8c6:	a906      	add	r1, sp, #24
 801a8c8:	a80c      	add	r0, sp, #48	@ 0x30
 801a8ca:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801a8ce:	f7fa f94d 	bl	8014b6c <uxr_deserialize_BaseObjectRequest>
 801a8d2:	bb60      	cbnz	r0, 801a92e <read_submessage_format+0x13a>
 801a8d4:	69e2      	ldr	r2, [r4, #28]
 801a8d6:	68a3      	ldr	r3, [r4, #8]
 801a8d8:	442b      	add	r3, r5
 801a8da:	60a3      	str	r3, [r4, #8]
 801a8dc:	2a00      	cmp	r2, #0
 801a8de:	d1b4      	bne.n	801a84a <read_submessage_format+0x56>
 801a8e0:	e7b5      	b.n	801a84e <read_submessage_format+0x5a>
 801a8e2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801a8e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a8e8:	1a52      	subs	r2, r2, r1
 801a8ea:	eba8 0803 	sub.w	r8, r8, r3
 801a8ee:	a80c      	add	r0, sp, #48	@ 0x30
 801a8f0:	f7f5 fe78 	bl	80105e4 <ucdr_init_buffer>
 801a8f4:	44a8      	add	r8, r5
 801a8f6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a8fa:	a80c      	add	r0, sp, #48	@ 0x30
 801a8fc:	f7f5 fe46 	bl	801058c <ucdr_set_on_full_buffer_callback>
 801a900:	fa1f f888 	uxth.w	r8, r8
 801a904:	ab0c      	add	r3, sp, #48	@ 0x30
 801a906:	9300      	str	r3, [sp, #0]
 801a908:	f8cd 8004 	str.w	r8, [sp, #4]
 801a90c:	2108      	movs	r1, #8
 801a90e:	f88d 1016 	strb.w	r1, [sp, #22]
 801a912:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801a916:	9102      	str	r1, [sp, #8]
 801a918:	ab06      	add	r3, sp, #24
 801a91a:	4632      	mov	r2, r6
 801a91c:	9905      	ldr	r1, [sp, #20]
 801a91e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801a922:	4638      	mov	r0, r7
 801a924:	47b0      	blx	r6
 801a926:	2301      	movs	r3, #1
 801a928:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801a92c:	e7c4      	b.n	801a8b8 <read_submessage_format+0xc4>
 801a92e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801a932:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a934:	1a52      	subs	r2, r2, r1
 801a936:	a80c      	add	r0, sp, #48	@ 0x30
 801a938:	eba8 0803 	sub.w	r8, r8, r3
 801a93c:	f7f5 fe52 	bl	80105e4 <ucdr_init_buffer>
 801a940:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a944:	a80c      	add	r0, sp, #48	@ 0x30
 801a946:	f7f5 fe21 	bl	801058c <ucdr_set_on_full_buffer_callback>
 801a94a:	ab0c      	add	r3, sp, #48	@ 0x30
 801a94c:	9300      	str	r3, [sp, #0]
 801a94e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801a952:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801a956:	44a8      	add	r8, r5
 801a958:	fa1f f888 	uxth.w	r8, r8
 801a95c:	f8cd 8004 	str.w	r8, [sp, #4]
 801a960:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801a964:	2107      	movs	r1, #7
 801a966:	f88d 1016 	strb.w	r1, [sp, #22]
 801a96a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801a96e:	9102      	str	r1, [sp, #8]
 801a970:	4632      	mov	r2, r6
 801a972:	b29b      	uxth	r3, r3
 801a974:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801a978:	9905      	ldr	r1, [sp, #20]
 801a97a:	4638      	mov	r0, r7
 801a97c:	47b0      	blx	r6
 801a97e:	2301      	movs	r3, #1
 801a980:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801a984:	e7a6      	b.n	801a8d4 <read_submessage_format+0xe0>
 801a986:	bf00      	nop

0801a988 <uxr_seq_num_add>:
 801a988:	4408      	add	r0, r1
 801a98a:	b280      	uxth	r0, r0
 801a98c:	4770      	bx	lr
 801a98e:	bf00      	nop

0801a990 <uxr_seq_num_sub>:
 801a990:	1a40      	subs	r0, r0, r1
 801a992:	b280      	uxth	r0, r0
 801a994:	4770      	bx	lr
 801a996:	bf00      	nop

0801a998 <uxr_seq_num_cmp>:
 801a998:	4288      	cmp	r0, r1
 801a99a:	d011      	beq.n	801a9c0 <uxr_seq_num_cmp+0x28>
 801a99c:	d309      	bcc.n	801a9b2 <uxr_seq_num_cmp+0x1a>
 801a99e:	4288      	cmp	r0, r1
 801a9a0:	d910      	bls.n	801a9c4 <uxr_seq_num_cmp+0x2c>
 801a9a2:	1a40      	subs	r0, r0, r1
 801a9a4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801a9a8:	bfd4      	ite	le
 801a9aa:	2001      	movle	r0, #1
 801a9ac:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a9b0:	4770      	bx	lr
 801a9b2:	1a0b      	subs	r3, r1, r0
 801a9b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a9b8:	daf1      	bge.n	801a99e <uxr_seq_num_cmp+0x6>
 801a9ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a9be:	4770      	bx	lr
 801a9c0:	2000      	movs	r0, #0
 801a9c2:	4770      	bx	lr
 801a9c4:	2001      	movs	r0, #1
 801a9c6:	4770      	bx	lr

0801a9c8 <uxr_init_framing_io>:
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	7041      	strb	r1, [r0, #1]
 801a9cc:	7003      	strb	r3, [r0, #0]
 801a9ce:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801a9d0:	4770      	bx	lr
 801a9d2:	bf00      	nop

0801a9d4 <uxr_write_framed_msg>:
 801a9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9d8:	4617      	mov	r7, r2
 801a9da:	7842      	ldrb	r2, [r0, #1]
 801a9dc:	b083      	sub	sp, #12
 801a9de:	460e      	mov	r6, r1
 801a9e0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801a9e4:	469a      	mov	sl, r3
 801a9e6:	2901      	cmp	r1, #1
 801a9e8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801a9ec:	4604      	mov	r4, r0
 801a9ee:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801a9f2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801a9f6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801a9fa:	f240 8137 	bls.w	801ac6c <uxr_write_framed_msg+0x298>
 801a9fe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801aa02:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801aa06:	2901      	cmp	r1, #1
 801aa08:	f04f 0202 	mov.w	r2, #2
 801aa0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aa10:	f240 808f 	bls.w	801ab32 <uxr_write_framed_msg+0x15e>
 801aa14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa16:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801aa1a:	b2dd      	uxtb	r5, r3
 801aa1c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801aa20:	2203      	movs	r2, #3
 801aa22:	2901      	cmp	r1, #1
 801aa24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aa28:	f240 809a 	bls.w	801ab60 <uxr_write_framed_msg+0x18c>
 801aa2c:	18a1      	adds	r1, r4, r2
 801aa2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa30:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801aa34:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801aa38:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801aa3c:	3201      	adds	r2, #1
 801aa3e:	2801      	cmp	r0, #1
 801aa40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aa44:	f240 80a0 	bls.w	801ab88 <uxr_write_framed_msg+0x1b4>
 801aa48:	18a0      	adds	r0, r4, r2
 801aa4a:	3201      	adds	r2, #1
 801aa4c:	b2d2      	uxtb	r2, r2
 801aa4e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801aa52:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	f000 80a9 	beq.w	801abae <uxr_write_framed_msg+0x1da>
 801aa5c:	f04f 0900 	mov.w	r9, #0
 801aa60:	46c8      	mov	r8, r9
 801aa62:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801aa66:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801aa6a:	2901      	cmp	r1, #1
 801aa6c:	f240 80c3 	bls.w	801abf6 <uxr_write_framed_msg+0x222>
 801aa70:	2a29      	cmp	r2, #41	@ 0x29
 801aa72:	f200 809f 	bhi.w	801abb4 <uxr_write_framed_msg+0x1e0>
 801aa76:	18a1      	adds	r1, r4, r2
 801aa78:	3201      	adds	r2, #1
 801aa7a:	b2d2      	uxtb	r2, r2
 801aa7c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801aa80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aa84:	ea89 0303 	eor.w	r3, r9, r3
 801aa88:	498c      	ldr	r1, [pc, #560]	@ (801acbc <uxr_write_framed_msg+0x2e8>)
 801aa8a:	b2db      	uxtb	r3, r3
 801aa8c:	f108 0801 	add.w	r8, r8, #1
 801aa90:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801aa94:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801aa98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa9a:	4543      	cmp	r3, r8
 801aa9c:	d8e1      	bhi.n	801aa62 <uxr_write_framed_msg+0x8e>
 801aa9e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801aaa2:	fa5f f889 	uxtb.w	r8, r9
 801aaa6:	9301      	str	r3, [sp, #4]
 801aaa8:	f04f 0900 	mov.w	r9, #0
 801aaac:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801aab0:	fa5f f18a 	uxtb.w	r1, sl
 801aab4:	2901      	cmp	r1, #1
 801aab6:	d921      	bls.n	801aafc <uxr_write_framed_msg+0x128>
 801aab8:	2a29      	cmp	r2, #41	@ 0x29
 801aaba:	f240 80af 	bls.w	801ac1c <uxr_write_framed_msg+0x248>
 801aabe:	2500      	movs	r5, #0
 801aac0:	e000      	b.n	801aac4 <uxr_write_framed_msg+0xf0>
 801aac2:	b160      	cbz	r0, 801aade <uxr_write_framed_msg+0x10a>
 801aac4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801aac8:	1b52      	subs	r2, r2, r5
 801aaca:	465b      	mov	r3, fp
 801aacc:	4421      	add	r1, r4
 801aace:	4638      	mov	r0, r7
 801aad0:	47b0      	blx	r6
 801aad2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801aad6:	4405      	add	r5, r0
 801aad8:	4295      	cmp	r5, r2
 801aada:	d3f2      	bcc.n	801aac2 <uxr_write_framed_msg+0xee>
 801aadc:	d003      	beq.n	801aae6 <uxr_write_framed_msg+0x112>
 801aade:	2000      	movs	r0, #0
 801aae0:	b003      	add	sp, #12
 801aae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aae6:	fa5f f18a 	uxtb.w	r1, sl
 801aaea:	f04f 0300 	mov.w	r3, #0
 801aaee:	2901      	cmp	r1, #1
 801aaf0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801aaf4:	f04f 0200 	mov.w	r2, #0
 801aaf8:	f200 8090 	bhi.w	801ac1c <uxr_write_framed_msg+0x248>
 801aafc:	1c51      	adds	r1, r2, #1
 801aafe:	b2c9      	uxtb	r1, r1
 801ab00:	2929      	cmp	r1, #41	@ 0x29
 801ab02:	d8dc      	bhi.n	801aabe <uxr_write_framed_msg+0xea>
 801ab04:	18a5      	adds	r5, r4, r2
 801ab06:	4421      	add	r1, r4
 801ab08:	3202      	adds	r2, #2
 801ab0a:	f088 0820 	eor.w	r8, r8, #32
 801ab0e:	4648      	mov	r0, r9
 801ab10:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801ab14:	b2d2      	uxtb	r2, r2
 801ab16:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801ab1a:	f04f 0901 	mov.w	r9, #1
 801ab1e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801ab22:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ab26:	2800      	cmp	r0, #0
 801ab28:	f040 8085 	bne.w	801ac36 <uxr_write_framed_msg+0x262>
 801ab2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ab30:	e7bc      	b.n	801aaac <uxr_write_framed_msg+0xd8>
 801ab32:	4611      	mov	r1, r2
 801ab34:	f04f 0c03 	mov.w	ip, #3
 801ab38:	2204      	movs	r2, #4
 801ab3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ab3c:	4421      	add	r1, r4
 801ab3e:	b2dd      	uxtb	r5, r3
 801ab40:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801ab44:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 801ab48:	44a4      	add	ip, r4
 801ab4a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801ab4e:	f080 0020 	eor.w	r0, r0, #32
 801ab52:	2901      	cmp	r1, #1
 801ab54:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801ab58:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ab5c:	f63f af66 	bhi.w	801aa2c <uxr_write_framed_msg+0x58>
 801ab60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ab62:	18a0      	adds	r0, r4, r2
 801ab64:	f085 0520 	eor.w	r5, r5, #32
 801ab68:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801ab6c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801ab70:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801ab74:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801ab78:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801ab7c:	3202      	adds	r2, #2
 801ab7e:	2801      	cmp	r0, #1
 801ab80:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ab84:	f63f af60 	bhi.w	801aa48 <uxr_write_framed_msg+0x74>
 801ab88:	1c50      	adds	r0, r2, #1
 801ab8a:	18a5      	adds	r5, r4, r2
 801ab8c:	fa54 f080 	uxtab	r0, r4, r0
 801ab90:	3202      	adds	r2, #2
 801ab92:	f081 0120 	eor.w	r1, r1, #32
 801ab96:	b2d2      	uxtb	r2, r2
 801ab98:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801ab9c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801aba0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801aba4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	f47f af57 	bne.w	801aa5c <uxr_write_framed_msg+0x88>
 801abae:	9301      	str	r3, [sp, #4]
 801abb0:	4698      	mov	r8, r3
 801abb2:	e779      	b.n	801aaa8 <uxr_write_framed_msg+0xd4>
 801abb4:	2500      	movs	r5, #0
 801abb6:	e001      	b.n	801abbc <uxr_write_framed_msg+0x1e8>
 801abb8:	2800      	cmp	r0, #0
 801abba:	d090      	beq.n	801aade <uxr_write_framed_msg+0x10a>
 801abbc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801abc0:	1b52      	subs	r2, r2, r5
 801abc2:	465b      	mov	r3, fp
 801abc4:	4421      	add	r1, r4
 801abc6:	4638      	mov	r0, r7
 801abc8:	47b0      	blx	r6
 801abca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801abce:	4405      	add	r5, r0
 801abd0:	4295      	cmp	r5, r2
 801abd2:	d3f1      	bcc.n	801abb8 <uxr_write_framed_msg+0x1e4>
 801abd4:	d183      	bne.n	801aade <uxr_write_framed_msg+0x10a>
 801abd6:	f04f 0300 	mov.w	r3, #0
 801abda:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801abde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801abe0:	4543      	cmp	r3, r8
 801abe2:	d964      	bls.n	801acae <uxr_write_framed_msg+0x2da>
 801abe4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801abe8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801abec:	2901      	cmp	r1, #1
 801abee:	f04f 0200 	mov.w	r2, #0
 801abf2:	f63f af3d 	bhi.w	801aa70 <uxr_write_framed_msg+0x9c>
 801abf6:	1c51      	adds	r1, r2, #1
 801abf8:	b2c9      	uxtb	r1, r1
 801abfa:	2929      	cmp	r1, #41	@ 0x29
 801abfc:	d8da      	bhi.n	801abb4 <uxr_write_framed_msg+0x1e0>
 801abfe:	18a0      	adds	r0, r4, r2
 801ac00:	4421      	add	r1, r4
 801ac02:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801ac06:	3202      	adds	r2, #2
 801ac08:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801ac0c:	b2d2      	uxtb	r2, r2
 801ac0e:	f083 0020 	eor.w	r0, r3, #32
 801ac12:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801ac16:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ac1a:	e733      	b.n	801aa84 <uxr_write_framed_msg+0xb0>
 801ac1c:	18a1      	adds	r1, r4, r2
 801ac1e:	3201      	adds	r2, #1
 801ac20:	4648      	mov	r0, r9
 801ac22:	b2d2      	uxtb	r2, r2
 801ac24:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801ac28:	f04f 0901 	mov.w	r9, #1
 801ac2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ac30:	2800      	cmp	r0, #0
 801ac32:	f43f af7b 	beq.w	801ab2c <uxr_write_framed_msg+0x158>
 801ac36:	2500      	movs	r5, #0
 801ac38:	e002      	b.n	801ac40 <uxr_write_framed_msg+0x26c>
 801ac3a:	2800      	cmp	r0, #0
 801ac3c:	f43f af4f 	beq.w	801aade <uxr_write_framed_msg+0x10a>
 801ac40:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801ac44:	1b52      	subs	r2, r2, r5
 801ac46:	465b      	mov	r3, fp
 801ac48:	4421      	add	r1, r4
 801ac4a:	4638      	mov	r0, r7
 801ac4c:	47b0      	blx	r6
 801ac4e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801ac52:	4405      	add	r5, r0
 801ac54:	4295      	cmp	r5, r2
 801ac56:	d3f0      	bcc.n	801ac3a <uxr_write_framed_msg+0x266>
 801ac58:	f47f af41 	bne.w	801aade <uxr_write_framed_msg+0x10a>
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801ac62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ac64:	b298      	uxth	r0, r3
 801ac66:	b003      	add	sp, #12
 801ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac6c:	217d      	movs	r1, #125	@ 0x7d
 801ac6e:	f082 0220 	eor.w	r2, r2, #32
 801ac72:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801ac76:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801ac7a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801ac7e:	2901      	cmp	r1, #1
 801ac80:	f04f 0203 	mov.w	r2, #3
 801ac84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ac88:	d804      	bhi.n	801ac94 <uxr_write_framed_msg+0x2c0>
 801ac8a:	4611      	mov	r1, r2
 801ac8c:	f04f 0c04 	mov.w	ip, #4
 801ac90:	2205      	movs	r2, #5
 801ac92:	e752      	b.n	801ab3a <uxr_write_framed_msg+0x166>
 801ac94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ac96:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801ac9a:	b2dd      	uxtb	r5, r3
 801ac9c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801aca0:	2204      	movs	r2, #4
 801aca2:	2901      	cmp	r1, #1
 801aca4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801aca8:	f63f aec0 	bhi.w	801aa2c <uxr_write_framed_msg+0x58>
 801acac:	e758      	b.n	801ab60 <uxr_write_framed_msg+0x18c>
 801acae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801acb2:	fa5f f889 	uxtb.w	r8, r9
 801acb6:	9301      	str	r3, [sp, #4]
 801acb8:	2200      	movs	r2, #0
 801acba:	e6f5      	b.n	801aaa8 <uxr_write_framed_msg+0xd4>
 801acbc:	0801debc 	.word	0x0801debc

0801acc0 <uxr_framing_read_transport>:
 801acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc4:	4604      	mov	r4, r0
 801acc6:	b083      	sub	sp, #12
 801acc8:	461f      	mov	r7, r3
 801acca:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801acce:	4689      	mov	r9, r1
 801acd0:	4692      	mov	sl, r2
 801acd2:	f7f9 f85f 	bl	8013d94 <uxr_millis>
 801acd6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801acda:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801acde:	42b3      	cmp	r3, r6
 801ace0:	4680      	mov	r8, r0
 801ace2:	d061      	beq.n	801ada8 <uxr_framing_read_transport+0xe8>
 801ace4:	d81c      	bhi.n	801ad20 <uxr_framing_read_transport+0x60>
 801ace6:	1e75      	subs	r5, r6, #1
 801ace8:	1aed      	subs	r5, r5, r3
 801acea:	b2ed      	uxtb	r5, r5
 801acec:	2600      	movs	r6, #0
 801acee:	455d      	cmp	r5, fp
 801acf0:	d81f      	bhi.n	801ad32 <uxr_framing_read_transport+0x72>
 801acf2:	19ab      	adds	r3, r5, r6
 801acf4:	455b      	cmp	r3, fp
 801acf6:	bf84      	itt	hi
 801acf8:	ebab 0605 	subhi.w	r6, fp, r5
 801acfc:	b2f6      	uxtbhi	r6, r6
 801acfe:	b9ed      	cbnz	r5, 801ad3c <uxr_framing_read_transport+0x7c>
 801ad00:	f04f 0b00 	mov.w	fp, #0
 801ad04:	f7f9 f846 	bl	8013d94 <uxr_millis>
 801ad08:	683b      	ldr	r3, [r7, #0]
 801ad0a:	eba0 0808 	sub.w	r8, r0, r8
 801ad0e:	eba3 0308 	sub.w	r3, r3, r8
 801ad12:	4658      	mov	r0, fp
 801ad14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad18:	603b      	str	r3, [r7, #0]
 801ad1a:	b003      	add	sp, #12
 801ad1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad20:	2e00      	cmp	r6, #0
 801ad22:	d049      	beq.n	801adb8 <uxr_framing_read_transport+0xf8>
 801ad24:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 801ad28:	b2ed      	uxtb	r5, r5
 801ad2a:	3e01      	subs	r6, #1
 801ad2c:	455d      	cmp	r5, fp
 801ad2e:	b2f6      	uxtb	r6, r6
 801ad30:	d9df      	bls.n	801acf2 <uxr_framing_read_transport+0x32>
 801ad32:	fa5f f58b 	uxtb.w	r5, fp
 801ad36:	2600      	movs	r6, #0
 801ad38:	2d00      	cmp	r5, #0
 801ad3a:	d0e1      	beq.n	801ad00 <uxr_framing_read_transport+0x40>
 801ad3c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ad40:	3102      	adds	r1, #2
 801ad42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ad44:	9300      	str	r3, [sp, #0]
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	4421      	add	r1, r4
 801ad4a:	462a      	mov	r2, r5
 801ad4c:	4650      	mov	r0, sl
 801ad4e:	47c8      	blx	r9
 801ad50:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801ad54:	4a1a      	ldr	r2, [pc, #104]	@ (801adc0 <uxr_framing_read_transport+0x100>)
 801ad56:	4403      	add	r3, r0
 801ad58:	0859      	lsrs	r1, r3, #1
 801ad5a:	fba2 2101 	umull	r2, r1, r2, r1
 801ad5e:	0889      	lsrs	r1, r1, #2
 801ad60:	222a      	movs	r2, #42	@ 0x2a
 801ad62:	fb02 3111 	mls	r1, r2, r1, r3
 801ad66:	4683      	mov	fp, r0
 801ad68:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801ad6c:	2800      	cmp	r0, #0
 801ad6e:	d0c7      	beq.n	801ad00 <uxr_framing_read_transport+0x40>
 801ad70:	42a8      	cmp	r0, r5
 801ad72:	d1c7      	bne.n	801ad04 <uxr_framing_read_transport+0x44>
 801ad74:	2e00      	cmp	r6, #0
 801ad76:	d0c5      	beq.n	801ad04 <uxr_framing_read_transport+0x44>
 801ad78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ad7a:	9300      	str	r3, [sp, #0]
 801ad7c:	3102      	adds	r1, #2
 801ad7e:	4632      	mov	r2, r6
 801ad80:	4421      	add	r1, r4
 801ad82:	2300      	movs	r3, #0
 801ad84:	4650      	mov	r0, sl
 801ad86:	47c8      	blx	r9
 801ad88:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ad8c:	4a0c      	ldr	r2, [pc, #48]	@ (801adc0 <uxr_framing_read_transport+0x100>)
 801ad8e:	180b      	adds	r3, r1, r0
 801ad90:	0859      	lsrs	r1, r3, #1
 801ad92:	fba2 1201 	umull	r1, r2, r2, r1
 801ad96:	0892      	lsrs	r2, r2, #2
 801ad98:	212a      	movs	r1, #42	@ 0x2a
 801ad9a:	fb01 3312 	mls	r3, r1, r2, r3
 801ad9e:	eb00 0b05 	add.w	fp, r0, r5
 801ada2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801ada6:	e7ad      	b.n	801ad04 <uxr_framing_read_transport+0x44>
 801ada8:	2600      	movs	r6, #0
 801adaa:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801adae:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801adb0:	d9bf      	bls.n	801ad32 <uxr_framing_read_transport+0x72>
 801adb2:	2102      	movs	r1, #2
 801adb4:	2529      	movs	r5, #41	@ 0x29
 801adb6:	e7c4      	b.n	801ad42 <uxr_framing_read_transport+0x82>
 801adb8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801adbc:	b2ed      	uxtb	r5, r5
 801adbe:	e796      	b.n	801acee <uxr_framing_read_transport+0x2e>
 801adc0:	30c30c31 	.word	0x30c30c31

0801adc4 <uxr_read_framed_msg>:
 801adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adc8:	461e      	mov	r6, r3
 801adca:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801adce:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801add2:	429d      	cmp	r5, r3
 801add4:	b083      	sub	sp, #12
 801add6:	4604      	mov	r4, r0
 801add8:	4688      	mov	r8, r1
 801adda:	4691      	mov	r9, r2
 801addc:	f000 8188 	beq.w	801b0f0 <uxr_read_framed_msg+0x32c>
 801ade0:	7823      	ldrb	r3, [r4, #0]
 801ade2:	4dc1      	ldr	r5, [pc, #772]	@ (801b0e8 <uxr_read_framed_msg+0x324>)
 801ade4:	4fc1      	ldr	r7, [pc, #772]	@ (801b0ec <uxr_read_framed_msg+0x328>)
 801ade6:	2b07      	cmp	r3, #7
 801ade8:	d8fd      	bhi.n	801ade6 <uxr_read_framed_msg+0x22>
 801adea:	e8df f013 	tbh	[pc, r3, lsl #1]
 801adee:	0115      	.short	0x0115
 801adf0:	00d600f6 	.word	0x00d600f6
 801adf4:	009000b9 	.word	0x009000b9
 801adf8:	0030004d 	.word	0x0030004d
 801adfc:	0008      	.short	0x0008
 801adfe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ae02:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801ae06:	4299      	cmp	r1, r3
 801ae08:	f000 814a 	beq.w	801b0a0 <uxr_read_framed_msg+0x2dc>
 801ae0c:	18e2      	adds	r2, r4, r3
 801ae0e:	7892      	ldrb	r2, [r2, #2]
 801ae10:	2a7d      	cmp	r2, #125	@ 0x7d
 801ae12:	f000 8199 	beq.w	801b148 <uxr_read_framed_msg+0x384>
 801ae16:	3301      	adds	r3, #1
 801ae18:	0858      	lsrs	r0, r3, #1
 801ae1a:	fba5 1000 	umull	r1, r0, r5, r0
 801ae1e:	0880      	lsrs	r0, r0, #2
 801ae20:	212a      	movs	r1, #42	@ 0x2a
 801ae22:	fb01 3310 	mls	r3, r1, r0, r3
 801ae26:	2a7e      	cmp	r2, #126	@ 0x7e
 801ae28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ae2c:	f000 8252 	beq.w	801b2d4 <uxr_read_framed_msg+0x510>
 801ae30:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801ae32:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801ae34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801ae38:	b29b      	uxth	r3, r3
 801ae3a:	2200      	movs	r2, #0
 801ae3c:	4299      	cmp	r1, r3
 801ae3e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801ae40:	7022      	strb	r2, [r4, #0]
 801ae42:	f000 8179 	beq.w	801b138 <uxr_read_framed_msg+0x374>
 801ae46:	2000      	movs	r0, #0
 801ae48:	b003      	add	sp, #12
 801ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae4e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ae52:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801ae56:	4299      	cmp	r1, r3
 801ae58:	f000 8131 	beq.w	801b0be <uxr_read_framed_msg+0x2fa>
 801ae5c:	18e2      	adds	r2, r4, r3
 801ae5e:	7890      	ldrb	r0, [r2, #2]
 801ae60:	287d      	cmp	r0, #125	@ 0x7d
 801ae62:	f000 8190 	beq.w	801b186 <uxr_read_framed_msg+0x3c2>
 801ae66:	3301      	adds	r3, #1
 801ae68:	085a      	lsrs	r2, r3, #1
 801ae6a:	fba5 1202 	umull	r1, r2, r5, r2
 801ae6e:	0892      	lsrs	r2, r2, #2
 801ae70:	212a      	movs	r1, #42	@ 0x2a
 801ae72:	fb01 3312 	mls	r3, r1, r2, r3
 801ae76:	287e      	cmp	r0, #126	@ 0x7e
 801ae78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ae7c:	f000 821a 	beq.w	801b2b4 <uxr_read_framed_msg+0x4f0>
 801ae80:	2307      	movs	r3, #7
 801ae82:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801ae84:	7023      	strb	r3, [r4, #0]
 801ae86:	e7ae      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801ae88:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801ae8a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801ae8e:	459e      	cmp	lr, r3
 801ae90:	d938      	bls.n	801af04 <uxr_read_framed_msg+0x140>
 801ae92:	ee07 8a90 	vmov	s15, r8
 801ae96:	212a      	movs	r1, #42	@ 0x2a
 801ae98:	e020      	b.n	801aedc <uxr_read_framed_msg+0x118>
 801ae9a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801ae9e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801aea2:	f000 80d4 	beq.w	801b04e <uxr_read_framed_msg+0x28a>
 801aea6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801aeaa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801aeae:	f000 8219 	beq.w	801b2e4 <uxr_read_framed_msg+0x520>
 801aeb2:	f806 c003 	strb.w	ip, [r6, r3]
 801aeb6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801aeba:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801aebc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801aec0:	ea8a 000c 	eor.w	r0, sl, ip
 801aec4:	b2c0      	uxtb	r0, r0
 801aec6:	3301      	adds	r3, #1
 801aec8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801aecc:	b29b      	uxth	r3, r3
 801aece:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801aed2:	4573      	cmp	r3, lr
 801aed4:	8663      	strh	r3, [r4, #50]	@ 0x32
 801aed6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801aed8:	f080 8120 	bcs.w	801b11c <uxr_read_framed_msg+0x358>
 801aedc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801aee0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801aee4:	f100 0c01 	add.w	ip, r0, #1
 801aee8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801aeec:	fba5 8202 	umull	r8, r2, r5, r2
 801aef0:	0892      	lsrs	r2, r2, #2
 801aef2:	4582      	cmp	sl, r0
 801aef4:	eb04 0b00 	add.w	fp, r4, r0
 801aef8:	fb01 c212 	mls	r2, r1, r2, ip
 801aefc:	d1cd      	bne.n	801ae9a <uxr_read_framed_msg+0xd6>
 801aefe:	ee17 8a90 	vmov	r8, s15
 801af02:	459e      	cmp	lr, r3
 801af04:	f040 8111 	bne.w	801b12a <uxr_read_framed_msg+0x366>
 801af08:	2306      	movs	r3, #6
 801af0a:	7023      	strb	r3, [r4, #0]
 801af0c:	e76b      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801af0e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801af12:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801af16:	4298      	cmp	r0, r3
 801af18:	f000 80c2 	beq.w	801b0a0 <uxr_read_framed_msg+0x2dc>
 801af1c:	18e2      	adds	r2, r4, r3
 801af1e:	7891      	ldrb	r1, [r2, #2]
 801af20:	297d      	cmp	r1, #125	@ 0x7d
 801af22:	f000 814c 	beq.w	801b1be <uxr_read_framed_msg+0x3fa>
 801af26:	3301      	adds	r3, #1
 801af28:	085a      	lsrs	r2, r3, #1
 801af2a:	fba5 0202 	umull	r0, r2, r5, r2
 801af2e:	0892      	lsrs	r2, r2, #2
 801af30:	202a      	movs	r0, #42	@ 0x2a
 801af32:	fb00 3312 	mls	r3, r0, r2, r3
 801af36:	297e      	cmp	r1, #126	@ 0x7e
 801af38:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801af3c:	f000 81ca 	beq.w	801b2d4 <uxr_read_framed_msg+0x510>
 801af40:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801af42:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801af46:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801af48:	b29b      	uxth	r3, r3
 801af4a:	2000      	movs	r0, #0
 801af4c:	428b      	cmp	r3, r1
 801af4e:	8623      	strh	r3, [r4, #48]	@ 0x30
 801af50:	8660      	strh	r0, [r4, #50]	@ 0x32
 801af52:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801af54:	f240 80df 	bls.w	801b116 <uxr_read_framed_msg+0x352>
 801af58:	7020      	strb	r0, [r4, #0]
 801af5a:	b003      	add	sp, #12
 801af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af60:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801af64:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801af68:	4299      	cmp	r1, r3
 801af6a:	f000 80a8 	beq.w	801b0be <uxr_read_framed_msg+0x2fa>
 801af6e:	18e2      	adds	r2, r4, r3
 801af70:	7890      	ldrb	r0, [r2, #2]
 801af72:	287d      	cmp	r0, #125	@ 0x7d
 801af74:	f000 8164 	beq.w	801b240 <uxr_read_framed_msg+0x47c>
 801af78:	3301      	adds	r3, #1
 801af7a:	085a      	lsrs	r2, r3, #1
 801af7c:	fba5 1202 	umull	r1, r2, r5, r2
 801af80:	0892      	lsrs	r2, r2, #2
 801af82:	212a      	movs	r1, #42	@ 0x2a
 801af84:	fb01 3312 	mls	r3, r1, r2, r3
 801af88:	287e      	cmp	r0, #126	@ 0x7e
 801af8a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801af8e:	f000 8191 	beq.w	801b2b4 <uxr_read_framed_msg+0x4f0>
 801af92:	2304      	movs	r3, #4
 801af94:	8620      	strh	r0, [r4, #48]	@ 0x30
 801af96:	7023      	strb	r3, [r4, #0]
 801af98:	e725      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801af9a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801af9e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801afa2:	4290      	cmp	r0, r2
 801afa4:	f000 80b3 	beq.w	801b10e <uxr_read_framed_msg+0x34a>
 801afa8:	18a3      	adds	r3, r4, r2
 801afaa:	7899      	ldrb	r1, [r3, #2]
 801afac:	297d      	cmp	r1, #125	@ 0x7d
 801afae:	f000 8164 	beq.w	801b27a <uxr_read_framed_msg+0x4b6>
 801afb2:	3201      	adds	r2, #1
 801afb4:	0850      	lsrs	r0, r2, #1
 801afb6:	fba5 3000 	umull	r3, r0, r5, r0
 801afba:	0880      	lsrs	r0, r0, #2
 801afbc:	232a      	movs	r3, #42	@ 0x2a
 801afbe:	fb03 2210 	mls	r2, r3, r0, r2
 801afc2:	297e      	cmp	r1, #126	@ 0x7e
 801afc4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801afc8:	f000 8188 	beq.w	801b2dc <uxr_read_framed_msg+0x518>
 801afcc:	7863      	ldrb	r3, [r4, #1]
 801afce:	428b      	cmp	r3, r1
 801afd0:	bf0c      	ite	eq
 801afd2:	2303      	moveq	r3, #3
 801afd4:	2300      	movne	r3, #0
 801afd6:	7023      	strb	r3, [r4, #0]
 801afd8:	e705      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801afda:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801afde:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801afe2:	2200      	movs	r2, #0
 801afe4:	4299      	cmp	r1, r3
 801afe6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801afea:	d06c      	beq.n	801b0c6 <uxr_read_framed_msg+0x302>
 801afec:	18e2      	adds	r2, r4, r3
 801afee:	7890      	ldrb	r0, [r2, #2]
 801aff0:	287d      	cmp	r0, #125	@ 0x7d
 801aff2:	f000 8101 	beq.w	801b1f8 <uxr_read_framed_msg+0x434>
 801aff6:	3301      	adds	r3, #1
 801aff8:	085a      	lsrs	r2, r3, #1
 801affa:	fba5 1202 	umull	r1, r2, r5, r2
 801affe:	0892      	lsrs	r2, r2, #2
 801b000:	212a      	movs	r1, #42	@ 0x2a
 801b002:	fb01 3312 	mls	r3, r1, r2, r3
 801b006:	287e      	cmp	r0, #126	@ 0x7e
 801b008:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801b00c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b010:	d059      	beq.n	801b0c6 <uxr_read_framed_msg+0x302>
 801b012:	2302      	movs	r3, #2
 801b014:	7023      	strb	r3, [r4, #0]
 801b016:	e6e6      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801b018:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801b01c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b020:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801b024:	1c51      	adds	r1, r2, #1
 801b026:	084b      	lsrs	r3, r1, #1
 801b028:	fba5 c303 	umull	ip, r3, r5, r3
 801b02c:	089b      	lsrs	r3, r3, #2
 801b02e:	fb0e 1313 	mls	r3, lr, r3, r1
 801b032:	4592      	cmp	sl, r2
 801b034:	eb04 0002 	add.w	r0, r4, r2
 801b038:	b2da      	uxtb	r2, r3
 801b03a:	f43f af04 	beq.w	801ae46 <uxr_read_framed_msg+0x82>
 801b03e:	7883      	ldrb	r3, [r0, #2]
 801b040:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b044:	2b7e      	cmp	r3, #126	@ 0x7e
 801b046:	d1ed      	bne.n	801b024 <uxr_read_framed_msg+0x260>
 801b048:	2301      	movs	r3, #1
 801b04a:	7023      	strb	r3, [r4, #0]
 801b04c:	e6cb      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801b04e:	f100 0c01 	add.w	ip, r0, #1
 801b052:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b056:	fba5 8202 	umull	r8, r2, r5, r2
 801b05a:	0892      	lsrs	r2, r2, #2
 801b05c:	fb01 c212 	mls	r2, r1, r2, ip
 801b060:	eb04 0c02 	add.w	ip, r4, r2
 801b064:	b2d2      	uxtb	r2, r2
 801b066:	4592      	cmp	sl, r2
 801b068:	f100 0002 	add.w	r0, r0, #2
 801b06c:	f43f af47 	beq.w	801aefe <uxr_read_framed_msg+0x13a>
 801b070:	0842      	lsrs	r2, r0, #1
 801b072:	f89c a002 	ldrb.w	sl, [ip, #2]
 801b076:	fba5 8202 	umull	r8, r2, r5, r2
 801b07a:	0892      	lsrs	r2, r2, #2
 801b07c:	fb01 0012 	mls	r0, r1, r2, r0
 801b080:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801b084:	f08a 0c20 	eor.w	ip, sl, #32
 801b088:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801b08c:	f47f af11 	bne.w	801aeb2 <uxr_read_framed_msg+0xee>
 801b090:	459e      	cmp	lr, r3
 801b092:	ee17 8a90 	vmov	r8, s15
 801b096:	f43f af37 	beq.w	801af08 <uxr_read_framed_msg+0x144>
 801b09a:	2301      	movs	r3, #1
 801b09c:	7023      	strb	r3, [r4, #0]
 801b09e:	e6a2      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801b0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b0a2:	9300      	str	r3, [sp, #0]
 801b0a4:	2301      	movs	r3, #1
 801b0a6:	9301      	str	r3, [sp, #4]
 801b0a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b0aa:	464a      	mov	r2, r9
 801b0ac:	4641      	mov	r1, r8
 801b0ae:	4620      	mov	r0, r4
 801b0b0:	f7ff fe06 	bl	801acc0 <uxr_framing_read_transport>
 801b0b4:	2800      	cmp	r0, #0
 801b0b6:	f43f aec6 	beq.w	801ae46 <uxr_read_framed_msg+0x82>
 801b0ba:	7823      	ldrb	r3, [r4, #0]
 801b0bc:	e693      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801b0be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b0c0:	9300      	str	r3, [sp, #0]
 801b0c2:	2302      	movs	r3, #2
 801b0c4:	e7ef      	b.n	801b0a6 <uxr_read_framed_msg+0x2e2>
 801b0c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b0c8:	9300      	str	r3, [sp, #0]
 801b0ca:	2304      	movs	r3, #4
 801b0cc:	9301      	str	r3, [sp, #4]
 801b0ce:	464a      	mov	r2, r9
 801b0d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b0d2:	4641      	mov	r1, r8
 801b0d4:	4620      	mov	r0, r4
 801b0d6:	f7ff fdf3 	bl	801acc0 <uxr_framing_read_transport>
 801b0da:	2800      	cmp	r0, #0
 801b0dc:	d1ed      	bne.n	801b0ba <uxr_read_framed_msg+0x2f6>
 801b0de:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801b0e2:	2b7e      	cmp	r3, #126	@ 0x7e
 801b0e4:	d0e9      	beq.n	801b0ba <uxr_read_framed_msg+0x2f6>
 801b0e6:	e6ae      	b.n	801ae46 <uxr_read_framed_msg+0x82>
 801b0e8:	30c30c31 	.word	0x30c30c31
 801b0ec:	0801debc 	.word	0x0801debc
 801b0f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b0f2:	9300      	str	r3, [sp, #0]
 801b0f4:	2305      	movs	r3, #5
 801b0f6:	9301      	str	r3, [sp, #4]
 801b0f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b0fa:	f7ff fde1 	bl	801acc0 <uxr_framing_read_transport>
 801b0fe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801b102:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801b106:	429a      	cmp	r2, r3
 801b108:	f43f ae9d 	beq.w	801ae46 <uxr_read_framed_msg+0x82>
 801b10c:	e668      	b.n	801ade0 <uxr_read_framed_msg+0x1c>
 801b10e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b110:	9300      	str	r3, [sp, #0]
 801b112:	2303      	movs	r3, #3
 801b114:	e7c7      	b.n	801b0a6 <uxr_read_framed_msg+0x2e2>
 801b116:	2305      	movs	r3, #5
 801b118:	7023      	strb	r3, [r4, #0]
 801b11a:	e664      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801b11c:	ee17 8a90 	vmov	r8, s15
 801b120:	f43f aef2 	beq.w	801af08 <uxr_read_framed_msg+0x144>
 801b124:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801b128:	d08e      	beq.n	801b048 <uxr_read_framed_msg+0x284>
 801b12a:	ebae 0303 	sub.w	r3, lr, r3
 801b12e:	3302      	adds	r3, #2
 801b130:	9301      	str	r3, [sp, #4]
 801b132:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b134:	9300      	str	r3, [sp, #0]
 801b136:	e7b7      	b.n	801b0a8 <uxr_read_framed_msg+0x2e4>
 801b138:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b13a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801b13e:	7013      	strb	r3, [r2, #0]
 801b140:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801b142:	b003      	add	sp, #12
 801b144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b148:	f103 0c01 	add.w	ip, r3, #1
 801b14c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b150:	fba5 0202 	umull	r0, r2, r5, r2
 801b154:	0892      	lsrs	r2, r2, #2
 801b156:	202a      	movs	r0, #42	@ 0x2a
 801b158:	fb00 c212 	mls	r2, r0, r2, ip
 801b15c:	fa5f fc82 	uxtb.w	ip, r2
 801b160:	4561      	cmp	r1, ip
 801b162:	d09d      	beq.n	801b0a0 <uxr_read_framed_msg+0x2dc>
 801b164:	3302      	adds	r3, #2
 801b166:	4422      	add	r2, r4
 801b168:	0859      	lsrs	r1, r3, #1
 801b16a:	7892      	ldrb	r2, [r2, #2]
 801b16c:	fba5 c101 	umull	ip, r1, r5, r1
 801b170:	0889      	lsrs	r1, r1, #2
 801b172:	fb00 3311 	mls	r3, r0, r1, r3
 801b176:	2a7e      	cmp	r2, #126	@ 0x7e
 801b178:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b17c:	f000 80aa 	beq.w	801b2d4 <uxr_read_framed_msg+0x510>
 801b180:	f082 0220 	eor.w	r2, r2, #32
 801b184:	e654      	b.n	801ae30 <uxr_read_framed_msg+0x6c>
 801b186:	1c58      	adds	r0, r3, #1
 801b188:	0842      	lsrs	r2, r0, #1
 801b18a:	fba5 c202 	umull	ip, r2, r5, r2
 801b18e:	0892      	lsrs	r2, r2, #2
 801b190:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b194:	fb0c 0212 	mls	r2, ip, r2, r0
 801b198:	b2d0      	uxtb	r0, r2
 801b19a:	4281      	cmp	r1, r0
 801b19c:	d08f      	beq.n	801b0be <uxr_read_framed_msg+0x2fa>
 801b19e:	4422      	add	r2, r4
 801b1a0:	3302      	adds	r3, #2
 801b1a2:	7890      	ldrb	r0, [r2, #2]
 801b1a4:	085a      	lsrs	r2, r3, #1
 801b1a6:	fba5 1202 	umull	r1, r2, r5, r2
 801b1aa:	0892      	lsrs	r2, r2, #2
 801b1ac:	fb0c 3312 	mls	r3, ip, r2, r3
 801b1b0:	287e      	cmp	r0, #126	@ 0x7e
 801b1b2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b1b6:	d07d      	beq.n	801b2b4 <uxr_read_framed_msg+0x4f0>
 801b1b8:	f080 0020 	eor.w	r0, r0, #32
 801b1bc:	e660      	b.n	801ae80 <uxr_read_framed_msg+0xbc>
 801b1be:	1c59      	adds	r1, r3, #1
 801b1c0:	084a      	lsrs	r2, r1, #1
 801b1c2:	fba5 c202 	umull	ip, r2, r5, r2
 801b1c6:	0892      	lsrs	r2, r2, #2
 801b1c8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b1cc:	fb0c 1212 	mls	r2, ip, r2, r1
 801b1d0:	b2d1      	uxtb	r1, r2
 801b1d2:	4288      	cmp	r0, r1
 801b1d4:	f43f af64 	beq.w	801b0a0 <uxr_read_framed_msg+0x2dc>
 801b1d8:	4422      	add	r2, r4
 801b1da:	3302      	adds	r3, #2
 801b1dc:	7891      	ldrb	r1, [r2, #2]
 801b1de:	085a      	lsrs	r2, r3, #1
 801b1e0:	fba5 0202 	umull	r0, r2, r5, r2
 801b1e4:	0892      	lsrs	r2, r2, #2
 801b1e6:	fb0c 3312 	mls	r3, ip, r2, r3
 801b1ea:	297e      	cmp	r1, #126	@ 0x7e
 801b1ec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b1f0:	d070      	beq.n	801b2d4 <uxr_read_framed_msg+0x510>
 801b1f2:	f081 0120 	eor.w	r1, r1, #32
 801b1f6:	e6a3      	b.n	801af40 <uxr_read_framed_msg+0x17c>
 801b1f8:	f103 0c01 	add.w	ip, r3, #1
 801b1fc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b200:	fba5 0202 	umull	r0, r2, r5, r2
 801b204:	0892      	lsrs	r2, r2, #2
 801b206:	202a      	movs	r0, #42	@ 0x2a
 801b208:	fb00 c212 	mls	r2, r0, r2, ip
 801b20c:	fa5f fc82 	uxtb.w	ip, r2
 801b210:	4561      	cmp	r1, ip
 801b212:	f43f af58 	beq.w	801b0c6 <uxr_read_framed_msg+0x302>
 801b216:	4422      	add	r2, r4
 801b218:	3302      	adds	r3, #2
 801b21a:	7891      	ldrb	r1, [r2, #2]
 801b21c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801b220:	085a      	lsrs	r2, r3, #1
 801b222:	fba5 c202 	umull	ip, r2, r5, r2
 801b226:	0892      	lsrs	r2, r2, #2
 801b228:	fb00 3312 	mls	r3, r0, r2, r3
 801b22c:	297e      	cmp	r1, #126	@ 0x7e
 801b22e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b232:	f43f af48 	beq.w	801b0c6 <uxr_read_framed_msg+0x302>
 801b236:	f081 0120 	eor.w	r1, r1, #32
 801b23a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801b23e:	e6e8      	b.n	801b012 <uxr_read_framed_msg+0x24e>
 801b240:	1c58      	adds	r0, r3, #1
 801b242:	0842      	lsrs	r2, r0, #1
 801b244:	fba5 c202 	umull	ip, r2, r5, r2
 801b248:	0892      	lsrs	r2, r2, #2
 801b24a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b24e:	fb0c 0212 	mls	r2, ip, r2, r0
 801b252:	b2d0      	uxtb	r0, r2
 801b254:	4281      	cmp	r1, r0
 801b256:	f43f af32 	beq.w	801b0be <uxr_read_framed_msg+0x2fa>
 801b25a:	4422      	add	r2, r4
 801b25c:	3302      	adds	r3, #2
 801b25e:	7890      	ldrb	r0, [r2, #2]
 801b260:	085a      	lsrs	r2, r3, #1
 801b262:	fba5 1202 	umull	r1, r2, r5, r2
 801b266:	0892      	lsrs	r2, r2, #2
 801b268:	fb0c 3312 	mls	r3, ip, r2, r3
 801b26c:	287e      	cmp	r0, #126	@ 0x7e
 801b26e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801b272:	d01f      	beq.n	801b2b4 <uxr_read_framed_msg+0x4f0>
 801b274:	f080 0020 	eor.w	r0, r0, #32
 801b278:	e68b      	b.n	801af92 <uxr_read_framed_msg+0x1ce>
 801b27a:	1c51      	adds	r1, r2, #1
 801b27c:	084b      	lsrs	r3, r1, #1
 801b27e:	fba5 c303 	umull	ip, r3, r5, r3
 801b282:	089b      	lsrs	r3, r3, #2
 801b284:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801b288:	fb0c 1313 	mls	r3, ip, r3, r1
 801b28c:	b2d9      	uxtb	r1, r3
 801b28e:	4288      	cmp	r0, r1
 801b290:	f43f af3d 	beq.w	801b10e <uxr_read_framed_msg+0x34a>
 801b294:	3202      	adds	r2, #2
 801b296:	4423      	add	r3, r4
 801b298:	0850      	lsrs	r0, r2, #1
 801b29a:	789b      	ldrb	r3, [r3, #2]
 801b29c:	fba5 1000 	umull	r1, r0, r5, r0
 801b2a0:	0880      	lsrs	r0, r0, #2
 801b2a2:	fb0c 2210 	mls	r2, ip, r0, r2
 801b2a6:	2b7e      	cmp	r3, #126	@ 0x7e
 801b2a8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801b2ac:	d016      	beq.n	801b2dc <uxr_read_framed_msg+0x518>
 801b2ae:	f083 0120 	eor.w	r1, r3, #32
 801b2b2:	e68b      	b.n	801afcc <uxr_read_framed_msg+0x208>
 801b2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b2b6:	9300      	str	r3, [sp, #0]
 801b2b8:	2302      	movs	r3, #2
 801b2ba:	9301      	str	r3, [sp, #4]
 801b2bc:	464a      	mov	r2, r9
 801b2be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2c0:	4641      	mov	r1, r8
 801b2c2:	4620      	mov	r0, r4
 801b2c4:	f7ff fcfc 	bl	801acc0 <uxr_framing_read_transport>
 801b2c8:	2800      	cmp	r0, #0
 801b2ca:	f47f aef6 	bne.w	801b0ba <uxr_read_framed_msg+0x2f6>
 801b2ce:	2301      	movs	r3, #1
 801b2d0:	7023      	strb	r3, [r4, #0]
 801b2d2:	e588      	b.n	801ade6 <uxr_read_framed_msg+0x22>
 801b2d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b2d6:	9300      	str	r3, [sp, #0]
 801b2d8:	2301      	movs	r3, #1
 801b2da:	e7ee      	b.n	801b2ba <uxr_read_framed_msg+0x4f6>
 801b2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b2de:	9300      	str	r3, [sp, #0]
 801b2e0:	2303      	movs	r3, #3
 801b2e2:	e7ea      	b.n	801b2ba <uxr_read_framed_msg+0x4f6>
 801b2e4:	ee17 8a90 	vmov	r8, s15
 801b2e8:	e6ae      	b.n	801b048 <uxr_read_framed_msg+0x284>
 801b2ea:	bf00      	nop

0801b2ec <rcl_get_default_domain_id>:
 801b2ec:	b530      	push	{r4, r5, lr}
 801b2ee:	b083      	sub	sp, #12
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	9300      	str	r3, [sp, #0]
 801b2f4:	b1d0      	cbz	r0, 801b32c <rcl_get_default_domain_id+0x40>
 801b2f6:	4604      	mov	r4, r0
 801b2f8:	4669      	mov	r1, sp
 801b2fa:	4815      	ldr	r0, [pc, #84]	@ (801b350 <rcl_get_default_domain_id+0x64>)
 801b2fc:	f7fc fc40 	bl	8017b80 <rcutils_get_env>
 801b300:	4602      	mov	r2, r0
 801b302:	b110      	cbz	r0, 801b30a <rcl_get_default_domain_id+0x1e>
 801b304:	2001      	movs	r0, #1
 801b306:	b003      	add	sp, #12
 801b308:	bd30      	pop	{r4, r5, pc}
 801b30a:	9b00      	ldr	r3, [sp, #0]
 801b30c:	b18b      	cbz	r3, 801b332 <rcl_get_default_domain_id+0x46>
 801b30e:	7818      	ldrb	r0, [r3, #0]
 801b310:	2800      	cmp	r0, #0
 801b312:	d0f8      	beq.n	801b306 <rcl_get_default_domain_id+0x1a>
 801b314:	a901      	add	r1, sp, #4
 801b316:	4618      	mov	r0, r3
 801b318:	9201      	str	r2, [sp, #4]
 801b31a:	f000 fe6d 	bl	801bff8 <strtoul>
 801b31e:	4605      	mov	r5, r0
 801b320:	b150      	cbz	r0, 801b338 <rcl_get_default_domain_id+0x4c>
 801b322:	1c43      	adds	r3, r0, #1
 801b324:	d00d      	beq.n	801b342 <rcl_get_default_domain_id+0x56>
 801b326:	6025      	str	r5, [r4, #0]
 801b328:	2000      	movs	r0, #0
 801b32a:	e7ec      	b.n	801b306 <rcl_get_default_domain_id+0x1a>
 801b32c:	200b      	movs	r0, #11
 801b32e:	b003      	add	sp, #12
 801b330:	bd30      	pop	{r4, r5, pc}
 801b332:	4618      	mov	r0, r3
 801b334:	b003      	add	sp, #12
 801b336:	bd30      	pop	{r4, r5, pc}
 801b338:	9b01      	ldr	r3, [sp, #4]
 801b33a:	781b      	ldrb	r3, [r3, #0]
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d0f2      	beq.n	801b326 <rcl_get_default_domain_id+0x3a>
 801b340:	e7e0      	b.n	801b304 <rcl_get_default_domain_id+0x18>
 801b342:	f001 f8ab 	bl	801c49c <__errno>
 801b346:	6803      	ldr	r3, [r0, #0]
 801b348:	2b22      	cmp	r3, #34	@ 0x22
 801b34a:	d1ec      	bne.n	801b326 <rcl_get_default_domain_id+0x3a>
 801b34c:	e7da      	b.n	801b304 <rcl_get_default_domain_id+0x18>
 801b34e:	bf00      	nop
 801b350:	0801da90 	.word	0x0801da90

0801b354 <rcl_expand_topic_name>:
 801b354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b358:	b08b      	sub	sp, #44	@ 0x2c
 801b35a:	9306      	str	r3, [sp, #24]
 801b35c:	2800      	cmp	r0, #0
 801b35e:	f000 80ad 	beq.w	801b4bc <rcl_expand_topic_name+0x168>
 801b362:	460e      	mov	r6, r1
 801b364:	2900      	cmp	r1, #0
 801b366:	f000 80a9 	beq.w	801b4bc <rcl_expand_topic_name+0x168>
 801b36a:	4617      	mov	r7, r2
 801b36c:	2a00      	cmp	r2, #0
 801b36e:	f000 80a5 	beq.w	801b4bc <rcl_expand_topic_name+0x168>
 801b372:	2b00      	cmp	r3, #0
 801b374:	f000 80a2 	beq.w	801b4bc <rcl_expand_topic_name+0x168>
 801b378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	f000 809e 	beq.w	801b4bc <rcl_expand_topic_name+0x168>
 801b380:	2200      	movs	r2, #0
 801b382:	a909      	add	r1, sp, #36	@ 0x24
 801b384:	4680      	mov	r8, r0
 801b386:	f000 f9fb 	bl	801b780 <rcl_validate_topic_name>
 801b38a:	4604      	mov	r4, r0
 801b38c:	2800      	cmp	r0, #0
 801b38e:	f040 8096 	bne.w	801b4be <rcl_expand_topic_name+0x16a>
 801b392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b394:	2b00      	cmp	r3, #0
 801b396:	f040 809a 	bne.w	801b4ce <rcl_expand_topic_name+0x17a>
 801b39a:	4602      	mov	r2, r0
 801b39c:	a909      	add	r1, sp, #36	@ 0x24
 801b39e:	4630      	mov	r0, r6
 801b3a0:	f7fd f83c 	bl	801841c <rmw_validate_node_name>
 801b3a4:	2800      	cmp	r0, #0
 801b3a6:	f040 808e 	bne.w	801b4c6 <rcl_expand_topic_name+0x172>
 801b3aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b3ac:	2a00      	cmp	r2, #0
 801b3ae:	f040 8093 	bne.w	801b4d8 <rcl_expand_topic_name+0x184>
 801b3b2:	a909      	add	r1, sp, #36	@ 0x24
 801b3b4:	4638      	mov	r0, r7
 801b3b6:	f7fd f813 	bl	80183e0 <rmw_validate_namespace>
 801b3ba:	2800      	cmp	r0, #0
 801b3bc:	f040 8083 	bne.w	801b4c6 <rcl_expand_topic_name+0x172>
 801b3c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801b3c2:	2c00      	cmp	r4, #0
 801b3c4:	f040 80ed 	bne.w	801b5a2 <rcl_expand_topic_name+0x24e>
 801b3c8:	217b      	movs	r1, #123	@ 0x7b
 801b3ca:	4640      	mov	r0, r8
 801b3cc:	f000 ffda 	bl	801c384 <strchr>
 801b3d0:	f898 3000 	ldrb.w	r3, [r8]
 801b3d4:	2b2f      	cmp	r3, #47	@ 0x2f
 801b3d6:	4605      	mov	r5, r0
 801b3d8:	f000 809e 	beq.w	801b518 <rcl_expand_topic_name+0x1c4>
 801b3dc:	2b7e      	cmp	r3, #126	@ 0x7e
 801b3de:	f040 80a2 	bne.w	801b526 <rcl_expand_topic_name+0x1d2>
 801b3e2:	4638      	mov	r0, r7
 801b3e4:	f7e4 fefe 	bl	80001e4 <strlen>
 801b3e8:	4a82      	ldr	r2, [pc, #520]	@ (801b5f4 <rcl_expand_topic_name+0x2a0>)
 801b3ea:	4b83      	ldr	r3, [pc, #524]	@ (801b5f8 <rcl_expand_topic_name+0x2a4>)
 801b3ec:	2801      	cmp	r0, #1
 801b3ee:	bf18      	it	ne
 801b3f0:	4613      	movne	r3, r2
 801b3f2:	9302      	str	r3, [sp, #8]
 801b3f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b3f6:	9300      	str	r3, [sp, #0]
 801b3f8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801b3fc:	f108 0301 	add.w	r3, r8, #1
 801b400:	9305      	str	r3, [sp, #20]
 801b402:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b406:	9301      	str	r3, [sp, #4]
 801b408:	ab14      	add	r3, sp, #80	@ 0x50
 801b40a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b40c:	f7fc fbd0 	bl	8017bb0 <rcutils_format_string_limit>
 801b410:	4682      	mov	sl, r0
 801b412:	2800      	cmp	r0, #0
 801b414:	f000 80c7 	beq.w	801b5a6 <rcl_expand_topic_name+0x252>
 801b418:	2d00      	cmp	r5, #0
 801b41a:	f000 80a2 	beq.w	801b562 <rcl_expand_topic_name+0x20e>
 801b41e:	217b      	movs	r1, #123	@ 0x7b
 801b420:	f000 ffb0 	bl	801c384 <strchr>
 801b424:	46d1      	mov	r9, sl
 801b426:	4605      	mov	r5, r0
 801b428:	9407      	str	r4, [sp, #28]
 801b42a:	46d3      	mov	fp, sl
 801b42c:	464c      	mov	r4, r9
 801b42e:	2d00      	cmp	r5, #0
 801b430:	f000 80be 	beq.w	801b5b0 <rcl_expand_topic_name+0x25c>
 801b434:	217d      	movs	r1, #125	@ 0x7d
 801b436:	4620      	mov	r0, r4
 801b438:	f000 ffa4 	bl	801c384 <strchr>
 801b43c:	eba0 0905 	sub.w	r9, r0, r5
 801b440:	f109 0a01 	add.w	sl, r9, #1
 801b444:	486d      	ldr	r0, [pc, #436]	@ (801b5fc <rcl_expand_topic_name+0x2a8>)
 801b446:	4652      	mov	r2, sl
 801b448:	4629      	mov	r1, r5
 801b44a:	f000 ffa8 	bl	801c39e <strncmp>
 801b44e:	2800      	cmp	r0, #0
 801b450:	d067      	beq.n	801b522 <rcl_expand_topic_name+0x1ce>
 801b452:	486b      	ldr	r0, [pc, #428]	@ (801b600 <rcl_expand_topic_name+0x2ac>)
 801b454:	4652      	mov	r2, sl
 801b456:	4629      	mov	r1, r5
 801b458:	f000 ffa1 	bl	801c39e <strncmp>
 801b45c:	b130      	cbz	r0, 801b46c <rcl_expand_topic_name+0x118>
 801b45e:	4869      	ldr	r0, [pc, #420]	@ (801b604 <rcl_expand_topic_name+0x2b0>)
 801b460:	4652      	mov	r2, sl
 801b462:	4629      	mov	r1, r5
 801b464:	f000 ff9b 	bl	801c39e <strncmp>
 801b468:	2800      	cmp	r0, #0
 801b46a:	d137      	bne.n	801b4dc <rcl_expand_topic_name+0x188>
 801b46c:	46b9      	mov	r9, r7
 801b46e:	ab16      	add	r3, sp, #88	@ 0x58
 801b470:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b474:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b478:	ab14      	add	r3, sp, #80	@ 0x50
 801b47a:	4628      	mov	r0, r5
 801b47c:	cb0c      	ldmia	r3, {r2, r3}
 801b47e:	4651      	mov	r1, sl
 801b480:	f7fc fcd2 	bl	8017e28 <rcutils_strndup>
 801b484:	4605      	mov	r5, r0
 801b486:	2800      	cmp	r0, #0
 801b488:	f000 809c 	beq.w	801b5c4 <rcl_expand_topic_name+0x270>
 801b48c:	464a      	mov	r2, r9
 801b48e:	4620      	mov	r0, r4
 801b490:	ab14      	add	r3, sp, #80	@ 0x50
 801b492:	4629      	mov	r1, r5
 801b494:	f7fc fbc6 	bl	8017c24 <rcutils_repl_str>
 801b498:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b49a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b49c:	4604      	mov	r4, r0
 801b49e:	4628      	mov	r0, r5
 801b4a0:	4798      	blx	r3
 801b4a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b4a4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b4a6:	4658      	mov	r0, fp
 801b4a8:	4798      	blx	r3
 801b4aa:	2c00      	cmp	r4, #0
 801b4ac:	d07b      	beq.n	801b5a6 <rcl_expand_topic_name+0x252>
 801b4ae:	217b      	movs	r1, #123	@ 0x7b
 801b4b0:	4620      	mov	r0, r4
 801b4b2:	f000 ff67 	bl	801c384 <strchr>
 801b4b6:	46a3      	mov	fp, r4
 801b4b8:	4605      	mov	r5, r0
 801b4ba:	e7b8      	b.n	801b42e <rcl_expand_topic_name+0xda>
 801b4bc:	240b      	movs	r4, #11
 801b4be:	4620      	mov	r0, r4
 801b4c0:	b00b      	add	sp, #44	@ 0x2c
 801b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4c6:	f7f9 ff35 	bl	8015334 <rcl_convert_rmw_ret_to_rcl_ret>
 801b4ca:	4604      	mov	r4, r0
 801b4cc:	e7f7      	b.n	801b4be <rcl_expand_topic_name+0x16a>
 801b4ce:	2467      	movs	r4, #103	@ 0x67
 801b4d0:	4620      	mov	r0, r4
 801b4d2:	b00b      	add	sp, #44	@ 0x2c
 801b4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4d8:	24c9      	movs	r4, #201	@ 0xc9
 801b4da:	e7f0      	b.n	801b4be <rcl_expand_topic_name+0x16a>
 801b4dc:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801b4e0:	9806      	ldr	r0, [sp, #24]
 801b4e2:	1c69      	adds	r1, r5, #1
 801b4e4:	f7fc fdba 	bl	801805c <rcutils_string_map_getn>
 801b4e8:	4681      	mov	r9, r0
 801b4ea:	2800      	cmp	r0, #0
 801b4ec:	d1bf      	bne.n	801b46e <rcl_expand_topic_name+0x11a>
 801b4ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b4f0:	aa16      	add	r2, sp, #88	@ 0x58
 801b4f2:	6018      	str	r0, [r3, #0]
 801b4f4:	ca07      	ldmia	r2, {r0, r1, r2}
 801b4f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b4fa:	ab14      	add	r3, sp, #80	@ 0x50
 801b4fc:	cb0c      	ldmia	r3, {r2, r3}
 801b4fe:	4651      	mov	r1, sl
 801b500:	4628      	mov	r0, r5
 801b502:	f7fc fc91 	bl	8017e28 <rcutils_strndup>
 801b506:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b508:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b50a:	4798      	blx	r3
 801b50c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b50e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b510:	4658      	mov	r0, fp
 801b512:	2469      	movs	r4, #105	@ 0x69
 801b514:	4798      	blx	r3
 801b516:	e7d2      	b.n	801b4be <rcl_expand_topic_name+0x16a>
 801b518:	2800      	cmp	r0, #0
 801b51a:	d05b      	beq.n	801b5d4 <rcl_expand_topic_name+0x280>
 801b51c:	46c1      	mov	r9, r8
 801b51e:	46a2      	mov	sl, r4
 801b520:	e782      	b.n	801b428 <rcl_expand_topic_name+0xd4>
 801b522:	46b1      	mov	r9, r6
 801b524:	e7a3      	b.n	801b46e <rcl_expand_topic_name+0x11a>
 801b526:	2800      	cmp	r0, #0
 801b528:	d1f8      	bne.n	801b51c <rcl_expand_topic_name+0x1c8>
 801b52a:	4638      	mov	r0, r7
 801b52c:	f7e4 fe5a 	bl	80001e4 <strlen>
 801b530:	4a35      	ldr	r2, [pc, #212]	@ (801b608 <rcl_expand_topic_name+0x2b4>)
 801b532:	4b36      	ldr	r3, [pc, #216]	@ (801b60c <rcl_expand_topic_name+0x2b8>)
 801b534:	f8cd 8010 	str.w	r8, [sp, #16]
 801b538:	2801      	cmp	r0, #1
 801b53a:	bf18      	it	ne
 801b53c:	4613      	movne	r3, r2
 801b53e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b542:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801b546:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b548:	9703      	str	r7, [sp, #12]
 801b54a:	9200      	str	r2, [sp, #0]
 801b54c:	ab14      	add	r3, sp, #80	@ 0x50
 801b54e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b550:	f7fc fb2e 	bl	8017bb0 <rcutils_format_string_limit>
 801b554:	4682      	mov	sl, r0
 801b556:	4653      	mov	r3, sl
 801b558:	b32b      	cbz	r3, 801b5a6 <rcl_expand_topic_name+0x252>
 801b55a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b55c:	f8c3 a000 	str.w	sl, [r3]
 801b560:	e7ad      	b.n	801b4be <rcl_expand_topic_name+0x16a>
 801b562:	f89a 3000 	ldrb.w	r3, [sl]
 801b566:	2b2f      	cmp	r3, #47	@ 0x2f
 801b568:	d0f7      	beq.n	801b55a <rcl_expand_topic_name+0x206>
 801b56a:	4638      	mov	r0, r7
 801b56c:	f7e4 fe3a 	bl	80001e4 <strlen>
 801b570:	4a25      	ldr	r2, [pc, #148]	@ (801b608 <rcl_expand_topic_name+0x2b4>)
 801b572:	4b26      	ldr	r3, [pc, #152]	@ (801b60c <rcl_expand_topic_name+0x2b8>)
 801b574:	f8cd a010 	str.w	sl, [sp, #16]
 801b578:	2801      	cmp	r0, #1
 801b57a:	bf18      	it	ne
 801b57c:	4613      	movne	r3, r2
 801b57e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b582:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801b586:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b588:	9703      	str	r7, [sp, #12]
 801b58a:	9200      	str	r2, [sp, #0]
 801b58c:	ab14      	add	r3, sp, #80	@ 0x50
 801b58e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b590:	f7fc fb0e 	bl	8017bb0 <rcutils_format_string_limit>
 801b594:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b596:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b598:	4605      	mov	r5, r0
 801b59a:	4650      	mov	r0, sl
 801b59c:	4798      	blx	r3
 801b59e:	46aa      	mov	sl, r5
 801b5a0:	e7d9      	b.n	801b556 <rcl_expand_topic_name+0x202>
 801b5a2:	24ca      	movs	r4, #202	@ 0xca
 801b5a4:	e78b      	b.n	801b4be <rcl_expand_topic_name+0x16a>
 801b5a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801b5a8:	2300      	movs	r3, #0
 801b5aa:	6013      	str	r3, [r2, #0]
 801b5ac:	240a      	movs	r4, #10
 801b5ae:	e786      	b.n	801b4be <rcl_expand_topic_name+0x16a>
 801b5b0:	465b      	mov	r3, fp
 801b5b2:	9c07      	ldr	r4, [sp, #28]
 801b5b4:	46da      	mov	sl, fp
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d1d3      	bne.n	801b562 <rcl_expand_topic_name+0x20e>
 801b5ba:	f898 3000 	ldrb.w	r3, [r8]
 801b5be:	2b2f      	cmp	r3, #47	@ 0x2f
 801b5c0:	d0cb      	beq.n	801b55a <rcl_expand_topic_name+0x206>
 801b5c2:	e7b2      	b.n	801b52a <rcl_expand_topic_name+0x1d6>
 801b5c4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801b5c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b5ca:	6015      	str	r5, [r2, #0]
 801b5cc:	4658      	mov	r0, fp
 801b5ce:	4798      	blx	r3
 801b5d0:	240a      	movs	r4, #10
 801b5d2:	e774      	b.n	801b4be <rcl_expand_topic_name+0x16a>
 801b5d4:	ab17      	add	r3, sp, #92	@ 0x5c
 801b5d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b5da:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b5de:	ab14      	add	r3, sp, #80	@ 0x50
 801b5e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b5e2:	4640      	mov	r0, r8
 801b5e4:	f7fc fbfe 	bl	8017de4 <rcutils_strdup>
 801b5e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b5ea:	2800      	cmp	r0, #0
 801b5ec:	6018      	str	r0, [r3, #0]
 801b5ee:	bf08      	it	eq
 801b5f0:	240a      	moveq	r4, #10
 801b5f2:	e764      	b.n	801b4be <rcl_expand_topic_name+0x16a>
 801b5f4:	0801daa0 	.word	0x0801daa0
 801b5f8:	0801d560 	.word	0x0801d560
 801b5fc:	0801daa8 	.word	0x0801daa8
 801b600:	0801dab0 	.word	0x0801dab0
 801b604:	0801dab8 	.word	0x0801dab8
 801b608:	0801d754 	.word	0x0801d754
 801b60c:	0801d570 	.word	0x0801d570

0801b610 <rcl_get_default_topic_name_substitutions>:
 801b610:	2800      	cmp	r0, #0
 801b612:	bf0c      	ite	eq
 801b614:	200b      	moveq	r0, #11
 801b616:	2000      	movne	r0, #0
 801b618:	4770      	bx	lr
 801b61a:	bf00      	nop

0801b61c <rcl_get_zero_initialized_guard_condition>:
 801b61c:	4a03      	ldr	r2, [pc, #12]	@ (801b62c <rcl_get_zero_initialized_guard_condition+0x10>)
 801b61e:	4603      	mov	r3, r0
 801b620:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b624:	e883 0003 	stmia.w	r3, {r0, r1}
 801b628:	4618      	mov	r0, r3
 801b62a:	4770      	bx	lr
 801b62c:	0801e0bc 	.word	0x0801e0bc

0801b630 <rcl_guard_condition_init_from_rmw>:
 801b630:	b082      	sub	sp, #8
 801b632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b636:	b086      	sub	sp, #24
 801b638:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b63c:	4604      	mov	r4, r0
 801b63e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b642:	460e      	mov	r6, r1
 801b644:	4617      	mov	r7, r2
 801b646:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b64a:	f10d 0e04 	add.w	lr, sp, #4
 801b64e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b652:	f8dc 3000 	ldr.w	r3, [ip]
 801b656:	f8ce 3000 	str.w	r3, [lr]
 801b65a:	a801      	add	r0, sp, #4
 801b65c:	f7f6 f884 	bl	8011768 <rcutils_allocator_is_valid>
 801b660:	b350      	cbz	r0, 801b6b8 <rcl_guard_condition_init_from_rmw+0x88>
 801b662:	b34c      	cbz	r4, 801b6b8 <rcl_guard_condition_init_from_rmw+0x88>
 801b664:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b668:	f1b8 0f00 	cmp.w	r8, #0
 801b66c:	d11e      	bne.n	801b6ac <rcl_guard_condition_init_from_rmw+0x7c>
 801b66e:	b31f      	cbz	r7, 801b6b8 <rcl_guard_condition_init_from_rmw+0x88>
 801b670:	4638      	mov	r0, r7
 801b672:	f7f9 fe7d 	bl	8015370 <rcl_context_is_valid>
 801b676:	b328      	cbz	r0, 801b6c4 <rcl_guard_condition_init_from_rmw+0x94>
 801b678:	9b01      	ldr	r3, [sp, #4]
 801b67a:	9905      	ldr	r1, [sp, #20]
 801b67c:	201c      	movs	r0, #28
 801b67e:	4798      	blx	r3
 801b680:	4605      	mov	r5, r0
 801b682:	6060      	str	r0, [r4, #4]
 801b684:	b358      	cbz	r0, 801b6de <rcl_guard_condition_init_from_rmw+0xae>
 801b686:	b1fe      	cbz	r6, 801b6c8 <rcl_guard_condition_init_from_rmw+0x98>
 801b688:	6006      	str	r6, [r0, #0]
 801b68a:	f880 8004 	strb.w	r8, [r0, #4]
 801b68e:	ac01      	add	r4, sp, #4
 801b690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b692:	f105 0c08 	add.w	ip, r5, #8
 801b696:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b69a:	6823      	ldr	r3, [r4, #0]
 801b69c:	f8cc 3000 	str.w	r3, [ip]
 801b6a0:	2000      	movs	r0, #0
 801b6a2:	b006      	add	sp, #24
 801b6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6a8:	b002      	add	sp, #8
 801b6aa:	4770      	bx	lr
 801b6ac:	2064      	movs	r0, #100	@ 0x64
 801b6ae:	b006      	add	sp, #24
 801b6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6b4:	b002      	add	sp, #8
 801b6b6:	4770      	bx	lr
 801b6b8:	200b      	movs	r0, #11
 801b6ba:	b006      	add	sp, #24
 801b6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6c0:	b002      	add	sp, #8
 801b6c2:	4770      	bx	lr
 801b6c4:	2065      	movs	r0, #101	@ 0x65
 801b6c6:	e7f2      	b.n	801b6ae <rcl_guard_condition_init_from_rmw+0x7e>
 801b6c8:	6838      	ldr	r0, [r7, #0]
 801b6ca:	3028      	adds	r0, #40	@ 0x28
 801b6cc:	f000 fa3a 	bl	801bb44 <rmw_create_guard_condition>
 801b6d0:	6028      	str	r0, [r5, #0]
 801b6d2:	6865      	ldr	r5, [r4, #4]
 801b6d4:	682e      	ldr	r6, [r5, #0]
 801b6d6:	b126      	cbz	r6, 801b6e2 <rcl_guard_condition_init_from_rmw+0xb2>
 801b6d8:	2301      	movs	r3, #1
 801b6da:	712b      	strb	r3, [r5, #4]
 801b6dc:	e7d7      	b.n	801b68e <rcl_guard_condition_init_from_rmw+0x5e>
 801b6de:	200a      	movs	r0, #10
 801b6e0:	e7e5      	b.n	801b6ae <rcl_guard_condition_init_from_rmw+0x7e>
 801b6e2:	4628      	mov	r0, r5
 801b6e4:	9b02      	ldr	r3, [sp, #8]
 801b6e6:	9905      	ldr	r1, [sp, #20]
 801b6e8:	4798      	blx	r3
 801b6ea:	6066      	str	r6, [r4, #4]
 801b6ec:	2001      	movs	r0, #1
 801b6ee:	e7de      	b.n	801b6ae <rcl_guard_condition_init_from_rmw+0x7e>

0801b6f0 <rcl_guard_condition_fini>:
 801b6f0:	b570      	push	{r4, r5, r6, lr}
 801b6f2:	b082      	sub	sp, #8
 801b6f4:	b1f0      	cbz	r0, 801b734 <rcl_guard_condition_fini+0x44>
 801b6f6:	6843      	ldr	r3, [r0, #4]
 801b6f8:	4604      	mov	r4, r0
 801b6fa:	b163      	cbz	r3, 801b716 <rcl_guard_condition_fini+0x26>
 801b6fc:	6818      	ldr	r0, [r3, #0]
 801b6fe:	68de      	ldr	r6, [r3, #12]
 801b700:	6999      	ldr	r1, [r3, #24]
 801b702:	b160      	cbz	r0, 801b71e <rcl_guard_condition_fini+0x2e>
 801b704:	791d      	ldrb	r5, [r3, #4]
 801b706:	b965      	cbnz	r5, 801b722 <rcl_guard_condition_fini+0x32>
 801b708:	4618      	mov	r0, r3
 801b70a:	47b0      	blx	r6
 801b70c:	2300      	movs	r3, #0
 801b70e:	4628      	mov	r0, r5
 801b710:	6063      	str	r3, [r4, #4]
 801b712:	b002      	add	sp, #8
 801b714:	bd70      	pop	{r4, r5, r6, pc}
 801b716:	461d      	mov	r5, r3
 801b718:	4628      	mov	r0, r5
 801b71a:	b002      	add	sp, #8
 801b71c:	bd70      	pop	{r4, r5, r6, pc}
 801b71e:	4605      	mov	r5, r0
 801b720:	e7f2      	b.n	801b708 <rcl_guard_condition_fini+0x18>
 801b722:	9101      	str	r1, [sp, #4]
 801b724:	f000 fa22 	bl	801bb6c <rmw_destroy_guard_condition>
 801b728:	1e05      	subs	r5, r0, #0
 801b72a:	6863      	ldr	r3, [r4, #4]
 801b72c:	9901      	ldr	r1, [sp, #4]
 801b72e:	bf18      	it	ne
 801b730:	2501      	movne	r5, #1
 801b732:	e7e9      	b.n	801b708 <rcl_guard_condition_fini+0x18>
 801b734:	250b      	movs	r5, #11
 801b736:	4628      	mov	r0, r5
 801b738:	b002      	add	sp, #8
 801b73a:	bd70      	pop	{r4, r5, r6, pc}

0801b73c <rcl_guard_condition_get_default_options>:
 801b73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b73e:	b087      	sub	sp, #28
 801b740:	4606      	mov	r6, r0
 801b742:	4668      	mov	r0, sp
 801b744:	f7f6 f802 	bl	801174c <rcutils_get_default_allocator>
 801b748:	4b09      	ldr	r3, [pc, #36]	@ (801b770 <rcl_guard_condition_get_default_options+0x34>)
 801b74a:	46ee      	mov	lr, sp
 801b74c:	469c      	mov	ip, r3
 801b74e:	461d      	mov	r5, r3
 801b750:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b754:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b75a:	4634      	mov	r4, r6
 801b75c:	f8de 7000 	ldr.w	r7, [lr]
 801b760:	f8cc 7000 	str.w	r7, [ip]
 801b764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b766:	4630      	mov	r0, r6
 801b768:	6027      	str	r7, [r4, #0]
 801b76a:	b007      	add	sp, #28
 801b76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b76e:	bf00      	nop
 801b770:	2000e704 	.word	0x2000e704

0801b774 <rcl_guard_condition_get_rmw_handle>:
 801b774:	b110      	cbz	r0, 801b77c <rcl_guard_condition_get_rmw_handle+0x8>
 801b776:	6840      	ldr	r0, [r0, #4]
 801b778:	b100      	cbz	r0, 801b77c <rcl_guard_condition_get_rmw_handle+0x8>
 801b77a:	6800      	ldr	r0, [r0, #0]
 801b77c:	4770      	bx	lr
 801b77e:	bf00      	nop

0801b780 <rcl_validate_topic_name>:
 801b780:	2800      	cmp	r0, #0
 801b782:	d07a      	beq.n	801b87a <rcl_validate_topic_name+0xfa>
 801b784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b788:	460e      	mov	r6, r1
 801b78a:	2900      	cmp	r1, #0
 801b78c:	d07c      	beq.n	801b888 <rcl_validate_topic_name+0x108>
 801b78e:	4617      	mov	r7, r2
 801b790:	4605      	mov	r5, r0
 801b792:	f7e4 fd27 	bl	80001e4 <strlen>
 801b796:	b1b0      	cbz	r0, 801b7c6 <rcl_validate_topic_name+0x46>
 801b798:	f895 9000 	ldrb.w	r9, [r5]
 801b79c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801b920 <rcl_validate_topic_name+0x1a0>
 801b7a0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801b7a4:	f013 0304 	ands.w	r3, r3, #4
 801b7a8:	d169      	bne.n	801b87e <rcl_validate_topic_name+0xfe>
 801b7aa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801b7ae:	f815 2008 	ldrb.w	r2, [r5, r8]
 801b7b2:	2a2f      	cmp	r2, #47	@ 0x2f
 801b7b4:	d10e      	bne.n	801b7d4 <rcl_validate_topic_name+0x54>
 801b7b6:	2202      	movs	r2, #2
 801b7b8:	6032      	str	r2, [r6, #0]
 801b7ba:	b36f      	cbz	r7, 801b818 <rcl_validate_topic_name+0x98>
 801b7bc:	f8c7 8000 	str.w	r8, [r7]
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7c6:	2301      	movs	r3, #1
 801b7c8:	6033      	str	r3, [r6, #0]
 801b7ca:	b32f      	cbz	r7, 801b818 <rcl_validate_topic_name+0x98>
 801b7cc:	2000      	movs	r0, #0
 801b7ce:	6038      	str	r0, [r7, #0]
 801b7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7d4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801b7d8:	461c      	mov	r4, r3
 801b7da:	4619      	mov	r1, r3
 801b7dc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b7e0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801b7e4:	f1be 0f09 	cmp.w	lr, #9
 801b7e8:	d919      	bls.n	801b81e <rcl_validate_topic_name+0x9e>
 801b7ea:	f022 0e20 	bic.w	lr, r2, #32
 801b7ee:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801b7f2:	f1be 0f19 	cmp.w	lr, #25
 801b7f6:	d912      	bls.n	801b81e <rcl_validate_topic_name+0x9e>
 801b7f8:	2a5f      	cmp	r2, #95	@ 0x5f
 801b7fa:	d019      	beq.n	801b830 <rcl_validate_topic_name+0xb0>
 801b7fc:	2a2f      	cmp	r2, #47	@ 0x2f
 801b7fe:	d051      	beq.n	801b8a4 <rcl_validate_topic_name+0x124>
 801b800:	2a7e      	cmp	r2, #126	@ 0x7e
 801b802:	d048      	beq.n	801b896 <rcl_validate_topic_name+0x116>
 801b804:	2a7b      	cmp	r2, #123	@ 0x7b
 801b806:	d054      	beq.n	801b8b2 <rcl_validate_topic_name+0x132>
 801b808:	2a7d      	cmp	r2, #125	@ 0x7d
 801b80a:	d161      	bne.n	801b8d0 <rcl_validate_topic_name+0x150>
 801b80c:	2c00      	cmp	r4, #0
 801b80e:	d155      	bne.n	801b8bc <rcl_validate_topic_name+0x13c>
 801b810:	2305      	movs	r3, #5
 801b812:	6033      	str	r3, [r6, #0]
 801b814:	b107      	cbz	r7, 801b818 <rcl_validate_topic_name+0x98>
 801b816:	6039      	str	r1, [r7, #0]
 801b818:	2000      	movs	r0, #0
 801b81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b81e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b822:	0752      	lsls	r2, r2, #29
 801b824:	d504      	bpl.n	801b830 <rcl_validate_topic_name+0xb0>
 801b826:	b11c      	cbz	r4, 801b830 <rcl_validate_topic_name+0xb0>
 801b828:	b111      	cbz	r1, 801b830 <rcl_validate_topic_name+0xb0>
 801b82a:	1e4a      	subs	r2, r1, #1
 801b82c:	429a      	cmp	r2, r3
 801b82e:	d02d      	beq.n	801b88c <rcl_validate_topic_name+0x10c>
 801b830:	3101      	adds	r1, #1
 801b832:	4288      	cmp	r0, r1
 801b834:	d1d2      	bne.n	801b7dc <rcl_validate_topic_name+0x5c>
 801b836:	2c00      	cmp	r4, #0
 801b838:	d145      	bne.n	801b8c6 <rcl_validate_topic_name+0x146>
 801b83a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801b83e:	d04f      	beq.n	801b8e0 <rcl_validate_topic_name+0x160>
 801b840:	4620      	mov	r0, r4
 801b842:	2301      	movs	r3, #1
 801b844:	e006      	b.n	801b854 <rcl_validate_topic_name+0xd4>
 801b846:	428b      	cmp	r3, r1
 801b848:	f105 0501 	add.w	r5, r5, #1
 801b84c:	f103 0201 	add.w	r2, r3, #1
 801b850:	d236      	bcs.n	801b8c0 <rcl_validate_topic_name+0x140>
 801b852:	4613      	mov	r3, r2
 801b854:	4580      	cmp	r8, r0
 801b856:	f100 0001 	add.w	r0, r0, #1
 801b85a:	d0f4      	beq.n	801b846 <rcl_validate_topic_name+0xc6>
 801b85c:	782a      	ldrb	r2, [r5, #0]
 801b85e:	2a2f      	cmp	r2, #47	@ 0x2f
 801b860:	d1f1      	bne.n	801b846 <rcl_validate_topic_name+0xc6>
 801b862:	786a      	ldrb	r2, [r5, #1]
 801b864:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b868:	0754      	lsls	r4, r2, #29
 801b86a:	d5ec      	bpl.n	801b846 <rcl_validate_topic_name+0xc6>
 801b86c:	2204      	movs	r2, #4
 801b86e:	6032      	str	r2, [r6, #0]
 801b870:	2f00      	cmp	r7, #0
 801b872:	d0d1      	beq.n	801b818 <rcl_validate_topic_name+0x98>
 801b874:	603b      	str	r3, [r7, #0]
 801b876:	2000      	movs	r0, #0
 801b878:	e7aa      	b.n	801b7d0 <rcl_validate_topic_name+0x50>
 801b87a:	200b      	movs	r0, #11
 801b87c:	4770      	bx	lr
 801b87e:	2304      	movs	r3, #4
 801b880:	6033      	str	r3, [r6, #0]
 801b882:	2f00      	cmp	r7, #0
 801b884:	d1a2      	bne.n	801b7cc <rcl_validate_topic_name+0x4c>
 801b886:	e7c7      	b.n	801b818 <rcl_validate_topic_name+0x98>
 801b888:	200b      	movs	r0, #11
 801b88a:	e7a1      	b.n	801b7d0 <rcl_validate_topic_name+0x50>
 801b88c:	2309      	movs	r3, #9
 801b88e:	6033      	str	r3, [r6, #0]
 801b890:	2f00      	cmp	r7, #0
 801b892:	d1c0      	bne.n	801b816 <rcl_validate_topic_name+0x96>
 801b894:	e7c0      	b.n	801b818 <rcl_validate_topic_name+0x98>
 801b896:	2900      	cmp	r1, #0
 801b898:	d0ca      	beq.n	801b830 <rcl_validate_topic_name+0xb0>
 801b89a:	2306      	movs	r3, #6
 801b89c:	6033      	str	r3, [r6, #0]
 801b89e:	2f00      	cmp	r7, #0
 801b8a0:	d1b9      	bne.n	801b816 <rcl_validate_topic_name+0x96>
 801b8a2:	e7b9      	b.n	801b818 <rcl_validate_topic_name+0x98>
 801b8a4:	2c00      	cmp	r4, #0
 801b8a6:	d0c3      	beq.n	801b830 <rcl_validate_topic_name+0xb0>
 801b8a8:	2308      	movs	r3, #8
 801b8aa:	6033      	str	r3, [r6, #0]
 801b8ac:	2f00      	cmp	r7, #0
 801b8ae:	d1b2      	bne.n	801b816 <rcl_validate_topic_name+0x96>
 801b8b0:	e7b2      	b.n	801b818 <rcl_validate_topic_name+0x98>
 801b8b2:	2c00      	cmp	r4, #0
 801b8b4:	d1f8      	bne.n	801b8a8 <rcl_validate_topic_name+0x128>
 801b8b6:	460b      	mov	r3, r1
 801b8b8:	2401      	movs	r4, #1
 801b8ba:	e7b9      	b.n	801b830 <rcl_validate_topic_name+0xb0>
 801b8bc:	2400      	movs	r4, #0
 801b8be:	e7b7      	b.n	801b830 <rcl_validate_topic_name+0xb0>
 801b8c0:	2000      	movs	r0, #0
 801b8c2:	6030      	str	r0, [r6, #0]
 801b8c4:	e784      	b.n	801b7d0 <rcl_validate_topic_name+0x50>
 801b8c6:	2205      	movs	r2, #5
 801b8c8:	6032      	str	r2, [r6, #0]
 801b8ca:	2f00      	cmp	r7, #0
 801b8cc:	d1d2      	bne.n	801b874 <rcl_validate_topic_name+0xf4>
 801b8ce:	e7a3      	b.n	801b818 <rcl_validate_topic_name+0x98>
 801b8d0:	2c00      	cmp	r4, #0
 801b8d2:	bf14      	ite	ne
 801b8d4:	2308      	movne	r3, #8
 801b8d6:	2303      	moveq	r3, #3
 801b8d8:	6033      	str	r3, [r6, #0]
 801b8da:	2f00      	cmp	r7, #0
 801b8dc:	d19b      	bne.n	801b816 <rcl_validate_topic_name+0x96>
 801b8de:	e79b      	b.n	801b818 <rcl_validate_topic_name+0x98>
 801b8e0:	2301      	movs	r3, #1
 801b8e2:	e00a      	b.n	801b8fa <rcl_validate_topic_name+0x17a>
 801b8e4:	2c01      	cmp	r4, #1
 801b8e6:	d013      	beq.n	801b910 <rcl_validate_topic_name+0x190>
 801b8e8:	4299      	cmp	r1, r3
 801b8ea:	f104 0401 	add.w	r4, r4, #1
 801b8ee:	f105 0501 	add.w	r5, r5, #1
 801b8f2:	f103 0201 	add.w	r2, r3, #1
 801b8f6:	d9e3      	bls.n	801b8c0 <rcl_validate_topic_name+0x140>
 801b8f8:	4613      	mov	r3, r2
 801b8fa:	45a0      	cmp	r8, r4
 801b8fc:	d0f4      	beq.n	801b8e8 <rcl_validate_topic_name+0x168>
 801b8fe:	782a      	ldrb	r2, [r5, #0]
 801b900:	2a2f      	cmp	r2, #47	@ 0x2f
 801b902:	d1ef      	bne.n	801b8e4 <rcl_validate_topic_name+0x164>
 801b904:	786a      	ldrb	r2, [r5, #1]
 801b906:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b90a:	0752      	lsls	r2, r2, #29
 801b90c:	d5ec      	bpl.n	801b8e8 <rcl_validate_topic_name+0x168>
 801b90e:	e7ad      	b.n	801b86c <rcl_validate_topic_name+0xec>
 801b910:	2307      	movs	r3, #7
 801b912:	6033      	str	r3, [r6, #0]
 801b914:	2f00      	cmp	r7, #0
 801b916:	f43f af7f 	beq.w	801b818 <rcl_validate_topic_name+0x98>
 801b91a:	603c      	str	r4, [r7, #0]
 801b91c:	2000      	movs	r0, #0
 801b91e:	e757      	b.n	801b7d0 <rcl_validate_topic_name+0x50>
 801b920:	0801e1a3 	.word	0x0801e1a3

0801b924 <rcutils_string_array_fini>:
 801b924:	b320      	cbz	r0, 801b970 <rcutils_string_array_fini+0x4c>
 801b926:	b570      	push	{r4, r5, r6, lr}
 801b928:	4604      	mov	r4, r0
 801b92a:	6840      	ldr	r0, [r0, #4]
 801b92c:	b1d8      	cbz	r0, 801b966 <rcutils_string_array_fini+0x42>
 801b92e:	f104 0008 	add.w	r0, r4, #8
 801b932:	f7f5 ff19 	bl	8011768 <rcutils_allocator_is_valid>
 801b936:	b1b8      	cbz	r0, 801b968 <rcutils_string_array_fini+0x44>
 801b938:	6823      	ldr	r3, [r4, #0]
 801b93a:	b1bb      	cbz	r3, 801b96c <rcutils_string_array_fini+0x48>
 801b93c:	2500      	movs	r5, #0
 801b93e:	6860      	ldr	r0, [r4, #4]
 801b940:	462e      	mov	r6, r5
 801b942:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b946:	68e3      	ldr	r3, [r4, #12]
 801b948:	69a1      	ldr	r1, [r4, #24]
 801b94a:	4798      	blx	r3
 801b94c:	e9d4 3000 	ldrd	r3, r0, [r4]
 801b950:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801b954:	3501      	adds	r5, #1
 801b956:	429d      	cmp	r5, r3
 801b958:	d3f3      	bcc.n	801b942 <rcutils_string_array_fini+0x1e>
 801b95a:	68e3      	ldr	r3, [r4, #12]
 801b95c:	69a1      	ldr	r1, [r4, #24]
 801b95e:	4798      	blx	r3
 801b960:	2000      	movs	r0, #0
 801b962:	e9c4 0000 	strd	r0, r0, [r4]
 801b966:	bd70      	pop	{r4, r5, r6, pc}
 801b968:	200b      	movs	r0, #11
 801b96a:	bd70      	pop	{r4, r5, r6, pc}
 801b96c:	6860      	ldr	r0, [r4, #4]
 801b96e:	e7f4      	b.n	801b95a <rcutils_string_array_fini+0x36>
 801b970:	200b      	movs	r0, #11
 801b972:	4770      	bx	lr

0801b974 <on_status>:
 801b974:	b082      	sub	sp, #8
 801b976:	b002      	add	sp, #8
 801b978:	4770      	bx	lr
 801b97a:	bf00      	nop

0801b97c <on_topic>:
 801b97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b980:	4a22      	ldr	r2, [pc, #136]	@ (801ba0c <on_topic+0x90>)
 801b982:	b094      	sub	sp, #80	@ 0x50
 801b984:	6812      	ldr	r2, [r2, #0]
 801b986:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801b988:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b98c:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801b990:	b3c2      	cbz	r2, 801ba04 <on_topic+0x88>
 801b992:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801b996:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801b99a:	e001      	b.n	801b9a0 <on_topic+0x24>
 801b99c:	6852      	ldr	r2, [r2, #4]
 801b99e:	b38a      	cbz	r2, 801ba04 <on_topic+0x88>
 801b9a0:	6894      	ldr	r4, [r2, #8]
 801b9a2:	8aa3      	ldrh	r3, [r4, #20]
 801b9a4:	428b      	cmp	r3, r1
 801b9a6:	d1f9      	bne.n	801b99c <on_topic+0x20>
 801b9a8:	7da3      	ldrb	r3, [r4, #22]
 801b9aa:	4283      	cmp	r3, r0
 801b9ac:	d1f6      	bne.n	801b99c <on_topic+0x20>
 801b9ae:	2248      	movs	r2, #72	@ 0x48
 801b9b0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b9b4:	4668      	mov	r0, sp
 801b9b6:	f000 fda6 	bl	801c506 <memcpy>
 801b9ba:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801b9be:	cb0c      	ldmia	r3, {r2, r3}
 801b9c0:	4620      	mov	r0, r4
 801b9c2:	f7f6 fb01 	bl	8011fc8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801b9c6:	4607      	mov	r7, r0
 801b9c8:	b1e0      	cbz	r0, 801ba04 <on_topic+0x88>
 801b9ca:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801b9ce:	4632      	mov	r2, r6
 801b9d0:	4628      	mov	r0, r5
 801b9d2:	f108 0110 	add.w	r1, r8, #16
 801b9d6:	f7fd ffc9 	bl	801996c <ucdr_deserialize_array_uint8_t>
 801b9da:	b930      	cbnz	r0, 801b9ea <on_topic+0x6e>
 801b9dc:	480c      	ldr	r0, [pc, #48]	@ (801ba10 <on_topic+0x94>)
 801b9de:	4639      	mov	r1, r7
 801b9e0:	b014      	add	sp, #80	@ 0x50
 801b9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b9e6:	f7fc bd87 	b.w	80184f8 <put_memory>
 801b9ea:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801b9ee:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801b9f2:	f7fd fed9 	bl	80197a8 <rmw_uros_epoch_nanos>
 801b9f6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801b9fa:	2305      	movs	r3, #5
 801b9fc:	e942 0102 	strd	r0, r1, [r2, #-8]
 801ba00:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801ba04:	b014      	add	sp, #80	@ 0x50
 801ba06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba0a:	bf00      	nop
 801ba0c:	2000e564 	.word	0x2000e564
 801ba10:	2000e554 	.word	0x2000e554

0801ba14 <on_request>:
 801ba14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba18:	4823      	ldr	r0, [pc, #140]	@ (801baa8 <on_request+0x94>)
 801ba1a:	b094      	sub	sp, #80	@ 0x50
 801ba1c:	6800      	ldr	r0, [r0, #0]
 801ba1e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801ba20:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801ba24:	9113      	str	r1, [sp, #76]	@ 0x4c
 801ba26:	2800      	cmp	r0, #0
 801ba28:	d03b      	beq.n	801baa2 <on_request+0x8e>
 801ba2a:	461d      	mov	r5, r3
 801ba2c:	e001      	b.n	801ba32 <on_request+0x1e>
 801ba2e:	6840      	ldr	r0, [r0, #4]
 801ba30:	b3b8      	cbz	r0, 801baa2 <on_request+0x8e>
 801ba32:	6884      	ldr	r4, [r0, #8]
 801ba34:	8b21      	ldrh	r1, [r4, #24]
 801ba36:	4291      	cmp	r1, r2
 801ba38:	d1f9      	bne.n	801ba2e <on_request+0x1a>
 801ba3a:	2248      	movs	r2, #72	@ 0x48
 801ba3c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801ba40:	4668      	mov	r0, sp
 801ba42:	f000 fd60 	bl	801c506 <memcpy>
 801ba46:	f104 0320 	add.w	r3, r4, #32
 801ba4a:	cb0c      	ldmia	r3, {r2, r3}
 801ba4c:	4620      	mov	r0, r4
 801ba4e:	f7f6 fabb 	bl	8011fc8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801ba52:	4680      	mov	r8, r0
 801ba54:	b328      	cbz	r0, 801baa2 <on_request+0x8e>
 801ba56:	4638      	mov	r0, r7
 801ba58:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801ba5c:	4632      	mov	r2, r6
 801ba5e:	f107 0110 	add.w	r1, r7, #16
 801ba62:	f7fd ff83 	bl	801996c <ucdr_deserialize_array_uint8_t>
 801ba66:	b930      	cbnz	r0, 801ba76 <on_request+0x62>
 801ba68:	4810      	ldr	r0, [pc, #64]	@ (801baac <on_request+0x98>)
 801ba6a:	4641      	mov	r1, r8
 801ba6c:	b014      	add	sp, #80	@ 0x50
 801ba6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba72:	f7fc bd41 	b.w	80184f8 <put_memory>
 801ba76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba78:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801ba7c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801ba80:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801ba84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ba88:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ba8c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801ba90:	f7fd fe8a 	bl	80197a8 <rmw_uros_epoch_nanos>
 801ba94:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801ba98:	2303      	movs	r3, #3
 801ba9a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801ba9e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801baa2:	b014      	add	sp, #80	@ 0x50
 801baa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baa8:	2000e534 	.word	0x2000e534
 801baac:	2000e554 	.word	0x2000e554

0801bab0 <on_reply>:
 801bab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bab4:	4821      	ldr	r0, [pc, #132]	@ (801bb3c <on_reply+0x8c>)
 801bab6:	b094      	sub	sp, #80	@ 0x50
 801bab8:	6800      	ldr	r0, [r0, #0]
 801baba:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801babc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801bac0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801bac2:	b3b8      	cbz	r0, 801bb34 <on_reply+0x84>
 801bac4:	461d      	mov	r5, r3
 801bac6:	e001      	b.n	801bacc <on_reply+0x1c>
 801bac8:	6840      	ldr	r0, [r0, #4]
 801baca:	b398      	cbz	r0, 801bb34 <on_reply+0x84>
 801bacc:	6884      	ldr	r4, [r0, #8]
 801bace:	8b21      	ldrh	r1, [r4, #24]
 801bad0:	4291      	cmp	r1, r2
 801bad2:	d1f9      	bne.n	801bac8 <on_reply+0x18>
 801bad4:	2248      	movs	r2, #72	@ 0x48
 801bad6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801bada:	4668      	mov	r0, sp
 801badc:	f000 fd13 	bl	801c506 <memcpy>
 801bae0:	f104 0320 	add.w	r3, r4, #32
 801bae4:	cb0c      	ldmia	r3, {r2, r3}
 801bae6:	4620      	mov	r0, r4
 801bae8:	f7f6 fa6e 	bl	8011fc8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801baec:	4680      	mov	r8, r0
 801baee:	b308      	cbz	r0, 801bb34 <on_reply+0x84>
 801baf0:	4638      	mov	r0, r7
 801baf2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801baf6:	4632      	mov	r2, r6
 801baf8:	f107 0110 	add.w	r1, r7, #16
 801bafc:	f7fd ff36 	bl	801996c <ucdr_deserialize_array_uint8_t>
 801bb00:	b930      	cbnz	r0, 801bb10 <on_reply+0x60>
 801bb02:	480f      	ldr	r0, [pc, #60]	@ (801bb40 <on_reply+0x90>)
 801bb04:	4641      	mov	r1, r8
 801bb06:	b014      	add	sp, #80	@ 0x50
 801bb08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb0c:	f7fc bcf4 	b.w	80184f8 <put_memory>
 801bb10:	2200      	movs	r2, #0
 801bb12:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801bb16:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801bb1a:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801bb1e:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801bb22:	f7fd fe41 	bl	80197a8 <rmw_uros_epoch_nanos>
 801bb26:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801bb2a:	2304      	movs	r3, #4
 801bb2c:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bb30:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801bb34:	b014      	add	sp, #80	@ 0x50
 801bb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb3a:	bf00      	nop
 801bb3c:	20009c48 	.word	0x20009c48
 801bb40:	2000e554 	.word	0x2000e554

0801bb44 <rmw_create_guard_condition>:
 801bb44:	b538      	push	{r3, r4, r5, lr}
 801bb46:	4605      	mov	r5, r0
 801bb48:	4807      	ldr	r0, [pc, #28]	@ (801bb68 <rmw_create_guard_condition+0x24>)
 801bb4a:	f7fc fcc5 	bl	80184d8 <get_memory>
 801bb4e:	b148      	cbz	r0, 801bb64 <rmw_create_guard_condition+0x20>
 801bb50:	6884      	ldr	r4, [r0, #8]
 801bb52:	2300      	movs	r3, #0
 801bb54:	7423      	strb	r3, [r4, #16]
 801bb56:	61e5      	str	r5, [r4, #28]
 801bb58:	f7fc fd26 	bl	80185a8 <rmw_get_implementation_identifier>
 801bb5c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801bb60:	f104 0014 	add.w	r0, r4, #20
 801bb64:	bd38      	pop	{r3, r4, r5, pc}
 801bb66:	bf00      	nop
 801bb68:	2000e4f4 	.word	0x2000e4f4

0801bb6c <rmw_destroy_guard_condition>:
 801bb6c:	b508      	push	{r3, lr}
 801bb6e:	4b08      	ldr	r3, [pc, #32]	@ (801bb90 <rmw_destroy_guard_condition+0x24>)
 801bb70:	6819      	ldr	r1, [r3, #0]
 801bb72:	b911      	cbnz	r1, 801bb7a <rmw_destroy_guard_condition+0xe>
 801bb74:	e00a      	b.n	801bb8c <rmw_destroy_guard_condition+0x20>
 801bb76:	6849      	ldr	r1, [r1, #4]
 801bb78:	b141      	cbz	r1, 801bb8c <rmw_destroy_guard_condition+0x20>
 801bb7a:	688b      	ldr	r3, [r1, #8]
 801bb7c:	3314      	adds	r3, #20
 801bb7e:	4298      	cmp	r0, r3
 801bb80:	d1f9      	bne.n	801bb76 <rmw_destroy_guard_condition+0xa>
 801bb82:	4803      	ldr	r0, [pc, #12]	@ (801bb90 <rmw_destroy_guard_condition+0x24>)
 801bb84:	f7fc fcb8 	bl	80184f8 <put_memory>
 801bb88:	2000      	movs	r0, #0
 801bb8a:	bd08      	pop	{r3, pc}
 801bb8c:	2001      	movs	r0, #1
 801bb8e:	bd08      	pop	{r3, pc}
 801bb90:	2000e4f4 	.word	0x2000e4f4

0801bb94 <calloc>:
 801bb94:	4b02      	ldr	r3, [pc, #8]	@ (801bba0 <calloc+0xc>)
 801bb96:	460a      	mov	r2, r1
 801bb98:	4601      	mov	r1, r0
 801bb9a:	6818      	ldr	r0, [r3, #0]
 801bb9c:	f000 b802 	b.w	801bba4 <_calloc_r>
 801bba0:	2000030c 	.word	0x2000030c

0801bba4 <_calloc_r>:
 801bba4:	b570      	push	{r4, r5, r6, lr}
 801bba6:	fba1 5402 	umull	r5, r4, r1, r2
 801bbaa:	b934      	cbnz	r4, 801bbba <_calloc_r+0x16>
 801bbac:	4629      	mov	r1, r5
 801bbae:	f000 f887 	bl	801bcc0 <_malloc_r>
 801bbb2:	4606      	mov	r6, r0
 801bbb4:	b928      	cbnz	r0, 801bbc2 <_calloc_r+0x1e>
 801bbb6:	4630      	mov	r0, r6
 801bbb8:	bd70      	pop	{r4, r5, r6, pc}
 801bbba:	220c      	movs	r2, #12
 801bbbc:	6002      	str	r2, [r0, #0]
 801bbbe:	2600      	movs	r6, #0
 801bbc0:	e7f9      	b.n	801bbb6 <_calloc_r+0x12>
 801bbc2:	462a      	mov	r2, r5
 801bbc4:	4621      	mov	r1, r4
 801bbc6:	f000 fbd5 	bl	801c374 <memset>
 801bbca:	e7f4      	b.n	801bbb6 <_calloc_r+0x12>

0801bbcc <getenv>:
 801bbcc:	b507      	push	{r0, r1, r2, lr}
 801bbce:	4b04      	ldr	r3, [pc, #16]	@ (801bbe0 <getenv+0x14>)
 801bbd0:	4601      	mov	r1, r0
 801bbd2:	aa01      	add	r2, sp, #4
 801bbd4:	6818      	ldr	r0, [r3, #0]
 801bbd6:	f000 f805 	bl	801bbe4 <_findenv_r>
 801bbda:	b003      	add	sp, #12
 801bbdc:	f85d fb04 	ldr.w	pc, [sp], #4
 801bbe0:	2000030c 	.word	0x2000030c

0801bbe4 <_findenv_r>:
 801bbe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbe8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801bc58 <_findenv_r+0x74>
 801bbec:	4606      	mov	r6, r0
 801bbee:	4689      	mov	r9, r1
 801bbf0:	4617      	mov	r7, r2
 801bbf2:	f000 fcb5 	bl	801c560 <__env_lock>
 801bbf6:	f8da 4000 	ldr.w	r4, [sl]
 801bbfa:	b134      	cbz	r4, 801bc0a <_findenv_r+0x26>
 801bbfc:	464b      	mov	r3, r9
 801bbfe:	4698      	mov	r8, r3
 801bc00:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc04:	b13a      	cbz	r2, 801bc16 <_findenv_r+0x32>
 801bc06:	2a3d      	cmp	r2, #61	@ 0x3d
 801bc08:	d1f9      	bne.n	801bbfe <_findenv_r+0x1a>
 801bc0a:	4630      	mov	r0, r6
 801bc0c:	f000 fcae 	bl	801c56c <__env_unlock>
 801bc10:	2000      	movs	r0, #0
 801bc12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc16:	eba8 0809 	sub.w	r8, r8, r9
 801bc1a:	46a3      	mov	fp, r4
 801bc1c:	f854 0b04 	ldr.w	r0, [r4], #4
 801bc20:	2800      	cmp	r0, #0
 801bc22:	d0f2      	beq.n	801bc0a <_findenv_r+0x26>
 801bc24:	4642      	mov	r2, r8
 801bc26:	4649      	mov	r1, r9
 801bc28:	f000 fbb9 	bl	801c39e <strncmp>
 801bc2c:	2800      	cmp	r0, #0
 801bc2e:	d1f4      	bne.n	801bc1a <_findenv_r+0x36>
 801bc30:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801bc34:	eb03 0508 	add.w	r5, r3, r8
 801bc38:	f813 3008 	ldrb.w	r3, [r3, r8]
 801bc3c:	2b3d      	cmp	r3, #61	@ 0x3d
 801bc3e:	d1ec      	bne.n	801bc1a <_findenv_r+0x36>
 801bc40:	f8da 3000 	ldr.w	r3, [sl]
 801bc44:	ebab 0303 	sub.w	r3, fp, r3
 801bc48:	109b      	asrs	r3, r3, #2
 801bc4a:	4630      	mov	r0, r6
 801bc4c:	603b      	str	r3, [r7, #0]
 801bc4e:	f000 fc8d 	bl	801c56c <__env_unlock>
 801bc52:	1c68      	adds	r0, r5, #1
 801bc54:	e7dd      	b.n	801bc12 <_findenv_r+0x2e>
 801bc56:	bf00      	nop
 801bc58:	20000000 	.word	0x20000000

0801bc5c <malloc>:
 801bc5c:	4b02      	ldr	r3, [pc, #8]	@ (801bc68 <malloc+0xc>)
 801bc5e:	4601      	mov	r1, r0
 801bc60:	6818      	ldr	r0, [r3, #0]
 801bc62:	f000 b82d 	b.w	801bcc0 <_malloc_r>
 801bc66:	bf00      	nop
 801bc68:	2000030c 	.word	0x2000030c

0801bc6c <free>:
 801bc6c:	4b02      	ldr	r3, [pc, #8]	@ (801bc78 <free+0xc>)
 801bc6e:	4601      	mov	r1, r0
 801bc70:	6818      	ldr	r0, [r3, #0]
 801bc72:	f000 bc81 	b.w	801c578 <_free_r>
 801bc76:	bf00      	nop
 801bc78:	2000030c 	.word	0x2000030c

0801bc7c <sbrk_aligned>:
 801bc7c:	b570      	push	{r4, r5, r6, lr}
 801bc7e:	4e0f      	ldr	r6, [pc, #60]	@ (801bcbc <sbrk_aligned+0x40>)
 801bc80:	460c      	mov	r4, r1
 801bc82:	6831      	ldr	r1, [r6, #0]
 801bc84:	4605      	mov	r5, r0
 801bc86:	b911      	cbnz	r1, 801bc8e <sbrk_aligned+0x12>
 801bc88:	f000 fbe6 	bl	801c458 <_sbrk_r>
 801bc8c:	6030      	str	r0, [r6, #0]
 801bc8e:	4621      	mov	r1, r4
 801bc90:	4628      	mov	r0, r5
 801bc92:	f000 fbe1 	bl	801c458 <_sbrk_r>
 801bc96:	1c43      	adds	r3, r0, #1
 801bc98:	d103      	bne.n	801bca2 <sbrk_aligned+0x26>
 801bc9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801bc9e:	4620      	mov	r0, r4
 801bca0:	bd70      	pop	{r4, r5, r6, pc}
 801bca2:	1cc4      	adds	r4, r0, #3
 801bca4:	f024 0403 	bic.w	r4, r4, #3
 801bca8:	42a0      	cmp	r0, r4
 801bcaa:	d0f8      	beq.n	801bc9e <sbrk_aligned+0x22>
 801bcac:	1a21      	subs	r1, r4, r0
 801bcae:	4628      	mov	r0, r5
 801bcb0:	f000 fbd2 	bl	801c458 <_sbrk_r>
 801bcb4:	3001      	adds	r0, #1
 801bcb6:	d1f2      	bne.n	801bc9e <sbrk_aligned+0x22>
 801bcb8:	e7ef      	b.n	801bc9a <sbrk_aligned+0x1e>
 801bcba:	bf00      	nop
 801bcbc:	2000e718 	.word	0x2000e718

0801bcc0 <_malloc_r>:
 801bcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bcc4:	1ccd      	adds	r5, r1, #3
 801bcc6:	f025 0503 	bic.w	r5, r5, #3
 801bcca:	3508      	adds	r5, #8
 801bccc:	2d0c      	cmp	r5, #12
 801bcce:	bf38      	it	cc
 801bcd0:	250c      	movcc	r5, #12
 801bcd2:	2d00      	cmp	r5, #0
 801bcd4:	4606      	mov	r6, r0
 801bcd6:	db01      	blt.n	801bcdc <_malloc_r+0x1c>
 801bcd8:	42a9      	cmp	r1, r5
 801bcda:	d904      	bls.n	801bce6 <_malloc_r+0x26>
 801bcdc:	230c      	movs	r3, #12
 801bcde:	6033      	str	r3, [r6, #0]
 801bce0:	2000      	movs	r0, #0
 801bce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bdbc <_malloc_r+0xfc>
 801bcea:	f000 f869 	bl	801bdc0 <__malloc_lock>
 801bcee:	f8d8 3000 	ldr.w	r3, [r8]
 801bcf2:	461c      	mov	r4, r3
 801bcf4:	bb44      	cbnz	r4, 801bd48 <_malloc_r+0x88>
 801bcf6:	4629      	mov	r1, r5
 801bcf8:	4630      	mov	r0, r6
 801bcfa:	f7ff ffbf 	bl	801bc7c <sbrk_aligned>
 801bcfe:	1c43      	adds	r3, r0, #1
 801bd00:	4604      	mov	r4, r0
 801bd02:	d158      	bne.n	801bdb6 <_malloc_r+0xf6>
 801bd04:	f8d8 4000 	ldr.w	r4, [r8]
 801bd08:	4627      	mov	r7, r4
 801bd0a:	2f00      	cmp	r7, #0
 801bd0c:	d143      	bne.n	801bd96 <_malloc_r+0xd6>
 801bd0e:	2c00      	cmp	r4, #0
 801bd10:	d04b      	beq.n	801bdaa <_malloc_r+0xea>
 801bd12:	6823      	ldr	r3, [r4, #0]
 801bd14:	4639      	mov	r1, r7
 801bd16:	4630      	mov	r0, r6
 801bd18:	eb04 0903 	add.w	r9, r4, r3
 801bd1c:	f000 fb9c 	bl	801c458 <_sbrk_r>
 801bd20:	4581      	cmp	r9, r0
 801bd22:	d142      	bne.n	801bdaa <_malloc_r+0xea>
 801bd24:	6821      	ldr	r1, [r4, #0]
 801bd26:	1a6d      	subs	r5, r5, r1
 801bd28:	4629      	mov	r1, r5
 801bd2a:	4630      	mov	r0, r6
 801bd2c:	f7ff ffa6 	bl	801bc7c <sbrk_aligned>
 801bd30:	3001      	adds	r0, #1
 801bd32:	d03a      	beq.n	801bdaa <_malloc_r+0xea>
 801bd34:	6823      	ldr	r3, [r4, #0]
 801bd36:	442b      	add	r3, r5
 801bd38:	6023      	str	r3, [r4, #0]
 801bd3a:	f8d8 3000 	ldr.w	r3, [r8]
 801bd3e:	685a      	ldr	r2, [r3, #4]
 801bd40:	bb62      	cbnz	r2, 801bd9c <_malloc_r+0xdc>
 801bd42:	f8c8 7000 	str.w	r7, [r8]
 801bd46:	e00f      	b.n	801bd68 <_malloc_r+0xa8>
 801bd48:	6822      	ldr	r2, [r4, #0]
 801bd4a:	1b52      	subs	r2, r2, r5
 801bd4c:	d420      	bmi.n	801bd90 <_malloc_r+0xd0>
 801bd4e:	2a0b      	cmp	r2, #11
 801bd50:	d917      	bls.n	801bd82 <_malloc_r+0xc2>
 801bd52:	1961      	adds	r1, r4, r5
 801bd54:	42a3      	cmp	r3, r4
 801bd56:	6025      	str	r5, [r4, #0]
 801bd58:	bf18      	it	ne
 801bd5a:	6059      	strne	r1, [r3, #4]
 801bd5c:	6863      	ldr	r3, [r4, #4]
 801bd5e:	bf08      	it	eq
 801bd60:	f8c8 1000 	streq.w	r1, [r8]
 801bd64:	5162      	str	r2, [r4, r5]
 801bd66:	604b      	str	r3, [r1, #4]
 801bd68:	4630      	mov	r0, r6
 801bd6a:	f000 f82f 	bl	801bdcc <__malloc_unlock>
 801bd6e:	f104 000b 	add.w	r0, r4, #11
 801bd72:	1d23      	adds	r3, r4, #4
 801bd74:	f020 0007 	bic.w	r0, r0, #7
 801bd78:	1ac2      	subs	r2, r0, r3
 801bd7a:	bf1c      	itt	ne
 801bd7c:	1a1b      	subne	r3, r3, r0
 801bd7e:	50a3      	strne	r3, [r4, r2]
 801bd80:	e7af      	b.n	801bce2 <_malloc_r+0x22>
 801bd82:	6862      	ldr	r2, [r4, #4]
 801bd84:	42a3      	cmp	r3, r4
 801bd86:	bf0c      	ite	eq
 801bd88:	f8c8 2000 	streq.w	r2, [r8]
 801bd8c:	605a      	strne	r2, [r3, #4]
 801bd8e:	e7eb      	b.n	801bd68 <_malloc_r+0xa8>
 801bd90:	4623      	mov	r3, r4
 801bd92:	6864      	ldr	r4, [r4, #4]
 801bd94:	e7ae      	b.n	801bcf4 <_malloc_r+0x34>
 801bd96:	463c      	mov	r4, r7
 801bd98:	687f      	ldr	r7, [r7, #4]
 801bd9a:	e7b6      	b.n	801bd0a <_malloc_r+0x4a>
 801bd9c:	461a      	mov	r2, r3
 801bd9e:	685b      	ldr	r3, [r3, #4]
 801bda0:	42a3      	cmp	r3, r4
 801bda2:	d1fb      	bne.n	801bd9c <_malloc_r+0xdc>
 801bda4:	2300      	movs	r3, #0
 801bda6:	6053      	str	r3, [r2, #4]
 801bda8:	e7de      	b.n	801bd68 <_malloc_r+0xa8>
 801bdaa:	230c      	movs	r3, #12
 801bdac:	6033      	str	r3, [r6, #0]
 801bdae:	4630      	mov	r0, r6
 801bdb0:	f000 f80c 	bl	801bdcc <__malloc_unlock>
 801bdb4:	e794      	b.n	801bce0 <_malloc_r+0x20>
 801bdb6:	6005      	str	r5, [r0, #0]
 801bdb8:	e7d6      	b.n	801bd68 <_malloc_r+0xa8>
 801bdba:	bf00      	nop
 801bdbc:	2000e71c 	.word	0x2000e71c

0801bdc0 <__malloc_lock>:
 801bdc0:	4801      	ldr	r0, [pc, #4]	@ (801bdc8 <__malloc_lock+0x8>)
 801bdc2:	f000 bb96 	b.w	801c4f2 <__retarget_lock_acquire_recursive>
 801bdc6:	bf00      	nop
 801bdc8:	2000e861 	.word	0x2000e861

0801bdcc <__malloc_unlock>:
 801bdcc:	4801      	ldr	r0, [pc, #4]	@ (801bdd4 <__malloc_unlock+0x8>)
 801bdce:	f000 bb91 	b.w	801c4f4 <__retarget_lock_release_recursive>
 801bdd2:	bf00      	nop
 801bdd4:	2000e861 	.word	0x2000e861

0801bdd8 <srand>:
 801bdd8:	b538      	push	{r3, r4, r5, lr}
 801bdda:	4b10      	ldr	r3, [pc, #64]	@ (801be1c <srand+0x44>)
 801bddc:	681d      	ldr	r5, [r3, #0]
 801bdde:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801bde0:	4604      	mov	r4, r0
 801bde2:	b9b3      	cbnz	r3, 801be12 <srand+0x3a>
 801bde4:	2018      	movs	r0, #24
 801bde6:	f7ff ff39 	bl	801bc5c <malloc>
 801bdea:	4602      	mov	r2, r0
 801bdec:	6328      	str	r0, [r5, #48]	@ 0x30
 801bdee:	b920      	cbnz	r0, 801bdfa <srand+0x22>
 801bdf0:	4b0b      	ldr	r3, [pc, #44]	@ (801be20 <srand+0x48>)
 801bdf2:	480c      	ldr	r0, [pc, #48]	@ (801be24 <srand+0x4c>)
 801bdf4:	2146      	movs	r1, #70	@ 0x46
 801bdf6:	f000 fb95 	bl	801c524 <__assert_func>
 801bdfa:	490b      	ldr	r1, [pc, #44]	@ (801be28 <srand+0x50>)
 801bdfc:	4b0b      	ldr	r3, [pc, #44]	@ (801be2c <srand+0x54>)
 801bdfe:	e9c0 1300 	strd	r1, r3, [r0]
 801be02:	4b0b      	ldr	r3, [pc, #44]	@ (801be30 <srand+0x58>)
 801be04:	6083      	str	r3, [r0, #8]
 801be06:	230b      	movs	r3, #11
 801be08:	8183      	strh	r3, [r0, #12]
 801be0a:	2100      	movs	r1, #0
 801be0c:	2001      	movs	r0, #1
 801be0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801be12:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801be14:	2200      	movs	r2, #0
 801be16:	611c      	str	r4, [r3, #16]
 801be18:	615a      	str	r2, [r3, #20]
 801be1a:	bd38      	pop	{r3, r4, r5, pc}
 801be1c:	2000030c 	.word	0x2000030c
 801be20:	0801e0c4 	.word	0x0801e0c4
 801be24:	0801e0db 	.word	0x0801e0db
 801be28:	abcd330e 	.word	0xabcd330e
 801be2c:	e66d1234 	.word	0xe66d1234
 801be30:	0005deec 	.word	0x0005deec

0801be34 <rand>:
 801be34:	4b16      	ldr	r3, [pc, #88]	@ (801be90 <rand+0x5c>)
 801be36:	b510      	push	{r4, lr}
 801be38:	681c      	ldr	r4, [r3, #0]
 801be3a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801be3c:	b9b3      	cbnz	r3, 801be6c <rand+0x38>
 801be3e:	2018      	movs	r0, #24
 801be40:	f7ff ff0c 	bl	801bc5c <malloc>
 801be44:	4602      	mov	r2, r0
 801be46:	6320      	str	r0, [r4, #48]	@ 0x30
 801be48:	b920      	cbnz	r0, 801be54 <rand+0x20>
 801be4a:	4b12      	ldr	r3, [pc, #72]	@ (801be94 <rand+0x60>)
 801be4c:	4812      	ldr	r0, [pc, #72]	@ (801be98 <rand+0x64>)
 801be4e:	2152      	movs	r1, #82	@ 0x52
 801be50:	f000 fb68 	bl	801c524 <__assert_func>
 801be54:	4911      	ldr	r1, [pc, #68]	@ (801be9c <rand+0x68>)
 801be56:	4b12      	ldr	r3, [pc, #72]	@ (801bea0 <rand+0x6c>)
 801be58:	e9c0 1300 	strd	r1, r3, [r0]
 801be5c:	4b11      	ldr	r3, [pc, #68]	@ (801bea4 <rand+0x70>)
 801be5e:	6083      	str	r3, [r0, #8]
 801be60:	230b      	movs	r3, #11
 801be62:	8183      	strh	r3, [r0, #12]
 801be64:	2100      	movs	r1, #0
 801be66:	2001      	movs	r0, #1
 801be68:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801be6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801be6e:	480e      	ldr	r0, [pc, #56]	@ (801bea8 <rand+0x74>)
 801be70:	690b      	ldr	r3, [r1, #16]
 801be72:	694c      	ldr	r4, [r1, #20]
 801be74:	4a0d      	ldr	r2, [pc, #52]	@ (801beac <rand+0x78>)
 801be76:	4358      	muls	r0, r3
 801be78:	fb02 0004 	mla	r0, r2, r4, r0
 801be7c:	fba3 3202 	umull	r3, r2, r3, r2
 801be80:	3301      	adds	r3, #1
 801be82:	eb40 0002 	adc.w	r0, r0, r2
 801be86:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801be8a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801be8e:	bd10      	pop	{r4, pc}
 801be90:	2000030c 	.word	0x2000030c
 801be94:	0801e0c4 	.word	0x0801e0c4
 801be98:	0801e0db 	.word	0x0801e0db
 801be9c:	abcd330e 	.word	0xabcd330e
 801bea0:	e66d1234 	.word	0xe66d1234
 801bea4:	0005deec 	.word	0x0005deec
 801bea8:	5851f42d 	.word	0x5851f42d
 801beac:	4c957f2d 	.word	0x4c957f2d

0801beb0 <realloc>:
 801beb0:	4b02      	ldr	r3, [pc, #8]	@ (801bebc <realloc+0xc>)
 801beb2:	460a      	mov	r2, r1
 801beb4:	4601      	mov	r1, r0
 801beb6:	6818      	ldr	r0, [r3, #0]
 801beb8:	f000 b802 	b.w	801bec0 <_realloc_r>
 801bebc:	2000030c 	.word	0x2000030c

0801bec0 <_realloc_r>:
 801bec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bec4:	4607      	mov	r7, r0
 801bec6:	4614      	mov	r4, r2
 801bec8:	460d      	mov	r5, r1
 801beca:	b921      	cbnz	r1, 801bed6 <_realloc_r+0x16>
 801becc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bed0:	4611      	mov	r1, r2
 801bed2:	f7ff bef5 	b.w	801bcc0 <_malloc_r>
 801bed6:	b92a      	cbnz	r2, 801bee4 <_realloc_r+0x24>
 801bed8:	f000 fb4e 	bl	801c578 <_free_r>
 801bedc:	4625      	mov	r5, r4
 801bede:	4628      	mov	r0, r5
 801bee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bee4:	f000 fb92 	bl	801c60c <_malloc_usable_size_r>
 801bee8:	4284      	cmp	r4, r0
 801beea:	4606      	mov	r6, r0
 801beec:	d802      	bhi.n	801bef4 <_realloc_r+0x34>
 801beee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bef2:	d8f4      	bhi.n	801bede <_realloc_r+0x1e>
 801bef4:	4621      	mov	r1, r4
 801bef6:	4638      	mov	r0, r7
 801bef8:	f7ff fee2 	bl	801bcc0 <_malloc_r>
 801befc:	4680      	mov	r8, r0
 801befe:	b908      	cbnz	r0, 801bf04 <_realloc_r+0x44>
 801bf00:	4645      	mov	r5, r8
 801bf02:	e7ec      	b.n	801bede <_realloc_r+0x1e>
 801bf04:	42b4      	cmp	r4, r6
 801bf06:	4622      	mov	r2, r4
 801bf08:	4629      	mov	r1, r5
 801bf0a:	bf28      	it	cs
 801bf0c:	4632      	movcs	r2, r6
 801bf0e:	f000 fafa 	bl	801c506 <memcpy>
 801bf12:	4629      	mov	r1, r5
 801bf14:	4638      	mov	r0, r7
 801bf16:	f000 fb2f 	bl	801c578 <_free_r>
 801bf1a:	e7f1      	b.n	801bf00 <_realloc_r+0x40>

0801bf1c <_strtoul_l.isra.0>:
 801bf1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bf20:	4e34      	ldr	r6, [pc, #208]	@ (801bff4 <_strtoul_l.isra.0+0xd8>)
 801bf22:	4686      	mov	lr, r0
 801bf24:	460d      	mov	r5, r1
 801bf26:	4628      	mov	r0, r5
 801bf28:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bf2c:	5d37      	ldrb	r7, [r6, r4]
 801bf2e:	f017 0708 	ands.w	r7, r7, #8
 801bf32:	d1f8      	bne.n	801bf26 <_strtoul_l.isra.0+0xa>
 801bf34:	2c2d      	cmp	r4, #45	@ 0x2d
 801bf36:	d110      	bne.n	801bf5a <_strtoul_l.isra.0+0x3e>
 801bf38:	782c      	ldrb	r4, [r5, #0]
 801bf3a:	2701      	movs	r7, #1
 801bf3c:	1c85      	adds	r5, r0, #2
 801bf3e:	f033 0010 	bics.w	r0, r3, #16
 801bf42:	d115      	bne.n	801bf70 <_strtoul_l.isra.0+0x54>
 801bf44:	2c30      	cmp	r4, #48	@ 0x30
 801bf46:	d10d      	bne.n	801bf64 <_strtoul_l.isra.0+0x48>
 801bf48:	7828      	ldrb	r0, [r5, #0]
 801bf4a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801bf4e:	2858      	cmp	r0, #88	@ 0x58
 801bf50:	d108      	bne.n	801bf64 <_strtoul_l.isra.0+0x48>
 801bf52:	786c      	ldrb	r4, [r5, #1]
 801bf54:	3502      	adds	r5, #2
 801bf56:	2310      	movs	r3, #16
 801bf58:	e00a      	b.n	801bf70 <_strtoul_l.isra.0+0x54>
 801bf5a:	2c2b      	cmp	r4, #43	@ 0x2b
 801bf5c:	bf04      	itt	eq
 801bf5e:	782c      	ldrbeq	r4, [r5, #0]
 801bf60:	1c85      	addeq	r5, r0, #2
 801bf62:	e7ec      	b.n	801bf3e <_strtoul_l.isra.0+0x22>
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d1f6      	bne.n	801bf56 <_strtoul_l.isra.0+0x3a>
 801bf68:	2c30      	cmp	r4, #48	@ 0x30
 801bf6a:	bf14      	ite	ne
 801bf6c:	230a      	movne	r3, #10
 801bf6e:	2308      	moveq	r3, #8
 801bf70:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801bf74:	2600      	movs	r6, #0
 801bf76:	fbb8 f8f3 	udiv	r8, r8, r3
 801bf7a:	fb03 f908 	mul.w	r9, r3, r8
 801bf7e:	ea6f 0909 	mvn.w	r9, r9
 801bf82:	4630      	mov	r0, r6
 801bf84:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801bf88:	f1bc 0f09 	cmp.w	ip, #9
 801bf8c:	d810      	bhi.n	801bfb0 <_strtoul_l.isra.0+0x94>
 801bf8e:	4664      	mov	r4, ip
 801bf90:	42a3      	cmp	r3, r4
 801bf92:	dd1e      	ble.n	801bfd2 <_strtoul_l.isra.0+0xb6>
 801bf94:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801bf98:	d007      	beq.n	801bfaa <_strtoul_l.isra.0+0x8e>
 801bf9a:	4580      	cmp	r8, r0
 801bf9c:	d316      	bcc.n	801bfcc <_strtoul_l.isra.0+0xb0>
 801bf9e:	d101      	bne.n	801bfa4 <_strtoul_l.isra.0+0x88>
 801bfa0:	45a1      	cmp	r9, r4
 801bfa2:	db13      	blt.n	801bfcc <_strtoul_l.isra.0+0xb0>
 801bfa4:	fb00 4003 	mla	r0, r0, r3, r4
 801bfa8:	2601      	movs	r6, #1
 801bfaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bfae:	e7e9      	b.n	801bf84 <_strtoul_l.isra.0+0x68>
 801bfb0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801bfb4:	f1bc 0f19 	cmp.w	ip, #25
 801bfb8:	d801      	bhi.n	801bfbe <_strtoul_l.isra.0+0xa2>
 801bfba:	3c37      	subs	r4, #55	@ 0x37
 801bfbc:	e7e8      	b.n	801bf90 <_strtoul_l.isra.0+0x74>
 801bfbe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801bfc2:	f1bc 0f19 	cmp.w	ip, #25
 801bfc6:	d804      	bhi.n	801bfd2 <_strtoul_l.isra.0+0xb6>
 801bfc8:	3c57      	subs	r4, #87	@ 0x57
 801bfca:	e7e1      	b.n	801bf90 <_strtoul_l.isra.0+0x74>
 801bfcc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801bfd0:	e7eb      	b.n	801bfaa <_strtoul_l.isra.0+0x8e>
 801bfd2:	1c73      	adds	r3, r6, #1
 801bfd4:	d106      	bne.n	801bfe4 <_strtoul_l.isra.0+0xc8>
 801bfd6:	2322      	movs	r3, #34	@ 0x22
 801bfd8:	f8ce 3000 	str.w	r3, [lr]
 801bfdc:	4630      	mov	r0, r6
 801bfde:	b932      	cbnz	r2, 801bfee <_strtoul_l.isra.0+0xd2>
 801bfe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bfe4:	b107      	cbz	r7, 801bfe8 <_strtoul_l.isra.0+0xcc>
 801bfe6:	4240      	negs	r0, r0
 801bfe8:	2a00      	cmp	r2, #0
 801bfea:	d0f9      	beq.n	801bfe0 <_strtoul_l.isra.0+0xc4>
 801bfec:	b106      	cbz	r6, 801bff0 <_strtoul_l.isra.0+0xd4>
 801bfee:	1e69      	subs	r1, r5, #1
 801bff0:	6011      	str	r1, [r2, #0]
 801bff2:	e7f5      	b.n	801bfe0 <_strtoul_l.isra.0+0xc4>
 801bff4:	0801e1a3 	.word	0x0801e1a3

0801bff8 <strtoul>:
 801bff8:	4613      	mov	r3, r2
 801bffa:	460a      	mov	r2, r1
 801bffc:	4601      	mov	r1, r0
 801bffe:	4802      	ldr	r0, [pc, #8]	@ (801c008 <strtoul+0x10>)
 801c000:	6800      	ldr	r0, [r0, #0]
 801c002:	f7ff bf8b 	b.w	801bf1c <_strtoul_l.isra.0>
 801c006:	bf00      	nop
 801c008:	2000030c 	.word	0x2000030c

0801c00c <std>:
 801c00c:	2300      	movs	r3, #0
 801c00e:	b510      	push	{r4, lr}
 801c010:	4604      	mov	r4, r0
 801c012:	e9c0 3300 	strd	r3, r3, [r0]
 801c016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c01a:	6083      	str	r3, [r0, #8]
 801c01c:	8181      	strh	r1, [r0, #12]
 801c01e:	6643      	str	r3, [r0, #100]	@ 0x64
 801c020:	81c2      	strh	r2, [r0, #14]
 801c022:	6183      	str	r3, [r0, #24]
 801c024:	4619      	mov	r1, r3
 801c026:	2208      	movs	r2, #8
 801c028:	305c      	adds	r0, #92	@ 0x5c
 801c02a:	f000 f9a3 	bl	801c374 <memset>
 801c02e:	4b0d      	ldr	r3, [pc, #52]	@ (801c064 <std+0x58>)
 801c030:	6263      	str	r3, [r4, #36]	@ 0x24
 801c032:	4b0d      	ldr	r3, [pc, #52]	@ (801c068 <std+0x5c>)
 801c034:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c036:	4b0d      	ldr	r3, [pc, #52]	@ (801c06c <std+0x60>)
 801c038:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c03a:	4b0d      	ldr	r3, [pc, #52]	@ (801c070 <std+0x64>)
 801c03c:	6323      	str	r3, [r4, #48]	@ 0x30
 801c03e:	4b0d      	ldr	r3, [pc, #52]	@ (801c074 <std+0x68>)
 801c040:	6224      	str	r4, [r4, #32]
 801c042:	429c      	cmp	r4, r3
 801c044:	d006      	beq.n	801c054 <std+0x48>
 801c046:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c04a:	4294      	cmp	r4, r2
 801c04c:	d002      	beq.n	801c054 <std+0x48>
 801c04e:	33d0      	adds	r3, #208	@ 0xd0
 801c050:	429c      	cmp	r4, r3
 801c052:	d105      	bne.n	801c060 <std+0x54>
 801c054:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c05c:	f000 ba48 	b.w	801c4f0 <__retarget_lock_init_recursive>
 801c060:	bd10      	pop	{r4, pc}
 801c062:	bf00      	nop
 801c064:	0801c221 	.word	0x0801c221
 801c068:	0801c243 	.word	0x0801c243
 801c06c:	0801c27b 	.word	0x0801c27b
 801c070:	0801c29f 	.word	0x0801c29f
 801c074:	2000e720 	.word	0x2000e720

0801c078 <stdio_exit_handler>:
 801c078:	4a02      	ldr	r2, [pc, #8]	@ (801c084 <stdio_exit_handler+0xc>)
 801c07a:	4903      	ldr	r1, [pc, #12]	@ (801c088 <stdio_exit_handler+0x10>)
 801c07c:	4803      	ldr	r0, [pc, #12]	@ (801c08c <stdio_exit_handler+0x14>)
 801c07e:	f000 b869 	b.w	801c154 <_fwalk_sglue>
 801c082:	bf00      	nop
 801c084:	20000300 	.word	0x20000300
 801c088:	0801cf71 	.word	0x0801cf71
 801c08c:	20000310 	.word	0x20000310

0801c090 <cleanup_stdio>:
 801c090:	6841      	ldr	r1, [r0, #4]
 801c092:	4b0c      	ldr	r3, [pc, #48]	@ (801c0c4 <cleanup_stdio+0x34>)
 801c094:	4299      	cmp	r1, r3
 801c096:	b510      	push	{r4, lr}
 801c098:	4604      	mov	r4, r0
 801c09a:	d001      	beq.n	801c0a0 <cleanup_stdio+0x10>
 801c09c:	f000 ff68 	bl	801cf70 <_fflush_r>
 801c0a0:	68a1      	ldr	r1, [r4, #8]
 801c0a2:	4b09      	ldr	r3, [pc, #36]	@ (801c0c8 <cleanup_stdio+0x38>)
 801c0a4:	4299      	cmp	r1, r3
 801c0a6:	d002      	beq.n	801c0ae <cleanup_stdio+0x1e>
 801c0a8:	4620      	mov	r0, r4
 801c0aa:	f000 ff61 	bl	801cf70 <_fflush_r>
 801c0ae:	68e1      	ldr	r1, [r4, #12]
 801c0b0:	4b06      	ldr	r3, [pc, #24]	@ (801c0cc <cleanup_stdio+0x3c>)
 801c0b2:	4299      	cmp	r1, r3
 801c0b4:	d004      	beq.n	801c0c0 <cleanup_stdio+0x30>
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0bc:	f000 bf58 	b.w	801cf70 <_fflush_r>
 801c0c0:	bd10      	pop	{r4, pc}
 801c0c2:	bf00      	nop
 801c0c4:	2000e720 	.word	0x2000e720
 801c0c8:	2000e788 	.word	0x2000e788
 801c0cc:	2000e7f0 	.word	0x2000e7f0

0801c0d0 <global_stdio_init.part.0>:
 801c0d0:	b510      	push	{r4, lr}
 801c0d2:	4b0b      	ldr	r3, [pc, #44]	@ (801c100 <global_stdio_init.part.0+0x30>)
 801c0d4:	4c0b      	ldr	r4, [pc, #44]	@ (801c104 <global_stdio_init.part.0+0x34>)
 801c0d6:	4a0c      	ldr	r2, [pc, #48]	@ (801c108 <global_stdio_init.part.0+0x38>)
 801c0d8:	601a      	str	r2, [r3, #0]
 801c0da:	4620      	mov	r0, r4
 801c0dc:	2200      	movs	r2, #0
 801c0de:	2104      	movs	r1, #4
 801c0e0:	f7ff ff94 	bl	801c00c <std>
 801c0e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c0e8:	2201      	movs	r2, #1
 801c0ea:	2109      	movs	r1, #9
 801c0ec:	f7ff ff8e 	bl	801c00c <std>
 801c0f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c0f4:	2202      	movs	r2, #2
 801c0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0fa:	2112      	movs	r1, #18
 801c0fc:	f7ff bf86 	b.w	801c00c <std>
 801c100:	2000e858 	.word	0x2000e858
 801c104:	2000e720 	.word	0x2000e720
 801c108:	0801c079 	.word	0x0801c079

0801c10c <__sfp_lock_acquire>:
 801c10c:	4801      	ldr	r0, [pc, #4]	@ (801c114 <__sfp_lock_acquire+0x8>)
 801c10e:	f000 b9f0 	b.w	801c4f2 <__retarget_lock_acquire_recursive>
 801c112:	bf00      	nop
 801c114:	2000e862 	.word	0x2000e862

0801c118 <__sfp_lock_release>:
 801c118:	4801      	ldr	r0, [pc, #4]	@ (801c120 <__sfp_lock_release+0x8>)
 801c11a:	f000 b9eb 	b.w	801c4f4 <__retarget_lock_release_recursive>
 801c11e:	bf00      	nop
 801c120:	2000e862 	.word	0x2000e862

0801c124 <__sinit>:
 801c124:	b510      	push	{r4, lr}
 801c126:	4604      	mov	r4, r0
 801c128:	f7ff fff0 	bl	801c10c <__sfp_lock_acquire>
 801c12c:	6a23      	ldr	r3, [r4, #32]
 801c12e:	b11b      	cbz	r3, 801c138 <__sinit+0x14>
 801c130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c134:	f7ff bff0 	b.w	801c118 <__sfp_lock_release>
 801c138:	4b04      	ldr	r3, [pc, #16]	@ (801c14c <__sinit+0x28>)
 801c13a:	6223      	str	r3, [r4, #32]
 801c13c:	4b04      	ldr	r3, [pc, #16]	@ (801c150 <__sinit+0x2c>)
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d1f5      	bne.n	801c130 <__sinit+0xc>
 801c144:	f7ff ffc4 	bl	801c0d0 <global_stdio_init.part.0>
 801c148:	e7f2      	b.n	801c130 <__sinit+0xc>
 801c14a:	bf00      	nop
 801c14c:	0801c091 	.word	0x0801c091
 801c150:	2000e858 	.word	0x2000e858

0801c154 <_fwalk_sglue>:
 801c154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c158:	4607      	mov	r7, r0
 801c15a:	4688      	mov	r8, r1
 801c15c:	4614      	mov	r4, r2
 801c15e:	2600      	movs	r6, #0
 801c160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c164:	f1b9 0901 	subs.w	r9, r9, #1
 801c168:	d505      	bpl.n	801c176 <_fwalk_sglue+0x22>
 801c16a:	6824      	ldr	r4, [r4, #0]
 801c16c:	2c00      	cmp	r4, #0
 801c16e:	d1f7      	bne.n	801c160 <_fwalk_sglue+0xc>
 801c170:	4630      	mov	r0, r6
 801c172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c176:	89ab      	ldrh	r3, [r5, #12]
 801c178:	2b01      	cmp	r3, #1
 801c17a:	d907      	bls.n	801c18c <_fwalk_sglue+0x38>
 801c17c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c180:	3301      	adds	r3, #1
 801c182:	d003      	beq.n	801c18c <_fwalk_sglue+0x38>
 801c184:	4629      	mov	r1, r5
 801c186:	4638      	mov	r0, r7
 801c188:	47c0      	blx	r8
 801c18a:	4306      	orrs	r6, r0
 801c18c:	3568      	adds	r5, #104	@ 0x68
 801c18e:	e7e9      	b.n	801c164 <_fwalk_sglue+0x10>

0801c190 <iprintf>:
 801c190:	b40f      	push	{r0, r1, r2, r3}
 801c192:	b507      	push	{r0, r1, r2, lr}
 801c194:	4906      	ldr	r1, [pc, #24]	@ (801c1b0 <iprintf+0x20>)
 801c196:	ab04      	add	r3, sp, #16
 801c198:	6808      	ldr	r0, [r1, #0]
 801c19a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c19e:	6881      	ldr	r1, [r0, #8]
 801c1a0:	9301      	str	r3, [sp, #4]
 801c1a2:	f000 fbbd 	bl	801c920 <_vfiprintf_r>
 801c1a6:	b003      	add	sp, #12
 801c1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801c1ac:	b004      	add	sp, #16
 801c1ae:	4770      	bx	lr
 801c1b0:	2000030c 	.word	0x2000030c

0801c1b4 <sniprintf>:
 801c1b4:	b40c      	push	{r2, r3}
 801c1b6:	b530      	push	{r4, r5, lr}
 801c1b8:	4b18      	ldr	r3, [pc, #96]	@ (801c21c <sniprintf+0x68>)
 801c1ba:	1e0c      	subs	r4, r1, #0
 801c1bc:	681d      	ldr	r5, [r3, #0]
 801c1be:	b09d      	sub	sp, #116	@ 0x74
 801c1c0:	da08      	bge.n	801c1d4 <sniprintf+0x20>
 801c1c2:	238b      	movs	r3, #139	@ 0x8b
 801c1c4:	602b      	str	r3, [r5, #0]
 801c1c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c1ca:	b01d      	add	sp, #116	@ 0x74
 801c1cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c1d0:	b002      	add	sp, #8
 801c1d2:	4770      	bx	lr
 801c1d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c1d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c1dc:	f04f 0300 	mov.w	r3, #0
 801c1e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c1e2:	bf14      	ite	ne
 801c1e4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c1e8:	4623      	moveq	r3, r4
 801c1ea:	9304      	str	r3, [sp, #16]
 801c1ec:	9307      	str	r3, [sp, #28]
 801c1ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c1f2:	9002      	str	r0, [sp, #8]
 801c1f4:	9006      	str	r0, [sp, #24]
 801c1f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c1fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c1fc:	ab21      	add	r3, sp, #132	@ 0x84
 801c1fe:	a902      	add	r1, sp, #8
 801c200:	4628      	mov	r0, r5
 801c202:	9301      	str	r3, [sp, #4]
 801c204:	f000 fa66 	bl	801c6d4 <_svfiprintf_r>
 801c208:	1c43      	adds	r3, r0, #1
 801c20a:	bfbc      	itt	lt
 801c20c:	238b      	movlt	r3, #139	@ 0x8b
 801c20e:	602b      	strlt	r3, [r5, #0]
 801c210:	2c00      	cmp	r4, #0
 801c212:	d0da      	beq.n	801c1ca <sniprintf+0x16>
 801c214:	9b02      	ldr	r3, [sp, #8]
 801c216:	2200      	movs	r2, #0
 801c218:	701a      	strb	r2, [r3, #0]
 801c21a:	e7d6      	b.n	801c1ca <sniprintf+0x16>
 801c21c:	2000030c 	.word	0x2000030c

0801c220 <__sread>:
 801c220:	b510      	push	{r4, lr}
 801c222:	460c      	mov	r4, r1
 801c224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c228:	f000 f904 	bl	801c434 <_read_r>
 801c22c:	2800      	cmp	r0, #0
 801c22e:	bfab      	itete	ge
 801c230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c232:	89a3      	ldrhlt	r3, [r4, #12]
 801c234:	181b      	addge	r3, r3, r0
 801c236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c23a:	bfac      	ite	ge
 801c23c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c23e:	81a3      	strhlt	r3, [r4, #12]
 801c240:	bd10      	pop	{r4, pc}

0801c242 <__swrite>:
 801c242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c246:	461f      	mov	r7, r3
 801c248:	898b      	ldrh	r3, [r1, #12]
 801c24a:	05db      	lsls	r3, r3, #23
 801c24c:	4605      	mov	r5, r0
 801c24e:	460c      	mov	r4, r1
 801c250:	4616      	mov	r6, r2
 801c252:	d505      	bpl.n	801c260 <__swrite+0x1e>
 801c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c258:	2302      	movs	r3, #2
 801c25a:	2200      	movs	r2, #0
 801c25c:	f000 f8d8 	bl	801c410 <_lseek_r>
 801c260:	89a3      	ldrh	r3, [r4, #12]
 801c262:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c266:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c26a:	81a3      	strh	r3, [r4, #12]
 801c26c:	4632      	mov	r2, r6
 801c26e:	463b      	mov	r3, r7
 801c270:	4628      	mov	r0, r5
 801c272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c276:	f000 b8ff 	b.w	801c478 <_write_r>

0801c27a <__sseek>:
 801c27a:	b510      	push	{r4, lr}
 801c27c:	460c      	mov	r4, r1
 801c27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c282:	f000 f8c5 	bl	801c410 <_lseek_r>
 801c286:	1c43      	adds	r3, r0, #1
 801c288:	89a3      	ldrh	r3, [r4, #12]
 801c28a:	bf15      	itete	ne
 801c28c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c28e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c296:	81a3      	strheq	r3, [r4, #12]
 801c298:	bf18      	it	ne
 801c29a:	81a3      	strhne	r3, [r4, #12]
 801c29c:	bd10      	pop	{r4, pc}

0801c29e <__sclose>:
 801c29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2a2:	f000 b8a5 	b.w	801c3f0 <_close_r>

0801c2a6 <_vsniprintf_r>:
 801c2a6:	b530      	push	{r4, r5, lr}
 801c2a8:	4614      	mov	r4, r2
 801c2aa:	2c00      	cmp	r4, #0
 801c2ac:	b09b      	sub	sp, #108	@ 0x6c
 801c2ae:	4605      	mov	r5, r0
 801c2b0:	461a      	mov	r2, r3
 801c2b2:	da05      	bge.n	801c2c0 <_vsniprintf_r+0x1a>
 801c2b4:	238b      	movs	r3, #139	@ 0x8b
 801c2b6:	6003      	str	r3, [r0, #0]
 801c2b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c2bc:	b01b      	add	sp, #108	@ 0x6c
 801c2be:	bd30      	pop	{r4, r5, pc}
 801c2c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c2c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c2c8:	f04f 0300 	mov.w	r3, #0
 801c2cc:	9319      	str	r3, [sp, #100]	@ 0x64
 801c2ce:	bf14      	ite	ne
 801c2d0:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c2d4:	4623      	moveq	r3, r4
 801c2d6:	9302      	str	r3, [sp, #8]
 801c2d8:	9305      	str	r3, [sp, #20]
 801c2da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c2de:	9100      	str	r1, [sp, #0]
 801c2e0:	9104      	str	r1, [sp, #16]
 801c2e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c2e6:	4669      	mov	r1, sp
 801c2e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c2ea:	f000 f9f3 	bl	801c6d4 <_svfiprintf_r>
 801c2ee:	1c43      	adds	r3, r0, #1
 801c2f0:	bfbc      	itt	lt
 801c2f2:	238b      	movlt	r3, #139	@ 0x8b
 801c2f4:	602b      	strlt	r3, [r5, #0]
 801c2f6:	2c00      	cmp	r4, #0
 801c2f8:	d0e0      	beq.n	801c2bc <_vsniprintf_r+0x16>
 801c2fa:	9b00      	ldr	r3, [sp, #0]
 801c2fc:	2200      	movs	r2, #0
 801c2fe:	701a      	strb	r2, [r3, #0]
 801c300:	e7dc      	b.n	801c2bc <_vsniprintf_r+0x16>
	...

0801c304 <vsniprintf>:
 801c304:	b507      	push	{r0, r1, r2, lr}
 801c306:	9300      	str	r3, [sp, #0]
 801c308:	4613      	mov	r3, r2
 801c30a:	460a      	mov	r2, r1
 801c30c:	4601      	mov	r1, r0
 801c30e:	4803      	ldr	r0, [pc, #12]	@ (801c31c <vsniprintf+0x18>)
 801c310:	6800      	ldr	r0, [r0, #0]
 801c312:	f7ff ffc8 	bl	801c2a6 <_vsniprintf_r>
 801c316:	b003      	add	sp, #12
 801c318:	f85d fb04 	ldr.w	pc, [sp], #4
 801c31c:	2000030c 	.word	0x2000030c

0801c320 <memcmp>:
 801c320:	b510      	push	{r4, lr}
 801c322:	3901      	subs	r1, #1
 801c324:	4402      	add	r2, r0
 801c326:	4290      	cmp	r0, r2
 801c328:	d101      	bne.n	801c32e <memcmp+0xe>
 801c32a:	2000      	movs	r0, #0
 801c32c:	e005      	b.n	801c33a <memcmp+0x1a>
 801c32e:	7803      	ldrb	r3, [r0, #0]
 801c330:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c334:	42a3      	cmp	r3, r4
 801c336:	d001      	beq.n	801c33c <memcmp+0x1c>
 801c338:	1b18      	subs	r0, r3, r4
 801c33a:	bd10      	pop	{r4, pc}
 801c33c:	3001      	adds	r0, #1
 801c33e:	e7f2      	b.n	801c326 <memcmp+0x6>

0801c340 <memmove>:
 801c340:	4288      	cmp	r0, r1
 801c342:	b510      	push	{r4, lr}
 801c344:	eb01 0402 	add.w	r4, r1, r2
 801c348:	d902      	bls.n	801c350 <memmove+0x10>
 801c34a:	4284      	cmp	r4, r0
 801c34c:	4623      	mov	r3, r4
 801c34e:	d807      	bhi.n	801c360 <memmove+0x20>
 801c350:	1e43      	subs	r3, r0, #1
 801c352:	42a1      	cmp	r1, r4
 801c354:	d008      	beq.n	801c368 <memmove+0x28>
 801c356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c35a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c35e:	e7f8      	b.n	801c352 <memmove+0x12>
 801c360:	4402      	add	r2, r0
 801c362:	4601      	mov	r1, r0
 801c364:	428a      	cmp	r2, r1
 801c366:	d100      	bne.n	801c36a <memmove+0x2a>
 801c368:	bd10      	pop	{r4, pc}
 801c36a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c36e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c372:	e7f7      	b.n	801c364 <memmove+0x24>

0801c374 <memset>:
 801c374:	4402      	add	r2, r0
 801c376:	4603      	mov	r3, r0
 801c378:	4293      	cmp	r3, r2
 801c37a:	d100      	bne.n	801c37e <memset+0xa>
 801c37c:	4770      	bx	lr
 801c37e:	f803 1b01 	strb.w	r1, [r3], #1
 801c382:	e7f9      	b.n	801c378 <memset+0x4>

0801c384 <strchr>:
 801c384:	b2c9      	uxtb	r1, r1
 801c386:	4603      	mov	r3, r0
 801c388:	4618      	mov	r0, r3
 801c38a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c38e:	b112      	cbz	r2, 801c396 <strchr+0x12>
 801c390:	428a      	cmp	r2, r1
 801c392:	d1f9      	bne.n	801c388 <strchr+0x4>
 801c394:	4770      	bx	lr
 801c396:	2900      	cmp	r1, #0
 801c398:	bf18      	it	ne
 801c39a:	2000      	movne	r0, #0
 801c39c:	4770      	bx	lr

0801c39e <strncmp>:
 801c39e:	b510      	push	{r4, lr}
 801c3a0:	b16a      	cbz	r2, 801c3be <strncmp+0x20>
 801c3a2:	3901      	subs	r1, #1
 801c3a4:	1884      	adds	r4, r0, r2
 801c3a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c3aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c3ae:	429a      	cmp	r2, r3
 801c3b0:	d103      	bne.n	801c3ba <strncmp+0x1c>
 801c3b2:	42a0      	cmp	r0, r4
 801c3b4:	d001      	beq.n	801c3ba <strncmp+0x1c>
 801c3b6:	2a00      	cmp	r2, #0
 801c3b8:	d1f5      	bne.n	801c3a6 <strncmp+0x8>
 801c3ba:	1ad0      	subs	r0, r2, r3
 801c3bc:	bd10      	pop	{r4, pc}
 801c3be:	4610      	mov	r0, r2
 801c3c0:	e7fc      	b.n	801c3bc <strncmp+0x1e>

0801c3c2 <strstr>:
 801c3c2:	780a      	ldrb	r2, [r1, #0]
 801c3c4:	b570      	push	{r4, r5, r6, lr}
 801c3c6:	b96a      	cbnz	r2, 801c3e4 <strstr+0x22>
 801c3c8:	bd70      	pop	{r4, r5, r6, pc}
 801c3ca:	429a      	cmp	r2, r3
 801c3cc:	d109      	bne.n	801c3e2 <strstr+0x20>
 801c3ce:	460c      	mov	r4, r1
 801c3d0:	4605      	mov	r5, r0
 801c3d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d0f6      	beq.n	801c3c8 <strstr+0x6>
 801c3da:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c3de:	429e      	cmp	r6, r3
 801c3e0:	d0f7      	beq.n	801c3d2 <strstr+0x10>
 801c3e2:	3001      	adds	r0, #1
 801c3e4:	7803      	ldrb	r3, [r0, #0]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d1ef      	bne.n	801c3ca <strstr+0x8>
 801c3ea:	4618      	mov	r0, r3
 801c3ec:	e7ec      	b.n	801c3c8 <strstr+0x6>
	...

0801c3f0 <_close_r>:
 801c3f0:	b538      	push	{r3, r4, r5, lr}
 801c3f2:	4d06      	ldr	r5, [pc, #24]	@ (801c40c <_close_r+0x1c>)
 801c3f4:	2300      	movs	r3, #0
 801c3f6:	4604      	mov	r4, r0
 801c3f8:	4608      	mov	r0, r1
 801c3fa:	602b      	str	r3, [r5, #0]
 801c3fc:	f7e5 ffc2 	bl	8002384 <_close>
 801c400:	1c43      	adds	r3, r0, #1
 801c402:	d102      	bne.n	801c40a <_close_r+0x1a>
 801c404:	682b      	ldr	r3, [r5, #0]
 801c406:	b103      	cbz	r3, 801c40a <_close_r+0x1a>
 801c408:	6023      	str	r3, [r4, #0]
 801c40a:	bd38      	pop	{r3, r4, r5, pc}
 801c40c:	2000e85c 	.word	0x2000e85c

0801c410 <_lseek_r>:
 801c410:	b538      	push	{r3, r4, r5, lr}
 801c412:	4d07      	ldr	r5, [pc, #28]	@ (801c430 <_lseek_r+0x20>)
 801c414:	4604      	mov	r4, r0
 801c416:	4608      	mov	r0, r1
 801c418:	4611      	mov	r1, r2
 801c41a:	2200      	movs	r2, #0
 801c41c:	602a      	str	r2, [r5, #0]
 801c41e:	461a      	mov	r2, r3
 801c420:	f7e5 ffd7 	bl	80023d2 <_lseek>
 801c424:	1c43      	adds	r3, r0, #1
 801c426:	d102      	bne.n	801c42e <_lseek_r+0x1e>
 801c428:	682b      	ldr	r3, [r5, #0]
 801c42a:	b103      	cbz	r3, 801c42e <_lseek_r+0x1e>
 801c42c:	6023      	str	r3, [r4, #0]
 801c42e:	bd38      	pop	{r3, r4, r5, pc}
 801c430:	2000e85c 	.word	0x2000e85c

0801c434 <_read_r>:
 801c434:	b538      	push	{r3, r4, r5, lr}
 801c436:	4d07      	ldr	r5, [pc, #28]	@ (801c454 <_read_r+0x20>)
 801c438:	4604      	mov	r4, r0
 801c43a:	4608      	mov	r0, r1
 801c43c:	4611      	mov	r1, r2
 801c43e:	2200      	movs	r2, #0
 801c440:	602a      	str	r2, [r5, #0]
 801c442:	461a      	mov	r2, r3
 801c444:	f7e5 ff65 	bl	8002312 <_read>
 801c448:	1c43      	adds	r3, r0, #1
 801c44a:	d102      	bne.n	801c452 <_read_r+0x1e>
 801c44c:	682b      	ldr	r3, [r5, #0]
 801c44e:	b103      	cbz	r3, 801c452 <_read_r+0x1e>
 801c450:	6023      	str	r3, [r4, #0]
 801c452:	bd38      	pop	{r3, r4, r5, pc}
 801c454:	2000e85c 	.word	0x2000e85c

0801c458 <_sbrk_r>:
 801c458:	b538      	push	{r3, r4, r5, lr}
 801c45a:	4d06      	ldr	r5, [pc, #24]	@ (801c474 <_sbrk_r+0x1c>)
 801c45c:	2300      	movs	r3, #0
 801c45e:	4604      	mov	r4, r0
 801c460:	4608      	mov	r0, r1
 801c462:	602b      	str	r3, [r5, #0]
 801c464:	f7e5 ffc2 	bl	80023ec <_sbrk>
 801c468:	1c43      	adds	r3, r0, #1
 801c46a:	d102      	bne.n	801c472 <_sbrk_r+0x1a>
 801c46c:	682b      	ldr	r3, [r5, #0]
 801c46e:	b103      	cbz	r3, 801c472 <_sbrk_r+0x1a>
 801c470:	6023      	str	r3, [r4, #0]
 801c472:	bd38      	pop	{r3, r4, r5, pc}
 801c474:	2000e85c 	.word	0x2000e85c

0801c478 <_write_r>:
 801c478:	b538      	push	{r3, r4, r5, lr}
 801c47a:	4d07      	ldr	r5, [pc, #28]	@ (801c498 <_write_r+0x20>)
 801c47c:	4604      	mov	r4, r0
 801c47e:	4608      	mov	r0, r1
 801c480:	4611      	mov	r1, r2
 801c482:	2200      	movs	r2, #0
 801c484:	602a      	str	r2, [r5, #0]
 801c486:	461a      	mov	r2, r3
 801c488:	f7e5 ff60 	bl	800234c <_write>
 801c48c:	1c43      	adds	r3, r0, #1
 801c48e:	d102      	bne.n	801c496 <_write_r+0x1e>
 801c490:	682b      	ldr	r3, [r5, #0]
 801c492:	b103      	cbz	r3, 801c496 <_write_r+0x1e>
 801c494:	6023      	str	r3, [r4, #0]
 801c496:	bd38      	pop	{r3, r4, r5, pc}
 801c498:	2000e85c 	.word	0x2000e85c

0801c49c <__errno>:
 801c49c:	4b01      	ldr	r3, [pc, #4]	@ (801c4a4 <__errno+0x8>)
 801c49e:	6818      	ldr	r0, [r3, #0]
 801c4a0:	4770      	bx	lr
 801c4a2:	bf00      	nop
 801c4a4:	2000030c 	.word	0x2000030c

0801c4a8 <__libc_init_array>:
 801c4a8:	b570      	push	{r4, r5, r6, lr}
 801c4aa:	4d0d      	ldr	r5, [pc, #52]	@ (801c4e0 <__libc_init_array+0x38>)
 801c4ac:	4c0d      	ldr	r4, [pc, #52]	@ (801c4e4 <__libc_init_array+0x3c>)
 801c4ae:	1b64      	subs	r4, r4, r5
 801c4b0:	10a4      	asrs	r4, r4, #2
 801c4b2:	2600      	movs	r6, #0
 801c4b4:	42a6      	cmp	r6, r4
 801c4b6:	d109      	bne.n	801c4cc <__libc_init_array+0x24>
 801c4b8:	4d0b      	ldr	r5, [pc, #44]	@ (801c4e8 <__libc_init_array+0x40>)
 801c4ba:	4c0c      	ldr	r4, [pc, #48]	@ (801c4ec <__libc_init_array+0x44>)
 801c4bc:	f000 fef6 	bl	801d2ac <_init>
 801c4c0:	1b64      	subs	r4, r4, r5
 801c4c2:	10a4      	asrs	r4, r4, #2
 801c4c4:	2600      	movs	r6, #0
 801c4c6:	42a6      	cmp	r6, r4
 801c4c8:	d105      	bne.n	801c4d6 <__libc_init_array+0x2e>
 801c4ca:	bd70      	pop	{r4, r5, r6, pc}
 801c4cc:	f855 3b04 	ldr.w	r3, [r5], #4
 801c4d0:	4798      	blx	r3
 801c4d2:	3601      	adds	r6, #1
 801c4d4:	e7ee      	b.n	801c4b4 <__libc_init_array+0xc>
 801c4d6:	f855 3b04 	ldr.w	r3, [r5], #4
 801c4da:	4798      	blx	r3
 801c4dc:	3601      	adds	r6, #1
 801c4de:	e7f2      	b.n	801c4c6 <__libc_init_array+0x1e>
 801c4e0:	0801e2ac 	.word	0x0801e2ac
 801c4e4:	0801e2ac 	.word	0x0801e2ac
 801c4e8:	0801e2ac 	.word	0x0801e2ac
 801c4ec:	0801e2bc 	.word	0x0801e2bc

0801c4f0 <__retarget_lock_init_recursive>:
 801c4f0:	4770      	bx	lr

0801c4f2 <__retarget_lock_acquire_recursive>:
 801c4f2:	4770      	bx	lr

0801c4f4 <__retarget_lock_release_recursive>:
 801c4f4:	4770      	bx	lr

0801c4f6 <strcpy>:
 801c4f6:	4603      	mov	r3, r0
 801c4f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c4fc:	f803 2b01 	strb.w	r2, [r3], #1
 801c500:	2a00      	cmp	r2, #0
 801c502:	d1f9      	bne.n	801c4f8 <strcpy+0x2>
 801c504:	4770      	bx	lr

0801c506 <memcpy>:
 801c506:	440a      	add	r2, r1
 801c508:	4291      	cmp	r1, r2
 801c50a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801c50e:	d100      	bne.n	801c512 <memcpy+0xc>
 801c510:	4770      	bx	lr
 801c512:	b510      	push	{r4, lr}
 801c514:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c518:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c51c:	4291      	cmp	r1, r2
 801c51e:	d1f9      	bne.n	801c514 <memcpy+0xe>
 801c520:	bd10      	pop	{r4, pc}
	...

0801c524 <__assert_func>:
 801c524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c526:	4614      	mov	r4, r2
 801c528:	461a      	mov	r2, r3
 801c52a:	4b09      	ldr	r3, [pc, #36]	@ (801c550 <__assert_func+0x2c>)
 801c52c:	681b      	ldr	r3, [r3, #0]
 801c52e:	4605      	mov	r5, r0
 801c530:	68d8      	ldr	r0, [r3, #12]
 801c532:	b14c      	cbz	r4, 801c548 <__assert_func+0x24>
 801c534:	4b07      	ldr	r3, [pc, #28]	@ (801c554 <__assert_func+0x30>)
 801c536:	9100      	str	r1, [sp, #0]
 801c538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c53c:	4906      	ldr	r1, [pc, #24]	@ (801c558 <__assert_func+0x34>)
 801c53e:	462b      	mov	r3, r5
 801c540:	f000 fd3e 	bl	801cfc0 <fiprintf>
 801c544:	f000 fde2 	bl	801d10c <abort>
 801c548:	4b04      	ldr	r3, [pc, #16]	@ (801c55c <__assert_func+0x38>)
 801c54a:	461c      	mov	r4, r3
 801c54c:	e7f3      	b.n	801c536 <__assert_func+0x12>
 801c54e:	bf00      	nop
 801c550:	2000030c 	.word	0x2000030c
 801c554:	0801e133 	.word	0x0801e133
 801c558:	0801e140 	.word	0x0801e140
 801c55c:	0801e16e 	.word	0x0801e16e

0801c560 <__env_lock>:
 801c560:	4801      	ldr	r0, [pc, #4]	@ (801c568 <__env_lock+0x8>)
 801c562:	f7ff bfc6 	b.w	801c4f2 <__retarget_lock_acquire_recursive>
 801c566:	bf00      	nop
 801c568:	2000e860 	.word	0x2000e860

0801c56c <__env_unlock>:
 801c56c:	4801      	ldr	r0, [pc, #4]	@ (801c574 <__env_unlock+0x8>)
 801c56e:	f7ff bfc1 	b.w	801c4f4 <__retarget_lock_release_recursive>
 801c572:	bf00      	nop
 801c574:	2000e860 	.word	0x2000e860

0801c578 <_free_r>:
 801c578:	b538      	push	{r3, r4, r5, lr}
 801c57a:	4605      	mov	r5, r0
 801c57c:	2900      	cmp	r1, #0
 801c57e:	d041      	beq.n	801c604 <_free_r+0x8c>
 801c580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c584:	1f0c      	subs	r4, r1, #4
 801c586:	2b00      	cmp	r3, #0
 801c588:	bfb8      	it	lt
 801c58a:	18e4      	addlt	r4, r4, r3
 801c58c:	f7ff fc18 	bl	801bdc0 <__malloc_lock>
 801c590:	4a1d      	ldr	r2, [pc, #116]	@ (801c608 <_free_r+0x90>)
 801c592:	6813      	ldr	r3, [r2, #0]
 801c594:	b933      	cbnz	r3, 801c5a4 <_free_r+0x2c>
 801c596:	6063      	str	r3, [r4, #4]
 801c598:	6014      	str	r4, [r2, #0]
 801c59a:	4628      	mov	r0, r5
 801c59c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c5a0:	f7ff bc14 	b.w	801bdcc <__malloc_unlock>
 801c5a4:	42a3      	cmp	r3, r4
 801c5a6:	d908      	bls.n	801c5ba <_free_r+0x42>
 801c5a8:	6820      	ldr	r0, [r4, #0]
 801c5aa:	1821      	adds	r1, r4, r0
 801c5ac:	428b      	cmp	r3, r1
 801c5ae:	bf01      	itttt	eq
 801c5b0:	6819      	ldreq	r1, [r3, #0]
 801c5b2:	685b      	ldreq	r3, [r3, #4]
 801c5b4:	1809      	addeq	r1, r1, r0
 801c5b6:	6021      	streq	r1, [r4, #0]
 801c5b8:	e7ed      	b.n	801c596 <_free_r+0x1e>
 801c5ba:	461a      	mov	r2, r3
 801c5bc:	685b      	ldr	r3, [r3, #4]
 801c5be:	b10b      	cbz	r3, 801c5c4 <_free_r+0x4c>
 801c5c0:	42a3      	cmp	r3, r4
 801c5c2:	d9fa      	bls.n	801c5ba <_free_r+0x42>
 801c5c4:	6811      	ldr	r1, [r2, #0]
 801c5c6:	1850      	adds	r0, r2, r1
 801c5c8:	42a0      	cmp	r0, r4
 801c5ca:	d10b      	bne.n	801c5e4 <_free_r+0x6c>
 801c5cc:	6820      	ldr	r0, [r4, #0]
 801c5ce:	4401      	add	r1, r0
 801c5d0:	1850      	adds	r0, r2, r1
 801c5d2:	4283      	cmp	r3, r0
 801c5d4:	6011      	str	r1, [r2, #0]
 801c5d6:	d1e0      	bne.n	801c59a <_free_r+0x22>
 801c5d8:	6818      	ldr	r0, [r3, #0]
 801c5da:	685b      	ldr	r3, [r3, #4]
 801c5dc:	6053      	str	r3, [r2, #4]
 801c5de:	4408      	add	r0, r1
 801c5e0:	6010      	str	r0, [r2, #0]
 801c5e2:	e7da      	b.n	801c59a <_free_r+0x22>
 801c5e4:	d902      	bls.n	801c5ec <_free_r+0x74>
 801c5e6:	230c      	movs	r3, #12
 801c5e8:	602b      	str	r3, [r5, #0]
 801c5ea:	e7d6      	b.n	801c59a <_free_r+0x22>
 801c5ec:	6820      	ldr	r0, [r4, #0]
 801c5ee:	1821      	adds	r1, r4, r0
 801c5f0:	428b      	cmp	r3, r1
 801c5f2:	bf04      	itt	eq
 801c5f4:	6819      	ldreq	r1, [r3, #0]
 801c5f6:	685b      	ldreq	r3, [r3, #4]
 801c5f8:	6063      	str	r3, [r4, #4]
 801c5fa:	bf04      	itt	eq
 801c5fc:	1809      	addeq	r1, r1, r0
 801c5fe:	6021      	streq	r1, [r4, #0]
 801c600:	6054      	str	r4, [r2, #4]
 801c602:	e7ca      	b.n	801c59a <_free_r+0x22>
 801c604:	bd38      	pop	{r3, r4, r5, pc}
 801c606:	bf00      	nop
 801c608:	2000e71c 	.word	0x2000e71c

0801c60c <_malloc_usable_size_r>:
 801c60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c610:	1f18      	subs	r0, r3, #4
 801c612:	2b00      	cmp	r3, #0
 801c614:	bfbc      	itt	lt
 801c616:	580b      	ldrlt	r3, [r1, r0]
 801c618:	18c0      	addlt	r0, r0, r3
 801c61a:	4770      	bx	lr

0801c61c <__ssputs_r>:
 801c61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c620:	688e      	ldr	r6, [r1, #8]
 801c622:	461f      	mov	r7, r3
 801c624:	42be      	cmp	r6, r7
 801c626:	680b      	ldr	r3, [r1, #0]
 801c628:	4682      	mov	sl, r0
 801c62a:	460c      	mov	r4, r1
 801c62c:	4690      	mov	r8, r2
 801c62e:	d82d      	bhi.n	801c68c <__ssputs_r+0x70>
 801c630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c634:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c638:	d026      	beq.n	801c688 <__ssputs_r+0x6c>
 801c63a:	6965      	ldr	r5, [r4, #20]
 801c63c:	6909      	ldr	r1, [r1, #16]
 801c63e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c642:	eba3 0901 	sub.w	r9, r3, r1
 801c646:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c64a:	1c7b      	adds	r3, r7, #1
 801c64c:	444b      	add	r3, r9
 801c64e:	106d      	asrs	r5, r5, #1
 801c650:	429d      	cmp	r5, r3
 801c652:	bf38      	it	cc
 801c654:	461d      	movcc	r5, r3
 801c656:	0553      	lsls	r3, r2, #21
 801c658:	d527      	bpl.n	801c6aa <__ssputs_r+0x8e>
 801c65a:	4629      	mov	r1, r5
 801c65c:	f7ff fb30 	bl	801bcc0 <_malloc_r>
 801c660:	4606      	mov	r6, r0
 801c662:	b360      	cbz	r0, 801c6be <__ssputs_r+0xa2>
 801c664:	6921      	ldr	r1, [r4, #16]
 801c666:	464a      	mov	r2, r9
 801c668:	f7ff ff4d 	bl	801c506 <memcpy>
 801c66c:	89a3      	ldrh	r3, [r4, #12]
 801c66e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c676:	81a3      	strh	r3, [r4, #12]
 801c678:	6126      	str	r6, [r4, #16]
 801c67a:	6165      	str	r5, [r4, #20]
 801c67c:	444e      	add	r6, r9
 801c67e:	eba5 0509 	sub.w	r5, r5, r9
 801c682:	6026      	str	r6, [r4, #0]
 801c684:	60a5      	str	r5, [r4, #8]
 801c686:	463e      	mov	r6, r7
 801c688:	42be      	cmp	r6, r7
 801c68a:	d900      	bls.n	801c68e <__ssputs_r+0x72>
 801c68c:	463e      	mov	r6, r7
 801c68e:	6820      	ldr	r0, [r4, #0]
 801c690:	4632      	mov	r2, r6
 801c692:	4641      	mov	r1, r8
 801c694:	f7ff fe54 	bl	801c340 <memmove>
 801c698:	68a3      	ldr	r3, [r4, #8]
 801c69a:	1b9b      	subs	r3, r3, r6
 801c69c:	60a3      	str	r3, [r4, #8]
 801c69e:	6823      	ldr	r3, [r4, #0]
 801c6a0:	4433      	add	r3, r6
 801c6a2:	6023      	str	r3, [r4, #0]
 801c6a4:	2000      	movs	r0, #0
 801c6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6aa:	462a      	mov	r2, r5
 801c6ac:	f7ff fc08 	bl	801bec0 <_realloc_r>
 801c6b0:	4606      	mov	r6, r0
 801c6b2:	2800      	cmp	r0, #0
 801c6b4:	d1e0      	bne.n	801c678 <__ssputs_r+0x5c>
 801c6b6:	6921      	ldr	r1, [r4, #16]
 801c6b8:	4650      	mov	r0, sl
 801c6ba:	f7ff ff5d 	bl	801c578 <_free_r>
 801c6be:	230c      	movs	r3, #12
 801c6c0:	f8ca 3000 	str.w	r3, [sl]
 801c6c4:	89a3      	ldrh	r3, [r4, #12]
 801c6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c6ca:	81a3      	strh	r3, [r4, #12]
 801c6cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c6d0:	e7e9      	b.n	801c6a6 <__ssputs_r+0x8a>
	...

0801c6d4 <_svfiprintf_r>:
 801c6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6d8:	4698      	mov	r8, r3
 801c6da:	898b      	ldrh	r3, [r1, #12]
 801c6dc:	061b      	lsls	r3, r3, #24
 801c6de:	b09d      	sub	sp, #116	@ 0x74
 801c6e0:	4607      	mov	r7, r0
 801c6e2:	460d      	mov	r5, r1
 801c6e4:	4614      	mov	r4, r2
 801c6e6:	d510      	bpl.n	801c70a <_svfiprintf_r+0x36>
 801c6e8:	690b      	ldr	r3, [r1, #16]
 801c6ea:	b973      	cbnz	r3, 801c70a <_svfiprintf_r+0x36>
 801c6ec:	2140      	movs	r1, #64	@ 0x40
 801c6ee:	f7ff fae7 	bl	801bcc0 <_malloc_r>
 801c6f2:	6028      	str	r0, [r5, #0]
 801c6f4:	6128      	str	r0, [r5, #16]
 801c6f6:	b930      	cbnz	r0, 801c706 <_svfiprintf_r+0x32>
 801c6f8:	230c      	movs	r3, #12
 801c6fa:	603b      	str	r3, [r7, #0]
 801c6fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c700:	b01d      	add	sp, #116	@ 0x74
 801c702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c706:	2340      	movs	r3, #64	@ 0x40
 801c708:	616b      	str	r3, [r5, #20]
 801c70a:	2300      	movs	r3, #0
 801c70c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c70e:	2320      	movs	r3, #32
 801c710:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c714:	f8cd 800c 	str.w	r8, [sp, #12]
 801c718:	2330      	movs	r3, #48	@ 0x30
 801c71a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c8b8 <_svfiprintf_r+0x1e4>
 801c71e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c722:	f04f 0901 	mov.w	r9, #1
 801c726:	4623      	mov	r3, r4
 801c728:	469a      	mov	sl, r3
 801c72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c72e:	b10a      	cbz	r2, 801c734 <_svfiprintf_r+0x60>
 801c730:	2a25      	cmp	r2, #37	@ 0x25
 801c732:	d1f9      	bne.n	801c728 <_svfiprintf_r+0x54>
 801c734:	ebba 0b04 	subs.w	fp, sl, r4
 801c738:	d00b      	beq.n	801c752 <_svfiprintf_r+0x7e>
 801c73a:	465b      	mov	r3, fp
 801c73c:	4622      	mov	r2, r4
 801c73e:	4629      	mov	r1, r5
 801c740:	4638      	mov	r0, r7
 801c742:	f7ff ff6b 	bl	801c61c <__ssputs_r>
 801c746:	3001      	adds	r0, #1
 801c748:	f000 80a7 	beq.w	801c89a <_svfiprintf_r+0x1c6>
 801c74c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c74e:	445a      	add	r2, fp
 801c750:	9209      	str	r2, [sp, #36]	@ 0x24
 801c752:	f89a 3000 	ldrb.w	r3, [sl]
 801c756:	2b00      	cmp	r3, #0
 801c758:	f000 809f 	beq.w	801c89a <_svfiprintf_r+0x1c6>
 801c75c:	2300      	movs	r3, #0
 801c75e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c766:	f10a 0a01 	add.w	sl, sl, #1
 801c76a:	9304      	str	r3, [sp, #16]
 801c76c:	9307      	str	r3, [sp, #28]
 801c76e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c772:	931a      	str	r3, [sp, #104]	@ 0x68
 801c774:	4654      	mov	r4, sl
 801c776:	2205      	movs	r2, #5
 801c778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c77c:	484e      	ldr	r0, [pc, #312]	@ (801c8b8 <_svfiprintf_r+0x1e4>)
 801c77e:	f7e3 fd3f 	bl	8000200 <memchr>
 801c782:	9a04      	ldr	r2, [sp, #16]
 801c784:	b9d8      	cbnz	r0, 801c7be <_svfiprintf_r+0xea>
 801c786:	06d0      	lsls	r0, r2, #27
 801c788:	bf44      	itt	mi
 801c78a:	2320      	movmi	r3, #32
 801c78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c790:	0711      	lsls	r1, r2, #28
 801c792:	bf44      	itt	mi
 801c794:	232b      	movmi	r3, #43	@ 0x2b
 801c796:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c79a:	f89a 3000 	ldrb.w	r3, [sl]
 801c79e:	2b2a      	cmp	r3, #42	@ 0x2a
 801c7a0:	d015      	beq.n	801c7ce <_svfiprintf_r+0xfa>
 801c7a2:	9a07      	ldr	r2, [sp, #28]
 801c7a4:	4654      	mov	r4, sl
 801c7a6:	2000      	movs	r0, #0
 801c7a8:	f04f 0c0a 	mov.w	ip, #10
 801c7ac:	4621      	mov	r1, r4
 801c7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c7b2:	3b30      	subs	r3, #48	@ 0x30
 801c7b4:	2b09      	cmp	r3, #9
 801c7b6:	d94b      	bls.n	801c850 <_svfiprintf_r+0x17c>
 801c7b8:	b1b0      	cbz	r0, 801c7e8 <_svfiprintf_r+0x114>
 801c7ba:	9207      	str	r2, [sp, #28]
 801c7bc:	e014      	b.n	801c7e8 <_svfiprintf_r+0x114>
 801c7be:	eba0 0308 	sub.w	r3, r0, r8
 801c7c2:	fa09 f303 	lsl.w	r3, r9, r3
 801c7c6:	4313      	orrs	r3, r2
 801c7c8:	9304      	str	r3, [sp, #16]
 801c7ca:	46a2      	mov	sl, r4
 801c7cc:	e7d2      	b.n	801c774 <_svfiprintf_r+0xa0>
 801c7ce:	9b03      	ldr	r3, [sp, #12]
 801c7d0:	1d19      	adds	r1, r3, #4
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	9103      	str	r1, [sp, #12]
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	bfbb      	ittet	lt
 801c7da:	425b      	neglt	r3, r3
 801c7dc:	f042 0202 	orrlt.w	r2, r2, #2
 801c7e0:	9307      	strge	r3, [sp, #28]
 801c7e2:	9307      	strlt	r3, [sp, #28]
 801c7e4:	bfb8      	it	lt
 801c7e6:	9204      	strlt	r2, [sp, #16]
 801c7e8:	7823      	ldrb	r3, [r4, #0]
 801c7ea:	2b2e      	cmp	r3, #46	@ 0x2e
 801c7ec:	d10a      	bne.n	801c804 <_svfiprintf_r+0x130>
 801c7ee:	7863      	ldrb	r3, [r4, #1]
 801c7f0:	2b2a      	cmp	r3, #42	@ 0x2a
 801c7f2:	d132      	bne.n	801c85a <_svfiprintf_r+0x186>
 801c7f4:	9b03      	ldr	r3, [sp, #12]
 801c7f6:	1d1a      	adds	r2, r3, #4
 801c7f8:	681b      	ldr	r3, [r3, #0]
 801c7fa:	9203      	str	r2, [sp, #12]
 801c7fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c800:	3402      	adds	r4, #2
 801c802:	9305      	str	r3, [sp, #20]
 801c804:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c8c8 <_svfiprintf_r+0x1f4>
 801c808:	7821      	ldrb	r1, [r4, #0]
 801c80a:	2203      	movs	r2, #3
 801c80c:	4650      	mov	r0, sl
 801c80e:	f7e3 fcf7 	bl	8000200 <memchr>
 801c812:	b138      	cbz	r0, 801c824 <_svfiprintf_r+0x150>
 801c814:	9b04      	ldr	r3, [sp, #16]
 801c816:	eba0 000a 	sub.w	r0, r0, sl
 801c81a:	2240      	movs	r2, #64	@ 0x40
 801c81c:	4082      	lsls	r2, r0
 801c81e:	4313      	orrs	r3, r2
 801c820:	3401      	adds	r4, #1
 801c822:	9304      	str	r3, [sp, #16]
 801c824:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c828:	4824      	ldr	r0, [pc, #144]	@ (801c8bc <_svfiprintf_r+0x1e8>)
 801c82a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c82e:	2206      	movs	r2, #6
 801c830:	f7e3 fce6 	bl	8000200 <memchr>
 801c834:	2800      	cmp	r0, #0
 801c836:	d036      	beq.n	801c8a6 <_svfiprintf_r+0x1d2>
 801c838:	4b21      	ldr	r3, [pc, #132]	@ (801c8c0 <_svfiprintf_r+0x1ec>)
 801c83a:	bb1b      	cbnz	r3, 801c884 <_svfiprintf_r+0x1b0>
 801c83c:	9b03      	ldr	r3, [sp, #12]
 801c83e:	3307      	adds	r3, #7
 801c840:	f023 0307 	bic.w	r3, r3, #7
 801c844:	3308      	adds	r3, #8
 801c846:	9303      	str	r3, [sp, #12]
 801c848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c84a:	4433      	add	r3, r6
 801c84c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c84e:	e76a      	b.n	801c726 <_svfiprintf_r+0x52>
 801c850:	fb0c 3202 	mla	r2, ip, r2, r3
 801c854:	460c      	mov	r4, r1
 801c856:	2001      	movs	r0, #1
 801c858:	e7a8      	b.n	801c7ac <_svfiprintf_r+0xd8>
 801c85a:	2300      	movs	r3, #0
 801c85c:	3401      	adds	r4, #1
 801c85e:	9305      	str	r3, [sp, #20]
 801c860:	4619      	mov	r1, r3
 801c862:	f04f 0c0a 	mov.w	ip, #10
 801c866:	4620      	mov	r0, r4
 801c868:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c86c:	3a30      	subs	r2, #48	@ 0x30
 801c86e:	2a09      	cmp	r2, #9
 801c870:	d903      	bls.n	801c87a <_svfiprintf_r+0x1a6>
 801c872:	2b00      	cmp	r3, #0
 801c874:	d0c6      	beq.n	801c804 <_svfiprintf_r+0x130>
 801c876:	9105      	str	r1, [sp, #20]
 801c878:	e7c4      	b.n	801c804 <_svfiprintf_r+0x130>
 801c87a:	fb0c 2101 	mla	r1, ip, r1, r2
 801c87e:	4604      	mov	r4, r0
 801c880:	2301      	movs	r3, #1
 801c882:	e7f0      	b.n	801c866 <_svfiprintf_r+0x192>
 801c884:	ab03      	add	r3, sp, #12
 801c886:	9300      	str	r3, [sp, #0]
 801c888:	462a      	mov	r2, r5
 801c88a:	4b0e      	ldr	r3, [pc, #56]	@ (801c8c4 <_svfiprintf_r+0x1f0>)
 801c88c:	a904      	add	r1, sp, #16
 801c88e:	4638      	mov	r0, r7
 801c890:	f3af 8000 	nop.w
 801c894:	1c42      	adds	r2, r0, #1
 801c896:	4606      	mov	r6, r0
 801c898:	d1d6      	bne.n	801c848 <_svfiprintf_r+0x174>
 801c89a:	89ab      	ldrh	r3, [r5, #12]
 801c89c:	065b      	lsls	r3, r3, #25
 801c89e:	f53f af2d 	bmi.w	801c6fc <_svfiprintf_r+0x28>
 801c8a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c8a4:	e72c      	b.n	801c700 <_svfiprintf_r+0x2c>
 801c8a6:	ab03      	add	r3, sp, #12
 801c8a8:	9300      	str	r3, [sp, #0]
 801c8aa:	462a      	mov	r2, r5
 801c8ac:	4b05      	ldr	r3, [pc, #20]	@ (801c8c4 <_svfiprintf_r+0x1f0>)
 801c8ae:	a904      	add	r1, sp, #16
 801c8b0:	4638      	mov	r0, r7
 801c8b2:	f000 f9bb 	bl	801cc2c <_printf_i>
 801c8b6:	e7ed      	b.n	801c894 <_svfiprintf_r+0x1c0>
 801c8b8:	0801e16f 	.word	0x0801e16f
 801c8bc:	0801e179 	.word	0x0801e179
 801c8c0:	00000000 	.word	0x00000000
 801c8c4:	0801c61d 	.word	0x0801c61d
 801c8c8:	0801e175 	.word	0x0801e175

0801c8cc <__sfputc_r>:
 801c8cc:	6893      	ldr	r3, [r2, #8]
 801c8ce:	3b01      	subs	r3, #1
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	b410      	push	{r4}
 801c8d4:	6093      	str	r3, [r2, #8]
 801c8d6:	da08      	bge.n	801c8ea <__sfputc_r+0x1e>
 801c8d8:	6994      	ldr	r4, [r2, #24]
 801c8da:	42a3      	cmp	r3, r4
 801c8dc:	db01      	blt.n	801c8e2 <__sfputc_r+0x16>
 801c8de:	290a      	cmp	r1, #10
 801c8e0:	d103      	bne.n	801c8ea <__sfputc_r+0x1e>
 801c8e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c8e6:	f000 bb7d 	b.w	801cfe4 <__swbuf_r>
 801c8ea:	6813      	ldr	r3, [r2, #0]
 801c8ec:	1c58      	adds	r0, r3, #1
 801c8ee:	6010      	str	r0, [r2, #0]
 801c8f0:	7019      	strb	r1, [r3, #0]
 801c8f2:	4608      	mov	r0, r1
 801c8f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c8f8:	4770      	bx	lr

0801c8fa <__sfputs_r>:
 801c8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c8fc:	4606      	mov	r6, r0
 801c8fe:	460f      	mov	r7, r1
 801c900:	4614      	mov	r4, r2
 801c902:	18d5      	adds	r5, r2, r3
 801c904:	42ac      	cmp	r4, r5
 801c906:	d101      	bne.n	801c90c <__sfputs_r+0x12>
 801c908:	2000      	movs	r0, #0
 801c90a:	e007      	b.n	801c91c <__sfputs_r+0x22>
 801c90c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c910:	463a      	mov	r2, r7
 801c912:	4630      	mov	r0, r6
 801c914:	f7ff ffda 	bl	801c8cc <__sfputc_r>
 801c918:	1c43      	adds	r3, r0, #1
 801c91a:	d1f3      	bne.n	801c904 <__sfputs_r+0xa>
 801c91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c920 <_vfiprintf_r>:
 801c920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c924:	460d      	mov	r5, r1
 801c926:	b09d      	sub	sp, #116	@ 0x74
 801c928:	4614      	mov	r4, r2
 801c92a:	4698      	mov	r8, r3
 801c92c:	4606      	mov	r6, r0
 801c92e:	b118      	cbz	r0, 801c938 <_vfiprintf_r+0x18>
 801c930:	6a03      	ldr	r3, [r0, #32]
 801c932:	b90b      	cbnz	r3, 801c938 <_vfiprintf_r+0x18>
 801c934:	f7ff fbf6 	bl	801c124 <__sinit>
 801c938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c93a:	07d9      	lsls	r1, r3, #31
 801c93c:	d405      	bmi.n	801c94a <_vfiprintf_r+0x2a>
 801c93e:	89ab      	ldrh	r3, [r5, #12]
 801c940:	059a      	lsls	r2, r3, #22
 801c942:	d402      	bmi.n	801c94a <_vfiprintf_r+0x2a>
 801c944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c946:	f7ff fdd4 	bl	801c4f2 <__retarget_lock_acquire_recursive>
 801c94a:	89ab      	ldrh	r3, [r5, #12]
 801c94c:	071b      	lsls	r3, r3, #28
 801c94e:	d501      	bpl.n	801c954 <_vfiprintf_r+0x34>
 801c950:	692b      	ldr	r3, [r5, #16]
 801c952:	b99b      	cbnz	r3, 801c97c <_vfiprintf_r+0x5c>
 801c954:	4629      	mov	r1, r5
 801c956:	4630      	mov	r0, r6
 801c958:	f000 fb82 	bl	801d060 <__swsetup_r>
 801c95c:	b170      	cbz	r0, 801c97c <_vfiprintf_r+0x5c>
 801c95e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c960:	07dc      	lsls	r4, r3, #31
 801c962:	d504      	bpl.n	801c96e <_vfiprintf_r+0x4e>
 801c964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c968:	b01d      	add	sp, #116	@ 0x74
 801c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c96e:	89ab      	ldrh	r3, [r5, #12]
 801c970:	0598      	lsls	r0, r3, #22
 801c972:	d4f7      	bmi.n	801c964 <_vfiprintf_r+0x44>
 801c974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c976:	f7ff fdbd 	bl	801c4f4 <__retarget_lock_release_recursive>
 801c97a:	e7f3      	b.n	801c964 <_vfiprintf_r+0x44>
 801c97c:	2300      	movs	r3, #0
 801c97e:	9309      	str	r3, [sp, #36]	@ 0x24
 801c980:	2320      	movs	r3, #32
 801c982:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c986:	f8cd 800c 	str.w	r8, [sp, #12]
 801c98a:	2330      	movs	r3, #48	@ 0x30
 801c98c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cb3c <_vfiprintf_r+0x21c>
 801c990:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c994:	f04f 0901 	mov.w	r9, #1
 801c998:	4623      	mov	r3, r4
 801c99a:	469a      	mov	sl, r3
 801c99c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9a0:	b10a      	cbz	r2, 801c9a6 <_vfiprintf_r+0x86>
 801c9a2:	2a25      	cmp	r2, #37	@ 0x25
 801c9a4:	d1f9      	bne.n	801c99a <_vfiprintf_r+0x7a>
 801c9a6:	ebba 0b04 	subs.w	fp, sl, r4
 801c9aa:	d00b      	beq.n	801c9c4 <_vfiprintf_r+0xa4>
 801c9ac:	465b      	mov	r3, fp
 801c9ae:	4622      	mov	r2, r4
 801c9b0:	4629      	mov	r1, r5
 801c9b2:	4630      	mov	r0, r6
 801c9b4:	f7ff ffa1 	bl	801c8fa <__sfputs_r>
 801c9b8:	3001      	adds	r0, #1
 801c9ba:	f000 80a7 	beq.w	801cb0c <_vfiprintf_r+0x1ec>
 801c9be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c9c0:	445a      	add	r2, fp
 801c9c2:	9209      	str	r2, [sp, #36]	@ 0x24
 801c9c4:	f89a 3000 	ldrb.w	r3, [sl]
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	f000 809f 	beq.w	801cb0c <_vfiprintf_r+0x1ec>
 801c9ce:	2300      	movs	r3, #0
 801c9d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c9d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c9d8:	f10a 0a01 	add.w	sl, sl, #1
 801c9dc:	9304      	str	r3, [sp, #16]
 801c9de:	9307      	str	r3, [sp, #28]
 801c9e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c9e4:	931a      	str	r3, [sp, #104]	@ 0x68
 801c9e6:	4654      	mov	r4, sl
 801c9e8:	2205      	movs	r2, #5
 801c9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9ee:	4853      	ldr	r0, [pc, #332]	@ (801cb3c <_vfiprintf_r+0x21c>)
 801c9f0:	f7e3 fc06 	bl	8000200 <memchr>
 801c9f4:	9a04      	ldr	r2, [sp, #16]
 801c9f6:	b9d8      	cbnz	r0, 801ca30 <_vfiprintf_r+0x110>
 801c9f8:	06d1      	lsls	r1, r2, #27
 801c9fa:	bf44      	itt	mi
 801c9fc:	2320      	movmi	r3, #32
 801c9fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca02:	0713      	lsls	r3, r2, #28
 801ca04:	bf44      	itt	mi
 801ca06:	232b      	movmi	r3, #43	@ 0x2b
 801ca08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca0c:	f89a 3000 	ldrb.w	r3, [sl]
 801ca10:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca12:	d015      	beq.n	801ca40 <_vfiprintf_r+0x120>
 801ca14:	9a07      	ldr	r2, [sp, #28]
 801ca16:	4654      	mov	r4, sl
 801ca18:	2000      	movs	r0, #0
 801ca1a:	f04f 0c0a 	mov.w	ip, #10
 801ca1e:	4621      	mov	r1, r4
 801ca20:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca24:	3b30      	subs	r3, #48	@ 0x30
 801ca26:	2b09      	cmp	r3, #9
 801ca28:	d94b      	bls.n	801cac2 <_vfiprintf_r+0x1a2>
 801ca2a:	b1b0      	cbz	r0, 801ca5a <_vfiprintf_r+0x13a>
 801ca2c:	9207      	str	r2, [sp, #28]
 801ca2e:	e014      	b.n	801ca5a <_vfiprintf_r+0x13a>
 801ca30:	eba0 0308 	sub.w	r3, r0, r8
 801ca34:	fa09 f303 	lsl.w	r3, r9, r3
 801ca38:	4313      	orrs	r3, r2
 801ca3a:	9304      	str	r3, [sp, #16]
 801ca3c:	46a2      	mov	sl, r4
 801ca3e:	e7d2      	b.n	801c9e6 <_vfiprintf_r+0xc6>
 801ca40:	9b03      	ldr	r3, [sp, #12]
 801ca42:	1d19      	adds	r1, r3, #4
 801ca44:	681b      	ldr	r3, [r3, #0]
 801ca46:	9103      	str	r1, [sp, #12]
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	bfbb      	ittet	lt
 801ca4c:	425b      	neglt	r3, r3
 801ca4e:	f042 0202 	orrlt.w	r2, r2, #2
 801ca52:	9307      	strge	r3, [sp, #28]
 801ca54:	9307      	strlt	r3, [sp, #28]
 801ca56:	bfb8      	it	lt
 801ca58:	9204      	strlt	r2, [sp, #16]
 801ca5a:	7823      	ldrb	r3, [r4, #0]
 801ca5c:	2b2e      	cmp	r3, #46	@ 0x2e
 801ca5e:	d10a      	bne.n	801ca76 <_vfiprintf_r+0x156>
 801ca60:	7863      	ldrb	r3, [r4, #1]
 801ca62:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca64:	d132      	bne.n	801cacc <_vfiprintf_r+0x1ac>
 801ca66:	9b03      	ldr	r3, [sp, #12]
 801ca68:	1d1a      	adds	r2, r3, #4
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	9203      	str	r2, [sp, #12]
 801ca6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ca72:	3402      	adds	r4, #2
 801ca74:	9305      	str	r3, [sp, #20]
 801ca76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801cb4c <_vfiprintf_r+0x22c>
 801ca7a:	7821      	ldrb	r1, [r4, #0]
 801ca7c:	2203      	movs	r2, #3
 801ca7e:	4650      	mov	r0, sl
 801ca80:	f7e3 fbbe 	bl	8000200 <memchr>
 801ca84:	b138      	cbz	r0, 801ca96 <_vfiprintf_r+0x176>
 801ca86:	9b04      	ldr	r3, [sp, #16]
 801ca88:	eba0 000a 	sub.w	r0, r0, sl
 801ca8c:	2240      	movs	r2, #64	@ 0x40
 801ca8e:	4082      	lsls	r2, r0
 801ca90:	4313      	orrs	r3, r2
 801ca92:	3401      	adds	r4, #1
 801ca94:	9304      	str	r3, [sp, #16]
 801ca96:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca9a:	4829      	ldr	r0, [pc, #164]	@ (801cb40 <_vfiprintf_r+0x220>)
 801ca9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801caa0:	2206      	movs	r2, #6
 801caa2:	f7e3 fbad 	bl	8000200 <memchr>
 801caa6:	2800      	cmp	r0, #0
 801caa8:	d03f      	beq.n	801cb2a <_vfiprintf_r+0x20a>
 801caaa:	4b26      	ldr	r3, [pc, #152]	@ (801cb44 <_vfiprintf_r+0x224>)
 801caac:	bb1b      	cbnz	r3, 801caf6 <_vfiprintf_r+0x1d6>
 801caae:	9b03      	ldr	r3, [sp, #12]
 801cab0:	3307      	adds	r3, #7
 801cab2:	f023 0307 	bic.w	r3, r3, #7
 801cab6:	3308      	adds	r3, #8
 801cab8:	9303      	str	r3, [sp, #12]
 801caba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cabc:	443b      	add	r3, r7
 801cabe:	9309      	str	r3, [sp, #36]	@ 0x24
 801cac0:	e76a      	b.n	801c998 <_vfiprintf_r+0x78>
 801cac2:	fb0c 3202 	mla	r2, ip, r2, r3
 801cac6:	460c      	mov	r4, r1
 801cac8:	2001      	movs	r0, #1
 801caca:	e7a8      	b.n	801ca1e <_vfiprintf_r+0xfe>
 801cacc:	2300      	movs	r3, #0
 801cace:	3401      	adds	r4, #1
 801cad0:	9305      	str	r3, [sp, #20]
 801cad2:	4619      	mov	r1, r3
 801cad4:	f04f 0c0a 	mov.w	ip, #10
 801cad8:	4620      	mov	r0, r4
 801cada:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cade:	3a30      	subs	r2, #48	@ 0x30
 801cae0:	2a09      	cmp	r2, #9
 801cae2:	d903      	bls.n	801caec <_vfiprintf_r+0x1cc>
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d0c6      	beq.n	801ca76 <_vfiprintf_r+0x156>
 801cae8:	9105      	str	r1, [sp, #20]
 801caea:	e7c4      	b.n	801ca76 <_vfiprintf_r+0x156>
 801caec:	fb0c 2101 	mla	r1, ip, r1, r2
 801caf0:	4604      	mov	r4, r0
 801caf2:	2301      	movs	r3, #1
 801caf4:	e7f0      	b.n	801cad8 <_vfiprintf_r+0x1b8>
 801caf6:	ab03      	add	r3, sp, #12
 801caf8:	9300      	str	r3, [sp, #0]
 801cafa:	462a      	mov	r2, r5
 801cafc:	4b12      	ldr	r3, [pc, #72]	@ (801cb48 <_vfiprintf_r+0x228>)
 801cafe:	a904      	add	r1, sp, #16
 801cb00:	4630      	mov	r0, r6
 801cb02:	f3af 8000 	nop.w
 801cb06:	4607      	mov	r7, r0
 801cb08:	1c78      	adds	r0, r7, #1
 801cb0a:	d1d6      	bne.n	801caba <_vfiprintf_r+0x19a>
 801cb0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cb0e:	07d9      	lsls	r1, r3, #31
 801cb10:	d405      	bmi.n	801cb1e <_vfiprintf_r+0x1fe>
 801cb12:	89ab      	ldrh	r3, [r5, #12]
 801cb14:	059a      	lsls	r2, r3, #22
 801cb16:	d402      	bmi.n	801cb1e <_vfiprintf_r+0x1fe>
 801cb18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cb1a:	f7ff fceb 	bl	801c4f4 <__retarget_lock_release_recursive>
 801cb1e:	89ab      	ldrh	r3, [r5, #12]
 801cb20:	065b      	lsls	r3, r3, #25
 801cb22:	f53f af1f 	bmi.w	801c964 <_vfiprintf_r+0x44>
 801cb26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cb28:	e71e      	b.n	801c968 <_vfiprintf_r+0x48>
 801cb2a:	ab03      	add	r3, sp, #12
 801cb2c:	9300      	str	r3, [sp, #0]
 801cb2e:	462a      	mov	r2, r5
 801cb30:	4b05      	ldr	r3, [pc, #20]	@ (801cb48 <_vfiprintf_r+0x228>)
 801cb32:	a904      	add	r1, sp, #16
 801cb34:	4630      	mov	r0, r6
 801cb36:	f000 f879 	bl	801cc2c <_printf_i>
 801cb3a:	e7e4      	b.n	801cb06 <_vfiprintf_r+0x1e6>
 801cb3c:	0801e16f 	.word	0x0801e16f
 801cb40:	0801e179 	.word	0x0801e179
 801cb44:	00000000 	.word	0x00000000
 801cb48:	0801c8fb 	.word	0x0801c8fb
 801cb4c:	0801e175 	.word	0x0801e175

0801cb50 <_printf_common>:
 801cb50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb54:	4616      	mov	r6, r2
 801cb56:	4698      	mov	r8, r3
 801cb58:	688a      	ldr	r2, [r1, #8]
 801cb5a:	690b      	ldr	r3, [r1, #16]
 801cb5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cb60:	4293      	cmp	r3, r2
 801cb62:	bfb8      	it	lt
 801cb64:	4613      	movlt	r3, r2
 801cb66:	6033      	str	r3, [r6, #0]
 801cb68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cb6c:	4607      	mov	r7, r0
 801cb6e:	460c      	mov	r4, r1
 801cb70:	b10a      	cbz	r2, 801cb76 <_printf_common+0x26>
 801cb72:	3301      	adds	r3, #1
 801cb74:	6033      	str	r3, [r6, #0]
 801cb76:	6823      	ldr	r3, [r4, #0]
 801cb78:	0699      	lsls	r1, r3, #26
 801cb7a:	bf42      	ittt	mi
 801cb7c:	6833      	ldrmi	r3, [r6, #0]
 801cb7e:	3302      	addmi	r3, #2
 801cb80:	6033      	strmi	r3, [r6, #0]
 801cb82:	6825      	ldr	r5, [r4, #0]
 801cb84:	f015 0506 	ands.w	r5, r5, #6
 801cb88:	d106      	bne.n	801cb98 <_printf_common+0x48>
 801cb8a:	f104 0a19 	add.w	sl, r4, #25
 801cb8e:	68e3      	ldr	r3, [r4, #12]
 801cb90:	6832      	ldr	r2, [r6, #0]
 801cb92:	1a9b      	subs	r3, r3, r2
 801cb94:	42ab      	cmp	r3, r5
 801cb96:	dc26      	bgt.n	801cbe6 <_printf_common+0x96>
 801cb98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cb9c:	6822      	ldr	r2, [r4, #0]
 801cb9e:	3b00      	subs	r3, #0
 801cba0:	bf18      	it	ne
 801cba2:	2301      	movne	r3, #1
 801cba4:	0692      	lsls	r2, r2, #26
 801cba6:	d42b      	bmi.n	801cc00 <_printf_common+0xb0>
 801cba8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cbac:	4641      	mov	r1, r8
 801cbae:	4638      	mov	r0, r7
 801cbb0:	47c8      	blx	r9
 801cbb2:	3001      	adds	r0, #1
 801cbb4:	d01e      	beq.n	801cbf4 <_printf_common+0xa4>
 801cbb6:	6823      	ldr	r3, [r4, #0]
 801cbb8:	6922      	ldr	r2, [r4, #16]
 801cbba:	f003 0306 	and.w	r3, r3, #6
 801cbbe:	2b04      	cmp	r3, #4
 801cbc0:	bf02      	ittt	eq
 801cbc2:	68e5      	ldreq	r5, [r4, #12]
 801cbc4:	6833      	ldreq	r3, [r6, #0]
 801cbc6:	1aed      	subeq	r5, r5, r3
 801cbc8:	68a3      	ldr	r3, [r4, #8]
 801cbca:	bf0c      	ite	eq
 801cbcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cbd0:	2500      	movne	r5, #0
 801cbd2:	4293      	cmp	r3, r2
 801cbd4:	bfc4      	itt	gt
 801cbd6:	1a9b      	subgt	r3, r3, r2
 801cbd8:	18ed      	addgt	r5, r5, r3
 801cbda:	2600      	movs	r6, #0
 801cbdc:	341a      	adds	r4, #26
 801cbde:	42b5      	cmp	r5, r6
 801cbe0:	d11a      	bne.n	801cc18 <_printf_common+0xc8>
 801cbe2:	2000      	movs	r0, #0
 801cbe4:	e008      	b.n	801cbf8 <_printf_common+0xa8>
 801cbe6:	2301      	movs	r3, #1
 801cbe8:	4652      	mov	r2, sl
 801cbea:	4641      	mov	r1, r8
 801cbec:	4638      	mov	r0, r7
 801cbee:	47c8      	blx	r9
 801cbf0:	3001      	adds	r0, #1
 801cbf2:	d103      	bne.n	801cbfc <_printf_common+0xac>
 801cbf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbfc:	3501      	adds	r5, #1
 801cbfe:	e7c6      	b.n	801cb8e <_printf_common+0x3e>
 801cc00:	18e1      	adds	r1, r4, r3
 801cc02:	1c5a      	adds	r2, r3, #1
 801cc04:	2030      	movs	r0, #48	@ 0x30
 801cc06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cc0a:	4422      	add	r2, r4
 801cc0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cc10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cc14:	3302      	adds	r3, #2
 801cc16:	e7c7      	b.n	801cba8 <_printf_common+0x58>
 801cc18:	2301      	movs	r3, #1
 801cc1a:	4622      	mov	r2, r4
 801cc1c:	4641      	mov	r1, r8
 801cc1e:	4638      	mov	r0, r7
 801cc20:	47c8      	blx	r9
 801cc22:	3001      	adds	r0, #1
 801cc24:	d0e6      	beq.n	801cbf4 <_printf_common+0xa4>
 801cc26:	3601      	adds	r6, #1
 801cc28:	e7d9      	b.n	801cbde <_printf_common+0x8e>
	...

0801cc2c <_printf_i>:
 801cc2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cc30:	7e0f      	ldrb	r7, [r1, #24]
 801cc32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cc34:	2f78      	cmp	r7, #120	@ 0x78
 801cc36:	4691      	mov	r9, r2
 801cc38:	4680      	mov	r8, r0
 801cc3a:	460c      	mov	r4, r1
 801cc3c:	469a      	mov	sl, r3
 801cc3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cc42:	d807      	bhi.n	801cc54 <_printf_i+0x28>
 801cc44:	2f62      	cmp	r7, #98	@ 0x62
 801cc46:	d80a      	bhi.n	801cc5e <_printf_i+0x32>
 801cc48:	2f00      	cmp	r7, #0
 801cc4a:	f000 80d1 	beq.w	801cdf0 <_printf_i+0x1c4>
 801cc4e:	2f58      	cmp	r7, #88	@ 0x58
 801cc50:	f000 80b8 	beq.w	801cdc4 <_printf_i+0x198>
 801cc54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cc58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cc5c:	e03a      	b.n	801ccd4 <_printf_i+0xa8>
 801cc5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cc62:	2b15      	cmp	r3, #21
 801cc64:	d8f6      	bhi.n	801cc54 <_printf_i+0x28>
 801cc66:	a101      	add	r1, pc, #4	@ (adr r1, 801cc6c <_printf_i+0x40>)
 801cc68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cc6c:	0801ccc5 	.word	0x0801ccc5
 801cc70:	0801ccd9 	.word	0x0801ccd9
 801cc74:	0801cc55 	.word	0x0801cc55
 801cc78:	0801cc55 	.word	0x0801cc55
 801cc7c:	0801cc55 	.word	0x0801cc55
 801cc80:	0801cc55 	.word	0x0801cc55
 801cc84:	0801ccd9 	.word	0x0801ccd9
 801cc88:	0801cc55 	.word	0x0801cc55
 801cc8c:	0801cc55 	.word	0x0801cc55
 801cc90:	0801cc55 	.word	0x0801cc55
 801cc94:	0801cc55 	.word	0x0801cc55
 801cc98:	0801cdd7 	.word	0x0801cdd7
 801cc9c:	0801cd03 	.word	0x0801cd03
 801cca0:	0801cd91 	.word	0x0801cd91
 801cca4:	0801cc55 	.word	0x0801cc55
 801cca8:	0801cc55 	.word	0x0801cc55
 801ccac:	0801cdf9 	.word	0x0801cdf9
 801ccb0:	0801cc55 	.word	0x0801cc55
 801ccb4:	0801cd03 	.word	0x0801cd03
 801ccb8:	0801cc55 	.word	0x0801cc55
 801ccbc:	0801cc55 	.word	0x0801cc55
 801ccc0:	0801cd99 	.word	0x0801cd99
 801ccc4:	6833      	ldr	r3, [r6, #0]
 801ccc6:	1d1a      	adds	r2, r3, #4
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	6032      	str	r2, [r6, #0]
 801cccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ccd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ccd4:	2301      	movs	r3, #1
 801ccd6:	e09c      	b.n	801ce12 <_printf_i+0x1e6>
 801ccd8:	6833      	ldr	r3, [r6, #0]
 801ccda:	6820      	ldr	r0, [r4, #0]
 801ccdc:	1d19      	adds	r1, r3, #4
 801ccde:	6031      	str	r1, [r6, #0]
 801cce0:	0606      	lsls	r6, r0, #24
 801cce2:	d501      	bpl.n	801cce8 <_printf_i+0xbc>
 801cce4:	681d      	ldr	r5, [r3, #0]
 801cce6:	e003      	b.n	801ccf0 <_printf_i+0xc4>
 801cce8:	0645      	lsls	r5, r0, #25
 801ccea:	d5fb      	bpl.n	801cce4 <_printf_i+0xb8>
 801ccec:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ccf0:	2d00      	cmp	r5, #0
 801ccf2:	da03      	bge.n	801ccfc <_printf_i+0xd0>
 801ccf4:	232d      	movs	r3, #45	@ 0x2d
 801ccf6:	426d      	negs	r5, r5
 801ccf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ccfc:	4858      	ldr	r0, [pc, #352]	@ (801ce60 <_printf_i+0x234>)
 801ccfe:	230a      	movs	r3, #10
 801cd00:	e011      	b.n	801cd26 <_printf_i+0xfa>
 801cd02:	6821      	ldr	r1, [r4, #0]
 801cd04:	6833      	ldr	r3, [r6, #0]
 801cd06:	0608      	lsls	r0, r1, #24
 801cd08:	f853 5b04 	ldr.w	r5, [r3], #4
 801cd0c:	d402      	bmi.n	801cd14 <_printf_i+0xe8>
 801cd0e:	0649      	lsls	r1, r1, #25
 801cd10:	bf48      	it	mi
 801cd12:	b2ad      	uxthmi	r5, r5
 801cd14:	2f6f      	cmp	r7, #111	@ 0x6f
 801cd16:	4852      	ldr	r0, [pc, #328]	@ (801ce60 <_printf_i+0x234>)
 801cd18:	6033      	str	r3, [r6, #0]
 801cd1a:	bf14      	ite	ne
 801cd1c:	230a      	movne	r3, #10
 801cd1e:	2308      	moveq	r3, #8
 801cd20:	2100      	movs	r1, #0
 801cd22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801cd26:	6866      	ldr	r6, [r4, #4]
 801cd28:	60a6      	str	r6, [r4, #8]
 801cd2a:	2e00      	cmp	r6, #0
 801cd2c:	db05      	blt.n	801cd3a <_printf_i+0x10e>
 801cd2e:	6821      	ldr	r1, [r4, #0]
 801cd30:	432e      	orrs	r6, r5
 801cd32:	f021 0104 	bic.w	r1, r1, #4
 801cd36:	6021      	str	r1, [r4, #0]
 801cd38:	d04b      	beq.n	801cdd2 <_printf_i+0x1a6>
 801cd3a:	4616      	mov	r6, r2
 801cd3c:	fbb5 f1f3 	udiv	r1, r5, r3
 801cd40:	fb03 5711 	mls	r7, r3, r1, r5
 801cd44:	5dc7      	ldrb	r7, [r0, r7]
 801cd46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cd4a:	462f      	mov	r7, r5
 801cd4c:	42bb      	cmp	r3, r7
 801cd4e:	460d      	mov	r5, r1
 801cd50:	d9f4      	bls.n	801cd3c <_printf_i+0x110>
 801cd52:	2b08      	cmp	r3, #8
 801cd54:	d10b      	bne.n	801cd6e <_printf_i+0x142>
 801cd56:	6823      	ldr	r3, [r4, #0]
 801cd58:	07df      	lsls	r7, r3, #31
 801cd5a:	d508      	bpl.n	801cd6e <_printf_i+0x142>
 801cd5c:	6923      	ldr	r3, [r4, #16]
 801cd5e:	6861      	ldr	r1, [r4, #4]
 801cd60:	4299      	cmp	r1, r3
 801cd62:	bfde      	ittt	le
 801cd64:	2330      	movle	r3, #48	@ 0x30
 801cd66:	f806 3c01 	strble.w	r3, [r6, #-1]
 801cd6a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801cd6e:	1b92      	subs	r2, r2, r6
 801cd70:	6122      	str	r2, [r4, #16]
 801cd72:	f8cd a000 	str.w	sl, [sp]
 801cd76:	464b      	mov	r3, r9
 801cd78:	aa03      	add	r2, sp, #12
 801cd7a:	4621      	mov	r1, r4
 801cd7c:	4640      	mov	r0, r8
 801cd7e:	f7ff fee7 	bl	801cb50 <_printf_common>
 801cd82:	3001      	adds	r0, #1
 801cd84:	d14a      	bne.n	801ce1c <_printf_i+0x1f0>
 801cd86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cd8a:	b004      	add	sp, #16
 801cd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd90:	6823      	ldr	r3, [r4, #0]
 801cd92:	f043 0320 	orr.w	r3, r3, #32
 801cd96:	6023      	str	r3, [r4, #0]
 801cd98:	4832      	ldr	r0, [pc, #200]	@ (801ce64 <_printf_i+0x238>)
 801cd9a:	2778      	movs	r7, #120	@ 0x78
 801cd9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801cda0:	6823      	ldr	r3, [r4, #0]
 801cda2:	6831      	ldr	r1, [r6, #0]
 801cda4:	061f      	lsls	r7, r3, #24
 801cda6:	f851 5b04 	ldr.w	r5, [r1], #4
 801cdaa:	d402      	bmi.n	801cdb2 <_printf_i+0x186>
 801cdac:	065f      	lsls	r7, r3, #25
 801cdae:	bf48      	it	mi
 801cdb0:	b2ad      	uxthmi	r5, r5
 801cdb2:	6031      	str	r1, [r6, #0]
 801cdb4:	07d9      	lsls	r1, r3, #31
 801cdb6:	bf44      	itt	mi
 801cdb8:	f043 0320 	orrmi.w	r3, r3, #32
 801cdbc:	6023      	strmi	r3, [r4, #0]
 801cdbe:	b11d      	cbz	r5, 801cdc8 <_printf_i+0x19c>
 801cdc0:	2310      	movs	r3, #16
 801cdc2:	e7ad      	b.n	801cd20 <_printf_i+0xf4>
 801cdc4:	4826      	ldr	r0, [pc, #152]	@ (801ce60 <_printf_i+0x234>)
 801cdc6:	e7e9      	b.n	801cd9c <_printf_i+0x170>
 801cdc8:	6823      	ldr	r3, [r4, #0]
 801cdca:	f023 0320 	bic.w	r3, r3, #32
 801cdce:	6023      	str	r3, [r4, #0]
 801cdd0:	e7f6      	b.n	801cdc0 <_printf_i+0x194>
 801cdd2:	4616      	mov	r6, r2
 801cdd4:	e7bd      	b.n	801cd52 <_printf_i+0x126>
 801cdd6:	6833      	ldr	r3, [r6, #0]
 801cdd8:	6825      	ldr	r5, [r4, #0]
 801cdda:	6961      	ldr	r1, [r4, #20]
 801cddc:	1d18      	adds	r0, r3, #4
 801cdde:	6030      	str	r0, [r6, #0]
 801cde0:	062e      	lsls	r6, r5, #24
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	d501      	bpl.n	801cdea <_printf_i+0x1be>
 801cde6:	6019      	str	r1, [r3, #0]
 801cde8:	e002      	b.n	801cdf0 <_printf_i+0x1c4>
 801cdea:	0668      	lsls	r0, r5, #25
 801cdec:	d5fb      	bpl.n	801cde6 <_printf_i+0x1ba>
 801cdee:	8019      	strh	r1, [r3, #0]
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	6123      	str	r3, [r4, #16]
 801cdf4:	4616      	mov	r6, r2
 801cdf6:	e7bc      	b.n	801cd72 <_printf_i+0x146>
 801cdf8:	6833      	ldr	r3, [r6, #0]
 801cdfa:	1d1a      	adds	r2, r3, #4
 801cdfc:	6032      	str	r2, [r6, #0]
 801cdfe:	681e      	ldr	r6, [r3, #0]
 801ce00:	6862      	ldr	r2, [r4, #4]
 801ce02:	2100      	movs	r1, #0
 801ce04:	4630      	mov	r0, r6
 801ce06:	f7e3 f9fb 	bl	8000200 <memchr>
 801ce0a:	b108      	cbz	r0, 801ce10 <_printf_i+0x1e4>
 801ce0c:	1b80      	subs	r0, r0, r6
 801ce0e:	6060      	str	r0, [r4, #4]
 801ce10:	6863      	ldr	r3, [r4, #4]
 801ce12:	6123      	str	r3, [r4, #16]
 801ce14:	2300      	movs	r3, #0
 801ce16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ce1a:	e7aa      	b.n	801cd72 <_printf_i+0x146>
 801ce1c:	6923      	ldr	r3, [r4, #16]
 801ce1e:	4632      	mov	r2, r6
 801ce20:	4649      	mov	r1, r9
 801ce22:	4640      	mov	r0, r8
 801ce24:	47d0      	blx	sl
 801ce26:	3001      	adds	r0, #1
 801ce28:	d0ad      	beq.n	801cd86 <_printf_i+0x15a>
 801ce2a:	6823      	ldr	r3, [r4, #0]
 801ce2c:	079b      	lsls	r3, r3, #30
 801ce2e:	d413      	bmi.n	801ce58 <_printf_i+0x22c>
 801ce30:	68e0      	ldr	r0, [r4, #12]
 801ce32:	9b03      	ldr	r3, [sp, #12]
 801ce34:	4298      	cmp	r0, r3
 801ce36:	bfb8      	it	lt
 801ce38:	4618      	movlt	r0, r3
 801ce3a:	e7a6      	b.n	801cd8a <_printf_i+0x15e>
 801ce3c:	2301      	movs	r3, #1
 801ce3e:	4632      	mov	r2, r6
 801ce40:	4649      	mov	r1, r9
 801ce42:	4640      	mov	r0, r8
 801ce44:	47d0      	blx	sl
 801ce46:	3001      	adds	r0, #1
 801ce48:	d09d      	beq.n	801cd86 <_printf_i+0x15a>
 801ce4a:	3501      	adds	r5, #1
 801ce4c:	68e3      	ldr	r3, [r4, #12]
 801ce4e:	9903      	ldr	r1, [sp, #12]
 801ce50:	1a5b      	subs	r3, r3, r1
 801ce52:	42ab      	cmp	r3, r5
 801ce54:	dcf2      	bgt.n	801ce3c <_printf_i+0x210>
 801ce56:	e7eb      	b.n	801ce30 <_printf_i+0x204>
 801ce58:	2500      	movs	r5, #0
 801ce5a:	f104 0619 	add.w	r6, r4, #25
 801ce5e:	e7f5      	b.n	801ce4c <_printf_i+0x220>
 801ce60:	0801e180 	.word	0x0801e180
 801ce64:	0801e191 	.word	0x0801e191

0801ce68 <__sflush_r>:
 801ce68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ce6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce70:	0716      	lsls	r6, r2, #28
 801ce72:	4605      	mov	r5, r0
 801ce74:	460c      	mov	r4, r1
 801ce76:	d454      	bmi.n	801cf22 <__sflush_r+0xba>
 801ce78:	684b      	ldr	r3, [r1, #4]
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	dc02      	bgt.n	801ce84 <__sflush_r+0x1c>
 801ce7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ce80:	2b00      	cmp	r3, #0
 801ce82:	dd48      	ble.n	801cf16 <__sflush_r+0xae>
 801ce84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ce86:	2e00      	cmp	r6, #0
 801ce88:	d045      	beq.n	801cf16 <__sflush_r+0xae>
 801ce8a:	2300      	movs	r3, #0
 801ce8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ce90:	682f      	ldr	r7, [r5, #0]
 801ce92:	6a21      	ldr	r1, [r4, #32]
 801ce94:	602b      	str	r3, [r5, #0]
 801ce96:	d030      	beq.n	801cefa <__sflush_r+0x92>
 801ce98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ce9a:	89a3      	ldrh	r3, [r4, #12]
 801ce9c:	0759      	lsls	r1, r3, #29
 801ce9e:	d505      	bpl.n	801ceac <__sflush_r+0x44>
 801cea0:	6863      	ldr	r3, [r4, #4]
 801cea2:	1ad2      	subs	r2, r2, r3
 801cea4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cea6:	b10b      	cbz	r3, 801ceac <__sflush_r+0x44>
 801cea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ceaa:	1ad2      	subs	r2, r2, r3
 801ceac:	2300      	movs	r3, #0
 801ceae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ceb0:	6a21      	ldr	r1, [r4, #32]
 801ceb2:	4628      	mov	r0, r5
 801ceb4:	47b0      	blx	r6
 801ceb6:	1c43      	adds	r3, r0, #1
 801ceb8:	89a3      	ldrh	r3, [r4, #12]
 801ceba:	d106      	bne.n	801ceca <__sflush_r+0x62>
 801cebc:	6829      	ldr	r1, [r5, #0]
 801cebe:	291d      	cmp	r1, #29
 801cec0:	d82b      	bhi.n	801cf1a <__sflush_r+0xb2>
 801cec2:	4a2a      	ldr	r2, [pc, #168]	@ (801cf6c <__sflush_r+0x104>)
 801cec4:	40ca      	lsrs	r2, r1
 801cec6:	07d6      	lsls	r6, r2, #31
 801cec8:	d527      	bpl.n	801cf1a <__sflush_r+0xb2>
 801ceca:	2200      	movs	r2, #0
 801cecc:	6062      	str	r2, [r4, #4]
 801cece:	04d9      	lsls	r1, r3, #19
 801ced0:	6922      	ldr	r2, [r4, #16]
 801ced2:	6022      	str	r2, [r4, #0]
 801ced4:	d504      	bpl.n	801cee0 <__sflush_r+0x78>
 801ced6:	1c42      	adds	r2, r0, #1
 801ced8:	d101      	bne.n	801cede <__sflush_r+0x76>
 801ceda:	682b      	ldr	r3, [r5, #0]
 801cedc:	b903      	cbnz	r3, 801cee0 <__sflush_r+0x78>
 801cede:	6560      	str	r0, [r4, #84]	@ 0x54
 801cee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cee2:	602f      	str	r7, [r5, #0]
 801cee4:	b1b9      	cbz	r1, 801cf16 <__sflush_r+0xae>
 801cee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ceea:	4299      	cmp	r1, r3
 801ceec:	d002      	beq.n	801cef4 <__sflush_r+0x8c>
 801ceee:	4628      	mov	r0, r5
 801cef0:	f7ff fb42 	bl	801c578 <_free_r>
 801cef4:	2300      	movs	r3, #0
 801cef6:	6363      	str	r3, [r4, #52]	@ 0x34
 801cef8:	e00d      	b.n	801cf16 <__sflush_r+0xae>
 801cefa:	2301      	movs	r3, #1
 801cefc:	4628      	mov	r0, r5
 801cefe:	47b0      	blx	r6
 801cf00:	4602      	mov	r2, r0
 801cf02:	1c50      	adds	r0, r2, #1
 801cf04:	d1c9      	bne.n	801ce9a <__sflush_r+0x32>
 801cf06:	682b      	ldr	r3, [r5, #0]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d0c6      	beq.n	801ce9a <__sflush_r+0x32>
 801cf0c:	2b1d      	cmp	r3, #29
 801cf0e:	d001      	beq.n	801cf14 <__sflush_r+0xac>
 801cf10:	2b16      	cmp	r3, #22
 801cf12:	d11e      	bne.n	801cf52 <__sflush_r+0xea>
 801cf14:	602f      	str	r7, [r5, #0]
 801cf16:	2000      	movs	r0, #0
 801cf18:	e022      	b.n	801cf60 <__sflush_r+0xf8>
 801cf1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cf1e:	b21b      	sxth	r3, r3
 801cf20:	e01b      	b.n	801cf5a <__sflush_r+0xf2>
 801cf22:	690f      	ldr	r7, [r1, #16]
 801cf24:	2f00      	cmp	r7, #0
 801cf26:	d0f6      	beq.n	801cf16 <__sflush_r+0xae>
 801cf28:	0793      	lsls	r3, r2, #30
 801cf2a:	680e      	ldr	r6, [r1, #0]
 801cf2c:	bf08      	it	eq
 801cf2e:	694b      	ldreq	r3, [r1, #20]
 801cf30:	600f      	str	r7, [r1, #0]
 801cf32:	bf18      	it	ne
 801cf34:	2300      	movne	r3, #0
 801cf36:	eba6 0807 	sub.w	r8, r6, r7
 801cf3a:	608b      	str	r3, [r1, #8]
 801cf3c:	f1b8 0f00 	cmp.w	r8, #0
 801cf40:	dde9      	ble.n	801cf16 <__sflush_r+0xae>
 801cf42:	6a21      	ldr	r1, [r4, #32]
 801cf44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cf46:	4643      	mov	r3, r8
 801cf48:	463a      	mov	r2, r7
 801cf4a:	4628      	mov	r0, r5
 801cf4c:	47b0      	blx	r6
 801cf4e:	2800      	cmp	r0, #0
 801cf50:	dc08      	bgt.n	801cf64 <__sflush_r+0xfc>
 801cf52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cf5a:	81a3      	strh	r3, [r4, #12]
 801cf5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf64:	4407      	add	r7, r0
 801cf66:	eba8 0800 	sub.w	r8, r8, r0
 801cf6a:	e7e7      	b.n	801cf3c <__sflush_r+0xd4>
 801cf6c:	20400001 	.word	0x20400001

0801cf70 <_fflush_r>:
 801cf70:	b538      	push	{r3, r4, r5, lr}
 801cf72:	690b      	ldr	r3, [r1, #16]
 801cf74:	4605      	mov	r5, r0
 801cf76:	460c      	mov	r4, r1
 801cf78:	b913      	cbnz	r3, 801cf80 <_fflush_r+0x10>
 801cf7a:	2500      	movs	r5, #0
 801cf7c:	4628      	mov	r0, r5
 801cf7e:	bd38      	pop	{r3, r4, r5, pc}
 801cf80:	b118      	cbz	r0, 801cf8a <_fflush_r+0x1a>
 801cf82:	6a03      	ldr	r3, [r0, #32]
 801cf84:	b90b      	cbnz	r3, 801cf8a <_fflush_r+0x1a>
 801cf86:	f7ff f8cd 	bl	801c124 <__sinit>
 801cf8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d0f3      	beq.n	801cf7a <_fflush_r+0xa>
 801cf92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cf94:	07d0      	lsls	r0, r2, #31
 801cf96:	d404      	bmi.n	801cfa2 <_fflush_r+0x32>
 801cf98:	0599      	lsls	r1, r3, #22
 801cf9a:	d402      	bmi.n	801cfa2 <_fflush_r+0x32>
 801cf9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cf9e:	f7ff faa8 	bl	801c4f2 <__retarget_lock_acquire_recursive>
 801cfa2:	4628      	mov	r0, r5
 801cfa4:	4621      	mov	r1, r4
 801cfa6:	f7ff ff5f 	bl	801ce68 <__sflush_r>
 801cfaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cfac:	07da      	lsls	r2, r3, #31
 801cfae:	4605      	mov	r5, r0
 801cfb0:	d4e4      	bmi.n	801cf7c <_fflush_r+0xc>
 801cfb2:	89a3      	ldrh	r3, [r4, #12]
 801cfb4:	059b      	lsls	r3, r3, #22
 801cfb6:	d4e1      	bmi.n	801cf7c <_fflush_r+0xc>
 801cfb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cfba:	f7ff fa9b 	bl	801c4f4 <__retarget_lock_release_recursive>
 801cfbe:	e7dd      	b.n	801cf7c <_fflush_r+0xc>

0801cfc0 <fiprintf>:
 801cfc0:	b40e      	push	{r1, r2, r3}
 801cfc2:	b503      	push	{r0, r1, lr}
 801cfc4:	4601      	mov	r1, r0
 801cfc6:	ab03      	add	r3, sp, #12
 801cfc8:	4805      	ldr	r0, [pc, #20]	@ (801cfe0 <fiprintf+0x20>)
 801cfca:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfce:	6800      	ldr	r0, [r0, #0]
 801cfd0:	9301      	str	r3, [sp, #4]
 801cfd2:	f7ff fca5 	bl	801c920 <_vfiprintf_r>
 801cfd6:	b002      	add	sp, #8
 801cfd8:	f85d eb04 	ldr.w	lr, [sp], #4
 801cfdc:	b003      	add	sp, #12
 801cfde:	4770      	bx	lr
 801cfe0:	2000030c 	.word	0x2000030c

0801cfe4 <__swbuf_r>:
 801cfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfe6:	460e      	mov	r6, r1
 801cfe8:	4614      	mov	r4, r2
 801cfea:	4605      	mov	r5, r0
 801cfec:	b118      	cbz	r0, 801cff6 <__swbuf_r+0x12>
 801cfee:	6a03      	ldr	r3, [r0, #32]
 801cff0:	b90b      	cbnz	r3, 801cff6 <__swbuf_r+0x12>
 801cff2:	f7ff f897 	bl	801c124 <__sinit>
 801cff6:	69a3      	ldr	r3, [r4, #24]
 801cff8:	60a3      	str	r3, [r4, #8]
 801cffa:	89a3      	ldrh	r3, [r4, #12]
 801cffc:	071a      	lsls	r2, r3, #28
 801cffe:	d501      	bpl.n	801d004 <__swbuf_r+0x20>
 801d000:	6923      	ldr	r3, [r4, #16]
 801d002:	b943      	cbnz	r3, 801d016 <__swbuf_r+0x32>
 801d004:	4621      	mov	r1, r4
 801d006:	4628      	mov	r0, r5
 801d008:	f000 f82a 	bl	801d060 <__swsetup_r>
 801d00c:	b118      	cbz	r0, 801d016 <__swbuf_r+0x32>
 801d00e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d012:	4638      	mov	r0, r7
 801d014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d016:	6823      	ldr	r3, [r4, #0]
 801d018:	6922      	ldr	r2, [r4, #16]
 801d01a:	1a98      	subs	r0, r3, r2
 801d01c:	6963      	ldr	r3, [r4, #20]
 801d01e:	b2f6      	uxtb	r6, r6
 801d020:	4283      	cmp	r3, r0
 801d022:	4637      	mov	r7, r6
 801d024:	dc05      	bgt.n	801d032 <__swbuf_r+0x4e>
 801d026:	4621      	mov	r1, r4
 801d028:	4628      	mov	r0, r5
 801d02a:	f7ff ffa1 	bl	801cf70 <_fflush_r>
 801d02e:	2800      	cmp	r0, #0
 801d030:	d1ed      	bne.n	801d00e <__swbuf_r+0x2a>
 801d032:	68a3      	ldr	r3, [r4, #8]
 801d034:	3b01      	subs	r3, #1
 801d036:	60a3      	str	r3, [r4, #8]
 801d038:	6823      	ldr	r3, [r4, #0]
 801d03a:	1c5a      	adds	r2, r3, #1
 801d03c:	6022      	str	r2, [r4, #0]
 801d03e:	701e      	strb	r6, [r3, #0]
 801d040:	6962      	ldr	r2, [r4, #20]
 801d042:	1c43      	adds	r3, r0, #1
 801d044:	429a      	cmp	r2, r3
 801d046:	d004      	beq.n	801d052 <__swbuf_r+0x6e>
 801d048:	89a3      	ldrh	r3, [r4, #12]
 801d04a:	07db      	lsls	r3, r3, #31
 801d04c:	d5e1      	bpl.n	801d012 <__swbuf_r+0x2e>
 801d04e:	2e0a      	cmp	r6, #10
 801d050:	d1df      	bne.n	801d012 <__swbuf_r+0x2e>
 801d052:	4621      	mov	r1, r4
 801d054:	4628      	mov	r0, r5
 801d056:	f7ff ff8b 	bl	801cf70 <_fflush_r>
 801d05a:	2800      	cmp	r0, #0
 801d05c:	d0d9      	beq.n	801d012 <__swbuf_r+0x2e>
 801d05e:	e7d6      	b.n	801d00e <__swbuf_r+0x2a>

0801d060 <__swsetup_r>:
 801d060:	b538      	push	{r3, r4, r5, lr}
 801d062:	4b29      	ldr	r3, [pc, #164]	@ (801d108 <__swsetup_r+0xa8>)
 801d064:	4605      	mov	r5, r0
 801d066:	6818      	ldr	r0, [r3, #0]
 801d068:	460c      	mov	r4, r1
 801d06a:	b118      	cbz	r0, 801d074 <__swsetup_r+0x14>
 801d06c:	6a03      	ldr	r3, [r0, #32]
 801d06e:	b90b      	cbnz	r3, 801d074 <__swsetup_r+0x14>
 801d070:	f7ff f858 	bl	801c124 <__sinit>
 801d074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d078:	0719      	lsls	r1, r3, #28
 801d07a:	d422      	bmi.n	801d0c2 <__swsetup_r+0x62>
 801d07c:	06da      	lsls	r2, r3, #27
 801d07e:	d407      	bmi.n	801d090 <__swsetup_r+0x30>
 801d080:	2209      	movs	r2, #9
 801d082:	602a      	str	r2, [r5, #0]
 801d084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d088:	81a3      	strh	r3, [r4, #12]
 801d08a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d08e:	e033      	b.n	801d0f8 <__swsetup_r+0x98>
 801d090:	0758      	lsls	r0, r3, #29
 801d092:	d512      	bpl.n	801d0ba <__swsetup_r+0x5a>
 801d094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d096:	b141      	cbz	r1, 801d0aa <__swsetup_r+0x4a>
 801d098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d09c:	4299      	cmp	r1, r3
 801d09e:	d002      	beq.n	801d0a6 <__swsetup_r+0x46>
 801d0a0:	4628      	mov	r0, r5
 801d0a2:	f7ff fa69 	bl	801c578 <_free_r>
 801d0a6:	2300      	movs	r3, #0
 801d0a8:	6363      	str	r3, [r4, #52]	@ 0x34
 801d0aa:	89a3      	ldrh	r3, [r4, #12]
 801d0ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d0b0:	81a3      	strh	r3, [r4, #12]
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	6063      	str	r3, [r4, #4]
 801d0b6:	6923      	ldr	r3, [r4, #16]
 801d0b8:	6023      	str	r3, [r4, #0]
 801d0ba:	89a3      	ldrh	r3, [r4, #12]
 801d0bc:	f043 0308 	orr.w	r3, r3, #8
 801d0c0:	81a3      	strh	r3, [r4, #12]
 801d0c2:	6923      	ldr	r3, [r4, #16]
 801d0c4:	b94b      	cbnz	r3, 801d0da <__swsetup_r+0x7a>
 801d0c6:	89a3      	ldrh	r3, [r4, #12]
 801d0c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d0d0:	d003      	beq.n	801d0da <__swsetup_r+0x7a>
 801d0d2:	4621      	mov	r1, r4
 801d0d4:	4628      	mov	r0, r5
 801d0d6:	f000 f846 	bl	801d166 <__smakebuf_r>
 801d0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d0de:	f013 0201 	ands.w	r2, r3, #1
 801d0e2:	d00a      	beq.n	801d0fa <__swsetup_r+0x9a>
 801d0e4:	2200      	movs	r2, #0
 801d0e6:	60a2      	str	r2, [r4, #8]
 801d0e8:	6962      	ldr	r2, [r4, #20]
 801d0ea:	4252      	negs	r2, r2
 801d0ec:	61a2      	str	r2, [r4, #24]
 801d0ee:	6922      	ldr	r2, [r4, #16]
 801d0f0:	b942      	cbnz	r2, 801d104 <__swsetup_r+0xa4>
 801d0f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d0f6:	d1c5      	bne.n	801d084 <__swsetup_r+0x24>
 801d0f8:	bd38      	pop	{r3, r4, r5, pc}
 801d0fa:	0799      	lsls	r1, r3, #30
 801d0fc:	bf58      	it	pl
 801d0fe:	6962      	ldrpl	r2, [r4, #20]
 801d100:	60a2      	str	r2, [r4, #8]
 801d102:	e7f4      	b.n	801d0ee <__swsetup_r+0x8e>
 801d104:	2000      	movs	r0, #0
 801d106:	e7f7      	b.n	801d0f8 <__swsetup_r+0x98>
 801d108:	2000030c 	.word	0x2000030c

0801d10c <abort>:
 801d10c:	b508      	push	{r3, lr}
 801d10e:	2006      	movs	r0, #6
 801d110:	f000 f88e 	bl	801d230 <raise>
 801d114:	2001      	movs	r0, #1
 801d116:	f7e5 f8f1 	bl	80022fc <_exit>

0801d11a <__swhatbuf_r>:
 801d11a:	b570      	push	{r4, r5, r6, lr}
 801d11c:	460c      	mov	r4, r1
 801d11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d122:	2900      	cmp	r1, #0
 801d124:	b096      	sub	sp, #88	@ 0x58
 801d126:	4615      	mov	r5, r2
 801d128:	461e      	mov	r6, r3
 801d12a:	da0d      	bge.n	801d148 <__swhatbuf_r+0x2e>
 801d12c:	89a3      	ldrh	r3, [r4, #12]
 801d12e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d132:	f04f 0100 	mov.w	r1, #0
 801d136:	bf14      	ite	ne
 801d138:	2340      	movne	r3, #64	@ 0x40
 801d13a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d13e:	2000      	movs	r0, #0
 801d140:	6031      	str	r1, [r6, #0]
 801d142:	602b      	str	r3, [r5, #0]
 801d144:	b016      	add	sp, #88	@ 0x58
 801d146:	bd70      	pop	{r4, r5, r6, pc}
 801d148:	466a      	mov	r2, sp
 801d14a:	f000 f879 	bl	801d240 <_fstat_r>
 801d14e:	2800      	cmp	r0, #0
 801d150:	dbec      	blt.n	801d12c <__swhatbuf_r+0x12>
 801d152:	9901      	ldr	r1, [sp, #4]
 801d154:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d158:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d15c:	4259      	negs	r1, r3
 801d15e:	4159      	adcs	r1, r3
 801d160:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d164:	e7eb      	b.n	801d13e <__swhatbuf_r+0x24>

0801d166 <__smakebuf_r>:
 801d166:	898b      	ldrh	r3, [r1, #12]
 801d168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d16a:	079d      	lsls	r5, r3, #30
 801d16c:	4606      	mov	r6, r0
 801d16e:	460c      	mov	r4, r1
 801d170:	d507      	bpl.n	801d182 <__smakebuf_r+0x1c>
 801d172:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d176:	6023      	str	r3, [r4, #0]
 801d178:	6123      	str	r3, [r4, #16]
 801d17a:	2301      	movs	r3, #1
 801d17c:	6163      	str	r3, [r4, #20]
 801d17e:	b003      	add	sp, #12
 801d180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d182:	ab01      	add	r3, sp, #4
 801d184:	466a      	mov	r2, sp
 801d186:	f7ff ffc8 	bl	801d11a <__swhatbuf_r>
 801d18a:	9f00      	ldr	r7, [sp, #0]
 801d18c:	4605      	mov	r5, r0
 801d18e:	4639      	mov	r1, r7
 801d190:	4630      	mov	r0, r6
 801d192:	f7fe fd95 	bl	801bcc0 <_malloc_r>
 801d196:	b948      	cbnz	r0, 801d1ac <__smakebuf_r+0x46>
 801d198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d19c:	059a      	lsls	r2, r3, #22
 801d19e:	d4ee      	bmi.n	801d17e <__smakebuf_r+0x18>
 801d1a0:	f023 0303 	bic.w	r3, r3, #3
 801d1a4:	f043 0302 	orr.w	r3, r3, #2
 801d1a8:	81a3      	strh	r3, [r4, #12]
 801d1aa:	e7e2      	b.n	801d172 <__smakebuf_r+0xc>
 801d1ac:	89a3      	ldrh	r3, [r4, #12]
 801d1ae:	6020      	str	r0, [r4, #0]
 801d1b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d1b4:	81a3      	strh	r3, [r4, #12]
 801d1b6:	9b01      	ldr	r3, [sp, #4]
 801d1b8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d1bc:	b15b      	cbz	r3, 801d1d6 <__smakebuf_r+0x70>
 801d1be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d1c2:	4630      	mov	r0, r6
 801d1c4:	f000 f84e 	bl	801d264 <_isatty_r>
 801d1c8:	b128      	cbz	r0, 801d1d6 <__smakebuf_r+0x70>
 801d1ca:	89a3      	ldrh	r3, [r4, #12]
 801d1cc:	f023 0303 	bic.w	r3, r3, #3
 801d1d0:	f043 0301 	orr.w	r3, r3, #1
 801d1d4:	81a3      	strh	r3, [r4, #12]
 801d1d6:	89a3      	ldrh	r3, [r4, #12]
 801d1d8:	431d      	orrs	r5, r3
 801d1da:	81a5      	strh	r5, [r4, #12]
 801d1dc:	e7cf      	b.n	801d17e <__smakebuf_r+0x18>

0801d1de <_raise_r>:
 801d1de:	291f      	cmp	r1, #31
 801d1e0:	b538      	push	{r3, r4, r5, lr}
 801d1e2:	4605      	mov	r5, r0
 801d1e4:	460c      	mov	r4, r1
 801d1e6:	d904      	bls.n	801d1f2 <_raise_r+0x14>
 801d1e8:	2316      	movs	r3, #22
 801d1ea:	6003      	str	r3, [r0, #0]
 801d1ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d1f0:	bd38      	pop	{r3, r4, r5, pc}
 801d1f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d1f4:	b112      	cbz	r2, 801d1fc <_raise_r+0x1e>
 801d1f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d1fa:	b94b      	cbnz	r3, 801d210 <_raise_r+0x32>
 801d1fc:	4628      	mov	r0, r5
 801d1fe:	f000 f853 	bl	801d2a8 <_getpid_r>
 801d202:	4622      	mov	r2, r4
 801d204:	4601      	mov	r1, r0
 801d206:	4628      	mov	r0, r5
 801d208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d20c:	f000 b83a 	b.w	801d284 <_kill_r>
 801d210:	2b01      	cmp	r3, #1
 801d212:	d00a      	beq.n	801d22a <_raise_r+0x4c>
 801d214:	1c59      	adds	r1, r3, #1
 801d216:	d103      	bne.n	801d220 <_raise_r+0x42>
 801d218:	2316      	movs	r3, #22
 801d21a:	6003      	str	r3, [r0, #0]
 801d21c:	2001      	movs	r0, #1
 801d21e:	e7e7      	b.n	801d1f0 <_raise_r+0x12>
 801d220:	2100      	movs	r1, #0
 801d222:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d226:	4620      	mov	r0, r4
 801d228:	4798      	blx	r3
 801d22a:	2000      	movs	r0, #0
 801d22c:	e7e0      	b.n	801d1f0 <_raise_r+0x12>
	...

0801d230 <raise>:
 801d230:	4b02      	ldr	r3, [pc, #8]	@ (801d23c <raise+0xc>)
 801d232:	4601      	mov	r1, r0
 801d234:	6818      	ldr	r0, [r3, #0]
 801d236:	f7ff bfd2 	b.w	801d1de <_raise_r>
 801d23a:	bf00      	nop
 801d23c:	2000030c 	.word	0x2000030c

0801d240 <_fstat_r>:
 801d240:	b538      	push	{r3, r4, r5, lr}
 801d242:	4d07      	ldr	r5, [pc, #28]	@ (801d260 <_fstat_r+0x20>)
 801d244:	2300      	movs	r3, #0
 801d246:	4604      	mov	r4, r0
 801d248:	4608      	mov	r0, r1
 801d24a:	4611      	mov	r1, r2
 801d24c:	602b      	str	r3, [r5, #0]
 801d24e:	f7e5 f8a5 	bl	800239c <_fstat>
 801d252:	1c43      	adds	r3, r0, #1
 801d254:	d102      	bne.n	801d25c <_fstat_r+0x1c>
 801d256:	682b      	ldr	r3, [r5, #0]
 801d258:	b103      	cbz	r3, 801d25c <_fstat_r+0x1c>
 801d25a:	6023      	str	r3, [r4, #0]
 801d25c:	bd38      	pop	{r3, r4, r5, pc}
 801d25e:	bf00      	nop
 801d260:	2000e85c 	.word	0x2000e85c

0801d264 <_isatty_r>:
 801d264:	b538      	push	{r3, r4, r5, lr}
 801d266:	4d06      	ldr	r5, [pc, #24]	@ (801d280 <_isatty_r+0x1c>)
 801d268:	2300      	movs	r3, #0
 801d26a:	4604      	mov	r4, r0
 801d26c:	4608      	mov	r0, r1
 801d26e:	602b      	str	r3, [r5, #0]
 801d270:	f7e5 f8a4 	bl	80023bc <_isatty>
 801d274:	1c43      	adds	r3, r0, #1
 801d276:	d102      	bne.n	801d27e <_isatty_r+0x1a>
 801d278:	682b      	ldr	r3, [r5, #0]
 801d27a:	b103      	cbz	r3, 801d27e <_isatty_r+0x1a>
 801d27c:	6023      	str	r3, [r4, #0]
 801d27e:	bd38      	pop	{r3, r4, r5, pc}
 801d280:	2000e85c 	.word	0x2000e85c

0801d284 <_kill_r>:
 801d284:	b538      	push	{r3, r4, r5, lr}
 801d286:	4d07      	ldr	r5, [pc, #28]	@ (801d2a4 <_kill_r+0x20>)
 801d288:	2300      	movs	r3, #0
 801d28a:	4604      	mov	r4, r0
 801d28c:	4608      	mov	r0, r1
 801d28e:	4611      	mov	r1, r2
 801d290:	602b      	str	r3, [r5, #0]
 801d292:	f7e5 f823 	bl	80022dc <_kill>
 801d296:	1c43      	adds	r3, r0, #1
 801d298:	d102      	bne.n	801d2a0 <_kill_r+0x1c>
 801d29a:	682b      	ldr	r3, [r5, #0]
 801d29c:	b103      	cbz	r3, 801d2a0 <_kill_r+0x1c>
 801d29e:	6023      	str	r3, [r4, #0]
 801d2a0:	bd38      	pop	{r3, r4, r5, pc}
 801d2a2:	bf00      	nop
 801d2a4:	2000e85c 	.word	0x2000e85c

0801d2a8 <_getpid_r>:
 801d2a8:	f7e5 b810 	b.w	80022cc <_getpid>

0801d2ac <_init>:
 801d2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2ae:	bf00      	nop
 801d2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d2b2:	bc08      	pop	{r3}
 801d2b4:	469e      	mov	lr, r3
 801d2b6:	4770      	bx	lr

0801d2b8 <_fini>:
 801d2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2ba:	bf00      	nop
 801d2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d2be:	bc08      	pop	{r3}
 801d2c0:	469e      	mov	lr, r3
 801d2c2:	4770      	bx	lr
